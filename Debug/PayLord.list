
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08015e58  08015e58  00016e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166c8  080166c8  00018220  2**0
                  CONTENTS
  4 .ARM          00000008  080166c8  080166c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166d0  080166d0  00018220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080166d0  080166d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080166d4  080166d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  080166d8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016dc  20000220  080168f8  00018220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018fc  080168f8  000188fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7f5  00000000  00000000  00018250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3b  00000000  00000000  00033a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00037480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001066  00000000  00000000  00038970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026eb4  00000000  00000000  000399d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d685  00000000  00000000  0006088a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e549a  00000000  00000000  0007df0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001633a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075f8  00000000  00000000  001633ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015e40 	.word	0x08015e40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08015e40 	.word	0x08015e40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint32_t last_freq_check_time = 0;
static float execution_frequency = 0.0f;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f008 fb61 	bl	80099c4 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f008 fb3d 	bl	80099c4 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00e fd5c 	bl	800fe1e <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                HAL_UART_Transmit(&huart2, (uint8_t*)freq_msg, strlen(freq_msg), 100);
            }

*/

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000023c 	.word	0x2000023c
 80013dc:	20000240 	.word	0x20000240
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f012 fc3f 	bl	8013c98 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000240 	.word	0x20000240
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 f951 	bl	8009748 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f006 fb5e 	bl	8007b68 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f008 f805 	bl	80094c0 <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f006 fb56 	bl	8007b68 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f008 fa77 	bl	80099c4 <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f008 f9de 	bl	80099c4 <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f008 f89d 	bl	80097d0 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f008 f878 	bl	80097d0 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000240 	.word	0x20000240
 80016fc:	2000023c 	.word	0x2000023c
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f008 f854 	bl	80097d0 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f006 fa18 	bl	8007b68 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f006 fa06 	bl	8007b68 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000023c 	.word	0x2000023c
 800178c:	20000240 	.word	0x20000240
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
*/


    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f008 f8f8 	bl	80099c4 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000240 	.word	0x20000240
 80017f4:	2000023c 	.word	0x2000023c
 80017f8:	20001638 	.word	0x20001638
 80017fc:	20000244 	.word	0x20000244
 8001800:	200016c8 	.word	0x200016c8

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f006 f990 	bl	8007b50 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f006 f980 	bl	8007b50 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000240 	.word	0x20000240
 8001890:	20000244 	.word	0x20000244
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000240 	.word	0x20000240
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000240 	.word	0x20000240
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	BMI->flags.isAccelDmaComplete = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	709a      	strb	r2, [r3, #2]
	BMI->flags.isGyroDmaComplete = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	711a      	strb	r2, [r3, #4]
	is_time_updated = 0;
 800207e:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <bmi088_init+0xbc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <bmi088_init+0xc0>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <bmi088_init+0x52>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002096:	2101      	movs	r1, #1
 8002098:	2018      	movs	r0, #24
 800209a:	f00c fe39 	bl	800ed10 <calloc>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6918      	ldr	r0, [r3, #16]
 80020aa:	2332      	movs	r3, #50	@ 0x32
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	2200      	movs	r2, #0
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f007 fc81 	bl	80099c4 <HAL_I2C_Mem_Read>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6918      	ldr	r0, [r3, #16]
 80020ca:	2332      	movs	r3, #50	@ 0x32
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	3301      	adds	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	2200      	movs	r2, #0
 80020de:	21d0      	movs	r1, #208	@ 0xd0
 80020e0:	f007 fc70 	bl	80099c4 <HAL_I2C_Mem_Read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	2b1e      	cmp	r3, #30
 80020ec:	d003      	beq.n	80020f6 <bmi088_init+0xa2>
	{
		ret_val = ret_val | 0x01;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d003      	beq.n	8002104 <bmi088_init+0xb0>
	{
		ret_val = ret_val | 0x02;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000245 	.word	0x20000245
 8002114:	20000246 	.word	0x20000246

08002118 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f006 fa7b 	bl	8008622 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002132:	4618      	mov	r0, r3
 8002134:	f006 fa75 	bl	8008622 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800213c:	2301      	movs	r3, #1
 800213e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6918      	ldr	r0, [r3, #16]
 8002144:	2364      	movs	r3, #100	@ 0x64
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2301      	movs	r3, #1
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	227c      	movs	r2, #124	@ 0x7c
 8002156:	2130      	movs	r1, #48	@ 0x30
 8002158:	f007 fb3a 	bl	80097d0 <HAL_I2C_Mem_Write>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4313      	orrs	r3, r2
 8002164:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6918      	ldr	r0, [r3, #16]
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	227d      	movs	r2, #125	@ 0x7d
 8002180:	2130      	movs	r1, #48	@ 0x30
 8002182:	f007 fb25 	bl	80097d0 <HAL_I2C_Mem_Write>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4313      	orrs	r3, r2
 800218e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002190:	2014      	movs	r0, #20
 8002192:	f005 fce9 	bl	8007b68 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002196:	23b6      	movs	r3, #182	@ 0xb6
 8002198:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6918      	ldr	r0, [r3, #16]
 800219e:	2364      	movs	r3, #100	@ 0x64
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	227e      	movs	r2, #126	@ 0x7e
 80021b0:	2130      	movs	r1, #48	@ 0x30
 80021b2:	f007 fb0d 	bl	80097d0 <HAL_I2C_Mem_Write>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4313      	orrs	r3, r2
 80021be:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <bmi088_config+0xb4>
 80021c6:	4bb4      	ldr	r3, [pc, #720]	@ (8002498 <bmi088_config+0x380>)
 80021c8:	22a4      	movs	r2, #164	@ 0xa4
 80021ca:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f005 fccb 	bl	8007b68 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021d2:	23b0      	movs	r3, #176	@ 0xb0
 80021d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6918      	ldr	r0, [r3, #16]
 80021da:	2364      	movs	r3, #100	@ 0x64
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	227e      	movs	r2, #126	@ 0x7e
 80021ec:	2130      	movs	r1, #48	@ 0x30
 80021ee:	f007 faef 	bl	80097d0 <HAL_I2C_Mem_Write>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <bmi088_config+0xf0>
 8002202:	4ba5      	ldr	r3, [pc, #660]	@ (8002498 <bmi088_config+0x380>)
 8002204:	22a9      	movs	r2, #169	@ 0xa9
 8002206:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f005 fcad 	bl	8007b68 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800220e:	23b6      	movs	r3, #182	@ 0xb6
 8002210:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6918      	ldr	r0, [r3, #16]
 8002216:	2364      	movs	r3, #100	@ 0x64
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2301      	movs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	2214      	movs	r2, #20
 8002228:	21d0      	movs	r1, #208	@ 0xd0
 800222a:	f007 fad1 	bl	80097d0 <HAL_I2C_Mem_Write>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4313      	orrs	r3, r2
 8002236:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <bmi088_config+0x12c>
 800223e:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <bmi088_config+0x380>)
 8002240:	22ae      	movs	r2, #174	@ 0xae
 8002242:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f005 fc8f 	bl	8007b68 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b9b      	ldrb	r3, [r3, #14]
 800224e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6918      	ldr	r0, [r3, #16]
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	220f      	movs	r2, #15
 8002266:	21d0      	movs	r1, #208	@ 0xd0
 8002268:	f007 fab2 	bl	80097d0 <HAL_I2C_Mem_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <bmi088_config+0x16a>
 800227c:	4b86      	ldr	r3, [pc, #536]	@ (8002498 <bmi088_config+0x380>)
 800227e:	22b4      	movs	r2, #180	@ 0xb4
 8002280:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6918      	ldr	r0, [r3, #16]
 800228c:	2314      	movs	r3, #20
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2301      	movs	r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	2210      	movs	r2, #16
 800229e:	21d0      	movs	r1, #208	@ 0xd0
 80022a0:	f007 fa96 	bl	80097d0 <HAL_I2C_Mem_Write>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <bmi088_config+0x1a2>
 80022b4:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <bmi088_config+0x380>)
 80022b6:	22b8      	movs	r2, #184	@ 0xb8
 80022b8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7b1b      	ldrb	r3, [r3, #12]
 80022be:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6918      	ldr	r0, [r3, #16]
 80022c4:	2314      	movs	r3, #20
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2301      	movs	r3, #1
 80022d4:	2211      	movs	r2, #17
 80022d6:	21d0      	movs	r1, #208	@ 0xd0
 80022d8:	f007 fa7a 	bl	80097d0 <HAL_I2C_Mem_Write>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <bmi088_config+0x1da>
 80022ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <bmi088_config+0x380>)
 80022ee:	22bc      	movs	r2, #188	@ 0xbc
 80022f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022f2:	2014      	movs	r0, #20
 80022f4:	f005 fc38 	bl	8007b68 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6918      	ldr	r0, [r3, #16]
 8002300:	2314      	movs	r3, #20
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2215      	movs	r2, #21
 8002312:	21d0      	movs	r1, #208	@ 0xd0
 8002314:	f007 fa5c 	bl	80097d0 <HAL_I2C_Mem_Write>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4313      	orrs	r3, r2
 8002320:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <bmi088_config+0x216>
 8002328:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <bmi088_config+0x380>)
 800232a:	22c2      	movs	r2, #194	@ 0xc2
 800232c:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800232e:	2305      	movs	r3, #5
 8002330:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6918      	ldr	r0, [r3, #16]
 8002336:	2314      	movs	r3, #20
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	2301      	movs	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	2216      	movs	r2, #22
 8002348:	21d0      	movs	r1, #208	@ 0xd0
 800234a:	f007 fa41 	bl	80097d0 <HAL_I2C_Mem_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	4313      	orrs	r3, r2
 8002356:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <bmi088_config+0x24c>
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <bmi088_config+0x380>)
 8002360:	22c6      	movs	r2, #198	@ 0xc6
 8002362:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002364:	2381      	movs	r3, #129	@ 0x81
 8002366:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6918      	ldr	r0, [r3, #16]
 800236c:	2314      	movs	r3, #20
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2301      	movs	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2218      	movs	r2, #24
 800237e:	21d0      	movs	r1, #208	@ 0xd0
 8002380:	f007 fa26 	bl	80097d0 <HAL_I2C_Mem_Write>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4313      	orrs	r3, r2
 800238c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <bmi088_config+0x282>
 8002394:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <bmi088_config+0x380>)
 8002396:	22ca      	movs	r2, #202	@ 0xca
 8002398:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800239a:	2304      	movs	r3, #4
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6918      	ldr	r0, [r3, #16]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	227d      	movs	r2, #125	@ 0x7d
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f007 fa0b 	bl	80097d0 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <bmi088_config+0x2b8>
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <bmi088_config+0x380>)
 80023cc:	22cf      	movs	r2, #207	@ 0xcf
 80023ce:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023d0:	2008      	movs	r0, #8
 80023d2:	f005 fbc9 	bl	8007b68 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7a1b      	ldrb	r3, [r3, #8]
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6918      	ldr	r0, [r3, #16]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	227c      	movs	r2, #124	@ 0x7c
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f007 f9ec 	bl	80097d0 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <bmi088_config+0x2f6>
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <bmi088_config+0x380>)
 800240a:	22d4      	movs	r2, #212	@ 0xd4
 800240c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800240e:	2008      	movs	r0, #8
 8002410:	f005 fbaa 	bl	8007b68 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a9b      	ldrb	r3, [r3, #10]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	b25a      	sxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7adb      	ldrb	r3, [r3, #11]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b25b      	sxtb	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6918      	ldr	r0, [r3, #16]
 800242e:	2314      	movs	r3, #20
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2130      	movs	r1, #48	@ 0x30
 8002442:	f007 f9c5 	bl	80097d0 <HAL_I2C_Mem_Write>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4313      	orrs	r3, r2
 800244e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <bmi088_config+0x344>
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <bmi088_config+0x380>)
 8002458:	22d9      	movs	r2, #217	@ 0xd9
 800245a:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7a5b      	ldrb	r3, [r3, #9]
 8002460:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6918      	ldr	r0, [r3, #16]
 8002466:	2314      	movs	r3, #20
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2301      	movs	r3, #1
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	2241      	movs	r2, #65	@ 0x41
 8002478:	2130      	movs	r1, #48	@ 0x30
 800247a:	f007 f9a9 	bl	80097d0 <HAL_I2C_Mem_Write>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	4313      	orrs	r3, r2
 8002486:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <bmi088_config+0x384>
 800248e:	4b02      	ldr	r3, [pc, #8]	@ (8002498 <bmi088_config+0x380>)
 8002490:	22dd      	movs	r2, #221	@ 0xdd
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e002      	b.n	800249c <bmi088_config+0x384>
 8002496:	bf00      	nop
 8002498:	20000248 	.word	0x20000248

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800249c:	230a      	movs	r3, #10
 800249e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6918      	ldr	r0, [r3, #16]
 80024a4:	2314      	movs	r3, #20
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2253      	movs	r2, #83	@ 0x53
 80024b6:	2130      	movs	r1, #48	@ 0x30
 80024b8:	f007 f98a 	bl	80097d0 <HAL_I2C_Mem_Write>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024c6:	2304      	movs	r3, #4
 80024c8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6918      	ldr	r0, [r3, #16]
 80024ce:	2314      	movs	r3, #20
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	2301      	movs	r3, #1
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	2258      	movs	r2, #88	@ 0x58
 80024e0:	2130      	movs	r1, #48	@ 0x30
 80024e2:	f007 f975 	bl	80097d0 <HAL_I2C_Mem_Write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f006 f885 	bl	8008606 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002502:	4618      	mov	r0, r3
 8002504:	f006 f87f 	bl	8008606 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002508:	2046      	movs	r0, #70	@ 0x46
 800250a:	f005 fb2d 	bl	8007b68 <HAL_Delay>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop

08002518 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
	if(BMI->flags.isAccelUpdated && !BMI->flags.isDmaTransferActive)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01d      	beq.n	8002564 <bmi088_update+0x4c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <bmi088_update+0x4c>
	{
		// Start DMA transfer for accelerometer data (X,Y,Z + sensor time)
		BMI->flags.isDmaTransferActive = 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	711a      	strb	r2, [r3, #4]
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_accel_data, 9);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6918      	ldr	r0, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3384      	adds	r3, #132	@ 0x84
 800253e:	2209      	movs	r2, #9
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2212      	movs	r2, #18
 8002548:	2130      	movs	r1, #48	@ 0x30
 800254a:	f007 fc6d 	bl	8009e28 <HAL_I2C_Mem_Read_DMA>
 800254e:	4603      	mov	r3, r0
 8002550:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <bmi088_update+0x4c>
		{
			BMI->flags.isDmaTransferActive = 0;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	711a      	strb	r2, [r3, #4]
			BMI->flags.isAccelUpdated = 0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	705a      	strb	r2, [r3, #1]
		}
	}

	if(BMI->flags.isGyroUpdated && !BMI->flags.isDmaTransferActive && is_time_updated)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d030      	beq.n	80025ce <bmi088_update+0xb6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12c      	bne.n	80025ce <bmi088_update+0xb6>
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <bmi088_update+0xa8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d027      	beq.n	80025ce <bmi088_update+0xb6>
	{
		if(is_starded){
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <bmi088_update+0xac>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01f      	beq.n	80025c8 <bmi088_update+0xb0>
			// Start DMA transfer for gyroscope data
			BMI->flags.isDmaTransferActive = 1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	711a      	strb	r2, [r3, #4]
			HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_gyro_data, 6);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6918      	ldr	r0, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	338d      	adds	r3, #141	@ 0x8d
 8002596:	2206      	movs	r2, #6
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	2202      	movs	r2, #2
 80025a0:	21d0      	movs	r1, #208	@ 0xd0
 80025a2:	f007 fc41 	bl	8009e28 <HAL_I2C_Mem_Read_DMA>
 80025a6:	4603      	mov	r3, r0
 80025a8:	77bb      	strb	r3, [r7, #30]
			if(ret != HAL_OK)
 80025aa:	7fbb      	ldrb	r3, [r7, #30]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <bmi088_update+0xb6>
			{
				BMI->flags.isDmaTransferActive = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	711a      	strb	r2, [r3, #4]
				BMI->flags.isGyroUpdated = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <bmi088_update+0xb6>
 80025be:	bf00      	nop
 80025c0:	20000245 	.word	0x20000245
 80025c4:	20000246 	.word	0x20000246
			}
		}
		else
		{
			BMI->flags.isGyroUpdated = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		}
	}

	// Process accelerometer data if DMA transfer is complete
	if(BMI->flags.isAccelDmaComplete)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	789b      	ldrb	r3, [r3, #2]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81c3 	beq.w	800295e <bmi088_update+0x446>
	{
		uint32_t sensorTime = (BMI->datas.raw_accel_data[8] << 16) | (BMI->datas.raw_accel_data[7] << 8) | BMI->datas.raw_accel_data[6];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80025de:	041a      	lsls	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	4313      	orrs	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	f892 208a 	ldrb.w	r2, [r2, #138]	@ 0x8a
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
		BMI->datas.current_time = (float)sensorTime * 39.0625 / 1000000.0;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffc1 	bl	8000588 <__aeabi_f2d>
 8002606:	a3cb      	add	r3, pc, #812	@ (adr r3, 8002934 <bmi088_update+0x41c>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fe f814 	bl	8000638 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	a3c8      	add	r3, pc, #800	@ (adr r3, 800293c <bmi088_update+0x424>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe f935 	bl	800088c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fafd 	bl	8000c28 <__aeabi_d2f>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	66da      	str	r2, [r3, #108]	@ 0x6c

		int16_t acc_x_16 = (BMI->datas.raw_accel_data[1] << 8) | BMI->datas.raw_accel_data[0];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b21a      	sxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	82fb      	strh	r3, [r7, #22]
		int16_t acc_y_16 = (BMI->datas.raw_accel_data[3] << 8) | BMI->datas.raw_accel_data[2];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	82bb      	strh	r3, [r7, #20]
		int16_t acc_z_16 = (BMI->datas.raw_accel_data[5] << 8) | BMI->datas.raw_accel_data[4];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	827b      	strh	r3, [r7, #18]

		BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 8002676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ee17 0a90 	vmov	r0, s15
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4ba2      	ldr	r3, [pc, #648]	@ (8002918 <bmi088_update+0x400>)
 8002690:	f7fe f8fc 	bl	800088c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b9e      	ldr	r3, [pc, #632]	@ (800291c <bmi088_update+0x404>)
 80026a2:	f7fd ffc9 	bl	8000638 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b9b      	ldr	r3, [pc, #620]	@ (8002920 <bmi088_update+0x408>)
 80026b4:	f7fd ffc0 	bl	8000638 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7a5b      	ldrb	r3, [r3, #9]
 80026c4:	3301      	adds	r3, #1
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd ff59 	bl	8000588 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ec43 2b11 	vmov	d1, r2, r3
 80026de:	ed9f 0b8a 	vldr	d0, [pc, #552]	@ 8002908 <bmi088_update+0x3f0>
 80026e2:	f011 fad9 	bl	8013c98 <pow>
 80026e6:	ec53 2b10 	vmov	r2, r3, d0
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <bmi088_update+0x40c>)
 8002700:	f7fd fde4 	bl	80002cc <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	a380      	add	r3, pc, #512	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff91 	bl	8000638 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b7e      	ldr	r3, [pc, #504]	@ (800291c <bmi088_update+0x404>)
 8002724:	f7fe f8b2 	bl	800088c <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe fa7a 	bl	8000c28 <__aeabi_d2f>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
		BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 800273a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002746:	ee17 0a90 	vmov	r0, s15
 800274a:	f7fd ff1d 	bl	8000588 <__aeabi_f2d>
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b71      	ldr	r3, [pc, #452]	@ (8002918 <bmi088_update+0x400>)
 8002754:	f7fe f89a 	bl	800088c <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	4b6d      	ldr	r3, [pc, #436]	@ (800291c <bmi088_update+0x404>)
 8002766:	f7fd ff67 	bl	8000638 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <bmi088_update+0x408>)
 8002778:	f7fd ff5e 	bl	8000638 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7a5b      	ldrb	r3, [r3, #9]
 8002788:	3301      	adds	r3, #1
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	ee17 0a90 	vmov	r0, s15
 8002796:	f7fd fef7 	bl	8000588 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	ec43 2b11 	vmov	d1, r2, r3
 80027a2:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8002908 <bmi088_update+0x3f0>
 80027a6:	f011 fa77 	bl	8013c98 <pow>
 80027aa:	ec53 2b10 	vmov	r2, r3, d0
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <bmi088_update+0x410>)
 80027c4:	f7fd fd82 	bl	80002cc <__adddf3>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff2f 	bl	8000638 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b4d      	ldr	r3, [pc, #308]	@ (800291c <bmi088_update+0x404>)
 80027e8:	f7fe f850 	bl	800088c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe fa18 	bl	8000c28 <__aeabi_d2f>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	661a      	str	r2, [r3, #96]	@ 0x60
		BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80027fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	ee17 0a90 	vmov	r0, s15
 800280e:	f7fd febb 	bl	8000588 <__aeabi_f2d>
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b40      	ldr	r3, [pc, #256]	@ (8002918 <bmi088_update+0x400>)
 8002818:	f7fe f838 	bl	800088c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <bmi088_update+0x404>)
 800282a:	f7fd ff05 	bl	8000638 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <bmi088_update+0x408>)
 800283c:	f7fd fefc 	bl	8000638 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7a5b      	ldrb	r3, [r3, #9]
 800284c:	3301      	adds	r3, #1
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ee17 0a90 	vmov	r0, s15
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	ec43 2b11 	vmov	d1, r2, r3
 8002866:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8002908 <bmi088_update+0x3f0>
 800286a:	f011 fa15 	bl	8013c98 <pow>
 800286e:	ec53 2b10 	vmov	r2, r3, d0
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <bmi088_update+0x40c>)
 8002888:	f7fd fd1e 	bl	80002c8 <__aeabi_dsub>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	a31e      	add	r3, pc, #120	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fecd 	bl	8000638 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <bmi088_update+0x404>)
 80028ac:	f7fd ffee 	bl	800088c <__aeabi_ddiv>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f9b6 	bl	8000c28 <__aeabi_d2f>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	665a      	str	r2, [r3, #100]	@ 0x64

		if(is_starded)
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <bmi088_update+0x414>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03b      	beq.n	8002944 <bmi088_update+0x42c>
		{
			BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d502      	bpl.n	80028ec <bmi088_update+0x3d4>
 80028e6:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002930 <bmi088_update+0x418>
 80028ea:	e007      	b.n	80028fc <bmi088_update+0x3e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
 8002902:	e022      	b.n	800294a <bmi088_update+0x432>
 8002904:	f3af 8000 	nop.w
 8002908:	00000000 	.word	0x00000000
 800290c:	40000000 	.word	0x40000000
 8002910:	51eb851f 	.word	0x51eb851f
 8002914:	40239eb8 	.word	0x40239eb8
 8002918:	40e00000 	.word	0x40e00000
 800291c:	408f4000 	.word	0x408f4000
 8002920:	3ff80000 	.word	0x3ff80000
 8002924:	40100000 	.word	0x40100000
 8002928:	402e0000 	.word	0x402e0000
 800292c:	20000246 	.word	0x20000246
	...
 8002938:	40438800 	.word	0x40438800
 800293c:	00000000 	.word	0x00000000
 8002940:	412e8480 	.word	0x412e8480
		}
		else
		{
			is_starded = 1;
 8002944:	4bac      	ldr	r3, [pc, #688]	@ (8002bf8 <bmi088_update+0x6e0>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
		}

		BMI->datas.last_time = BMI->datas.current_time;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	671a      	str	r2, [r3, #112]	@ 0x70
		BMI->flags.isAccelDmaComplete = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	709a      	strb	r2, [r3, #2]
		is_time_updated = 1;
 8002958:	4ba8      	ldr	r3, [pc, #672]	@ (8002bfc <bmi088_update+0x6e4>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]

		// Sıcaklık okuma kaldırıldı - sadece ivme ve gyro verisi kullanılacak
	}

	// Process gyroscope data if DMA transfer is complete
	if(BMI->flags.isGyroDmaComplete && is_time_updated)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 813b 	beq.w	8002bde <bmi088_update+0x6c6>
 8002968:	4ba4      	ldr	r3, [pc, #656]	@ (8002bfc <bmi088_update+0x6e4>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8135 	beq.w	8002bde <bmi088_update+0x6c6>
	{
		int16_t gyro_x_16 = (BMI->datas.raw_gyro_data[1] << 8) | BMI->datas.raw_gyro_data[0];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	823b      	strh	r3, [r7, #16]
		int16_t gyro_y_16 = (BMI->datas.raw_gyro_data[3] << 8) | BMI->datas.raw_gyro_data[2];
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	81fb      	strh	r3, [r7, #14]
		int16_t gyro_z_16 = (BMI->datas.raw_gyro_data[5] << 8) | BMI->datas.raw_gyro_data[4];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	81bb      	strh	r3, [r7, #12]

		BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c2:	ee17 0a90 	vmov	r0, s15
 80029c6:	f7fd fddf 	bl	8000588 <__aeabi_f2d>
 80029ca:	a387      	add	r3, pc, #540	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fd ff5c 	bl	800088c <__aeabi_ddiv>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7b9b      	ldrb	r3, [r3, #14]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029e6:	4113      	asrs	r3, r2
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdc8 	bl	8000588 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4620      	mov	r0, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7fd fe1a 	bl	8000638 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdb8 	bl	8000588 <__aeabi_f2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc52 	bl	80002c8 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	a370      	add	r3, pc, #448	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd fe01 	bl	8000638 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8f3 	bl	8000c28 <__aeabi_d2f>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	61da      	str	r2, [r3, #28]
		BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a54:	ee17 0a90 	vmov	r0, s15
 8002a58:	f7fd fd96 	bl	8000588 <__aeabi_f2d>
 8002a5c:	a362      	add	r3, pc, #392	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd ff13 	bl	800088c <__aeabi_ddiv>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7b9b      	ldrb	r3, [r3, #14]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a78:	4113      	asrs	r3, r2
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	ee17 0a90 	vmov	r0, s15
 8002a86:	f7fd fd7f 	bl	8000588 <__aeabi_f2d>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fdd1 	bl	8000638 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd6f 	bl	8000588 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fc09 	bl	80002c8 <__aeabi_dsub>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	a34c      	add	r3, pc, #304	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fdb8 	bl	8000638 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f8aa 	bl	8000c28 <__aeabi_d2f>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]
		BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	ee17 0a90 	vmov	r0, s15
 8002aea:	f7fd fd4d 	bl	8000588 <__aeabi_f2d>
 8002aee:	a33e      	add	r3, pc, #248	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd feca 	bl	800088c <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b9b      	ldrb	r3, [r3, #14]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b0a:	4113      	asrs	r3, r2
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee17 0a90 	vmov	r0, s15
 8002b18:	f7fd fd36 	bl	8000588 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4620      	mov	r0, r4
 8002b22:	4629      	mov	r1, r5
 8002b24:	f7fd fd88 	bl	8000638 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd26 	bl	8000588 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fbc0 	bl	80002c8 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	a327      	add	r3, pc, #156	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fd6f 	bl	8000638 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f861 	bl	8000c28 <__aeabi_d2f>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

		Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z, BMI->datas.acc_y, -BMI->datas.acc_x, BMI->datas.acc_z, BMI->datas.delta_time);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b78:	eef1 6a67 	vneg.f32	s13, s15
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	edd3 5a18 	vldr	s11, [r3, #96]	@ 0x60
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002b8e:	eef1 7a67 	vneg.f32	s15, s15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	ed93 5a19 	vldr	s10, [r3, #100]	@ 0x64
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	edd3 4a1d 	vldr	s9, [r3, #116]	@ 0x74
 8002b9e:	eeb0 3a64 	vmov.f32	s6, s9
 8002ba2:	eef0 2a45 	vmov.f32	s5, s10
 8002ba6:	eeb0 2a67 	vmov.f32	s4, s15
 8002baa:	eef0 1a65 	vmov.f32	s3, s11
 8002bae:	eeb0 1a46 	vmov.f32	s2, s12
 8002bb2:	eef0 0a66 	vmov.f32	s1, s13
 8002bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bba:	f003 f96d 	bl	8005e98 <Orientation_Update>
		BMI->datas.theta = quaternionToThetaZ();
 8002bbe:	f003 fddf 	bl	8006780 <quaternionToThetaZ>
 8002bc2:	eef0 7a40 	vmov.f32	s15, s0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		is_gyro_renewed = 1;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <bmi088_update+0x6e8>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]

		BMI->flags.isGyroDmaComplete = 0;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	70da      	strb	r2, [r3, #3]
		is_time_updated = 0;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <bmi088_update+0x6e4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
	}
}
 8002bde:	bf00      	nop
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40dfffc0 	.word	0x40dfffc0
 8002bf0:	a0000000 	.word	0xa0000000
 8002bf4:	3f91df46 	.word	0x3f91df46
 8002bf8:	20000246 	.word	0x20000246
 8002bfc:	20000245 	.word	0x20000245
 8002c00:	20000247 	.word	0x20000247

08002c04 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
	uint32_t timeout_start = HAL_GetTick();
 8002c44:	f004 ff84 	bl	8007b50 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]
	const uint32_t TIMEOUT_MS = 10000; // 10 saniye timeout
 8002c4a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002c4e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		// Timeout kontrolü
		if(HAL_GetTick() - timeout_start > TIMEOUT_MS)
 8002c50:	f004 ff7e 	bl	8007b50 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d35e      	bcc.n	8002d1e <get_offset+0xe6>
		{

			return;
		}
		
		bmi088_update(BMI);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fc59 	bl	8002518 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002c66:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <get_offset+0xf0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d1ef      	bne.n	8002c50 <get_offset+0x18>
		{
			if(offsetCounter < 1000)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c76:	da2d      	bge.n	8002cd4 <get_offset+0x9c>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <get_offset+0xf0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e7bd      	b.n	8002c50 <get_offset+0x18>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d2c <get_offset+0xf4>
 8002ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce8:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d2c <get_offset+0xf4>
 8002cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d00:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d2c <get_offset+0xf4>
 8002d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d18:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002d1c:	e000      	b.n	8002d20 <get_offset+0xe8>
			return;
 8002d1e:	bf00      	nop
		}

	}
}
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000247 	.word	0x20000247
 8002d2c:	447a0000 	.word	0x447a0000

08002d30 <bmi088_accel_dma_complete_callback>:
/**
 * @brief Accelerometer DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_accel_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelDmaComplete = 1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	709a      	strb	r2, [r3, #2]
	BMI->flags.isDmaTransferActive = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	711a      	strb	r2, [r3, #4]
	BMI->flags.isAccelUpdated = 0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	705a      	strb	r2, [r3, #1]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <bmi088_gyro_dma_complete_callback>:
/**
 * @brief Gyroscope DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_gyro_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroDmaComplete = 1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	711a      	strb	r2, [r3, #4]
	BMI->flags.isGyroUpdated = 0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the connected uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 8002d86:	4b40      	ldr	r3, [pc, #256]	@ (8002e88 <e22_init+0x10c>)
 8002d88:	22c0      	movs	r2, #192	@ 0xc0
 8002d8a:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e88 <e22_init+0x10c>)
 8002d8e:	2203      	movs	r2, #3
 8002d90:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x06;	//6 bytes will be configured.
 8002d92:	4b3d      	ldr	r3, [pc, #244]	@ (8002e88 <e22_init+0x10c>)
 8002d94:	2206      	movs	r2, #6
 8002d96:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7c5b      	ldrb	r3, [r3, #17]
 8002d9c:	b25a      	sxtb	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7c1b      	ldrb	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	b25a      	sxtb	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7bdb      	ldrb	r3, [r3, #15]
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b33      	ldr	r3, [pc, #204]	@ (8002e88 <e22_init+0x10c>)
 8002dba:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7d1b      	ldrb	r3, [r3, #20]
 8002dc0:	b25a      	sxtb	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7cdb      	ldrb	r3, [r3, #19]
 8002dc6:	015b      	lsls	r3, r3, #5
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b25a      	sxtb	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7c9b      	ldrb	r3, [r3, #18]
 8002dd2:	019b      	lsls	r3, r3, #6
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e88 <e22_init+0x10c>)
 8002dde:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7d5a      	ldrb	r2, [r3, #21]
 8002de4:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <e22_init+0x10c>)
 8002de6:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7edb      	ldrb	r3, [r3, #27]
 8002dec:	b25a      	sxtb	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7e9b      	ldrb	r3, [r3, #26]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b25a      	sxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7e5b      	ldrb	r3, [r3, #25]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b25a      	sxtb	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7e1b      	ldrb	r3, [r3, #24]
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b25a      	sxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7ddb      	ldrb	r3, [r3, #23]
 8002e16:	019b      	lsls	r3, r3, #6
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7d9b      	ldrb	r3, [r3, #22]
 8002e22:	01db      	lsls	r3, r3, #7
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <e22_init+0x10c>)
 8002e2e:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8b9b      	ldrh	r3, [r3, #28]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <e22_init+0x10c>)
 8002e3c:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8b9b      	ldrh	r3, [r3, #28]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <e22_init+0x10c>)
 8002e46:	721a      	strb	r2, [r3, #8]

	// UART transmits the configuration datas.
	// Try configuring the telemetry module for a ferw times because it's sometimes not working well.
    e22_chMode_config(lora_conf_struct);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f81f 	bl	8002e8c <e22_chMode_config>
    HAL_Delay(20);
 8002e4e:	2014      	movs	r0, #20
 8002e50:	f004 fe8a 	bl	8007b68 <HAL_Delay>
	for(int i = 0; i < 5; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e00e      	b.n	8002e78 <e22_init+0xfc>
	{
		HAL_UART_Transmit(huart, data_packet, data_packet[2] + 3, 50);
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <e22_init+0x10c>)
 8002e5c:	789b      	ldrb	r3, [r3, #2]
 8002e5e:	3303      	adds	r3, #3
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	2332      	movs	r3, #50	@ 0x32
 8002e64:	4908      	ldr	r1, [pc, #32]	@ (8002e88 <e22_init+0x10c>)
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	f00a fccc 	bl	800d804 <HAL_UART_Transmit>
		HAL_Delay(10);
 8002e6c:	200a      	movs	r0, #10
 8002e6e:	f004 fe7b 	bl	8007b68 <HAL_Delay>
	for(int i = 0; i < 5; i++)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	dded      	ble.n	8002e5a <e22_init+0xde>
	}

#ifdef DEBUG_TELEM_VIA_TTL
	view_e22_response(&TELEM_UART_HNDLR, &TTL_HNDLR);
#endif
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	2000024c 	.word	0x2000024c

08002e8c <e22_chMode_config>:
  * @brief  Changes the mode to config.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_config(e22_conf_struct_t *lora_conf_struct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_RESET);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	891b      	ldrh	r3, [r3, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f006 fadc 	bl	800945c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_SET);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6858      	ldr	r0, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	895b      	ldrh	r3, [r3, #10]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f006 fad4 	bl	800945c <HAL_GPIO_WritePin>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <e22_chMode_transmit>:
  * @brief  Changes the mode to transmit.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_transmit(e22_conf_struct_t *lora_conf_struct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_RESET);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	891b      	ldrh	r3, [r3, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f006 fac4 	bl	800945c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_RESET);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6858      	ldr	r0, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	895b      	ldrh	r3, [r3, #10]
 8002edc:	2200      	movs	r2, #0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f006 fabc 	bl	800945c <HAL_GPIO_WritePin>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002ef8:	68b8      	ldr	r0, [r7, #8]
 8002efa:	f000 f977 	bl	80031ec <calculate_total_acceleration>
 8002efe:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002f02:	4ba2      	ldr	r3, [pc, #648]	@ (800318c <flight_algorithm_update+0x2a0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	f200 8165 	bhi.w	80031d6 <flight_algorithm_update+0x2ea>
 8002f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <flight_algorithm_update+0x28>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f29 	.word	0x08002f29
 8002f18:	08002fab 	.word	0x08002fab
 8002f1c:	0800302b 	.word	0x0800302b
 8002f20:	080031d7 	.word	0x080031d7
 8002f24:	080031d7 	.word	0x080031d7
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002f28:	4b99      	ldr	r3, [pc, #612]	@ (8003190 <flight_algorithm_update+0x2a4>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	dd15      	ble.n	8002f68 <flight_algorithm_update+0x7c>
                current_phase = PHASE_BOOST;
 8002f3c:	4b93      	ldr	r3, [pc, #588]	@ (800318c <flight_algorithm_update+0x2a0>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002f42:	4b94      	ldr	r3, [pc, #592]	@ (8003194 <flight_algorithm_update+0x2a8>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002f48:	f004 fe02 	bl	8007b50 <HAL_GetTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4a92      	ldr	r2, [pc, #584]	@ (8003198 <flight_algorithm_update+0x2ac>)
 8002f50:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002f52:	4b92      	ldr	r3, [pc, #584]	@ (800319c <flight_algorithm_update+0x2b0>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800319c <flight_algorithm_update+0x2b0>)
 8002f5e:	801a      	strh	r2, [r3, #0]
                durum_verisi = 2;
 8002f60:	4b8f      	ldr	r3, [pc, #572]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
				flight_start_time = HAL_GetTick();
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
				durum_verisi = 2;
            }
            break;
 8002f66:	e136      	b.n	80031d6 <flight_algorithm_update+0x2ea>
            else if(sensor_fusion->velocity > RISING_VELOCITY_TRESHOLD){
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f6e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	dc00      	bgt.n	8002f7e <flight_algorithm_update+0x92>
            break;
 8002f7c:	e12b      	b.n	80031d6 <flight_algorithm_update+0x2ea>
            	current_phase = PHASE_BOOST;
 8002f7e:	4b83      	ldr	r3, [pc, #524]	@ (800318c <flight_algorithm_update+0x2a0>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
 8002f84:	4b83      	ldr	r3, [pc, #524]	@ (8003194 <flight_algorithm_update+0x2a8>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
				flight_start_time = HAL_GetTick();
 8002f8a:	f004 fde1 	bl	8007b50 <HAL_GetTick>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4a81      	ldr	r2, [pc, #516]	@ (8003198 <flight_algorithm_update+0x2ac>)
 8002f92:	6013      	str	r3, [r2, #0]
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002f94:	4b81      	ldr	r3, [pc, #516]	@ (800319c <flight_algorithm_update+0x2b0>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800319c <flight_algorithm_update+0x2b0>)
 8002fa0:	801a      	strh	r2, [r3, #0]
				durum_verisi = 2;
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]
            break;
 8002fa8:	e115      	b.n	80031d6 <flight_algorithm_update+0x2ea>

        case PHASE_BOOST:
            // After boost phase (typically 7-9 seconds)
            if (HAL_GetTick() - flight_start_time > 8000) {
 8002faa:	f004 fdd1 	bl	8007b50 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b79      	ldr	r3, [pc, #484]	@ (8003198 <flight_algorithm_update+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002fba:	d90f      	bls.n	8002fdc <flight_algorithm_update+0xf0>
                current_phase = PHASE_COAST;
 8002fbc:	4b73      	ldr	r3, [pc, #460]	@ (800318c <flight_algorithm_update+0x2a0>)
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002fc2:	4b78      	ldr	r3, [pc, #480]	@ (80031a4 <flight_algorithm_update+0x2b8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002fc8:	4b74      	ldr	r3, [pc, #464]	@ (800319c <flight_algorithm_update+0x2b0>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	4b72      	ldr	r3, [pc, #456]	@ (800319c <flight_algorithm_update+0x2b0>)
 8002fd4:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 8002fd6:	4b72      	ldr	r3, [pc, #456]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 8002fd8:	2203      	movs	r2, #3
 8002fda:	701a      	strb	r2, [r3, #0]
            }
            if(bmi->datas.acc_x < 0.0 && burnout_counter < 10){
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	d508      	bpl.n	8002ffe <flight_algorithm_update+0x112>
 8002fec:	4b6e      	ldr	r3, [pc, #440]	@ (80031a8 <flight_algorithm_update+0x2bc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	dc04      	bgt.n	8002ffe <flight_algorithm_update+0x112>
            	burnout_counter++;
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80031a8 <flight_algorithm_update+0x2bc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	4a6b      	ldr	r2, [pc, #428]	@ (80031a8 <flight_algorithm_update+0x2bc>)
 8002ffc:	6013      	str	r3, [r2, #0]
            }
            if(burnout_counter == 10){
 8002ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <flight_algorithm_update+0x2bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b0a      	cmp	r3, #10
 8003004:	f040 80c0 	bne.w	8003188 <flight_algorithm_update+0x29c>
                current_phase = PHASE_COAST;
 8003008:	4b60      	ldr	r3, [pc, #384]	@ (800318c <flight_algorithm_update+0x2a0>)
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 800300e:	4b65      	ldr	r3, [pc, #404]	@ (80031a4 <flight_algorithm_update+0x2b8>)
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8003014:	4b61      	ldr	r3, [pc, #388]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b5f      	ldr	r3, [pc, #380]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003020:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 8003022:	4b5f      	ldr	r3, [pc, #380]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 8003024:	2203      	movs	r2, #3
 8003026:	701a      	strb	r2, [r3, #0]
            }
            break;
 8003028:	e0ae      	b.n	8003188 <flight_algorithm_update+0x29c>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude && !is_armed) {
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003030:	4b5e      	ldr	r3, [pc, #376]	@ (80031ac <flight_algorithm_update+0x2c0>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	dd10      	ble.n	8003062 <flight_algorithm_update+0x176>
 8003040:	4b5b      	ldr	r3, [pc, #364]	@ (80031b0 <flight_algorithm_update+0x2c4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10c      	bne.n	8003062 <flight_algorithm_update+0x176>
                is_armed = 1;
 8003048:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <flight_algorithm_update+0x2c4>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 800304e:	4b53      	ldr	r3, [pc, #332]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b50      	ldr	r3, [pc, #320]	@ (800319c <flight_algorithm_update+0x2b0>)
 800305a:	801a      	strh	r2, [r3, #0]
                durum_verisi = 4;
 800305c:	4b50      	ldr	r3, [pc, #320]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 800305e:	2204      	movs	r2, #4
 8003060:	701a      	strb	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.theta) > max_angle_threshold) && deployed_angle) {
 8003062:	4b53      	ldr	r3, [pc, #332]	@ (80031b0 <flight_algorithm_update+0x2c4>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <flight_algorithm_update+0x1c0>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003070:	eeb0 7ae7 	vabs.f32	s14, s15
 8003074:	4b4f      	ldr	r3, [pc, #316]	@ (80031b4 <flight_algorithm_update+0x2c8>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	dd13      	ble.n	80030ac <flight_algorithm_update+0x1c0>
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <flight_algorithm_update+0x2cc>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00f      	beq.n	80030ac <flight_algorithm_update+0x1c0>
                drogue_deployed = 1;
 800308c:	4b4b      	ldr	r3, [pc, #300]	@ (80031bc <flight_algorithm_update+0x2d0>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8003092:	4b49      	ldr	r3, [pc, #292]	@ (80031b8 <flight_algorithm_update+0x2cc>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8003098:	4b40      	ldr	r3, [pc, #256]	@ (800319c <flight_algorithm_update+0x2b0>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b3e      	ldr	r3, [pc, #248]	@ (800319c <flight_algorithm_update+0x2b0>)
 80030a4:	801a      	strh	r2, [r3, #0]
                durum_verisi = 5;
 80030a6:	4b3e      	ldr	r3, [pc, #248]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 80030a8:	2205      	movs	r2, #5
 80030aa:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 80030ac:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <flight_algorithm_update+0x2c4>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d037      	beq.n	8003124 <flight_algorithm_update+0x238>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	d52f      	bpl.n	8003124 <flight_algorithm_update+0x238>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80030ca:	4b3d      	ldr	r3, [pc, #244]	@ (80031c0 <flight_algorithm_update+0x2d4>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	d524      	bpl.n	8003124 <flight_algorithm_update+0x238>
 80030da:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <flight_algorithm_update+0x2d8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <flight_algorithm_update+0x238>
                apogee_counter++;
 80030e2:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <flight_algorithm_update+0x2dc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a37      	ldr	r2, [pc, #220]	@ (80031c8 <flight_algorithm_update+0x2dc>)
 80030ea:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 80030ec:	4b36      	ldr	r3, [pc, #216]	@ (80031c8 <flight_algorithm_update+0x2dc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	dd1a      	ble.n	800312a <flight_algorithm_update+0x23e>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 80030f4:	4b29      	ldr	r3, [pc, #164]	@ (800319c <flight_algorithm_update+0x2b0>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b27      	ldr	r3, [pc, #156]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003100:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8003102:	4b26      	ldr	r3, [pc, #152]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b23      	ldr	r3, [pc, #140]	@ (800319c <flight_algorithm_update+0x2b0>)
 800310e:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 8003110:	4b2a      	ldr	r3, [pc, #168]	@ (80031bc <flight_algorithm_update+0x2d0>)
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8003116:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <flight_algorithm_update+0x2d8>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
                    durum_verisi = 6;
 800311c:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 800311e:	2206      	movs	r2, #6
 8003120:	701a      	strb	r2, [r3, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 8003122:	e002      	b.n	800312a <flight_algorithm_update+0x23e>
                }
            } else {
                apogee_counter = 0;
 8003124:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <flight_algorithm_update+0x2dc>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a24      	ldr	r2, [pc, #144]	@ (80031c0 <flight_algorithm_update+0x2d4>)
 8003130:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8003132:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <flight_algorithm_update+0x2d0>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04c      	beq.n	80031d4 <flight_algorithm_update+0x2e8>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003140:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <flight_algorithm_update+0x2e0>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	d400      	bmi.n	8003152 <flight_algorithm_update+0x266>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                durum_verisi = 7;
            }
            break;
 8003150:	e040      	b.n	80031d4 <flight_algorithm_update+0x2e8>
                current_phase = PHASE_MAIN_DESCENT;
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <flight_algorithm_update+0x2a0>)
 8003154:	2203      	movs	r2, #3
 8003156:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8003158:	4b10      	ldr	r3, [pc, #64]	@ (800319c <flight_algorithm_update+0x2b0>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003164:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <flight_algorithm_update+0x2b0>)
 8003172:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8003174:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <flight_algorithm_update+0x2e4>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <flight_algorithm_update+0x2d0>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
                durum_verisi = 7;
 8003180:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <flight_algorithm_update+0x2b4>)
 8003182:	2207      	movs	r2, #7
 8003184:	701a      	strb	r2, [r3, #0]
            break;
 8003186:	e025      	b.n	80031d4 <flight_algorithm_update+0x2e8>
            break;
 8003188:	bf00      	nop
 800318a:	e024      	b.n	80031d6 <flight_algorithm_update+0x2ea>
 800318c:	20000255 	.word	0x20000255
 8003190:	20000004 	.word	0x20000004
 8003194:	20000256 	.word	0x20000256
 8003198:	20000264 	.word	0x20000264
 800319c:	2000026c 	.word	0x2000026c
 80031a0:	2000001c 	.word	0x2000001c
 80031a4:	20000014 	.word	0x20000014
 80031a8:	20000018 	.word	0x20000018
 80031ac:	20000008 	.word	0x20000008
 80031b0:	20000257 	.word	0x20000257
 80031b4:	20000010 	.word	0x20000010
 80031b8:	20000015 	.word	0x20000015
 80031bc:	20000258 	.word	0x20000258
 80031c0:	20000260 	.word	0x20000260
 80031c4:	20000016 	.word	0x20000016
 80031c8:	2000025c 	.word	0x2000025c
 80031cc:	2000000c 	.word	0x2000000c
 80031d0:	20000259 	.word	0x20000259
            break;
 80031d4:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    prev_altitude = bme->altitude;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a03      	ldr	r2, [pc, #12]	@ (80031e8 <flight_algorithm_update+0x2fc>)
 80031dc:	6013      	str	r3, [r2, #0]
}
 80031de:	bf00      	nop
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000268 	.word	0x20000268

080031ec <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003200:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003210:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003214:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003224:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	f010 fe4e 	bl	8013ed0 <sqrtf>
 8003234:	eef0 7a40 	vmov.f32	s15, s0
}
 8003238:	eeb0 0a67 	vmov.f32	s0, s15
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <flight_algorithm_get_start_time>:
    main_chute_altitude = main_chute_altitude_param;
    max_angle_threshold = max_angle_threshold_param;
}

uint32_t flight_algorithm_get_start_time(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
    return flight_start_time;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <flight_algorithm_get_start_time+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000264 	.word	0x20000264

0800325c <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e01f      	b.n	80032c2 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	e016      	b.n	80032b6 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	d101      	bne.n	8003294 <KalmanFilter_Init+0x38>
 8003290:	491b      	ldr	r1, [pc, #108]	@ (8003300 <KalmanFilter_Init+0xa4>)
 8003292:	e001      	b.n	8003298 <KalmanFilter_Init+0x3c>
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	3302      	adds	r3, #2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4403      	add	r3, r0
 80032ac:	3304      	adds	r3, #4
 80032ae:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	dde5      	ble.n	8003288 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	dddc      	ble.n	8003282 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003304 <KalmanFilter_Init+0xa8>)
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <KalmanFilter_Init+0xac>)
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <KalmanFilter_Init+0xb0>)
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	42c80000 	.word	0x42c80000
 8003304:	3c23d70a 	.word	0x3c23d70a
 8003308:	3ba3d70a 	.word	0x3ba3d70a
 800330c:	40a00000 	.word	0x40a00000

08003310 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	ed87 0a02 	vstr	s0, [r7, #8]
 800331c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003320:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	edd3 7a01 	vldr	s15, [r3, #4]
 800332a:	eef0 7ae7 	vabs.f32	s15, s15
 800332e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003394 <KalmanFilter_Update+0x84>
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	dd0f      	ble.n	800335c <KalmanFilter_Update+0x4c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003342:	eef0 7ae7 	vabs.f32	s15, s15
 8003346:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003398 <KalmanFilter_Update+0x88>
 800334a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	d503      	bpl.n	800335c <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	649a      	str	r2, [r3, #72]	@ 0x48
 800335a:	e002      	b.n	8003362 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 8003362:	ed97 0a00 	vldr	s0, [r7]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f818 	bl	800339c <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 800336c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003370:	ed97 0a02 	vldr	s0, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fa1d 	bl	80037b4 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f001 f96a 	bl	8004654 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	ee07 3a90 	vmov	s15, r3
}
 8003388:	eeb0 0a67 	vmov.f32	s0, s15
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	43960000 	.word	0x43960000
 8003398:	43af0000 	.word	0x43af0000

0800339c <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b0b6      	sub	sp, #216	@ 0xd8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 80033a8:	edd7 7a00 	vldr	s15, [r7]
 80033ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033b0:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 80033b4:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80033b8:	edd7 7a00 	vldr	s15, [r7]
 80033bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c0:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 80033c4:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80033c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033cc:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	ed93 7a00 	vldr	s14, [r3]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80033dc:	edd7 7a00 	vldr	s15, [r7]
 80033e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80033ee:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80033f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033f6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80033fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003402:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	ed93 7a01 	vldr	s14, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003412:	edd7 7a00 	vldr	s15, [r7]
 8003416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003430:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003438:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003440:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800344a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800344e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003452:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003456:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800345e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003462:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003466:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800346a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800346e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003476:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800347a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800347e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003482:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003486:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800348e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003492:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003496:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800349a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800349e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034a6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 80034aa:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80034ae:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034b6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 80034ba:	ed97 7a00 	vldr	s14, [r7]
 80034be:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034c6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 80034ca:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80034ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034d6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034de:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 80034e2:	ed97 7a00 	vldr	s14, [r7]
 80034e6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034ee:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80034f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 80034fa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003504:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003508:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800350c:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003510:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	663b      	str	r3, [r7, #96]	@ 0x60
 800351a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800351e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003530:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003534:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 8003536:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800353a:	2224      	movs	r2, #36	@ 0x24
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f00c fc7d 	bl	800fe3e <memset>
    float FPFT[3][3] = {0};
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	2224      	movs	r2, #36	@ 0x24
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f00c fc76 	bl	800fe3e <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003558:	e06a      	b.n	8003630 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003560:	e05d      	b.n	800361e <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 8003562:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	33d8      	adds	r3, #216	@ 0xd8
 8003576:	443b      	add	r3, r7
 8003578:	3ba8      	subs	r3, #168	@ 0xa8
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003586:	e041      	b.n	800360c <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003588:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	33d8      	adds	r3, #216	@ 0xd8
 800359c:	443b      	add	r3, r7
 800359e:	3ba8      	subs	r3, #168	@ 0xa8
 80035a0:	ed93 7a00 	vldr	s14, [r3]
 80035a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	33d8      	adds	r3, #216	@ 0xd8
 80035b8:	443b      	add	r3, r7
 80035ba:	3b84      	subs	r3, #132	@ 0x84
 80035bc:	edd3 6a00 	vldr	s13, [r3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035d0:	4413      	add	r3, r2
 80035d2:	3302      	adds	r3, #2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3304      	adds	r3, #4
 80035da:	edd3 7a00 	vldr	s15, [r3]
 80035de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	33d8      	adds	r3, #216	@ 0xd8
 80035fa:	443b      	add	r3, r7
 80035fc:	3ba8      	subs	r3, #168	@ 0xa8
 80035fe:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003606:	3301      	adds	r3, #1
 8003608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800360c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003610:	2b02      	cmp	r3, #2
 8003612:	ddb9      	ble.n	8003588 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003614:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003618:	3301      	adds	r3, #1
 800361a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800361e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003622:	2b02      	cmp	r3, #2
 8003624:	dd9d      	ble.n	8003562 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 8003626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800362a:	3301      	adds	r3, #1
 800362c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003634:	2b02      	cmp	r3, #2
 8003636:	dd90      	ble.n	800355a <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800363e:	e069      	b.n	8003714 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003646:	e05c      	b.n	8003702 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 8003648:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	33d8      	adds	r3, #216	@ 0xd8
 800365c:	443b      	add	r3, r7
 800365e:	3bcc      	subs	r3, #204	@ 0xcc
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800366c:	e040      	b.n	80036f0 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 800366e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	33d8      	adds	r3, #216	@ 0xd8
 8003682:	443b      	add	r3, r7
 8003684:	3bcc      	subs	r3, #204	@ 0xcc
 8003686:	ed93 7a00 	vldr	s14, [r3]
 800368a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	33d8      	adds	r3, #216	@ 0xd8
 800369e:	443b      	add	r3, r7
 80036a0:	3ba8      	subs	r3, #168	@ 0xa8
 80036a2:	edd3 6a00 	vldr	s13, [r3]
 80036a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	33d8      	adds	r3, #216	@ 0xd8
 80036ba:	443b      	add	r3, r7
 80036bc:	3b84      	subs	r3, #132	@ 0x84
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	33d8      	adds	r3, #216	@ 0xd8
 80036de:	443b      	add	r3, r7
 80036e0:	3bcc      	subs	r3, #204	@ 0xcc
 80036e2:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80036e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036ea:	3301      	adds	r3, #1
 80036ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	ddba      	ble.n	800366e <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 80036f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036fc:	3301      	adds	r3, #1
 80036fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003706:	2b02      	cmp	r3, #2
 8003708:	dd9e      	ble.n	8003648 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 800370a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800370e:	3301      	adds	r3, #1
 8003710:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003718:	2b02      	cmp	r3, #2
 800371a:	dd91      	ble.n	8003640 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003722:	e03e      	b.n	80037a2 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800372a:	e031      	b.n	8003790 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 800372c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	33d8      	adds	r3, #216	@ 0xd8
 8003740:	443b      	add	r3, r7
 8003742:	3bcc      	subs	r3, #204	@ 0xcc
 8003744:	ed93 7a00 	vldr	s14, [r3]
 8003748:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	33d8      	adds	r3, #216	@ 0xd8
 800375c:	443b      	add	r3, r7
 800375e:	3b60      	subs	r3, #96	@ 0x60
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003778:	4413      	add	r3, r2
 800377a:	3302      	adds	r3, #2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3304      	adds	r3, #4
 8003782:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800378a:	3301      	adds	r3, #1
 800378c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003794:	2b02      	cmp	r3, #2
 8003796:	ddc9      	ble.n	800372c <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800379c:	3301      	adds	r3, #1
 800379e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	ddbc      	ble.n	8003724 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	37d8      	adds	r7, #216	@ 0xd8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b0f6      	sub	sp, #472	@ 0x1d8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037be:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037c2:	6018      	str	r0, [r3, #0]
 80037c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037c8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037cc:	ed83 0a00 	vstr	s0, [r3]
 80037d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037d4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037d8:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 80037dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037e0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 826b 	beq.w	8003cc4 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80037fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003802:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 8003806:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800380a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003814:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003818:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003822:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800382a:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 800382e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003848:	e044      	b.n	80038d4 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 800384a:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 800384e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003852:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800385c:	3302      	adds	r3, #2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800386c:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 8003870:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003874:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800387e:	3305      	adds	r3, #5
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003892:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003896:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800389a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038a4:	3308      	adds	r3, #8
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80038c2:	443b      	add	r3, r7
 80038c4:	3bac      	subs	r3, #172	@ 0xac
 80038c6:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80038ca:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038ce:	3301      	adds	r3, #1
 80038d0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80038d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038d8:	2b02      	cmp	r3, #2
 80038da:	ddb6      	ble.n	800384a <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 80038dc:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 80038e0:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80038e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e8:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 80038ec:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80038f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f8:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 80038fc:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003908:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800390c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800391a:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 800391e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 800392a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392e:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003936:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003940:	e04f      	b.n	80039e2 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 8003942:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003946:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	330c      	adds	r3, #12
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003968:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800396c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3304      	adds	r3, #4
 8003984:	edd3 6a00 	vldr	s13, [r3]
 8003988:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 800398c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003994:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003998:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3314      	adds	r3, #20
 80039ae:	edd3 6a00 	vldr	s13, [r3]
 80039b2:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80039b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039be:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80039d0:	443b      	add	r3, r7
 80039d2:	3bb8      	subs	r3, #184	@ 0xb8
 80039d4:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80039d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039dc:	3301      	adds	r3, #1
 80039de:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80039e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	ddab      	ble.n	8003942 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80039f0:	e029      	b.n	8003a46 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 80039f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039f6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	ed93 7a00 	vldr	s14, [r3]
 8003a08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a12:	443b      	add	r3, r7
 8003a14:	3bb8      	subs	r3, #184	@ 0xb8
 8003a16:	edd3 6a00 	vldr	s13, [r3]
 8003a1a:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a2a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003a3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003a46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	ddd1      	ble.n	80039f2 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003a4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a52:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003a56:	4618      	mov	r0, r3
 8003a58:	2324      	movs	r3, #36	@ 0x24
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	f00c f9ee 	bl	800fe3e <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003a62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a66:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	2324      	movs	r3, #36	@ 0x24
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2100      	movs	r1, #0
 8003a72:	f00c f9e4 	bl	800fe3e <memset>

        for (int i = 0; i < 3; i++) {
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003a7c:	e062      	b.n	8003b44 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a84:	e055      	b.n	8003b32 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003a86:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a90:	443b      	add	r3, r7
 8003a92:	3bb8      	subs	r3, #184	@ 0xb8
 8003a94:	ed93 7a00 	vldr	s14, [r3]
 8003a98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003aa2:	443b      	add	r3, r7
 8003aa4:	3ba0      	subs	r3, #160	@ 0xa0
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ab2:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003ab6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003ace:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003ad2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d102      	bne.n	8003ae0 <KalmanFilter_MeasurementUpdate+0x32c>
 8003ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ade:	e001      	b.n	8003ae4 <KalmanFilter_MeasurementUpdate+0x330>
 8003ae0:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003dd0 <KalmanFilter_MeasurementUpdate+0x61c>
 8003ae4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ae8:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003aec:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b08:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b0c:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003b10:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003b28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	dda5      	ble.n	8003a86 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003b3a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b44:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	dd98      	ble.n	8003a7e <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b52:	e076      	b.n	8003c42 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b5a:	e069      	b.n	8003c30 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003b5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b60:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b64:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003b84:	e04b      	b.n	8003c1e <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003b86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b8a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b8e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
 8003ba6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003baa:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003bae:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	edd3 6a00 	vldr	s13, [r3]
 8003bc6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003bde:	4413      	add	r3, r2
 8003be0:	3302      	adds	r3, #2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3304      	adds	r3, #4
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf8:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003bfc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003c14:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003c1e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	ddaf      	ble.n	8003b86 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003c26:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003c30:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	dd91      	ble.n	8003b5c <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003c38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003c42:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	dd84      	ble.n	8003b54 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003c50:	e032      	b.n	8003cb8 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003c58:	e025      	b.n	8003ca6 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003c5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c5e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c62:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c7c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c90:	4413      	add	r3, r2
 8003c92:	3302      	adds	r3, #2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4403      	add	r3, r0
 8003c98:	3304      	adds	r3, #4
 8003c9a:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003c9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003ca6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	ddd5      	ble.n	8003c5a <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003cae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003cb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	ddc8      	ble.n	8003c52 <KalmanFilter_MeasurementUpdate+0x49e>
 8003cc0:	f000 bcc2 	b.w	8004648 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003cc4:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <KalmanFilter_MeasurementUpdate+0x620>)
 8003cc6:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003cca:	461d      	mov	r5, r3
 8003ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cd4:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003cd8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cdc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ce6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003cf4:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003cf8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cfc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0a:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003d0e:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003d12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d16:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d24:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003d28:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
 8003d38:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003d3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	6053      	str	r3, [r2, #4]
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003d4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d52:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003d5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d5e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003d80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d84:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003d8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d94:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003d9c:	e079      	b.n	8003e92 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003da4:	e06c      	b.n	8003e80 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003da6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003dbc:	443b      	add	r3, r7
 8003dbe:	3bf8      	subs	r3, #248	@ 0xf8
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003dcc:	e04f      	b.n	8003e6e <KalmanFilter_MeasurementUpdate+0x6ba>
 8003dce:	bf00      	nop
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	08015e58 	.word	0x08015e58
 8003dd8:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003ddc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003df2:	443b      	add	r3, r7
 8003df4:	3bf8      	subs	r3, #248	@ 0xf8
 8003df6:	ed93 7a00 	vldr	s14, [r3]
 8003dfa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e10:	443b      	add	r3, r7
 8003e12:	3bd0      	subs	r3, #208	@ 0xd0
 8003e14:	edd3 6a00 	vldr	s13, [r3]
 8003e18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e1c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e30:	4413      	add	r3, r2
 8003e32:	3302      	adds	r3, #2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	3304      	adds	r3, #4
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e46:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e5c:	443b      	add	r3, r7
 8003e5e:	3bf8      	subs	r3, #248	@ 0xf8
 8003e60:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003e64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	ddb2      	ble.n	8003ddc <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003e76:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	dd8e      	ble.n	8003da6 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003e88:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	dd81      	ble.n	8003d9e <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ea0:	e098      	b.n	8003fd4 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003ea8:	e08a      	b.n	8003fc0 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003eaa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eae:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003eb2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003eb6:	0059      	lsls	r1, r3, #1
 8003eb8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ebc:	440b      	add	r3, r1
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003ece:	e042      	b.n	8003f56 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003ed0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ed4:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003ed8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003edc:	0059      	lsls	r1, r3, #1
 8003ede:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ee2:	440b      	add	r3, r1
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	ed93 7a00 	vldr	s14, [r3]
 8003eec:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f02:	443b      	add	r3, r7
 8003f04:	3bf8      	subs	r3, #248	@ 0xf8
 8003f06:	edd3 6a00 	vldr	s13, [r3]
 8003f0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f20:	443b      	add	r3, r7
 8003f22:	3bd0      	subs	r3, #208	@ 0xd0
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f30:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f34:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f3c:	0059      	lsls	r1, r3, #1
 8003f3e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f42:	440b      	add	r3, r1
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003f4c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003f50:	3301      	adds	r3, #1
 8003f52:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003f56:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	ddb8      	ble.n	8003ed0 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003f5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f62:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f6a:	0059      	lsls	r1, r3, #1
 8003f6c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f70:	440b      	add	r3, r1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	ed93 7a00 	vldr	s14, [r3]
 8003f7a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f7e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003f82:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f86:	0059      	lsls	r1, r3, #1
 8003f88:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f8c:	440b      	add	r3, r1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f9a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f9e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003fa2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fa6:	0059      	lsls	r1, r3, #1
 8003fa8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fac:	440b      	add	r3, r1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003fb6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003fc0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f77f af70 	ble.w	8003eaa <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003fca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003fd4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f77f af62 	ble.w	8003ea2 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003fde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe6:	ed93 7a00 	vldr	s14, [r3]
 8003fea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ffa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004002:	edd3 6a01 	vldr	s13, [r3, #4]
 8004006:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800400a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800400e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401a:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 800401e:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8004022:	eef0 7ae7 	vabs.f32	s15, s15
 8004026:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003dd8 <KalmanFilter_MeasurementUpdate+0x624>
 800402a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	f100 8308 	bmi.w	8004646 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8004036:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800403a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800403e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004042:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004046:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800404a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800404e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004052:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8004056:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800405a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800405e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004062:	eef1 6a67 	vneg.f32	s13, s15
 8004066:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800406a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800406e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004072:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004076:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 800407a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800407e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004082:	edd3 7a02 	vldr	s15, [r3, #8]
 8004086:	eef1 6a67 	vneg.f32	s13, s15
 800408a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800408e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004092:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004096:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800409a:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 800409e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040a6:	edd3 6a00 	vldr	s13, [r3]
 80040aa:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80040ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80040b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040ba:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 80040be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80040c6:	461a      	mov	r2, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	6053      	str	r3, [r2, #4]
 80040ce:	6093      	str	r3, [r2, #8]
 80040d0:	60d3      	str	r3, [r2, #12]
 80040d2:	6113      	str	r3, [r2, #16]
 80040d4:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 80040d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040da:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	6053      	str	r3, [r2, #4]
 80040e6:	6093      	str	r3, [r2, #8]
 80040e8:	60d3      	str	r3, [r2, #12]
 80040ea:	6113      	str	r3, [r2, #16]
 80040ec:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80040f4:	e06f      	b.n	80041d6 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80040fc:	e062      	b.n	80041c4 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 80040fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004102:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004106:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800410a:	0059      	lsls	r1, r3, #1
 800410c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004110:	440b      	add	r3, r1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004122:	e046      	b.n	80041b2 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8004124:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004128:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800412c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004130:	0059      	lsls	r1, r3, #1
 8004132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004136:	440b      	add	r3, r1
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	ed93 7a00 	vldr	s14, [r3]
 8004140:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004144:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004158:	4413      	add	r3, r2
 800415a:	3302      	adds	r3, #2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3304      	adds	r3, #4
 8004162:	edd3 6a00 	vldr	s13, [r3]
 8004166:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800417c:	443b      	add	r3, r7
 800417e:	3bd0      	subs	r3, #208	@ 0xd0
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800418c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004190:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004194:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004198:	0059      	lsls	r1, r3, #1
 800419a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800419e:	440b      	add	r3, r1
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80041a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80041b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	ddb4      	ble.n	8004124 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 80041ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041be:	3301      	adds	r3, #1
 80041c0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80041c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	dd98      	ble.n	80040fe <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 80041cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041d0:	3301      	adds	r3, #1
 80041d2:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80041d6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041da:	2b02      	cmp	r3, #2
 80041dc:	dd8b      	ble.n	80040f6 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80041e4:	e069      	b.n	80042ba <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80041ec:	e05c      	b.n	80042a8 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 80041ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041f2:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80041f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041fa:	0059      	lsls	r1, r3, #1
 80041fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004200:	440b      	add	r3, r1
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004212:	e040      	b.n	8004296 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8004214:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004218:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800421c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004220:	0059      	lsls	r1, r3, #1
 8004222:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004226:	440b      	add	r3, r1
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	ed93 7a00 	vldr	s14, [r3]
 8004230:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004234:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004238:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800423c:	0059      	lsls	r1, r3, #1
 800423e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004242:	440b      	add	r3, r1
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	edd3 6a00 	vldr	s13, [r3]
 800424c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004250:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8004254:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004258:	0059      	lsls	r1, r3, #1
 800425a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800425e:	440b      	add	r3, r1
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	edd3 7a00 	vldr	s15, [r3]
 8004268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800426c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004270:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004274:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004278:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800427c:	0059      	lsls	r1, r3, #1
 800427e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004282:	440b      	add	r3, r1
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 800428c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004290:	3301      	adds	r3, #1
 8004292:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004296:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800429a:	2b01      	cmp	r3, #1
 800429c:	ddba      	ble.n	8004214 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 800429e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042a2:	3301      	adds	r3, #1
 80042a4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80042a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	dd9e      	ble.n	80041ee <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 80042b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042b4:	3301      	adds	r3, #1
 80042b6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80042ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042be:	2b02      	cmp	r3, #2
 80042c0:	dd91      	ble.n	80041e6 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80042c8:	e042      	b.n	8004350 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80042d0:	e035      	b.n	800433e <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 80042d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042d6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042ec:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042f4:	0059      	lsls	r1, r3, #1
 80042f6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042fa:	440b      	add	r3, r1
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	edd3 6a00 	vldr	s13, [r3]
 8004304:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800430e:	443b      	add	r3, r7
 8004310:	3be0      	subs	r3, #224	@ 0xe0
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800431a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004322:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004334:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800433e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004342:	2b01      	cmp	r3, #1
 8004344:	ddc5      	ble.n	80042d2 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 8004346:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800434a:	3301      	adds	r3, #1
 800434c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004350:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004354:	2b02      	cmp	r3, #2
 8004356:	ddb8      	ble.n	80042ca <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8004358:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800435c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004360:	4618      	mov	r0, r3
 8004362:	2324      	movs	r3, #36	@ 0x24
 8004364:	461a      	mov	r2, r3
 8004366:	2100      	movs	r1, #0
 8004368:	f00b fd69 	bl	800fe3e <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 800436c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004370:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004374:	4618      	mov	r0, r3
 8004376:	2324      	movs	r3, #36	@ 0x24
 8004378:	461a      	mov	r2, r3
 800437a:	2100      	movs	r1, #0
 800437c:	f00b fd5f 	bl	800fe3e <memset>

        for (int i = 0; i < 3; i++) {
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004386:	e09e      	b.n	80044c6 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800438e:	e090      	b.n	80044b2 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004390:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004394:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004398:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80043b8:	e045      	b.n	8004446 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 80043ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043be:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80043c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043de:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80043e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80043e6:	0059      	lsls	r1, r3, #1
 80043e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043ec:	440b      	add	r3, r1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	edd3 6a00 	vldr	s13, [r3]
 80043f6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800440c:	443b      	add	r3, r7
 800440e:	3bd0      	subs	r3, #208	@ 0xd0
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004420:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004424:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 800443c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004440:	3301      	adds	r3, #1
 8004442:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004446:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800444a:	2b01      	cmp	r3, #1
 800444c:	ddb5      	ble.n	80043ba <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 800444e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004452:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004456:	429a      	cmp	r2, r3
 8004458:	d102      	bne.n	8004460 <KalmanFilter_MeasurementUpdate+0xcac>
 800445a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445e:	e001      	b.n	8004464 <KalmanFilter_MeasurementUpdate+0xcb0>
 8004460:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004650 <KalmanFilter_MeasurementUpdate+0xe9c>
 8004464:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004468:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800446c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	edd3 7a00 	vldr	s15, [r3]
 8004484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004488:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800448c:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004490:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 80044a8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80044ac:	3301      	adds	r3, #1
 80044ae:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80044b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	f77f af6a 	ble.w	8004390 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 80044bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80044c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	f77f af5c 	ble.w	8004388 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80044d6:	e076      	b.n	80045c6 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80044de:	e069      	b.n	80045b4 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 80044e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044e4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80044e8:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004502:	2300      	movs	r3, #0
 8004504:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004508:	e04b      	b.n	80045a2 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 800450a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800450e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004512:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	ed93 7a00 	vldr	s14, [r3]
 800452a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800452e:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004532:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	edd3 6a00 	vldr	s13, [r3]
 800454a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800454e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004562:	4413      	add	r3, r2
 8004564:	3302      	adds	r3, #2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3304      	adds	r3, #4
 800456c:	edd3 7a00 	vldr	s15, [r3]
 8004570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800457c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004580:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004598:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800459c:	3301      	adds	r3, #1
 800459e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80045a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	ddaf      	ble.n	800450a <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 80045aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80045ae:	3301      	adds	r3, #1
 80045b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80045b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	dd91      	ble.n	80044e0 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 80045bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80045c0:	3301      	adds	r3, #1
 80045c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80045c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	dd84      	ble.n	80044d8 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80045d4:	e032      	b.n	800463c <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80045dc:	e025      	b.n	800462a <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 80045de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045e2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80045e6:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004600:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800460a:	4613      	mov	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4413      	add	r3, r2
 8004610:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004614:	4413      	add	r3, r2
 8004616:	3302      	adds	r3, #2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4403      	add	r3, r0
 800461c:	3304      	adds	r3, #4
 800461e:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8004620:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004624:	3301      	adds	r3, #1
 8004626:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800462a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800462e:	2b02      	cmp	r3, #2
 8004630:	ddd5      	ble.n	80045de <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 8004632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004636:	3301      	adds	r3, #1
 8004638:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800463c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004640:	2b02      	cmp	r3, #2
 8004642:	ddc8      	ble.n	80045d6 <KalmanFilter_MeasurementUpdate+0xe22>
 8004644:	e000      	b.n	8004648 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 8004646:	bf00      	nop
            }
        }
    }
}
 8004648:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 800464c:	46bd      	mov	sp, r7
 800464e:	bdb0      	pop	{r4, r5, r7, pc}
 8004650:	00000000 	.word	0x00000000

08004654 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466a:	d517      	bpl.n	800469c <KalmanFilter_DetectApogee+0x48>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	d50c      	bpl.n	800469c <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	2b04      	cmp	r3, #4
 8004692:	dd06      	ble.n	80046a2 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800469a:	e002      	b.n	80046a2 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	ee07 3a90 	vmov	s15, r3
}
 80046ca:	eeb0 0a67 	vmov.f32	s0, s15
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 80046f8:	4a07      	ldr	r2, [pc, #28]	@ (8004718 <L86_GNSS_Init+0x28>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 80046fe:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <L86_GNSS_Init+0x28>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8004706:	4905      	ldr	r1, [pc, #20]	@ (800471c <L86_GNSS_Init+0x2c>)
 8004708:	4618      	mov	r0, r3
 800470a:	f009 f983 	bl	800da14 <HAL_UART_Receive_DMA>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000270 	.word	0x20000270
 800471c:	20000274 	.word	0x20000274

08004720 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8004728:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <HAL_UART_RxHalfCpltCallback+0x24>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d104      	bne.n	800473c <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 8004732:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8004736:	4804      	ldr	r0, [pc, #16]	@ (8004748 <HAL_UART_RxHalfCpltCallback+0x28>)
 8004738:	f000 f830 	bl	800479c <process_data>
	}
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000270 	.word	0x20000270
 8004748:	20000274 	.word	0x20000274

0800474c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8004754:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <HAL_UART_RxCpltCallback+0x24>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d104      	bne.n	8004768 <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 800475e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8004762:	4804      	ldr	r0, [pc, #16]	@ (8004774 <HAL_UART_RxCpltCallback+0x28>)
 8004764:	f000 f81a 	bl	800479c <process_data>
	}
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000270 	.word	0x20000270
 8004774:	20000724 	.word	0x20000724

08004778 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f81d 	bl	80047c0 <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f89e 	bl	80048c8 <get_GPGGA_data>
	format_data(gps_data_);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f90d 	bl	80049ac <format_data>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4803      	ldr	r0, [pc, #12]	@ (80047bc <process_data+0x20>)
 80047b0:	f00b fbeb 	bl	800ff8a <memcpy>
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000bd4 	.word	0x20000bd4

080047c0 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 80047c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c2:	b08d      	sub	sp, #52	@ 0x34
 80047c4:	af08      	add	r7, sp, #32
 80047c6:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 80047c8:	4937      	ldr	r1, [pc, #220]	@ (80048a8 <get_GNRMC_data+0xe8>)
 80047ca:	4838      	ldr	r0, [pc, #224]	@ (80048ac <get_GNRMC_data+0xec>)
 80047cc:	f00b fb3f 	bl	800fe4e <strstr>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4a37      	ldr	r2, [pc, #220]	@ (80048b0 <get_GNRMC_data+0xf0>)
 80047d4:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 80047d6:	4b36      	ldr	r3, [pc, #216]	@ (80048b0 <get_GNRMC_data+0xf0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <get_GNRMC_data+0x32>
 80047de:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <get_GNRMC_data+0xf0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3311      	adds	r3, #17
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b41      	cmp	r3, #65	@ 0x41
 80047e8:	d103      	bne.n	80047f2 <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 80047ea:	4b32      	ldr	r3, [pc, #200]	@ (80048b4 <get_GNRMC_data+0xf4>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e005      	b.n	80047fe <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 80047f2:	4b30      	ldr	r3, [pc, #192]	@ (80048b4 <get_GNRMC_data+0xf4>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2256      	movs	r2, #86	@ 0x56
 80047fc:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 80047fe:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <get_GNRMC_data+0xf4>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d148      	bne.n	8004898 <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 8004806:	2278      	movs	r2, #120	@ 0x78
 8004808:	2100      	movs	r1, #0
 800480a:	482b      	ldr	r0, [pc, #172]	@ (80048b8 <get_GNRMC_data+0xf8>)
 800480c:	f00b fb17 	bl	800fe3e <memset>
		counter = 0;
 8004810:	4b2a      	ldr	r3, [pc, #168]	@ (80048bc <get_GNRMC_data+0xfc>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8004816:	4b26      	ldr	r3, [pc, #152]	@ (80048b0 <get_GNRMC_data+0xf0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <get_GNRMC_data+0x100>)
 800481c:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 800481e:	e011      	b.n	8004844 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 8004820:	4b27      	ldr	r3, [pc, #156]	@ (80048c0 <get_GNRMC_data+0x100>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <get_GNRMC_data+0xfc>)
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	7819      	ldrb	r1, [r3, #0]
 800482a:	4b23      	ldr	r3, [pc, #140]	@ (80048b8 <get_GNRMC_data+0xf8>)
 800482c:	5499      	strb	r1, [r3, r2]
			counter++;
 800482e:	4b23      	ldr	r3, [pc, #140]	@ (80048bc <get_GNRMC_data+0xfc>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	b2da      	uxtb	r2, r3
 8004836:	4b21      	ldr	r3, [pc, #132]	@ (80048bc <get_GNRMC_data+0xfc>)
 8004838:	701a      	strb	r2, [r3, #0]
			current_char++;
 800483a:	4b21      	ldr	r3, [pc, #132]	@ (80048c0 <get_GNRMC_data+0x100>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a1f      	ldr	r2, [pc, #124]	@ (80048c0 <get_GNRMC_data+0x100>)
 8004842:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8004844:	4b1e      	ldr	r3, [pc, #120]	@ (80048c0 <get_GNRMC_data+0x100>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b2a      	cmp	r3, #42	@ 0x2a
 800484c:	d1e8      	bne.n	8004820 <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f103 0c04 	add.w	ip, r3, #4
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3308      	adds	r3, #8
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	320c      	adds	r2, #12
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	3110      	adds	r1, #16
 8004864:	6079      	str	r1, [r7, #4]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	3014      	adds	r0, #20
 800486a:	68fc      	ldr	r4, [r7, #12]
 800486c:	3418      	adds	r4, #24
 800486e:	68fd      	ldr	r5, [r7, #12]
 8004870:	351c      	adds	r5, #28
 8004872:	68fe      	ldr	r6, [r7, #12]
 8004874:	3620      	adds	r6, #32
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	3124      	adds	r1, #36	@ 0x24
 800487a:	9107      	str	r1, [sp, #28]
 800487c:	9606      	str	r6, [sp, #24]
 800487e:	9505      	str	r5, [sp, #20]
 8004880:	9404      	str	r4, [sp, #16]
 8004882:	9003      	str	r0, [sp, #12]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	9102      	str	r1, [sp, #8]
 8004888:	9201      	str	r2, [sp, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4663      	mov	r3, ip
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	490c      	ldr	r1, [pc, #48]	@ (80048c4 <get_GNRMC_data+0x104>)
 8004892:	4809      	ldr	r0, [pc, #36]	@ (80048b8 <get_GNRMC_data+0xf8>)
 8004894:	f00b fa54 	bl	800fd40 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <get_GNRMC_data+0xf0>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a6:	bf00      	nop
 80048a8:	08015f34 	.word	0x08015f34
 80048ac:	20000bd4 	.word	0x20000bd4
 80048b0:	20001084 	.word	0x20001084
 80048b4:	2000108c 	.word	0x2000108c
 80048b8:	20001094 	.word	0x20001094
 80048bc:	2000110c 	.word	0x2000110c
 80048c0:	20001090 	.word	0x20001090
 80048c4:	08015f3c 	.word	0x08015f3c

080048c8 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 80048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ca:	b08d      	sub	sp, #52	@ 0x34
 80048cc:	af08      	add	r7, sp, #32
 80048ce:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 80048d0:	492f      	ldr	r1, [pc, #188]	@ (8004990 <get_GPGGA_data+0xc8>)
 80048d2:	4830      	ldr	r0, [pc, #192]	@ (8004994 <get_GPGGA_data+0xcc>)
 80048d4:	f00b fabb 	bl	800fe4e <strstr>
 80048d8:	4603      	mov	r3, r0
 80048da:	4a2f      	ldr	r2, [pc, #188]	@ (8004998 <get_GPGGA_data+0xd0>)
 80048dc:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 80048de:	4b2e      	ldr	r3, [pc, #184]	@ (8004998 <get_GPGGA_data+0xd0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04f      	beq.n	8004986 <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	791b      	ldrb	r3, [r3, #4]
 80048ea:	2b41      	cmp	r3, #65	@ 0x41
 80048ec:	d148      	bne.n	8004980 <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 80048ee:	2278      	movs	r2, #120	@ 0x78
 80048f0:	2100      	movs	r1, #0
 80048f2:	482a      	ldr	r0, [pc, #168]	@ (800499c <get_GPGGA_data+0xd4>)
 80048f4:	f00b faa3 	bl	800fe3e <memset>
			counter = 0;
 80048f8:	4b29      	ldr	r3, [pc, #164]	@ (80049a0 <get_GPGGA_data+0xd8>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 80048fe:	4b26      	ldr	r3, [pc, #152]	@ (8004998 <get_GPGGA_data+0xd0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a28      	ldr	r2, [pc, #160]	@ (80049a4 <get_GPGGA_data+0xdc>)
 8004904:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004906:	e011      	b.n	800492c <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8004908:	4b26      	ldr	r3, [pc, #152]	@ (80049a4 <get_GPGGA_data+0xdc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a24      	ldr	r2, [pc, #144]	@ (80049a0 <get_GPGGA_data+0xd8>)
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	7819      	ldrb	r1, [r3, #0]
 8004912:	4b22      	ldr	r3, [pc, #136]	@ (800499c <get_GPGGA_data+0xd4>)
 8004914:	5499      	strb	r1, [r3, r2]
				counter++;
 8004916:	4b22      	ldr	r3, [pc, #136]	@ (80049a0 <get_GPGGA_data+0xd8>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	b2da      	uxtb	r2, r3
 800491e:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <get_GPGGA_data+0xd8>)
 8004920:	701a      	strb	r2, [r3, #0]
				current_char++;
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <get_GPGGA_data+0xdc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3301      	adds	r3, #1
 8004928:	4a1e      	ldr	r2, [pc, #120]	@ (80049a4 <get_GPGGA_data+0xdc>)
 800492a:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 800492c:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <get_GPGGA_data+0xdc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b2a      	cmp	r3, #42	@ 0x2a
 8004934:	d1e8      	bne.n	8004908 <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f103 0c08 	add.w	ip, r3, #8
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	330c      	adds	r3, #12
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	3210      	adds	r2, #16
 8004948:	68f9      	ldr	r1, [r7, #12]
 800494a:	3114      	adds	r1, #20
 800494c:	6079      	str	r1, [r7, #4]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	3025      	adds	r0, #37	@ 0x25
 8004952:	68fc      	ldr	r4, [r7, #12]
 8004954:	3426      	adds	r4, #38	@ 0x26
 8004956:	68fd      	ldr	r5, [r7, #12]
 8004958:	3528      	adds	r5, #40	@ 0x28
 800495a:	68fe      	ldr	r6, [r7, #12]
 800495c:	362c      	adds	r6, #44	@ 0x2c
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	3130      	adds	r1, #48	@ 0x30
 8004962:	9107      	str	r1, [sp, #28]
 8004964:	9606      	str	r6, [sp, #24]
 8004966:	9505      	str	r5, [sp, #20]
 8004968:	9404      	str	r4, [sp, #16]
 800496a:	9003      	str	r0, [sp, #12]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	9102      	str	r1, [sp, #8]
 8004970:	9201      	str	r2, [sp, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	4663      	mov	r3, ip
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	490b      	ldr	r1, [pc, #44]	@ (80049a8 <get_GPGGA_data+0xe0>)
 800497a:	4808      	ldr	r0, [pc, #32]	@ (800499c <get_GPGGA_data+0xd4>)
 800497c:	f00b f9e0 	bl	800fd40 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <get_GPGGA_data+0xd0>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	}
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498e:	bf00      	nop
 8004990:	08015f64 	.word	0x08015f64
 8004994:	20000bd4 	.word	0x20000bd4
 8004998:	20001088 	.word	0x20001088
 800499c:	20001094 	.word	0x20001094
 80049a0:	2000110c 	.word	0x2000110c
 80049a4:	20001090 	.word	0x20001090
 80049a8:	08015f6c 	.word	0x08015f6c

080049ac <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	791b      	ldrb	r3, [r3, #4]
 80049b8:	2b41      	cmp	r3, #65	@ 0x41
 80049ba:	f040 8154 	bne.w	8004c66 <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	4aab      	ldr	r2, [pc, #684]	@ (8004c70 <format_data+0x2c4>)
 80049c4:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 80049c6:	4baa      	ldr	r3, [pc, #680]	@ (8004c70 <format_data+0x2c4>)
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004c74 <format_data+0x2c8>
 80049d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80049d4:	ee16 0a90 	vmov	r0, s13
 80049d8:	f7fb fdd6 	bl	8000588 <__aeabi_f2d>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	ec43 2b10 	vmov	d0, r2, r3
 80049e4:	f00f fbd8 	bl	8014198 <floor>
 80049e8:	ec53 2b10 	vmov	r2, r3, d0
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	f7fc f91a 	bl	8000c28 <__aeabi_d2f>
 80049f4:	4602      	mov	r2, r0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 80049fa:	4b9d      	ldr	r3, [pc, #628]	@ (8004c70 <format_data+0x2c4>)
 80049fc:	ed93 7a00 	vldr	s14, [r3]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004a06:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8004c74 <format_data+0x2c8>
 8004a0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a12:	4b97      	ldr	r3, [pc, #604]	@ (8004c70 <format_data+0x2c4>)
 8004a14:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8004a18:	4b95      	ldr	r3, [pc, #596]	@ (8004c70 <format_data+0x2c4>)
 8004a1a:	ed93 7a00 	vldr	s14, [r3]
 8004a1e:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004c78 <format_data+0x2cc>
 8004a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a26:	4b92      	ldr	r3, [pc, #584]	@ (8004c70 <format_data+0x2c4>)
 8004a28:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004a32:	4b8f      	ldr	r3, [pc, #572]	@ (8004c70 <format_data+0x2c4>)
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	4a8d      	ldr	r2, [pc, #564]	@ (8004c7c <format_data+0x2d0>)
 8004a48:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8004a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8004c7c <format_data+0x2d0>)
 8004a4c:	edd3 7a00 	vldr	s15, [r3]
 8004a50:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004c74 <format_data+0x2c8>
 8004a54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a58:	ee16 0a90 	vmov	r0, s13
 8004a5c:	f7fb fd94 	bl	8000588 <__aeabi_f2d>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	ec43 2b10 	vmov	d0, r2, r3
 8004a68:	f00f fb96 	bl	8014198 <floor>
 8004a6c:	ec53 2b10 	vmov	r2, r3, d0
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f8d8 	bl	8000c28 <__aeabi_d2f>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c7c <format_data+0x2d0>)
 8004a80:	ed93 7a00 	vldr	s14, [r3]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004a8a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004c74 <format_data+0x2c8>
 8004a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a96:	4b79      	ldr	r3, [pc, #484]	@ (8004c7c <format_data+0x2d0>)
 8004a98:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8004a9c:	4b77      	ldr	r3, [pc, #476]	@ (8004c7c <format_data+0x2d0>)
 8004a9e:	ed93 7a00 	vldr	s14, [r3]
 8004aa2:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004c78 <format_data+0x2cc>
 8004aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aaa:	4b74      	ldr	r3, [pc, #464]	@ (8004c7c <format_data+0x2d0>)
 8004aac:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004ab6:	4b71      	ldr	r3, [pc, #452]	@ (8004c7c <format_data+0x2d0>)
 8004ab8:	edd3 7a00 	vldr	s15, [r3]
 8004abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6d      	ldr	r2, [pc, #436]	@ (8004c80 <format_data+0x2d4>)
 8004acc:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8004ace:	4b6c      	ldr	r3, [pc, #432]	@ (8004c80 <format_data+0x2d4>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004c84 <format_data+0x2d8>
 8004ad8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004adc:	ee16 0a90 	vmov	r0, s13
 8004ae0:	f7fb fd52 	bl	8000588 <__aeabi_f2d>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	ec43 2b10 	vmov	d0, r2, r3
 8004aec:	f00f fb54 	bl	8014198 <floor>
 8004af0:	ec53 2b10 	vmov	r2, r3, d0
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7fc f876 	bl	8000be8 <__aeabi_d2uiz>
 8004afc:	4603      	mov	r3, r0
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8004b06:	4b5e      	ldr	r3, [pc, #376]	@ (8004c80 <format_data+0x2d4>)
 8004b08:	ed93 7a00 	vldr	s14, [r3]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b12:	461a      	mov	r2, r3
 8004b14:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004b18:	fb02 f303 	mul.w	r3, r2, r3
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b28:	4b55      	ldr	r3, [pc, #340]	@ (8004c80 <format_data+0x2d4>)
 8004b2a:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b34:	3303      	adds	r3, #3
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b44:	2b17      	cmp	r3, #23
 8004b46:	d907      	bls.n	8004b58 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b4e:	3b18      	subs	r3, #24
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8004b58:	4b49      	ldr	r3, [pc, #292]	@ (8004c80 <format_data+0x2d4>)
 8004b5a:	edd3 7a00 	vldr	s15, [r3]
 8004b5e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004c74 <format_data+0x2c8>
 8004b62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b66:	ee16 0a90 	vmov	r0, s13
 8004b6a:	f7fb fd0d 	bl	8000588 <__aeabi_f2d>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	ec43 2b10 	vmov	d0, r2, r3
 8004b76:	f00f fb0f 	bl	8014198 <floor>
 8004b7a:	ec53 2b10 	vmov	r2, r3, d0
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7fc f831 	bl	8000be8 <__aeabi_d2uiz>
 8004b86:	4603      	mov	r3, r0
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8004b90:	4b3b      	ldr	r3, [pc, #236]	@ (8004c80 <format_data+0x2d4>)
 8004b92:	ed93 7a00 	vldr	s14, [r3]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2364      	movs	r3, #100	@ 0x64
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb0:	4b33      	ldr	r3, [pc, #204]	@ (8004c80 <format_data+0x2d4>)
 8004bb2:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8004bb6:	4b32      	ldr	r3, [pc, #200]	@ (8004c80 <format_data+0x2d4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fb fce4 	bl	8000588 <__aeabi_f2d>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	ec43 2b10 	vmov	d0, r2, r3
 8004bc8:	f00f fae6 	bl	8014198 <floor>
 8004bcc:	ec53 2b10 	vmov	r2, r3, d0
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f7fc f808 	bl	8000be8 <__aeabi_d2uiz>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a28      	ldr	r2, [pc, #160]	@ (8004c88 <format_data+0x2dc>)
 8004be8:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8004bea:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <format_data+0x2dc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <format_data+0x2e0>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	0b5b      	lsrs	r3, r3, #13
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8004bfe:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <format_data+0x2dc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8004c08:	4611      	mov	r1, r2
 8004c0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c0e:	fb01 f202 	mul.w	r2, r1, r2
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	4a1c      	ldr	r2, [pc, #112]	@ (8004c88 <format_data+0x2dc>)
 8004c16:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <format_data+0x2dc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c90 <format_data+0x2e4>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <format_data+0x2dc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004c36:	4611      	mov	r1, r2
 8004c38:	2264      	movs	r2, #100	@ 0x64
 8004c3a:	fb01 f202 	mul.w	r2, r1, r2
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	4a11      	ldr	r2, [pc, #68]	@ (8004c88 <format_data+0x2dc>)
 8004c42:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8004c44:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <format_data+0x2dc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20001110 	.word	0x20001110
 8004c74:	42c80000 	.word	0x42c80000
 8004c78:	42700000 	.word	0x42700000
 8004c7c:	20001114 	.word	0x20001114
 8004c80:	20001118 	.word	0x20001118
 8004c84:	461c4000 	.word	0x461c4000
 8004c88:	2000111c 	.word	0x2000111c
 8004c8c:	d1b71759 	.word	0xd1b71759
 8004c90:	51eb851f 	.word	0x51eb851f

08004c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c98:	f002 fef4 	bl	8007a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c9c:	f000 f8ca 	bl	8004e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ca0:	f000 fb98 	bl	80053d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ca4:	f000 fb50 	bl	8005348 <MX_DMA_Init>
  MX_I2C1_Init();
 8004ca8:	f000 fa26 	bl	80050f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004cac:	f000 fa52 	bl	8005154 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004cb0:	f000 fa7e 	bl	80051b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004cb4:	f000 faf4 	bl	80052a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004cb8:	f000 f928 	bl	8004f0c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8004cbc:	f000 fb1a 	bl	80052f4 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004cc0:	f000 fac4 	bl	800524c <MX_UART4_Init>
  MX_ADC2_Init();
 8004cc4:	f000 f974 	bl	8004fb0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004cc8:	f000 f9c4 	bl	8005054 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8004ccc:	f000 fa70 	bl	80051b0 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004cd0:	4849      	ldr	r0, [pc, #292]	@ (8004df8 <main+0x164>)
 8004cd2:	f008 f8f5 	bl	800cec0 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2101      	movs	r1, #1
 8004cda:	201c      	movs	r0, #28
 8004cdc:	f003 fc77 	bl	80085ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ce0:	201c      	movs	r0, #28
 8004ce2:	f003 fc90 	bl	8008606 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2009      	movs	r0, #9
 8004cec:	f003 fc6f 	bl	80085ce <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f003 fc6a 	bl	80085ce <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004cfa:	200a      	movs	r0, #10
 8004cfc:	f003 fc83 	bl	8008606 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004d00:	2009      	movs	r0, #9
 8004d02:	f003 fc80 	bl	8008606 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 8004d06:	f000 fc49 	bl	800559c <bme280_begin>
	HAL_Delay(1000);
 8004d0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d0e:	f002 ff2b 	bl	8007b68 <HAL_Delay>
	bme280_config();
 8004d12:	f7fc fbbb 	bl	800148c <bme280_config>
	bme280_update();
 8004d16:	f7fc fd75 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 8004d1a:	f000 fc57 	bl	80055cc <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 8004d1e:	4837      	ldr	r0, [pc, #220]	@ (8004dfc <main+0x168>)
 8004d20:	f7fd f9fa 	bl	8002118 <bmi088_config>
	get_offset(&BMI_sensor);
 8004d24:	4835      	ldr	r0, [pc, #212]	@ (8004dfc <main+0x168>)
 8004d26:	f7fd ff87 	bl	8002c38 <get_offset>

	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 8004d2a:	f001 fdb9 	bl	80068a0 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 8004d2e:	4834      	ldr	r0, [pc, #208]	@ (8004e00 <main+0x16c>)
 8004d30:	f002 f836 	bl	8006da0 <sensor_fusion_init>
	/*==================== DWT PROFILER INITIALIZATION ====================*/
	// Initialize DWT profiler for performance monitoring
	//dwt_profiler_init();

	/* ==== LORA COMMUNICATION SETUP ==== */
    e22_chMode_config(&lora_1);
 8004d34:	4833      	ldr	r0, [pc, #204]	@ (8004e04 <main+0x170>)
 8004d36:	f7fe f8a9 	bl	8002e8c <e22_chMode_config>
    HAL_Delay(20);
 8004d3a:	2014      	movs	r0, #20
 8004d3c:	f002 ff14 	bl	8007b68 <HAL_Delay>
	lora_init();
 8004d40:	f000 fbda 	bl	80054f8 <lora_init>
    HAL_Delay(20);
 8004d44:	2014      	movs	r0, #20
 8004d46:	f002 ff0f 	bl	8007b68 <HAL_Delay>
	e22_chMode_transmit(&lora_1);
 8004d4a:	482e      	ldr	r0, [pc, #184]	@ (8004e04 <main+0x170>)
 8004d4c:	f7fe f8b6 	bl	8002ebc <e22_chMode_transmit>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	HAL_UART_Transmit(&huart6, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8004d50:	2364      	movs	r3, #100	@ 0x64
 8004d52:	2213      	movs	r2, #19
 8004d54:	492c      	ldr	r1, [pc, #176]	@ (8004e08 <main+0x174>)
 8004d56:	482d      	ldr	r0, [pc, #180]	@ (8004e0c <main+0x178>)
 8004d58:	f008 fd54 	bl	800d804 <HAL_UART_Transmit>
    HAL_UART_DeInit(&huart6);
 8004d5c:	482b      	ldr	r0, [pc, #172]	@ (8004e0c <main+0x178>)
 8004d5e:	f008 fd1f 	bl	800d7a0 <HAL_UART_DeInit>
    huart6.Init.BaudRate = 57600;
 8004d62:	4b2a      	ldr	r3, [pc, #168]	@ (8004e0c <main+0x178>)
 8004d64:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004d68:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&huart6);
 8004d6a:	4828      	ldr	r0, [pc, #160]	@ (8004e0c <main+0x178>)
 8004d6c:	f008 fcc8 	bl	800d700 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 8004d70:	4827      	ldr	r0, [pc, #156]	@ (8004e10 <main+0x17c>)
 8004d72:	f003 fc71 	bl	8008658 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6);
 8004d76:	4825      	ldr	r0, [pc, #148]	@ (8004e0c <main+0x178>)
 8004d78:	f7ff fcba 	bl	80046f0 <L86_GNSS_Init>
    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/

		//PROFILE_START(PROF_BMI088_UPDATE);
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8004d7c:	481f      	ldr	r0, [pc, #124]	@ (8004dfc <main+0x168>)
 8004d7e:	f7fd fbcb 	bl	8002518 <bmi088_update>
		//PROFILE_END(PROF_BMI088_UPDATE);
		
		//PROFILE_START(PROF_BME280_UPDATE);
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 8004d82:	f7fc fd3f 	bl	8001804 <bme280_update>
		//PROFILE_END(PROF_BME280_UPDATE);


		/*PERIODIC OPERATIONS (100ms)*/
		if (tx_timer_flag_100ms >= 1) {
 8004d86:	4b23      	ldr	r3, [pc, #140]	@ (8004e14 <main+0x180>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d026      	beq.n	8004dde <main+0x14a>
		  tx_timer_flag_100ms = 0;
 8004d90:	4b20      	ldr	r3, [pc, #128]	@ (8004e14 <main+0x180>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  //PROFILE_START(PROF_ADC_READ);
		  read_ADC();
 8004d96:	f000 fc47 	bl	8005628 <read_ADC>
		  //PROFILE_END(PROF_ADC_READ);

		  // Sensor fusion and flight algorithm processing
		  //PROFILE_START(PROF_SENSOR_FUSION);
		  sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e18 <main+0x184>)
 8004d9c:	4917      	ldr	r1, [pc, #92]	@ (8004dfc <main+0x168>)
 8004d9e:	4818      	ldr	r0, [pc, #96]	@ (8004e00 <main+0x16c>)
 8004da0:	f002 f852 	bl	8006e48 <sensor_fusion_update_kalman>
		  //PROFILE_END(PROF_SENSOR_FUSION);
		  
		  //PROFILE_START(PROF_FLIGHT_ALGORITHM);
		  flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <main+0x184>)
 8004da6:	4915      	ldr	r1, [pc, #84]	@ (8004dfc <main+0x168>)
 8004da8:	4815      	ldr	r0, [pc, #84]	@ (8004e00 <main+0x16c>)
 8004daa:	f7fe f89f 	bl	8002eec <flight_algorithm_update>
		  //PROFILE_END(PROF_FLIGHT_ALGORITHM);
		  
		  // Update GPS/GNSS data
		  //PROFILE_START(PROF_GNSS_UPDATE);
		  L86_GNSS_Update(&gnss_data);
 8004dae:	481b      	ldr	r0, [pc, #108]	@ (8004e1c <main+0x188>)
 8004db0:	f7ff fce2 	bl	8004778 <L86_GNSS_Update>
		  //PROFILE_END(PROF_GNSS_UPDATE);

		  // Packet compose
		  //PROFILE_START(PROF_PACKET_COMPOSE);
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &sensor_output, &gnss_data, hmc1021_gauss, voltage_V, current_mA);
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <main+0x18c>)
 8004db6:	edd3 7a00 	vldr	s15, [r3]
 8004dba:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <main+0x190>)
 8004dbc:	ed93 7a00 	vldr	s14, [r3]
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <main+0x194>)
 8004dc2:	edd3 6a00 	vldr	s13, [r3]
 8004dc6:	eeb0 1a66 	vmov.f32	s2, s13
 8004dca:	eef0 0a47 	vmov.f32	s1, s14
 8004dce:	eeb0 0a67 	vmov.f32	s0, s15
 8004dd2:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <main+0x188>)
 8004dd4:	4a10      	ldr	r2, [pc, #64]	@ (8004e18 <main+0x184>)
 8004dd6:	4909      	ldr	r1, [pc, #36]	@ (8004dfc <main+0x168>)
 8004dd8:	4809      	ldr	r0, [pc, #36]	@ (8004e00 <main+0x16c>)
 8004dda:	f000 fd83 	bl	80058e4 <addDataPacketNormal>
		  
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 8004dde:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <main+0x198>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b09      	cmp	r3, #9
 8004de6:	d9c9      	bls.n	8004d7c <main+0xe8>
		  tx_timer_flag_1s = 0;
 8004de8:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <main+0x198>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]

		  //PROFILE_START(PROF_LORA_SEND);
		  lora_send_packet_dma((uint8_t*)normal_paket, 49);
 8004dee:	2131      	movs	r1, #49	@ 0x31
 8004df0:	480f      	ldr	r0, [pc, #60]	@ (8004e30 <main+0x19c>)
 8004df2:	f000 fd2d 	bl	8005850 <lora_send_packet_dma>
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8004df6:	e7c1      	b.n	8004d7c <main+0xe8>
 8004df8:	20001300 	.word	0x20001300
 8004dfc:	20001584 	.word	0x20001584
 8004e00:	20001540 	.word	0x20001540
 8004e04:	200016a4 	.word	0x200016a4
 8004e08:	08015f98 	.word	0x08015f98
 8004e0c:	200013d8 	.word	0x200013d8
 8004e10:	200014e0 	.word	0x200014e0
 8004e14:	200016c6 	.word	0x200016c6
 8004e18:	2000161c 	.word	0x2000161c
 8004e1c:	2000165c 	.word	0x2000165c
 8004e20:	200016d8 	.word	0x200016d8
 8004e24:	200016d0 	.word	0x200016d0
 8004e28:	200016cc 	.word	0x200016cc
 8004e2c:	200016c7 	.word	0x200016c7
 8004e30:	200016e4 	.word	0x200016e4

08004e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b094      	sub	sp, #80	@ 0x50
 8004e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e3a:	f107 031c 	add.w	r3, r7, #28
 8004e3e:	2234      	movs	r2, #52	@ 0x34
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f00a fffb 	bl	800fe3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e48:	f107 0308 	add.w	r3, r7, #8
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e58:	2300      	movs	r3, #0
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	4b29      	ldr	r3, [pc, #164]	@ (8004f04 <SystemClock_Config+0xd0>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	4a28      	ldr	r2, [pc, #160]	@ (8004f04 <SystemClock_Config+0xd0>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e68:	4b26      	ldr	r3, [pc, #152]	@ (8004f04 <SystemClock_Config+0xd0>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4b23      	ldr	r3, [pc, #140]	@ (8004f08 <SystemClock_Config+0xd4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <SystemClock_Config+0xd4>)
 8004e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <SystemClock_Config+0xd4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004ea8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004eac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004eba:	f107 031c 	add.w	r3, r7, #28
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f007 fd10 	bl	800c8e4 <HAL_RCC_OscConfig>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004eca:	f000 fcdd 	bl	8005888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ece:	230f      	movs	r3, #15
 8004ed0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004eda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ee4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	2105      	movs	r1, #5
 8004eec:	4618      	mov	r0, r3
 8004eee:	f007 f9af 	bl	800c250 <HAL_RCC_ClockConfig>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004ef8:	f000 fcc6 	bl	8005888 <Error_Handler>
  }
}
 8004efc:	bf00      	nop
 8004efe:	3750      	adds	r7, #80	@ 0x50
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40007000 	.word	0x40007000

08004f0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f12:	463b      	mov	r3, r7
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004f1e:	4b21      	ldr	r3, [pc, #132]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f20:	4a21      	ldr	r2, [pc, #132]	@ (8004fa8 <MX_ADC1_Init+0x9c>)
 8004f22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f24:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004f38:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f3e:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f46:	4b17      	ldr	r3, [pc, #92]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f4c:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <MX_ADC1_Init+0xa0>)
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f52:	4b14      	ldr	r3, [pc, #80]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004f58:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004f5e:	4b11      	ldr	r3, [pc, #68]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f66:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f6c:	480d      	ldr	r0, [pc, #52]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f6e:	f002 fe1f 	bl	8007bb0 <HAL_ADC_Init>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004f78:	f000 fc86 	bl	8005888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004f7c:	2309      	movs	r3, #9
 8004f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004f80:	2301      	movs	r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	@ (8004fa4 <MX_ADC1_Init+0x98>)
 8004f8e:	f002 fff1 	bl	8007f74 <HAL_ADC_ConfigChannel>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004f98:	f000 fc76 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20001120 	.word	0x20001120
 8004fa8:	40012000 	.word	0x40012000
 8004fac:	0f000001 	.word	0x0f000001

08004fb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004fc2:	4b21      	ldr	r3, [pc, #132]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fc4:	4a21      	ldr	r2, [pc, #132]	@ (800504c <MX_ADC2_Init+0x9c>)
 8004fc6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004fce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004fe2:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fea:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ff0:	4b15      	ldr	r3, [pc, #84]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004ff2:	4a17      	ldr	r2, [pc, #92]	@ (8005050 <MX_ADC2_Init+0xa0>)
 8004ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004ffc:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <MX_ADC2_Init+0x98>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005002:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <MX_ADC2_Init+0x98>)
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800500a:	4b0f      	ldr	r3, [pc, #60]	@ (8005048 <MX_ADC2_Init+0x98>)
 800500c:	2201      	movs	r2, #1
 800500e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005010:	480d      	ldr	r0, [pc, #52]	@ (8005048 <MX_ADC2_Init+0x98>)
 8005012:	f002 fdcd 	bl	8007bb0 <HAL_ADC_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800501c:	f000 fc34 	bl	8005888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005020:	230a      	movs	r3, #10
 8005022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005024:	2301      	movs	r3, #1
 8005026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800502c:	463b      	mov	r3, r7
 800502e:	4619      	mov	r1, r3
 8005030:	4805      	ldr	r0, [pc, #20]	@ (8005048 <MX_ADC2_Init+0x98>)
 8005032:	f002 ff9f 	bl	8007f74 <HAL_ADC_ConfigChannel>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800503c:	f000 fc24 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20001168 	.word	0x20001168
 800504c:	40012100 	.word	0x40012100
 8005050:	0f000001 	.word	0x0f000001

08005054 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800505a:	463b      	mov	r3, r7
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8005066:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <MX_ADC3_Init+0x98>)
 8005068:	4a21      	ldr	r2, [pc, #132]	@ (80050f0 <MX_ADC3_Init+0x9c>)
 800506a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800506c:	4b1f      	ldr	r3, [pc, #124]	@ (80050ec <MX_ADC3_Init+0x98>)
 800506e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005072:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005074:	4b1d      	ldr	r3, [pc, #116]	@ (80050ec <MX_ADC3_Init+0x98>)
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800507a:	4b1c      	ldr	r3, [pc, #112]	@ (80050ec <MX_ADC3_Init+0x98>)
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005080:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <MX_ADC3_Init+0x98>)
 8005082:	2200      	movs	r2, #0
 8005084:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005086:	4b19      	ldr	r3, [pc, #100]	@ (80050ec <MX_ADC3_Init+0x98>)
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800508e:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <MX_ADC3_Init+0x98>)
 8005090:	2200      	movs	r2, #0
 8005092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005094:	4b15      	ldr	r3, [pc, #84]	@ (80050ec <MX_ADC3_Init+0x98>)
 8005096:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <MX_ADC3_Init+0xa0>)
 8005098:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800509a:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <MX_ADC3_Init+0x98>)
 800509c:	2200      	movs	r2, #0
 800509e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80050a0:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <MX_ADC3_Init+0x98>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80050a6:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <MX_ADC3_Init+0x98>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80050ae:	4b0f      	ldr	r3, [pc, #60]	@ (80050ec <MX_ADC3_Init+0x98>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80050b4:	480d      	ldr	r0, [pc, #52]	@ (80050ec <MX_ADC3_Init+0x98>)
 80050b6:	f002 fd7b 	bl	8007bb0 <HAL_ADC_Init>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80050c0:	f000 fbe2 	bl	8005888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80050c4:	230b      	movs	r3, #11
 80050c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80050c8:	2301      	movs	r3, #1
 80050ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80050d0:	463b      	mov	r3, r7
 80050d2:	4619      	mov	r1, r3
 80050d4:	4805      	ldr	r0, [pc, #20]	@ (80050ec <MX_ADC3_Init+0x98>)
 80050d6:	f002 ff4d 	bl	8007f74 <HAL_ADC_ConfigChannel>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80050e0:	f000 fbd2 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200011b0 	.word	0x200011b0
 80050f0:	40012200 	.word	0x40012200
 80050f4:	0f000001 	.word	0x0f000001

080050f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050fc:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <MX_I2C1_Init+0x50>)
 80050fe:	4a13      	ldr	r2, [pc, #76]	@ (800514c <MX_I2C1_Init+0x54>)
 8005100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <MX_I2C1_Init+0x50>)
 8005104:	4a12      	ldr	r2, [pc, #72]	@ (8005150 <MX_I2C1_Init+0x58>)
 8005106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005108:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <MX_I2C1_Init+0x50>)
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800510e:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <MX_I2C1_Init+0x50>)
 8005110:	2200      	movs	r2, #0
 8005112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005114:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <MX_I2C1_Init+0x50>)
 8005116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800511a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800511c:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <MX_I2C1_Init+0x50>)
 800511e:	2200      	movs	r2, #0
 8005120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005122:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <MX_I2C1_Init+0x50>)
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005128:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <MX_I2C1_Init+0x50>)
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <MX_I2C1_Init+0x50>)
 8005130:	2200      	movs	r2, #0
 8005132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005134:	4804      	ldr	r0, [pc, #16]	@ (8005148 <MX_I2C1_Init+0x50>)
 8005136:	f004 f9c3 	bl	80094c0 <HAL_I2C_Init>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005140:	f000 fba2 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005144:	bf00      	nop
 8005146:	bd80      	pop	{r7, pc}
 8005148:	200011f8 	.word	0x200011f8
 800514c:	40005400 	.word	0x40005400
 8005150:	000186a0 	.word	0x000186a0

08005154 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <MX_I2C3_Init+0x50>)
 800515a:	4a13      	ldr	r2, [pc, #76]	@ (80051a8 <MX_I2C3_Init+0x54>)
 800515c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800515e:	4b11      	ldr	r3, [pc, #68]	@ (80051a4 <MX_I2C3_Init+0x50>)
 8005160:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <MX_I2C3_Init+0x58>)
 8005162:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005164:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <MX_I2C3_Init+0x50>)
 8005166:	2200      	movs	r2, #0
 8005168:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <MX_I2C3_Init+0x50>)
 800516c:	2200      	movs	r2, #0
 800516e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005170:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <MX_I2C3_Init+0x50>)
 8005172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005176:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005178:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <MX_I2C3_Init+0x50>)
 800517a:	2200      	movs	r2, #0
 800517c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800517e:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <MX_I2C3_Init+0x50>)
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005184:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <MX_I2C3_Init+0x50>)
 8005186:	2200      	movs	r2, #0
 8005188:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800518a:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <MX_I2C3_Init+0x50>)
 800518c:	2200      	movs	r2, #0
 800518e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005190:	4804      	ldr	r0, [pc, #16]	@ (80051a4 <MX_I2C3_Init+0x50>)
 8005192:	f004 f995 	bl	80094c0 <HAL_I2C_Init>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800519c:	f000 fb74 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80051a0:	bf00      	nop
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	2000124c 	.word	0x2000124c
 80051a8:	40005c00 	.word	0x40005c00
 80051ac:	000186a0 	.word	0x000186a0

080051b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	605a      	str	r2, [r3, #4]
 80051c0:	609a      	str	r2, [r3, #8]
 80051c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051c4:	463b      	mov	r3, r7
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80051cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80051d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80051d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051d6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80051da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80051e2:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80051e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ea:	4b17      	ldr	r3, [pc, #92]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051f0:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051f6:	4814      	ldr	r0, [pc, #80]	@ (8005248 <MX_TIM2_Init+0x98>)
 80051f8:	f007 fe12 	bl	800ce20 <HAL_TIM_Base_Init>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005202:	f000 fb41 	bl	8005888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800520a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	4619      	mov	r1, r3
 8005212:	480d      	ldr	r0, [pc, #52]	@ (8005248 <MX_TIM2_Init+0x98>)
 8005214:	f007 ffb4 	bl	800d180 <HAL_TIM_ConfigClockSource>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800521e:	f000 fb33 	bl	8005888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800522a:	463b      	mov	r3, r7
 800522c:	4619      	mov	r1, r3
 800522e:	4806      	ldr	r0, [pc, #24]	@ (8005248 <MX_TIM2_Init+0x98>)
 8005230:	f008 f9d6 	bl	800d5e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800523a:	f000 fb25 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20001300 	.word	0x20001300

0800524c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005250:	4b11      	ldr	r3, [pc, #68]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005252:	4a12      	ldr	r2, [pc, #72]	@ (800529c <MX_UART4_Init+0x50>)
 8005254:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005258:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800525c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800525e:	4b0e      	ldr	r3, [pc, #56]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800526a:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <MX_UART4_Init+0x4c>)
 800526c:	2200      	movs	r2, #0
 800526e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005270:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005272:	220c      	movs	r2, #12
 8005274:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005276:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005278:	2200      	movs	r2, #0
 800527a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <MX_UART4_Init+0x4c>)
 800527e:	2200      	movs	r2, #0
 8005280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005282:	4805      	ldr	r0, [pc, #20]	@ (8005298 <MX_UART4_Init+0x4c>)
 8005284:	f008 fa3c 	bl	800d700 <HAL_UART_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800528e:	f000 fafb 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20001348 	.word	0x20001348
 800529c:	40004c00 	.word	0x40004c00

080052a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052a4:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052a6:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <MX_USART2_UART_Init+0x50>)
 80052a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052aa:	4b10      	ldr	r3, [pc, #64]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052b2:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052b8:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052c4:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052c6:	220c      	movs	r2, #12
 80052c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ca:	4b08      	ldr	r3, [pc, #32]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052d6:	4805      	ldr	r0, [pc, #20]	@ (80052ec <MX_USART2_UART_Init+0x4c>)
 80052d8:	f008 fa12 	bl	800d700 <HAL_UART_Init>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052e2:	f000 fad1 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20001390 	.word	0x20001390
 80052f0:	40004400 	.word	0x40004400

080052f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80052f8:	4b11      	ldr	r3, [pc, #68]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 80052fa:	4a12      	ldr	r2, [pc, #72]	@ (8005344 <MX_USART6_UART_Init+0x50>)
 80052fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80052fe:	4b10      	ldr	r3, [pc, #64]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 8005300:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005304:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005306:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 8005308:	2200      	movs	r2, #0
 800530a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800530c:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 800530e:	2200      	movs	r2, #0
 8005310:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005312:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 8005314:	2200      	movs	r2, #0
 8005316:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 800531a:	220c      	movs	r2, #12
 800531c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800531e:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 8005320:	2200      	movs	r2, #0
 8005322:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005324:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 8005326:	2200      	movs	r2, #0
 8005328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800532a:	4805      	ldr	r0, [pc, #20]	@ (8005340 <MX_USART6_UART_Init+0x4c>)
 800532c:	f008 f9e8 	bl	800d700 <HAL_UART_Init>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005336:	f000 faa7 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200013d8 	.word	0x200013d8
 8005344:	40011400 	.word	0x40011400

08005348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <MX_DMA_Init+0x88>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	4a1e      	ldr	r2, [pc, #120]	@ (80053d0 <MX_DMA_Init+0x88>)
 8005358:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800535c:	6313      	str	r3, [r2, #48]	@ 0x30
 800535e:	4b1c      	ldr	r3, [pc, #112]	@ (80053d0 <MX_DMA_Init+0x88>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	4b18      	ldr	r3, [pc, #96]	@ (80053d0 <MX_DMA_Init+0x88>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	4a17      	ldr	r2, [pc, #92]	@ (80053d0 <MX_DMA_Init+0x88>)
 8005374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005378:	6313      	str	r3, [r2, #48]	@ 0x30
 800537a:	4b15      	ldr	r3, [pc, #84]	@ (80053d0 <MX_DMA_Init+0x88>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	200b      	movs	r0, #11
 800538c:	f003 f91f 	bl	80085ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005390:	200b      	movs	r0, #11
 8005392:	f003 f938 	bl	8008606 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005396:	2200      	movs	r2, #0
 8005398:	2100      	movs	r1, #0
 800539a:	200f      	movs	r0, #15
 800539c:	f003 f917 	bl	80085ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80053a0:	200f      	movs	r0, #15
 80053a2:	f003 f930 	bl	8008606 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80053a6:	2200      	movs	r2, #0
 80053a8:	2100      	movs	r1, #0
 80053aa:	2011      	movs	r0, #17
 80053ac:	f003 f90f 	bl	80085ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80053b0:	2011      	movs	r0, #17
 80053b2:	f003 f928 	bl	8008606 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	203a      	movs	r0, #58	@ 0x3a
 80053bc:	f003 f907 	bl	80085ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80053c0:	203a      	movs	r0, #58	@ 0x3a
 80053c2:	f003 f920 	bl	8008606 <HAL_NVIC_EnableIRQ>

}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800

080053d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	4b3f      	ldr	r3, [pc, #252]	@ (80054ec <MX_GPIO_Init+0x118>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	4a3e      	ldr	r2, [pc, #248]	@ (80054ec <MX_GPIO_Init+0x118>)
 80053f4:	f043 0304 	orr.w	r3, r3, #4
 80053f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053fa:	4b3c      	ldr	r3, [pc, #240]	@ (80054ec <MX_GPIO_Init+0x118>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	4b38      	ldr	r3, [pc, #224]	@ (80054ec <MX_GPIO_Init+0x118>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	4a37      	ldr	r2, [pc, #220]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005414:	6313      	str	r3, [r2, #48]	@ 0x30
 8005416:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	4b31      	ldr	r3, [pc, #196]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542a:	4a30      	ldr	r2, [pc, #192]	@ (80054ec <MX_GPIO_Init+0x118>)
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	6313      	str	r3, [r2, #48]	@ 0x30
 8005432:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	4b2a      	ldr	r3, [pc, #168]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	4a29      	ldr	r2, [pc, #164]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005448:	f043 0302 	orr.w	r3, r3, #2
 800544c:	6313      	str	r3, [r2, #48]	@ 0x30
 800544e:	4b27      	ldr	r3, [pc, #156]	@ (80054ec <MX_GPIO_Init+0x118>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 800545a:	2200      	movs	r2, #0
 800545c:	210c      	movs	r1, #12
 800545e:	4824      	ldr	r0, [pc, #144]	@ (80054f0 <MX_GPIO_Init+0x11c>)
 8005460:	f003 fffc 	bl	800945c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005464:	2200      	movs	r2, #0
 8005466:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800546a:	4822      	ldr	r0, [pc, #136]	@ (80054f4 <MX_GPIO_Init+0x120>)
 800546c:	f003 fff6 	bl	800945c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8005470:	230c      	movs	r3, #12
 8005472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005474:	2301      	movs	r3, #1
 8005476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4619      	mov	r1, r3
 8005486:	481a      	ldr	r0, [pc, #104]	@ (80054f0 <MX_GPIO_Init+0x11c>)
 8005488:	f003 fd60 	bl	8008f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800548c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005492:	2301      	movs	r3, #1
 8005494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549a:	2303      	movs	r3, #3
 800549c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	4619      	mov	r1, r3
 80054a4:	4813      	ldr	r0, [pc, #76]	@ (80054f4 <MX_GPIO_Init+0x120>)
 80054a6:	f003 fd51 	bl	8008f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80054aa:	2318      	movs	r3, #24
 80054ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80054b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	4619      	mov	r1, r3
 80054be:	480d      	ldr	r0, [pc, #52]	@ (80054f4 <MX_GPIO_Init+0x120>)
 80054c0:	f003 fd44 	bl	8008f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80054c4:	2200      	movs	r2, #0
 80054c6:	2100      	movs	r1, #0
 80054c8:	2009      	movs	r0, #9
 80054ca:	f003 f880 	bl	80085ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80054ce:	2009      	movs	r0, #9
 80054d0:	f003 f899 	bl	8008606 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80054d4:	2200      	movs	r2, #0
 80054d6:	2100      	movs	r1, #0
 80054d8:	200a      	movs	r0, #10
 80054da:	f003 f878 	bl	80085ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80054de:	200a      	movs	r0, #10
 80054e0:	f003 f891 	bl	8008606 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054e4:	bf00      	nop
 80054e6:	3728      	adds	r7, #40	@ 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40020800 	.word	0x40020800
 80054f4:	40020400 	.word	0x40020400

080054f8 <lora_init>:
/**
 * @brief Initialize LoRa E22 module
 * @note Configures LoRa module for telemetry transmission
 */
void lora_init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 80054fc:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <lora_init+0x98>)
 80054fe:	2207      	movs	r2, #7
 8005500:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 8005502:	4b23      	ldr	r3, [pc, #140]	@ (8005590 <lora_init+0x98>)
 8005504:	2200      	movs	r2, #0
 8005506:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 8005508:	4b21      	ldr	r3, [pc, #132]	@ (8005590 <lora_init+0x98>)
 800550a:	2206      	movs	r2, #6
 800550c:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 800550e:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <lora_init+0x98>)
 8005510:	2202      	movs	r2, #2
 8005512:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 8005514:	4b1e      	ldr	r3, [pc, #120]	@ (8005590 <lora_init+0x98>)
 8005516:	2200      	movs	r2, #0
 8005518:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 800551a:	4b1d      	ldr	r3, [pc, #116]	@ (8005590 <lora_init+0x98>)
 800551c:	2200      	movs	r2, #0
 800551e:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 8005520:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <lora_init+0x98>)
 8005522:	2200      	movs	r2, #0
 8005524:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 8005526:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <lora_init+0x98>)
 8005528:	2200      	movs	r2, #0
 800552a:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 800552c:	4b18      	ldr	r3, [pc, #96]	@ (8005590 <lora_init+0x98>)
 800552e:	2200      	movs	r2, #0
 8005530:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 8005532:	4b17      	ldr	r3, [pc, #92]	@ (8005590 <lora_init+0x98>)
 8005534:	2200      	movs	r2, #0
 8005536:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 8005538:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <lora_init+0x98>)
 800553a:	2200      	movs	r2, #0
 800553c:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 800553e:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <lora_init+0x98>)
 8005540:	2201      	movs	r2, #1
 8005542:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	25;
 8005544:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <lora_init+0x98>)
 8005546:	2219      	movs	r2, #25
 8005548:	755a      	strb	r2, [r3, #21]

	lora_1.pins.m0_pin = RF_M0_Pin;
 800554a:	4b11      	ldr	r3, [pc, #68]	@ (8005590 <lora_init+0x98>)
 800554c:	2204      	movs	r2, #4
 800554e:	811a      	strh	r2, [r3, #8]
	lora_1.pins.m0_pin_port = RF_M0_GPIO_Port;
 8005550:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <lora_init+0x98>)
 8005552:	4a10      	ldr	r2, [pc, #64]	@ (8005594 <lora_init+0x9c>)
 8005554:	601a      	str	r2, [r3, #0]
	lora_1.pins.m1_pin = RF_M1_Pin;
 8005556:	4b0e      	ldr	r3, [pc, #56]	@ (8005590 <lora_init+0x98>)
 8005558:	2208      	movs	r2, #8
 800555a:	815a      	strh	r2, [r3, #10]
	lora_1.pins.m1_pin_port = RF_M1_GPIO_Port;
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <lora_init+0x98>)
 800555e:	4a0d      	ldr	r2, [pc, #52]	@ (8005594 <lora_init+0x9c>)
 8005560:	605a      	str	r2, [r3, #4]

	e22_init(&lora_1, &huart4);
 8005562:	490d      	ldr	r1, [pc, #52]	@ (8005598 <lora_init+0xa0>)
 8005564:	480a      	ldr	r0, [pc, #40]	@ (8005590 <lora_init+0x98>)
 8005566:	f7fd fc09 	bl	8002d7c <e22_init>

	HAL_UART_DeInit(&huart4);
 800556a:	480b      	ldr	r0, [pc, #44]	@ (8005598 <lora_init+0xa0>)
 800556c:	f008 f918 	bl	800d7a0 <HAL_UART_DeInit>
	HAL_Delay(20);
 8005570:	2014      	movs	r0, #20
 8005572:	f002 faf9 	bl	8007b68 <HAL_Delay>
	huart4.Init.BaudRate = 115200;
 8005576:	4b08      	ldr	r3, [pc, #32]	@ (8005598 <lora_init+0xa0>)
 8005578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800557c:	605a      	str	r2, [r3, #4]
	HAL_Delay(20);
 800557e:	2014      	movs	r0, #20
 8005580:	f002 faf2 	bl	8007b68 <HAL_Delay>
	HAL_UART_Init(&huart4);
 8005584:	4804      	ldr	r0, [pc, #16]	@ (8005598 <lora_init+0xa0>)
 8005586:	f008 f8bb 	bl	800d700 <HAL_UART_Init>
}
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	200016a4 	.word	0x200016a4
 8005594:	40020800 	.word	0x40020800
 8005598:	20001348 	.word	0x20001348

0800559c <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_2;
 80055a0:	4b08      	ldr	r3, [pc, #32]	@ (80055c4 <bme280_begin+0x28>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 80055a6:	4b07      	ldr	r3, [pc, #28]	@ (80055c4 <bme280_begin+0x28>)
 80055a8:	2203      	movs	r2, #3
 80055aa:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_4;
 80055ac:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <bme280_begin+0x28>)
 80055ae:	2203      	movs	r2, #3
 80055b0:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_125;
 80055b2:	4b04      	ldr	r3, [pc, #16]	@ (80055c4 <bme280_begin+0x28>)
 80055b4:	2202      	movs	r2, #2
 80055b6:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 80055b8:	4903      	ldr	r1, [pc, #12]	@ (80055c8 <bme280_begin+0x2c>)
 80055ba:	4802      	ldr	r0, [pc, #8]	@ (80055c4 <bme280_begin+0x28>)
 80055bc:	f7fc f8ea 	bl	8001794 <bme280_init>
}
 80055c0:	bf00      	nop
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20001540 	.word	0x20001540
 80055c8:	2000124c 	.word	0x2000124c

080055cc <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <bmi_imu_init+0x54>)
 80055d2:	2208      	movs	r2, #8
 80055d4:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 80055d6:	4b12      	ldr	r3, [pc, #72]	@ (8005620 <bmi_imu_init+0x54>)
 80055d8:	2209      	movs	r2, #9
 80055da:	72da      	strb	r2, [r3, #11]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80055dc:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <bmi_imu_init+0x54>)
 80055de:	2200      	movs	r2, #0
 80055e0:	721a      	strb	r2, [r3, #8]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 80055e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <bmi_imu_init+0x54>)
 80055e4:	2203      	movs	r2, #3
 80055e6:	725a      	strb	r2, [r3, #9]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 80055e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <bmi_imu_init+0x54>)
 80055ea:	2202      	movs	r2, #2
 80055ec:	735a      	strb	r2, [r3, #13]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 80055ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <bmi_imu_init+0x54>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	739a      	strb	r2, [r3, #14]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <bmi_imu_init+0x54>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	731a      	strb	r2, [r3, #12]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <bmi_imu_init+0x54>)
 80055fc:	2209      	movs	r2, #9
 80055fe:	751a      	strb	r2, [r3, #20]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8005600:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <bmi_imu_init+0x54>)
 8005602:	220a      	movs	r2, #10
 8005604:	755a      	strb	r2, [r3, #21]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <bmi_imu_init+0x54>)
 8005608:	4a06      	ldr	r2, [pc, #24]	@ (8005624 <bmi_imu_init+0x58>)
 800560a:	611a      	str	r2, [r3, #16]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <bmi_imu_init+0x54>)
 800560e:	2200      	movs	r2, #0
 8005610:	619a      	str	r2, [r3, #24]

  return bmi088_init(&BMI_sensor);
 8005612:	4803      	ldr	r0, [pc, #12]	@ (8005620 <bmi_imu_init+0x54>)
 8005614:	f7fc fd1e 	bl	8002054 <bmi088_init>
 8005618:	4603      	mov	r3, r0
}
 800561a:	4618      	mov	r0, r3
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20001584 	.word	0x20001584
 8005624:	200011f8 	.word	0x200011f8

08005628 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC()
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
    static uint16_t adc1_raw = 0;  // ADC1 değeri (Channel 9)
    static uint16_t adc2_raw = 0;  // ADC1 değeri (Channel 9)
    static uint16_t adc3_raw = 0;  // ADC1 değeri (Channel 9)

    // ADC1 okuma
    HAL_ADC_Start(&hadc1);
 800562c:	483d      	ldr	r0, [pc, #244]	@ (8005724 <read_ADC+0xfc>)
 800562e:	f002 fb03 	bl	8007c38 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) {
 8005632:	2105      	movs	r1, #5
 8005634:	483b      	ldr	r0, [pc, #236]	@ (8005724 <read_ADC+0xfc>)
 8005636:	f002 fc04 	bl	8007e42 <HAL_ADC_PollForConversion>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <read_ADC+0x26>
        adc1_raw = HAL_ADC_GetValue(&hadc1);
 8005640:	4838      	ldr	r0, [pc, #224]	@ (8005724 <read_ADC+0xfc>)
 8005642:	f002 fc89 	bl	8007f58 <HAL_ADC_GetValue>
 8005646:	4603      	mov	r3, r0
 8005648:	b29a      	uxth	r2, r3
 800564a:	4b37      	ldr	r3, [pc, #220]	@ (8005728 <read_ADC+0x100>)
 800564c:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 800564e:	4835      	ldr	r0, [pc, #212]	@ (8005724 <read_ADC+0xfc>)
 8005650:	f002 fbc4 	bl	8007ddc <HAL_ADC_Stop>


    // ADC2 okuma
    HAL_ADC_Start(&hadc2);
 8005654:	4835      	ldr	r0, [pc, #212]	@ (800572c <read_ADC+0x104>)
 8005656:	f002 faef 	bl	8007c38 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK) {
 800565a:	2105      	movs	r1, #5
 800565c:	4833      	ldr	r0, [pc, #204]	@ (800572c <read_ADC+0x104>)
 800565e:	f002 fbf0 	bl	8007e42 <HAL_ADC_PollForConversion>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <read_ADC+0x4e>
        adc2_raw = HAL_ADC_GetValue(&hadc2);
 8005668:	4830      	ldr	r0, [pc, #192]	@ (800572c <read_ADC+0x104>)
 800566a:	f002 fc75 	bl	8007f58 <HAL_ADC_GetValue>
 800566e:	4603      	mov	r3, r0
 8005670:	b29a      	uxth	r2, r3
 8005672:	4b2f      	ldr	r3, [pc, #188]	@ (8005730 <read_ADC+0x108>)
 8005674:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc2);
 8005676:	482d      	ldr	r0, [pc, #180]	@ (800572c <read_ADC+0x104>)
 8005678:	f002 fbb0 	bl	8007ddc <HAL_ADC_Stop>


    // ADC1 okuma
    HAL_ADC_Start(&hadc3);
 800567c:	482d      	ldr	r0, [pc, #180]	@ (8005734 <read_ADC+0x10c>)
 800567e:	f002 fadb 	bl	8007c38 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 8005682:	2105      	movs	r1, #5
 8005684:	482b      	ldr	r0, [pc, #172]	@ (8005734 <read_ADC+0x10c>)
 8005686:	f002 fbdc 	bl	8007e42 <HAL_ADC_PollForConversion>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <read_ADC+0x76>
        adc3_raw = HAL_ADC_GetValue(&hadc3);
 8005690:	4828      	ldr	r0, [pc, #160]	@ (8005734 <read_ADC+0x10c>)
 8005692:	f002 fc61 	bl	8007f58 <HAL_ADC_GetValue>
 8005696:	4603      	mov	r3, r0
 8005698:	b29a      	uxth	r2, r3
 800569a:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <read_ADC+0x110>)
 800569c:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc3);
 800569e:	4825      	ldr	r0, [pc, #148]	@ (8005734 <read_ADC+0x10c>)
 80056a0:	f002 fb9c 	bl	8007ddc <HAL_ADC_Stop>


    // Kalibrasyonlu değerleri hesapla
    hmc1021_voltage = (adc1_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 80056a4:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <read_ADC+0x100>)
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800573c <read_ADC+0x114>
 80056b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056b8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8005740 <read_ADC+0x118>
 80056bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c0:	4b20      	ldr	r3, [pc, #128]	@ (8005744 <read_ADC+0x11c>)
 80056c2:	edc3 7a00 	vstr	s15, [r3]
    voltage_V = (adc2_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 80056c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005730 <read_ADC+0x108>)
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800573c <read_ADC+0x114>
 80056d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056da:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005740 <read_ADC+0x118>
 80056de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056e2:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <read_ADC+0x120>)
 80056e4:	edc3 7a00 	vstr	s15, [r3]
    current_mA = (adc3_raw * 3.3f) / 4096.0f; // Gerekirse akım sensörüne göre kalibre edin
 80056e8:	4b13      	ldr	r3, [pc, #76]	@ (8005738 <read_ADC+0x110>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800573c <read_ADC+0x114>
 80056f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056fc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8005740 <read_ADC+0x118>
 8005700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005704:	4b11      	ldr	r3, [pc, #68]	@ (800574c <read_ADC+0x124>)
 8005706:	edc3 7a00 	vstr	s15, [r3]
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 800570a:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <read_ADC+0x11c>)
 800570c:	edd3 7a00 	vldr	s15, [r3]
 8005710:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005750 <read_ADC+0x128>
 8005714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005718:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <read_ADC+0x12c>)
 800571a:	edc3 7a00 	vstr	s15, [r3]

}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20001120 	.word	0x20001120
 8005728:	200016dc 	.word	0x200016dc
 800572c:	20001168 	.word	0x20001168
 8005730:	200016de 	.word	0x200016de
 8005734:	200011b0 	.word	0x200011b0
 8005738:	200016e0 	.word	0x200016e0
 800573c:	40533333 	.word	0x40533333
 8005740:	45800000 	.word	0x45800000
 8005744:	200016d4 	.word	0x200016d4
 8005748:	200016d0 	.word	0x200016d0
 800574c:	200016cc 	.word	0x200016cc
 8005750:	3fd33333 	.word	0x3fd33333
 8005754:	200016d8 	.word	0x200016d8

08005758 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_3)
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d102      	bne.n	800576e <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8005768:	4806      	ldr	r0, [pc, #24]	@ (8005784 <HAL_GPIO_EXTI_Callback+0x2c>)
 800576a:	f7fd fa4b 	bl	8002c04 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_4)
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b10      	cmp	r3, #16
 8005772:	d102      	bne.n	800577a <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8005774:	4803      	ldr	r0, [pc, #12]	@ (8005784 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005776:	f7fd fa52 	bl	8002c1e <bmi088_set_gyro_INT>
  }
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20001584 	.word	0x20001584

08005788 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005798:	d10d      	bne.n	80057b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 800579a:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	3301      	adds	r3, #1
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80057a6:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 80057a8:	4b07      	ldr	r3, [pc, #28]	@ (80057c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80057b4:	701a      	strb	r2, [r3, #0]
  }
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	200016c6 	.word	0x200016c6
 80057c8:	200016c7 	.word	0x200016c7

080057cc <HAL_UART_TxCpltCallback>:
 * @brief UART transmission complete callback
 * @param huart UART handle
 * @note Clears transmission busy flag
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a09      	ldr	r2, [pc, #36]	@ (8005800 <HAL_UART_TxCpltCallback+0x34>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d102      	bne.n	80057e4 <HAL_UART_TxCpltCallback+0x18>
		usart4_tx_busy = 0;
 80057de:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <HAL_UART_TxCpltCallback+0x38>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a07      	ldr	r2, [pc, #28]	@ (8005808 <HAL_UART_TxCpltCallback+0x3c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d102      	bne.n	80057f4 <HAL_UART_TxCpltCallback+0x28>
		usart2_tx_busy = 0;
 80057ee:	4b07      	ldr	r3, [pc, #28]	@ (800580c <HAL_UART_TxCpltCallback+0x40>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
	}
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40004c00 	.word	0x40004c00
 8005804:	200016c4 	.word	0x200016c4
 8005808:	40004400 	.word	0x40004400
 800580c:	200016c5 	.word	0x200016c5

08005810 <HAL_I2C_MemRxCpltCallback>:
 * @brief I2C Memory read complete callback (DMA)
 * @param hi2c I2C handle
 * @note Handles BMI088 sensor data DMA transfer completion
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a0a      	ldr	r2, [pc, #40]	@ (8005848 <HAL_I2C_MemRxCpltCallback+0x38>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10e      	bne.n	8005840 <HAL_I2C_MemRxCpltCallback+0x30>
        if (hi2c->Devaddress == ACC_I2C_ADD) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	2b30      	cmp	r3, #48	@ 0x30
 8005828:	d103      	bne.n	8005832 <HAL_I2C_MemRxCpltCallback+0x22>
            // Accelerometer data received (9 bytes: XYZ + sensor time)
            bmi088_accel_dma_complete_callback(&BMI_sensor);
 800582a:	4808      	ldr	r0, [pc, #32]	@ (800584c <HAL_I2C_MemRxCpltCallback+0x3c>)
 800582c:	f7fd fa80 	bl	8002d30 <bmi088_accel_dma_complete_callback>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
            // Gyroscope data received (6 bytes: XYZ)
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
        }
    }
}
 8005830:	e006      	b.n	8005840 <HAL_I2C_MemRxCpltCallback+0x30>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	2bd0      	cmp	r3, #208	@ 0xd0
 8005838:	d102      	bne.n	8005840 <HAL_I2C_MemRxCpltCallback+0x30>
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
 800583a:	4804      	ldr	r0, [pc, #16]	@ (800584c <HAL_I2C_MemRxCpltCallback+0x3c>)
 800583c:	f7fd fa8b 	bl	8002d56 <bmi088_gyro_dma_complete_callback>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40005400 	.word	0x40005400
 800584c:	20001584 	.word	0x20001584

08005850 <lora_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void lora_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	807b      	strh	r3, [r7, #2]
	if (!usart4_tx_busy) {
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <lora_send_packet_dma+0x30>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <lora_send_packet_dma+0x28>
		usart4_tx_busy = 1;
 8005866:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <lora_send_packet_dma+0x30>)
 8005868:	2201      	movs	r2, #1
 800586a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, data, size);
 800586c:	887b      	ldrh	r3, [r7, #2]
 800586e:	461a      	mov	r2, r3
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4804      	ldr	r0, [pc, #16]	@ (8005884 <lora_send_packet_dma+0x34>)
 8005874:	f008 f852 	bl	800d91c <HAL_UART_Transmit_DMA>
	}
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200016c4 	.word	0x200016c4
 8005884:	20001348 	.word	0x20001348

08005888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800588c:	b672      	cpsid	i
}
 800588e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <Error_Handler+0x8>

08005894 <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[49];

unsigned char check_sum_hesapla_normal(int a){
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	e00a      	b.n	80058bc <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 80058a6:	4a0e      	ldr	r2, [pc, #56]	@ (80058e0 <check_sum_hesapla_normal+0x4c>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4413      	add	r3, r2
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	dbf0      	blt.n	80058a6 <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	425a      	negs	r2, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	bf58      	it	pl
 80058ce:	4253      	negpl	r3, r2
 80058d0:	b2db      	uxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	200016e4 	.word	0x200016e4

080058e4 <addDataPacketNormal>:


void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor, gps_data_t* GPS, float hmc1021_gauss, float voltage, float current){
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b094      	sub	sp, #80	@ 0x50
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	61f8      	str	r0, [r7, #28]
 80058ec:	61b9      	str	r1, [r7, #24]
 80058ee:	617a      	str	r2, [r7, #20]
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80058f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80058fa:	ed87 1a01 	vstr	s2, [r7, #4]
  normal_paket[0] = 0xFF; // Sabit
 80058fe:	4b7f      	ldr	r3, [pc, #508]	@ (8005afc <addDataPacketNormal+0x218>)
 8005900:	22ff      	movs	r2, #255	@ 0xff
 8005902:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  normal_paket[1] = irtifa_float32_uint8_donusturucu.array[0];
 800590a:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800590e:	4b7b      	ldr	r3, [pc, #492]	@ (8005afc <addDataPacketNormal+0x218>)
 8005910:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = irtifa_float32_uint8_donusturucu.array[1];
 8005912:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005916:	4b79      	ldr	r3, [pc, #484]	@ (8005afc <addDataPacketNormal+0x218>)
 8005918:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = irtifa_float32_uint8_donusturucu.array[2];
 800591a:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800591e:	4b77      	ldr	r3, [pc, #476]	@ (8005afc <addDataPacketNormal+0x218>)
 8005920:	70da      	strb	r2, [r3, #3]
  normal_paket[4] = irtifa_float32_uint8_donusturucu.array[3];
 8005922:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005926:	4b75      	ldr	r3, [pc, #468]	@ (8005afc <addDataPacketNormal+0x218>)
 8005928:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = (GPS->altitude); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48
  normal_paket[5] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8005930:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8005934:	4b71      	ldr	r3, [pc, #452]	@ (8005afc <addDataPacketNormal+0x218>)
 8005936:	715a      	strb	r2, [r3, #5]
  normal_paket[6] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8005938:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800593c:	4b6f      	ldr	r3, [pc, #444]	@ (8005afc <addDataPacketNormal+0x218>)
 800593e:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8005940:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8005944:	4b6d      	ldr	r3, [pc, #436]	@ (8005afc <addDataPacketNormal+0x218>)
 8005946:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8005948:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800594c:	4b6b      	ldr	r3, [pc, #428]	@ (8005afc <addDataPacketNormal+0x218>)
 800594e:	721a      	strb	r2, [r3, #8]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = (GPS->latitude); // Roket enlem degerinin atamasini yapiyoruz.
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005954:	647b      	str	r3, [r7, #68]	@ 0x44
  normal_paket[9] = roket_enlem_float32_uint8_donusturucu.array[0];
 8005956:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800595a:	4b68      	ldr	r3, [pc, #416]	@ (8005afc <addDataPacketNormal+0x218>)
 800595c:	725a      	strb	r2, [r3, #9]
  normal_paket[10] = roket_enlem_float32_uint8_donusturucu.array[1];
 800595e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005962:	4b66      	ldr	r3, [pc, #408]	@ (8005afc <addDataPacketNormal+0x218>)
 8005964:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_enlem_float32_uint8_donusturucu.array[2];
 8005966:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800596a:	4b64      	ldr	r3, [pc, #400]	@ (8005afc <addDataPacketNormal+0x218>)
 800596c:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_enlem_float32_uint8_donusturucu.array[3];
 800596e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005972:	4b62      	ldr	r3, [pc, #392]	@ (8005afc <addDataPacketNormal+0x218>)
 8005974:	731a      	strb	r2, [r3, #12]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = (GPS->longitude); // Roket boylam degerinin atamasini yapiyoruz.
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	643b      	str	r3, [r7, #64]	@ 0x40
  normal_paket[13] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 800597c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8005980:	4b5e      	ldr	r3, [pc, #376]	@ (8005afc <addDataPacketNormal+0x218>)
 8005982:	735a      	strb	r2, [r3, #13]
  normal_paket[14] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8005984:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8005988:	4b5c      	ldr	r3, [pc, #368]	@ (8005afc <addDataPacketNormal+0x218>)
 800598a:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 800598c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8005990:	4b5a      	ldr	r3, [pc, #360]	@ (8005afc <addDataPacketNormal+0x218>)
 8005992:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8005994:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005998:	4b58      	ldr	r3, [pc, #352]	@ (8005afc <addDataPacketNormal+0x218>)
 800599a:	741a      	strb	r2, [r3, #16]


  FLOAT32_UINT8_DONUSTURUCU aci_float32_uint8_donusturucu;
  aci_float32_uint8_donusturucu.sayi = (BMI->datas.theta); // Theta acisinin atamasini yapiyoruz.
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  normal_paket[17] = aci_float32_uint8_donusturucu.array[0];
 80059a2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80059a6:	4b55      	ldr	r3, [pc, #340]	@ (8005afc <addDataPacketNormal+0x218>)
 80059a8:	745a      	strb	r2, [r3, #17]
  normal_paket[18] = aci_float32_uint8_donusturucu.array[1];
 80059aa:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80059ae:	4b53      	ldr	r3, [pc, #332]	@ (8005afc <addDataPacketNormal+0x218>)
 80059b0:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = aci_float32_uint8_donusturucu.array[2];
 80059b2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80059b6:	4b51      	ldr	r3, [pc, #324]	@ (8005afc <addDataPacketNormal+0x218>)
 80059b8:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = aci_float32_uint8_donusturucu.array[3];
 80059ba:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80059be:	4b4f      	ldr	r3, [pc, #316]	@ (8005afc <addDataPacketNormal+0x218>)
 80059c0:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU volt_float32_uint8_donusturucu;
  volt_float32_uint8_donusturucu.sayi = (voltage); // Volt degerinin atamasini yapiyoruz.
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  normal_paket[21] = volt_float32_uint8_donusturucu.array[0];
 80059c6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80059ca:	4b4c      	ldr	r3, [pc, #304]	@ (8005afc <addDataPacketNormal+0x218>)
 80059cc:	755a      	strb	r2, [r3, #21]
  normal_paket[22] = volt_float32_uint8_donusturucu.array[1];
 80059ce:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80059d2:	4b4a      	ldr	r3, [pc, #296]	@ (8005afc <addDataPacketNormal+0x218>)
 80059d4:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = volt_float32_uint8_donusturucu.array[2];
 80059d6:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80059da:	4b48      	ldr	r3, [pc, #288]	@ (8005afc <addDataPacketNormal+0x218>)
 80059dc:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = volt_float32_uint8_donusturucu.array[3];
 80059de:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80059e2:	4b46      	ldr	r3, [pc, #280]	@ (8005afc <addDataPacketNormal+0x218>)
 80059e4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU akim_float32_uint8_donusturucu;
  akim_float32_uint8_donusturucu.sayi = (current); // Akim degerinin atamasini yapiyoruz.
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[25] = akim_float32_uint8_donusturucu.array[0];
 80059ea:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80059ee:	4b43      	ldr	r3, [pc, #268]	@ (8005afc <addDataPacketNormal+0x218>)
 80059f0:	765a      	strb	r2, [r3, #25]
  normal_paket[26] = akim_float32_uint8_donusturucu.array[1];
 80059f2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80059f6:	4b41      	ldr	r3, [pc, #260]	@ (8005afc <addDataPacketNormal+0x218>)
 80059f8:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = akim_float32_uint8_donusturucu.array[2];
 80059fa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80059fe:	4b3f      	ldr	r3, [pc, #252]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a00:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = akim_float32_uint8_donusturucu.array[3];
 8005a02:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005a06:	4b3d      	ldr	r3, [pc, #244]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a08:	771a      	strb	r2, [r3, #28]

  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = (BME->temperature); // Sicaklik degerinin atamasini yapiyoruz.
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[29] = sicaklik_float32_uint8_donusturucu.array[0];
 8005a10:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005a14:	4b39      	ldr	r3, [pc, #228]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a16:	775a      	strb	r2, [r3, #29]
  normal_paket[30] = sicaklik_float32_uint8_donusturucu.array[1];
 8005a18:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005a1c:	4b37      	ldr	r3, [pc, #220]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a1e:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = sicaklik_float32_uint8_donusturucu.array[2];
 8005a20:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005a24:	4b35      	ldr	r3, [pc, #212]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a26:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = sicaklik_float32_uint8_donusturucu.array[3];
 8005a28:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005a2c:	4b33      	ldr	r3, [pc, #204]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a2e:	f883 2020 	strb.w	r2, [r3, #32]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (BME->pressure); // basinc degerinin atamasini yapiyoruz.
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[33] = basinc_float32_uint8_donusturucu.array[0];
 8005a38:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  normal_paket[34] = basinc_float32_uint8_donusturucu.array[1];
 8005a42:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005a46:	4b2d      	ldr	r3, [pc, #180]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a48:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  normal_paket[35] = basinc_float32_uint8_donusturucu.array[2];
 8005a4c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005a50:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a52:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = basinc_float32_uint8_donusturucu.array[3];
 8005a56:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005a5a:	4b28      	ldr	r3, [pc, #160]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  FLOAT32_UINT8_DONUSTURUCU manyetik_alan_float32_uint8_donusturucu;
  manyetik_alan_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Manyetik alan degerinin atamasini yapiyoruz.
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[37] = manyetik_alan_float32_uint8_donusturucu.array[0];
 8005a64:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005a68:	4b24      	ldr	r3, [pc, #144]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  normal_paket[38] = manyetik_alan_float32_uint8_donusturucu.array[1];
 8005a6e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005a72:	4b22      	ldr	r3, [pc, #136]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a74:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  normal_paket[39] = manyetik_alan_float32_uint8_donusturucu.array[2];
 8005a78:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8005a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a7e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  normal_paket[40] = manyetik_alan_float32_uint8_donusturucu.array[3];
 8005a82:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005a86:	4b1d      	ldr	r3, [pc, #116]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  FLOAT32_UINT8_DONUSTURUCU hiz_float32_uint8_donusturucu;
  hiz_float32_uint8_donusturucu.sayi = (sensor->velocity); // hiz degerinin atamasini yapiyoruz.
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[41] = hiz_float32_uint8_donusturucu.array[0];
 8005a92:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005a96:	4b19      	ldr	r3, [pc, #100]	@ (8005afc <addDataPacketNormal+0x218>)
 8005a98:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  normal_paket[42] = hiz_float32_uint8_donusturucu.array[1];
 8005a9c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005aa0:	4b16      	ldr	r3, [pc, #88]	@ (8005afc <addDataPacketNormal+0x218>)
 8005aa2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  normal_paket[43] = hiz_float32_uint8_donusturucu.array[2];
 8005aa6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005aaa:	4b14      	ldr	r3, [pc, #80]	@ (8005afc <addDataPacketNormal+0x218>)
 8005aac:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  normal_paket[44] = hiz_float32_uint8_donusturucu.array[3];
 8005ab0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005ab4:	4b11      	ldr	r3, [pc, #68]	@ (8005afc <addDataPacketNormal+0x218>)
 8005ab6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  //NEM
  normal_paket[45] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac4:	edc7 7a00 	vstr	s15, [r7]
 8005ac8:	783b      	ldrb	r3, [r7, #0]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <addDataPacketNormal+0x218>)
 8005ace:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  normal_paket[46] = check_sum_hesapla_normal(46); // Check_sum = check_sum_hesapla();
 8005ad2:	202e      	movs	r0, #46	@ 0x2e
 8005ad4:	f7ff fede 	bl	8005894 <check_sum_hesapla_normal>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <addDataPacketNormal+0x218>)
 8005ade:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  normal_paket[47] = 0x0D; // Sabit
 8005ae2:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <addDataPacketNormal+0x218>)
 8005ae4:	220d      	movs	r2, #13
 8005ae6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  normal_paket[48] = 0x0A;
 8005aea:	4b04      	ldr	r3, [pc, #16]	@ (8005afc <addDataPacketNormal+0x218>)
 8005aec:	220a      	movs	r2, #10
 8005aee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8005af2:	bf00      	nop
 8005af4:	3750      	adds	r7, #80	@ 0x50
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	200016e4 	.word	0x200016e4

08005b00 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	@ 0x30
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b0e:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005b12:	4bd5      	ldr	r3, [pc, #852]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b14:	ed93 7a00 	vldr	s14, [r3]
 8005b18:	4bd3      	ldr	r3, [pc, #844]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b1a:	edd3 7a00 	vldr	s15, [r3]
 8005b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b22:	4bd1      	ldr	r3, [pc, #836]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b24:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b28:	4bcf      	ldr	r3, [pc, #828]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b36:	4bcc      	ldr	r3, [pc, #816]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b38:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b3c:	4bca      	ldr	r3, [pc, #808]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b4a:	4bc7      	ldr	r3, [pc, #796]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b4c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b50:	4bc5      	ldr	r3, [pc, #788]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b62:	f00e f9b5 	bl	8013ed0 <sqrtf>
 8005b66:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8005b6a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	f000 8172 	beq.w	8005e5e <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8005b7a:	4bbb      	ldr	r3, [pc, #748]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b7c:	edd3 6a00 	vldr	s13, [r3]
 8005b80:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b88:	4bb7      	ldr	r3, [pc, #732]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b8a:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8005b8e:	4bb6      	ldr	r3, [pc, #728]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b90:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b94:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9c:	4bb2      	ldr	r3, [pc, #712]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005b9e:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8005ba2:	4bb1      	ldr	r3, [pc, #708]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005ba4:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ba8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb0:	4bad      	ldr	r3, [pc, #692]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bb2:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8005bb6:	4bac      	ldr	r3, [pc, #688]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8005bbc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc4:	4ba8      	ldr	r3, [pc, #672]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bc6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005bca:	4ba7      	ldr	r3, [pc, #668]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8005bd0:	4ba5      	ldr	r3, [pc, #660]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bda:	4ba3      	ldr	r3, [pc, #652]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bdc:	edd3 6a00 	vldr	s13, [r3]
 8005be0:	4ba1      	ldr	r3, [pc, #644]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005be2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bf2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bf8:	ed93 7a00 	vldr	s14, [r3]
 8005bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005bfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c06:	4b98      	ldr	r3, [pc, #608]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c08:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c0c:	4b96      	ldr	r3, [pc, #600]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c1e:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005c22:	4b91      	ldr	r3, [pc, #580]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c24:	ed93 7a00 	vldr	s14, [r3]
 8005c28:	4b8f      	ldr	r3, [pc, #572]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c2a:	edd3 7a00 	vldr	s15, [r3]
 8005c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c32:	4b8d      	ldr	r3, [pc, #564]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c34:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c38:	4b8b      	ldr	r3, [pc, #556]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c46:	4b88      	ldr	r3, [pc, #544]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c48:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c4c:	4b86      	ldr	r3, [pc, #536]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c5a:	4b83      	ldr	r3, [pc, #524]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c60:	4b81      	ldr	r3, [pc, #516]	@ (8005e68 <UpdateMahonyGains+0x368>)
 8005c62:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8005c72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005c76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005c7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c86:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c92:	eeb0 0a67 	vmov.f32	s0, s15
 8005c96:	f000 ff3f 	bl	8006b18 <invSqrt>
 8005c9a:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8005c9e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005cae:	ed97 7a08 	vldr	s14, [r7, #32]
 8005cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005cbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005cce:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cd2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005cd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ce6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cee:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf2:	f000 ff11 	bl	8006b18 <invSqrt>
 8005cf6:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8005cfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8005cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d06:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8005d0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8005d1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8005d2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d2e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d36:	edd7 6a02 	vldr	s13, [r7, #8]
 8005d3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d46:	edd7 6a01 	vldr	s13, [r7, #4]
 8005d4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d56:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8005d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6a:	dd02      	ble.n	8005d72 <UpdateMahonyGains+0x272>
 8005d6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8005d72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d76:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	d501      	bpl.n	8005d88 <UpdateMahonyGains+0x288>
 8005d84:	4b39      	ldr	r3, [pc, #228]	@ (8005e6c <UpdateMahonyGains+0x36c>)
 8005d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005d88:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005d8c:	f00e f874 	bl	8013e78 <acosf>
 8005d90:	eef0 7a40 	vmov.f32	s15, s0
 8005d94:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005e70 <UpdateMahonyGains+0x370>
 8005d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d9c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8005da0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005da4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	dd0a      	ble.n	8005dc8 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8005db2:	4b30      	ldr	r3, [pc, #192]	@ (8005e74 <UpdateMahonyGains+0x374>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005db8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <UpdateMahonyGains+0x378>)
 8005dba:	4a30      	ldr	r2, [pc, #192]	@ (8005e7c <UpdateMahonyGains+0x37c>)
 8005dbc:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005dbe:	4b30      	ldr	r3, [pc, #192]	@ (8005e80 <UpdateMahonyGains+0x380>)
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e01d      	b.n	8005e04 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005dcc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd8:	dd0a      	ble.n	8005df0 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8005dda:	4b26      	ldr	r3, [pc, #152]	@ (8005e74 <UpdateMahonyGains+0x374>)
 8005ddc:	2202      	movs	r2, #2
 8005dde:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005de0:	4b25      	ldr	r3, [pc, #148]	@ (8005e78 <UpdateMahonyGains+0x378>)
 8005de2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005de6:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005de8:	4b25      	ldr	r3, [pc, #148]	@ (8005e80 <UpdateMahonyGains+0x380>)
 8005dea:	4a26      	ldr	r2, [pc, #152]	@ (8005e84 <UpdateMahonyGains+0x384>)
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e009      	b.n	8005e04 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005df0:	4b20      	ldr	r3, [pc, #128]	@ (8005e74 <UpdateMahonyGains+0x374>)
 8005df2:	2203      	movs	r2, #3
 8005df4:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8005df6:	4b20      	ldr	r3, [pc, #128]	@ (8005e78 <UpdateMahonyGains+0x378>)
 8005df8:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005dfc:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005dfe:	4b20      	ldr	r3, [pc, #128]	@ (8005e80 <UpdateMahonyGains+0x380>)
 8005e00:	4a21      	ldr	r2, [pc, #132]	@ (8005e88 <UpdateMahonyGains+0x388>)
 8005e02:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005e04:	4b1c      	ldr	r3, [pc, #112]	@ (8005e78 <UpdateMahonyGains+0x378>)
 8005e06:	edd3 7a00 	vldr	s15, [r3]
 8005e0a:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e12:	f00e f8aa 	bl	8013f6a <fminf>
 8005e16:	eef0 7a40 	vmov.f32	s15, s0
 8005e1a:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005e8c <UpdateMahonyGains+0x38c>
 8005e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e22:	f00e f885 	bl	8013f30 <fmaxf>
 8005e26:	eef0 7a40 	vmov.f32	s15, s0
 8005e2a:	4b13      	ldr	r3, [pc, #76]	@ (8005e78 <UpdateMahonyGains+0x378>)
 8005e2c:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005e30:	4b13      	ldr	r3, [pc, #76]	@ (8005e80 <UpdateMahonyGains+0x380>)
 8005e32:	edd3 7a00 	vldr	s15, [r3]
 8005e36:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8005e90 <UpdateMahonyGains+0x390>
 8005e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e3e:	f00e f894 	bl	8013f6a <fminf>
 8005e42:	eef0 7a40 	vmov.f32	s15, s0
 8005e46:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005e94 <UpdateMahonyGains+0x394>
 8005e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4e:	f00e f86f 	bl	8013f30 <fmaxf>
 8005e52:	eef0 7a40 	vmov.f32	s15, s0
 8005e56:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <UpdateMahonyGains+0x380>)
 8005e58:	edc3 7a00 	vstr	s15, [r3]
 8005e5c:	e000      	b.n	8005e60 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8005e5e:	bf00      	nop
}
 8005e60:	3730      	adds	r7, #48	@ 0x30
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000020 	.word	0x20000020
 8005e6c:	bf800000 	.word	0xbf800000
 8005e70:	42652ee2 	.word	0x42652ee2
 8005e74:	20001724 	.word	0x20001724
 8005e78:	20000030 	.word	0x20000030
 8005e7c:	3e4ccccd 	.word	0x3e4ccccd
 8005e80:	20000034 	.word	0x20000034
 8005e84:	3c23d70a 	.word	0x3c23d70a
 8005e88:	3d4ccccd 	.word	0x3d4ccccd
 8005e8c:	3dcccccd 	.word	0x3dcccccd
 8005e90:	3d4ccccd 	.word	0x3d4ccccd
 8005e94:	00000000 	.word	0x00000000

08005e98 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	@ 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	ed87 0a07 	vstr	s0, [r7, #28]
 8005ea2:	edc7 0a06 	vstr	s1, [r7, #24]
 8005ea6:	ed87 1a05 	vstr	s2, [r7, #20]
 8005eaa:	edc7 1a04 	vstr	s3, [r7, #16]
 8005eae:	ed87 2a03 	vstr	s4, [r7, #12]
 8005eb2:	edc7 2a02 	vstr	s5, [r7, #8]
 8005eb6:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8005eba:	4b60      	ldr	r3, [pc, #384]	@ (800603c <Orientation_Update+0x1a4>)
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8005ebe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005ec2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ece:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005ed2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8006040 <Orientation_Update+0x1a8>)
 8005ed8:	edd3 7a00 	vldr	s15, [r3]
 8005edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee4:	4b56      	ldr	r3, [pc, #344]	@ (8006040 <Orientation_Update+0x1a8>)
 8005ee6:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8005eea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005efe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f02:	4b50      	ldr	r3, [pc, #320]	@ (8006044 <Orientation_Update+0x1ac>)
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f10:	4b4c      	ldr	r3, [pc, #304]	@ (8006044 <Orientation_Update+0x1ac>)
 8005f12:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8005f16:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005f1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f26:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f2e:	4b46      	ldr	r3, [pc, #280]	@ (8006048 <Orientation_Update+0x1b0>)
 8005f30:	edd3 7a00 	vldr	s15, [r3]
 8005f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f3c:	4b42      	ldr	r3, [pc, #264]	@ (8006048 <Orientation_Update+0x1b0>)
 8005f3e:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005f42:	4b3f      	ldr	r3, [pc, #252]	@ (8006040 <Orientation_Update+0x1a8>)
 8005f44:	edd3 7a00 	vldr	s15, [r3]
 8005f48:	4b3e      	ldr	r3, [pc, #248]	@ (8006044 <Orientation_Update+0x1ac>)
 8005f4a:	ed93 7a00 	vldr	s14, [r3]
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006048 <Orientation_Update+0x1b0>)
 8005f50:	edd3 6a00 	vldr	s13, [r3]
 8005f54:	eeb0 1a66 	vmov.f32	s2, s13
 8005f58:	eef0 0a47 	vmov.f32	s1, s14
 8005f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f60:	f7ff fdce 	bl	8005b00 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8005f64:	4b36      	ldr	r3, [pc, #216]	@ (8006040 <Orientation_Update+0x1a8>)
 8005f66:	ed93 7a00 	vldr	s14, [r3]
 8005f6a:	4b35      	ldr	r3, [pc, #212]	@ (8006040 <Orientation_Update+0x1a8>)
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f74:	4b33      	ldr	r3, [pc, #204]	@ (8006044 <Orientation_Update+0x1ac>)
 8005f76:	edd3 6a00 	vldr	s13, [r3]
 8005f7a:	4b32      	ldr	r3, [pc, #200]	@ (8006044 <Orientation_Update+0x1ac>)
 8005f7c:	edd3 7a00 	vldr	s15, [r3]
 8005f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f88:	4b2f      	ldr	r3, [pc, #188]	@ (8006048 <Orientation_Update+0x1b0>)
 8005f8a:	edd3 6a00 	vldr	s13, [r3]
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8006048 <Orientation_Update+0x1b0>)
 8005f90:	edd3 7a00 	vldr	s15, [r3]
 8005f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa0:	f00d ff96 	bl	8013ed0 <sqrtf>
 8005fa4:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8005fa8:	4b28      	ldr	r3, [pc, #160]	@ (800604c <Orientation_Update+0x1b4>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8005fb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fb4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006050 <Orientation_Update+0x1b8>
 8005fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc0:	d50f      	bpl.n	8005fe2 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8005fc2:	4b22      	ldr	r3, [pc, #136]	@ (800604c <Orientation_Update+0x1b4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e00b      	b.n	8005fe2 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8005fca:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fce:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006054 <Orientation_Update+0x1bc>
 8005fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fda:	dd02      	ble.n	8005fe2 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <Orientation_Update+0x1b4>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800604c <Orientation_Update+0x1b4>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8005fea:	edd7 1a01 	vldr	s3, [r7, #4]
 8005fee:	ed97 1a05 	vldr	s2, [r7, #20]
 8005ff2:	edd7 0a06 	vldr	s1, [r7, #24]
 8005ff6:	ed97 0a07 	vldr	s0, [r7, #28]
 8005ffa:	f000 f82d 	bl	8006058 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8005ffe:	e018      	b.n	8006032 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8006000:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <Orientation_Update+0x1a8>)
 8006002:	edd3 7a00 	vldr	s15, [r3]
 8006006:	4b0f      	ldr	r3, [pc, #60]	@ (8006044 <Orientation_Update+0x1ac>)
 8006008:	ed93 7a00 	vldr	s14, [r3]
 800600c:	4b0e      	ldr	r3, [pc, #56]	@ (8006048 <Orientation_Update+0x1b0>)
 800600e:	edd3 6a00 	vldr	s13, [r3]
 8006012:	ed97 3a01 	vldr	s6, [r7, #4]
 8006016:	eef0 2a66 	vmov.f32	s5, s13
 800601a:	eeb0 2a47 	vmov.f32	s4, s14
 800601e:	eef0 1a67 	vmov.f32	s3, s15
 8006022:	ed97 1a05 	vldr	s2, [r7, #20]
 8006026:	edd7 0a06 	vldr	s1, [r7, #24]
 800602a:	ed97 0a07 	vldr	s0, [r7, #28]
 800602e:	f000 f93b 	bl	80062a8 <MahonyAHRSupdateIMU>
}
 8006032:	bf00      	nop
 8006034:	3728      	adds	r7, #40	@ 0x28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	3e99999a 	.word	0x3e99999a
 8006040:	20001728 	.word	0x20001728
 8006044:	2000172c 	.word	0x2000172c
 8006048:	20001730 	.word	0x20001730
 800604c:	20001725 	.word	0x20001725
 8006050:	41d3d2db 	.word	0x41d3d2db
 8006054:	420172a2 	.word	0x420172a2

08006058 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	@ 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006062:	edc7 0a02 	vstr	s1, [r7, #8]
 8006066:	ed87 1a01 	vstr	s2, [r7, #4]
 800606a:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 800606e:	4b8c      	ldr	r3, [pc, #560]	@ (80062a0 <updateQuaternion+0x248>)
 8006070:	edd3 7a01 	vldr	s15, [r3, #4]
 8006074:	eeb1 7a67 	vneg.f32	s14, s15
 8006078:	edd7 7a03 	vldr	s15, [r7, #12]
 800607c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006080:	4b87      	ldr	r3, [pc, #540]	@ (80062a0 <updateQuaternion+0x248>)
 8006082:	edd3 6a02 	vldr	s13, [r3, #8]
 8006086:	edd7 7a02 	vldr	s15, [r7, #8]
 800608a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800608e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006092:	4b83      	ldr	r3, [pc, #524]	@ (80062a0 <updateQuaternion+0x248>)
 8006094:	edd3 6a03 	vldr	s13, [r3, #12]
 8006098:	edd7 7a01 	vldr	s15, [r7, #4]
 800609c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80060b0:	4b7b      	ldr	r3, [pc, #492]	@ (80062a0 <updateQuaternion+0x248>)
 80060b2:	ed93 7a00 	vldr	s14, [r3]
 80060b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80060ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060be:	4b78      	ldr	r3, [pc, #480]	@ (80062a0 <updateQuaternion+0x248>)
 80060c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80060c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060d0:	4b73      	ldr	r3, [pc, #460]	@ (80062a0 <updateQuaternion+0x248>)
 80060d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80060d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80060da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ea:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 80060ee:	4b6c      	ldr	r3, [pc, #432]	@ (80062a0 <updateQuaternion+0x248>)
 80060f0:	ed93 7a00 	vldr	s14, [r3]
 80060f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80060f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060fc:	4b68      	ldr	r3, [pc, #416]	@ (80062a0 <updateQuaternion+0x248>)
 80060fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8006102:	edd7 7a01 	vldr	s15, [r7, #4]
 8006106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800610a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800610e:	4b64      	ldr	r3, [pc, #400]	@ (80062a0 <updateQuaternion+0x248>)
 8006110:	edd3 6a03 	vldr	s13, [r3, #12]
 8006114:	edd7 7a03 	vldr	s15, [r7, #12]
 8006118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800611c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006120:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006128:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 800612c:	4b5c      	ldr	r3, [pc, #368]	@ (80062a0 <updateQuaternion+0x248>)
 800612e:	ed93 7a00 	vldr	s14, [r3]
 8006132:	edd7 7a01 	vldr	s15, [r7, #4]
 8006136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800613a:	4b59      	ldr	r3, [pc, #356]	@ (80062a0 <updateQuaternion+0x248>)
 800613c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006140:	edd7 7a02 	vldr	s15, [r7, #8]
 8006144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800614c:	4b54      	ldr	r3, [pc, #336]	@ (80062a0 <updateQuaternion+0x248>)
 800614e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006152:	edd7 7a03 	vldr	s15, [r7, #12]
 8006156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800615a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800615e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006166:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 800616a:	4b4d      	ldr	r3, [pc, #308]	@ (80062a0 <updateQuaternion+0x248>)
 800616c:	ed93 7a00 	vldr	s14, [r3]
 8006170:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006174:	edd7 7a00 	vldr	s15, [r7]
 8006178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800617c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006180:	4b47      	ldr	r3, [pc, #284]	@ (80062a0 <updateQuaternion+0x248>)
 8006182:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8006186:	4b46      	ldr	r3, [pc, #280]	@ (80062a0 <updateQuaternion+0x248>)
 8006188:	ed93 7a01 	vldr	s14, [r3, #4]
 800618c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006190:	edd7 7a00 	vldr	s15, [r7]
 8006194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800619c:	4b40      	ldr	r3, [pc, #256]	@ (80062a0 <updateQuaternion+0x248>)
 800619e:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 80061a2:	4b3f      	ldr	r3, [pc, #252]	@ (80062a0 <updateQuaternion+0x248>)
 80061a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80061a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ac:	edd7 7a00 	vldr	s15, [r7]
 80061b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b8:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <updateQuaternion+0x248>)
 80061ba:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 80061be:	4b38      	ldr	r3, [pc, #224]	@ (80062a0 <updateQuaternion+0x248>)
 80061c0:	ed93 7a03 	vldr	s14, [r3, #12]
 80061c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80061c8:	edd7 7a00 	vldr	s15, [r7]
 80061cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061d4:	4b32      	ldr	r3, [pc, #200]	@ (80062a0 <updateQuaternion+0x248>)
 80061d6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80061da:	4b31      	ldr	r3, [pc, #196]	@ (80062a0 <updateQuaternion+0x248>)
 80061dc:	ed93 7a00 	vldr	s14, [r3]
 80061e0:	4b2f      	ldr	r3, [pc, #188]	@ (80062a0 <updateQuaternion+0x248>)
 80061e2:	edd3 7a00 	vldr	s15, [r3]
 80061e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ea:	4b2d      	ldr	r3, [pc, #180]	@ (80062a0 <updateQuaternion+0x248>)
 80061ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80061f0:	4b2b      	ldr	r3, [pc, #172]	@ (80062a0 <updateQuaternion+0x248>)
 80061f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061fe:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <updateQuaternion+0x248>)
 8006200:	edd3 6a02 	vldr	s13, [r3, #8]
 8006204:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <updateQuaternion+0x248>)
 8006206:	edd3 7a02 	vldr	s15, [r3, #8]
 800620a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800620e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006212:	4b23      	ldr	r3, [pc, #140]	@ (80062a0 <updateQuaternion+0x248>)
 8006214:	edd3 6a03 	vldr	s13, [r3, #12]
 8006218:	4b21      	ldr	r3, [pc, #132]	@ (80062a0 <updateQuaternion+0x248>)
 800621a:	edd3 7a03 	vldr	s15, [r3, #12]
 800621e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006226:	eeb0 0a67 	vmov.f32	s0, s15
 800622a:	f00d fe51 	bl	8013ed0 <sqrtf>
 800622e:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8006232:	edd7 7a05 	vldr	s15, [r7, #20]
 8006236:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80062a4 <updateQuaternion+0x24c>
 800623a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006242:	dc00      	bgt.n	8006246 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8006244:	e027      	b.n	8006296 <updateQuaternion+0x23e>
        q[0] /= norm;
 8006246:	4b16      	ldr	r3, [pc, #88]	@ (80062a0 <updateQuaternion+0x248>)
 8006248:	edd3 6a00 	vldr	s13, [r3]
 800624c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006254:	4b12      	ldr	r3, [pc, #72]	@ (80062a0 <updateQuaternion+0x248>)
 8006256:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 800625a:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <updateQuaternion+0x248>)
 800625c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006260:	ed97 7a05 	vldr	s14, [r7, #20]
 8006264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006268:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <updateQuaternion+0x248>)
 800626a:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 800626e:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <updateQuaternion+0x248>)
 8006270:	edd3 6a02 	vldr	s13, [r3, #8]
 8006274:	ed97 7a05 	vldr	s14, [r7, #20]
 8006278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627c:	4b08      	ldr	r3, [pc, #32]	@ (80062a0 <updateQuaternion+0x248>)
 800627e:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8006282:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <updateQuaternion+0x248>)
 8006284:	edd3 6a03 	vldr	s13, [r3, #12]
 8006288:	ed97 7a05 	vldr	s14, [r7, #20]
 800628c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006290:	4b03      	ldr	r3, [pc, #12]	@ (80062a0 <updateQuaternion+0x248>)
 8006292:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006296:	bf00      	nop
 8006298:	3728      	adds	r7, #40	@ 0x28
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000020 	.word	0x20000020
 80062a4:	358637bd 	.word	0x358637bd

080062a8 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b092      	sub	sp, #72	@ 0x48
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	ed87 0a07 	vstr	s0, [r7, #28]
 80062b2:	edc7 0a06 	vstr	s1, [r7, #24]
 80062b6:	ed87 1a05 	vstr	s2, [r7, #20]
 80062ba:	edc7 1a04 	vstr	s3, [r7, #16]
 80062be:	ed87 2a03 	vstr	s4, [r7, #12]
 80062c2:	edc7 2a02 	vstr	s5, [r7, #8]
 80062c6:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 80062ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80062ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d6:	d10e      	bne.n	80062f6 <MahonyAHRSupdateIMU+0x4e>
 80062d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80062dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e4:	d107      	bne.n	80062f6 <MahonyAHRSupdateIMU+0x4e>
 80062e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80062ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f2:	f000 8138 	beq.w	8006566 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 80062f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80062fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80062fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006302:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800630a:	edd7 7a02 	vldr	s15, [r7, #8]
 800630e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006316:	eeb0 0a67 	vmov.f32	s0, s15
 800631a:	f000 fbfd 	bl	8006b18 <invSqrt>
 800631e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8006322:	ed97 7a04 	vldr	s14, [r7, #16]
 8006326:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800632a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632e:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8006332:	ed97 7a03 	vldr	s14, [r7, #12]
 8006336:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800633a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633e:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8006342:	ed97 7a02 	vldr	s14, [r7, #8]
 8006346:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800634a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8006352:	4b66      	ldr	r3, [pc, #408]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 8006354:	ed93 7a01 	vldr	s14, [r3, #4]
 8006358:	4b64      	ldr	r3, [pc, #400]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 800635a:	edd3 7a03 	vldr	s15, [r3, #12]
 800635e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006362:	4b62      	ldr	r3, [pc, #392]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 8006364:	edd3 6a00 	vldr	s13, [r3]
 8006368:	4b60      	ldr	r3, [pc, #384]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 800636a:	edd3 7a02 	vldr	s15, [r3, #8]
 800636e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006376:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 800637a:	4b5c      	ldr	r3, [pc, #368]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 800637c:	ed93 7a00 	vldr	s14, [r3]
 8006380:	4b5a      	ldr	r3, [pc, #360]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 8006382:	edd3 7a01 	vldr	s15, [r3, #4]
 8006386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800638a:	4b58      	ldr	r3, [pc, #352]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 800638c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006390:	4b56      	ldr	r3, [pc, #344]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 8006392:	edd3 7a03 	vldr	s15, [r3, #12]
 8006396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800639a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800639e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 80063a2:	4b52      	ldr	r3, [pc, #328]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 80063a4:	ed93 7a00 	vldr	s14, [r3]
 80063a8:	4b50      	ldr	r3, [pc, #320]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 80063aa:	edd3 7a00 	vldr	s15, [r3]
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063ba:	4b4c      	ldr	r3, [pc, #304]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 80063bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80063c0:	4b4a      	ldr	r3, [pc, #296]	@ (80064ec <MahonyAHRSupdateIMU+0x244>)
 80063c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80063c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ce:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 80063d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80063d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80063da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063de:	edd7 6a02 	vldr	s13, [r7, #8]
 80063e2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80063e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ee:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 80063f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80063f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80063fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063fe:	edd7 6a04 	vldr	s13, [r7, #16]
 8006402:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800640a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800640e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8006412:	ed97 7a04 	vldr	s14, [r7, #16]
 8006416:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800641a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800641e:	edd7 6a03 	vldr	s13, [r7, #12]
 8006422:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800642a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800642e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8006432:	4b2f      	ldr	r3, [pc, #188]	@ (80064f0 <MahonyAHRSupdateIMU+0x248>)
 8006434:	edd3 7a00 	vldr	s15, [r3]
 8006438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	dd5e      	ble.n	8006500 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8006442:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <MahonyAHRSupdateIMU+0x248>)
 8006444:	ed93 7a00 	vldr	s14, [r3]
 8006448:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800644c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006450:	edd7 7a01 	vldr	s15, [r7, #4]
 8006454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006458:	4b26      	ldr	r3, [pc, #152]	@ (80064f4 <MahonyAHRSupdateIMU+0x24c>)
 800645a:	edd3 7a00 	vldr	s15, [r3]
 800645e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006462:	4b24      	ldr	r3, [pc, #144]	@ (80064f4 <MahonyAHRSupdateIMU+0x24c>)
 8006464:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8006468:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <MahonyAHRSupdateIMU+0x248>)
 800646a:	ed93 7a00 	vldr	s14, [r3]
 800646e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006476:	edd7 7a01 	vldr	s15, [r7, #4]
 800647a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800647e:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <MahonyAHRSupdateIMU+0x250>)
 8006480:	edd3 7a00 	vldr	s15, [r3]
 8006484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006488:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <MahonyAHRSupdateIMU+0x250>)
 800648a:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 800648e:	4b18      	ldr	r3, [pc, #96]	@ (80064f0 <MahonyAHRSupdateIMU+0x248>)
 8006490:	ed93 7a00 	vldr	s14, [r3]
 8006494:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800649c:	edd7 7a01 	vldr	s15, [r7, #4]
 80064a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a4:	4b15      	ldr	r3, [pc, #84]	@ (80064fc <MahonyAHRSupdateIMU+0x254>)
 80064a6:	edd3 7a00 	vldr	s15, [r3]
 80064aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ae:	4b13      	ldr	r3, [pc, #76]	@ (80064fc <MahonyAHRSupdateIMU+0x254>)
 80064b0:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <MahonyAHRSupdateIMU+0x24c>)
 80064b6:	edd3 7a00 	vldr	s15, [r3]
 80064ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80064be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 80064c6:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <MahonyAHRSupdateIMU+0x250>)
 80064c8:	edd3 7a00 	vldr	s15, [r3]
 80064cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80064d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d4:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 80064d8:	4b08      	ldr	r3, [pc, #32]	@ (80064fc <MahonyAHRSupdateIMU+0x254>)
 80064da:	edd3 7a00 	vldr	s15, [r3]
 80064de:	ed97 7a05 	vldr	s14, [r7, #20]
 80064e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e6:	edc7 7a05 	vstr	s15, [r7, #20]
 80064ea:	e015      	b.n	8006518 <MahonyAHRSupdateIMU+0x270>
 80064ec:	20000020 	.word	0x20000020
 80064f0:	20000034 	.word	0x20000034
 80064f4:	20001718 	.word	0x20001718
 80064f8:	2000171c 	.word	0x2000171c
 80064fc:	20001720 	.word	0x20001720
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006500:	4b9a      	ldr	r3, [pc, #616]	@ (800676c <MahonyAHRSupdateIMU+0x4c4>)
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006508:	4b99      	ldr	r3, [pc, #612]	@ (8006770 <MahonyAHRSupdateIMU+0x4c8>)
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006510:	4b98      	ldr	r3, [pc, #608]	@ (8006774 <MahonyAHRSupdateIMU+0x4cc>)
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8006518:	4b97      	ldr	r3, [pc, #604]	@ (8006778 <MahonyAHRSupdateIMU+0x4d0>)
 800651a:	ed93 7a00 	vldr	s14, [r3]
 800651e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	ed97 7a07 	vldr	s14, [r7, #28]
 800652a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652e:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8006532:	4b91      	ldr	r3, [pc, #580]	@ (8006778 <MahonyAHRSupdateIMU+0x4d0>)
 8006534:	ed93 7a00 	vldr	s14, [r3]
 8006538:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800653c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006540:	ed97 7a06 	vldr	s14, [r7, #24]
 8006544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006548:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 800654c:	4b8a      	ldr	r3, [pc, #552]	@ (8006778 <MahonyAHRSupdateIMU+0x4d0>)
 800654e:	ed93 7a00 	vldr	s14, [r3]
 8006552:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	ed97 7a05 	vldr	s14, [r7, #20]
 800655e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006562:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8006566:	edd7 7a01 	vldr	s15, [r7, #4]
 800656a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800656e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006572:	ed97 7a07 	vldr	s14, [r7, #28]
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 800657e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006582:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800658a:	ed97 7a06 	vldr	s14, [r7, #24]
 800658e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006592:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8006596:	edd7 7a01 	vldr	s15, [r7, #4]
 800659a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800659e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 80065ae:	4b73      	ldr	r3, [pc, #460]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 80065b4:	4b71      	ldr	r3, [pc, #452]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 80065ba:	4b70      	ldr	r3, [pc, #448]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 80065c0:	4b6e      	ldr	r3, [pc, #440]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80065c2:	ed93 7a00 	vldr	s14, [r3]
 80065c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80065ca:	eef1 6a67 	vneg.f32	s13, s15
 80065ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80065d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80065d6:	ed97 6a08 	vldr	s12, [r7, #32]
 80065da:	edd7 7a06 	vldr	s15, [r7, #24]
 80065de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80065e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80065e6:	4b65      	ldr	r3, [pc, #404]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80065e8:	ed93 6a03 	vldr	s12, [r3, #12]
 80065ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80065f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80065f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065fc:	4b5f      	ldr	r3, [pc, #380]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80065fe:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006602:	4b5e      	ldr	r3, [pc, #376]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006604:	ed93 7a01 	vldr	s14, [r3, #4]
 8006608:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800660c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006610:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006614:	ed97 6a08 	vldr	s12, [r7, #32]
 8006618:	edd7 7a05 	vldr	s15, [r7, #20]
 800661c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006620:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006624:	4b55      	ldr	r3, [pc, #340]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006626:	ed93 6a03 	vldr	s12, [r3, #12]
 800662a:	edd7 7a06 	vldr	s15, [r7, #24]
 800662e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006632:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800663a:	4b50      	ldr	r3, [pc, #320]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 800663c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006640:	4b4e      	ldr	r3, [pc, #312]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006642:	ed93 7a02 	vldr	s14, [r3, #8]
 8006646:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800664a:	edd7 7a06 	vldr	s15, [r7, #24]
 800664e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006652:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006656:	edd7 7a05 	vldr	s15, [r7, #20]
 800665a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800665e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006662:	4b46      	ldr	r3, [pc, #280]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006664:	ed93 6a03 	vldr	s12, [r3, #12]
 8006668:	edd7 7a07 	vldr	s15, [r7, #28]
 800666c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006678:	4b40      	ldr	r3, [pc, #256]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 800667a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 800667e:	4b3f      	ldr	r3, [pc, #252]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006680:	ed93 7a03 	vldr	s14, [r3, #12]
 8006684:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006688:	edd7 7a05 	vldr	s15, [r7, #20]
 800668c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006690:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006694:	edd7 7a06 	vldr	s15, [r7, #24]
 8006698:	ee66 7a27 	vmul.f32	s15, s12, s15
 800669c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80066a0:	ed97 6a08 	vldr	s12, [r7, #32]
 80066a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80066a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b4:	4b31      	ldr	r3, [pc, #196]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066b6:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 80066ba:	4b30      	ldr	r3, [pc, #192]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066bc:	ed93 7a00 	vldr	s14, [r3]
 80066c0:	4b2e      	ldr	r3, [pc, #184]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066c2:	edd3 7a00 	vldr	s15, [r3]
 80066c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066ca:	4b2c      	ldr	r3, [pc, #176]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80066d0:	4b2a      	ldr	r3, [pc, #168]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80066d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066de:	4b27      	ldr	r3, [pc, #156]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80066e4:	4b25      	ldr	r3, [pc, #148]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80066ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066f2:	4b22      	ldr	r3, [pc, #136]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066f4:	edd3 6a03 	vldr	s13, [r3, #12]
 80066f8:	4b20      	ldr	r3, [pc, #128]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 80066fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80066fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006706:	eeb0 0a67 	vmov.f32	s0, s15
 800670a:	f000 fa05 	bl	8006b18 <invSqrt>
 800670e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006712:	4b1a      	ldr	r3, [pc, #104]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006714:	ed93 7a00 	vldr	s14, [r3]
 8006718:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800671c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006720:	4b16      	ldr	r3, [pc, #88]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006722:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006726:	4b15      	ldr	r3, [pc, #84]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006728:	ed93 7a01 	vldr	s14, [r3, #4]
 800672c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006734:	4b11      	ldr	r3, [pc, #68]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006736:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 800673a:	4b10      	ldr	r3, [pc, #64]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 800673c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006740:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006748:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 800674a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 800674e:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 8006750:	ed93 7a03 	vldr	s14, [r3, #12]
 8006754:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <MahonyAHRSupdateIMU+0x4d4>)
 800675e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006762:	bf00      	nop
 8006764:	3748      	adds	r7, #72	@ 0x48
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20001718 	.word	0x20001718
 8006770:	2000171c 	.word	0x2000171c
 8006774:	20001720 	.word	0x20001720
 8006778:	20000030 	.word	0x20000030
 800677c:	20000020 	.word	0x20000020

08006780 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8006786:	4b44      	ldr	r3, [pc, #272]	@ (8006898 <quaternionToThetaZ+0x118>)
 8006788:	edd3 7a01 	vldr	s15, [r3, #4]
 800678c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006790:	4b41      	ldr	r3, [pc, #260]	@ (8006898 <quaternionToThetaZ+0x118>)
 8006792:	edd3 7a03 	vldr	s15, [r3, #12]
 8006796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800679a:	4b3f      	ldr	r3, [pc, #252]	@ (8006898 <quaternionToThetaZ+0x118>)
 800679c:	edd3 7a02 	vldr	s15, [r3, #8]
 80067a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067a6:	edd3 7a00 	vldr	s15, [r3]
 80067aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b2:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 80067b6:	4b38      	ldr	r3, [pc, #224]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80067bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067c0:	4b35      	ldr	r3, [pc, #212]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067ca:	4b33      	ldr	r3, [pc, #204]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80067d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067d4:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067d6:	edd3 7a00 	vldr	s15, [r3]
 80067da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e2:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 80067e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80067ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067f0:	4b29      	ldr	r3, [pc, #164]	@ (8006898 <quaternionToThetaZ+0x118>)
 80067f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80067f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006802:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <quaternionToThetaZ+0x118>)
 8006804:	edd3 7a02 	vldr	s15, [r3, #8]
 8006808:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800680c:	4b22      	ldr	r3, [pc, #136]	@ (8006898 <quaternionToThetaZ+0x118>)
 800680e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800681a:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8006822:	edd7 7a05 	vldr	s15, [r7, #20]
 8006826:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800682a:	edd7 7a04 	vldr	s15, [r7, #16]
 800682e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006836:	edd7 7a03 	vldr	s15, [r7, #12]
 800683a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800683e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006842:	eeb0 0a67 	vmov.f32	s0, s15
 8006846:	f00d fb43 	bl	8013ed0 <sqrtf>
 800684a:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 800684e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006852:	edd7 7a01 	vldr	s15, [r7, #4]
 8006856:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800685a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800685e:	eeb0 0a66 	vmov.f32	s0, s13
 8006862:	f00d fb82 	bl	8013f6a <fminf>
 8006866:	eef0 7a40 	vmov.f32	s15, s0
 800686a:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800686e:	eeb0 0a67 	vmov.f32	s0, s15
 8006872:	f00d fb5d 	bl	8013f30 <fmaxf>
 8006876:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 800687a:	ed97 0a00 	vldr	s0, [r7]
 800687e:	f00d fafb 	bl	8013e78 <acosf>
 8006882:	eef0 7a40 	vmov.f32	s15, s0
 8006886:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800689c <quaternionToThetaZ+0x11c>
 800688a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800688e:	eeb0 0a67 	vmov.f32	s0, s15
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000020 	.word	0x20000020
 800689c:	42654ca3 	.word	0x42654ca3

080068a0 <getInitialQuaternion>:
float quaternionToRoll(){
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
return roll;
}

void getInitialQuaternion() {
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b092      	sub	sp, #72	@ 0x48
 80068a4:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 80068a6:	4b98      	ldr	r3, [pc, #608]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068a8:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80068ac:	4b96      	ldr	r3, [pc, #600]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068ae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80068b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068b6:	4b94      	ldr	r3, [pc, #592]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068b8:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 80068bc:	4b92      	ldr	r3, [pc, #584]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068be:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80068c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068cc:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80068d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068d2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80068d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068de:	ee17 0a90 	vmov	r0, s15
 80068e2:	f7f9 fe51 	bl	8000588 <__aeabi_f2d>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	ec43 2b10 	vmov	d0, r2, r3
 80068ee:	f00d fa43 	bl	8013d78 <sqrt>
 80068f2:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 80068f6:	4b84      	ldr	r3, [pc, #528]	@ (8006b08 <getInitialQuaternion+0x268>)
 80068f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7f9 fe44 	bl	8000588 <__aeabi_f2d>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006908:	4b7f      	ldr	r3, [pc, #508]	@ (8006b08 <getInitialQuaternion+0x268>)
 800690a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800690e:	eef1 7a67 	vneg.f32	s15, s15
 8006912:	ee17 3a90 	vmov	r3, s15
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fe36 	bl	8000588 <__aeabi_f2d>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8006924:	4b78      	ldr	r3, [pc, #480]	@ (8006b08 <getInitialQuaternion+0x268>)
 8006926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006928:	4618      	mov	r0, r3
 800692a:	f7f9 fe2d 	bl	8000588 <__aeabi_f2d>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006936:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800693a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800693e:	f7f9 ffa5 	bl	800088c <__aeabi_ddiv>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 800694a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800694e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006952:	f7f9 ff9b 	bl	800088c <__aeabi_ddiv>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 800695e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006966:	f7f9 ff91 	bl	800088c <__aeabi_ddiv>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8006972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006976:	f04f 0000 	mov.w	r0, #0
 800697a:	4964      	ldr	r1, [pc, #400]	@ (8006b0c <getInitialQuaternion+0x26c>)
 800697c:	f7f9 fca4 	bl	80002c8 <__aeabi_dsub>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	ec43 2b17 	vmov	d7, r2, r3
 8006988:	eeb0 0a47 	vmov.f32	s0, s14
 800698c:	eef0 0a67 	vmov.f32	s1, s15
 8006990:	f00d f9f2 	bl	8013d78 <sqrt>
 8006994:	ec51 0b10 	vmov	r0, r1, d0
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b10 <getInitialQuaternion+0x270>)
 800699e:	f7f9 fe4b 	bl	8000638 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 80069aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ae:	f04f 0000 	mov.w	r0, #0
 80069b2:	4957      	ldr	r1, [pc, #348]	@ (8006b10 <getInitialQuaternion+0x270>)
 80069b4:	f7f9 ff6a 	bl	800088c <__aeabi_ddiv>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 80069c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80069c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069c8:	f7f9 fe36 	bl	8000638 <__aeabi_dmul>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4610      	mov	r0, r2
 80069d2:	4619      	mov	r1, r3
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006b10 <getInitialQuaternion+0x270>)
 80069da:	f7f9 fe2d 	bl	8000638 <__aeabi_dmul>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80069e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80069ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069ee:	f7f9 fe23 	bl	8000638 <__aeabi_dmul>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	4b44      	ldr	r3, [pc, #272]	@ (8006b10 <getInitialQuaternion+0x270>)
 8006a00:	f7f9 fe1a 	bl	8000638 <__aeabi_dmul>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a20:	f7f9 fe0a 	bl	8000638 <__aeabi_dmul>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4614      	mov	r4, r2
 8006a2a:	461d      	mov	r5, r3
 8006a2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a34:	f7f9 fe00 	bl	8000638 <__aeabi_dmul>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fc44 	bl	80002cc <__adddf3>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a54:	f7f9 fdf0 	bl	8000638 <__aeabi_dmul>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7f9 fc34 	bl	80002cc <__adddf3>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	461d      	mov	r5, r3
 8006a6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a74:	f7f9 fde0 	bl	8000638 <__aeabi_dmul>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7f9 fc24 	bl	80002cc <__adddf3>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	ec43 2b17 	vmov	d7, r2, r3
 8006a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8006a90:	eef0 0a67 	vmov.f32	s1, s15
 8006a94:	f00d f970 	bl	8013d78 <sqrt>
 8006a98:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006aa4:	f7f9 fef2 	bl	800088c <__aeabi_ddiv>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4610      	mov	r0, r2
 8006aae:	4619      	mov	r1, r3
 8006ab0:	f7fa f8ba 	bl	8000c28 <__aeabi_d2f>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <getInitialQuaternion+0x274>)
 8006ab8:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ac2:	f7f9 fee3 	bl	800088c <__aeabi_ddiv>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4610      	mov	r0, r2
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7fa f8ab 	bl	8000c28 <__aeabi_d2f>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b14 <getInitialQuaternion+0x274>)
 8006ad6:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006ad8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006adc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ae0:	f7f9 fed4 	bl	800088c <__aeabi_ddiv>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7fa f89c 	bl	8000c28 <__aeabi_d2f>
 8006af0:	4603      	mov	r3, r0
 8006af2:	4a08      	ldr	r2, [pc, #32]	@ (8006b14 <getInitialQuaternion+0x274>)
 8006af4:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006af6:	4b07      	ldr	r3, [pc, #28]	@ (8006b14 <getInitialQuaternion+0x274>)
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	60da      	str	r2, [r3, #12]
}
 8006afe:	bf00      	nop
 8006b00:	3748      	adds	r7, #72	@ 0x48
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bdb0      	pop	{r4, r5, r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20001584 	.word	0x20001584
 8006b0c:	3ff00000 	.word	0x3ff00000
 8006b10:	3fe00000 	.word	0x3fe00000
 8006b14:	20000020 	.word	0x20000020

08006b18 <invSqrt>:

float invSqrt(float x) {
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b2e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006b36:	f107 0310 	add.w	r3, r7, #16
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	105a      	asrs	r2, r3, #1
 8006b42:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <invSqrt+0x74>)
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006b50:	ed97 7a04 	vldr	s14, [r7, #16]
 8006b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b64:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b74:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	ee07 3a90 	vmov	s15, r3
}
 8006b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	5f3759df 	.word	0x5f3759df

08006b90 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006b96:	4b3d      	ldr	r3, [pc, #244]	@ (8006c8c <calculate_accel_std_deviation+0xfc>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <calculate_accel_std_deviation+0x1c>
 8006b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c90 <calculate_accel_std_deviation+0x100>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d802      	bhi.n	8006bac <calculate_accel_std_deviation+0x1c>
 8006ba6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006c94 <calculate_accel_std_deviation+0x104>
 8006baa:	e069      	b.n	8006c80 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006bac:	4b37      	ldr	r3, [pc, #220]	@ (8006c8c <calculate_accel_std_deviation+0xfc>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <calculate_accel_std_deviation+0x2a>
 8006bb4:	4b36      	ldr	r3, [pc, #216]	@ (8006c90 <calculate_accel_std_deviation+0x100>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	e000      	b.n	8006bbc <calculate_accel_std_deviation+0x2c>
 8006bba:	2305      	movs	r3, #5
 8006bbc:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e00e      	b.n	8006bf4 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006bd6:	4a30      	ldr	r2, [pc, #192]	@ (8006c98 <calculate_accel_std_deviation+0x108>)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	edd3 7a00 	vldr	s15, [r3]
 8006be2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bea:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	dbec      	blt.n	8006bd6 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c06:	edd7 6a05 	vldr	s13, [r7, #20]
 8006c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0e:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	e01e      	b.n	8006c56 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006c18:	4a1f      	ldr	r2, [pc, #124]	@ (8006c98 <calculate_accel_std_deviation+0x108>)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	ed93 7a00 	vldr	s14, [r3]
 8006c24:	edd7 7a00 	vldr	s15, [r7]
 8006c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c98 <calculate_accel_std_deviation+0x108>)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	edd3 6a00 	vldr	s13, [r3]
 8006c38:	edd7 7a00 	vldr	s15, [r7]
 8006c3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c44:	ed97 7a04 	vldr	s14, [r7, #16]
 8006c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c4c:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	dbdc      	blt.n	8006c18 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c68:	edd7 6a04 	vldr	s13, [r7, #16]
 8006c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c70:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8006c74:	ed97 0a04 	vldr	s0, [r7, #16]
 8006c78:	f00d f92a 	bl	8013ed0 <sqrtf>
 8006c7c:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c80:	eeb0 0a67 	vmov.f32	s0, s15
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	200017a5 	.word	0x200017a5
 8006c90:	200017a4 	.word	0x200017a4
 8006c94:	00000000 	.word	0x00000000
 8006c98:	20001790 	.word	0x20001790

08006c9c <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006caa:	eef0 7ae7 	vabs.f32	s15, s15
 8006cae:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006cb2:	4b31      	ldr	r3, [pc, #196]	@ (8006d78 <detect_accel_failure+0xdc>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	4a31      	ldr	r2, [pc, #196]	@ (8006d7c <detect_accel_failure+0xe0>)
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d78 <detect_accel_failure+0xdc>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8006d80 <detect_accel_failure+0xe4>)
 8006cc8:	fb83 1302 	smull	r1, r3, r3, r2
 8006ccc:	1059      	asrs	r1, r3, #1
 8006cce:	17d3      	asrs	r3, r2, #31
 8006cd0:	1ac9      	subs	r1, r1, r3
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	1ad1      	subs	r1, r2, r3
 8006cda:	b2ca      	uxtb	r2, r1
 8006cdc:	4b26      	ldr	r3, [pc, #152]	@ (8006d78 <detect_accel_failure+0xdc>)
 8006cde:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8006ce0:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <detect_accel_failure+0xdc>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006ce8:	4b26      	ldr	r3, [pc, #152]	@ (8006d84 <detect_accel_failure+0xe8>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8006cee:	f7ff ff4f 	bl	8006b90 <calculate_accel_std_deviation>
 8006cf2:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8006cf6:	f7fc faa5 	bl	8003244 <flight_algorithm_get_start_time>
 8006cfa:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8006d02:	4a21      	ldr	r2, [pc, #132]	@ (8006d88 <detect_accel_failure+0xec>)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006d08:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <detect_accel_failure+0xec>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8006d10:	4b1e      	ldr	r3, [pc, #120]	@ (8006d8c <detect_accel_failure+0xf0>)
 8006d12:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8006d14:	4b1e      	ldr	r3, [pc, #120]	@ (8006d90 <detect_accel_failure+0xf4>)
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e014      	b.n	8006d44 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006d1a:	f000 ff19 	bl	8007b50 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4b19      	ldr	r3, [pc, #100]	@ (8006d88 <detect_accel_failure+0xec>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d804      	bhi.n	8006d3c <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8006d32:	4b18      	ldr	r3, [pc, #96]	@ (8006d94 <detect_accel_failure+0xf8>)
 8006d34:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 8006d36:	4b18      	ldr	r3, [pc, #96]	@ (8006d98 <detect_accel_failure+0xfc>)
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e003      	b.n	8006d44 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006d3c:	4b16      	ldr	r3, [pc, #88]	@ (8006d98 <detect_accel_failure+0xfc>)
 8006d3e:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8006d40:	4b16      	ldr	r3, [pc, #88]	@ (8006d9c <detect_accel_failure+0x100>)
 8006d42:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8006d44:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8006d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	dc08      	bgt.n	8006d68 <detect_accel_failure+0xcc>
 8006d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8006d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d66:	dd01      	ble.n	8006d6c <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200017a4 	.word	0x200017a4
 8006d7c:	20001790 	.word	0x20001790
 8006d80:	66666667 	.word	0x66666667
 8006d84:	200017a5 	.word	0x200017a5
 8006d88:	2000178c 	.word	0x2000178c
 8006d8c:	43480000 	.word	0x43480000
 8006d90:	42c80000 	.word	0x42c80000
 8006d94:	43160000 	.word	0x43160000
 8006d98:	42480000 	.word	0x42480000
 8006d9c:	41700000 	.word	0x41700000

08006da0 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006da8:	481b      	ldr	r0, [pc, #108]	@ (8006e18 <sensor_fusion_init+0x78>)
 8006daa:	f7fc fa57 	bl	800325c <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8006dae:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <sensor_fusion_init+0x78>)
 8006db0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <sensor_fusion_init+0x7c>)
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006db4:	4b18      	ldr	r3, [pc, #96]	@ (8006e18 <sensor_fusion_init+0x78>)
 8006db6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e20 <sensor_fusion_init+0x80>)
 8006db8:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006dba:	4b17      	ldr	r3, [pc, #92]	@ (8006e18 <sensor_fusion_init+0x78>)
 8006dbc:	4a19      	ldr	r2, [pc, #100]	@ (8006e24 <sensor_fusion_init+0x84>)
 8006dbe:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e009      	b.n	8006dda <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006dc6:	4a18      	ldr	r2, [pc, #96]	@ (8006e28 <sensor_fusion_init+0x88>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	ddf2      	ble.n	8006dc6 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8006de0:	4b12      	ldr	r3, [pc, #72]	@ (8006e2c <sensor_fusion_init+0x8c>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8006de6:	4b12      	ldr	r3, [pc, #72]	@ (8006e30 <sensor_fusion_init+0x90>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006dec:	4b11      	ldr	r3, [pc, #68]	@ (8006e34 <sensor_fusion_init+0x94>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8006df2:	4b11      	ldr	r3, [pc, #68]	@ (8006e38 <sensor_fusion_init+0x98>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8006e3c <sensor_fusion_init+0x9c>)
 8006dfe:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8006e00:	f000 fea6 	bl	8007b50 <HAL_GetTick>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4a0e      	ldr	r2, [pc, #56]	@ (8006e40 <sensor_fusion_init+0xa0>)
 8006e08:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e44 <sensor_fusion_init+0xa4>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20001734 	.word	0x20001734
 8006e1c:	3dcccccd 	.word	0x3dcccccd
 8006e20:	3ba3d70a 	.word	0x3ba3d70a
 8006e24:	40a00000 	.word	0x40a00000
 8006e28:	20001790 	.word	0x20001790
 8006e2c:	200017a4 	.word	0x200017a4
 8006e30:	200017a5 	.word	0x200017a5
 8006e34:	200017a6 	.word	0x200017a6
 8006e38:	20001780 	.word	0x20001780
 8006e3c:	20001784 	.word	0x20001784
 8006e40:	20001788 	.word	0x20001788
 8006e44:	2000178c 	.word	0x2000178c

08006e48 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	@ 0x28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 8006e54:	f000 fe7c 	bl	8007b50 <HAL_GetTick>
 8006e58:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8006e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f88 <sensor_fusion_update_kalman+0x140>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006f8c <sensor_fusion_update_kalman+0x144>
 8006e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8006e76:	4a44      	ldr	r2, [pc, #272]	@ (8006f88 <sensor_fusion_update_kalman+0x140>)
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8006e82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006e86:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006f90 <sensor_fusion_update_kalman+0x148>
 8006e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e92:	d801      	bhi.n	8006e98 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8006e94:	4b3f      	ldr	r3, [pc, #252]	@ (8006f94 <sensor_fusion_update_kalman+0x14c>)
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7f9 fb73 	bl	8000588 <__aeabi_f2d>
 8006ea2:	a335      	add	r3, pc, #212	@ (adr r3, 8006f78 <sensor_fusion_update_kalman+0x130>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 fbc6 	bl	8000638 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f7f9 feb8 	bl	8000c28 <__aeabi_d2f>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8006ebc:	69b8      	ldr	r0, [r7, #24]
 8006ebe:	f7f9 fb63 	bl	8000588 <__aeabi_f2d>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	ec43 2b10 	vmov	d0, r2, r3
 8006eca:	f00c ff81 	bl	8013dd0 <cos>
 8006ece:	ec51 0b10 	vmov	r0, r1, d0
 8006ed2:	a32b      	add	r3, pc, #172	@ (adr r3, 8006f80 <sensor_fusion_update_kalman+0x138>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 fbae 	bl	8000638 <__aeabi_dmul>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f7f9 fea0 	bl	8000c28 <__aeabi_d2f>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8006ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006efa:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006efe:	ed97 0a04 	vldr	s0, [r7, #16]
 8006f02:	f7ff fecb 	bl	8006c9c <detect_accel_failure>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b23      	ldr	r3, [pc, #140]	@ (8006f98 <sensor_fusion_update_kalman+0x150>)
 8006f0c:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006f0e:	4b22      	ldr	r3, [pc, #136]	@ (8006f98 <sensor_fusion_update_kalman+0x150>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006f16:	4b21      	ldr	r3, [pc, #132]	@ (8006f9c <sensor_fusion_update_kalman+0x154>)
 8006f18:	4a21      	ldr	r2, [pc, #132]	@ (8006fa0 <sensor_fusion_update_kalman+0x158>)
 8006f1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f1c:	e002      	b.n	8006f24 <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <sensor_fusion_update_kalman+0x154>)
 8006f20:	4a20      	ldr	r2, [pc, #128]	@ (8006fa4 <sensor_fusion_update_kalman+0x15c>)
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8006f24:	4b20      	ldr	r3, [pc, #128]	@ (8006fa8 <sensor_fusion_update_kalman+0x160>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d020      	beq.n	8006f6e <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8006f2c:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8006f30:	edd7 0a04 	vldr	s1, [r7, #16]
 8006f34:	ed97 0a07 	vldr	s0, [r7, #28]
 8006f38:	4818      	ldr	r0, [pc, #96]	@ (8006f9c <sensor_fusion_update_kalman+0x154>)
 8006f3a:	f7fc f9e9 	bl	8003310 <KalmanFilter_Update>
 8006f3e:	eef0 7a40 	vmov.f32	s15, s0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8006f48:	4814      	ldr	r0, [pc, #80]	@ (8006f9c <sensor_fusion_update_kalman+0x154>)
 8006f4a:	f7fd fbc5 	bl	80046d8 <KalmanFilter_IsApogeeDetected>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 8006f56:	4811      	ldr	r0, [pc, #68]	@ (8006f9c <sensor_fusion_update_kalman+0x154>)
 8006f58:	f7fd fbaf 	bl	80046ba <Kalman_Get_Velocity>
 8006f5c:	eef0 7a40 	vmov.f32	s15, s0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006f66:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <sensor_fusion_update_kalman+0x150>)
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	765a      	strb	r2, [r3, #25]
    }
}
 8006f6e:	bf00      	nop
 8006f70:	3728      	adds	r7, #40	@ 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	a2529d39 	.word	0xa2529d39
 8006f7c:	3f91df46 	.word	0x3f91df46
 8006f80:	60000000 	.word	0x60000000
 8006f84:	40239eb8 	.word	0x40239eb8
 8006f88:	20001788 	.word	0x20001788
 8006f8c:	447a0000 	.word	0x447a0000
 8006f90:	3a83126f 	.word	0x3a83126f
 8006f94:	3c23d70a 	.word	0x3c23d70a
 8006f98:	200017a6 	.word	0x200017a6
 8006f9c:	20001734 	.word	0x20001734
 8006fa0:	42480000 	.word	0x42480000
 8006fa4:	3e99999a 	.word	0x3e99999a
 8006fa8:	20001780 	.word	0x20001780

08006fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <HAL_MspInit+0x4c>)
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fba:	4a0f      	ldr	r2, [pc, #60]	@ (8006ff8 <HAL_MspInit+0x4c>)
 8006fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <HAL_MspInit+0x4c>)
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fca:	607b      	str	r3, [r7, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <HAL_MspInit+0x4c>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	4a08      	ldr	r2, [pc, #32]	@ (8006ff8 <HAL_MspInit+0x4c>)
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fde:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <HAL_MspInit+0x4c>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40023800 	.word	0x40023800

08006ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08e      	sub	sp, #56	@ 0x38
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	609a      	str	r2, [r3, #8]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a45      	ldr	r2, [pc, #276]	@ (8007130 <HAL_ADC_MspInit+0x134>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d128      	bne.n	8007070 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800701e:	2300      	movs	r3, #0
 8007020:	623b      	str	r3, [r7, #32]
 8007022:	4b44      	ldr	r3, [pc, #272]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007026:	4a43      	ldr	r2, [pc, #268]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800702c:	6453      	str	r3, [r2, #68]	@ 0x44
 800702e:	4b41      	ldr	r3, [pc, #260]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007036:	623b      	str	r3, [r7, #32]
 8007038:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	4b3d      	ldr	r3, [pc, #244]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007042:	4a3c      	ldr	r2, [pc, #240]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	6313      	str	r3, [r2, #48]	@ 0x30
 800704a:	4b3a      	ldr	r3, [pc, #232]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007056:	2302      	movs	r3, #2
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800705a:	2303      	movs	r3, #3
 800705c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705e:	2300      	movs	r3, #0
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007066:	4619      	mov	r1, r3
 8007068:	4833      	ldr	r0, [pc, #204]	@ (8007138 <HAL_ADC_MspInit+0x13c>)
 800706a:	f001 ff6f 	bl	8008f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800706e:	e05a      	b.n	8007126 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a31      	ldr	r2, [pc, #196]	@ (800713c <HAL_ADC_MspInit+0x140>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d128      	bne.n	80070cc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	4b2d      	ldr	r3, [pc, #180]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	4a2c      	ldr	r2, [pc, #176]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007088:	6453      	str	r3, [r2, #68]	@ 0x44
 800708a:	4b2a      	ldr	r3, [pc, #168]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007092:	61bb      	str	r3, [r7, #24]
 8007094:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	4b26      	ldr	r3, [pc, #152]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709e:	4a25      	ldr	r2, [pc, #148]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070a0:	f043 0304 	orr.w	r3, r3, #4
 80070a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80070a6:	4b23      	ldr	r3, [pc, #140]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80070b2:	2301      	movs	r3, #1
 80070b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070b6:	2303      	movs	r3, #3
 80070b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070c2:	4619      	mov	r1, r3
 80070c4:	481e      	ldr	r0, [pc, #120]	@ (8007140 <HAL_ADC_MspInit+0x144>)
 80070c6:	f001 ff41 	bl	8008f4c <HAL_GPIO_Init>
}
 80070ca:	e02c      	b.n	8007126 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_ADC_MspInit+0x148>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d127      	bne.n	8007126 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
 80070da:	4b16      	ldr	r3, [pc, #88]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070de:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80070e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80070e6:	4b13      	ldr	r3, [pc, #76]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 80070fc:	f043 0304 	orr.w	r3, r3, #4
 8007100:	6313      	str	r3, [r2, #48]	@ 0x30
 8007102:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <HAL_ADC_MspInit+0x138>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800710e:	2302      	movs	r3, #2
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007112:	2303      	movs	r3, #3
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007116:	2300      	movs	r3, #0
 8007118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800711a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800711e:	4619      	mov	r1, r3
 8007120:	4807      	ldr	r0, [pc, #28]	@ (8007140 <HAL_ADC_MspInit+0x144>)
 8007122:	f001 ff13 	bl	8008f4c <HAL_GPIO_Init>
}
 8007126:	bf00      	nop
 8007128:	3738      	adds	r7, #56	@ 0x38
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40012000 	.word	0x40012000
 8007134:	40023800 	.word	0x40023800
 8007138:	40020400 	.word	0x40020400
 800713c:	40012100 	.word	0x40012100
 8007140:	40020800 	.word	0x40020800
 8007144:	40012200 	.word	0x40012200

08007148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08c      	sub	sp, #48	@ 0x30
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007150:	f107 031c 	add.w	r3, r7, #28
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	609a      	str	r2, [r3, #8]
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5d      	ldr	r2, [pc, #372]	@ (80072dc <HAL_I2C_MspInit+0x194>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d163      	bne.n	8007232 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800716a:	2300      	movs	r3, #0
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	4b5c      	ldr	r3, [pc, #368]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 8007170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007172:	4a5b      	ldr	r2, [pc, #364]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	6313      	str	r3, [r2, #48]	@ 0x30
 800717a:	4b59      	ldr	r3, [pc, #356]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007186:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800718a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800718c:	2312      	movs	r3, #18
 800718e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007190:	2300      	movs	r3, #0
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007194:	2303      	movs	r3, #3
 8007196:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007198:	2304      	movs	r3, #4
 800719a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800719c:	f107 031c 	add.w	r3, r7, #28
 80071a0:	4619      	mov	r1, r3
 80071a2:	4850      	ldr	r0, [pc, #320]	@ (80072e4 <HAL_I2C_MspInit+0x19c>)
 80071a4:	f001 fed2 	bl	8008f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	4b4c      	ldr	r3, [pc, #304]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 80071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b0:	4a4b      	ldr	r2, [pc, #300]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 80071b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80071b8:	4b49      	ldr	r3, [pc, #292]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80071c4:	4b48      	ldr	r3, [pc, #288]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071c6:	4a49      	ldr	r2, [pc, #292]	@ (80072ec <HAL_I2C_MspInit+0x1a4>)
 80071c8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80071ca:	4b47      	ldr	r3, [pc, #284]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80071d0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071d2:	4b45      	ldr	r3, [pc, #276]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071d8:	4b43      	ldr	r3, [pc, #268]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071da:	2200      	movs	r2, #0
 80071dc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071de:	4b42      	ldr	r3, [pc, #264]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071e6:	4b40      	ldr	r3, [pc, #256]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071ec:	4b3e      	ldr	r3, [pc, #248]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80071f2:	4b3d      	ldr	r3, [pc, #244]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80071f8:	4b3b      	ldr	r3, [pc, #236]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071fe:	4b3a      	ldr	r3, [pc, #232]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 8007200:	2200      	movs	r2, #0
 8007202:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007204:	4838      	ldr	r0, [pc, #224]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 8007206:	f001 fa27 	bl	8008658 <HAL_DMA_Init>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007210:	f7fe fb3a 	bl	8005888 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a34      	ldr	r2, [pc, #208]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 8007218:	639a      	str	r2, [r3, #56]	@ 0x38
 800721a:	4a33      	ldr	r2, [pc, #204]	@ (80072e8 <HAL_I2C_MspInit+0x1a0>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007220:	2200      	movs	r2, #0
 8007222:	2100      	movs	r1, #0
 8007224:	201f      	movs	r0, #31
 8007226:	f001 f9d2 	bl	80085ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800722a:	201f      	movs	r0, #31
 800722c:	f001 f9eb 	bl	8008606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007230:	e050      	b.n	80072d4 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C3)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2e      	ldr	r2, [pc, #184]	@ (80072f0 <HAL_I2C_MspInit+0x1a8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d14b      	bne.n	80072d4 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800723c:	2300      	movs	r3, #0
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	4b27      	ldr	r3, [pc, #156]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	4a26      	ldr	r2, [pc, #152]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 8007246:	f043 0304 	orr.w	r3, r3, #4
 800724a:	6313      	str	r3, [r2, #48]	@ 0x30
 800724c:	4b24      	ldr	r3, [pc, #144]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 800724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	4b20      	ldr	r3, [pc, #128]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	4a1f      	ldr	r2, [pc, #124]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	6313      	str	r3, [r2, #48]	@ 0x30
 8007268:	4b1d      	ldr	r3, [pc, #116]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800727a:	2312      	movs	r3, #18
 800727c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007282:	2303      	movs	r3, #3
 8007284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007286:	2304      	movs	r3, #4
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800728a:	f107 031c 	add.w	r3, r7, #28
 800728e:	4619      	mov	r1, r3
 8007290:	4818      	ldr	r0, [pc, #96]	@ (80072f4 <HAL_I2C_MspInit+0x1ac>)
 8007292:	f001 fe5b 	bl	8008f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800729a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800729c:	2312      	movs	r3, #18
 800729e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a4:	2303      	movs	r3, #3
 80072a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80072a8:	2304      	movs	r3, #4
 80072aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ac:	f107 031c 	add.w	r3, r7, #28
 80072b0:	4619      	mov	r1, r3
 80072b2:	4811      	ldr	r0, [pc, #68]	@ (80072f8 <HAL_I2C_MspInit+0x1b0>)
 80072b4:	f001 fe4a 	bl	8008f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80072b8:	2300      	movs	r3, #0
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	4b08      	ldr	r3, [pc, #32]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 80072be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c0:	4a07      	ldr	r2, [pc, #28]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 80072c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <HAL_I2C_MspInit+0x198>)
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	68bb      	ldr	r3, [r7, #8]
}
 80072d4:	bf00      	nop
 80072d6:	3730      	adds	r7, #48	@ 0x30
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40005400 	.word	0x40005400
 80072e0:	40023800 	.word	0x40023800
 80072e4:	40020400 	.word	0x40020400
 80072e8:	200012a0 	.word	0x200012a0
 80072ec:	40026010 	.word	0x40026010
 80072f0:	40005c00 	.word	0x40005c00
 80072f4:	40020800 	.word	0x40020800
 80072f8:	40020000 	.word	0x40020000

080072fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1a      	ldr	r2, [pc, #104]	@ (8007374 <HAL_I2C_MspDeInit+0x78>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d118      	bne.n	8007340 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800730e:	4b1a      	ldr	r3, [pc, #104]	@ (8007378 <HAL_I2C_MspDeInit+0x7c>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	4a19      	ldr	r2, [pc, #100]	@ (8007378 <HAL_I2C_MspDeInit+0x7c>)
 8007314:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007318:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800731a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800731e:	4817      	ldr	r0, [pc, #92]	@ (800737c <HAL_I2C_MspDeInit+0x80>)
 8007320:	f001 ffa8 	bl	8009274 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8007324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007328:	4814      	ldr	r0, [pc, #80]	@ (800737c <HAL_I2C_MspDeInit+0x80>)
 800732a:	f001 ffa3 	bl	8009274 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007332:	4618      	mov	r0, r3
 8007334:	f001 fa3e 	bl	80087b4 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007338:	201f      	movs	r0, #31
 800733a:	f001 f972 	bl	8008622 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800733e:	e014      	b.n	800736a <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C3)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0e      	ldr	r2, [pc, #56]	@ (8007380 <HAL_I2C_MspDeInit+0x84>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d10f      	bne.n	800736a <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800734a:	4b0b      	ldr	r3, [pc, #44]	@ (8007378 <HAL_I2C_MspDeInit+0x7c>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	4a0a      	ldr	r2, [pc, #40]	@ (8007378 <HAL_I2C_MspDeInit+0x7c>)
 8007350:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007354:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8007356:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800735a:	480a      	ldr	r0, [pc, #40]	@ (8007384 <HAL_I2C_MspDeInit+0x88>)
 800735c:	f001 ff8a 	bl	8009274 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007360:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007364:	4808      	ldr	r0, [pc, #32]	@ (8007388 <HAL_I2C_MspDeInit+0x8c>)
 8007366:	f001 ff85 	bl	8009274 <HAL_GPIO_DeInit>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	40005400 	.word	0x40005400
 8007378:	40023800 	.word	0x40023800
 800737c:	40020400 	.word	0x40020400
 8007380:	40005c00 	.word	0x40005c00
 8007384:	40020800 	.word	0x40020800
 8007388:	40020000 	.word	0x40020000

0800738c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739c:	d115      	bne.n	80073ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <HAL_TIM_Base_MspInit+0x48>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	4a0b      	ldr	r2, [pc, #44]	@ (80073d4 <HAL_TIM_Base_MspInit+0x48>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ae:	4b09      	ldr	r3, [pc, #36]	@ (80073d4 <HAL_TIM_Base_MspInit+0x48>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	201c      	movs	r0, #28
 80073c0:	f001 f905 	bl	80085ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80073c4:	201c      	movs	r0, #28
 80073c6:	f001 f91e 	bl	8008606 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40023800 	.word	0x40023800

080073d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08e      	sub	sp, #56	@ 0x38
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	609a      	str	r2, [r3, #8]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a9c      	ldr	r2, [pc, #624]	@ (8007668 <HAL_UART_MspInit+0x290>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d162      	bne.n	80074c0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	4b9b      	ldr	r3, [pc, #620]	@ (800766c <HAL_UART_MspInit+0x294>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	4a9a      	ldr	r2, [pc, #616]	@ (800766c <HAL_UART_MspInit+0x294>)
 8007404:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007408:	6413      	str	r3, [r2, #64]	@ 0x40
 800740a:	4b98      	ldr	r3, [pc, #608]	@ (800766c <HAL_UART_MspInit+0x294>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	4b94      	ldr	r3, [pc, #592]	@ (800766c <HAL_UART_MspInit+0x294>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741e:	4a93      	ldr	r2, [pc, #588]	@ (800766c <HAL_UART_MspInit+0x294>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6313      	str	r3, [r2, #48]	@ 0x30
 8007426:	4b91      	ldr	r3, [pc, #580]	@ (800766c <HAL_UART_MspInit+0x294>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007432:	2303      	movs	r3, #3
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007436:	2302      	movs	r3, #2
 8007438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	2300      	movs	r3, #0
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800743e:	2303      	movs	r3, #3
 8007440:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007442:	2308      	movs	r3, #8
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800744a:	4619      	mov	r1, r3
 800744c:	4888      	ldr	r0, [pc, #544]	@ (8007670 <HAL_UART_MspInit+0x298>)
 800744e:	f001 fd7d 	bl	8008f4c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007452:	4b88      	ldr	r3, [pc, #544]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007454:	4a88      	ldr	r2, [pc, #544]	@ (8007678 <HAL_UART_MspInit+0x2a0>)
 8007456:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007458:	4b86      	ldr	r3, [pc, #536]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 800745a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800745e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007460:	4b84      	ldr	r3, [pc, #528]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007462:	2240      	movs	r2, #64	@ 0x40
 8007464:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007466:	4b83      	ldr	r3, [pc, #524]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007468:	2200      	movs	r2, #0
 800746a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800746c:	4b81      	ldr	r3, [pc, #516]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 800746e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007472:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007474:	4b7f      	ldr	r3, [pc, #508]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007476:	2200      	movs	r2, #0
 8007478:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800747a:	4b7e      	ldr	r3, [pc, #504]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 800747c:	2200      	movs	r2, #0
 800747e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007480:	4b7c      	ldr	r3, [pc, #496]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007482:	2200      	movs	r2, #0
 8007484:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007486:	4b7b      	ldr	r3, [pc, #492]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007488:	2200      	movs	r2, #0
 800748a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800748c:	4b79      	ldr	r3, [pc, #484]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 800748e:	2200      	movs	r2, #0
 8007490:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007492:	4878      	ldr	r0, [pc, #480]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 8007494:	f001 f8e0 	bl	8008658 <HAL_DMA_Init>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800749e:	f7fe f9f3 	bl	8005888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a73      	ldr	r2, [pc, #460]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80074a8:	4a72      	ldr	r2, [pc, #456]	@ (8007674 <HAL_UART_MspInit+0x29c>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80074ae:	2200      	movs	r2, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	2034      	movs	r0, #52	@ 0x34
 80074b4:	f001 f88b 	bl	80085ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80074b8:	2034      	movs	r0, #52	@ 0x34
 80074ba:	f001 f8a4 	bl	8008606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80074be:	e0cf      	b.n	8007660 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a6d      	ldr	r2, [pc, #436]	@ (800767c <HAL_UART_MspInit+0x2a4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d162      	bne.n	8007590 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	4b67      	ldr	r3, [pc, #412]	@ (800766c <HAL_UART_MspInit+0x294>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d2:	4a66      	ldr	r2, [pc, #408]	@ (800766c <HAL_UART_MspInit+0x294>)
 80074d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80074da:	4b64      	ldr	r3, [pc, #400]	@ (800766c <HAL_UART_MspInit+0x294>)
 80074dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	4b60      	ldr	r3, [pc, #384]	@ (800766c <HAL_UART_MspInit+0x294>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	4a5f      	ldr	r2, [pc, #380]	@ (800766c <HAL_UART_MspInit+0x294>)
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80074f6:	4b5d      	ldr	r3, [pc, #372]	@ (800766c <HAL_UART_MspInit+0x294>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007502:	230c      	movs	r3, #12
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007506:	2302      	movs	r3, #2
 8007508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750a:	2300      	movs	r3, #0
 800750c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800750e:	2303      	movs	r3, #3
 8007510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007512:	2307      	movs	r3, #7
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751a:	4619      	mov	r1, r3
 800751c:	4854      	ldr	r0, [pc, #336]	@ (8007670 <HAL_UART_MspInit+0x298>)
 800751e:	f001 fd15 	bl	8008f4c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007522:	4b57      	ldr	r3, [pc, #348]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007524:	4a57      	ldr	r2, [pc, #348]	@ (8007684 <HAL_UART_MspInit+0x2ac>)
 8007526:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007528:	4b55      	ldr	r3, [pc, #340]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 800752a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800752e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007530:	4b53      	ldr	r3, [pc, #332]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007532:	2240      	movs	r2, #64	@ 0x40
 8007534:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007536:	4b52      	ldr	r3, [pc, #328]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007538:	2200      	movs	r2, #0
 800753a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800753c:	4b50      	ldr	r3, [pc, #320]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 800753e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007542:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007544:	4b4e      	ldr	r3, [pc, #312]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007546:	2200      	movs	r2, #0
 8007548:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800754a:	4b4d      	ldr	r3, [pc, #308]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 800754c:	2200      	movs	r2, #0
 800754e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007550:	4b4b      	ldr	r3, [pc, #300]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007552:	2200      	movs	r2, #0
 8007554:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007556:	4b4a      	ldr	r3, [pc, #296]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007558:	2200      	movs	r2, #0
 800755a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800755c:	4b48      	ldr	r3, [pc, #288]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 800755e:	2200      	movs	r2, #0
 8007560:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007562:	4847      	ldr	r0, [pc, #284]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007564:	f001 f878 	bl	8008658 <HAL_DMA_Init>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800756e:	f7fe f98b 	bl	8005888 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a42      	ldr	r2, [pc, #264]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 8007576:	639a      	str	r2, [r3, #56]	@ 0x38
 8007578:	4a41      	ldr	r2, [pc, #260]	@ (8007680 <HAL_UART_MspInit+0x2a8>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	2026      	movs	r0, #38	@ 0x26
 8007584:	f001 f823 	bl	80085ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007588:	2026      	movs	r0, #38	@ 0x26
 800758a:	f001 f83c 	bl	8008606 <HAL_NVIC_EnableIRQ>
}
 800758e:	e067      	b.n	8007660 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a3c      	ldr	r2, [pc, #240]	@ (8007688 <HAL_UART_MspInit+0x2b0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d162      	bne.n	8007660 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	4b33      	ldr	r3, [pc, #204]	@ (800766c <HAL_UART_MspInit+0x294>)
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	4a32      	ldr	r2, [pc, #200]	@ (800766c <HAL_UART_MspInit+0x294>)
 80075a4:	f043 0320 	orr.w	r3, r3, #32
 80075a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80075aa:	4b30      	ldr	r3, [pc, #192]	@ (800766c <HAL_UART_MspInit+0x294>)
 80075ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	4b2c      	ldr	r3, [pc, #176]	@ (800766c <HAL_UART_MspInit+0x294>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	4a2b      	ldr	r2, [pc, #172]	@ (800766c <HAL_UART_MspInit+0x294>)
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80075c6:	4b29      	ldr	r3, [pc, #164]	@ (800766c <HAL_UART_MspInit+0x294>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80075d2:	23c0      	movs	r3, #192	@ 0xc0
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d6:	2302      	movs	r3, #2
 80075d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075de:	2303      	movs	r3, #3
 80075e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80075e2:	2308      	movs	r3, #8
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ea:	4619      	mov	r1, r3
 80075ec:	4827      	ldr	r0, [pc, #156]	@ (800768c <HAL_UART_MspInit+0x2b4>)
 80075ee:	f001 fcad 	bl	8008f4c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 80075f2:	4b27      	ldr	r3, [pc, #156]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 80075f4:	4a27      	ldr	r2, [pc, #156]	@ (8007694 <HAL_UART_MspInit+0x2bc>)
 80075f6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80075f8:	4b25      	ldr	r3, [pc, #148]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 80075fa:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80075fe:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007600:	4b23      	ldr	r3, [pc, #140]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007602:	2200      	movs	r2, #0
 8007604:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007606:	4b22      	ldr	r3, [pc, #136]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007608:	2200      	movs	r2, #0
 800760a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800760c:	4b20      	ldr	r3, [pc, #128]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 800760e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007612:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007614:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007616:	2200      	movs	r2, #0
 8007618:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800761a:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 800761c:	2200      	movs	r2, #0
 800761e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007620:	4b1b      	ldr	r3, [pc, #108]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007626:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007628:	4b19      	ldr	r3, [pc, #100]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 800762a:	2200      	movs	r2, #0
 800762c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800762e:	4b18      	ldr	r3, [pc, #96]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007630:	2200      	movs	r2, #0
 8007632:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007634:	4816      	ldr	r0, [pc, #88]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007636:	f001 f80f 	bl	8008658 <HAL_DMA_Init>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007640:	f7fe f922 	bl	8005888 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a12      	ldr	r2, [pc, #72]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 8007648:	63da      	str	r2, [r3, #60]	@ 0x3c
 800764a:	4a11      	ldr	r2, [pc, #68]	@ (8007690 <HAL_UART_MspInit+0x2b8>)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	2047      	movs	r0, #71	@ 0x47
 8007656:	f000 ffba 	bl	80085ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800765a:	2047      	movs	r0, #71	@ 0x47
 800765c:	f000 ffd3 	bl	8008606 <HAL_NVIC_EnableIRQ>
}
 8007660:	bf00      	nop
 8007662:	3738      	adds	r7, #56	@ 0x38
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40004c00 	.word	0x40004c00
 800766c:	40023800 	.word	0x40023800
 8007670:	40020000 	.word	0x40020000
 8007674:	20001420 	.word	0x20001420
 8007678:	40026070 	.word	0x40026070
 800767c:	40004400 	.word	0x40004400
 8007680:	20001480 	.word	0x20001480
 8007684:	400260a0 	.word	0x400260a0
 8007688:	40011400 	.word	0x40011400
 800768c:	40020800 	.word	0x40020800
 8007690:	200014e0 	.word	0x200014e0
 8007694:	40026440 	.word	0x40026440

08007698 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a24      	ldr	r2, [pc, #144]	@ (8007738 <HAL_UART_MspDeInit+0xa0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d112      	bne.n	80076d0 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80076aa:	4b24      	ldr	r3, [pc, #144]	@ (800773c <HAL_UART_MspDeInit+0xa4>)
 80076ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ae:	4a23      	ldr	r2, [pc, #140]	@ (800773c <HAL_UART_MspDeInit+0xa4>)
 80076b0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80076b4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80076b6:	2103      	movs	r1, #3
 80076b8:	4821      	ldr	r0, [pc, #132]	@ (8007740 <HAL_UART_MspDeInit+0xa8>)
 80076ba:	f001 fddb 	bl	8009274 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 f876 	bl	80087b4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80076c8:	2034      	movs	r0, #52	@ 0x34
 80076ca:	f000 ffaa 	bl	8008622 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80076ce:	e02e      	b.n	800772e <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART2)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007744 <HAL_UART_MspDeInit+0xac>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d112      	bne.n	8007700 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 80076da:	4b18      	ldr	r3, [pc, #96]	@ (800773c <HAL_UART_MspDeInit+0xa4>)
 80076dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076de:	4a17      	ldr	r2, [pc, #92]	@ (800773c <HAL_UART_MspDeInit+0xa4>)
 80076e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80076e4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80076e6:	210c      	movs	r1, #12
 80076e8:	4815      	ldr	r0, [pc, #84]	@ (8007740 <HAL_UART_MspDeInit+0xa8>)
 80076ea:	f001 fdc3 	bl	8009274 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 f85e 	bl	80087b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80076f8:	2026      	movs	r0, #38	@ 0x26
 80076fa:	f000 ff92 	bl	8008622 <HAL_NVIC_DisableIRQ>
}
 80076fe:	e016      	b.n	800772e <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART6)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a10      	ldr	r2, [pc, #64]	@ (8007748 <HAL_UART_MspDeInit+0xb0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d111      	bne.n	800772e <HAL_UART_MspDeInit+0x96>
    __HAL_RCC_USART6_CLK_DISABLE();
 800770a:	4b0c      	ldr	r3, [pc, #48]	@ (800773c <HAL_UART_MspDeInit+0xa4>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770e:	4a0b      	ldr	r2, [pc, #44]	@ (800773c <HAL_UART_MspDeInit+0xa4>)
 8007710:	f023 0320 	bic.w	r3, r3, #32
 8007714:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8007716:	21c0      	movs	r1, #192	@ 0xc0
 8007718:	480c      	ldr	r0, [pc, #48]	@ (800774c <HAL_UART_MspDeInit+0xb4>)
 800771a:	f001 fdab 	bl	8009274 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007722:	4618      	mov	r0, r3
 8007724:	f001 f846 	bl	80087b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8007728:	2047      	movs	r0, #71	@ 0x47
 800772a:	f000 ff7a 	bl	8008622 <HAL_NVIC_DisableIRQ>
}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40004c00 	.word	0x40004c00
 800773c:	40023800 	.word	0x40023800
 8007740:	40020000 	.word	0x40020000
 8007744:	40004400 	.word	0x40004400
 8007748:	40011400 	.word	0x40011400
 800774c:	40020800 	.word	0x40020800

08007750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <NMI_Handler+0x4>

08007758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <HardFault_Handler+0x4>

08007760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <MemManage_Handler+0x4>

08007768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800776c:	bf00      	nop
 800776e:	e7fd      	b.n	800776c <BusFault_Handler+0x4>

08007770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <UsageFault_Handler+0x4>

08007778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800777c:	bf00      	nop
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007786:	b480      	push	{r7}
 8007788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007798:	bf00      	nop
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077a6:	f000 f9bf 	bl	8007b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077aa:	bf00      	nop
 80077ac:	bd80      	pop	{r7, pc}

080077ae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80077b2:	2008      	movs	r0, #8
 80077b4:	f001 fe6c 	bl	8009490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80077b8:	bf00      	nop
 80077ba:	bd80      	pop	{r7, pc}

080077bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80077c0:	2010      	movs	r0, #16
 80077c2:	f001 fe65 	bl	8009490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80077c6:	bf00      	nop
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80077d0:	4802      	ldr	r0, [pc, #8]	@ (80077dc <DMA1_Stream0_IRQHandler+0x10>)
 80077d2:	f001 f937 	bl	8008a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80077d6:	bf00      	nop
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	200012a0 	.word	0x200012a0

080077e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80077e4:	4802      	ldr	r0, [pc, #8]	@ (80077f0 <DMA1_Stream4_IRQHandler+0x10>)
 80077e6:	f001 f92d 	bl	8008a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80077ea:	bf00      	nop
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20001420 	.word	0x20001420

080077f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80077f8:	4802      	ldr	r0, [pc, #8]	@ (8007804 <DMA1_Stream6_IRQHandler+0x10>)
 80077fa:	f001 f923 	bl	8008a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80077fe:	bf00      	nop
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20001480 	.word	0x20001480

08007808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800780c:	4802      	ldr	r0, [pc, #8]	@ (8007818 <TIM2_IRQHandler+0x10>)
 800780e:	f005 fbc7 	bl	800cfa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20001300 	.word	0x20001300

0800781c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007820:	4802      	ldr	r0, [pc, #8]	@ (800782c <I2C1_EV_IRQHandler+0x10>)
 8007822:	f002 fc91 	bl	800a148 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007826:	bf00      	nop
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200011f8 	.word	0x200011f8

08007830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007834:	4802      	ldr	r0, [pc, #8]	@ (8007840 <USART2_IRQHandler+0x10>)
 8007836:	f006 f913 	bl	800da60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20001390 	.word	0x20001390

08007844 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007848:	4802      	ldr	r0, [pc, #8]	@ (8007854 <UART4_IRQHandler+0x10>)
 800784a:	f006 f909 	bl	800da60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800784e:	bf00      	nop
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20001348 	.word	0x20001348

08007858 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800785c:	4802      	ldr	r0, [pc, #8]	@ (8007868 <DMA2_Stream2_IRQHandler+0x10>)
 800785e:	f001 f8f1 	bl	8008a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007862:	bf00      	nop
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200014e0 	.word	0x200014e0

0800786c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007870:	4802      	ldr	r0, [pc, #8]	@ (800787c <USART6_IRQHandler+0x10>)
 8007872:	f006 f8f5 	bl	800da60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	200013d8 	.word	0x200013d8

08007880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  return 1;
 8007884:	2301      	movs	r3, #1
}
 8007886:	4618      	mov	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <_kill>:

int _kill(int pid, int sig)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800789a:	f008 fb49 	bl	800ff30 <__errno>
 800789e:	4603      	mov	r3, r0
 80078a0:	2216      	movs	r2, #22
 80078a2:	601a      	str	r2, [r3, #0]
  return -1;
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <_exit>:

void _exit (int status)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80078b8:	f04f 31ff 	mov.w	r1, #4294967295
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff ffe7 	bl	8007890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80078c2:	bf00      	nop
 80078c4:	e7fd      	b.n	80078c2 <_exit+0x12>

080078c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e00a      	b.n	80078ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80078d8:	f3af 8000 	nop.w
 80078dc:	4601      	mov	r1, r0
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	60ba      	str	r2, [r7, #8]
 80078e4:	b2ca      	uxtb	r2, r1
 80078e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	3301      	adds	r3, #1
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	dbf0      	blt.n	80078d8 <_read+0x12>
  }

  return len;
 80078f6:	687b      	ldr	r3, [r7, #4]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e009      	b.n	8007926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	60ba      	str	r2, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3301      	adds	r3, #1
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	dbf1      	blt.n	8007912 <_write+0x12>
  }
  return len;
 800792e:	687b      	ldr	r3, [r7, #4]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <_close>:

int _close(int file)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007960:	605a      	str	r2, [r3, #4]
  return 0;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <_isatty>:

int _isatty(int file)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007978:	2301      	movs	r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079a8:	4a14      	ldr	r2, [pc, #80]	@ (80079fc <_sbrk+0x5c>)
 80079aa:	4b15      	ldr	r3, [pc, #84]	@ (8007a00 <_sbrk+0x60>)
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079b4:	4b13      	ldr	r3, [pc, #76]	@ (8007a04 <_sbrk+0x64>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079bc:	4b11      	ldr	r3, [pc, #68]	@ (8007a04 <_sbrk+0x64>)
 80079be:	4a12      	ldr	r2, [pc, #72]	@ (8007a08 <_sbrk+0x68>)
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079c2:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <_sbrk+0x64>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4413      	add	r3, r2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d207      	bcs.n	80079e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079d0:	f008 faae 	bl	800ff30 <__errno>
 80079d4:	4603      	mov	r3, r0
 80079d6:	220c      	movs	r2, #12
 80079d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	e009      	b.n	80079f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079e0:	4b08      	ldr	r3, [pc, #32]	@ (8007a04 <_sbrk+0x64>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80079e6:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <_sbrk+0x64>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	4a05      	ldr	r2, [pc, #20]	@ (8007a04 <_sbrk+0x64>)
 80079f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20020000 	.word	0x20020000
 8007a00:	00000400 	.word	0x00000400
 8007a04:	200017a8 	.word	0x200017a8
 8007a08:	20001900 	.word	0x20001900

08007a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a10:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <SystemInit+0x20>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a16:	4a05      	ldr	r2, [pc, #20]	@ (8007a2c <SystemInit+0x20>)
 8007a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a20:	bf00      	nop
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	e000ed00 	.word	0xe000ed00

08007a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007a68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007a34:	f7ff ffea 	bl	8007a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007a38:	480c      	ldr	r0, [pc, #48]	@ (8007a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007a3a:	490d      	ldr	r1, [pc, #52]	@ (8007a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a40:	e002      	b.n	8007a48 <LoopCopyDataInit>

08007a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a46:	3304      	adds	r3, #4

08007a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a4c:	d3f9      	bcc.n	8007a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007a50:	4c0a      	ldr	r4, [pc, #40]	@ (8007a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a54:	e001      	b.n	8007a5a <LoopFillZerobss>

08007a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a58:	3204      	adds	r2, #4

08007a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a5c:	d3fb      	bcc.n	8007a56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007a5e:	f008 fa6d 	bl	800ff3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a62:	f7fd f917 	bl	8004c94 <main>
  bx  lr    
 8007a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a70:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8007a74:	080166d8 	.word	0x080166d8
  ldr r2, =_sbss
 8007a78:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8007a7c:	200018fc 	.word	0x200018fc

08007a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a80:	e7fe      	b.n	8007a80 <ADC_IRQHandler>
	...

08007a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac4 <HAL_Init+0x40>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ac4 <HAL_Init+0x40>)
 8007a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a94:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <HAL_Init+0x40>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac4 <HAL_Init+0x40>)
 8007a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007aa0:	4b08      	ldr	r3, [pc, #32]	@ (8007ac4 <HAL_Init+0x40>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a07      	ldr	r2, [pc, #28]	@ (8007ac4 <HAL_Init+0x40>)
 8007aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007aac:	2003      	movs	r0, #3
 8007aae:	f000 fd83 	bl	80085b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ab2:	200f      	movs	r0, #15
 8007ab4:	f000 f808 	bl	8007ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ab8:	f7ff fa78 	bl	8006fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40023c00 	.word	0x40023c00

08007ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ad0:	4b12      	ldr	r3, [pc, #72]	@ (8007b1c <HAL_InitTick+0x54>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4b12      	ldr	r3, [pc, #72]	@ (8007b20 <HAL_InitTick+0x58>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fda9 	bl	800863e <HAL_SYSTICK_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e00e      	b.n	8007b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b0f      	cmp	r3, #15
 8007afa:	d80a      	bhi.n	8007b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007afc:	2200      	movs	r2, #0
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	f000 fd63 	bl	80085ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b08:	4a06      	ldr	r2, [pc, #24]	@ (8007b24 <HAL_InitTick+0x5c>)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e000      	b.n	8007b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000038 	.word	0x20000038
 8007b20:	20000040 	.word	0x20000040
 8007b24:	2000003c 	.word	0x2000003c

08007b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <HAL_IncTick+0x20>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <HAL_IncTick+0x24>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4413      	add	r3, r2
 8007b38:	4a04      	ldr	r2, [pc, #16]	@ (8007b4c <HAL_IncTick+0x24>)
 8007b3a:	6013      	str	r3, [r2, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000040 	.word	0x20000040
 8007b4c:	200017ac 	.word	0x200017ac

08007b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  return uwTick;
 8007b54:	4b03      	ldr	r3, [pc, #12]	@ (8007b64 <HAL_GetTick+0x14>)
 8007b56:	681b      	ldr	r3, [r3, #0]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	200017ac 	.word	0x200017ac

08007b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b70:	f7ff ffee 	bl	8007b50 <HAL_GetTick>
 8007b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d005      	beq.n	8007b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b82:	4b0a      	ldr	r3, [pc, #40]	@ (8007bac <HAL_Delay+0x44>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b8e:	bf00      	nop
 8007b90:	f7ff ffde 	bl	8007b50 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d8f7      	bhi.n	8007b90 <HAL_Delay+0x28>
  {
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000040 	.word	0x20000040

08007bb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e033      	b.n	8007c2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fa14 	bl	8006ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d118      	bne.n	8007c20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007bf6:	f023 0302 	bic.w	r3, r3, #2
 8007bfa:	f043 0202 	orr.w	r2, r3, #2
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fae8 	bl	80081d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c1e:	e001      	b.n	8007c24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_ADC_Start+0x1a>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e0b2      	b.n	8007db8 <HAL_ADC_Start+0x180>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d018      	beq.n	8007c9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007c78:	4b52      	ldr	r3, [pc, #328]	@ (8007dc4 <HAL_ADC_Start+0x18c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a52      	ldr	r2, [pc, #328]	@ (8007dc8 <HAL_ADC_Start+0x190>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	0c9a      	lsrs	r2, r3, #18
 8007c84:	4613      	mov	r3, r2
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	4413      	add	r3, r2
 8007c8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007c8c:	e002      	b.n	8007c94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f9      	bne.n	8007c8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d17a      	bne.n	8007d9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007cd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce6:	d106      	bne.n	8007cf6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cec:	f023 0206 	bic.w	r2, r3, #6
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	645a      	str	r2, [r3, #68]	@ 0x44
 8007cf4:	e002      	b.n	8007cfc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d04:	4b31      	ldr	r3, [pc, #196]	@ (8007dcc <HAL_ADC_Start+0x194>)
 8007d06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007d10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d12a      	bne.n	8007d74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a2b      	ldr	r2, [pc, #172]	@ (8007dd0 <HAL_ADC_Start+0x198>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d015      	beq.n	8007d54 <HAL_ADC_Start+0x11c>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a29      	ldr	r2, [pc, #164]	@ (8007dd4 <HAL_ADC_Start+0x19c>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d105      	bne.n	8007d3e <HAL_ADC_Start+0x106>
 8007d32:	4b26      	ldr	r3, [pc, #152]	@ (8007dcc <HAL_ADC_Start+0x194>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a25      	ldr	r2, [pc, #148]	@ (8007dd8 <HAL_ADC_Start+0x1a0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d136      	bne.n	8007db6 <HAL_ADC_Start+0x17e>
 8007d48:	4b20      	ldr	r3, [pc, #128]	@ (8007dcc <HAL_ADC_Start+0x194>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d130      	bne.n	8007db6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d129      	bne.n	8007db6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007d70:	609a      	str	r2, [r3, #8]
 8007d72:	e020      	b.n	8007db6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a15      	ldr	r2, [pc, #84]	@ (8007dd0 <HAL_ADC_Start+0x198>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d11b      	bne.n	8007db6 <HAL_ADC_Start+0x17e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d114      	bne.n	8007db6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007d9a:	609a      	str	r2, [r3, #8]
 8007d9c:	e00b      	b.n	8007db6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	f043 0210 	orr.w	r2, r3, #16
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dae:	f043 0201 	orr.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	20000038 	.word	0x20000038
 8007dc8:	431bde83 	.word	0x431bde83
 8007dcc:	40012300 	.word	0x40012300
 8007dd0:	40012000 	.word	0x40012000
 8007dd4:	40012100 	.word	0x40012100
 8007dd8:	40012200 	.word	0x40012200

08007ddc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_ADC_Stop+0x16>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e021      	b.n	8007e36 <HAL_ADC_Stop+0x5a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	f043 0201 	orr.w	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5e:	d113      	bne.n	8007e88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6e:	d10b      	bne.n	8007e88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e74:	f043 0220 	orr.w	r2, r3, #32
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e063      	b.n	8007f50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e88:	f7ff fe62 	bl	8007b50 <HAL_GetTick>
 8007e8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007e8e:	e021      	b.n	8007ed4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e96:	d01d      	beq.n	8007ed4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <HAL_ADC_PollForConversion+0x6c>
 8007e9e:	f7ff fe57 	bl	8007b50 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d212      	bcs.n	8007ed4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d00b      	beq.n	8007ed4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec0:	f043 0204 	orr.w	r2, r3, #4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e03d      	b.n	8007f50 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d1d6      	bne.n	8007e90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f06f 0212 	mvn.w	r2, #18
 8007eea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d123      	bne.n	8007f4e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d11f      	bne.n	8007f4e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d111      	bne.n	8007f4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d105      	bne.n	8007f4e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	f043 0201 	orr.w	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
	...

08007f74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_ADC_ConfigChannel+0x1c>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	e113      	b.n	80081b8 <HAL_ADC_ConfigChannel+0x244>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b09      	cmp	r3, #9
 8007f9e:	d925      	bls.n	8007fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68d9      	ldr	r1, [r3, #12]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	4613      	mov	r3, r2
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3b1e      	subs	r3, #30
 8007fb6:	2207      	movs	r2, #7
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	43da      	mvns	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	400a      	ands	r2, r1
 8007fc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68d9      	ldr	r1, [r3, #12]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	4603      	mov	r3, r0
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	4403      	add	r3, r0
 8007fde:	3b1e      	subs	r3, #30
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	60da      	str	r2, [r3, #12]
 8007fea:	e022      	b.n	8008032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6919      	ldr	r1, [r3, #16]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	4413      	add	r3, r2
 8008000:	2207      	movs	r2, #7
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	43da      	mvns	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	400a      	ands	r2, r1
 800800e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6919      	ldr	r1, [r3, #16]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	4618      	mov	r0, r3
 8008022:	4603      	mov	r3, r0
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	4403      	add	r3, r0
 8008028:	409a      	lsls	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b06      	cmp	r3, #6
 8008038:	d824      	bhi.n	8008084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	3b05      	subs	r3, #5
 800804c:	221f      	movs	r2, #31
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	43da      	mvns	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	400a      	ands	r2, r1
 800805a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	b29b      	uxth	r3, r3
 8008068:	4618      	mov	r0, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	3b05      	subs	r3, #5
 8008076:	fa00 f203 	lsl.w	r2, r0, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	635a      	str	r2, [r3, #52]	@ 0x34
 8008082:	e04c      	b.n	800811e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	2b0c      	cmp	r3, #12
 800808a:	d824      	bhi.n	80080d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	3b23      	subs	r3, #35	@ 0x23
 800809e:	221f      	movs	r2, #31
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	43da      	mvns	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	400a      	ands	r2, r1
 80080ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	4618      	mov	r0, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	3b23      	subs	r3, #35	@ 0x23
 80080c8:	fa00 f203 	lsl.w	r2, r0, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80080d4:	e023      	b.n	800811e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	3b41      	subs	r3, #65	@ 0x41
 80080e8:	221f      	movs	r2, #31
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	43da      	mvns	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	400a      	ands	r2, r1
 80080f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	4618      	mov	r0, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	3b41      	subs	r3, #65	@ 0x41
 8008112:	fa00 f203 	lsl.w	r2, r0, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800811e:	4b29      	ldr	r3, [pc, #164]	@ (80081c4 <HAL_ADC_ConfigChannel+0x250>)
 8008120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a28      	ldr	r2, [pc, #160]	@ (80081c8 <HAL_ADC_ConfigChannel+0x254>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d10f      	bne.n	800814c <HAL_ADC_ConfigChannel+0x1d8>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b12      	cmp	r3, #18
 8008132:	d10b      	bne.n	800814c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1d      	ldr	r2, [pc, #116]	@ (80081c8 <HAL_ADC_ConfigChannel+0x254>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d12b      	bne.n	80081ae <HAL_ADC_ConfigChannel+0x23a>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1c      	ldr	r2, [pc, #112]	@ (80081cc <HAL_ADC_ConfigChannel+0x258>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <HAL_ADC_ConfigChannel+0x1f4>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b11      	cmp	r3, #17
 8008166:	d122      	bne.n	80081ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a11      	ldr	r2, [pc, #68]	@ (80081cc <HAL_ADC_ConfigChannel+0x258>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d111      	bne.n	80081ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800818a:	4b11      	ldr	r3, [pc, #68]	@ (80081d0 <HAL_ADC_ConfigChannel+0x25c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a11      	ldr	r2, [pc, #68]	@ (80081d4 <HAL_ADC_ConfigChannel+0x260>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	0c9a      	lsrs	r2, r3, #18
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80081a0:	e002      	b.n	80081a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f9      	bne.n	80081a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	40012300 	.word	0x40012300
 80081c8:	40012000 	.word	0x40012000
 80081cc:	10000012 	.word	0x10000012
 80081d0:	20000038 	.word	0x20000038
 80081d4:	431bde83 	.word	0x431bde83

080081d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081e0:	4b79      	ldr	r3, [pc, #484]	@ (80083c8 <ADC_Init+0x1f0>)
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	431a      	orrs	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800820c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6859      	ldr	r1, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	021a      	lsls	r2, r3, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6859      	ldr	r1, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6899      	ldr	r1, [r3, #8]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826a:	4a58      	ldr	r2, [pc, #352]	@ (80083cc <ADC_Init+0x1f4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800827e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6899      	ldr	r1, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6899      	ldr	r1, [r3, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	609a      	str	r2, [r3, #8]
 80082b4:	e00f      	b.n	80082d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0202 	bic.w	r2, r2, #2
 80082e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6899      	ldr	r1, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7e1b      	ldrb	r3, [r3, #24]
 80082f0:	005a      	lsls	r2, r3, #1
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01b      	beq.n	800833c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008312:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6859      	ldr	r1, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	3b01      	subs	r3, #1
 8008330:	035a      	lsls	r2, r3, #13
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
 800833a:	e007      	b.n	800834c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800834a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800835a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	3b01      	subs	r3, #1
 8008368:	051a      	lsls	r2, r3, #20
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6899      	ldr	r1, [r3, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800838e:	025a      	lsls	r2, r3, #9
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6899      	ldr	r1, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	029a      	lsls	r2, r3, #10
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	40012300 	.word	0x40012300
 80083cc:	0f000001 	.word	0x0f000001

080083d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <__NVIC_SetPriorityGrouping+0x44>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80083ec:	4013      	ands	r3, r2
 80083ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80083fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008402:	4a04      	ldr	r2, [pc, #16]	@ (8008414 <__NVIC_SetPriorityGrouping+0x44>)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	60d3      	str	r3, [r2, #12]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	e000ed00 	.word	0xe000ed00

08008418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800841c:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <__NVIC_GetPriorityGrouping+0x18>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	f003 0307 	and.w	r3, r3, #7
}
 8008426:	4618      	mov	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	e000ed00 	.word	0xe000ed00

08008434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800843e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008442:	2b00      	cmp	r3, #0
 8008444:	db0b      	blt.n	800845e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	f003 021f 	and.w	r2, r3, #31
 800844c:	4907      	ldr	r1, [pc, #28]	@ (800846c <__NVIC_EnableIRQ+0x38>)
 800844e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	2001      	movs	r0, #1
 8008456:	fa00 f202 	lsl.w	r2, r0, r2
 800845a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	e000e100 	.word	0xe000e100

08008470 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800847a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	db12      	blt.n	80084a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	f003 021f 	and.w	r2, r3, #31
 8008488:	490a      	ldr	r1, [pc, #40]	@ (80084b4 <__NVIC_DisableIRQ+0x44>)
 800848a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	2001      	movs	r0, #1
 8008492:	fa00 f202 	lsl.w	r2, r0, r2
 8008496:	3320      	adds	r3, #32
 8008498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800849c:	f3bf 8f4f 	dsb	sy
}
 80084a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084a2:	f3bf 8f6f 	isb	sy
}
 80084a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	e000e100 	.word	0xe000e100

080084b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	db0a      	blt.n	80084e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	490c      	ldr	r1, [pc, #48]	@ (8008504 <__NVIC_SetPriority+0x4c>)
 80084d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084d6:	0112      	lsls	r2, r2, #4
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	440b      	add	r3, r1
 80084dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084e0:	e00a      	b.n	80084f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	4908      	ldr	r1, [pc, #32]	@ (8008508 <__NVIC_SetPriority+0x50>)
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	3b04      	subs	r3, #4
 80084f0:	0112      	lsls	r2, r2, #4
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	440b      	add	r3, r1
 80084f6:	761a      	strb	r2, [r3, #24]
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	e000e100 	.word	0xe000e100
 8008508:	e000ed00 	.word	0xe000ed00

0800850c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800850c:	b480      	push	{r7}
 800850e:	b089      	sub	sp, #36	@ 0x24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f1c3 0307 	rsb	r3, r3, #7
 8008526:	2b04      	cmp	r3, #4
 8008528:	bf28      	it	cs
 800852a:	2304      	movcs	r3, #4
 800852c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	3304      	adds	r3, #4
 8008532:	2b06      	cmp	r3, #6
 8008534:	d902      	bls.n	800853c <NVIC_EncodePriority+0x30>
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	3b03      	subs	r3, #3
 800853a:	e000      	b.n	800853e <NVIC_EncodePriority+0x32>
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008540:	f04f 32ff 	mov.w	r2, #4294967295
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43da      	mvns	r2, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	401a      	ands	r2, r3
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008554:	f04f 31ff 	mov.w	r1, #4294967295
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	fa01 f303 	lsl.w	r3, r1, r3
 800855e:	43d9      	mvns	r1, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008564:	4313      	orrs	r3, r2
         );
}
 8008566:	4618      	mov	r0, r3
 8008568:	3724      	adds	r7, #36	@ 0x24
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
	...

08008574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3b01      	subs	r3, #1
 8008580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008584:	d301      	bcc.n	800858a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008586:	2301      	movs	r3, #1
 8008588:	e00f      	b.n	80085aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800858a:	4a0a      	ldr	r2, [pc, #40]	@ (80085b4 <SysTick_Config+0x40>)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3b01      	subs	r3, #1
 8008590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008592:	210f      	movs	r1, #15
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	f7ff ff8e 	bl	80084b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800859c:	4b05      	ldr	r3, [pc, #20]	@ (80085b4 <SysTick_Config+0x40>)
 800859e:	2200      	movs	r2, #0
 80085a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085a2:	4b04      	ldr	r3, [pc, #16]	@ (80085b4 <SysTick_Config+0x40>)
 80085a4:	2207      	movs	r2, #7
 80085a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	e000e010 	.word	0xe000e010

080085b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ff05 	bl	80083d0 <__NVIC_SetPriorityGrouping>
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b086      	sub	sp, #24
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	4603      	mov	r3, r0
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80085e0:	f7ff ff1a 	bl	8008418 <__NVIC_GetPriorityGrouping>
 80085e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	6978      	ldr	r0, [r7, #20]
 80085ec:	f7ff ff8e 	bl	800850c <NVIC_EncodePriority>
 80085f0:	4602      	mov	r2, r0
 80085f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff ff5d 	bl	80084b8 <__NVIC_SetPriority>
}
 80085fe:	bf00      	nop
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	4603      	mov	r3, r0
 800860e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff ff0d 	bl	8008434 <__NVIC_EnableIRQ>
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	4603      	mov	r3, r0
 800862a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800862c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff ff1d 	bl	8008470 <__NVIC_DisableIRQ>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff ff94 	bl	8008574 <SysTick_Config>
 800864c:	4603      	mov	r3, r0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008664:	f7ff fa74 	bl	8007b50 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e099      	b.n	80087a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0201 	bic.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008694:	e00f      	b.n	80086b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008696:	f7ff fa5b 	bl	8007b50 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b05      	cmp	r3, #5
 80086a2:	d908      	bls.n	80086b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2203      	movs	r2, #3
 80086ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e078      	b.n	80087a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e8      	bne.n	8008696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	4b38      	ldr	r3, [pc, #224]	@ (80087b0 <HAL_DMA_Init+0x158>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80086e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	2b04      	cmp	r3, #4
 800870e:	d107      	bne.n	8008720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008718:	4313      	orrs	r3, r2
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	4313      	orrs	r3, r2
 800871e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f023 0307 	bic.w	r3, r3, #7
 8008736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	2b04      	cmp	r3, #4
 8008748:	d117      	bne.n	800877a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00e      	beq.n	800877a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fb79 	bl	8008e54 <DMA_CheckFifoParam>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d008      	beq.n	800877a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2240      	movs	r2, #64	@ 0x40
 800876c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008776:	2301      	movs	r3, #1
 8008778:	e016      	b.n	80087a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fb30 	bl	8008de8 <DMA_CalcBaseAndBitshift>
 8008788:	4603      	mov	r3, r0
 800878a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008790:	223f      	movs	r2, #63	@ 0x3f
 8008792:	409a      	lsls	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	f010803f 	.word	0xf010803f

080087b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e050      	b.n	8008868 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d101      	bne.n	80087d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80087d2:	2302      	movs	r3, #2
 80087d4:	e048      	b.n	8008868 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2200      	movs	r2, #0
 8008804:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2221      	movs	r2, #33	@ 0x21
 8008814:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fae6 	bl	8008de8 <DMA_CalcBaseAndBitshift>
 800881c:	4603      	mov	r3, r0
 800881e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008848:	223f      	movs	r2, #63	@ 0x3f
 800884a:	409a      	lsls	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_DMA_Start_IT+0x26>
 8008892:	2302      	movs	r3, #2
 8008894:	e040      	b.n	8008918 <HAL_DMA_Start_IT+0xa8>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d12f      	bne.n	800890a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	68b9      	ldr	r1, [r7, #8]
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 fa64 	bl	8008d8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c8:	223f      	movs	r2, #63	@ 0x3f
 80088ca:	409a      	lsls	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0216 	orr.w	r2, r2, #22
 80088de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0208 	orr.w	r2, r2, #8
 80088f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	e005      	b.n	8008916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008912:	2302      	movs	r3, #2
 8008914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800892c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800892e:	f7ff f90f 	bl	8007b50 <HAL_GetTick>
 8008932:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d008      	beq.n	8008952 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2280      	movs	r2, #128	@ 0x80
 8008944:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e052      	b.n	80089f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0216 	bic.w	r2, r2, #22
 8008960:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	695a      	ldr	r2, [r3, #20]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008970:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008976:	2b00      	cmp	r3, #0
 8008978:	d103      	bne.n	8008982 <HAL_DMA_Abort+0x62>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0208 	bic.w	r2, r2, #8
 8008990:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0201 	bic.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089a2:	e013      	b.n	80089cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089a4:	f7ff f8d4 	bl	8007b50 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	d90c      	bls.n	80089cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2203      	movs	r2, #3
 80089bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e015      	b.n	80089f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e4      	bne.n	80089a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089de:	223f      	movs	r2, #63	@ 0x3f
 80089e0:	409a      	lsls	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d004      	beq.n	8008a1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2280      	movs	r2, #128	@ 0x80
 8008a18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e00c      	b.n	8008a38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2205      	movs	r2, #5
 8008a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0201 	bic.w	r2, r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008a50:	4b8e      	ldr	r3, [pc, #568]	@ (8008c8c <HAL_DMA_IRQHandler+0x248>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a8e      	ldr	r2, [pc, #568]	@ (8008c90 <HAL_DMA_IRQHandler+0x24c>)
 8008a56:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5a:	0a9b      	lsrs	r3, r3, #10
 8008a5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a6e:	2208      	movs	r2, #8
 8008a70:	409a      	lsls	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01a      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d013      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0204 	bic.w	r2, r2, #4
 8008a96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	409a      	lsls	r2, r3
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa8:	f043 0201 	orr.w	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	409a      	lsls	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d012      	beq.n	8008ae6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	409a      	lsls	r2, r3
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ade:	f043 0202 	orr.w	r2, r3, #2
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aea:	2204      	movs	r2, #4
 8008aec:	409a      	lsls	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4013      	ands	r3, r2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d012      	beq.n	8008b1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b08:	2204      	movs	r2, #4
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b14:	f043 0204 	orr.w	r2, r3, #4
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b20:	2210      	movs	r2, #16
 8008b22:	409a      	lsls	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d043      	beq.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0308 	and.w	r3, r3, #8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d03c      	beq.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b3e:	2210      	movs	r2, #16
 8008b40:	409a      	lsls	r2, r3
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d018      	beq.n	8008b86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d108      	bne.n	8008b74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d024      	beq.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	e01f      	b.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01b      	beq.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
 8008b84:	e016      	b.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0208 	bic.w	r2, r2, #8
 8008ba2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb8:	2220      	movs	r2, #32
 8008bba:	409a      	lsls	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 808f 	beq.w	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8087 	beq.w	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bda:	2220      	movs	r2, #32
 8008bdc:	409a      	lsls	r2, r3
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	d136      	bne.n	8008c5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0216 	bic.w	r2, r2, #22
 8008bfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <HAL_DMA_IRQHandler+0x1da>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f022 0208 	bic.w	r2, r2, #8
 8008c2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c32:	223f      	movs	r2, #63	@ 0x3f
 8008c34:	409a      	lsls	r2, r3
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d07e      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
        }
        return;
 8008c5a:	e079      	b.n	8008d50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01d      	beq.n	8008ca6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d031      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	4798      	blx	r3
 8008c88:	e02c      	b.n	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
 8008c8a:	bf00      	nop
 8008c8c:	20000038 	.word	0x20000038
 8008c90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d023      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	4798      	blx	r3
 8008ca4:	e01e      	b.n	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10f      	bne.n	8008cd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0210 	bic.w	r2, r2, #16
 8008cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d032      	beq.n	8008d52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d022      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2205      	movs	r2, #5
 8008cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0201 	bic.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60bb      	str	r3, [r7, #8]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d307      	bcc.n	8008d2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f2      	bne.n	8008d10 <HAL_DMA_IRQHandler+0x2cc>
 8008d2a:	e000      	b.n	8008d2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
 8008d4e:	e000      	b.n	8008d52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008d50:	bf00      	nop
    }
  }
}
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d66:	b2db      	uxtb	r3, r3
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008da8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b40      	cmp	r3, #64	@ 0x40
 8008db8:	d108      	bne.n	8008dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008dca:	e007      	b.n	8008ddc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	3b10      	subs	r3, #16
 8008df8:	4a14      	ldr	r2, [pc, #80]	@ (8008e4c <DMA_CalcBaseAndBitshift+0x64>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	091b      	lsrs	r3, r3, #4
 8008e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008e02:	4a13      	ldr	r2, [pc, #76]	@ (8008e50 <DMA_CalcBaseAndBitshift+0x68>)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d909      	bls.n	8008e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008e1e:	f023 0303 	bic.w	r3, r3, #3
 8008e22:	1d1a      	adds	r2, r3, #4
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e28:	e007      	b.n	8008e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008e32:	f023 0303 	bic.w	r3, r3, #3
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	aaaaaaab 	.word	0xaaaaaaab
 8008e50:	08016068 	.word	0x08016068

08008e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d11f      	bne.n	8008eae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d856      	bhi.n	8008f22 <DMA_CheckFifoParam+0xce>
 8008e74:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <DMA_CheckFifoParam+0x28>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008e8d 	.word	0x08008e8d
 8008e80:	08008e9f 	.word	0x08008e9f
 8008e84:	08008e8d 	.word	0x08008e8d
 8008e88:	08008f23 	.word	0x08008f23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d046      	beq.n	8008f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e9c:	e043      	b.n	8008f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ea6:	d140      	bne.n	8008f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008eac:	e03d      	b.n	8008f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb6:	d121      	bne.n	8008efc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d837      	bhi.n	8008f2e <DMA_CheckFifoParam+0xda>
 8008ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <DMA_CheckFifoParam+0x70>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008ed5 	.word	0x08008ed5
 8008ec8:	08008edb 	.word	0x08008edb
 8008ecc:	08008ed5 	.word	0x08008ed5
 8008ed0:	08008eed 	.word	0x08008eed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed8:	e030      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d025      	beq.n	8008f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008eea:	e022      	b.n	8008f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ef4:	d11f      	bne.n	8008f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008efa:	e01c      	b.n	8008f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d903      	bls.n	8008f0a <DMA_CheckFifoParam+0xb6>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d003      	beq.n	8008f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008f08:	e018      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f0e:	e015      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00e      	beq.n	8008f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f20:	e00b      	b.n	8008f3a <DMA_CheckFifoParam+0xe6>
      break;
 8008f22:	bf00      	nop
 8008f24:	e00a      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      break;
 8008f26:	bf00      	nop
 8008f28:	e008      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      break;
 8008f2a:	bf00      	nop
 8008f2c:	e006      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e004      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      break;
 8008f32:	bf00      	nop
 8008f34:	e002      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8008f36:	bf00      	nop
 8008f38:	e000      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
      break;
 8008f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop

08008f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b089      	sub	sp, #36	@ 0x24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f62:	2300      	movs	r3, #0
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e165      	b.n	8009234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008f68:	2201      	movs	r2, #1
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	f040 8154 	bne.w	800922e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d005      	beq.n	8008f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d130      	bne.n	8009000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	2203      	movs	r2, #3
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	43db      	mvns	r3, r3
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	091b      	lsrs	r3, r3, #4
 8008fea:	f003 0201 	and.w	r2, r3, #1
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f003 0303 	and.w	r3, r3, #3
 8009008:	2b03      	cmp	r3, #3
 800900a:	d017      	beq.n	800903c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	2203      	movs	r2, #3
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	43db      	mvns	r3, r3
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	4013      	ands	r3, r2
 8009022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	4313      	orrs	r3, r2
 8009034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d123      	bne.n	8009090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	08da      	lsrs	r2, r3, #3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3208      	adds	r2, #8
 8009050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	220f      	movs	r2, #15
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	43db      	mvns	r3, r3
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	4013      	ands	r3, r2
 800906a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	fa02 f303 	lsl.w	r3, r2, r3
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	4313      	orrs	r3, r2
 8009080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	08da      	lsrs	r2, r3, #3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3208      	adds	r2, #8
 800908a:	69b9      	ldr	r1, [r7, #24]
 800908c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	2203      	movs	r2, #3
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	43db      	mvns	r3, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4013      	ands	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f003 0203 	and.w	r2, r3, #3
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80ae 	beq.w	800922e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	4b5d      	ldr	r3, [pc, #372]	@ (800924c <HAL_GPIO_Init+0x300>)
 80090d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090da:	4a5c      	ldr	r2, [pc, #368]	@ (800924c <HAL_GPIO_Init+0x300>)
 80090dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80090e2:	4b5a      	ldr	r3, [pc, #360]	@ (800924c <HAL_GPIO_Init+0x300>)
 80090e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090ee:	4a58      	ldr	r2, [pc, #352]	@ (8009250 <HAL_GPIO_Init+0x304>)
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	089b      	lsrs	r3, r3, #2
 80090f4:	3302      	adds	r3, #2
 80090f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	220f      	movs	r2, #15
 8009106:	fa02 f303 	lsl.w	r3, r2, r3
 800910a:	43db      	mvns	r3, r3
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	4013      	ands	r3, r2
 8009110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a4f      	ldr	r2, [pc, #316]	@ (8009254 <HAL_GPIO_Init+0x308>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d025      	beq.n	8009166 <HAL_GPIO_Init+0x21a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a4e      	ldr	r2, [pc, #312]	@ (8009258 <HAL_GPIO_Init+0x30c>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d01f      	beq.n	8009162 <HAL_GPIO_Init+0x216>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a4d      	ldr	r2, [pc, #308]	@ (800925c <HAL_GPIO_Init+0x310>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d019      	beq.n	800915e <HAL_GPIO_Init+0x212>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a4c      	ldr	r2, [pc, #304]	@ (8009260 <HAL_GPIO_Init+0x314>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d013      	beq.n	800915a <HAL_GPIO_Init+0x20e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a4b      	ldr	r2, [pc, #300]	@ (8009264 <HAL_GPIO_Init+0x318>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d00d      	beq.n	8009156 <HAL_GPIO_Init+0x20a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a4a      	ldr	r2, [pc, #296]	@ (8009268 <HAL_GPIO_Init+0x31c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d007      	beq.n	8009152 <HAL_GPIO_Init+0x206>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a49      	ldr	r2, [pc, #292]	@ (800926c <HAL_GPIO_Init+0x320>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d101      	bne.n	800914e <HAL_GPIO_Init+0x202>
 800914a:	2306      	movs	r3, #6
 800914c:	e00c      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 800914e:	2307      	movs	r3, #7
 8009150:	e00a      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 8009152:	2305      	movs	r3, #5
 8009154:	e008      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 8009156:	2304      	movs	r3, #4
 8009158:	e006      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 800915a:	2303      	movs	r3, #3
 800915c:	e004      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 800915e:	2302      	movs	r3, #2
 8009160:	e002      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <HAL_GPIO_Init+0x21c>
 8009166:	2300      	movs	r3, #0
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	f002 0203 	and.w	r2, r2, #3
 800916e:	0092      	lsls	r2, r2, #2
 8009170:	4093      	lsls	r3, r2
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	4313      	orrs	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009178:	4935      	ldr	r1, [pc, #212]	@ (8009250 <HAL_GPIO_Init+0x304>)
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	089b      	lsrs	r3, r3, #2
 800917e:	3302      	adds	r3, #2
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009186:	4b3a      	ldr	r3, [pc, #232]	@ (8009270 <HAL_GPIO_Init+0x324>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	43db      	mvns	r3, r3
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	4013      	ands	r3, r2
 8009194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091aa:	4a31      	ldr	r2, [pc, #196]	@ (8009270 <HAL_GPIO_Init+0x324>)
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009270 <HAL_GPIO_Init+0x324>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	43db      	mvns	r3, r3
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	4013      	ands	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091d4:	4a26      	ldr	r2, [pc, #152]	@ (8009270 <HAL_GPIO_Init+0x324>)
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80091da:	4b25      	ldr	r3, [pc, #148]	@ (8009270 <HAL_GPIO_Init+0x324>)
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	43db      	mvns	r3, r3
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	4013      	ands	r3, r2
 80091e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80091fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009270 <HAL_GPIO_Init+0x324>)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009204:	4b1a      	ldr	r3, [pc, #104]	@ (8009270 <HAL_GPIO_Init+0x324>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	43db      	mvns	r3, r3
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	4013      	ands	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009228:	4a11      	ldr	r2, [pc, #68]	@ (8009270 <HAL_GPIO_Init+0x324>)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	3301      	adds	r3, #1
 8009232:	61fb      	str	r3, [r7, #28]
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2b0f      	cmp	r3, #15
 8009238:	f67f ae96 	bls.w	8008f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	3724      	adds	r7, #36	@ 0x24
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40023800 	.word	0x40023800
 8009250:	40013800 	.word	0x40013800
 8009254:	40020000 	.word	0x40020000
 8009258:	40020400 	.word	0x40020400
 800925c:	40020800 	.word	0x40020800
 8009260:	40020c00 	.word	0x40020c00
 8009264:	40021000 	.word	0x40021000
 8009268:	40021400 	.word	0x40021400
 800926c:	40021800 	.word	0x40021800
 8009270:	40013c00 	.word	0x40013c00

08009274 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800927e:	2300      	movs	r3, #0
 8009280:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009286:	2300      	movs	r3, #0
 8009288:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	e0c7      	b.n	8009420 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009290:	2201      	movs	r2, #1
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	4013      	ands	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f040 80b7 	bne.w	800941a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80092ac:	4a62      	ldr	r2, [pc, #392]	@ (8009438 <HAL_GPIO_DeInit+0x1c4>)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	089b      	lsrs	r3, r3, #2
 80092b2:	3302      	adds	r3, #2
 80092b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	220f      	movs	r2, #15
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	4013      	ands	r3, r2
 80092cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a5a      	ldr	r2, [pc, #360]	@ (800943c <HAL_GPIO_DeInit+0x1c8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d025      	beq.n	8009322 <HAL_GPIO_DeInit+0xae>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a59      	ldr	r2, [pc, #356]	@ (8009440 <HAL_GPIO_DeInit+0x1cc>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d01f      	beq.n	800931e <HAL_GPIO_DeInit+0xaa>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a58      	ldr	r2, [pc, #352]	@ (8009444 <HAL_GPIO_DeInit+0x1d0>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d019      	beq.n	800931a <HAL_GPIO_DeInit+0xa6>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a57      	ldr	r2, [pc, #348]	@ (8009448 <HAL_GPIO_DeInit+0x1d4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <HAL_GPIO_DeInit+0xa2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a56      	ldr	r2, [pc, #344]	@ (800944c <HAL_GPIO_DeInit+0x1d8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00d      	beq.n	8009312 <HAL_GPIO_DeInit+0x9e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a55      	ldr	r2, [pc, #340]	@ (8009450 <HAL_GPIO_DeInit+0x1dc>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d007      	beq.n	800930e <HAL_GPIO_DeInit+0x9a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a54      	ldr	r2, [pc, #336]	@ (8009454 <HAL_GPIO_DeInit+0x1e0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <HAL_GPIO_DeInit+0x96>
 8009306:	2306      	movs	r3, #6
 8009308:	e00c      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 800930a:	2307      	movs	r3, #7
 800930c:	e00a      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 800930e:	2305      	movs	r3, #5
 8009310:	e008      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 8009312:	2304      	movs	r3, #4
 8009314:	e006      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 8009316:	2303      	movs	r3, #3
 8009318:	e004      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 800931a:	2302      	movs	r3, #2
 800931c:	e002      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 800931e:	2301      	movs	r3, #1
 8009320:	e000      	b.n	8009324 <HAL_GPIO_DeInit+0xb0>
 8009322:	2300      	movs	r3, #0
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	f002 0203 	and.w	r2, r2, #3
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	4093      	lsls	r3, r2
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	429a      	cmp	r2, r3
 8009332:	d132      	bne.n	800939a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009334:	4b48      	ldr	r3, [pc, #288]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	43db      	mvns	r3, r3
 800933c:	4946      	ldr	r1, [pc, #280]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 800933e:	4013      	ands	r3, r2
 8009340:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009342:	4b45      	ldr	r3, [pc, #276]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	43db      	mvns	r3, r3
 800934a:	4943      	ldr	r1, [pc, #268]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 800934c:	4013      	ands	r3, r2
 800934e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009350:	4b41      	ldr	r3, [pc, #260]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	43db      	mvns	r3, r3
 8009358:	493f      	ldr	r1, [pc, #252]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 800935a:	4013      	ands	r3, r2
 800935c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800935e:	4b3e      	ldr	r3, [pc, #248]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	43db      	mvns	r3, r3
 8009366:	493c      	ldr	r1, [pc, #240]	@ (8009458 <HAL_GPIO_DeInit+0x1e4>)
 8009368:	4013      	ands	r3, r2
 800936a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	220f      	movs	r2, #15
 8009376:	fa02 f303 	lsl.w	r3, r2, r3
 800937a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800937c:	4a2e      	ldr	r2, [pc, #184]	@ (8009438 <HAL_GPIO_DeInit+0x1c4>)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	089b      	lsrs	r3, r3, #2
 8009382:	3302      	adds	r3, #2
 8009384:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	43da      	mvns	r2, r3
 800938c:	482a      	ldr	r0, [pc, #168]	@ (8009438 <HAL_GPIO_DeInit+0x1c4>)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	089b      	lsrs	r3, r3, #2
 8009392:	400a      	ands	r2, r1
 8009394:	3302      	adds	r3, #2
 8009396:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	2103      	movs	r1, #3
 80093a4:	fa01 f303 	lsl.w	r3, r1, r3
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	08da      	lsrs	r2, r3, #3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3208      	adds	r2, #8
 80093b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	220f      	movs	r2, #15
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	43db      	mvns	r3, r3
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	08d2      	lsrs	r2, r2, #3
 80093d0:	4019      	ands	r1, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3208      	adds	r2, #8
 80093d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	2103      	movs	r1, #3
 80093e4:	fa01 f303 	lsl.w	r3, r1, r3
 80093e8:	43db      	mvns	r3, r3
 80093ea:	401a      	ands	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	2101      	movs	r1, #1
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	fa01 f303 	lsl.w	r3, r1, r3
 80093fc:	43db      	mvns	r3, r3
 80093fe:	401a      	ands	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	2103      	movs	r1, #3
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	43db      	mvns	r3, r3
 8009414:	401a      	ands	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	3301      	adds	r3, #1
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b0f      	cmp	r3, #15
 8009424:	f67f af34 	bls.w	8009290 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40013800 	.word	0x40013800
 800943c:	40020000 	.word	0x40020000
 8009440:	40020400 	.word	0x40020400
 8009444:	40020800 	.word	0x40020800
 8009448:	40020c00 	.word	0x40020c00
 800944c:	40021000 	.word	0x40021000
 8009450:	40021400 	.word	0x40021400
 8009454:	40021800 	.word	0x40021800
 8009458:	40013c00 	.word	0x40013c00

0800945c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	807b      	strh	r3, [r7, #2]
 8009468:	4613      	mov	r3, r2
 800946a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800946c:	787b      	ldrb	r3, [r7, #1]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009472:	887a      	ldrh	r2, [r7, #2]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009478:	e003      	b.n	8009482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	041a      	lsls	r2, r3, #16
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	619a      	str	r2, [r3, #24]
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800949a:	4b08      	ldr	r3, [pc, #32]	@ (80094bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800949c:	695a      	ldr	r2, [r3, #20]
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d006      	beq.n	80094b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80094a6:	4a05      	ldr	r2, [pc, #20]	@ (80094bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fc f952 	bl	8005758 <HAL_GPIO_EXTI_Callback>
  }
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40013c00 	.word	0x40013c00

080094c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e12b      	b.n	800972a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fd fe2e 	bl	8007148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2224      	movs	r2, #36	@ 0x24
 80094f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0201 	bic.w	r2, r2, #1
 8009502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009524:	f002 ff86 	bl	800c434 <HAL_RCC_GetPCLK1Freq>
 8009528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	4a81      	ldr	r2, [pc, #516]	@ (8009734 <HAL_I2C_Init+0x274>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d807      	bhi.n	8009544 <HAL_I2C_Init+0x84>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4a80      	ldr	r2, [pc, #512]	@ (8009738 <HAL_I2C_Init+0x278>)
 8009538:	4293      	cmp	r3, r2
 800953a:	bf94      	ite	ls
 800953c:	2301      	movls	r3, #1
 800953e:	2300      	movhi	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	e006      	b.n	8009552 <HAL_I2C_Init+0x92>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4a7d      	ldr	r2, [pc, #500]	@ (800973c <HAL_I2C_Init+0x27c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	bf94      	ite	ls
 800954c:	2301      	movls	r3, #1
 800954e:	2300      	movhi	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e0e7      	b.n	800972a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a78      	ldr	r2, [pc, #480]	@ (8009740 <HAL_I2C_Init+0x280>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0c9b      	lsrs	r3, r3, #18
 8009564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a6a      	ldr	r2, [pc, #424]	@ (8009734 <HAL_I2C_Init+0x274>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d802      	bhi.n	8009594 <HAL_I2C_Init+0xd4>
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	3301      	adds	r3, #1
 8009592:	e009      	b.n	80095a8 <HAL_I2C_Init+0xe8>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800959a:	fb02 f303 	mul.w	r3, r2, r3
 800959e:	4a69      	ldr	r2, [pc, #420]	@ (8009744 <HAL_I2C_Init+0x284>)
 80095a0:	fba2 2303 	umull	r2, r3, r2, r3
 80095a4:	099b      	lsrs	r3, r3, #6
 80095a6:	3301      	adds	r3, #1
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	430b      	orrs	r3, r1
 80095ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80095ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	495c      	ldr	r1, [pc, #368]	@ (8009734 <HAL_I2C_Init+0x274>)
 80095c4:	428b      	cmp	r3, r1
 80095c6:	d819      	bhi.n	80095fc <HAL_I2C_Init+0x13c>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1e59      	subs	r1, r3, #1
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80095d6:	1c59      	adds	r1, r3, #1
 80095d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80095dc:	400b      	ands	r3, r1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <HAL_I2C_Init+0x138>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	1e59      	subs	r1, r3, #1
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80095f0:	3301      	adds	r3, #1
 80095f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f6:	e051      	b.n	800969c <HAL_I2C_Init+0x1dc>
 80095f8:	2304      	movs	r3, #4
 80095fa:	e04f      	b.n	800969c <HAL_I2C_Init+0x1dc>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d111      	bne.n	8009628 <HAL_I2C_Init+0x168>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	1e58      	subs	r0, r3, #1
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6859      	ldr	r1, [r3, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	440b      	add	r3, r1
 8009612:	fbb0 f3f3 	udiv	r3, r0, r3
 8009616:	3301      	adds	r3, #1
 8009618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf0c      	ite	eq
 8009620:	2301      	moveq	r3, #1
 8009622:	2300      	movne	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	e012      	b.n	800964e <HAL_I2C_Init+0x18e>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	1e58      	subs	r0, r3, #1
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6859      	ldr	r1, [r3, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	0099      	lsls	r1, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	fbb0 f3f3 	udiv	r3, r0, r3
 800963e:	3301      	adds	r3, #1
 8009640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf0c      	ite	eq
 8009648:	2301      	moveq	r3, #1
 800964a:	2300      	movne	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <HAL_I2C_Init+0x196>
 8009652:	2301      	movs	r3, #1
 8009654:	e022      	b.n	800969c <HAL_I2C_Init+0x1dc>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10e      	bne.n	800967c <HAL_I2C_Init+0x1bc>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1e58      	subs	r0, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6859      	ldr	r1, [r3, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	440b      	add	r3, r1
 800966c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009670:	3301      	adds	r3, #1
 8009672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800967a:	e00f      	b.n	800969c <HAL_I2C_Init+0x1dc>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1e58      	subs	r0, r3, #1
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6859      	ldr	r1, [r3, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	0099      	lsls	r1, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009692:	3301      	adds	r3, #1
 8009694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	6809      	ldr	r1, [r1, #0]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69da      	ldr	r2, [r3, #28]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80096ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6911      	ldr	r1, [r2, #16]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	68d2      	ldr	r2, [r2, #12]
 80096d6:	4311      	orrs	r1, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6812      	ldr	r2, [r2, #0]
 80096dc:	430b      	orrs	r3, r1
 80096de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	695a      	ldr	r2, [r3, #20]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	000186a0 	.word	0x000186a0
 8009738:	001e847f 	.word	0x001e847f
 800973c:	003d08ff 	.word	0x003d08ff
 8009740:	431bde83 	.word	0x431bde83
 8009744:	10624dd3 	.word	0x10624dd3

08009748 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e021      	b.n	800979e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2224      	movs	r2, #36	@ 0x24
 800975e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fd fdc2 	bl	80072fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b8:	2b80      	cmp	r3, #128	@ 0x80
 80097ba:	d103      	bne.n	80097c4 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2200      	movs	r2, #0
 80097c2:	611a      	str	r2, [r3, #16]
  }
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	461a      	mov	r2, r3
 80097de:	4603      	mov	r3, r0
 80097e0:	817b      	strh	r3, [r7, #10]
 80097e2:	460b      	mov	r3, r1
 80097e4:	813b      	strh	r3, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097ea:	f7fe f9b1 	bl	8007b50 <HAL_GetTick>
 80097ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	f040 80d9 	bne.w	80099b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	2319      	movs	r3, #25
 8009804:	2201      	movs	r2, #1
 8009806:	496d      	ldr	r1, [pc, #436]	@ (80099bc <HAL_I2C_Mem_Write+0x1ec>)
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f002 fa9d 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
 8009816:	e0cc      	b.n	80099b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_I2C_Mem_Write+0x56>
 8009822:	2302      	movs	r3, #2
 8009824:	e0c5      	b.n	80099b2 <HAL_I2C_Mem_Write+0x1e2>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b01      	cmp	r3, #1
 800983a:	d007      	beq.n	800984c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800985a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2221      	movs	r2, #33	@ 0x21
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2240      	movs	r2, #64	@ 0x40
 8009868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a3a      	ldr	r2, [r7, #32]
 8009876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800987c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4a4d      	ldr	r2, [pc, #308]	@ (80099c0 <HAL_I2C_Mem_Write+0x1f0>)
 800988c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800988e:	88f8      	ldrh	r0, [r7, #6]
 8009890:	893a      	ldrh	r2, [r7, #8]
 8009892:	8979      	ldrh	r1, [r7, #10]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4603      	mov	r3, r0
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f001 ff10 	bl	800b6c4 <I2C_RequestMemoryWrite>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d052      	beq.n	8009950 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e081      	b.n	80099b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f002 fb62 	bl	800bf7c <I2C_WaitOnTXEFlagUntilTimeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00d      	beq.n	80098da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d107      	bne.n	80098d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e06b      	b.n	80099b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009900:	b29b      	uxth	r3, r3
 8009902:	3b01      	subs	r3, #1
 8009904:	b29a      	uxth	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b04      	cmp	r3, #4
 8009916:	d11b      	bne.n	8009950 <HAL_I2C_Mem_Write+0x180>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800991c:	2b00      	cmp	r3, #0
 800991e:	d017      	beq.n	8009950 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800993a:	3b01      	subs	r3, #1
 800993c:	b29a      	uxth	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009946:	b29b      	uxth	r3, r3
 8009948:	3b01      	subs	r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1aa      	bne.n	80098ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f002 fb55 	bl	800c00c <I2C_WaitOnBTFFlagUntilTimeout>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00d      	beq.n	8009984 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996c:	2b04      	cmp	r3, #4
 800996e:	d107      	bne.n	8009980 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800997e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e016      	b.n	80099b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	e000      	b.n	80099b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80099b0:	2302      	movs	r3, #2
  }
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	00100002 	.word	0x00100002
 80099c0:	ffff0000 	.word	0xffff0000

080099c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08c      	sub	sp, #48	@ 0x30
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	461a      	mov	r2, r3
 80099d2:	4603      	mov	r3, r0
 80099d4:	817b      	strh	r3, [r7, #10]
 80099d6:	460b      	mov	r3, r1
 80099d8:	813b      	strh	r3, [r7, #8]
 80099da:	4613      	mov	r3, r2
 80099dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099de:	f7fe f8b7 	bl	8007b50 <HAL_GetTick>
 80099e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	f040 8214 	bne.w	8009e1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	2319      	movs	r3, #25
 80099f8:	2201      	movs	r2, #1
 80099fa:	497b      	ldr	r1, [pc, #492]	@ (8009be8 <HAL_I2C_Mem_Read+0x224>)
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f002 f9a3 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e207      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d101      	bne.n	8009a1a <HAL_I2C_Mem_Read+0x56>
 8009a16:	2302      	movs	r3, #2
 8009a18:	e200      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d007      	beq.n	8009a40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2222      	movs	r2, #34	@ 0x22
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2240      	movs	r2, #64	@ 0x40
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8009bec <HAL_I2C_Mem_Read+0x228>)
 8009a80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a82:	88f8      	ldrh	r0, [r7, #6]
 8009a84:	893a      	ldrh	r2, [r7, #8]
 8009a86:	8979      	ldrh	r1, [r7, #10]
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	4603      	mov	r3, r0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f001 feac 	bl	800b7f0 <I2C_RequestMemoryRead>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e1bc      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d113      	bne.n	8009ad2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	623b      	str	r3, [r7, #32]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	623b      	str	r3, [r7, #32]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	623b      	str	r3, [r7, #32]
 8009abe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	e190      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d11b      	bne.n	8009b12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aea:	2300      	movs	r3, #0
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e170      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d11b      	bne.n	8009b52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	61bb      	str	r3, [r7, #24]
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	e150      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009b68:	e144      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	f200 80f1 	bhi.w	8009d56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d123      	bne.n	8009bc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f002 fabd 	bl	800c100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e145      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009bc2:	e117      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d14e      	bne.n	8009c6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4906      	ldr	r1, [pc, #24]	@ (8009bf0 <HAL_I2C_Mem_Read+0x22c>)
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f002 f8b6 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d008      	beq.n	8009bf4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e11a      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
 8009be6:	bf00      	nop
 8009be8:	00100002 	.word	0x00100002
 8009bec:	ffff0000 	.word	0xffff0000
 8009bf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c20:	3b01      	subs	r3, #1
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c52:	3b01      	subs	r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	3b01      	subs	r3, #1
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009c68:	e0c4      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c70:	2200      	movs	r2, #0
 8009c72:	496c      	ldr	r1, [pc, #432]	@ (8009e24 <HAL_I2C_Mem_Read+0x460>)
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f002 f867 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e0cb      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9e:	b2d2      	uxtb	r2, r2
 8009ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4955      	ldr	r1, [pc, #340]	@ (8009e24 <HAL_I2C_Mem_Read+0x460>)
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f002 f839 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e09d      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691a      	ldr	r2, [r3, #16]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2c:	b2d2      	uxtb	r2, r2
 8009d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d54:	e04e      	b.n	8009df4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f002 f9d0 	bl	800c100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e058      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	691a      	ldr	r2, [r3, #16]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d74:	b2d2      	uxtb	r2, r2
 8009d76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b04      	cmp	r3, #4
 8009da8:	d124      	bne.n	8009df4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d107      	bne.n	8009dc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009dc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	691a      	ldr	r2, [r3, #16]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f47f aeb6 	bne.w	8009b6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	e000      	b.n	8009e1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009e1a:	2302      	movs	r3, #2
  }
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3728      	adds	r7, #40	@ 0x28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	00010004 	.word	0x00010004

08009e28 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08c      	sub	sp, #48	@ 0x30
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	4608      	mov	r0, r1
 8009e32:	4611      	mov	r1, r2
 8009e34:	461a      	mov	r2, r3
 8009e36:	4603      	mov	r3, r0
 8009e38:	817b      	strh	r3, [r7, #10]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	813b      	strh	r3, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e42:	f7fd fe85 	bl	8007b50 <HAL_GetTick>
 8009e46:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	f040 8172 	bne.w	800a13e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e5a:	4b93      	ldr	r3, [pc, #588]	@ (800a0a8 <HAL_I2C_Mem_Read_DMA+0x280>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	08db      	lsrs	r3, r3, #3
 8009e60:	4a92      	ldr	r2, [pc, #584]	@ (800a0ac <HAL_I2C_Mem_Read_DMA+0x284>)
 8009e62:	fba2 2303 	umull	r2, r3, r2, r3
 8009e66:	0a1a      	lsrs	r2, r3, #8
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009a      	lsls	r2, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d112      	bne.n	8009ea6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	f043 0220 	orr.w	r2, r3, #32
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e14c      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d0df      	beq.n	8009e74 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d101      	bne.n	8009ec2 <HAL_I2C_Mem_Read_DMA+0x9a>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e13e      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d007      	beq.n	8009ee8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0201 	orr.w	r2, r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2222      	movs	r2, #34	@ 0x22
 8009efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2240      	movs	r2, #64	@ 0x40
 8009f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4a62      	ldr	r2, [pc, #392]	@ (800a0b0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8009f28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8009f2a:	897a      	ldrh	r2, [r7, #10]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8009f30:	893a      	ldrh	r2, [r7, #8]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 80cc 	beq.w	800a0e4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d02d      	beq.n	8009fb0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f58:	4a56      	ldr	r2, [pc, #344]	@ (800a0b4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8009f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f60:	4a55      	ldr	r2, [pc, #340]	@ (800a0b8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8009f62:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f68:	2200      	movs	r2, #0
 8009f6a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f70:	2200      	movs	r2, #0
 8009f72:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f78:	2200      	movs	r2, #0
 8009f7a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f80:	2200      	movs	r2, #0
 8009f82:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3310      	adds	r3, #16
 8009f8e:	4619      	mov	r1, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f94:	461a      	mov	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f9a:	f7fe fc69 	bl	8008870 <HAL_DMA_Start_IT>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f040 8087 	bne.w	800a0bc <HAL_I2C_Mem_Read_DMA+0x294>
 8009fae:	e013      	b.n	8009fd8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e0b3      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009fd8:	88f8      	ldrh	r0, [r7, #6]
 8009fda:	893a      	ldrh	r2, [r7, #8]
 8009fdc:	8979      	ldrh	r1, [r7, #10]
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	2323      	movs	r3, #35	@ 0x23
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f001 fc01 	bl	800b7f0 <I2C_RequestMemoryRead>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d023      	beq.n	800a03c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe fd01 	bl	8008a00 <HAL_DMA_Abort_IT>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a008:	2200      	movs	r2, #0
 800a00a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a01a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0201 	bic.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e081      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a040:	2b01      	cmp	r3, #1
 800a042:	d108      	bne.n	800a056 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	e007      	b.n	800a066 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a064:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a066:	2300      	movs	r3, #0
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	61bb      	str	r3, [r7, #24]
 800a07a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a092:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0a2:	605a      	str	r2, [r3, #4]
 800a0a4:	e049      	b.n	800a13a <HAL_I2C_Mem_Read_DMA+0x312>
 800a0a6:	bf00      	nop
 800a0a8:	20000038 	.word	0x20000038
 800a0ac:	14f8b589 	.word	0x14f8b589
 800a0b0:	ffff0000 	.word	0xffff0000
 800a0b4:	0800b9c1 	.word	0x0800b9c1
 800a0b8:	0800bb7f 	.word	0x0800bb7f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d0:	f043 0210 	orr.w	r2, r3, #16
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e02d      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a0e4:	88f8      	ldrh	r0, [r7, #6]
 800a0e6:	893a      	ldrh	r2, [r7, #8]
 800a0e8:	8979      	ldrh	r1, [r7, #10]
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	2323      	movs	r3, #35	@ 0x23
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f001 fb7b 	bl	800b7f0 <I2C_RequestMemoryRead>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e01d      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a128:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e000      	b.n	800a140 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800a13e:	2302      	movs	r3, #2
  }
}
 800a140:	4618      	mov	r0, r3
 800a142:	3728      	adds	r7, #40	@ 0x28
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a160:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a168:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a170:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	2b10      	cmp	r3, #16
 800a176:	d003      	beq.n	800a180 <HAL_I2C_EV_IRQHandler+0x38>
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	2b40      	cmp	r3, #64	@ 0x40
 800a17c:	f040 80b1 	bne.w	800a2e2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10d      	bne.n	800a1b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a1a0:	d003      	beq.n	800a1aa <HAL_I2C_EV_IRQHandler+0x62>
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a1a8:	d101      	bne.n	800a1ae <HAL_I2C_EV_IRQHandler+0x66>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <HAL_I2C_EV_IRQHandler+0x68>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	f000 8114 	beq.w	800a3de <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00b      	beq.n	800a1d8 <HAL_I2C_EV_IRQHandler+0x90>
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d006      	beq.n	800a1d8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f002 f824 	bl	800c218 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fccd 	bl	800ab70 <I2C_Master_SB>
 800a1d6:	e083      	b.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	f003 0308 	and.w	r3, r3, #8
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d008      	beq.n	800a1f4 <HAL_I2C_EV_IRQHandler+0xac>
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fd45 	bl	800ac7c <I2C_Master_ADD10>
 800a1f2:	e075      	b.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d008      	beq.n	800a210 <HAL_I2C_EV_IRQHandler+0xc8>
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fd61 	bl	800acd0 <I2C_Master_ADDR>
 800a20e:	e067      	b.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	d036      	beq.n	800a288 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a228:	f000 80db 	beq.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <HAL_I2C_EV_IRQHandler+0x10a>
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <HAL_I2C_EV_IRQHandler+0x10a>
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d103      	bne.n	800a252 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f92d 	bl	800a4aa <I2C_MasterTransmit_TXE>
 800a250:	e046      	b.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80c2 	beq.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80bc 	beq.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b21      	cmp	r3, #33	@ 0x21
 800a26e:	d103      	bne.n	800a278 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f9b6 	bl	800a5e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a276:	e0b4      	b.n	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	2b40      	cmp	r3, #64	@ 0x40
 800a27c:	f040 80b1 	bne.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa24 	bl	800a6ce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a286:	e0ac      	b.n	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a296:	f000 80a4 	beq.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00d      	beq.n	800a2c0 <HAL_I2C_EV_IRQHandler+0x178>
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d008      	beq.n	800a2c0 <HAL_I2C_EV_IRQHandler+0x178>
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 faa0 	bl	800a7fe <I2C_MasterReceive_RXNE>
 800a2be:	e00f      	b.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	f003 0304 	and.w	r3, r3, #4
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f000 808b 	beq.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 8085 	beq.w	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fb58 	bl	800a98e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2de:	e080      	b.n	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800a2e0:	e07f      	b.n	800a3e2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	e007      	b.n	800a304 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d011      	beq.n	800a332 <HAL_I2C_EV_IRQHandler+0x1ea>
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00c      	beq.n	800a332 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a328:	69b9      	ldr	r1, [r7, #24]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 ff1f 	bl	800b16e <I2C_Slave_ADDR>
 800a330:	e05a      	b.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d008      	beq.n	800a34e <HAL_I2C_EV_IRQHandler+0x206>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 ff5a 	bl	800b200 <I2C_Slave_STOPF>
 800a34c:	e04c      	b.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
 800a350:	2b21      	cmp	r3, #33	@ 0x21
 800a352:	d002      	beq.n	800a35a <HAL_I2C_EV_IRQHandler+0x212>
 800a354:	7bbb      	ldrb	r3, [r7, #14]
 800a356:	2b29      	cmp	r3, #41	@ 0x29
 800a358:	d120      	bne.n	800a39c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00d      	beq.n	800a380 <HAL_I2C_EV_IRQHandler+0x238>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d008      	beq.n	800a380 <HAL_I2C_EV_IRQHandler+0x238>
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d103      	bne.n	800a380 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fe3a 	bl	800aff2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a37e:	e032      	b.n	800a3e6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02d      	beq.n	800a3e6 <HAL_I2C_EV_IRQHandler+0x29e>
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a390:	2b00      	cmp	r3, #0
 800a392:	d028      	beq.n	800a3e6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fe69 	bl	800b06c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a39a:	e024      	b.n	800a3e6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00d      	beq.n	800a3c2 <HAL_I2C_EV_IRQHandler+0x27a>
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d008      	beq.n	800a3c2 <HAL_I2C_EV_IRQHandler+0x27a>
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d103      	bne.n	800a3c2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fe77 	bl	800b0ae <I2C_SlaveReceive_RXNE>
 800a3c0:	e012      	b.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00d      	beq.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fea7 	bl	800b12a <I2C_SlaveReceive_BTF>
 800a3dc:	e004      	b.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a3de:	bf00      	nop
 800a3e0:	e002      	b.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3e2:	bf00      	nop
 800a3e4:	e000      	b.n	800a3e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
 800a44a:	4613      	mov	r3, r2
 800a44c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d150      	bne.n	800a572 <I2C_MasterTransmit_TXE+0xc8>
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	2b21      	cmp	r3, #33	@ 0x21
 800a4d4:	d14d      	bne.n	800a572 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d01d      	beq.n	800a518 <I2C_MasterTransmit_TXE+0x6e>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2b20      	cmp	r3, #32
 800a4e0:	d01a      	beq.n	800a518 <I2C_MasterTransmit_TXE+0x6e>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a4e8:	d016      	beq.n	800a518 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a4f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2211      	movs	r2, #17
 800a4fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff ff6c 	bl	800a3ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a516:	e060      	b.n	800a5da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a526:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a536:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b40      	cmp	r3, #64	@ 0x40
 800a550:	d107      	bne.n	800a562 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff ff87 	bl	800a46e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a560:	e03b      	b.n	800a5da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff ff3f 	bl	800a3ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a570:	e033      	b.n	800a5da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	2b21      	cmp	r3, #33	@ 0x21
 800a576:	d005      	beq.n	800a584 <I2C_MasterTransmit_TXE+0xda>
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b40      	cmp	r3, #64	@ 0x40
 800a57c:	d12d      	bne.n	800a5da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	2b22      	cmp	r3, #34	@ 0x22
 800a582:	d12a      	bne.n	800a5da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d108      	bne.n	800a5a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a59c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a59e:	e01c      	b.n	800a5da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b40      	cmp	r3, #64	@ 0x40
 800a5aa:	d103      	bne.n	800a5b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f88e 	bl	800a6ce <I2C_MemoryTransmit_TXE_BTF>
}
 800a5b2:	e012      	b.n	800a5da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b8:	781a      	ldrb	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a5d8:	e7ff      	b.n	800a5da <I2C_MasterTransmit_TXE+0x130>
 800a5da:	bf00      	nop
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b21      	cmp	r3, #33	@ 0x21
 800a5fa:	d164      	bne.n	800a6c6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d012      	beq.n	800a62c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a620:	b29b      	uxth	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	b29a      	uxth	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a62a:	e04c      	b.n	800a6c6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d01d      	beq.n	800a66e <I2C_MasterTransmit_BTF+0x8c>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b20      	cmp	r3, #32
 800a636:	d01a      	beq.n	800a66e <I2C_MasterTransmit_BTF+0x8c>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a63e:	d016      	beq.n	800a66e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a64e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2211      	movs	r2, #17
 800a654:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fec1 	bl	800a3ee <HAL_I2C_MasterTxCpltCallback>
}
 800a66c:	e02b      	b.n	800a6c6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a67c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a68c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b40      	cmp	r3, #64	@ 0x40
 800a6a6:	d107      	bne.n	800a6b8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff fedc 	bl	800a46e <HAL_I2C_MemTxCpltCallback>
}
 800a6b6:	e006      	b.n	800a6c6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff fe94 	bl	800a3ee <HAL_I2C_MasterTxCpltCallback>
}
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d11d      	bne.n	800a722 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d10b      	bne.n	800a706 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6fe:	1c9a      	adds	r2, r3, #2
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a704:	e077      	b.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	121b      	asrs	r3, r3, #8
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a720:	e069      	b.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a726:	2b01      	cmp	r3, #1
 800a728:	d10b      	bne.n	800a742 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a740:	e059      	b.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a746:	2b02      	cmp	r3, #2
 800a748:	d152      	bne.n	800a7f0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b22      	cmp	r3, #34	@ 0x22
 800a74e:	d10d      	bne.n	800a76c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a75e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a76a:	e044      	b.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a770:	b29b      	uxth	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d015      	beq.n	800a7a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	2b21      	cmp	r3, #33	@ 0x21
 800a77a:	d112      	bne.n	800a7a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a796:	b29b      	uxth	r3, r3
 800a798:	3b01      	subs	r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a7a0:	e029      	b.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d124      	bne.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	2b21      	cmp	r3, #33	@ 0x21
 800a7b0:	d121      	bne.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7c0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7d0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fe40 	bl	800a46e <HAL_I2C_MemTxCpltCallback>
}
 800a7ee:	e002      	b.n	800a7f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fe ffd8 	bl	80097a6 <I2C_Flush_DR>
}
 800a7f6:	bf00      	nop
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b22      	cmp	r3, #34	@ 0x22
 800a810:	f040 80b9 	bne.w	800a986 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a818:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a81e:	b29b      	uxth	r3, r3
 800a820:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d921      	bls.n	800a86c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a844:	b29b      	uxth	r3, r3
 800a846:	3b01      	subs	r3, #1
 800a848:	b29a      	uxth	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b03      	cmp	r3, #3
 800a856:	f040 8096 	bne.w	800a986 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a868:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a86a:	e08c      	b.n	800a986 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	2b02      	cmp	r3, #2
 800a872:	d07f      	beq.n	800a974 <I2C_MasterReceive_RXNE+0x176>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d002      	beq.n	800a880 <I2C_MasterReceive_RXNE+0x82>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d179      	bne.n	800a974 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fc0b 	bl	800c09c <I2C_WaitOnSTOPRequestThroughIT>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d14c      	bne.n	800a926 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a89a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a8aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b40      	cmp	r3, #64	@ 0x40
 800a8e4:	d10a      	bne.n	800a8fc <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7fa ff8b 	bl	8005810 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a8fa:	e044      	b.n	800a986 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b08      	cmp	r3, #8
 800a908:	d002      	beq.n	800a910 <I2C_MasterReceive_RXNE+0x112>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b20      	cmp	r3, #32
 800a90e:	d103      	bne.n	800a918 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	631a      	str	r2, [r3, #48]	@ 0x30
 800a916:	e002      	b.n	800a91e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2212      	movs	r2, #18
 800a91c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7ff fd6f 	bl	800a402 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a924:	e02f      	b.n	800a986 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a934:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a952:	b29b      	uxth	r3, r3
 800a954:	3b01      	subs	r3, #1
 800a956:	b29a      	uxth	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2220      	movs	r2, #32
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fd88 	bl	800a482 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a972:	e008      	b.n	800a986 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a982:	605a      	str	r2, [r3, #4]
}
 800a984:	e7ff      	b.n	800a986 <I2C_MasterReceive_RXNE+0x188>
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d11b      	bne.n	800a9de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c0:	b2d2      	uxtb	r2, r2
 800a9c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a9dc:	e0c4      	b.n	800ab68 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d129      	bne.n	800aa3c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d00a      	beq.n	800aa14 <I2C_MasterReceive_BTF+0x86>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d007      	beq.n	800aa14 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa12:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800aa3a:	e095      	b.n	800ab68 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d17d      	bne.n	800ab42 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d002      	beq.n	800aa52 <I2C_MasterReceive_BTF+0xc4>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d108      	bne.n	800aa64 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	e016      	b.n	800aa92 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d002      	beq.n	800aa70 <I2C_MasterReceive_BTF+0xe2>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d108      	bne.n	800aa82 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	e007      	b.n	800aa92 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800aaec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b40      	cmp	r3, #64	@ 0x40
 800ab00:	d10a      	bne.n	800ab18 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7fa fe7d 	bl	8005810 <HAL_I2C_MemRxCpltCallback>
}
 800ab16:	e027      	b.n	800ab68 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b08      	cmp	r3, #8
 800ab24:	d002      	beq.n	800ab2c <I2C_MasterReceive_BTF+0x19e>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d103      	bne.n	800ab34 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab32:	e002      	b.n	800ab3a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2212      	movs	r2, #18
 800ab38:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff fc61 	bl	800a402 <HAL_I2C_MasterRxCpltCallback>
}
 800ab40:	e012      	b.n	800ab68 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ab68:	bf00      	nop
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b40      	cmp	r3, #64	@ 0x40
 800ab82:	d117      	bne.n	800abb4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d109      	bne.n	800aba0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ab9c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ab9e:	e067      	b.n	800ac70 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	611a      	str	r2, [r3, #16]
}
 800abb2:	e05d      	b.n	800ac70 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abbc:	d133      	bne.n	800ac26 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b21      	cmp	r3, #33	@ 0x21
 800abc8:	d109      	bne.n	800abde <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	461a      	mov	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800abda:	611a      	str	r2, [r3, #16]
 800abdc:	e008      	b.n	800abf0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f043 0301 	orr.w	r3, r3, #1
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <I2C_Master_SB+0x92>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d108      	bne.n	800ac14 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d032      	beq.n	800ac70 <I2C_Master_SB+0x100>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d02d      	beq.n	800ac70 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac22:	605a      	str	r2, [r3, #4]
}
 800ac24:	e024      	b.n	800ac70 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10e      	bne.n	800ac4c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	11db      	asrs	r3, r3, #7
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0306 	and.w	r3, r3, #6
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	f063 030f 	orn	r3, r3, #15
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	611a      	str	r2, [r3, #16]
}
 800ac4a:	e011      	b.n	800ac70 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d10d      	bne.n	800ac70 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	11db      	asrs	r3, r3, #7
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	f003 0306 	and.w	r3, r3, #6
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f063 030e 	orn	r3, r3, #14
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	611a      	str	r2, [r3, #16]
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <I2C_Master_ADD10+0x26>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d108      	bne.n	800acb4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00c      	beq.n	800acc4 <I2C_Master_ADD10+0x48>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800acc2:	605a      	str	r2, [r3, #4]
  }
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b091      	sub	sp, #68	@ 0x44
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800acde:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acec:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b22      	cmp	r3, #34	@ 0x22
 800acf8:	f040 8169 	bne.w	800afce <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10f      	bne.n	800ad24 <I2C_Master_ADDR+0x54>
 800ad04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ad08:	2b40      	cmp	r3, #64	@ 0x40
 800ad0a:	d10b      	bne.n	800ad24 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad22:	e160      	b.n	800afe6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d11d      	bne.n	800ad68 <I2C_Master_ADDR+0x98>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ad34:	d118      	bne.n	800ad68 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad36:	2300      	movs	r3, #0
 800ad38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad5a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	651a      	str	r2, [r3, #80]	@ 0x50
 800ad66:	e13e      	b.n	800afe6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d113      	bne.n	800ad9a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad72:	2300      	movs	r3, #0
 800ad74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e115      	b.n	800afc6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	f040 808a 	bne.w	800aeba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ada6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800adac:	d137      	bne.n	800ae1e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adbc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adcc:	d113      	bne.n	800adf6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800addc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adde:	2300      	movs	r3, #0
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	627b      	str	r3, [r7, #36]	@ 0x24
 800adf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf4:	e0e7      	b.n	800afc6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adf6:	2300      	movs	r3, #0
 800adf8:	623b      	str	r3, [r7, #32]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	623b      	str	r3, [r7, #32]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	623b      	str	r3, [r7, #32]
 800ae0a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e0d3      	b.n	800afc6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d02e      	beq.n	800ae82 <I2C_Master_ADDR+0x1b2>
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d02b      	beq.n	800ae82 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2c:	2b12      	cmp	r3, #18
 800ae2e:	d102      	bne.n	800ae36 <I2C_Master_ADDR+0x166>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d125      	bne.n	800ae82 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d00e      	beq.n	800ae5a <I2C_Master_ADDR+0x18a>
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d00b      	beq.n	800ae5a <I2C_Master_ADDR+0x18a>
 800ae42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae44:	2b10      	cmp	r3, #16
 800ae46:	d008      	beq.n	800ae5a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	e007      	b.n	800ae6a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae68:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61fb      	str	r3, [r7, #28]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	61fb      	str	r3, [r7, #28]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	61fb      	str	r3, [r7, #28]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	e0a1      	b.n	800afc6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae90:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae92:	2300      	movs	r3, #0
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	61bb      	str	r3, [r7, #24]
 800aea6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	e085      	b.n	800afc6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d14d      	bne.n	800af60 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800aec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d016      	beq.n	800aef8 <I2C_Master_ADDR+0x228>
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d013      	beq.n	800aef8 <I2C_Master_ADDR+0x228>
 800aed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed2:	2b10      	cmp	r3, #16
 800aed4:	d010      	beq.n	800aef8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aee4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	e007      	b.n	800af08 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af06:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af16:	d117      	bne.n	800af48 <I2C_Master_ADDR+0x278>
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af1e:	d00b      	beq.n	800af38 <I2C_Master_ADDR+0x268>
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	2b01      	cmp	r3, #1
 800af24:	d008      	beq.n	800af38 <I2C_Master_ADDR+0x268>
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d005      	beq.n	800af38 <I2C_Master_ADDR+0x268>
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	2b10      	cmp	r3, #16
 800af30:	d002      	beq.n	800af38 <I2C_Master_ADDR+0x268>
 800af32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af34:	2b20      	cmp	r3, #32
 800af36:	d107      	bne.n	800af48 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800af46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	e032      	b.n	800afc6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af6e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af7e:	d117      	bne.n	800afb0 <I2C_Master_ADDR+0x2e0>
 800af80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af86:	d00b      	beq.n	800afa0 <I2C_Master_ADDR+0x2d0>
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d008      	beq.n	800afa0 <I2C_Master_ADDR+0x2d0>
 800af8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af90:	2b08      	cmp	r3, #8
 800af92:	d005      	beq.n	800afa0 <I2C_Master_ADDR+0x2d0>
 800af94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af96:	2b10      	cmp	r3, #16
 800af98:	d002      	beq.n	800afa0 <I2C_Master_ADDR+0x2d0>
 800af9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	d107      	bne.n	800afb0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800afae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afb0:	2300      	movs	r3, #0
 800afb2:	613b      	str	r3, [r7, #16]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	613b      	str	r3, [r7, #16]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800afcc:	e00b      	b.n	800afe6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	695b      	ldr	r3, [r3, #20]
 800afd8:	60fb      	str	r3, [r7, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	68fb      	ldr	r3, [r7, #12]
}
 800afe4:	e7ff      	b.n	800afe6 <I2C_Master_ADDR+0x316>
 800afe6:	bf00      	nop
 800afe8:	3744      	adds	r7, #68	@ 0x44
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b000:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b006:	b29b      	uxth	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d02b      	beq.n	800b064 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01c:	1c5a      	adds	r2, r3, #1
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b026:	b29b      	uxth	r3, r3
 800b028:	3b01      	subs	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b034:	b29b      	uxth	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d114      	bne.n	800b064 <I2C_SlaveTransmit_TXE+0x72>
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b29      	cmp	r3, #41	@ 0x29
 800b03e:	d111      	bne.n	800b064 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b04e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2221      	movs	r2, #33	@ 0x21
 800b054:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2228      	movs	r2, #40	@ 0x28
 800b05a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff f9d9 	bl	800a416 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b078:	b29b      	uxth	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d011      	beq.n	800b0a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	781a      	ldrb	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3b01      	subs	r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02c      	beq.n	800b122 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	691a      	ldr	r2, [r3, #16]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	b2d2      	uxtb	r2, r2
 800b0d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d114      	bne.n	800b122 <I2C_SlaveReceive_RXNE+0x74>
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0fc:	d111      	bne.n	800b122 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b10c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2222      	movs	r2, #34	@ 0x22
 800b112:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2228      	movs	r2, #40	@ 0x28
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff f984 	bl	800a42a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b136:	b29b      	uxth	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d012      	beq.n	800b162 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691a      	ldr	r2, [r3, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	b2d2      	uxtb	r2, r2
 800b148:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b162:	bf00      	nop
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b178:	2300      	movs	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b188:	2b28      	cmp	r3, #40	@ 0x28
 800b18a:	d125      	bne.n	800b1d8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b19a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	f003 0304 	and.w	r3, r3, #4
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	81bb      	strh	r3, [r7, #12]
 800b1ba:	e002      	b.n	800b1c2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b1ca:	89ba      	ldrh	r2, [r7, #12]
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff f934 	bl	800a43e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b1d6:	e00e      	b.n	800b1f6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60bb      	str	r3, [r7, #8]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	60bb      	str	r3, [r7, #8]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	60bb      	str	r3, [r7, #8]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b20e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b21e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b220:	2300      	movs	r3, #0
 800b222:	60bb      	str	r3, [r7, #8]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	60bb      	str	r3, [r7, #8]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b24c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b25c:	d172      	bne.n	800b344 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
 800b260:	2b22      	cmp	r3, #34	@ 0x22
 800b262:	d002      	beq.n	800b26a <I2C_Slave_STOPF+0x6a>
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	2b2a      	cmp	r3, #42	@ 0x2a
 800b268:	d135      	bne.n	800b2d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	b29a      	uxth	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d005      	beq.n	800b28e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b286:	f043 0204 	orr.w	r2, r3, #4
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b29c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fd fd58 	bl	8008d58 <HAL_DMA_GetState>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d049      	beq.n	800b342 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b2:	4a69      	ldr	r2, [pc, #420]	@ (800b458 <I2C_Slave_STOPF+0x258>)
 800b2b4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd fba0 	bl	8008a00 <HAL_DMA_Abort_IT>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d03d      	beq.n	800b342 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2d4:	e035      	b.n	800b342 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f2:	f043 0204 	orr.w	r2, r3, #4
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b308:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd fd22 	bl	8008d58 <HAL_DMA_GetState>
 800b314:	4603      	mov	r3, r0
 800b316:	2b01      	cmp	r3, #1
 800b318:	d014      	beq.n	800b344 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31e:	4a4e      	ldr	r2, [pc, #312]	@ (800b458 <I2C_Slave_STOPF+0x258>)
 800b320:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b326:	4618      	mov	r0, r3
 800b328:	f7fd fb6a 	bl	8008a00 <HAL_DMA_Abort_IT>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d008      	beq.n	800b344 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	e000      	b.n	800b344 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b342:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b348:	b29b      	uxth	r3, r3
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d03e      	beq.n	800b3cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d112      	bne.n	800b382 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	691a      	ldr	r2, [r3, #16]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b366:	b2d2      	uxtb	r2, r2
 800b368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	d112      	bne.n	800b3b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691a      	ldr	r2, [r3, #16]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39a:	b2d2      	uxtb	r2, r2
 800b39c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c4:	f043 0204 	orr.w	r2, r3, #4
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f843 	bl	800b460 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b3da:	e039      	b.n	800b450 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3e0:	d109      	bne.n	800b3f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2228      	movs	r2, #40	@ 0x28
 800b3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7ff f81a 	bl	800a42a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b28      	cmp	r3, #40	@ 0x28
 800b400:	d111      	bne.n	800b426 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a15      	ldr	r2, [pc, #84]	@ (800b45c <I2C_Slave_STOPF+0x25c>)
 800b406:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2220      	movs	r2, #32
 800b412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7ff f81b 	bl	800a45a <HAL_I2C_ListenCpltCallback>
}
 800b424:	e014      	b.n	800b450 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42a:	2b22      	cmp	r3, #34	@ 0x22
 800b42c:	d002      	beq.n	800b434 <I2C_Slave_STOPF+0x234>
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2b22      	cmp	r3, #34	@ 0x22
 800b432:	d10d      	bne.n	800b450 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fe ffed 	bl	800a42a <HAL_I2C_SlaveRxCpltCallback>
}
 800b450:	bf00      	nop
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	0800bbf9 	.word	0x0800bbf9
 800b45c:	ffff0000 	.word	0xffff0000

0800b460 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b46e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b476:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b10      	cmp	r3, #16
 800b47c:	d002      	beq.n	800b484 <I2C_ITError+0x24>
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b40      	cmp	r3, #64	@ 0x40
 800b482:	d10a      	bne.n	800b49a <I2C_ITError+0x3a>
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	2b22      	cmp	r3, #34	@ 0x22
 800b488:	d107      	bne.n	800b49a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b498:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b4a0:	2b28      	cmp	r3, #40	@ 0x28
 800b4a2:	d107      	bne.n	800b4b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2228      	movs	r2, #40	@ 0x28
 800b4ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b4b2:	e015      	b.n	800b4e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4c2:	d00a      	beq.n	800b4da <I2C_ITError+0x7a>
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	2b60      	cmp	r3, #96	@ 0x60
 800b4c8:	d007      	beq.n	800b4da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2220      	movs	r2, #32
 800b4ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ee:	d162      	bne.n	800b5b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b4fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d020      	beq.n	800b550 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b512:	4a6a      	ldr	r2, [pc, #424]	@ (800b6bc <I2C_ITError+0x25c>)
 800b514:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fd fa70 	bl	8008a00 <HAL_DMA_Abort_IT>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 8089 	beq.w	800b63a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f022 0201 	bic.w	r2, r2, #1
 800b536:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2220      	movs	r2, #32
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b54a:	4610      	mov	r0, r2
 800b54c:	4798      	blx	r3
 800b54e:	e074      	b.n	800b63a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b554:	4a59      	ldr	r2, [pc, #356]	@ (800b6bc <I2C_ITError+0x25c>)
 800b556:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fd fa4f 	bl	8008a00 <HAL_DMA_Abort_IT>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d068      	beq.n	800b63a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b572:	2b40      	cmp	r3, #64	@ 0x40
 800b574:	d10b      	bne.n	800b58e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	691a      	ldr	r2, [r3, #16]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0201 	bic.w	r2, r2, #1
 800b59c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	4798      	blx	r3
 800b5b4:	e041      	b.n	800b63a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b60      	cmp	r3, #96	@ 0x60
 800b5c0:	d125      	bne.n	800b60e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5da:	2b40      	cmp	r3, #64	@ 0x40
 800b5dc:	d10b      	bne.n	800b5f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	691a      	ldr	r2, [r3, #16]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e8:	b2d2      	uxtb	r2, r2
 800b5ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 0201 	bic.w	r2, r2, #1
 800b604:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7fe ff45 	bl	800a496 <HAL_I2C_AbortCpltCallback>
 800b60c:	e015      	b.n	800b63a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b618:	2b40      	cmp	r3, #64	@ 0x40
 800b61a:	d10b      	bne.n	800b634 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	691a      	ldr	r2, [r3, #16]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7fe ff24 	bl	800a482 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b63e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10e      	bne.n	800b668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b650:	2b00      	cmp	r3, #0
 800b652:	d109      	bne.n	800b668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d104      	bne.n	800b668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b676:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b67e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d113      	bne.n	800b6b4 <I2C_ITError+0x254>
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	2b28      	cmp	r3, #40	@ 0x28
 800b690:	d110      	bne.n	800b6b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a0a      	ldr	r2, [pc, #40]	@ (800b6c0 <I2C_ITError+0x260>)
 800b696:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7fe fed3 	bl	800a45a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	0800bbf9 	.word	0x0800bbf9
 800b6c0:	ffff0000 	.word	0xffff0000

0800b6c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	817b      	strh	r3, [r7, #10]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	813b      	strh	r3, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b6ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 fb24 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00d      	beq.n	800b722 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b714:	d103      	bne.n	800b71e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b71c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e05f      	b.n	800b7e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b722:	897b      	ldrh	r3, [r7, #10]
 800b724:	b2db      	uxtb	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	6a3a      	ldr	r2, [r7, #32]
 800b736:	492d      	ldr	r1, [pc, #180]	@ (800b7ec <I2C_RequestMemoryWrite+0x128>)
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fb7f 	bl	800be3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e04c      	b.n	800b7e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b748:	2300      	movs	r3, #0
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b760:	6a39      	ldr	r1, [r7, #32]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 fc0a 	bl	800bf7c <I2C_WaitOnTXEFlagUntilTimeout>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00d      	beq.n	800b78a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b772:	2b04      	cmp	r3, #4
 800b774:	d107      	bne.n	800b786 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e02b      	b.n	800b7e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d105      	bne.n	800b79c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b790:	893b      	ldrh	r3, [r7, #8]
 800b792:	b2da      	uxtb	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	611a      	str	r2, [r3, #16]
 800b79a:	e021      	b.n	800b7e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b79c:	893b      	ldrh	r3, [r7, #8]
 800b79e:	0a1b      	lsrs	r3, r3, #8
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ac:	6a39      	ldr	r1, [r7, #32]
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 fbe4 	bl	800bf7c <I2C_WaitOnTXEFlagUntilTimeout>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00d      	beq.n	800b7d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	d107      	bne.n	800b7d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e005      	b.n	800b7e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b7d6:	893b      	ldrh	r3, [r7, #8]
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	00010002 	.word	0x00010002

0800b7f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	817b      	strh	r3, [r7, #10]
 800b802:	460b      	mov	r3, r1
 800b804:	813b      	strh	r3, [r7, #8]
 800b806:	4613      	mov	r3, r2
 800b808:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b818:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	2200      	movs	r2, #0
 800b832:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f000 fa86 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00d      	beq.n	800b85e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b84c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b850:	d103      	bne.n	800b85a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b858:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e0aa      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b85e:	897b      	ldrh	r3, [r7, #10]
 800b860:	b2db      	uxtb	r3, r3
 800b862:	461a      	mov	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b86c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	6a3a      	ldr	r2, [r7, #32]
 800b872:	4952      	ldr	r1, [pc, #328]	@ (800b9bc <I2C_RequestMemoryRead+0x1cc>)
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fae1 	bl	800be3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e097      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b89c:	6a39      	ldr	r1, [r7, #32]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f000 fb6c 	bl	800bf7c <I2C_WaitOnTXEFlagUntilTimeout>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00d      	beq.n	800b8c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	d107      	bne.n	800b8c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e076      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b8c6:	88fb      	ldrh	r3, [r7, #6]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d105      	bne.n	800b8d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b8cc:	893b      	ldrh	r3, [r7, #8]
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	611a      	str	r2, [r3, #16]
 800b8d6:	e021      	b.n	800b91c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b8d8:	893b      	ldrh	r3, [r7, #8]
 800b8da:	0a1b      	lsrs	r3, r3, #8
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	b2da      	uxtb	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8e8:	6a39      	ldr	r1, [r7, #32]
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f000 fb46 	bl	800bf7c <I2C_WaitOnTXEFlagUntilTimeout>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00d      	beq.n	800b912 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d107      	bne.n	800b90e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b90c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e050      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b912:	893b      	ldrh	r3, [r7, #8]
 800b914:	b2da      	uxtb	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b91e:	6a39      	ldr	r1, [r7, #32]
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f000 fb2b 	bl	800bf7c <I2C_WaitOnTXEFlagUntilTimeout>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00d      	beq.n	800b948 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b930:	2b04      	cmp	r3, #4
 800b932:	d107      	bne.n	800b944 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b942:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e035      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b956:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	2200      	movs	r2, #0
 800b960:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 f9ef 	bl	800bd48 <I2C_WaitOnFlagUntilTimeout>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00d      	beq.n	800b98c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b97a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b97e:	d103      	bne.n	800b988 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b986:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b988:	2303      	movs	r3, #3
 800b98a:	e013      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b98c:	897b      	ldrh	r3, [r7, #10]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f043 0301 	orr.w	r3, r3, #1
 800b994:	b2da      	uxtb	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99e:	6a3a      	ldr	r2, [r7, #32]
 800b9a0:	4906      	ldr	r1, [pc, #24]	@ (800b9bc <I2C_RequestMemoryRead+0x1cc>)
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 fa4a 	bl	800be3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	00010002 	.word	0x00010002

0800b9c0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9d4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b9dc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b9f2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba00:	2200      	movs	r2, #0
 800ba02:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba10:	2200      	movs	r2, #0
 800ba12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800ba14:	7cfb      	ldrb	r3, [r7, #19]
 800ba16:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800ba1a:	2b21      	cmp	r3, #33	@ 0x21
 800ba1c:	d007      	beq.n	800ba2e <I2C_DMAXferCplt+0x6e>
 800ba1e:	7cfb      	ldrb	r3, [r7, #19]
 800ba20:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800ba24:	2b22      	cmp	r3, #34	@ 0x22
 800ba26:	d131      	bne.n	800ba8c <I2C_DMAXferCplt+0xcc>
 800ba28:	7cbb      	ldrb	r3, [r7, #18]
 800ba2a:	2b20      	cmp	r3, #32
 800ba2c:	d12e      	bne.n	800ba8c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba3c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	2200      	movs	r2, #0
 800ba42:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ba44:	7cfb      	ldrb	r3, [r7, #19]
 800ba46:	2b29      	cmp	r3, #41	@ 0x29
 800ba48:	d10a      	bne.n	800ba60 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2221      	movs	r2, #33	@ 0x21
 800ba4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2228      	movs	r2, #40	@ 0x28
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ba58:	6978      	ldr	r0, [r7, #20]
 800ba5a:	f7fe fcdc 	bl	800a416 <HAL_I2C_SlaveTxCpltCallback>
 800ba5e:	e00c      	b.n	800ba7a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ba60:	7cfb      	ldrb	r3, [r7, #19]
 800ba62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba64:	d109      	bne.n	800ba7a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2222      	movs	r2, #34	@ 0x22
 800ba6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	2228      	movs	r2, #40	@ 0x28
 800ba70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba74:	6978      	ldr	r0, [r7, #20]
 800ba76:	f7fe fcd8 	bl	800a42a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800ba88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ba8a:	e074      	b.n	800bb76 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d06e      	beq.n	800bb76 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d107      	bne.n	800bab2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bab0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bac0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bac8:	d009      	beq.n	800bade <I2C_DMAXferCplt+0x11e>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d006      	beq.n	800bade <I2C_DMAXferCplt+0x11e>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800bad6:	d002      	beq.n	800bade <I2C_DMAXferCplt+0x11e>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b20      	cmp	r3, #32
 800badc:	d107      	bne.n	800baee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bafc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb0c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2200      	movs	r2, #0
 800bb12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800bb1c:	6978      	ldr	r0, [r7, #20]
 800bb1e:	f7fe fcb0 	bl	800a482 <HAL_I2C_ErrorCallback>
}
 800bb22:	e028      	b.n	800bb76 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b40      	cmp	r3, #64	@ 0x40
 800bb36:	d10a      	bne.n	800bb4e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2200      	movs	r2, #0
 800bb44:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800bb46:	6978      	ldr	r0, [r7, #20]
 800bb48:	f7f9 fe62 	bl	8005810 <HAL_I2C_MemRxCpltCallback>
}
 800bb4c:	e013      	b.n	800bb76 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b08      	cmp	r3, #8
 800bb5a:	d002      	beq.n	800bb62 <I2C_DMAXferCplt+0x1a2>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b20      	cmp	r3, #32
 800bb60:	d103      	bne.n	800bb6a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2200      	movs	r2, #0
 800bb66:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb68:	e002      	b.n	800bb70 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2212      	movs	r2, #18
 800bb6e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800bb70:	6978      	ldr	r0, [r7, #20]
 800bb72:	f7fe fc46 	bl	800a402 <HAL_I2C_MasterRxCpltCallback>
}
 800bb76:	bf00      	nop
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb98:	2200      	movs	r2, #0
 800bb9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba8:	2200      	movs	r2, #0
 800bbaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7fd f8e1 	bl	8008d74 <HAL_DMA_GetError>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d01b      	beq.n	800bbf0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbc6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe2:	f043 0210 	orr.w	r2, r3, #16
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7fe fc49 	bl	800a482 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bc12:	4b4b      	ldr	r3, [pc, #300]	@ (800bd40 <I2C_DMAAbort+0x148>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	08db      	lsrs	r3, r3, #3
 800bc18:	4a4a      	ldr	r2, [pc, #296]	@ (800bd44 <I2C_DMAAbort+0x14c>)
 800bc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1e:	0a1a      	lsrs	r2, r3, #8
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	00da      	lsls	r2, r3, #3
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc36:	f043 0220 	orr.w	r2, r3, #32
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800bc3e:	e00a      	b.n	800bc56 <I2C_DMAAbort+0x5e>
    }
    count--;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc54:	d0ea      	beq.n	800bc2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc62:	2200      	movs	r2, #0
 800bc64:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc72:	2200      	movs	r2, #0
 800bc74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d003      	beq.n	800bc9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc98:	2200      	movs	r2, #0
 800bc9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca8:	2200      	movs	r2, #0
 800bcaa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0201 	bic.w	r2, r2, #1
 800bcba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b60      	cmp	r3, #96	@ 0x60
 800bcc6:	d10e      	bne.n	800bce6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bcde:	6978      	ldr	r0, [r7, #20]
 800bce0:	f7fe fbd9 	bl	800a496 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bce4:	e027      	b.n	800bd36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bce6:	7cfb      	ldrb	r3, [r7, #19]
 800bce8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bcec:	2b28      	cmp	r3, #40	@ 0x28
 800bcee:	d117      	bne.n	800bd20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f042 0201 	orr.w	r2, r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2200      	movs	r2, #0
 800bd14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2228      	movs	r2, #40	@ 0x28
 800bd1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bd1e:	e007      	b.n	800bd30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2220      	movs	r2, #32
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800bd30:	6978      	ldr	r0, [r7, #20]
 800bd32:	f7fe fba6 	bl	800a482 <HAL_I2C_ErrorCallback>
}
 800bd36:	bf00      	nop
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000038 	.word	0x20000038
 800bd44:	14f8b589 	.word	0x14f8b589

0800bd48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	4613      	mov	r3, r2
 800bd56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd58:	e048      	b.n	800bdec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd60:	d044      	beq.n	800bdec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd62:	f7fb fef5 	bl	8007b50 <HAL_GetTick>
 800bd66:	4602      	mov	r2, r0
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d302      	bcc.n	800bd78 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d139      	bne.n	800bdec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d10d      	bne.n	800bd9e <I2C_WaitOnFlagUntilTimeout+0x56>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	43da      	mvns	r2, r3
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bf0c      	ite	eq
 800bd94:	2301      	moveq	r3, #1
 800bd96:	2300      	movne	r3, #0
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	e00c      	b.n	800bdb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	43da      	mvns	r2, r3
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	bf0c      	ite	eq
 800bdb0:	2301      	moveq	r3, #1
 800bdb2:	2300      	movne	r3, #0
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d116      	bne.n	800bdec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2220      	movs	r2, #32
 800bdc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd8:	f043 0220 	orr.w	r2, r3, #32
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e023      	b.n	800be34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	0c1b      	lsrs	r3, r3, #16
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d10d      	bne.n	800be12 <I2C_WaitOnFlagUntilTimeout+0xca>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	43da      	mvns	r2, r3
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4013      	ands	r3, r2
 800be02:	b29b      	uxth	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	bf0c      	ite	eq
 800be08:	2301      	moveq	r3, #1
 800be0a:	2300      	movne	r3, #0
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	e00c      	b.n	800be2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	43da      	mvns	r2, r3
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	4013      	ands	r3, r2
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	bf0c      	ite	eq
 800be24:	2301      	moveq	r3, #1
 800be26:	2300      	movne	r3, #0
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	461a      	mov	r2, r3
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d093      	beq.n	800bd5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be4a:	e071      	b.n	800bf30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be5a:	d123      	bne.n	800bea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800be74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be90:	f043 0204 	orr.w	r2, r3, #4
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e067      	b.n	800bf74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beaa:	d041      	beq.n	800bf30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beac:	f7fb fe50 	bl	8007b50 <HAL_GetTick>
 800beb0:	4602      	mov	r2, r0
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d302      	bcc.n	800bec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d136      	bne.n	800bf30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	0c1b      	lsrs	r3, r3, #16
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d10c      	bne.n	800bee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	43da      	mvns	r2, r3
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	4013      	ands	r3, r2
 800bed8:	b29b      	uxth	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	bf14      	ite	ne
 800bede:	2301      	movne	r3, #1
 800bee0:	2300      	moveq	r3, #0
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	e00b      	b.n	800befe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	43da      	mvns	r2, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	4013      	ands	r3, r2
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bf14      	ite	ne
 800bef8:	2301      	movne	r3, #1
 800befa:	2300      	moveq	r3, #0
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d016      	beq.n	800bf30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1c:	f043 0220 	orr.w	r2, r3, #32
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e021      	b.n	800bf74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	0c1b      	lsrs	r3, r3, #16
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d10c      	bne.n	800bf54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	43da      	mvns	r2, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	4013      	ands	r3, r2
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bf14      	ite	ne
 800bf4c:	2301      	movne	r3, #1
 800bf4e:	2300      	moveq	r3, #0
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	e00b      	b.n	800bf6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	43da      	mvns	r2, r3
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	4013      	ands	r3, r2
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bf14      	ite	ne
 800bf66:	2301      	movne	r3, #1
 800bf68:	2300      	moveq	r3, #0
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f47f af6d 	bne.w	800be4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf88:	e034      	b.n	800bff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 f915 	bl	800c1ba <I2C_IsAcknowledgeFailed>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e034      	b.n	800c004 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d028      	beq.n	800bff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfa2:	f7fb fdd5 	bl	8007b50 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d302      	bcc.n	800bfb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d11d      	bne.n	800bff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc2:	2b80      	cmp	r3, #128	@ 0x80
 800bfc4:	d016      	beq.n	800bff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe0:	f043 0220 	orr.w	r2, r3, #32
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e007      	b.n	800c004 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bffe:	2b80      	cmp	r3, #128	@ 0x80
 800c000:	d1c3      	bne.n	800bf8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c018:	e034      	b.n	800c084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 f8cd 	bl	800c1ba <I2C_IsAcknowledgeFailed>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e034      	b.n	800c094 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c030:	d028      	beq.n	800c084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c032:	f7fb fd8d 	bl	8007b50 <HAL_GetTick>
 800c036:	4602      	mov	r2, r0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d302      	bcc.n	800c048 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11d      	bne.n	800c084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	f003 0304 	and.w	r3, r3, #4
 800c052:	2b04      	cmp	r3, #4
 800c054:	d016      	beq.n	800c084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2220      	movs	r2, #32
 800c060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c070:	f043 0220 	orr.w	r2, r3, #32
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e007      	b.n	800c094 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	f003 0304 	and.w	r3, r3, #4
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d1c3      	bne.n	800c01a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c0a8:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	08db      	lsrs	r3, r3, #3
 800c0ae:	4a13      	ldr	r2, [pc, #76]	@ (800c0fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b4:	0a1a      	lsrs	r2, r3, #8
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d107      	bne.n	800c0da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ce:	f043 0220 	orr.w	r2, r3, #32
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e008      	b.n	800c0ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0e8:	d0e9      	beq.n	800c0be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	20000038 	.word	0x20000038
 800c0fc:	14f8b589 	.word	0x14f8b589

0800c100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c10c:	e049      	b.n	800c1a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	f003 0310 	and.w	r3, r3, #16
 800c118:	2b10      	cmp	r3, #16
 800c11a:	d119      	bne.n	800c150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f06f 0210 	mvn.w	r2, #16
 800c124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2220      	movs	r2, #32
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e030      	b.n	800c1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c150:	f7fb fcfe 	bl	8007b50 <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d302      	bcc.n	800c166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d11d      	bne.n	800c1a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c170:	2b40      	cmp	r3, #64	@ 0x40
 800c172:	d016      	beq.n	800c1a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18e:	f043 0220 	orr.w	r2, r3, #32
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e007      	b.n	800c1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ac:	2b40      	cmp	r3, #64	@ 0x40
 800c1ae:	d1ae      	bne.n	800c10e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1d0:	d11b      	bne.n	800c20a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f6:	f043 0204 	orr.w	r2, r3, #4
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	e000      	b.n	800c20c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c224:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c228:	d103      	bne.n	800c232 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c230:	e007      	b.n	800c242 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c236:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c23a:	d102      	bne.n	800c242 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2208      	movs	r2, #8
 800c240:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
	...

0800c250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	e0cc      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c264:	4b68      	ldr	r3, [pc, #416]	@ (800c408 <HAL_RCC_ClockConfig+0x1b8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 030f 	and.w	r3, r3, #15
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d90c      	bls.n	800c28c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c272:	4b65      	ldr	r3, [pc, #404]	@ (800c408 <HAL_RCC_ClockConfig+0x1b8>)
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c27a:	4b63      	ldr	r3, [pc, #396]	@ (800c408 <HAL_RCC_ClockConfig+0x1b8>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 030f 	and.w	r3, r3, #15
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	429a      	cmp	r2, r3
 800c286:	d001      	beq.n	800c28c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	e0b8      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0302 	and.w	r3, r3, #2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d020      	beq.n	800c2da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 0304 	and.w	r3, r3, #4
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d005      	beq.n	800c2b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2a4:	4b59      	ldr	r3, [pc, #356]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	4a58      	ldr	r2, [pc, #352]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c2ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d005      	beq.n	800c2c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2bc:	4b53      	ldr	r3, [pc, #332]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	4a52      	ldr	r2, [pc, #328]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c2c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2c8:	4b50      	ldr	r3, [pc, #320]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	494d      	ldr	r1, [pc, #308]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d044      	beq.n	800c370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d107      	bne.n	800c2fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2ee:	4b47      	ldr	r3, [pc, #284]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d119      	bne.n	800c32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e07f      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	2b02      	cmp	r3, #2
 800c304:	d003      	beq.n	800c30e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d107      	bne.n	800c31e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c30e:	4b3f      	ldr	r3, [pc, #252]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d109      	bne.n	800c32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e06f      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c31e:	4b3b      	ldr	r3, [pc, #236]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e067      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c32e:	4b37      	ldr	r3, [pc, #220]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f023 0203 	bic.w	r2, r3, #3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	4934      	ldr	r1, [pc, #208]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c33c:	4313      	orrs	r3, r2
 800c33e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c340:	f7fb fc06 	bl	8007b50 <HAL_GetTick>
 800c344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c346:	e00a      	b.n	800c35e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c348:	f7fb fc02 	bl	8007b50 <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c356:	4293      	cmp	r3, r2
 800c358:	d901      	bls.n	800c35e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e04f      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c35e:	4b2b      	ldr	r3, [pc, #172]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	f003 020c 	and.w	r2, r3, #12
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d1eb      	bne.n	800c348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c370:	4b25      	ldr	r3, [pc, #148]	@ (800c408 <HAL_RCC_ClockConfig+0x1b8>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d20c      	bcs.n	800c398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c37e:	4b22      	ldr	r3, [pc, #136]	@ (800c408 <HAL_RCC_ClockConfig+0x1b8>)
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	b2d2      	uxtb	r2, r2
 800c384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c386:	4b20      	ldr	r3, [pc, #128]	@ (800c408 <HAL_RCC_ClockConfig+0x1b8>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 030f 	and.w	r3, r3, #15
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d001      	beq.n	800c398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e032      	b.n	800c3fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0304 	and.w	r3, r3, #4
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3a4:	4b19      	ldr	r3, [pc, #100]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	4916      	ldr	r1, [pc, #88]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0308 	and.w	r3, r3, #8
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d009      	beq.n	800c3d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3c2:	4b12      	ldr	r3, [pc, #72]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	490e      	ldr	r1, [pc, #56]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c3d6:	f000 f855 	bl	800c484 <HAL_RCC_GetSysClockFreq>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c40c <HAL_RCC_ClockConfig+0x1bc>)
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	091b      	lsrs	r3, r3, #4
 800c3e2:	f003 030f 	and.w	r3, r3, #15
 800c3e6:	490a      	ldr	r1, [pc, #40]	@ (800c410 <HAL_RCC_ClockConfig+0x1c0>)
 800c3e8:	5ccb      	ldrb	r3, [r1, r3]
 800c3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ee:	4a09      	ldr	r2, [pc, #36]	@ (800c414 <HAL_RCC_ClockConfig+0x1c4>)
 800c3f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c3f2:	4b09      	ldr	r3, [pc, #36]	@ (800c418 <HAL_RCC_ClockConfig+0x1c8>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fb fb66 	bl	8007ac8 <HAL_InitTick>

  return HAL_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	40023c00 	.word	0x40023c00
 800c40c:	40023800 	.word	0x40023800
 800c410:	08016050 	.word	0x08016050
 800c414:	20000038 	.word	0x20000038
 800c418:	2000003c 	.word	0x2000003c

0800c41c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c41c:	b480      	push	{r7}
 800c41e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c420:	4b03      	ldr	r3, [pc, #12]	@ (800c430 <HAL_RCC_GetHCLKFreq+0x14>)
 800c422:	681b      	ldr	r3, [r3, #0]
}
 800c424:	4618      	mov	r0, r3
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	20000038 	.word	0x20000038

0800c434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c438:	f7ff fff0 	bl	800c41c <HAL_RCC_GetHCLKFreq>
 800c43c:	4602      	mov	r2, r0
 800c43e:	4b05      	ldr	r3, [pc, #20]	@ (800c454 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	0a9b      	lsrs	r3, r3, #10
 800c444:	f003 0307 	and.w	r3, r3, #7
 800c448:	4903      	ldr	r1, [pc, #12]	@ (800c458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c44a:	5ccb      	ldrb	r3, [r1, r3]
 800c44c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c450:	4618      	mov	r0, r3
 800c452:	bd80      	pop	{r7, pc}
 800c454:	40023800 	.word	0x40023800
 800c458:	08016060 	.word	0x08016060

0800c45c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c460:	f7ff ffdc 	bl	800c41c <HAL_RCC_GetHCLKFreq>
 800c464:	4602      	mov	r2, r0
 800c466:	4b05      	ldr	r3, [pc, #20]	@ (800c47c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	0b5b      	lsrs	r3, r3, #13
 800c46c:	f003 0307 	and.w	r3, r3, #7
 800c470:	4903      	ldr	r1, [pc, #12]	@ (800c480 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c472:	5ccb      	ldrb	r3, [r1, r3]
 800c474:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c478:	4618      	mov	r0, r3
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	40023800 	.word	0x40023800
 800c480:	08016060 	.word	0x08016060

0800c484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c488:	b0ae      	sub	sp, #184	@ 0xb8
 800c48a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800c492:	2300      	movs	r3, #0
 800c494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c4aa:	4bcb      	ldr	r3, [pc, #812]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f003 030c 	and.w	r3, r3, #12
 800c4b2:	2b0c      	cmp	r3, #12
 800c4b4:	f200 8206 	bhi.w	800c8c4 <HAL_RCC_GetSysClockFreq+0x440>
 800c4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4f5 	.word	0x0800c4f5
 800c4c4:	0800c8c5 	.word	0x0800c8c5
 800c4c8:	0800c8c5 	.word	0x0800c8c5
 800c4cc:	0800c8c5 	.word	0x0800c8c5
 800c4d0:	0800c4fd 	.word	0x0800c4fd
 800c4d4:	0800c8c5 	.word	0x0800c8c5
 800c4d8:	0800c8c5 	.word	0x0800c8c5
 800c4dc:	0800c8c5 	.word	0x0800c8c5
 800c4e0:	0800c505 	.word	0x0800c505
 800c4e4:	0800c8c5 	.word	0x0800c8c5
 800c4e8:	0800c8c5 	.word	0x0800c8c5
 800c4ec:	0800c8c5 	.word	0x0800c8c5
 800c4f0:	0800c6f5 	.word	0x0800c6f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c4f4:	4bb9      	ldr	r3, [pc, #740]	@ (800c7dc <HAL_RCC_GetSysClockFreq+0x358>)
 800c4f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c4fa:	e1e7      	b.n	800c8cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c4fc:	4bb8      	ldr	r3, [pc, #736]	@ (800c7e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c4fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c502:	e1e3      	b.n	800c8cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c504:	4bb4      	ldr	r3, [pc, #720]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c50c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c510:	4bb1      	ldr	r3, [pc, #708]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d071      	beq.n	800c600 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c51c:	4bae      	ldr	r3, [pc, #696]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	099b      	lsrs	r3, r3, #6
 800c522:	2200      	movs	r2, #0
 800c524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c528:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c52c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c538:	2300      	movs	r3, #0
 800c53a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c53e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c542:	4622      	mov	r2, r4
 800c544:	462b      	mov	r3, r5
 800c546:	f04f 0000 	mov.w	r0, #0
 800c54a:	f04f 0100 	mov.w	r1, #0
 800c54e:	0159      	lsls	r1, r3, #5
 800c550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c554:	0150      	lsls	r0, r2, #5
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4621      	mov	r1, r4
 800c55c:	1a51      	subs	r1, r2, r1
 800c55e:	6439      	str	r1, [r7, #64]	@ 0x40
 800c560:	4629      	mov	r1, r5
 800c562:	eb63 0301 	sbc.w	r3, r3, r1
 800c566:	647b      	str	r3, [r7, #68]	@ 0x44
 800c568:	f04f 0200 	mov.w	r2, #0
 800c56c:	f04f 0300 	mov.w	r3, #0
 800c570:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800c574:	4649      	mov	r1, r9
 800c576:	018b      	lsls	r3, r1, #6
 800c578:	4641      	mov	r1, r8
 800c57a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c57e:	4641      	mov	r1, r8
 800c580:	018a      	lsls	r2, r1, #6
 800c582:	4641      	mov	r1, r8
 800c584:	1a51      	subs	r1, r2, r1
 800c586:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c588:	4649      	mov	r1, r9
 800c58a:	eb63 0301 	sbc.w	r3, r3, r1
 800c58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	f04f 0300 	mov.w	r3, #0
 800c598:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800c59c:	4649      	mov	r1, r9
 800c59e:	00cb      	lsls	r3, r1, #3
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5a6:	4641      	mov	r1, r8
 800c5a8:	00ca      	lsls	r2, r1, #3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4622      	mov	r2, r4
 800c5b2:	189b      	adds	r3, r3, r2
 800c5b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	460a      	mov	r2, r1
 800c5ba:	eb42 0303 	adc.w	r3, r2, r3
 800c5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	024b      	lsls	r3, r1, #9
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	024a      	lsls	r2, r1, #9
 800c5da:	4610      	mov	r0, r2
 800c5dc:	4619      	mov	r1, r3
 800c5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c5ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800c5f0:	f7f4 fcc8 	bl	8000f84 <__aeabi_uldivmod>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5fe:	e067      	b.n	800c6d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c600:	4b75      	ldr	r3, [pc, #468]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	099b      	lsrs	r3, r3, #6
 800c606:	2200      	movs	r2, #0
 800c608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c60c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c610:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c61a:	2300      	movs	r3, #0
 800c61c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c61e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c622:	4622      	mov	r2, r4
 800c624:	462b      	mov	r3, r5
 800c626:	f04f 0000 	mov.w	r0, #0
 800c62a:	f04f 0100 	mov.w	r1, #0
 800c62e:	0159      	lsls	r1, r3, #5
 800c630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c634:	0150      	lsls	r0, r2, #5
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4621      	mov	r1, r4
 800c63c:	1a51      	subs	r1, r2, r1
 800c63e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c640:	4629      	mov	r1, r5
 800c642:	eb63 0301 	sbc.w	r3, r3, r1
 800c646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c648:	f04f 0200 	mov.w	r2, #0
 800c64c:	f04f 0300 	mov.w	r3, #0
 800c650:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800c654:	4649      	mov	r1, r9
 800c656:	018b      	lsls	r3, r1, #6
 800c658:	4641      	mov	r1, r8
 800c65a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c65e:	4641      	mov	r1, r8
 800c660:	018a      	lsls	r2, r1, #6
 800c662:	4641      	mov	r1, r8
 800c664:	ebb2 0a01 	subs.w	sl, r2, r1
 800c668:	4649      	mov	r1, r9
 800c66a:	eb63 0b01 	sbc.w	fp, r3, r1
 800c66e:	f04f 0200 	mov.w	r2, #0
 800c672:	f04f 0300 	mov.w	r3, #0
 800c676:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c67a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c67e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c682:	4692      	mov	sl, r2
 800c684:	469b      	mov	fp, r3
 800c686:	4623      	mov	r3, r4
 800c688:	eb1a 0303 	adds.w	r3, sl, r3
 800c68c:	623b      	str	r3, [r7, #32]
 800c68e:	462b      	mov	r3, r5
 800c690:	eb4b 0303 	adc.w	r3, fp, r3
 800c694:	627b      	str	r3, [r7, #36]	@ 0x24
 800c696:	f04f 0200 	mov.w	r2, #0
 800c69a:	f04f 0300 	mov.w	r3, #0
 800c69e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	028b      	lsls	r3, r1, #10
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	028a      	lsls	r2, r1, #10
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800c6bc:	677a      	str	r2, [r7, #116]	@ 0x74
 800c6be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c6c2:	f7f4 fc5f 	bl	8000f84 <__aeabi_uldivmod>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c6d0:	4b41      	ldr	r3, [pc, #260]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	0c1b      	lsrs	r3, r3, #16
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	3301      	adds	r3, #1
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800c6e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c6e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c6f2:	e0eb      	b.n	800c8cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c6f4:	4b38      	ldr	r3, [pc, #224]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c700:	4b35      	ldr	r3, [pc, #212]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d06b      	beq.n	800c7e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c70c:	4b32      	ldr	r3, [pc, #200]	@ (800c7d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	099b      	lsrs	r3, r3, #6
 800c712:	2200      	movs	r2, #0
 800c714:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c716:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c720:	2300      	movs	r3, #0
 800c722:	667b      	str	r3, [r7, #100]	@ 0x64
 800c724:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c728:	4622      	mov	r2, r4
 800c72a:	462b      	mov	r3, r5
 800c72c:	f04f 0000 	mov.w	r0, #0
 800c730:	f04f 0100 	mov.w	r1, #0
 800c734:	0159      	lsls	r1, r3, #5
 800c736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c73a:	0150      	lsls	r0, r2, #5
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4621      	mov	r1, r4
 800c742:	1a51      	subs	r1, r2, r1
 800c744:	61b9      	str	r1, [r7, #24]
 800c746:	4629      	mov	r1, r5
 800c748:	eb63 0301 	sbc.w	r3, r3, r1
 800c74c:	61fb      	str	r3, [r7, #28]
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c75a:	4659      	mov	r1, fp
 800c75c:	018b      	lsls	r3, r1, #6
 800c75e:	4651      	mov	r1, sl
 800c760:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c764:	4651      	mov	r1, sl
 800c766:	018a      	lsls	r2, r1, #6
 800c768:	4651      	mov	r1, sl
 800c76a:	ebb2 0801 	subs.w	r8, r2, r1
 800c76e:	4659      	mov	r1, fp
 800c770:	eb63 0901 	sbc.w	r9, r3, r1
 800c774:	f04f 0200 	mov.w	r2, #0
 800c778:	f04f 0300 	mov.w	r3, #0
 800c77c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c788:	4690      	mov	r8, r2
 800c78a:	4699      	mov	r9, r3
 800c78c:	4623      	mov	r3, r4
 800c78e:	eb18 0303 	adds.w	r3, r8, r3
 800c792:	613b      	str	r3, [r7, #16]
 800c794:	462b      	mov	r3, r5
 800c796:	eb49 0303 	adc.w	r3, r9, r3
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	f04f 0200 	mov.w	r2, #0
 800c7a0:	f04f 0300 	mov.w	r3, #0
 800c7a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	024b      	lsls	r3, r1, #9
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	024a      	lsls	r2, r1, #9
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7be:	2200      	movs	r2, #0
 800c7c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c7c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c7c8:	f7f4 fbdc 	bl	8000f84 <__aeabi_uldivmod>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7d6:	e065      	b.n	800c8a4 <HAL_RCC_GetSysClockFreq+0x420>
 800c7d8:	40023800 	.word	0x40023800
 800c7dc:	00f42400 	.word	0x00f42400
 800c7e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7e4:	4b3d      	ldr	r3, [pc, #244]	@ (800c8dc <HAL_RCC_GetSysClockFreq+0x458>)
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	099b      	lsrs	r3, r3, #6
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c7f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800c7fe:	4642      	mov	r2, r8
 800c800:	464b      	mov	r3, r9
 800c802:	f04f 0000 	mov.w	r0, #0
 800c806:	f04f 0100 	mov.w	r1, #0
 800c80a:	0159      	lsls	r1, r3, #5
 800c80c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c810:	0150      	lsls	r0, r2, #5
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4641      	mov	r1, r8
 800c818:	1a51      	subs	r1, r2, r1
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	4649      	mov	r1, r9
 800c81e:	eb63 0301 	sbc.w	r3, r3, r1
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	f04f 0200 	mov.w	r2, #0
 800c828:	f04f 0300 	mov.w	r3, #0
 800c82c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c830:	4659      	mov	r1, fp
 800c832:	018b      	lsls	r3, r1, #6
 800c834:	4651      	mov	r1, sl
 800c836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c83a:	4651      	mov	r1, sl
 800c83c:	018a      	lsls	r2, r1, #6
 800c83e:	4651      	mov	r1, sl
 800c840:	1a54      	subs	r4, r2, r1
 800c842:	4659      	mov	r1, fp
 800c844:	eb63 0501 	sbc.w	r5, r3, r1
 800c848:	f04f 0200 	mov.w	r2, #0
 800c84c:	f04f 0300 	mov.w	r3, #0
 800c850:	00eb      	lsls	r3, r5, #3
 800c852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c856:	00e2      	lsls	r2, r4, #3
 800c858:	4614      	mov	r4, r2
 800c85a:	461d      	mov	r5, r3
 800c85c:	4643      	mov	r3, r8
 800c85e:	18e3      	adds	r3, r4, r3
 800c860:	603b      	str	r3, [r7, #0]
 800c862:	464b      	mov	r3, r9
 800c864:	eb45 0303 	adc.w	r3, r5, r3
 800c868:	607b      	str	r3, [r7, #4]
 800c86a:	f04f 0200 	mov.w	r2, #0
 800c86e:	f04f 0300 	mov.w	r3, #0
 800c872:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c876:	4629      	mov	r1, r5
 800c878:	028b      	lsls	r3, r1, #10
 800c87a:	4621      	mov	r1, r4
 800c87c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c880:	4621      	mov	r1, r4
 800c882:	028a      	lsls	r2, r1, #10
 800c884:	4610      	mov	r0, r2
 800c886:	4619      	mov	r1, r3
 800c888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c88c:	2200      	movs	r2, #0
 800c88e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c890:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c892:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c896:	f7f4 fb75 	bl	8000f84 <__aeabi_uldivmod>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4613      	mov	r3, r2
 800c8a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c8a4:	4b0d      	ldr	r3, [pc, #52]	@ (800c8dc <HAL_RCC_GetSysClockFreq+0x458>)
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	0f1b      	lsrs	r3, r3, #28
 800c8aa:	f003 0307 	and.w	r3, r3, #7
 800c8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800c8b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c8c2:	e003      	b.n	800c8cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c8c4:	4b06      	ldr	r3, [pc, #24]	@ (800c8e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c8c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c8ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c8cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	37b8      	adds	r7, #184	@ 0xb8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8da:	bf00      	nop
 800c8dc:	40023800 	.word	0x40023800
 800c8e0:	00f42400 	.word	0x00f42400

0800c8e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e28d      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f000 8083 	beq.w	800ca0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c904:	4b94      	ldr	r3, [pc, #592]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f003 030c 	and.w	r3, r3, #12
 800c90c:	2b04      	cmp	r3, #4
 800c90e:	d019      	beq.n	800c944 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c910:	4b91      	ldr	r3, [pc, #580]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f003 030c 	and.w	r3, r3, #12
        || \
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d106      	bne.n	800c92a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c91c:	4b8e      	ldr	r3, [pc, #568]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c928:	d00c      	beq.n	800c944 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c92a:	4b8b      	ldr	r3, [pc, #556]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c932:	2b0c      	cmp	r3, #12
 800c934:	d112      	bne.n	800c95c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c936:	4b88      	ldr	r3, [pc, #544]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c93e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c942:	d10b      	bne.n	800c95c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c944:	4b84      	ldr	r3, [pc, #528]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d05b      	beq.n	800ca08 <HAL_RCC_OscConfig+0x124>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d157      	bne.n	800ca08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e25a      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c964:	d106      	bne.n	800c974 <HAL_RCC_OscConfig+0x90>
 800c966:	4b7c      	ldr	r3, [pc, #496]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a7b      	ldr	r2, [pc, #492]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c96c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c970:	6013      	str	r3, [r2, #0]
 800c972:	e01d      	b.n	800c9b0 <HAL_RCC_OscConfig+0xcc>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c97c:	d10c      	bne.n	800c998 <HAL_RCC_OscConfig+0xb4>
 800c97e:	4b76      	ldr	r3, [pc, #472]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a75      	ldr	r2, [pc, #468]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	4b73      	ldr	r3, [pc, #460]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a72      	ldr	r2, [pc, #456]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	e00b      	b.n	800c9b0 <HAL_RCC_OscConfig+0xcc>
 800c998:	4b6f      	ldr	r3, [pc, #444]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a6e      	ldr	r2, [pc, #440]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c99e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	4b6c      	ldr	r3, [pc, #432]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a6b      	ldr	r2, [pc, #428]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c9aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d013      	beq.n	800c9e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9b8:	f7fb f8ca 	bl	8007b50 <HAL_GetTick>
 800c9bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9be:	e008      	b.n	800c9d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9c0:	f7fb f8c6 	bl	8007b50 <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b64      	cmp	r3, #100	@ 0x64
 800c9cc:	d901      	bls.n	800c9d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e21f      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9d2:	4b61      	ldr	r3, [pc, #388]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0f0      	beq.n	800c9c0 <HAL_RCC_OscConfig+0xdc>
 800c9de:	e014      	b.n	800ca0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9e0:	f7fb f8b6 	bl	8007b50 <HAL_GetTick>
 800c9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9e6:	e008      	b.n	800c9fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9e8:	f7fb f8b2 	bl	8007b50 <HAL_GetTick>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	2b64      	cmp	r3, #100	@ 0x64
 800c9f4:	d901      	bls.n	800c9fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e20b      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9fa:	4b57      	ldr	r3, [pc, #348]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1f0      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x104>
 800ca06:	e000      	b.n	800ca0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f003 0302 	and.w	r3, r3, #2
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d06f      	beq.n	800caf6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ca16:	4b50      	ldr	r3, [pc, #320]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f003 030c 	and.w	r3, r3, #12
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d017      	beq.n	800ca52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ca22:	4b4d      	ldr	r3, [pc, #308]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 030c 	and.w	r3, r3, #12
        || \
 800ca2a:	2b08      	cmp	r3, #8
 800ca2c:	d105      	bne.n	800ca3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ca2e:	4b4a      	ldr	r3, [pc, #296]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00b      	beq.n	800ca52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca3a:	4b47      	ldr	r3, [pc, #284]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ca42:	2b0c      	cmp	r3, #12
 800ca44:	d11c      	bne.n	800ca80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca46:	4b44      	ldr	r3, [pc, #272]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d116      	bne.n	800ca80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca52:	4b41      	ldr	r3, [pc, #260]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <HAL_RCC_OscConfig+0x186>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d001      	beq.n	800ca6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e1d3      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca6a:	4b3b      	ldr	r3, [pc, #236]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	4937      	ldr	r1, [pc, #220]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca7e:	e03a      	b.n	800caf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d020      	beq.n	800caca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca88:	4b34      	ldr	r3, [pc, #208]	@ (800cb5c <HAL_RCC_OscConfig+0x278>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca8e:	f7fb f85f 	bl	8007b50 <HAL_GetTick>
 800ca92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca94:	e008      	b.n	800caa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca96:	f7fb f85b 	bl	8007b50 <HAL_GetTick>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	d901      	bls.n	800caa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e1b4      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800caa8:	4b2b      	ldr	r3, [pc, #172]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d0f0      	beq.n	800ca96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cab4:	4b28      	ldr	r3, [pc, #160]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	4925      	ldr	r1, [pc, #148]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	600b      	str	r3, [r1, #0]
 800cac8:	e015      	b.n	800caf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800caca:	4b24      	ldr	r3, [pc, #144]	@ (800cb5c <HAL_RCC_OscConfig+0x278>)
 800cacc:	2200      	movs	r2, #0
 800cace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad0:	f7fb f83e 	bl	8007b50 <HAL_GetTick>
 800cad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cad6:	e008      	b.n	800caea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cad8:	f7fb f83a 	bl	8007b50 <HAL_GetTick>
 800cadc:	4602      	mov	r2, r0
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d901      	bls.n	800caea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cae6:	2303      	movs	r3, #3
 800cae8:	e193      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800caea:	4b1b      	ldr	r3, [pc, #108]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f0      	bne.n	800cad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 0308 	and.w	r3, r3, #8
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d036      	beq.n	800cb70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d016      	beq.n	800cb38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb0a:	4b15      	ldr	r3, [pc, #84]	@ (800cb60 <HAL_RCC_OscConfig+0x27c>)
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb10:	f7fb f81e 	bl	8007b50 <HAL_GetTick>
 800cb14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb16:	e008      	b.n	800cb2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb18:	f7fb f81a 	bl	8007b50 <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d901      	bls.n	800cb2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e173      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb2a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb58 <HAL_RCC_OscConfig+0x274>)
 800cb2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb2e:	f003 0302 	and.w	r3, r3, #2
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0f0      	beq.n	800cb18 <HAL_RCC_OscConfig+0x234>
 800cb36:	e01b      	b.n	800cb70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb38:	4b09      	ldr	r3, [pc, #36]	@ (800cb60 <HAL_RCC_OscConfig+0x27c>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb3e:	f7fb f807 	bl	8007b50 <HAL_GetTick>
 800cb42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb44:	e00e      	b.n	800cb64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb46:	f7fb f803 	bl	8007b50 <HAL_GetTick>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d907      	bls.n	800cb64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e15c      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
 800cb58:	40023800 	.word	0x40023800
 800cb5c:	42470000 	.word	0x42470000
 800cb60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb64:	4b8a      	ldr	r3, [pc, #552]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cb66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1ea      	bne.n	800cb46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 8097 	beq.w	800ccac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb82:	4b83      	ldr	r3, [pc, #524]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cb84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10f      	bne.n	800cbae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60bb      	str	r3, [r7, #8]
 800cb92:	4b7f      	ldr	r3, [pc, #508]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb96:	4a7e      	ldr	r2, [pc, #504]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cb98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb9c:	6413      	str	r3, [r2, #64]	@ 0x40
 800cb9e:	4b7c      	ldr	r3, [pc, #496]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cba6:	60bb      	str	r3, [r7, #8]
 800cba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbae:	4b79      	ldr	r3, [pc, #484]	@ (800cd94 <HAL_RCC_OscConfig+0x4b0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d118      	bne.n	800cbec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cbba:	4b76      	ldr	r3, [pc, #472]	@ (800cd94 <HAL_RCC_OscConfig+0x4b0>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a75      	ldr	r2, [pc, #468]	@ (800cd94 <HAL_RCC_OscConfig+0x4b0>)
 800cbc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbc6:	f7fa ffc3 	bl	8007b50 <HAL_GetTick>
 800cbca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbcc:	e008      	b.n	800cbe0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbce:	f7fa ffbf 	bl	8007b50 <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d901      	bls.n	800cbe0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e118      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbe0:	4b6c      	ldr	r3, [pc, #432]	@ (800cd94 <HAL_RCC_OscConfig+0x4b0>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0f0      	beq.n	800cbce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d106      	bne.n	800cc02 <HAL_RCC_OscConfig+0x31e>
 800cbf4:	4b66      	ldr	r3, [pc, #408]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cbf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbf8:	4a65      	ldr	r2, [pc, #404]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cbfa:	f043 0301 	orr.w	r3, r3, #1
 800cbfe:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc00:	e01c      	b.n	800cc3c <HAL_RCC_OscConfig+0x358>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d10c      	bne.n	800cc24 <HAL_RCC_OscConfig+0x340>
 800cc0a:	4b61      	ldr	r3, [pc, #388]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc0e:	4a60      	ldr	r2, [pc, #384]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc10:	f043 0304 	orr.w	r3, r3, #4
 800cc14:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc16:	4b5e      	ldr	r3, [pc, #376]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc1a:	4a5d      	ldr	r2, [pc, #372]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc1c:	f043 0301 	orr.w	r3, r3, #1
 800cc20:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc22:	e00b      	b.n	800cc3c <HAL_RCC_OscConfig+0x358>
 800cc24:	4b5a      	ldr	r3, [pc, #360]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc28:	4a59      	ldr	r2, [pc, #356]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc2a:	f023 0301 	bic.w	r3, r3, #1
 800cc2e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc30:	4b57      	ldr	r3, [pc, #348]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc34:	4a56      	ldr	r2, [pc, #344]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc36:	f023 0304 	bic.w	r3, r3, #4
 800cc3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d015      	beq.n	800cc70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc44:	f7fa ff84 	bl	8007b50 <HAL_GetTick>
 800cc48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc4a:	e00a      	b.n	800cc62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc4c:	f7fa ff80 	bl	8007b50 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e0d7      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc62:	4b4b      	ldr	r3, [pc, #300]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0ee      	beq.n	800cc4c <HAL_RCC_OscConfig+0x368>
 800cc6e:	e014      	b.n	800cc9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc70:	f7fa ff6e 	bl	8007b50 <HAL_GetTick>
 800cc74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc76:	e00a      	b.n	800cc8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc78:	f7fa ff6a 	bl	8007b50 <HAL_GetTick>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d901      	bls.n	800cc8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e0c1      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc8e:	4b40      	ldr	r3, [pc, #256]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cc90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1ee      	bne.n	800cc78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d105      	bne.n	800ccac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cca0:	4b3b      	ldr	r3, [pc, #236]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca4:	4a3a      	ldr	r2, [pc, #232]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 80ad 	beq.w	800ce10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ccb6:	4b36      	ldr	r3, [pc, #216]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f003 030c 	and.w	r3, r3, #12
 800ccbe:	2b08      	cmp	r3, #8
 800ccc0:	d060      	beq.n	800cd84 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d145      	bne.n	800cd56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccca:	4b33      	ldr	r3, [pc, #204]	@ (800cd98 <HAL_RCC_OscConfig+0x4b4>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccd0:	f7fa ff3e 	bl	8007b50 <HAL_GetTick>
 800ccd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccd6:	e008      	b.n	800ccea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccd8:	f7fa ff3a 	bl	8007b50 <HAL_GetTick>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d901      	bls.n	800ccea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cce6:	2303      	movs	r3, #3
 800cce8:	e093      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccea:	4b29      	ldr	r3, [pc, #164]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1f0      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	69da      	ldr	r2, [r3, #28]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd04:	019b      	lsls	r3, r3, #6
 800cd06:	431a      	orrs	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0c:	085b      	lsrs	r3, r3, #1
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	041b      	lsls	r3, r3, #16
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd18:	061b      	lsls	r3, r3, #24
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd20:	071b      	lsls	r3, r3, #28
 800cd22:	491b      	ldr	r1, [pc, #108]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cd24:	4313      	orrs	r3, r2
 800cd26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cd28:	4b1b      	ldr	r3, [pc, #108]	@ (800cd98 <HAL_RCC_OscConfig+0x4b4>)
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd2e:	f7fa ff0f 	bl	8007b50 <HAL_GetTick>
 800cd32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd34:	e008      	b.n	800cd48 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd36:	f7fa ff0b 	bl	8007b50 <HAL_GetTick>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d901      	bls.n	800cd48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cd44:	2303      	movs	r3, #3
 800cd46:	e064      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd48:	4b11      	ldr	r3, [pc, #68]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d0f0      	beq.n	800cd36 <HAL_RCC_OscConfig+0x452>
 800cd54:	e05c      	b.n	800ce10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd56:	4b10      	ldr	r3, [pc, #64]	@ (800cd98 <HAL_RCC_OscConfig+0x4b4>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd5c:	f7fa fef8 	bl	8007b50 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd62:	e008      	b.n	800cd76 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd64:	f7fa fef4 	bl	8007b50 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d901      	bls.n	800cd76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e04d      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd76:	4b06      	ldr	r3, [pc, #24]	@ (800cd90 <HAL_RCC_OscConfig+0x4ac>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f0      	bne.n	800cd64 <HAL_RCC_OscConfig+0x480>
 800cd82:	e045      	b.n	800ce10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d107      	bne.n	800cd9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e040      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
 800cd90:	40023800 	.word	0x40023800
 800cd94:	40007000 	.word	0x40007000
 800cd98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cd9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ce1c <HAL_RCC_OscConfig+0x538>)
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d030      	beq.n	800ce0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d129      	bne.n	800ce0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d122      	bne.n	800ce0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cdcc:	4013      	ands	r3, r2
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cdd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d119      	bne.n	800ce0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde2:	085b      	lsrs	r3, r3, #1
 800cde4:	3b01      	subs	r3, #1
 800cde6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d10f      	bne.n	800ce0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d107      	bne.n	800ce0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d001      	beq.n	800ce10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e000      	b.n	800ce12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	40023800 	.word	0x40023800

0800ce20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e041      	b.n	800ceb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d106      	bne.n	800ce4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7fa faa0 	bl	800738c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4610      	mov	r0, r2
 800ce60:	f000 fa7e 	bl	800d360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d001      	beq.n	800ced8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	e04e      	b.n	800cf76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f042 0201 	orr.w	r2, r2, #1
 800ceee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a23      	ldr	r2, [pc, #140]	@ (800cf84 <HAL_TIM_Base_Start_IT+0xc4>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d022      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf02:	d01d      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a1f      	ldr	r2, [pc, #124]	@ (800cf88 <HAL_TIM_Base_Start_IT+0xc8>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d018      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a1e      	ldr	r2, [pc, #120]	@ (800cf8c <HAL_TIM_Base_Start_IT+0xcc>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d013      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a1c      	ldr	r2, [pc, #112]	@ (800cf90 <HAL_TIM_Base_Start_IT+0xd0>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d00e      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a1b      	ldr	r2, [pc, #108]	@ (800cf94 <HAL_TIM_Base_Start_IT+0xd4>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d009      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a19      	ldr	r2, [pc, #100]	@ (800cf98 <HAL_TIM_Base_Start_IT+0xd8>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d004      	beq.n	800cf40 <HAL_TIM_Base_Start_IT+0x80>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a18      	ldr	r2, [pc, #96]	@ (800cf9c <HAL_TIM_Base_Start_IT+0xdc>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d111      	bne.n	800cf64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f003 0307 	and.w	r3, r3, #7
 800cf4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b06      	cmp	r3, #6
 800cf50:	d010      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f042 0201 	orr.w	r2, r2, #1
 800cf60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf62:	e007      	b.n	800cf74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f042 0201 	orr.w	r2, r2, #1
 800cf72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	40010000 	.word	0x40010000
 800cf88:	40000400 	.word	0x40000400
 800cf8c:	40000800 	.word	0x40000800
 800cf90:	40000c00 	.word	0x40000c00
 800cf94:	40010400 	.word	0x40010400
 800cf98:	40014000 	.word	0x40014000
 800cf9c:	40001800 	.word	0x40001800

0800cfa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f003 0302 	and.w	r3, r3, #2
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d020      	beq.n	800d004 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d01b      	beq.n	800d004 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f06f 0202 	mvn.w	r2, #2
 800cfd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	f003 0303 	and.w	r3, r3, #3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d003      	beq.n	800cff2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f999 	bl	800d322 <HAL_TIM_IC_CaptureCallback>
 800cff0:	e005      	b.n	800cffe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f98b 	bl	800d30e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f99c 	bl	800d336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f003 0304 	and.w	r3, r3, #4
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d020      	beq.n	800d050 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b00      	cmp	r3, #0
 800d016:	d01b      	beq.n	800d050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f06f 0204 	mvn.w	r2, #4
 800d020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f973 	bl	800d322 <HAL_TIM_IC_CaptureCallback>
 800d03c:	e005      	b.n	800d04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f965 	bl	800d30e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f976 	bl	800d336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	f003 0308 	and.w	r3, r3, #8
 800d056:	2b00      	cmp	r3, #0
 800d058:	d020      	beq.n	800d09c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f003 0308 	and.w	r3, r3, #8
 800d060:	2b00      	cmp	r3, #0
 800d062:	d01b      	beq.n	800d09c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f06f 0208 	mvn.w	r2, #8
 800d06c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2204      	movs	r2, #4
 800d072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	69db      	ldr	r3, [r3, #28]
 800d07a:	f003 0303 	and.w	r3, r3, #3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f94d 	bl	800d322 <HAL_TIM_IC_CaptureCallback>
 800d088:	e005      	b.n	800d096 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f93f 	bl	800d30e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f950 	bl	800d336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	f003 0310 	and.w	r3, r3, #16
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d020      	beq.n	800d0e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f003 0310 	and.w	r3, r3, #16
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d01b      	beq.n	800d0e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f06f 0210 	mvn.w	r2, #16
 800d0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2208      	movs	r2, #8
 800d0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f927 	bl	800d322 <HAL_TIM_IC_CaptureCallback>
 800d0d4:	e005      	b.n	800d0e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f919 	bl	800d30e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f92a 	bl	800d336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00c      	beq.n	800d10c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d007      	beq.n	800d10c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f06f 0201 	mvn.w	r2, #1
 800d104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7f8 fb3e 	bl	8005788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00c      	beq.n	800d130 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fade 	bl	800d6ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00c      	beq.n	800d154 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d140:	2b00      	cmp	r3, #0
 800d142:	d007      	beq.n	800d154 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f8fb 	bl	800d34a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	f003 0320 	and.w	r3, r3, #32
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00c      	beq.n	800d178 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f003 0320 	and.w	r3, r3, #32
 800d164:	2b00      	cmp	r3, #0
 800d166:	d007      	beq.n	800d178 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f06f 0220 	mvn.w	r2, #32
 800d170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fab0 	bl	800d6d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d178:	bf00      	nop
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d194:	2b01      	cmp	r3, #1
 800d196:	d101      	bne.n	800d19c <HAL_TIM_ConfigClockSource+0x1c>
 800d198:	2302      	movs	r3, #2
 800d19a:	e0b4      	b.n	800d306 <HAL_TIM_ConfigClockSource+0x186>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d1ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d1c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1d4:	d03e      	beq.n	800d254 <HAL_TIM_ConfigClockSource+0xd4>
 800d1d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1da:	f200 8087 	bhi.w	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d1de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1e2:	f000 8086 	beq.w	800d2f2 <HAL_TIM_ConfigClockSource+0x172>
 800d1e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ea:	d87f      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d1ec:	2b70      	cmp	r3, #112	@ 0x70
 800d1ee:	d01a      	beq.n	800d226 <HAL_TIM_ConfigClockSource+0xa6>
 800d1f0:	2b70      	cmp	r3, #112	@ 0x70
 800d1f2:	d87b      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d1f4:	2b60      	cmp	r3, #96	@ 0x60
 800d1f6:	d050      	beq.n	800d29a <HAL_TIM_ConfigClockSource+0x11a>
 800d1f8:	2b60      	cmp	r3, #96	@ 0x60
 800d1fa:	d877      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d1fc:	2b50      	cmp	r3, #80	@ 0x50
 800d1fe:	d03c      	beq.n	800d27a <HAL_TIM_ConfigClockSource+0xfa>
 800d200:	2b50      	cmp	r3, #80	@ 0x50
 800d202:	d873      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d204:	2b40      	cmp	r3, #64	@ 0x40
 800d206:	d058      	beq.n	800d2ba <HAL_TIM_ConfigClockSource+0x13a>
 800d208:	2b40      	cmp	r3, #64	@ 0x40
 800d20a:	d86f      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d20c:	2b30      	cmp	r3, #48	@ 0x30
 800d20e:	d064      	beq.n	800d2da <HAL_TIM_ConfigClockSource+0x15a>
 800d210:	2b30      	cmp	r3, #48	@ 0x30
 800d212:	d86b      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d214:	2b20      	cmp	r3, #32
 800d216:	d060      	beq.n	800d2da <HAL_TIM_ConfigClockSource+0x15a>
 800d218:	2b20      	cmp	r3, #32
 800d21a:	d867      	bhi.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d05c      	beq.n	800d2da <HAL_TIM_ConfigClockSource+0x15a>
 800d220:	2b10      	cmp	r3, #16
 800d222:	d05a      	beq.n	800d2da <HAL_TIM_ConfigClockSource+0x15a>
 800d224:	e062      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d236:	f000 f9b3 	bl	800d5a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	609a      	str	r2, [r3, #8]
      break;
 800d252:	e04f      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d264:	f000 f99c 	bl	800d5a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	689a      	ldr	r2, [r3, #8]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d276:	609a      	str	r2, [r3, #8]
      break;
 800d278:	e03c      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d286:	461a      	mov	r2, r3
 800d288:	f000 f910 	bl	800d4ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2150      	movs	r1, #80	@ 0x50
 800d292:	4618      	mov	r0, r3
 800d294:	f000 f969 	bl	800d56a <TIM_ITRx_SetConfig>
      break;
 800d298:	e02c      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f000 f92f 	bl	800d50a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2160      	movs	r1, #96	@ 0x60
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 f959 	bl	800d56a <TIM_ITRx_SetConfig>
      break;
 800d2b8:	e01c      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	f000 f8f0 	bl	800d4ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2140      	movs	r1, #64	@ 0x40
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 f949 	bl	800d56a <TIM_ITRx_SetConfig>
      break;
 800d2d8:	e00c      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	f000 f940 	bl	800d56a <TIM_ITRx_SetConfig>
      break;
 800d2ea:	e003      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d2f0:	e000      	b.n	800d2f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d2f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d304:	7bfb      	ldrb	r3, [r7, #15]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d30e:	b480      	push	{r7}
 800d310:	b083      	sub	sp, #12
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d336:	b480      	push	{r7}
 800d338:	b083      	sub	sp, #12
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b083      	sub	sp, #12
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d352:	bf00      	nop
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
	...

0800d360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a43      	ldr	r2, [pc, #268]	@ (800d480 <TIM_Base_SetConfig+0x120>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d013      	beq.n	800d3a0 <TIM_Base_SetConfig+0x40>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d37e:	d00f      	beq.n	800d3a0 <TIM_Base_SetConfig+0x40>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a40      	ldr	r2, [pc, #256]	@ (800d484 <TIM_Base_SetConfig+0x124>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d00b      	beq.n	800d3a0 <TIM_Base_SetConfig+0x40>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a3f      	ldr	r2, [pc, #252]	@ (800d488 <TIM_Base_SetConfig+0x128>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d007      	beq.n	800d3a0 <TIM_Base_SetConfig+0x40>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a3e      	ldr	r2, [pc, #248]	@ (800d48c <TIM_Base_SetConfig+0x12c>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d003      	beq.n	800d3a0 <TIM_Base_SetConfig+0x40>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a3d      	ldr	r2, [pc, #244]	@ (800d490 <TIM_Base_SetConfig+0x130>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d108      	bne.n	800d3b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4a32      	ldr	r2, [pc, #200]	@ (800d480 <TIM_Base_SetConfig+0x120>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d02b      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3c0:	d027      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a2f      	ldr	r2, [pc, #188]	@ (800d484 <TIM_Base_SetConfig+0x124>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d023      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4a2e      	ldr	r2, [pc, #184]	@ (800d488 <TIM_Base_SetConfig+0x128>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d01f      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a2d      	ldr	r2, [pc, #180]	@ (800d48c <TIM_Base_SetConfig+0x12c>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d01b      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a2c      	ldr	r2, [pc, #176]	@ (800d490 <TIM_Base_SetConfig+0x130>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d017      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a2b      	ldr	r2, [pc, #172]	@ (800d494 <TIM_Base_SetConfig+0x134>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d013      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a2a      	ldr	r2, [pc, #168]	@ (800d498 <TIM_Base_SetConfig+0x138>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d00f      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a29      	ldr	r2, [pc, #164]	@ (800d49c <TIM_Base_SetConfig+0x13c>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d00b      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a28      	ldr	r2, [pc, #160]	@ (800d4a0 <TIM_Base_SetConfig+0x140>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d007      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a27      	ldr	r2, [pc, #156]	@ (800d4a4 <TIM_Base_SetConfig+0x144>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d003      	beq.n	800d412 <TIM_Base_SetConfig+0xb2>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a26      	ldr	r2, [pc, #152]	@ (800d4a8 <TIM_Base_SetConfig+0x148>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d108      	bne.n	800d424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	4313      	orrs	r3, r2
 800d422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	689a      	ldr	r2, [r3, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a0e      	ldr	r2, [pc, #56]	@ (800d480 <TIM_Base_SetConfig+0x120>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d003      	beq.n	800d452 <TIM_Base_SetConfig+0xf2>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a10      	ldr	r2, [pc, #64]	@ (800d490 <TIM_Base_SetConfig+0x130>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d103      	bne.n	800d45a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	691a      	ldr	r2, [r3, #16]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f043 0204 	orr.w	r2, r3, #4
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	601a      	str	r2, [r3, #0]
}
 800d472:	bf00      	nop
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	40010000 	.word	0x40010000
 800d484:	40000400 	.word	0x40000400
 800d488:	40000800 	.word	0x40000800
 800d48c:	40000c00 	.word	0x40000c00
 800d490:	40010400 	.word	0x40010400
 800d494:	40014000 	.word	0x40014000
 800d498:	40014400 	.word	0x40014400
 800d49c:	40014800 	.word	0x40014800
 800d4a0:	40001800 	.word	0x40001800
 800d4a4:	40001c00 	.word	0x40001c00
 800d4a8:	40002000 	.word	0x40002000

0800d4ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	f023 0201 	bic.w	r2, r3, #1
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d4d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	011b      	lsls	r3, r3, #4
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f023 030a 	bic.w	r3, r3, #10
 800d4e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	693a      	ldr	r2, [r7, #16]
 800d4f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	621a      	str	r2, [r3, #32]
}
 800d4fe:	bf00      	nop
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b087      	sub	sp, #28
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	60b9      	str	r1, [r7, #8]
 800d514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6a1b      	ldr	r3, [r3, #32]
 800d520:	f023 0210 	bic.w	r2, r3, #16
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	031b      	lsls	r3, r3, #12
 800d53a:	693a      	ldr	r2, [r7, #16]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	697a      	ldr	r2, [r7, #20]
 800d54e:	4313      	orrs	r3, r2
 800d550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	621a      	str	r2, [r3, #32]
}
 800d55e:	bf00      	nop
 800d560:	371c      	adds	r7, #28
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b085      	sub	sp, #20
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	f043 0307 	orr.w	r3, r3, #7
 800d58c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	609a      	str	r2, [r3, #8]
}
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
 800d5ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	021a      	lsls	r2, r3, #8
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	697a      	ldr	r2, [r7, #20]
 800d5d2:	609a      	str	r2, [r3, #8]
}
 800d5d4:	bf00      	nop
 800d5d6:	371c      	adds	r7, #28
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d101      	bne.n	800d5f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	e05a      	b.n	800d6ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2202      	movs	r2, #2
 800d604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d61e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	4313      	orrs	r3, r2
 800d628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a21      	ldr	r2, [pc, #132]	@ (800d6bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d022      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d644:	d01d      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a1d      	ldr	r2, [pc, #116]	@ (800d6c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d018      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a1b      	ldr	r2, [pc, #108]	@ (800d6c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d013      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a1a      	ldr	r2, [pc, #104]	@ (800d6c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d00e      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a18      	ldr	r2, [pc, #96]	@ (800d6cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d009      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a17      	ldr	r2, [pc, #92]	@ (800d6d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d004      	beq.n	800d682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a15      	ldr	r2, [pc, #84]	@ (800d6d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d10c      	bne.n	800d69c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	4313      	orrs	r3, r2
 800d692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	40010000 	.word	0x40010000
 800d6c0:	40000400 	.word	0x40000400
 800d6c4:	40000800 	.word	0x40000800
 800d6c8:	40000c00 	.word	0x40000c00
 800d6cc:	40010400 	.word	0x40010400
 800d6d0:	40014000 	.word	0x40014000
 800d6d4:	40001800 	.word	0x40001800

0800d6d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e042      	b.n	800d798 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7f9 fe56 	bl	80073d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2224      	movs	r2, #36	@ 0x24
 800d730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68da      	ldr	r2, [r3, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f001 f86f 	bl	800e828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	691a      	ldr	r2, [r3, #16]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	695a      	ldr	r2, [r3, #20]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68da      	ldr	r2, [r3, #12]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2220      	movs	r2, #32
 800d784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2220      	movs	r2, #32
 800d78c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e024      	b.n	800d7fc <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2224      	movs	r2, #36	@ 0x24
 800d7b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68da      	ldr	r2, [r3, #12]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d7c8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7f9 ff64 	bl	8007698 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08a      	sub	sp, #40	@ 0x28
 800d808:	af02      	add	r7, sp, #8
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	603b      	str	r3, [r7, #0]
 800d810:	4613      	mov	r3, r2
 800d812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d814:	2300      	movs	r3, #0
 800d816:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b20      	cmp	r3, #32
 800d822:	d175      	bne.n	800d910 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <HAL_UART_Transmit+0x2c>
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d101      	bne.n	800d834 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	e06e      	b.n	800d912 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2221      	movs	r2, #33	@ 0x21
 800d83e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d842:	f7fa f985 	bl	8007b50 <HAL_GetTick>
 800d846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	88fa      	ldrh	r2, [r7, #6]
 800d84c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	88fa      	ldrh	r2, [r7, #6]
 800d852:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d85c:	d108      	bne.n	800d870 <HAL_UART_Transmit+0x6c>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d104      	bne.n	800d870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	61bb      	str	r3, [r7, #24]
 800d86e:	e003      	b.n	800d878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d874:	2300      	movs	r3, #0
 800d876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d878:	e02e      	b.n	800d8d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2200      	movs	r2, #0
 800d882:	2180      	movs	r1, #128	@ 0x80
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 fd0e 	bl	800e2a6 <UART_WaitOnFlagUntilTimeout>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d005      	beq.n	800d89c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2220      	movs	r2, #32
 800d894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d898:	2303      	movs	r3, #3
 800d89a:	e03a      	b.n	800d912 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10b      	bne.n	800d8ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d8b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	3302      	adds	r3, #2
 800d8b6:	61bb      	str	r3, [r7, #24]
 800d8b8:	e007      	b.n	800d8ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	781a      	ldrb	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1cb      	bne.n	800d87a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	2140      	movs	r1, #64	@ 0x40
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 fcda 	bl	800e2a6 <UART_WaitOnFlagUntilTimeout>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d005      	beq.n	800d904 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2220      	movs	r2, #32
 800d8fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d900:	2303      	movs	r3, #3
 800d902:	e006      	b.n	800d912 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2220      	movs	r2, #32
 800d908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e000      	b.n	800d912 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d910:	2302      	movs	r3, #2
  }
}
 800d912:	4618      	mov	r0, r3
 800d914:	3720      	adds	r7, #32
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08c      	sub	sp, #48	@ 0x30
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	4613      	mov	r3, r2
 800d928:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b20      	cmp	r3, #32
 800d934:	d162      	bne.n	800d9fc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <HAL_UART_Transmit_DMA+0x26>
 800d93c:	88fb      	ldrh	r3, [r7, #6]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e05b      	b.n	800d9fe <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	88fa      	ldrh	r2, [r7, #6]
 800d950:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	88fa      	ldrh	r2, [r7, #6]
 800d956:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2221      	movs	r2, #33	@ 0x21
 800d962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d96a:	4a27      	ldr	r2, [pc, #156]	@ (800da08 <HAL_UART_Transmit_DMA+0xec>)
 800d96c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d972:	4a26      	ldr	r2, [pc, #152]	@ (800da0c <HAL_UART_Transmit_DMA+0xf0>)
 800d974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97a:	4a25      	ldr	r2, [pc, #148]	@ (800da10 <HAL_UART_Transmit_DMA+0xf4>)
 800d97c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d982:	2200      	movs	r2, #0
 800d984:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800d986:	f107 0308 	add.w	r3, r7, #8
 800d98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d992:	6819      	ldr	r1, [r3, #0]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	3304      	adds	r3, #4
 800d99a:	461a      	mov	r2, r3
 800d99c:	88fb      	ldrh	r3, [r7, #6]
 800d99e:	f7fa ff67 	bl	8008870 <HAL_DMA_Start_IT>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d008      	beq.n	800d9ba <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2210      	movs	r2, #16
 800d9ac:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e021      	b.n	800d9fe <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d9c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	e853 3f00 	ldrex	r3, [r3]
 800d9d2:	617b      	str	r3, [r7, #20]
   return(result);
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3314      	adds	r3, #20
 800d9e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e8:	6a39      	ldr	r1, [r7, #32]
 800d9ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9ec:	e841 2300 	strex	r3, r2, [r1]
 800d9f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e5      	bne.n	800d9c4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e000      	b.n	800d9fe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800d9fc:	2302      	movs	r3, #2
  }
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3730      	adds	r7, #48	@ 0x30
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	0800dff5 	.word	0x0800dff5
 800da0c:	0800e08f 	.word	0x0800e08f
 800da10:	0800e213 	.word	0x0800e213

0800da14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4613      	mov	r3, r2
 800da20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	2b20      	cmp	r3, #32
 800da2c:	d112      	bne.n	800da54 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <HAL_UART_Receive_DMA+0x26>
 800da34:	88fb      	ldrh	r3, [r7, #6]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e00b      	b.n	800da56 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2200      	movs	r2, #0
 800da42:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800da44:	88fb      	ldrh	r3, [r7, #6]
 800da46:	461a      	mov	r2, r3
 800da48:	68b9      	ldr	r1, [r7, #8]
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f000 fc84 	bl	800e358 <UART_Start_Receive_DMA>
 800da50:	4603      	mov	r3, r0
 800da52:	e000      	b.n	800da56 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800da54:	2302      	movs	r3, #2
  }
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b0ba      	sub	sp, #232	@ 0xe8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800da86:	2300      	movs	r3, #0
 800da88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800da8c:	2300      	movs	r3, #0
 800da8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800da92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da96:	f003 030f 	and.w	r3, r3, #15
 800da9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800da9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10f      	bne.n	800dac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800daa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daaa:	f003 0320 	and.w	r3, r3, #32
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d009      	beq.n	800dac6 <HAL_UART_IRQHandler+0x66>
 800dab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dab6:	f003 0320 	and.w	r3, r3, #32
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d003      	beq.n	800dac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 fdf4 	bl	800e6ac <UART_Receive_IT>
      return;
 800dac4:	e273      	b.n	800dfae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 80de 	beq.w	800dc8c <HAL_UART_IRQHandler+0x22c>
 800dad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dad4:	f003 0301 	and.w	r3, r3, #1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d106      	bne.n	800daea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dae0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 80d1 	beq.w	800dc8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800daea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00b      	beq.n	800db0e <HAL_UART_IRQHandler+0xae>
 800daf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dafa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d005      	beq.n	800db0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db06:	f043 0201 	orr.w	r2, r3, #1
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800db0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db12:	f003 0304 	and.w	r3, r3, #4
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00b      	beq.n	800db32 <HAL_UART_IRQHandler+0xd2>
 800db1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b00      	cmp	r3, #0
 800db24:	d005      	beq.n	800db32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db2a:	f043 0202 	orr.w	r2, r3, #2
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800db32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db36:	f003 0302 	and.w	r3, r3, #2
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <HAL_UART_IRQHandler+0xf6>
 800db3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db42:	f003 0301 	and.w	r3, r3, #1
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db4e:	f043 0204 	orr.w	r2, r3, #4
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800db56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db5a:	f003 0308 	and.w	r3, r3, #8
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d011      	beq.n	800db86 <HAL_UART_IRQHandler+0x126>
 800db62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db66:	f003 0320 	and.w	r3, r3, #32
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d105      	bne.n	800db7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800db6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d005      	beq.n	800db86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db7e:	f043 0208 	orr.w	r2, r3, #8
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 820a 	beq.w	800dfa4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800db90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d008      	beq.n	800dbae <HAL_UART_IRQHandler+0x14e>
 800db9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dba0:	f003 0320 	and.w	r3, r3, #32
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fd7f 	bl	800e6ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbb8:	2b40      	cmp	r3, #64	@ 0x40
 800dbba:	bf0c      	ite	eq
 800dbbc:	2301      	moveq	r3, #1
 800dbbe:	2300      	movne	r3, #0
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbca:	f003 0308 	and.w	r3, r3, #8
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d103      	bne.n	800dbda <HAL_UART_IRQHandler+0x17a>
 800dbd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d04f      	beq.n	800dc7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fc8a 	bl	800e4f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	695b      	ldr	r3, [r3, #20]
 800dbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbea:	2b40      	cmp	r3, #64	@ 0x40
 800dbec:	d141      	bne.n	800dc72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	3314      	adds	r3, #20
 800dbf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dbfc:	e853 3f00 	ldrex	r3, [r3]
 800dc00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dc04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3314      	adds	r3, #20
 800dc16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dc1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dc1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dc26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dc2a:	e841 2300 	strex	r3, r2, [r1]
 800dc2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dc32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1d9      	bne.n	800dbee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d013      	beq.n	800dc6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc46:	4a8a      	ldr	r2, [pc, #552]	@ (800de70 <HAL_UART_IRQHandler+0x410>)
 800dc48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fa fed6 	bl	8008a00 <HAL_DMA_Abort_IT>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d016      	beq.n	800dc88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800dc64:	4610      	mov	r0, r2
 800dc66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc68:	e00e      	b.n	800dc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9ac 	bl	800dfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc70:	e00a      	b.n	800dc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f9a8 	bl	800dfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc78:	e006      	b.n	800dc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f9a4 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800dc86:	e18d      	b.n	800dfa4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc88:	bf00      	nop
    return;
 800dc8a:	e18b      	b.n	800dfa4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	f040 8167 	bne.w	800df64 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc9a:	f003 0310 	and.w	r3, r3, #16
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f000 8160 	beq.w	800df64 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800dca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dca8:	f003 0310 	and.w	r3, r3, #16
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8159 	beq.w	800df64 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60bb      	str	r3, [r7, #8]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	60bb      	str	r3, [r7, #8]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	60bb      	str	r3, [r7, #8]
 800dcc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	695b      	ldr	r3, [r3, #20]
 800dcce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd2:	2b40      	cmp	r3, #64	@ 0x40
 800dcd4:	f040 80ce 	bne.w	800de74 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 80a9 	beq.w	800de40 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dcf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	f080 80a2 	bcs.w	800de40 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dd02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd08:	69db      	ldr	r3, [r3, #28]
 800dd0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd0e:	f000 8088 	beq.w	800de22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	330c      	adds	r3, #12
 800dd18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dd20:	e853 3f00 	ldrex	r3, [r3]
 800dd24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dd28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	330c      	adds	r3, #12
 800dd3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dd3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dd42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dd4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dd4e:	e841 2300 	strex	r3, r2, [r1]
 800dd52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dd56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1d9      	bne.n	800dd12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3314      	adds	r3, #20
 800dd64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dd68:	e853 3f00 	ldrex	r3, [r3]
 800dd6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dd6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd70:	f023 0301 	bic.w	r3, r3, #1
 800dd74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3314      	adds	r3, #20
 800dd7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dd82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dd86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dd8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dd8e:	e841 2300 	strex	r3, r2, [r1]
 800dd92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dd94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1e1      	bne.n	800dd5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3314      	adds	r3, #20
 800dda0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dda4:	e853 3f00 	ldrex	r3, [r3]
 800dda8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ddaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3314      	adds	r3, #20
 800ddba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ddbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ddc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ddc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ddc6:	e841 2300 	strex	r3, r2, [r1]
 800ddca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ddcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1e3      	bne.n	800dd9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	330c      	adds	r3, #12
 800dde6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddea:	e853 3f00 	ldrex	r3, [r3]
 800ddee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ddf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddf2:	f023 0310 	bic.w	r3, r3, #16
 800ddf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	330c      	adds	r3, #12
 800de00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800de04:	65ba      	str	r2, [r7, #88]	@ 0x58
 800de06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de0c:	e841 2300 	strex	r3, r2, [r1]
 800de10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1e3      	bne.n	800dde0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fa fd7f 	bl	8008920 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2202      	movs	r2, #2
 800de26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de30:	b29b      	uxth	r3, r3
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	b29b      	uxth	r3, r3
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f8cf 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800de3e:	e0b3      	b.n	800dfa8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800de44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de48:	429a      	cmp	r2, r3
 800de4a:	f040 80ad 	bne.w	800dfa8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de52:	69db      	ldr	r3, [r3, #28]
 800de54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de58:	f040 80a6 	bne.w	800dfa8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2202      	movs	r2, #2
 800de60:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 f8b7 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
      return;
 800de6e:	e09b      	b.n	800dfa8 <HAL_UART_IRQHandler+0x548>
 800de70:	0800e5bb 	.word	0x0800e5bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de88:	b29b      	uxth	r3, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f000 808e 	beq.w	800dfac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800de90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 8089 	beq.w	800dfac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	330c      	adds	r3, #12
 800dea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea4:	e853 3f00 	ldrex	r3, [r3]
 800dea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800deaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800deb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	330c      	adds	r3, #12
 800deba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800debe:	647a      	str	r2, [r7, #68]	@ 0x44
 800dec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dec6:	e841 2300 	strex	r3, r2, [r1]
 800deca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800decc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1e3      	bne.n	800de9a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	3314      	adds	r3, #20
 800ded8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dedc:	e853 3f00 	ldrex	r3, [r3]
 800dee0:	623b      	str	r3, [r7, #32]
   return(result);
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	f023 0301 	bic.w	r3, r3, #1
 800dee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3314      	adds	r3, #20
 800def2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800def6:	633a      	str	r2, [r7, #48]	@ 0x30
 800def8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800defc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800defe:	e841 2300 	strex	r3, r2, [r1]
 800df02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1e3      	bne.n	800ded2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2220      	movs	r2, #32
 800df0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	330c      	adds	r3, #12
 800df1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	e853 3f00 	ldrex	r3, [r3]
 800df26:	60fb      	str	r3, [r7, #12]
   return(result);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f023 0310 	bic.w	r3, r3, #16
 800df2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	330c      	adds	r3, #12
 800df38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800df3c:	61fa      	str	r2, [r7, #28]
 800df3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df40:	69b9      	ldr	r1, [r7, #24]
 800df42:	69fa      	ldr	r2, [r7, #28]
 800df44:	e841 2300 	strex	r3, r2, [r1]
 800df48:	617b      	str	r3, [r7, #20]
   return(result);
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1e3      	bne.n	800df18 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2202      	movs	r2, #2
 800df54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800df5a:	4619      	mov	r1, r3
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 f83d 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800df62:	e023      	b.n	800dfac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800df64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d009      	beq.n	800df84 <HAL_UART_IRQHandler+0x524>
 800df70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d003      	beq.n	800df84 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 fb2d 	bl	800e5dc <UART_Transmit_IT>
    return;
 800df82:	e014      	b.n	800dfae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800df84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <HAL_UART_IRQHandler+0x54e>
 800df90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d008      	beq.n	800dfae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fb6d 	bl	800e67c <UART_EndTransmit_IT>
    return;
 800dfa2:	e004      	b.n	800dfae <HAL_UART_IRQHandler+0x54e>
    return;
 800dfa4:	bf00      	nop
 800dfa6:	e002      	b.n	800dfae <HAL_UART_IRQHandler+0x54e>
      return;
 800dfa8:	bf00      	nop
 800dfaa:	e000      	b.n	800dfae <HAL_UART_IRQHandler+0x54e>
      return;
 800dfac:	bf00      	nop
  }
}
 800dfae:	37e8      	adds	r7, #232	@ 0xe8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b090      	sub	sp, #64	@ 0x40
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d137      	bne.n	800e080 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e012:	2200      	movs	r2, #0
 800e014:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3314      	adds	r3, #20
 800e01c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e020:	e853 3f00 	ldrex	r3, [r3]
 800e024:	623b      	str	r3, [r7, #32]
   return(result);
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e02c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3314      	adds	r3, #20
 800e034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e036:	633a      	str	r2, [r7, #48]	@ 0x30
 800e038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e03e:	e841 2300 	strex	r3, r2, [r1]
 800e042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1e5      	bne.n	800e016 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	330c      	adds	r3, #12
 800e050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	e853 3f00 	ldrex	r3, [r3]
 800e058:	60fb      	str	r3, [r7, #12]
   return(result);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e060:	637b      	str	r3, [r7, #52]	@ 0x34
 800e062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	330c      	adds	r3, #12
 800e068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e06a:	61fa      	str	r2, [r7, #28]
 800e06c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06e:	69b9      	ldr	r1, [r7, #24]
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	e841 2300 	strex	r3, r2, [r1]
 800e076:	617b      	str	r3, [r7, #20]
   return(result);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1e5      	bne.n	800e04a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e07e:	e002      	b.n	800e086 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e080:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e082:	f7f7 fba3 	bl	80057cc <HAL_UART_TxCpltCallback>
}
 800e086:	bf00      	nop
 800e088:	3740      	adds	r7, #64	@ 0x40
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e09a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff ff89 	bl	800dfb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0a2:	bf00      	nop
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b09c      	sub	sp, #112	@ 0x70
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d172      	bne.n	800e1ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	330c      	adds	r3, #12
 800e0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0d6:	e853 3f00 	ldrex	r3, [r3]
 800e0da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e0dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	330c      	adds	r3, #12
 800e0ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e0ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e0ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e0f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e0f4:	e841 2300 	strex	r3, r2, [r1]
 800e0f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d1e5      	bne.n	800e0cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	3314      	adds	r3, #20
 800e106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10a:	e853 3f00 	ldrex	r3, [r3]
 800e10e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e112:	f023 0301 	bic.w	r3, r3, #1
 800e116:	667b      	str	r3, [r7, #100]	@ 0x64
 800e118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3314      	adds	r3, #20
 800e11e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e120:	647a      	str	r2, [r7, #68]	@ 0x44
 800e122:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e128:	e841 2300 	strex	r3, r2, [r1]
 800e12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e5      	bne.n	800e100 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3314      	adds	r3, #20
 800e13a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13e:	e853 3f00 	ldrex	r3, [r3]
 800e142:	623b      	str	r3, [r7, #32]
   return(result);
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e14a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e14c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3314      	adds	r3, #20
 800e152:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e154:	633a      	str	r2, [r7, #48]	@ 0x30
 800e156:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e15c:	e841 2300 	strex	r3, r2, [r1]
 800e160:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1e5      	bne.n	800e134 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e16a:	2220      	movs	r2, #32
 800e16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e174:	2b01      	cmp	r3, #1
 800e176:	d119      	bne.n	800e1ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	330c      	adds	r3, #12
 800e17e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	e853 3f00 	ldrex	r3, [r3]
 800e186:	60fb      	str	r3, [r7, #12]
   return(result);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f023 0310 	bic.w	r3, r3, #16
 800e18e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	330c      	adds	r3, #12
 800e196:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e198:	61fa      	str	r2, [r7, #28]
 800e19a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19c:	69b9      	ldr	r1, [r7, #24]
 800e19e:	69fa      	ldr	r2, [r7, #28]
 800e1a0:	e841 2300 	strex	r3, r2, [r1]
 800e1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1e5      	bne.n	800e178 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d106      	bne.n	800e1c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e1c2:	f7ff ff0b 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1c6:	e002      	b.n	800e1ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e1c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e1ca:	f7f6 fabf 	bl	800474c <HAL_UART_RxCpltCallback>
}
 800e1ce:	bf00      	nop
 800e1d0:	3770      	adds	r7, #112	@ 0x70
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d108      	bne.n	800e204 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e1f6:	085b      	lsrs	r3, r3, #1
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f7ff feed 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e202:	e002      	b.n	800e20a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f7f6 fa8b 	bl	8004720 <HAL_UART_RxHalfCpltCallback>
}
 800e20a:	bf00      	nop
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e21a:	2300      	movs	r3, #0
 800e21c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e222:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e22e:	2b80      	cmp	r3, #128	@ 0x80
 800e230:	bf0c      	ite	eq
 800e232:	2301      	moveq	r3, #1
 800e234:	2300      	movne	r3, #0
 800e236:	b2db      	uxtb	r3, r3
 800e238:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b21      	cmp	r3, #33	@ 0x21
 800e244:	d108      	bne.n	800e258 <UART_DMAError+0x46>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2200      	movs	r2, #0
 800e250:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800e252:	68b8      	ldr	r0, [r7, #8]
 800e254:	f000 f926 	bl	800e4a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e262:	2b40      	cmp	r3, #64	@ 0x40
 800e264:	bf0c      	ite	eq
 800e266:	2301      	moveq	r3, #1
 800e268:	2300      	movne	r3, #0
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b22      	cmp	r3, #34	@ 0x22
 800e278:	d108      	bne.n	800e28c <UART_DMAError+0x7a>
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d005      	beq.n	800e28c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2200      	movs	r2, #0
 800e284:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800e286:	68b8      	ldr	r0, [r7, #8]
 800e288:	f000 f934 	bl	800e4f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e290:	f043 0210 	orr.w	r2, r3, #16
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e298:	68b8      	ldr	r0, [r7, #8]
 800e29a:	f7ff fe95 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b086      	sub	sp, #24
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	60f8      	str	r0, [r7, #12]
 800e2ae:	60b9      	str	r1, [r7, #8]
 800e2b0:	603b      	str	r3, [r7, #0]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2b6:	e03b      	b.n	800e330 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2be:	d037      	beq.n	800e330 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2c0:	f7f9 fc46 	bl	8007b50 <HAL_GetTick>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	6a3a      	ldr	r2, [r7, #32]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d302      	bcc.n	800e2d6 <UART_WaitOnFlagUntilTimeout+0x30>
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	e03a      	b.n	800e350 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	f003 0304 	and.w	r3, r3, #4
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d023      	beq.n	800e330 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2b80      	cmp	r3, #128	@ 0x80
 800e2ec:	d020      	beq.n	800e330 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2b40      	cmp	r3, #64	@ 0x40
 800e2f2:	d01d      	beq.n	800e330 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f003 0308 	and.w	r3, r3, #8
 800e2fe:	2b08      	cmp	r3, #8
 800e300:	d116      	bne.n	800e330 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e302:	2300      	movs	r3, #0
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	617b      	str	r3, [r7, #20]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	617b      	str	r3, [r7, #20]
 800e316:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f000 f8eb 	bl	800e4f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2208      	movs	r2, #8
 800e322:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	e00f      	b.n	800e350 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4013      	ands	r3, r2
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	bf0c      	ite	eq
 800e340:	2301      	moveq	r3, #1
 800e342:	2300      	movne	r3, #0
 800e344:	b2db      	uxtb	r3, r3
 800e346:	461a      	mov	r2, r3
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d0b4      	beq.n	800e2b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3718      	adds	r7, #24
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b098      	sub	sp, #96	@ 0x60
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	4613      	mov	r3, r2
 800e364:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	88fa      	ldrh	r2, [r7, #6]
 800e370:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2200      	movs	r2, #0
 800e376:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2222      	movs	r2, #34	@ 0x22
 800e37c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e384:	4a44      	ldr	r2, [pc, #272]	@ (800e498 <UART_Start_Receive_DMA+0x140>)
 800e386:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e38c:	4a43      	ldr	r2, [pc, #268]	@ (800e49c <UART_Start_Receive_DMA+0x144>)
 800e38e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e394:	4a42      	ldr	r2, [pc, #264]	@ (800e4a0 <UART_Start_Receive_DMA+0x148>)
 800e396:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e39c:	2200      	movs	r2, #0
 800e39e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e3a0:	f107 0308 	add.w	r3, r7, #8
 800e3a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	88fb      	ldrh	r3, [r7, #6]
 800e3b8:	f7fa fa5a 	bl	8008870 <HAL_DMA_Start_IT>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d008      	beq.n	800e3d4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2210      	movs	r2, #16
 800e3c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2220      	movs	r2, #32
 800e3cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e05d      	b.n	800e490 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	613b      	str	r3, [r7, #16]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	613b      	str	r3, [r7, #16]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	613b      	str	r3, [r7, #16]
 800e3e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d019      	beq.n	800e426 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	330c      	adds	r3, #12
 800e3f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3fc:	e853 3f00 	ldrex	r3, [r3]
 800e400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e408:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	330c      	adds	r3, #12
 800e410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e412:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e414:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e416:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1e5      	bne.n	800e3f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3314      	adds	r3, #20
 800e42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e438:	f043 0301 	orr.w	r3, r3, #1
 800e43c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3314      	adds	r3, #20
 800e444:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e446:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e448:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e44c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1e5      	bne.n	800e426 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3314      	adds	r3, #20
 800e460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	e853 3f00 	ldrex	r3, [r3]
 800e468:	617b      	str	r3, [r7, #20]
   return(result);
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e470:	653b      	str	r3, [r7, #80]	@ 0x50
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	3314      	adds	r3, #20
 800e478:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e47a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e47c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47e:	6a39      	ldr	r1, [r7, #32]
 800e480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e482:	e841 2300 	strex	r3, r2, [r1]
 800e486:	61fb      	str	r3, [r7, #28]
   return(result);
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1e5      	bne.n	800e45a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3760      	adds	r7, #96	@ 0x60
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	0800e0ab 	.word	0x0800e0ab
 800e49c:	0800e1d7 	.word	0x0800e1d7
 800e4a0:	0800e213 	.word	0x0800e213

0800e4a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b089      	sub	sp, #36	@ 0x24
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	330c      	adds	r3, #12
 800e4b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	e853 3f00 	ldrex	r3, [r3]
 800e4ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e4c2:	61fb      	str	r3, [r7, #28]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	330c      	adds	r3, #12
 800e4ca:	69fa      	ldr	r2, [r7, #28]
 800e4cc:	61ba      	str	r2, [r7, #24]
 800e4ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d0:	6979      	ldr	r1, [r7, #20]
 800e4d2:	69ba      	ldr	r2, [r7, #24]
 800e4d4:	e841 2300 	strex	r3, r2, [r1]
 800e4d8:	613b      	str	r3, [r7, #16]
   return(result);
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e5      	bne.n	800e4ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2220      	movs	r2, #32
 800e4e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800e4e8:	bf00      	nop
 800e4ea:	3724      	adds	r7, #36	@ 0x24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b095      	sub	sp, #84	@ 0x54
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	330c      	adds	r3, #12
 800e502:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e506:	e853 3f00 	ldrex	r3, [r3]
 800e50a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	330c      	adds	r3, #12
 800e51a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e51c:	643a      	str	r2, [r7, #64]	@ 0x40
 800e51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e520:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e522:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e524:	e841 2300 	strex	r3, r2, [r1]
 800e528:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e5      	bne.n	800e4fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3314      	adds	r3, #20
 800e536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e538:	6a3b      	ldr	r3, [r7, #32]
 800e53a:	e853 3f00 	ldrex	r3, [r3]
 800e53e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	f023 0301 	bic.w	r3, r3, #1
 800e546:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	3314      	adds	r3, #20
 800e54e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e558:	e841 2300 	strex	r3, r2, [r1]
 800e55c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1e5      	bne.n	800e530 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d119      	bne.n	800e5a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	330c      	adds	r3, #12
 800e572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	f023 0310 	bic.w	r3, r3, #16
 800e582:	647b      	str	r3, [r7, #68]	@ 0x44
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	330c      	adds	r3, #12
 800e58a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e58c:	61ba      	str	r2, [r7, #24]
 800e58e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e590:	6979      	ldr	r1, [r7, #20]
 800e592:	69ba      	ldr	r2, [r7, #24]
 800e594:	e841 2300 	strex	r3, r2, [r1]
 800e598:	613b      	str	r3, [r7, #16]
   return(result);
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e5      	bne.n	800e56c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2220      	movs	r2, #32
 800e5a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e5ae:	bf00      	nop
 800e5b0:	3754      	adds	r7, #84	@ 0x54
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b084      	sub	sp, #16
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7ff fcfa 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5d4:	bf00      	nop
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b21      	cmp	r3, #33	@ 0x21
 800e5ee:	d13e      	bne.n	800e66e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f8:	d114      	bne.n	800e624 <UART_Transmit_IT+0x48>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d110      	bne.n	800e624 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a1b      	ldr	r3, [r3, #32]
 800e606:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	461a      	mov	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e616:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a1b      	ldr	r3, [r3, #32]
 800e61c:	1c9a      	adds	r2, r3, #2
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	621a      	str	r2, [r3, #32]
 800e622:	e008      	b.n	800e636 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	1c59      	adds	r1, r3, #1
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	6211      	str	r1, [r2, #32]
 800e62e:	781a      	ldrb	r2, [r3, #0]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	3b01      	subs	r3, #1
 800e63e:	b29b      	uxth	r3, r3
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	4619      	mov	r1, r3
 800e644:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e646:	2b00      	cmp	r3, #0
 800e648:	d10f      	bne.n	800e66a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68da      	ldr	r2, [r3, #12]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e658:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68da      	ldr	r2, [r3, #12]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e668:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e66a:	2300      	movs	r3, #0
 800e66c:	e000      	b.n	800e670 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e66e:	2302      	movs	r3, #2
  }
}
 800e670:	4618      	mov	r0, r3
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68da      	ldr	r2, [r3, #12]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e692:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2220      	movs	r2, #32
 800e698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7f7 f895 	bl	80057cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b08c      	sub	sp, #48	@ 0x30
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b22      	cmp	r3, #34	@ 0x22
 800e6c6:	f040 80aa 	bne.w	800e81e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6d2:	d115      	bne.n	800e700 <UART_Receive_IT+0x54>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d111      	bne.n	800e700 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6f8:	1c9a      	adds	r2, r3, #2
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	629a      	str	r2, [r3, #40]	@ 0x28
 800e6fe:	e024      	b.n	800e74a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e70e:	d007      	beq.n	800e720 <UART_Receive_IT+0x74>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10a      	bne.n	800e72e <UART_Receive_IT+0x82>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	b2da      	uxtb	r2, r3
 800e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72a:	701a      	strb	r2, [r3, #0]
 800e72c:	e008      	b.n	800e740 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	b2db      	uxtb	r3, r3
 800e736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e744:	1c5a      	adds	r2, r3, #1
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e74e:	b29b      	uxth	r3, r3
 800e750:	3b01      	subs	r3, #1
 800e752:	b29b      	uxth	r3, r3
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	4619      	mov	r1, r3
 800e758:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d15d      	bne.n	800e81a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	68da      	ldr	r2, [r3, #12]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f022 0220 	bic.w	r2, r2, #32
 800e76c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68da      	ldr	r2, [r3, #12]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e77c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	695a      	ldr	r2, [r3, #20]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f022 0201 	bic.w	r2, r2, #1
 800e78c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2220      	movs	r2, #32
 800e792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d135      	bne.n	800e810 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	330c      	adds	r3, #12
 800e7b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	f023 0310 	bic.w	r3, r3, #16
 800e7c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	330c      	adds	r3, #12
 800e7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7ca:	623a      	str	r2, [r7, #32]
 800e7cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ce:	69f9      	ldr	r1, [r7, #28]
 800e7d0:	6a3a      	ldr	r2, [r7, #32]
 800e7d2:	e841 2300 	strex	r3, r2, [r1]
 800e7d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1e5      	bne.n	800e7aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f003 0310 	and.w	r3, r3, #16
 800e7e8:	2b10      	cmp	r3, #16
 800e7ea:	d10a      	bne.n	800e802 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	60fb      	str	r3, [r7, #12]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e806:	4619      	mov	r1, r3
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff fbe7 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
 800e80e:	e002      	b.n	800e816 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7f5 ff9b 	bl	800474c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	e002      	b.n	800e820 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e000      	b.n	800e820 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e81e:	2302      	movs	r3, #2
  }
}
 800e820:	4618      	mov	r0, r3
 800e822:	3730      	adds	r7, #48	@ 0x30
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e82c:	b0c0      	sub	sp, #256	@ 0x100
 800e82e:	af00      	add	r7, sp, #0
 800e830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e844:	68d9      	ldr	r1, [r3, #12]
 800e846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	ea40 0301 	orr.w	r3, r0, r1
 800e850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e856:	689a      	ldr	r2, [r3, #8]
 800e858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	431a      	orrs	r2, r3
 800e860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e864:	695b      	ldr	r3, [r3, #20]
 800e866:	431a      	orrs	r2, r3
 800e868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	4313      	orrs	r3, r2
 800e870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e880:	f021 010c 	bic.w	r1, r1, #12
 800e884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e88e:	430b      	orrs	r3, r1
 800e890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	695b      	ldr	r3, [r3, #20]
 800e89a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8a2:	6999      	ldr	r1, [r3, #24]
 800e8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	ea40 0301 	orr.w	r3, r0, r1
 800e8ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	4b8f      	ldr	r3, [pc, #572]	@ (800eaf4 <UART_SetConfig+0x2cc>)
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d005      	beq.n	800e8c8 <UART_SetConfig+0xa0>
 800e8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	4b8d      	ldr	r3, [pc, #564]	@ (800eaf8 <UART_SetConfig+0x2d0>)
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d104      	bne.n	800e8d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e8c8:	f7fd fdc8 	bl	800c45c <HAL_RCC_GetPCLK2Freq>
 800e8cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e8d0:	e003      	b.n	800e8da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e8d2:	f7fd fdaf 	bl	800c434 <HAL_RCC_GetPCLK1Freq>
 800e8d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8de:	69db      	ldr	r3, [r3, #28]
 800e8e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8e4:	f040 810c 	bne.w	800eb00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e8e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e8f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e8f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e8fa:	4622      	mov	r2, r4
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	1891      	adds	r1, r2, r2
 800e900:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e902:	415b      	adcs	r3, r3
 800e904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e90a:	4621      	mov	r1, r4
 800e90c:	eb12 0801 	adds.w	r8, r2, r1
 800e910:	4629      	mov	r1, r5
 800e912:	eb43 0901 	adc.w	r9, r3, r1
 800e916:	f04f 0200 	mov.w	r2, #0
 800e91a:	f04f 0300 	mov.w	r3, #0
 800e91e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e92a:	4690      	mov	r8, r2
 800e92c:	4699      	mov	r9, r3
 800e92e:	4623      	mov	r3, r4
 800e930:	eb18 0303 	adds.w	r3, r8, r3
 800e934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e938:	462b      	mov	r3, r5
 800e93a:	eb49 0303 	adc.w	r3, r9, r3
 800e93e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e94e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e956:	460b      	mov	r3, r1
 800e958:	18db      	adds	r3, r3, r3
 800e95a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e95c:	4613      	mov	r3, r2
 800e95e:	eb42 0303 	adc.w	r3, r2, r3
 800e962:	657b      	str	r3, [r7, #84]	@ 0x54
 800e964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e96c:	f7f2 fb0a 	bl	8000f84 <__aeabi_uldivmod>
 800e970:	4602      	mov	r2, r0
 800e972:	460b      	mov	r3, r1
 800e974:	4b61      	ldr	r3, [pc, #388]	@ (800eafc <UART_SetConfig+0x2d4>)
 800e976:	fba3 2302 	umull	r2, r3, r3, r2
 800e97a:	095b      	lsrs	r3, r3, #5
 800e97c:	011c      	lsls	r4, r3, #4
 800e97e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e982:	2200      	movs	r2, #0
 800e984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e988:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e98c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e990:	4642      	mov	r2, r8
 800e992:	464b      	mov	r3, r9
 800e994:	1891      	adds	r1, r2, r2
 800e996:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e998:	415b      	adcs	r3, r3
 800e99a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e99c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e9a0:	4641      	mov	r1, r8
 800e9a2:	eb12 0a01 	adds.w	sl, r2, r1
 800e9a6:	4649      	mov	r1, r9
 800e9a8:	eb43 0b01 	adc.w	fp, r3, r1
 800e9ac:	f04f 0200 	mov.w	r2, #0
 800e9b0:	f04f 0300 	mov.w	r3, #0
 800e9b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e9b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e9bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9c0:	4692      	mov	sl, r2
 800e9c2:	469b      	mov	fp, r3
 800e9c4:	4643      	mov	r3, r8
 800e9c6:	eb1a 0303 	adds.w	r3, sl, r3
 800e9ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e9ce:	464b      	mov	r3, r9
 800e9d0:	eb4b 0303 	adc.w	r3, fp, r3
 800e9d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e9e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e9e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	18db      	adds	r3, r3, r3
 800e9f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	eb42 0303 	adc.w	r3, r2, r3
 800e9f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e9fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ea02:	f7f2 fabf 	bl	8000f84 <__aeabi_uldivmod>
 800ea06:	4602      	mov	r2, r0
 800ea08:	460b      	mov	r3, r1
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	4b3b      	ldr	r3, [pc, #236]	@ (800eafc <UART_SetConfig+0x2d4>)
 800ea0e:	fba3 2301 	umull	r2, r3, r3, r1
 800ea12:	095b      	lsrs	r3, r3, #5
 800ea14:	2264      	movs	r2, #100	@ 0x64
 800ea16:	fb02 f303 	mul.w	r3, r2, r3
 800ea1a:	1acb      	subs	r3, r1, r3
 800ea1c:	00db      	lsls	r3, r3, #3
 800ea1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ea22:	4b36      	ldr	r3, [pc, #216]	@ (800eafc <UART_SetConfig+0x2d4>)
 800ea24:	fba3 2302 	umull	r2, r3, r3, r2
 800ea28:	095b      	lsrs	r3, r3, #5
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ea30:	441c      	add	r4, r3
 800ea32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea36:	2200      	movs	r2, #0
 800ea38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ea3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ea40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ea44:	4642      	mov	r2, r8
 800ea46:	464b      	mov	r3, r9
 800ea48:	1891      	adds	r1, r2, r2
 800ea4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ea4c:	415b      	adcs	r3, r3
 800ea4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ea54:	4641      	mov	r1, r8
 800ea56:	1851      	adds	r1, r2, r1
 800ea58:	6339      	str	r1, [r7, #48]	@ 0x30
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	414b      	adcs	r3, r1
 800ea5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea60:	f04f 0200 	mov.w	r2, #0
 800ea64:	f04f 0300 	mov.w	r3, #0
 800ea68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ea6c:	4659      	mov	r1, fp
 800ea6e:	00cb      	lsls	r3, r1, #3
 800ea70:	4651      	mov	r1, sl
 800ea72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ea76:	4651      	mov	r1, sl
 800ea78:	00ca      	lsls	r2, r1, #3
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4603      	mov	r3, r0
 800ea80:	4642      	mov	r2, r8
 800ea82:	189b      	adds	r3, r3, r2
 800ea84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ea88:	464b      	mov	r3, r9
 800ea8a:	460a      	mov	r2, r1
 800ea8c:	eb42 0303 	adc.w	r3, r2, r3
 800ea90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ea94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eaa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800eaa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	18db      	adds	r3, r3, r3
 800eaac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eaae:	4613      	mov	r3, r2
 800eab0:	eb42 0303 	adc.w	r3, r2, r3
 800eab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800eaba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800eabe:	f7f2 fa61 	bl	8000f84 <__aeabi_uldivmod>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <UART_SetConfig+0x2d4>)
 800eac8:	fba3 1302 	umull	r1, r3, r3, r2
 800eacc:	095b      	lsrs	r3, r3, #5
 800eace:	2164      	movs	r1, #100	@ 0x64
 800ead0:	fb01 f303 	mul.w	r3, r1, r3
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	00db      	lsls	r3, r3, #3
 800ead8:	3332      	adds	r3, #50	@ 0x32
 800eada:	4a08      	ldr	r2, [pc, #32]	@ (800eafc <UART_SetConfig+0x2d4>)
 800eadc:	fba2 2303 	umull	r2, r3, r2, r3
 800eae0:	095b      	lsrs	r3, r3, #5
 800eae2:	f003 0207 	and.w	r2, r3, #7
 800eae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4422      	add	r2, r4
 800eaee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800eaf0:	e106      	b.n	800ed00 <UART_SetConfig+0x4d8>
 800eaf2:	bf00      	nop
 800eaf4:	40011000 	.word	0x40011000
 800eaf8:	40011400 	.word	0x40011400
 800eafc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eb00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb04:	2200      	movs	r2, #0
 800eb06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800eb0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800eb0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800eb12:	4642      	mov	r2, r8
 800eb14:	464b      	mov	r3, r9
 800eb16:	1891      	adds	r1, r2, r2
 800eb18:	6239      	str	r1, [r7, #32]
 800eb1a:	415b      	adcs	r3, r3
 800eb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb22:	4641      	mov	r1, r8
 800eb24:	1854      	adds	r4, r2, r1
 800eb26:	4649      	mov	r1, r9
 800eb28:	eb43 0501 	adc.w	r5, r3, r1
 800eb2c:	f04f 0200 	mov.w	r2, #0
 800eb30:	f04f 0300 	mov.w	r3, #0
 800eb34:	00eb      	lsls	r3, r5, #3
 800eb36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800eb3a:	00e2      	lsls	r2, r4, #3
 800eb3c:	4614      	mov	r4, r2
 800eb3e:	461d      	mov	r5, r3
 800eb40:	4643      	mov	r3, r8
 800eb42:	18e3      	adds	r3, r4, r3
 800eb44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb48:	464b      	mov	r3, r9
 800eb4a:	eb45 0303 	adc.w	r3, r5, r3
 800eb4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eb52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eb5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800eb62:	f04f 0200 	mov.w	r2, #0
 800eb66:	f04f 0300 	mov.w	r3, #0
 800eb6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800eb6e:	4629      	mov	r1, r5
 800eb70:	008b      	lsls	r3, r1, #2
 800eb72:	4621      	mov	r1, r4
 800eb74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800eb78:	4621      	mov	r1, r4
 800eb7a:	008a      	lsls	r2, r1, #2
 800eb7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800eb80:	f7f2 fa00 	bl	8000f84 <__aeabi_uldivmod>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4b60      	ldr	r3, [pc, #384]	@ (800ed0c <UART_SetConfig+0x4e4>)
 800eb8a:	fba3 2302 	umull	r2, r3, r3, r2
 800eb8e:	095b      	lsrs	r3, r3, #5
 800eb90:	011c      	lsls	r4, r3, #4
 800eb92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eb9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800eba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800eba4:	4642      	mov	r2, r8
 800eba6:	464b      	mov	r3, r9
 800eba8:	1891      	adds	r1, r2, r2
 800ebaa:	61b9      	str	r1, [r7, #24]
 800ebac:	415b      	adcs	r3, r3
 800ebae:	61fb      	str	r3, [r7, #28]
 800ebb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ebb4:	4641      	mov	r1, r8
 800ebb6:	1851      	adds	r1, r2, r1
 800ebb8:	6139      	str	r1, [r7, #16]
 800ebba:	4649      	mov	r1, r9
 800ebbc:	414b      	adcs	r3, r1
 800ebbe:	617b      	str	r3, [r7, #20]
 800ebc0:	f04f 0200 	mov.w	r2, #0
 800ebc4:	f04f 0300 	mov.w	r3, #0
 800ebc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ebcc:	4659      	mov	r1, fp
 800ebce:	00cb      	lsls	r3, r1, #3
 800ebd0:	4651      	mov	r1, sl
 800ebd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ebd6:	4651      	mov	r1, sl
 800ebd8:	00ca      	lsls	r2, r1, #3
 800ebda:	4610      	mov	r0, r2
 800ebdc:	4619      	mov	r1, r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	189b      	adds	r3, r3, r2
 800ebe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ebe8:	464b      	mov	r3, r9
 800ebea:	460a      	mov	r2, r1
 800ebec:	eb42 0303 	adc.w	r3, r2, r3
 800ebf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ebf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ebfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ec00:	f04f 0200 	mov.w	r2, #0
 800ec04:	f04f 0300 	mov.w	r3, #0
 800ec08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	008b      	lsls	r3, r1, #2
 800ec10:	4641      	mov	r1, r8
 800ec12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ec16:	4641      	mov	r1, r8
 800ec18:	008a      	lsls	r2, r1, #2
 800ec1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ec1e:	f7f2 f9b1 	bl	8000f84 <__aeabi_uldivmod>
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	4611      	mov	r1, r2
 800ec28:	4b38      	ldr	r3, [pc, #224]	@ (800ed0c <UART_SetConfig+0x4e4>)
 800ec2a:	fba3 2301 	umull	r2, r3, r3, r1
 800ec2e:	095b      	lsrs	r3, r3, #5
 800ec30:	2264      	movs	r2, #100	@ 0x64
 800ec32:	fb02 f303 	mul.w	r3, r2, r3
 800ec36:	1acb      	subs	r3, r1, r3
 800ec38:	011b      	lsls	r3, r3, #4
 800ec3a:	3332      	adds	r3, #50	@ 0x32
 800ec3c:	4a33      	ldr	r2, [pc, #204]	@ (800ed0c <UART_SetConfig+0x4e4>)
 800ec3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ec42:	095b      	lsrs	r3, r3, #5
 800ec44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec48:	441c      	add	r4, r3
 800ec4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ec4e:	2200      	movs	r2, #0
 800ec50:	673b      	str	r3, [r7, #112]	@ 0x70
 800ec52:	677a      	str	r2, [r7, #116]	@ 0x74
 800ec54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ec58:	4642      	mov	r2, r8
 800ec5a:	464b      	mov	r3, r9
 800ec5c:	1891      	adds	r1, r2, r2
 800ec5e:	60b9      	str	r1, [r7, #8]
 800ec60:	415b      	adcs	r3, r3
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ec68:	4641      	mov	r1, r8
 800ec6a:	1851      	adds	r1, r2, r1
 800ec6c:	6039      	str	r1, [r7, #0]
 800ec6e:	4649      	mov	r1, r9
 800ec70:	414b      	adcs	r3, r1
 800ec72:	607b      	str	r3, [r7, #4]
 800ec74:	f04f 0200 	mov.w	r2, #0
 800ec78:	f04f 0300 	mov.w	r3, #0
 800ec7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ec80:	4659      	mov	r1, fp
 800ec82:	00cb      	lsls	r3, r1, #3
 800ec84:	4651      	mov	r1, sl
 800ec86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ec8a:	4651      	mov	r1, sl
 800ec8c:	00ca      	lsls	r2, r1, #3
 800ec8e:	4610      	mov	r0, r2
 800ec90:	4619      	mov	r1, r3
 800ec92:	4603      	mov	r3, r0
 800ec94:	4642      	mov	r2, r8
 800ec96:	189b      	adds	r3, r3, r2
 800ec98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec9a:	464b      	mov	r3, r9
 800ec9c:	460a      	mov	r2, r1
 800ec9e:	eb42 0303 	adc.w	r3, r2, r3
 800eca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	663b      	str	r3, [r7, #96]	@ 0x60
 800ecae:	667a      	str	r2, [r7, #100]	@ 0x64
 800ecb0:	f04f 0200 	mov.w	r2, #0
 800ecb4:	f04f 0300 	mov.w	r3, #0
 800ecb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	008b      	lsls	r3, r1, #2
 800ecc0:	4641      	mov	r1, r8
 800ecc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ecc6:	4641      	mov	r1, r8
 800ecc8:	008a      	lsls	r2, r1, #2
 800ecca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ecce:	f7f2 f959 	bl	8000f84 <__aeabi_uldivmod>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed0c <UART_SetConfig+0x4e4>)
 800ecd8:	fba3 1302 	umull	r1, r3, r3, r2
 800ecdc:	095b      	lsrs	r3, r3, #5
 800ecde:	2164      	movs	r1, #100	@ 0x64
 800ece0:	fb01 f303 	mul.w	r3, r1, r3
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	011b      	lsls	r3, r3, #4
 800ece8:	3332      	adds	r3, #50	@ 0x32
 800ecea:	4a08      	ldr	r2, [pc, #32]	@ (800ed0c <UART_SetConfig+0x4e4>)
 800ecec:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf0:	095b      	lsrs	r3, r3, #5
 800ecf2:	f003 020f 	and.w	r2, r3, #15
 800ecf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4422      	add	r2, r4
 800ecfe:	609a      	str	r2, [r3, #8]
}
 800ed00:	bf00      	nop
 800ed02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ed06:	46bd      	mov	sp, r7
 800ed08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed0c:	51eb851f 	.word	0x51eb851f

0800ed10 <calloc>:
 800ed10:	4b02      	ldr	r3, [pc, #8]	@ (800ed1c <calloc+0xc>)
 800ed12:	460a      	mov	r2, r1
 800ed14:	4601      	mov	r1, r0
 800ed16:	6818      	ldr	r0, [r3, #0]
 800ed18:	f000 b802 	b.w	800ed20 <_calloc_r>
 800ed1c:	20000050 	.word	0x20000050

0800ed20 <_calloc_r>:
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	fba1 5402 	umull	r5, r4, r1, r2
 800ed26:	b93c      	cbnz	r4, 800ed38 <_calloc_r+0x18>
 800ed28:	4629      	mov	r1, r5
 800ed2a:	f000 f82f 	bl	800ed8c <_malloc_r>
 800ed2e:	4606      	mov	r6, r0
 800ed30:	b928      	cbnz	r0, 800ed3e <_calloc_r+0x1e>
 800ed32:	2600      	movs	r6, #0
 800ed34:	4630      	mov	r0, r6
 800ed36:	bd70      	pop	{r4, r5, r6, pc}
 800ed38:	220c      	movs	r2, #12
 800ed3a:	6002      	str	r2, [r0, #0]
 800ed3c:	e7f9      	b.n	800ed32 <_calloc_r+0x12>
 800ed3e:	462a      	mov	r2, r5
 800ed40:	4621      	mov	r1, r4
 800ed42:	f001 f87c 	bl	800fe3e <memset>
 800ed46:	e7f5      	b.n	800ed34 <_calloc_r+0x14>

0800ed48 <sbrk_aligned>:
 800ed48:	b570      	push	{r4, r5, r6, lr}
 800ed4a:	4e0f      	ldr	r6, [pc, #60]	@ (800ed88 <sbrk_aligned+0x40>)
 800ed4c:	460c      	mov	r4, r1
 800ed4e:	6831      	ldr	r1, [r6, #0]
 800ed50:	4605      	mov	r5, r0
 800ed52:	b911      	cbnz	r1, 800ed5a <sbrk_aligned+0x12>
 800ed54:	f001 f8ca 	bl	800feec <_sbrk_r>
 800ed58:	6030      	str	r0, [r6, #0]
 800ed5a:	4621      	mov	r1, r4
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f001 f8c5 	bl	800feec <_sbrk_r>
 800ed62:	1c43      	adds	r3, r0, #1
 800ed64:	d103      	bne.n	800ed6e <sbrk_aligned+0x26>
 800ed66:	f04f 34ff 	mov.w	r4, #4294967295
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	bd70      	pop	{r4, r5, r6, pc}
 800ed6e:	1cc4      	adds	r4, r0, #3
 800ed70:	f024 0403 	bic.w	r4, r4, #3
 800ed74:	42a0      	cmp	r0, r4
 800ed76:	d0f8      	beq.n	800ed6a <sbrk_aligned+0x22>
 800ed78:	1a21      	subs	r1, r4, r0
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f001 f8b6 	bl	800feec <_sbrk_r>
 800ed80:	3001      	adds	r0, #1
 800ed82:	d1f2      	bne.n	800ed6a <sbrk_aligned+0x22>
 800ed84:	e7ef      	b.n	800ed66 <sbrk_aligned+0x1e>
 800ed86:	bf00      	nop
 800ed88:	200017b0 	.word	0x200017b0

0800ed8c <_malloc_r>:
 800ed8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed90:	1ccd      	adds	r5, r1, #3
 800ed92:	f025 0503 	bic.w	r5, r5, #3
 800ed96:	3508      	adds	r5, #8
 800ed98:	2d0c      	cmp	r5, #12
 800ed9a:	bf38      	it	cc
 800ed9c:	250c      	movcc	r5, #12
 800ed9e:	2d00      	cmp	r5, #0
 800eda0:	4606      	mov	r6, r0
 800eda2:	db01      	blt.n	800eda8 <_malloc_r+0x1c>
 800eda4:	42a9      	cmp	r1, r5
 800eda6:	d904      	bls.n	800edb2 <_malloc_r+0x26>
 800eda8:	230c      	movs	r3, #12
 800edaa:	6033      	str	r3, [r6, #0]
 800edac:	2000      	movs	r0, #0
 800edae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee88 <_malloc_r+0xfc>
 800edb6:	f000 f869 	bl	800ee8c <__malloc_lock>
 800edba:	f8d8 3000 	ldr.w	r3, [r8]
 800edbe:	461c      	mov	r4, r3
 800edc0:	bb44      	cbnz	r4, 800ee14 <_malloc_r+0x88>
 800edc2:	4629      	mov	r1, r5
 800edc4:	4630      	mov	r0, r6
 800edc6:	f7ff ffbf 	bl	800ed48 <sbrk_aligned>
 800edca:	1c43      	adds	r3, r0, #1
 800edcc:	4604      	mov	r4, r0
 800edce:	d158      	bne.n	800ee82 <_malloc_r+0xf6>
 800edd0:	f8d8 4000 	ldr.w	r4, [r8]
 800edd4:	4627      	mov	r7, r4
 800edd6:	2f00      	cmp	r7, #0
 800edd8:	d143      	bne.n	800ee62 <_malloc_r+0xd6>
 800edda:	2c00      	cmp	r4, #0
 800eddc:	d04b      	beq.n	800ee76 <_malloc_r+0xea>
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	4639      	mov	r1, r7
 800ede2:	4630      	mov	r0, r6
 800ede4:	eb04 0903 	add.w	r9, r4, r3
 800ede8:	f001 f880 	bl	800feec <_sbrk_r>
 800edec:	4581      	cmp	r9, r0
 800edee:	d142      	bne.n	800ee76 <_malloc_r+0xea>
 800edf0:	6821      	ldr	r1, [r4, #0]
 800edf2:	1a6d      	subs	r5, r5, r1
 800edf4:	4629      	mov	r1, r5
 800edf6:	4630      	mov	r0, r6
 800edf8:	f7ff ffa6 	bl	800ed48 <sbrk_aligned>
 800edfc:	3001      	adds	r0, #1
 800edfe:	d03a      	beq.n	800ee76 <_malloc_r+0xea>
 800ee00:	6823      	ldr	r3, [r4, #0]
 800ee02:	442b      	add	r3, r5
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	f8d8 3000 	ldr.w	r3, [r8]
 800ee0a:	685a      	ldr	r2, [r3, #4]
 800ee0c:	bb62      	cbnz	r2, 800ee68 <_malloc_r+0xdc>
 800ee0e:	f8c8 7000 	str.w	r7, [r8]
 800ee12:	e00f      	b.n	800ee34 <_malloc_r+0xa8>
 800ee14:	6822      	ldr	r2, [r4, #0]
 800ee16:	1b52      	subs	r2, r2, r5
 800ee18:	d420      	bmi.n	800ee5c <_malloc_r+0xd0>
 800ee1a:	2a0b      	cmp	r2, #11
 800ee1c:	d917      	bls.n	800ee4e <_malloc_r+0xc2>
 800ee1e:	1961      	adds	r1, r4, r5
 800ee20:	42a3      	cmp	r3, r4
 800ee22:	6025      	str	r5, [r4, #0]
 800ee24:	bf18      	it	ne
 800ee26:	6059      	strne	r1, [r3, #4]
 800ee28:	6863      	ldr	r3, [r4, #4]
 800ee2a:	bf08      	it	eq
 800ee2c:	f8c8 1000 	streq.w	r1, [r8]
 800ee30:	5162      	str	r2, [r4, r5]
 800ee32:	604b      	str	r3, [r1, #4]
 800ee34:	4630      	mov	r0, r6
 800ee36:	f000 f82f 	bl	800ee98 <__malloc_unlock>
 800ee3a:	f104 000b 	add.w	r0, r4, #11
 800ee3e:	1d23      	adds	r3, r4, #4
 800ee40:	f020 0007 	bic.w	r0, r0, #7
 800ee44:	1ac2      	subs	r2, r0, r3
 800ee46:	bf1c      	itt	ne
 800ee48:	1a1b      	subne	r3, r3, r0
 800ee4a:	50a3      	strne	r3, [r4, r2]
 800ee4c:	e7af      	b.n	800edae <_malloc_r+0x22>
 800ee4e:	6862      	ldr	r2, [r4, #4]
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	bf0c      	ite	eq
 800ee54:	f8c8 2000 	streq.w	r2, [r8]
 800ee58:	605a      	strne	r2, [r3, #4]
 800ee5a:	e7eb      	b.n	800ee34 <_malloc_r+0xa8>
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	6864      	ldr	r4, [r4, #4]
 800ee60:	e7ae      	b.n	800edc0 <_malloc_r+0x34>
 800ee62:	463c      	mov	r4, r7
 800ee64:	687f      	ldr	r7, [r7, #4]
 800ee66:	e7b6      	b.n	800edd6 <_malloc_r+0x4a>
 800ee68:	461a      	mov	r2, r3
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	42a3      	cmp	r3, r4
 800ee6e:	d1fb      	bne.n	800ee68 <_malloc_r+0xdc>
 800ee70:	2300      	movs	r3, #0
 800ee72:	6053      	str	r3, [r2, #4]
 800ee74:	e7de      	b.n	800ee34 <_malloc_r+0xa8>
 800ee76:	230c      	movs	r3, #12
 800ee78:	6033      	str	r3, [r6, #0]
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f000 f80c 	bl	800ee98 <__malloc_unlock>
 800ee80:	e794      	b.n	800edac <_malloc_r+0x20>
 800ee82:	6005      	str	r5, [r0, #0]
 800ee84:	e7d6      	b.n	800ee34 <_malloc_r+0xa8>
 800ee86:	bf00      	nop
 800ee88:	200017b4 	.word	0x200017b4

0800ee8c <__malloc_lock>:
 800ee8c:	4801      	ldr	r0, [pc, #4]	@ (800ee94 <__malloc_lock+0x8>)
 800ee8e:	f001 b87a 	b.w	800ff86 <__retarget_lock_acquire_recursive>
 800ee92:	bf00      	nop
 800ee94:	200018f8 	.word	0x200018f8

0800ee98 <__malloc_unlock>:
 800ee98:	4801      	ldr	r0, [pc, #4]	@ (800eea0 <__malloc_unlock+0x8>)
 800ee9a:	f001 b875 	b.w	800ff88 <__retarget_lock_release_recursive>
 800ee9e:	bf00      	nop
 800eea0:	200018f8 	.word	0x200018f8

0800eea4 <__cvt>:
 800eea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eea8:	ec57 6b10 	vmov	r6, r7, d0
 800eeac:	2f00      	cmp	r7, #0
 800eeae:	460c      	mov	r4, r1
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	463b      	mov	r3, r7
 800eeb4:	bfbb      	ittet	lt
 800eeb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eeba:	461f      	movlt	r7, r3
 800eebc:	2300      	movge	r3, #0
 800eebe:	232d      	movlt	r3, #45	@ 0x2d
 800eec0:	700b      	strb	r3, [r1, #0]
 800eec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eec4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eec8:	4691      	mov	r9, r2
 800eeca:	f023 0820 	bic.w	r8, r3, #32
 800eece:	bfbc      	itt	lt
 800eed0:	4632      	movlt	r2, r6
 800eed2:	4616      	movlt	r6, r2
 800eed4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eed8:	d005      	beq.n	800eee6 <__cvt+0x42>
 800eeda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eede:	d100      	bne.n	800eee2 <__cvt+0x3e>
 800eee0:	3401      	adds	r4, #1
 800eee2:	2102      	movs	r1, #2
 800eee4:	e000      	b.n	800eee8 <__cvt+0x44>
 800eee6:	2103      	movs	r1, #3
 800eee8:	ab03      	add	r3, sp, #12
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	ab02      	add	r3, sp, #8
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	ec47 6b10 	vmov	d0, r6, r7
 800eef4:	4653      	mov	r3, sl
 800eef6:	4622      	mov	r2, r4
 800eef8:	f001 f8e6 	bl	80100c8 <_dtoa_r>
 800eefc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ef00:	4605      	mov	r5, r0
 800ef02:	d119      	bne.n	800ef38 <__cvt+0x94>
 800ef04:	f019 0f01 	tst.w	r9, #1
 800ef08:	d00e      	beq.n	800ef28 <__cvt+0x84>
 800ef0a:	eb00 0904 	add.w	r9, r0, r4
 800ef0e:	2200      	movs	r2, #0
 800ef10:	2300      	movs	r3, #0
 800ef12:	4630      	mov	r0, r6
 800ef14:	4639      	mov	r1, r7
 800ef16:	f7f1 fdf7 	bl	8000b08 <__aeabi_dcmpeq>
 800ef1a:	b108      	cbz	r0, 800ef20 <__cvt+0x7c>
 800ef1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef20:	2230      	movs	r2, #48	@ 0x30
 800ef22:	9b03      	ldr	r3, [sp, #12]
 800ef24:	454b      	cmp	r3, r9
 800ef26:	d31e      	bcc.n	800ef66 <__cvt+0xc2>
 800ef28:	9b03      	ldr	r3, [sp, #12]
 800ef2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef2c:	1b5b      	subs	r3, r3, r5
 800ef2e:	4628      	mov	r0, r5
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	b004      	add	sp, #16
 800ef34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef3c:	eb00 0904 	add.w	r9, r0, r4
 800ef40:	d1e5      	bne.n	800ef0e <__cvt+0x6a>
 800ef42:	7803      	ldrb	r3, [r0, #0]
 800ef44:	2b30      	cmp	r3, #48	@ 0x30
 800ef46:	d10a      	bne.n	800ef5e <__cvt+0xba>
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	4639      	mov	r1, r7
 800ef50:	f7f1 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 800ef54:	b918      	cbnz	r0, 800ef5e <__cvt+0xba>
 800ef56:	f1c4 0401 	rsb	r4, r4, #1
 800ef5a:	f8ca 4000 	str.w	r4, [sl]
 800ef5e:	f8da 3000 	ldr.w	r3, [sl]
 800ef62:	4499      	add	r9, r3
 800ef64:	e7d3      	b.n	800ef0e <__cvt+0x6a>
 800ef66:	1c59      	adds	r1, r3, #1
 800ef68:	9103      	str	r1, [sp, #12]
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	e7d9      	b.n	800ef22 <__cvt+0x7e>

0800ef6e <__exponent>:
 800ef6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef70:	2900      	cmp	r1, #0
 800ef72:	bfba      	itte	lt
 800ef74:	4249      	neglt	r1, r1
 800ef76:	232d      	movlt	r3, #45	@ 0x2d
 800ef78:	232b      	movge	r3, #43	@ 0x2b
 800ef7a:	2909      	cmp	r1, #9
 800ef7c:	7002      	strb	r2, [r0, #0]
 800ef7e:	7043      	strb	r3, [r0, #1]
 800ef80:	dd29      	ble.n	800efd6 <__exponent+0x68>
 800ef82:	f10d 0307 	add.w	r3, sp, #7
 800ef86:	461d      	mov	r5, r3
 800ef88:	270a      	movs	r7, #10
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef90:	fb07 1416 	mls	r4, r7, r6, r1
 800ef94:	3430      	adds	r4, #48	@ 0x30
 800ef96:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	2c63      	cmp	r4, #99	@ 0x63
 800ef9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800efa2:	4631      	mov	r1, r6
 800efa4:	dcf1      	bgt.n	800ef8a <__exponent+0x1c>
 800efa6:	3130      	adds	r1, #48	@ 0x30
 800efa8:	1e94      	subs	r4, r2, #2
 800efaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800efae:	1c41      	adds	r1, r0, #1
 800efb0:	4623      	mov	r3, r4
 800efb2:	42ab      	cmp	r3, r5
 800efb4:	d30a      	bcc.n	800efcc <__exponent+0x5e>
 800efb6:	f10d 0309 	add.w	r3, sp, #9
 800efba:	1a9b      	subs	r3, r3, r2
 800efbc:	42ac      	cmp	r4, r5
 800efbe:	bf88      	it	hi
 800efc0:	2300      	movhi	r3, #0
 800efc2:	3302      	adds	r3, #2
 800efc4:	4403      	add	r3, r0
 800efc6:	1a18      	subs	r0, r3, r0
 800efc8:	b003      	add	sp, #12
 800efca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efcc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800efd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800efd4:	e7ed      	b.n	800efb2 <__exponent+0x44>
 800efd6:	2330      	movs	r3, #48	@ 0x30
 800efd8:	3130      	adds	r1, #48	@ 0x30
 800efda:	7083      	strb	r3, [r0, #2]
 800efdc:	70c1      	strb	r1, [r0, #3]
 800efde:	1d03      	adds	r3, r0, #4
 800efe0:	e7f1      	b.n	800efc6 <__exponent+0x58>
	...

0800efe4 <_printf_float>:
 800efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	b08d      	sub	sp, #52	@ 0x34
 800efea:	460c      	mov	r4, r1
 800efec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eff0:	4616      	mov	r6, r2
 800eff2:	461f      	mov	r7, r3
 800eff4:	4605      	mov	r5, r0
 800eff6:	f000 ff41 	bl	800fe7c <_localeconv_r>
 800effa:	6803      	ldr	r3, [r0, #0]
 800effc:	9304      	str	r3, [sp, #16]
 800effe:	4618      	mov	r0, r3
 800f000:	f7f1 f956 	bl	80002b0 <strlen>
 800f004:	2300      	movs	r3, #0
 800f006:	930a      	str	r3, [sp, #40]	@ 0x28
 800f008:	f8d8 3000 	ldr.w	r3, [r8]
 800f00c:	9005      	str	r0, [sp, #20]
 800f00e:	3307      	adds	r3, #7
 800f010:	f023 0307 	bic.w	r3, r3, #7
 800f014:	f103 0208 	add.w	r2, r3, #8
 800f018:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f01c:	f8d4 b000 	ldr.w	fp, [r4]
 800f020:	f8c8 2000 	str.w	r2, [r8]
 800f024:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f028:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f02c:	9307      	str	r3, [sp, #28]
 800f02e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f032:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f03a:	4b9c      	ldr	r3, [pc, #624]	@ (800f2ac <_printf_float+0x2c8>)
 800f03c:	f04f 32ff 	mov.w	r2, #4294967295
 800f040:	f7f1 fd94 	bl	8000b6c <__aeabi_dcmpun>
 800f044:	bb70      	cbnz	r0, 800f0a4 <_printf_float+0xc0>
 800f046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f04a:	4b98      	ldr	r3, [pc, #608]	@ (800f2ac <_printf_float+0x2c8>)
 800f04c:	f04f 32ff 	mov.w	r2, #4294967295
 800f050:	f7f1 fd6e 	bl	8000b30 <__aeabi_dcmple>
 800f054:	bb30      	cbnz	r0, 800f0a4 <_printf_float+0xc0>
 800f056:	2200      	movs	r2, #0
 800f058:	2300      	movs	r3, #0
 800f05a:	4640      	mov	r0, r8
 800f05c:	4649      	mov	r1, r9
 800f05e:	f7f1 fd5d 	bl	8000b1c <__aeabi_dcmplt>
 800f062:	b110      	cbz	r0, 800f06a <_printf_float+0x86>
 800f064:	232d      	movs	r3, #45	@ 0x2d
 800f066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f06a:	4a91      	ldr	r2, [pc, #580]	@ (800f2b0 <_printf_float+0x2cc>)
 800f06c:	4b91      	ldr	r3, [pc, #580]	@ (800f2b4 <_printf_float+0x2d0>)
 800f06e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f072:	bf94      	ite	ls
 800f074:	4690      	movls	r8, r2
 800f076:	4698      	movhi	r8, r3
 800f078:	2303      	movs	r3, #3
 800f07a:	6123      	str	r3, [r4, #16]
 800f07c:	f02b 0304 	bic.w	r3, fp, #4
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	f04f 0900 	mov.w	r9, #0
 800f086:	9700      	str	r7, [sp, #0]
 800f088:	4633      	mov	r3, r6
 800f08a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f08c:	4621      	mov	r1, r4
 800f08e:	4628      	mov	r0, r5
 800f090:	f000 f9d2 	bl	800f438 <_printf_common>
 800f094:	3001      	adds	r0, #1
 800f096:	f040 808d 	bne.w	800f1b4 <_printf_float+0x1d0>
 800f09a:	f04f 30ff 	mov.w	r0, #4294967295
 800f09e:	b00d      	add	sp, #52	@ 0x34
 800f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a4:	4642      	mov	r2, r8
 800f0a6:	464b      	mov	r3, r9
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	4649      	mov	r1, r9
 800f0ac:	f7f1 fd5e 	bl	8000b6c <__aeabi_dcmpun>
 800f0b0:	b140      	cbz	r0, 800f0c4 <_printf_float+0xe0>
 800f0b2:	464b      	mov	r3, r9
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	bfbc      	itt	lt
 800f0b8:	232d      	movlt	r3, #45	@ 0x2d
 800f0ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f0be:	4a7e      	ldr	r2, [pc, #504]	@ (800f2b8 <_printf_float+0x2d4>)
 800f0c0:	4b7e      	ldr	r3, [pc, #504]	@ (800f2bc <_printf_float+0x2d8>)
 800f0c2:	e7d4      	b.n	800f06e <_printf_float+0x8a>
 800f0c4:	6863      	ldr	r3, [r4, #4]
 800f0c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f0ca:	9206      	str	r2, [sp, #24]
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	d13b      	bne.n	800f148 <_printf_float+0x164>
 800f0d0:	2306      	movs	r3, #6
 800f0d2:	6063      	str	r3, [r4, #4]
 800f0d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f0d8:	2300      	movs	r3, #0
 800f0da:	6022      	str	r2, [r4, #0]
 800f0dc:	9303      	str	r3, [sp, #12]
 800f0de:	ab0a      	add	r3, sp, #40	@ 0x28
 800f0e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f0e4:	ab09      	add	r3, sp, #36	@ 0x24
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	ec49 8b10 	vmov	d0, r8, r9
 800f0ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f7ff fed6 	bl	800eea4 <__cvt>
 800f0f8:	9b06      	ldr	r3, [sp, #24]
 800f0fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0fc:	2b47      	cmp	r3, #71	@ 0x47
 800f0fe:	4680      	mov	r8, r0
 800f100:	d129      	bne.n	800f156 <_printf_float+0x172>
 800f102:	1cc8      	adds	r0, r1, #3
 800f104:	db02      	blt.n	800f10c <_printf_float+0x128>
 800f106:	6863      	ldr	r3, [r4, #4]
 800f108:	4299      	cmp	r1, r3
 800f10a:	dd41      	ble.n	800f190 <_printf_float+0x1ac>
 800f10c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f110:	fa5f fa8a 	uxtb.w	sl, sl
 800f114:	3901      	subs	r1, #1
 800f116:	4652      	mov	r2, sl
 800f118:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f11c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f11e:	f7ff ff26 	bl	800ef6e <__exponent>
 800f122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f124:	1813      	adds	r3, r2, r0
 800f126:	2a01      	cmp	r2, #1
 800f128:	4681      	mov	r9, r0
 800f12a:	6123      	str	r3, [r4, #16]
 800f12c:	dc02      	bgt.n	800f134 <_printf_float+0x150>
 800f12e:	6822      	ldr	r2, [r4, #0]
 800f130:	07d2      	lsls	r2, r2, #31
 800f132:	d501      	bpl.n	800f138 <_printf_float+0x154>
 800f134:	3301      	adds	r3, #1
 800f136:	6123      	str	r3, [r4, #16]
 800f138:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d0a2      	beq.n	800f086 <_printf_float+0xa2>
 800f140:	232d      	movs	r3, #45	@ 0x2d
 800f142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f146:	e79e      	b.n	800f086 <_printf_float+0xa2>
 800f148:	9a06      	ldr	r2, [sp, #24]
 800f14a:	2a47      	cmp	r2, #71	@ 0x47
 800f14c:	d1c2      	bne.n	800f0d4 <_printf_float+0xf0>
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1c0      	bne.n	800f0d4 <_printf_float+0xf0>
 800f152:	2301      	movs	r3, #1
 800f154:	e7bd      	b.n	800f0d2 <_printf_float+0xee>
 800f156:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f15a:	d9db      	bls.n	800f114 <_printf_float+0x130>
 800f15c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f160:	d118      	bne.n	800f194 <_printf_float+0x1b0>
 800f162:	2900      	cmp	r1, #0
 800f164:	6863      	ldr	r3, [r4, #4]
 800f166:	dd0b      	ble.n	800f180 <_printf_float+0x19c>
 800f168:	6121      	str	r1, [r4, #16]
 800f16a:	b913      	cbnz	r3, 800f172 <_printf_float+0x18e>
 800f16c:	6822      	ldr	r2, [r4, #0]
 800f16e:	07d0      	lsls	r0, r2, #31
 800f170:	d502      	bpl.n	800f178 <_printf_float+0x194>
 800f172:	3301      	adds	r3, #1
 800f174:	440b      	add	r3, r1
 800f176:	6123      	str	r3, [r4, #16]
 800f178:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f17a:	f04f 0900 	mov.w	r9, #0
 800f17e:	e7db      	b.n	800f138 <_printf_float+0x154>
 800f180:	b913      	cbnz	r3, 800f188 <_printf_float+0x1a4>
 800f182:	6822      	ldr	r2, [r4, #0]
 800f184:	07d2      	lsls	r2, r2, #31
 800f186:	d501      	bpl.n	800f18c <_printf_float+0x1a8>
 800f188:	3302      	adds	r3, #2
 800f18a:	e7f4      	b.n	800f176 <_printf_float+0x192>
 800f18c:	2301      	movs	r3, #1
 800f18e:	e7f2      	b.n	800f176 <_printf_float+0x192>
 800f190:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f196:	4299      	cmp	r1, r3
 800f198:	db05      	blt.n	800f1a6 <_printf_float+0x1c2>
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	6121      	str	r1, [r4, #16]
 800f19e:	07d8      	lsls	r0, r3, #31
 800f1a0:	d5ea      	bpl.n	800f178 <_printf_float+0x194>
 800f1a2:	1c4b      	adds	r3, r1, #1
 800f1a4:	e7e7      	b.n	800f176 <_printf_float+0x192>
 800f1a6:	2900      	cmp	r1, #0
 800f1a8:	bfd4      	ite	le
 800f1aa:	f1c1 0202 	rsble	r2, r1, #2
 800f1ae:	2201      	movgt	r2, #1
 800f1b0:	4413      	add	r3, r2
 800f1b2:	e7e0      	b.n	800f176 <_printf_float+0x192>
 800f1b4:	6823      	ldr	r3, [r4, #0]
 800f1b6:	055a      	lsls	r2, r3, #21
 800f1b8:	d407      	bmi.n	800f1ca <_printf_float+0x1e6>
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	4642      	mov	r2, r8
 800f1be:	4631      	mov	r1, r6
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	47b8      	blx	r7
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	d12b      	bne.n	800f220 <_printf_float+0x23c>
 800f1c8:	e767      	b.n	800f09a <_printf_float+0xb6>
 800f1ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f1ce:	f240 80dd 	bls.w	800f38c <_printf_float+0x3a8>
 800f1d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f7f1 fc95 	bl	8000b08 <__aeabi_dcmpeq>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d033      	beq.n	800f24a <_printf_float+0x266>
 800f1e2:	4a37      	ldr	r2, [pc, #220]	@ (800f2c0 <_printf_float+0x2dc>)
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	4631      	mov	r1, r6
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	47b8      	blx	r7
 800f1ec:	3001      	adds	r0, #1
 800f1ee:	f43f af54 	beq.w	800f09a <_printf_float+0xb6>
 800f1f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f1f6:	4543      	cmp	r3, r8
 800f1f8:	db02      	blt.n	800f200 <_printf_float+0x21c>
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	07d8      	lsls	r0, r3, #31
 800f1fe:	d50f      	bpl.n	800f220 <_printf_float+0x23c>
 800f200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f204:	4631      	mov	r1, r6
 800f206:	4628      	mov	r0, r5
 800f208:	47b8      	blx	r7
 800f20a:	3001      	adds	r0, #1
 800f20c:	f43f af45 	beq.w	800f09a <_printf_float+0xb6>
 800f210:	f04f 0900 	mov.w	r9, #0
 800f214:	f108 38ff 	add.w	r8, r8, #4294967295
 800f218:	f104 0a1a 	add.w	sl, r4, #26
 800f21c:	45c8      	cmp	r8, r9
 800f21e:	dc09      	bgt.n	800f234 <_printf_float+0x250>
 800f220:	6823      	ldr	r3, [r4, #0]
 800f222:	079b      	lsls	r3, r3, #30
 800f224:	f100 8103 	bmi.w	800f42e <_printf_float+0x44a>
 800f228:	68e0      	ldr	r0, [r4, #12]
 800f22a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f22c:	4298      	cmp	r0, r3
 800f22e:	bfb8      	it	lt
 800f230:	4618      	movlt	r0, r3
 800f232:	e734      	b.n	800f09e <_printf_float+0xba>
 800f234:	2301      	movs	r3, #1
 800f236:	4652      	mov	r2, sl
 800f238:	4631      	mov	r1, r6
 800f23a:	4628      	mov	r0, r5
 800f23c:	47b8      	blx	r7
 800f23e:	3001      	adds	r0, #1
 800f240:	f43f af2b 	beq.w	800f09a <_printf_float+0xb6>
 800f244:	f109 0901 	add.w	r9, r9, #1
 800f248:	e7e8      	b.n	800f21c <_printf_float+0x238>
 800f24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	dc39      	bgt.n	800f2c4 <_printf_float+0x2e0>
 800f250:	4a1b      	ldr	r2, [pc, #108]	@ (800f2c0 <_printf_float+0x2dc>)
 800f252:	2301      	movs	r3, #1
 800f254:	4631      	mov	r1, r6
 800f256:	4628      	mov	r0, r5
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	f43f af1d 	beq.w	800f09a <_printf_float+0xb6>
 800f260:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f264:	ea59 0303 	orrs.w	r3, r9, r3
 800f268:	d102      	bne.n	800f270 <_printf_float+0x28c>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	07d9      	lsls	r1, r3, #31
 800f26e:	d5d7      	bpl.n	800f220 <_printf_float+0x23c>
 800f270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f274:	4631      	mov	r1, r6
 800f276:	4628      	mov	r0, r5
 800f278:	47b8      	blx	r7
 800f27a:	3001      	adds	r0, #1
 800f27c:	f43f af0d 	beq.w	800f09a <_printf_float+0xb6>
 800f280:	f04f 0a00 	mov.w	sl, #0
 800f284:	f104 0b1a 	add.w	fp, r4, #26
 800f288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28a:	425b      	negs	r3, r3
 800f28c:	4553      	cmp	r3, sl
 800f28e:	dc01      	bgt.n	800f294 <_printf_float+0x2b0>
 800f290:	464b      	mov	r3, r9
 800f292:	e793      	b.n	800f1bc <_printf_float+0x1d8>
 800f294:	2301      	movs	r3, #1
 800f296:	465a      	mov	r2, fp
 800f298:	4631      	mov	r1, r6
 800f29a:	4628      	mov	r0, r5
 800f29c:	47b8      	blx	r7
 800f29e:	3001      	adds	r0, #1
 800f2a0:	f43f aefb 	beq.w	800f09a <_printf_float+0xb6>
 800f2a4:	f10a 0a01 	add.w	sl, sl, #1
 800f2a8:	e7ee      	b.n	800f288 <_printf_float+0x2a4>
 800f2aa:	bf00      	nop
 800f2ac:	7fefffff 	.word	0x7fefffff
 800f2b0:	08016070 	.word	0x08016070
 800f2b4:	08016074 	.word	0x08016074
 800f2b8:	08016078 	.word	0x08016078
 800f2bc:	0801607c 	.word	0x0801607c
 800f2c0:	08016410 	.word	0x08016410
 800f2c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f2ca:	4553      	cmp	r3, sl
 800f2cc:	bfa8      	it	ge
 800f2ce:	4653      	movge	r3, sl
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	4699      	mov	r9, r3
 800f2d4:	dc36      	bgt.n	800f344 <_printf_float+0x360>
 800f2d6:	f04f 0b00 	mov.w	fp, #0
 800f2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2de:	f104 021a 	add.w	r2, r4, #26
 800f2e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2e4:	9306      	str	r3, [sp, #24]
 800f2e6:	eba3 0309 	sub.w	r3, r3, r9
 800f2ea:	455b      	cmp	r3, fp
 800f2ec:	dc31      	bgt.n	800f352 <_printf_float+0x36e>
 800f2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2f0:	459a      	cmp	sl, r3
 800f2f2:	dc3a      	bgt.n	800f36a <_printf_float+0x386>
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	07da      	lsls	r2, r3, #31
 800f2f8:	d437      	bmi.n	800f36a <_printf_float+0x386>
 800f2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2fc:	ebaa 0903 	sub.w	r9, sl, r3
 800f300:	9b06      	ldr	r3, [sp, #24]
 800f302:	ebaa 0303 	sub.w	r3, sl, r3
 800f306:	4599      	cmp	r9, r3
 800f308:	bfa8      	it	ge
 800f30a:	4699      	movge	r9, r3
 800f30c:	f1b9 0f00 	cmp.w	r9, #0
 800f310:	dc33      	bgt.n	800f37a <_printf_float+0x396>
 800f312:	f04f 0800 	mov.w	r8, #0
 800f316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f31a:	f104 0b1a 	add.w	fp, r4, #26
 800f31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f320:	ebaa 0303 	sub.w	r3, sl, r3
 800f324:	eba3 0309 	sub.w	r3, r3, r9
 800f328:	4543      	cmp	r3, r8
 800f32a:	f77f af79 	ble.w	800f220 <_printf_float+0x23c>
 800f32e:	2301      	movs	r3, #1
 800f330:	465a      	mov	r2, fp
 800f332:	4631      	mov	r1, r6
 800f334:	4628      	mov	r0, r5
 800f336:	47b8      	blx	r7
 800f338:	3001      	adds	r0, #1
 800f33a:	f43f aeae 	beq.w	800f09a <_printf_float+0xb6>
 800f33e:	f108 0801 	add.w	r8, r8, #1
 800f342:	e7ec      	b.n	800f31e <_printf_float+0x33a>
 800f344:	4642      	mov	r2, r8
 800f346:	4631      	mov	r1, r6
 800f348:	4628      	mov	r0, r5
 800f34a:	47b8      	blx	r7
 800f34c:	3001      	adds	r0, #1
 800f34e:	d1c2      	bne.n	800f2d6 <_printf_float+0x2f2>
 800f350:	e6a3      	b.n	800f09a <_printf_float+0xb6>
 800f352:	2301      	movs	r3, #1
 800f354:	4631      	mov	r1, r6
 800f356:	4628      	mov	r0, r5
 800f358:	9206      	str	r2, [sp, #24]
 800f35a:	47b8      	blx	r7
 800f35c:	3001      	adds	r0, #1
 800f35e:	f43f ae9c 	beq.w	800f09a <_printf_float+0xb6>
 800f362:	9a06      	ldr	r2, [sp, #24]
 800f364:	f10b 0b01 	add.w	fp, fp, #1
 800f368:	e7bb      	b.n	800f2e2 <_printf_float+0x2fe>
 800f36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f36e:	4631      	mov	r1, r6
 800f370:	4628      	mov	r0, r5
 800f372:	47b8      	blx	r7
 800f374:	3001      	adds	r0, #1
 800f376:	d1c0      	bne.n	800f2fa <_printf_float+0x316>
 800f378:	e68f      	b.n	800f09a <_printf_float+0xb6>
 800f37a:	9a06      	ldr	r2, [sp, #24]
 800f37c:	464b      	mov	r3, r9
 800f37e:	4442      	add	r2, r8
 800f380:	4631      	mov	r1, r6
 800f382:	4628      	mov	r0, r5
 800f384:	47b8      	blx	r7
 800f386:	3001      	adds	r0, #1
 800f388:	d1c3      	bne.n	800f312 <_printf_float+0x32e>
 800f38a:	e686      	b.n	800f09a <_printf_float+0xb6>
 800f38c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f390:	f1ba 0f01 	cmp.w	sl, #1
 800f394:	dc01      	bgt.n	800f39a <_printf_float+0x3b6>
 800f396:	07db      	lsls	r3, r3, #31
 800f398:	d536      	bpl.n	800f408 <_printf_float+0x424>
 800f39a:	2301      	movs	r3, #1
 800f39c:	4642      	mov	r2, r8
 800f39e:	4631      	mov	r1, r6
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	47b8      	blx	r7
 800f3a4:	3001      	adds	r0, #1
 800f3a6:	f43f ae78 	beq.w	800f09a <_printf_float+0xb6>
 800f3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	47b8      	blx	r7
 800f3b4:	3001      	adds	r0, #1
 800f3b6:	f43f ae70 	beq.w	800f09a <_printf_float+0xb6>
 800f3ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f3be:	2200      	movs	r2, #0
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3c6:	f7f1 fb9f 	bl	8000b08 <__aeabi_dcmpeq>
 800f3ca:	b9c0      	cbnz	r0, 800f3fe <_printf_float+0x41a>
 800f3cc:	4653      	mov	r3, sl
 800f3ce:	f108 0201 	add.w	r2, r8, #1
 800f3d2:	4631      	mov	r1, r6
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	47b8      	blx	r7
 800f3d8:	3001      	adds	r0, #1
 800f3da:	d10c      	bne.n	800f3f6 <_printf_float+0x412>
 800f3dc:	e65d      	b.n	800f09a <_printf_float+0xb6>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	465a      	mov	r2, fp
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	47b8      	blx	r7
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	f43f ae56 	beq.w	800f09a <_printf_float+0xb6>
 800f3ee:	f108 0801 	add.w	r8, r8, #1
 800f3f2:	45d0      	cmp	r8, sl
 800f3f4:	dbf3      	blt.n	800f3de <_printf_float+0x3fa>
 800f3f6:	464b      	mov	r3, r9
 800f3f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f3fc:	e6df      	b.n	800f1be <_printf_float+0x1da>
 800f3fe:	f04f 0800 	mov.w	r8, #0
 800f402:	f104 0b1a 	add.w	fp, r4, #26
 800f406:	e7f4      	b.n	800f3f2 <_printf_float+0x40e>
 800f408:	2301      	movs	r3, #1
 800f40a:	4642      	mov	r2, r8
 800f40c:	e7e1      	b.n	800f3d2 <_printf_float+0x3ee>
 800f40e:	2301      	movs	r3, #1
 800f410:	464a      	mov	r2, r9
 800f412:	4631      	mov	r1, r6
 800f414:	4628      	mov	r0, r5
 800f416:	47b8      	blx	r7
 800f418:	3001      	adds	r0, #1
 800f41a:	f43f ae3e 	beq.w	800f09a <_printf_float+0xb6>
 800f41e:	f108 0801 	add.w	r8, r8, #1
 800f422:	68e3      	ldr	r3, [r4, #12]
 800f424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f426:	1a5b      	subs	r3, r3, r1
 800f428:	4543      	cmp	r3, r8
 800f42a:	dcf0      	bgt.n	800f40e <_printf_float+0x42a>
 800f42c:	e6fc      	b.n	800f228 <_printf_float+0x244>
 800f42e:	f04f 0800 	mov.w	r8, #0
 800f432:	f104 0919 	add.w	r9, r4, #25
 800f436:	e7f4      	b.n	800f422 <_printf_float+0x43e>

0800f438 <_printf_common>:
 800f438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f43c:	4616      	mov	r6, r2
 800f43e:	4698      	mov	r8, r3
 800f440:	688a      	ldr	r2, [r1, #8]
 800f442:	690b      	ldr	r3, [r1, #16]
 800f444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f448:	4293      	cmp	r3, r2
 800f44a:	bfb8      	it	lt
 800f44c:	4613      	movlt	r3, r2
 800f44e:	6033      	str	r3, [r6, #0]
 800f450:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f454:	4607      	mov	r7, r0
 800f456:	460c      	mov	r4, r1
 800f458:	b10a      	cbz	r2, 800f45e <_printf_common+0x26>
 800f45a:	3301      	adds	r3, #1
 800f45c:	6033      	str	r3, [r6, #0]
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	0699      	lsls	r1, r3, #26
 800f462:	bf42      	ittt	mi
 800f464:	6833      	ldrmi	r3, [r6, #0]
 800f466:	3302      	addmi	r3, #2
 800f468:	6033      	strmi	r3, [r6, #0]
 800f46a:	6825      	ldr	r5, [r4, #0]
 800f46c:	f015 0506 	ands.w	r5, r5, #6
 800f470:	d106      	bne.n	800f480 <_printf_common+0x48>
 800f472:	f104 0a19 	add.w	sl, r4, #25
 800f476:	68e3      	ldr	r3, [r4, #12]
 800f478:	6832      	ldr	r2, [r6, #0]
 800f47a:	1a9b      	subs	r3, r3, r2
 800f47c:	42ab      	cmp	r3, r5
 800f47e:	dc26      	bgt.n	800f4ce <_printf_common+0x96>
 800f480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f484:	6822      	ldr	r2, [r4, #0]
 800f486:	3b00      	subs	r3, #0
 800f488:	bf18      	it	ne
 800f48a:	2301      	movne	r3, #1
 800f48c:	0692      	lsls	r2, r2, #26
 800f48e:	d42b      	bmi.n	800f4e8 <_printf_common+0xb0>
 800f490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f494:	4641      	mov	r1, r8
 800f496:	4638      	mov	r0, r7
 800f498:	47c8      	blx	r9
 800f49a:	3001      	adds	r0, #1
 800f49c:	d01e      	beq.n	800f4dc <_printf_common+0xa4>
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	f003 0306 	and.w	r3, r3, #6
 800f4a6:	2b04      	cmp	r3, #4
 800f4a8:	bf02      	ittt	eq
 800f4aa:	68e5      	ldreq	r5, [r4, #12]
 800f4ac:	6833      	ldreq	r3, [r6, #0]
 800f4ae:	1aed      	subeq	r5, r5, r3
 800f4b0:	68a3      	ldr	r3, [r4, #8]
 800f4b2:	bf0c      	ite	eq
 800f4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4b8:	2500      	movne	r5, #0
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	bfc4      	itt	gt
 800f4be:	1a9b      	subgt	r3, r3, r2
 800f4c0:	18ed      	addgt	r5, r5, r3
 800f4c2:	2600      	movs	r6, #0
 800f4c4:	341a      	adds	r4, #26
 800f4c6:	42b5      	cmp	r5, r6
 800f4c8:	d11a      	bne.n	800f500 <_printf_common+0xc8>
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	e008      	b.n	800f4e0 <_printf_common+0xa8>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	4652      	mov	r2, sl
 800f4d2:	4641      	mov	r1, r8
 800f4d4:	4638      	mov	r0, r7
 800f4d6:	47c8      	blx	r9
 800f4d8:	3001      	adds	r0, #1
 800f4da:	d103      	bne.n	800f4e4 <_printf_common+0xac>
 800f4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e4:	3501      	adds	r5, #1
 800f4e6:	e7c6      	b.n	800f476 <_printf_common+0x3e>
 800f4e8:	18e1      	adds	r1, r4, r3
 800f4ea:	1c5a      	adds	r2, r3, #1
 800f4ec:	2030      	movs	r0, #48	@ 0x30
 800f4ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f4f2:	4422      	add	r2, r4
 800f4f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f4f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f4fc:	3302      	adds	r3, #2
 800f4fe:	e7c7      	b.n	800f490 <_printf_common+0x58>
 800f500:	2301      	movs	r3, #1
 800f502:	4622      	mov	r2, r4
 800f504:	4641      	mov	r1, r8
 800f506:	4638      	mov	r0, r7
 800f508:	47c8      	blx	r9
 800f50a:	3001      	adds	r0, #1
 800f50c:	d0e6      	beq.n	800f4dc <_printf_common+0xa4>
 800f50e:	3601      	adds	r6, #1
 800f510:	e7d9      	b.n	800f4c6 <_printf_common+0x8e>
	...

0800f514 <_printf_i>:
 800f514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f518:	7e0f      	ldrb	r7, [r1, #24]
 800f51a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f51c:	2f78      	cmp	r7, #120	@ 0x78
 800f51e:	4691      	mov	r9, r2
 800f520:	4680      	mov	r8, r0
 800f522:	460c      	mov	r4, r1
 800f524:	469a      	mov	sl, r3
 800f526:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f52a:	d807      	bhi.n	800f53c <_printf_i+0x28>
 800f52c:	2f62      	cmp	r7, #98	@ 0x62
 800f52e:	d80a      	bhi.n	800f546 <_printf_i+0x32>
 800f530:	2f00      	cmp	r7, #0
 800f532:	f000 80d2 	beq.w	800f6da <_printf_i+0x1c6>
 800f536:	2f58      	cmp	r7, #88	@ 0x58
 800f538:	f000 80b9 	beq.w	800f6ae <_printf_i+0x19a>
 800f53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f540:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f544:	e03a      	b.n	800f5bc <_printf_i+0xa8>
 800f546:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f54a:	2b15      	cmp	r3, #21
 800f54c:	d8f6      	bhi.n	800f53c <_printf_i+0x28>
 800f54e:	a101      	add	r1, pc, #4	@ (adr r1, 800f554 <_printf_i+0x40>)
 800f550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f554:	0800f5ad 	.word	0x0800f5ad
 800f558:	0800f5c1 	.word	0x0800f5c1
 800f55c:	0800f53d 	.word	0x0800f53d
 800f560:	0800f53d 	.word	0x0800f53d
 800f564:	0800f53d 	.word	0x0800f53d
 800f568:	0800f53d 	.word	0x0800f53d
 800f56c:	0800f5c1 	.word	0x0800f5c1
 800f570:	0800f53d 	.word	0x0800f53d
 800f574:	0800f53d 	.word	0x0800f53d
 800f578:	0800f53d 	.word	0x0800f53d
 800f57c:	0800f53d 	.word	0x0800f53d
 800f580:	0800f6c1 	.word	0x0800f6c1
 800f584:	0800f5eb 	.word	0x0800f5eb
 800f588:	0800f67b 	.word	0x0800f67b
 800f58c:	0800f53d 	.word	0x0800f53d
 800f590:	0800f53d 	.word	0x0800f53d
 800f594:	0800f6e3 	.word	0x0800f6e3
 800f598:	0800f53d 	.word	0x0800f53d
 800f59c:	0800f5eb 	.word	0x0800f5eb
 800f5a0:	0800f53d 	.word	0x0800f53d
 800f5a4:	0800f53d 	.word	0x0800f53d
 800f5a8:	0800f683 	.word	0x0800f683
 800f5ac:	6833      	ldr	r3, [r6, #0]
 800f5ae:	1d1a      	adds	r2, r3, #4
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	6032      	str	r2, [r6, #0]
 800f5b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e09d      	b.n	800f6fc <_printf_i+0x1e8>
 800f5c0:	6833      	ldr	r3, [r6, #0]
 800f5c2:	6820      	ldr	r0, [r4, #0]
 800f5c4:	1d19      	adds	r1, r3, #4
 800f5c6:	6031      	str	r1, [r6, #0]
 800f5c8:	0606      	lsls	r6, r0, #24
 800f5ca:	d501      	bpl.n	800f5d0 <_printf_i+0xbc>
 800f5cc:	681d      	ldr	r5, [r3, #0]
 800f5ce:	e003      	b.n	800f5d8 <_printf_i+0xc4>
 800f5d0:	0645      	lsls	r5, r0, #25
 800f5d2:	d5fb      	bpl.n	800f5cc <_printf_i+0xb8>
 800f5d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	da03      	bge.n	800f5e4 <_printf_i+0xd0>
 800f5dc:	232d      	movs	r3, #45	@ 0x2d
 800f5de:	426d      	negs	r5, r5
 800f5e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5e4:	4859      	ldr	r0, [pc, #356]	@ (800f74c <_printf_i+0x238>)
 800f5e6:	230a      	movs	r3, #10
 800f5e8:	e011      	b.n	800f60e <_printf_i+0xfa>
 800f5ea:	6821      	ldr	r1, [r4, #0]
 800f5ec:	6833      	ldr	r3, [r6, #0]
 800f5ee:	0608      	lsls	r0, r1, #24
 800f5f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f5f4:	d402      	bmi.n	800f5fc <_printf_i+0xe8>
 800f5f6:	0649      	lsls	r1, r1, #25
 800f5f8:	bf48      	it	mi
 800f5fa:	b2ad      	uxthmi	r5, r5
 800f5fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f5fe:	4853      	ldr	r0, [pc, #332]	@ (800f74c <_printf_i+0x238>)
 800f600:	6033      	str	r3, [r6, #0]
 800f602:	bf14      	ite	ne
 800f604:	230a      	movne	r3, #10
 800f606:	2308      	moveq	r3, #8
 800f608:	2100      	movs	r1, #0
 800f60a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f60e:	6866      	ldr	r6, [r4, #4]
 800f610:	60a6      	str	r6, [r4, #8]
 800f612:	2e00      	cmp	r6, #0
 800f614:	bfa2      	ittt	ge
 800f616:	6821      	ldrge	r1, [r4, #0]
 800f618:	f021 0104 	bicge.w	r1, r1, #4
 800f61c:	6021      	strge	r1, [r4, #0]
 800f61e:	b90d      	cbnz	r5, 800f624 <_printf_i+0x110>
 800f620:	2e00      	cmp	r6, #0
 800f622:	d04b      	beq.n	800f6bc <_printf_i+0x1a8>
 800f624:	4616      	mov	r6, r2
 800f626:	fbb5 f1f3 	udiv	r1, r5, r3
 800f62a:	fb03 5711 	mls	r7, r3, r1, r5
 800f62e:	5dc7      	ldrb	r7, [r0, r7]
 800f630:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f634:	462f      	mov	r7, r5
 800f636:	42bb      	cmp	r3, r7
 800f638:	460d      	mov	r5, r1
 800f63a:	d9f4      	bls.n	800f626 <_printf_i+0x112>
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d10b      	bne.n	800f658 <_printf_i+0x144>
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	07df      	lsls	r7, r3, #31
 800f644:	d508      	bpl.n	800f658 <_printf_i+0x144>
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	6861      	ldr	r1, [r4, #4]
 800f64a:	4299      	cmp	r1, r3
 800f64c:	bfde      	ittt	le
 800f64e:	2330      	movle	r3, #48	@ 0x30
 800f650:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f654:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f658:	1b92      	subs	r2, r2, r6
 800f65a:	6122      	str	r2, [r4, #16]
 800f65c:	f8cd a000 	str.w	sl, [sp]
 800f660:	464b      	mov	r3, r9
 800f662:	aa03      	add	r2, sp, #12
 800f664:	4621      	mov	r1, r4
 800f666:	4640      	mov	r0, r8
 800f668:	f7ff fee6 	bl	800f438 <_printf_common>
 800f66c:	3001      	adds	r0, #1
 800f66e:	d14a      	bne.n	800f706 <_printf_i+0x1f2>
 800f670:	f04f 30ff 	mov.w	r0, #4294967295
 800f674:	b004      	add	sp, #16
 800f676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	f043 0320 	orr.w	r3, r3, #32
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	4833      	ldr	r0, [pc, #204]	@ (800f750 <_printf_i+0x23c>)
 800f684:	2778      	movs	r7, #120	@ 0x78
 800f686:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f68a:	6823      	ldr	r3, [r4, #0]
 800f68c:	6831      	ldr	r1, [r6, #0]
 800f68e:	061f      	lsls	r7, r3, #24
 800f690:	f851 5b04 	ldr.w	r5, [r1], #4
 800f694:	d402      	bmi.n	800f69c <_printf_i+0x188>
 800f696:	065f      	lsls	r7, r3, #25
 800f698:	bf48      	it	mi
 800f69a:	b2ad      	uxthmi	r5, r5
 800f69c:	6031      	str	r1, [r6, #0]
 800f69e:	07d9      	lsls	r1, r3, #31
 800f6a0:	bf44      	itt	mi
 800f6a2:	f043 0320 	orrmi.w	r3, r3, #32
 800f6a6:	6023      	strmi	r3, [r4, #0]
 800f6a8:	b11d      	cbz	r5, 800f6b2 <_printf_i+0x19e>
 800f6aa:	2310      	movs	r3, #16
 800f6ac:	e7ac      	b.n	800f608 <_printf_i+0xf4>
 800f6ae:	4827      	ldr	r0, [pc, #156]	@ (800f74c <_printf_i+0x238>)
 800f6b0:	e7e9      	b.n	800f686 <_printf_i+0x172>
 800f6b2:	6823      	ldr	r3, [r4, #0]
 800f6b4:	f023 0320 	bic.w	r3, r3, #32
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	e7f6      	b.n	800f6aa <_printf_i+0x196>
 800f6bc:	4616      	mov	r6, r2
 800f6be:	e7bd      	b.n	800f63c <_printf_i+0x128>
 800f6c0:	6833      	ldr	r3, [r6, #0]
 800f6c2:	6825      	ldr	r5, [r4, #0]
 800f6c4:	6961      	ldr	r1, [r4, #20]
 800f6c6:	1d18      	adds	r0, r3, #4
 800f6c8:	6030      	str	r0, [r6, #0]
 800f6ca:	062e      	lsls	r6, r5, #24
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	d501      	bpl.n	800f6d4 <_printf_i+0x1c0>
 800f6d0:	6019      	str	r1, [r3, #0]
 800f6d2:	e002      	b.n	800f6da <_printf_i+0x1c6>
 800f6d4:	0668      	lsls	r0, r5, #25
 800f6d6:	d5fb      	bpl.n	800f6d0 <_printf_i+0x1bc>
 800f6d8:	8019      	strh	r1, [r3, #0]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	6123      	str	r3, [r4, #16]
 800f6de:	4616      	mov	r6, r2
 800f6e0:	e7bc      	b.n	800f65c <_printf_i+0x148>
 800f6e2:	6833      	ldr	r3, [r6, #0]
 800f6e4:	1d1a      	adds	r2, r3, #4
 800f6e6:	6032      	str	r2, [r6, #0]
 800f6e8:	681e      	ldr	r6, [r3, #0]
 800f6ea:	6862      	ldr	r2, [r4, #4]
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f7f0 fd8e 	bl	8000210 <memchr>
 800f6f4:	b108      	cbz	r0, 800f6fa <_printf_i+0x1e6>
 800f6f6:	1b80      	subs	r0, r0, r6
 800f6f8:	6060      	str	r0, [r4, #4]
 800f6fa:	6863      	ldr	r3, [r4, #4]
 800f6fc:	6123      	str	r3, [r4, #16]
 800f6fe:	2300      	movs	r3, #0
 800f700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f704:	e7aa      	b.n	800f65c <_printf_i+0x148>
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	4632      	mov	r2, r6
 800f70a:	4649      	mov	r1, r9
 800f70c:	4640      	mov	r0, r8
 800f70e:	47d0      	blx	sl
 800f710:	3001      	adds	r0, #1
 800f712:	d0ad      	beq.n	800f670 <_printf_i+0x15c>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	079b      	lsls	r3, r3, #30
 800f718:	d413      	bmi.n	800f742 <_printf_i+0x22e>
 800f71a:	68e0      	ldr	r0, [r4, #12]
 800f71c:	9b03      	ldr	r3, [sp, #12]
 800f71e:	4298      	cmp	r0, r3
 800f720:	bfb8      	it	lt
 800f722:	4618      	movlt	r0, r3
 800f724:	e7a6      	b.n	800f674 <_printf_i+0x160>
 800f726:	2301      	movs	r3, #1
 800f728:	4632      	mov	r2, r6
 800f72a:	4649      	mov	r1, r9
 800f72c:	4640      	mov	r0, r8
 800f72e:	47d0      	blx	sl
 800f730:	3001      	adds	r0, #1
 800f732:	d09d      	beq.n	800f670 <_printf_i+0x15c>
 800f734:	3501      	adds	r5, #1
 800f736:	68e3      	ldr	r3, [r4, #12]
 800f738:	9903      	ldr	r1, [sp, #12]
 800f73a:	1a5b      	subs	r3, r3, r1
 800f73c:	42ab      	cmp	r3, r5
 800f73e:	dcf2      	bgt.n	800f726 <_printf_i+0x212>
 800f740:	e7eb      	b.n	800f71a <_printf_i+0x206>
 800f742:	2500      	movs	r5, #0
 800f744:	f104 0619 	add.w	r6, r4, #25
 800f748:	e7f5      	b.n	800f736 <_printf_i+0x222>
 800f74a:	bf00      	nop
 800f74c:	08016080 	.word	0x08016080
 800f750:	08016091 	.word	0x08016091

0800f754 <_scanf_float>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	b087      	sub	sp, #28
 800f75a:	4617      	mov	r7, r2
 800f75c:	9303      	str	r3, [sp, #12]
 800f75e:	688b      	ldr	r3, [r1, #8]
 800f760:	1e5a      	subs	r2, r3, #1
 800f762:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f766:	bf81      	itttt	hi
 800f768:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f76c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f770:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f774:	608b      	strhi	r3, [r1, #8]
 800f776:	680b      	ldr	r3, [r1, #0]
 800f778:	460a      	mov	r2, r1
 800f77a:	f04f 0500 	mov.w	r5, #0
 800f77e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f782:	f842 3b1c 	str.w	r3, [r2], #28
 800f786:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f78a:	4680      	mov	r8, r0
 800f78c:	460c      	mov	r4, r1
 800f78e:	bf98      	it	ls
 800f790:	f04f 0b00 	movls.w	fp, #0
 800f794:	9201      	str	r2, [sp, #4]
 800f796:	4616      	mov	r6, r2
 800f798:	46aa      	mov	sl, r5
 800f79a:	46a9      	mov	r9, r5
 800f79c:	9502      	str	r5, [sp, #8]
 800f79e:	68a2      	ldr	r2, [r4, #8]
 800f7a0:	b152      	cbz	r2, 800f7b8 <_scanf_float+0x64>
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	2b4e      	cmp	r3, #78	@ 0x4e
 800f7a8:	d864      	bhi.n	800f874 <_scanf_float+0x120>
 800f7aa:	2b40      	cmp	r3, #64	@ 0x40
 800f7ac:	d83c      	bhi.n	800f828 <_scanf_float+0xd4>
 800f7ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f7b2:	b2c8      	uxtb	r0, r1
 800f7b4:	280e      	cmp	r0, #14
 800f7b6:	d93a      	bls.n	800f82e <_scanf_float+0xda>
 800f7b8:	f1b9 0f00 	cmp.w	r9, #0
 800f7bc:	d003      	beq.n	800f7c6 <_scanf_float+0x72>
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7ca:	f1ba 0f01 	cmp.w	sl, #1
 800f7ce:	f200 8117 	bhi.w	800fa00 <_scanf_float+0x2ac>
 800f7d2:	9b01      	ldr	r3, [sp, #4]
 800f7d4:	429e      	cmp	r6, r3
 800f7d6:	f200 8108 	bhi.w	800f9ea <_scanf_float+0x296>
 800f7da:	2001      	movs	r0, #1
 800f7dc:	b007      	add	sp, #28
 800f7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f7e6:	2a0d      	cmp	r2, #13
 800f7e8:	d8e6      	bhi.n	800f7b8 <_scanf_float+0x64>
 800f7ea:	a101      	add	r1, pc, #4	@ (adr r1, 800f7f0 <_scanf_float+0x9c>)
 800f7ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f7f0:	0800f937 	.word	0x0800f937
 800f7f4:	0800f7b9 	.word	0x0800f7b9
 800f7f8:	0800f7b9 	.word	0x0800f7b9
 800f7fc:	0800f7b9 	.word	0x0800f7b9
 800f800:	0800f997 	.word	0x0800f997
 800f804:	0800f96f 	.word	0x0800f96f
 800f808:	0800f7b9 	.word	0x0800f7b9
 800f80c:	0800f7b9 	.word	0x0800f7b9
 800f810:	0800f945 	.word	0x0800f945
 800f814:	0800f7b9 	.word	0x0800f7b9
 800f818:	0800f7b9 	.word	0x0800f7b9
 800f81c:	0800f7b9 	.word	0x0800f7b9
 800f820:	0800f7b9 	.word	0x0800f7b9
 800f824:	0800f8fd 	.word	0x0800f8fd
 800f828:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f82c:	e7db      	b.n	800f7e6 <_scanf_float+0x92>
 800f82e:	290e      	cmp	r1, #14
 800f830:	d8c2      	bhi.n	800f7b8 <_scanf_float+0x64>
 800f832:	a001      	add	r0, pc, #4	@ (adr r0, 800f838 <_scanf_float+0xe4>)
 800f834:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f838:	0800f8ed 	.word	0x0800f8ed
 800f83c:	0800f7b9 	.word	0x0800f7b9
 800f840:	0800f8ed 	.word	0x0800f8ed
 800f844:	0800f983 	.word	0x0800f983
 800f848:	0800f7b9 	.word	0x0800f7b9
 800f84c:	0800f895 	.word	0x0800f895
 800f850:	0800f8d3 	.word	0x0800f8d3
 800f854:	0800f8d3 	.word	0x0800f8d3
 800f858:	0800f8d3 	.word	0x0800f8d3
 800f85c:	0800f8d3 	.word	0x0800f8d3
 800f860:	0800f8d3 	.word	0x0800f8d3
 800f864:	0800f8d3 	.word	0x0800f8d3
 800f868:	0800f8d3 	.word	0x0800f8d3
 800f86c:	0800f8d3 	.word	0x0800f8d3
 800f870:	0800f8d3 	.word	0x0800f8d3
 800f874:	2b6e      	cmp	r3, #110	@ 0x6e
 800f876:	d809      	bhi.n	800f88c <_scanf_float+0x138>
 800f878:	2b60      	cmp	r3, #96	@ 0x60
 800f87a:	d8b2      	bhi.n	800f7e2 <_scanf_float+0x8e>
 800f87c:	2b54      	cmp	r3, #84	@ 0x54
 800f87e:	d07b      	beq.n	800f978 <_scanf_float+0x224>
 800f880:	2b59      	cmp	r3, #89	@ 0x59
 800f882:	d199      	bne.n	800f7b8 <_scanf_float+0x64>
 800f884:	2d07      	cmp	r5, #7
 800f886:	d197      	bne.n	800f7b8 <_scanf_float+0x64>
 800f888:	2508      	movs	r5, #8
 800f88a:	e02c      	b.n	800f8e6 <_scanf_float+0x192>
 800f88c:	2b74      	cmp	r3, #116	@ 0x74
 800f88e:	d073      	beq.n	800f978 <_scanf_float+0x224>
 800f890:	2b79      	cmp	r3, #121	@ 0x79
 800f892:	e7f6      	b.n	800f882 <_scanf_float+0x12e>
 800f894:	6821      	ldr	r1, [r4, #0]
 800f896:	05c8      	lsls	r0, r1, #23
 800f898:	d51b      	bpl.n	800f8d2 <_scanf_float+0x17e>
 800f89a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f89e:	6021      	str	r1, [r4, #0]
 800f8a0:	f109 0901 	add.w	r9, r9, #1
 800f8a4:	f1bb 0f00 	cmp.w	fp, #0
 800f8a8:	d003      	beq.n	800f8b2 <_scanf_float+0x15e>
 800f8aa:	3201      	adds	r2, #1
 800f8ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8b0:	60a2      	str	r2, [r4, #8]
 800f8b2:	68a3      	ldr	r3, [r4, #8]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	60a3      	str	r3, [r4, #8]
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	6123      	str	r3, [r4, #16]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	607b      	str	r3, [r7, #4]
 800f8c6:	f340 8087 	ble.w	800f9d8 <_scanf_float+0x284>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	603b      	str	r3, [r7, #0]
 800f8d0:	e765      	b.n	800f79e <_scanf_float+0x4a>
 800f8d2:	eb1a 0105 	adds.w	r1, sl, r5
 800f8d6:	f47f af6f 	bne.w	800f7b8 <_scanf_float+0x64>
 800f8da:	6822      	ldr	r2, [r4, #0]
 800f8dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f8e0:	6022      	str	r2, [r4, #0]
 800f8e2:	460d      	mov	r5, r1
 800f8e4:	468a      	mov	sl, r1
 800f8e6:	f806 3b01 	strb.w	r3, [r6], #1
 800f8ea:	e7e2      	b.n	800f8b2 <_scanf_float+0x15e>
 800f8ec:	6822      	ldr	r2, [r4, #0]
 800f8ee:	0610      	lsls	r0, r2, #24
 800f8f0:	f57f af62 	bpl.w	800f7b8 <_scanf_float+0x64>
 800f8f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f8f8:	6022      	str	r2, [r4, #0]
 800f8fa:	e7f4      	b.n	800f8e6 <_scanf_float+0x192>
 800f8fc:	f1ba 0f00 	cmp.w	sl, #0
 800f900:	d10e      	bne.n	800f920 <_scanf_float+0x1cc>
 800f902:	f1b9 0f00 	cmp.w	r9, #0
 800f906:	d10e      	bne.n	800f926 <_scanf_float+0x1d2>
 800f908:	6822      	ldr	r2, [r4, #0]
 800f90a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f90e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f912:	d108      	bne.n	800f926 <_scanf_float+0x1d2>
 800f914:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f918:	6022      	str	r2, [r4, #0]
 800f91a:	f04f 0a01 	mov.w	sl, #1
 800f91e:	e7e2      	b.n	800f8e6 <_scanf_float+0x192>
 800f920:	f1ba 0f02 	cmp.w	sl, #2
 800f924:	d055      	beq.n	800f9d2 <_scanf_float+0x27e>
 800f926:	2d01      	cmp	r5, #1
 800f928:	d002      	beq.n	800f930 <_scanf_float+0x1dc>
 800f92a:	2d04      	cmp	r5, #4
 800f92c:	f47f af44 	bne.w	800f7b8 <_scanf_float+0x64>
 800f930:	3501      	adds	r5, #1
 800f932:	b2ed      	uxtb	r5, r5
 800f934:	e7d7      	b.n	800f8e6 <_scanf_float+0x192>
 800f936:	f1ba 0f01 	cmp.w	sl, #1
 800f93a:	f47f af3d 	bne.w	800f7b8 <_scanf_float+0x64>
 800f93e:	f04f 0a02 	mov.w	sl, #2
 800f942:	e7d0      	b.n	800f8e6 <_scanf_float+0x192>
 800f944:	b97d      	cbnz	r5, 800f966 <_scanf_float+0x212>
 800f946:	f1b9 0f00 	cmp.w	r9, #0
 800f94a:	f47f af38 	bne.w	800f7be <_scanf_float+0x6a>
 800f94e:	6822      	ldr	r2, [r4, #0]
 800f950:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f954:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f958:	f040 8108 	bne.w	800fb6c <_scanf_float+0x418>
 800f95c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f960:	6022      	str	r2, [r4, #0]
 800f962:	2501      	movs	r5, #1
 800f964:	e7bf      	b.n	800f8e6 <_scanf_float+0x192>
 800f966:	2d03      	cmp	r5, #3
 800f968:	d0e2      	beq.n	800f930 <_scanf_float+0x1dc>
 800f96a:	2d05      	cmp	r5, #5
 800f96c:	e7de      	b.n	800f92c <_scanf_float+0x1d8>
 800f96e:	2d02      	cmp	r5, #2
 800f970:	f47f af22 	bne.w	800f7b8 <_scanf_float+0x64>
 800f974:	2503      	movs	r5, #3
 800f976:	e7b6      	b.n	800f8e6 <_scanf_float+0x192>
 800f978:	2d06      	cmp	r5, #6
 800f97a:	f47f af1d 	bne.w	800f7b8 <_scanf_float+0x64>
 800f97e:	2507      	movs	r5, #7
 800f980:	e7b1      	b.n	800f8e6 <_scanf_float+0x192>
 800f982:	6822      	ldr	r2, [r4, #0]
 800f984:	0591      	lsls	r1, r2, #22
 800f986:	f57f af17 	bpl.w	800f7b8 <_scanf_float+0x64>
 800f98a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f98e:	6022      	str	r2, [r4, #0]
 800f990:	f8cd 9008 	str.w	r9, [sp, #8]
 800f994:	e7a7      	b.n	800f8e6 <_scanf_float+0x192>
 800f996:	6822      	ldr	r2, [r4, #0]
 800f998:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f99c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f9a0:	d006      	beq.n	800f9b0 <_scanf_float+0x25c>
 800f9a2:	0550      	lsls	r0, r2, #21
 800f9a4:	f57f af08 	bpl.w	800f7b8 <_scanf_float+0x64>
 800f9a8:	f1b9 0f00 	cmp.w	r9, #0
 800f9ac:	f000 80de 	beq.w	800fb6c <_scanf_float+0x418>
 800f9b0:	0591      	lsls	r1, r2, #22
 800f9b2:	bf58      	it	pl
 800f9b4:	9902      	ldrpl	r1, [sp, #8]
 800f9b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f9ba:	bf58      	it	pl
 800f9bc:	eba9 0101 	subpl.w	r1, r9, r1
 800f9c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f9c4:	bf58      	it	pl
 800f9c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f9ca:	6022      	str	r2, [r4, #0]
 800f9cc:	f04f 0900 	mov.w	r9, #0
 800f9d0:	e789      	b.n	800f8e6 <_scanf_float+0x192>
 800f9d2:	f04f 0a03 	mov.w	sl, #3
 800f9d6:	e786      	b.n	800f8e6 <_scanf_float+0x192>
 800f9d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f9dc:	4639      	mov	r1, r7
 800f9de:	4640      	mov	r0, r8
 800f9e0:	4798      	blx	r3
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	f43f aedb 	beq.w	800f79e <_scanf_float+0x4a>
 800f9e8:	e6e6      	b.n	800f7b8 <_scanf_float+0x64>
 800f9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9f2:	463a      	mov	r2, r7
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4798      	blx	r3
 800f9f8:	6923      	ldr	r3, [r4, #16]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	6123      	str	r3, [r4, #16]
 800f9fe:	e6e8      	b.n	800f7d2 <_scanf_float+0x7e>
 800fa00:	1e6b      	subs	r3, r5, #1
 800fa02:	2b06      	cmp	r3, #6
 800fa04:	d824      	bhi.n	800fa50 <_scanf_float+0x2fc>
 800fa06:	2d02      	cmp	r5, #2
 800fa08:	d836      	bhi.n	800fa78 <_scanf_float+0x324>
 800fa0a:	9b01      	ldr	r3, [sp, #4]
 800fa0c:	429e      	cmp	r6, r3
 800fa0e:	f67f aee4 	bls.w	800f7da <_scanf_float+0x86>
 800fa12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa1a:	463a      	mov	r2, r7
 800fa1c:	4640      	mov	r0, r8
 800fa1e:	4798      	blx	r3
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	3b01      	subs	r3, #1
 800fa24:	6123      	str	r3, [r4, #16]
 800fa26:	e7f0      	b.n	800fa0a <_scanf_float+0x2b6>
 800fa28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fa30:	463a      	mov	r2, r7
 800fa32:	4640      	mov	r0, r8
 800fa34:	4798      	blx	r3
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa40:	fa5f fa8a 	uxtb.w	sl, sl
 800fa44:	f1ba 0f02 	cmp.w	sl, #2
 800fa48:	d1ee      	bne.n	800fa28 <_scanf_float+0x2d4>
 800fa4a:	3d03      	subs	r5, #3
 800fa4c:	b2ed      	uxtb	r5, r5
 800fa4e:	1b76      	subs	r6, r6, r5
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	05da      	lsls	r2, r3, #23
 800fa54:	d530      	bpl.n	800fab8 <_scanf_float+0x364>
 800fa56:	055b      	lsls	r3, r3, #21
 800fa58:	d511      	bpl.n	800fa7e <_scanf_float+0x32a>
 800fa5a:	9b01      	ldr	r3, [sp, #4]
 800fa5c:	429e      	cmp	r6, r3
 800fa5e:	f67f aebc 	bls.w	800f7da <_scanf_float+0x86>
 800fa62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa6a:	463a      	mov	r2, r7
 800fa6c:	4640      	mov	r0, r8
 800fa6e:	4798      	blx	r3
 800fa70:	6923      	ldr	r3, [r4, #16]
 800fa72:	3b01      	subs	r3, #1
 800fa74:	6123      	str	r3, [r4, #16]
 800fa76:	e7f0      	b.n	800fa5a <_scanf_float+0x306>
 800fa78:	46aa      	mov	sl, r5
 800fa7a:	46b3      	mov	fp, r6
 800fa7c:	e7de      	b.n	800fa3c <_scanf_float+0x2e8>
 800fa7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa82:	6923      	ldr	r3, [r4, #16]
 800fa84:	2965      	cmp	r1, #101	@ 0x65
 800fa86:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa8a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fa8e:	6123      	str	r3, [r4, #16]
 800fa90:	d00c      	beq.n	800faac <_scanf_float+0x358>
 800fa92:	2945      	cmp	r1, #69	@ 0x45
 800fa94:	d00a      	beq.n	800faac <_scanf_float+0x358>
 800fa96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa9a:	463a      	mov	r2, r7
 800fa9c:	4640      	mov	r0, r8
 800fa9e:	4798      	blx	r3
 800faa0:	6923      	ldr	r3, [r4, #16]
 800faa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800faa6:	3b01      	subs	r3, #1
 800faa8:	1eb5      	subs	r5, r6, #2
 800faaa:	6123      	str	r3, [r4, #16]
 800faac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fab0:	463a      	mov	r2, r7
 800fab2:	4640      	mov	r0, r8
 800fab4:	4798      	blx	r3
 800fab6:	462e      	mov	r6, r5
 800fab8:	6822      	ldr	r2, [r4, #0]
 800faba:	f012 0210 	ands.w	r2, r2, #16
 800fabe:	d001      	beq.n	800fac4 <_scanf_float+0x370>
 800fac0:	2000      	movs	r0, #0
 800fac2:	e68b      	b.n	800f7dc <_scanf_float+0x88>
 800fac4:	7032      	strb	r2, [r6, #0]
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800facc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fad0:	d11c      	bne.n	800fb0c <_scanf_float+0x3b8>
 800fad2:	9b02      	ldr	r3, [sp, #8]
 800fad4:	454b      	cmp	r3, r9
 800fad6:	eba3 0209 	sub.w	r2, r3, r9
 800fada:	d123      	bne.n	800fb24 <_scanf_float+0x3d0>
 800fadc:	9901      	ldr	r1, [sp, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	4640      	mov	r0, r8
 800fae2:	f002 fbbd 	bl	8012260 <_strtod_r>
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	6821      	ldr	r1, [r4, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f011 0f02 	tst.w	r1, #2
 800faf0:	ec57 6b10 	vmov	r6, r7, d0
 800faf4:	f103 0204 	add.w	r2, r3, #4
 800faf8:	d01f      	beq.n	800fb3a <_scanf_float+0x3e6>
 800fafa:	9903      	ldr	r1, [sp, #12]
 800fafc:	600a      	str	r2, [r1, #0]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	e9c3 6700 	strd	r6, r7, [r3]
 800fb04:	68e3      	ldr	r3, [r4, #12]
 800fb06:	3301      	adds	r3, #1
 800fb08:	60e3      	str	r3, [r4, #12]
 800fb0a:	e7d9      	b.n	800fac0 <_scanf_float+0x36c>
 800fb0c:	9b04      	ldr	r3, [sp, #16]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d0e4      	beq.n	800fadc <_scanf_float+0x388>
 800fb12:	9905      	ldr	r1, [sp, #20]
 800fb14:	230a      	movs	r3, #10
 800fb16:	3101      	adds	r1, #1
 800fb18:	4640      	mov	r0, r8
 800fb1a:	f002 fc21 	bl	8012360 <_strtol_r>
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	9e05      	ldr	r6, [sp, #20]
 800fb22:	1ac2      	subs	r2, r0, r3
 800fb24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fb28:	429e      	cmp	r6, r3
 800fb2a:	bf28      	it	cs
 800fb2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fb30:	4910      	ldr	r1, [pc, #64]	@ (800fb74 <_scanf_float+0x420>)
 800fb32:	4630      	mov	r0, r6
 800fb34:	f000 f8e4 	bl	800fd00 <siprintf>
 800fb38:	e7d0      	b.n	800fadc <_scanf_float+0x388>
 800fb3a:	f011 0f04 	tst.w	r1, #4
 800fb3e:	9903      	ldr	r1, [sp, #12]
 800fb40:	600a      	str	r2, [r1, #0]
 800fb42:	d1dc      	bne.n	800fafe <_scanf_float+0x3aa>
 800fb44:	681d      	ldr	r5, [r3, #0]
 800fb46:	4632      	mov	r2, r6
 800fb48:	463b      	mov	r3, r7
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	f7f1 f80d 	bl	8000b6c <__aeabi_dcmpun>
 800fb52:	b128      	cbz	r0, 800fb60 <_scanf_float+0x40c>
 800fb54:	4808      	ldr	r0, [pc, #32]	@ (800fb78 <_scanf_float+0x424>)
 800fb56:	f000 fa27 	bl	800ffa8 <nanf>
 800fb5a:	ed85 0a00 	vstr	s0, [r5]
 800fb5e:	e7d1      	b.n	800fb04 <_scanf_float+0x3b0>
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f1 f860 	bl	8000c28 <__aeabi_d2f>
 800fb68:	6028      	str	r0, [r5, #0]
 800fb6a:	e7cb      	b.n	800fb04 <_scanf_float+0x3b0>
 800fb6c:	f04f 0900 	mov.w	r9, #0
 800fb70:	e629      	b.n	800f7c6 <_scanf_float+0x72>
 800fb72:	bf00      	nop
 800fb74:	080160a2 	.word	0x080160a2
 800fb78:	08016458 	.word	0x08016458

0800fb7c <std>:
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	b510      	push	{r4, lr}
 800fb80:	4604      	mov	r4, r0
 800fb82:	e9c0 3300 	strd	r3, r3, [r0]
 800fb86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb8a:	6083      	str	r3, [r0, #8]
 800fb8c:	8181      	strh	r1, [r0, #12]
 800fb8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb90:	81c2      	strh	r2, [r0, #14]
 800fb92:	6183      	str	r3, [r0, #24]
 800fb94:	4619      	mov	r1, r3
 800fb96:	2208      	movs	r2, #8
 800fb98:	305c      	adds	r0, #92	@ 0x5c
 800fb9a:	f000 f950 	bl	800fe3e <memset>
 800fb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd4 <std+0x58>)
 800fba0:	6263      	str	r3, [r4, #36]	@ 0x24
 800fba2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd8 <std+0x5c>)
 800fba4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fba6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbdc <std+0x60>)
 800fba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe0 <std+0x64>)
 800fbac:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbae:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe4 <std+0x68>)
 800fbb0:	6224      	str	r4, [r4, #32]
 800fbb2:	429c      	cmp	r4, r3
 800fbb4:	d006      	beq.n	800fbc4 <std+0x48>
 800fbb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbba:	4294      	cmp	r4, r2
 800fbbc:	d002      	beq.n	800fbc4 <std+0x48>
 800fbbe:	33d0      	adds	r3, #208	@ 0xd0
 800fbc0:	429c      	cmp	r4, r3
 800fbc2:	d105      	bne.n	800fbd0 <std+0x54>
 800fbc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbcc:	f000 b9da 	b.w	800ff84 <__retarget_lock_init_recursive>
 800fbd0:	bd10      	pop	{r4, pc}
 800fbd2:	bf00      	nop
 800fbd4:	0800fd95 	.word	0x0800fd95
 800fbd8:	0800fdbb 	.word	0x0800fdbb
 800fbdc:	0800fdf3 	.word	0x0800fdf3
 800fbe0:	0800fe17 	.word	0x0800fe17
 800fbe4:	200017b8 	.word	0x200017b8

0800fbe8 <stdio_exit_handler>:
 800fbe8:	4a02      	ldr	r2, [pc, #8]	@ (800fbf4 <stdio_exit_handler+0xc>)
 800fbea:	4903      	ldr	r1, [pc, #12]	@ (800fbf8 <stdio_exit_handler+0x10>)
 800fbec:	4803      	ldr	r0, [pc, #12]	@ (800fbfc <stdio_exit_handler+0x14>)
 800fbee:	f000 b869 	b.w	800fcc4 <_fwalk_sglue>
 800fbf2:	bf00      	nop
 800fbf4:	20000044 	.word	0x20000044
 800fbf8:	08012d51 	.word	0x08012d51
 800fbfc:	20000054 	.word	0x20000054

0800fc00 <cleanup_stdio>:
 800fc00:	6841      	ldr	r1, [r0, #4]
 800fc02:	4b0c      	ldr	r3, [pc, #48]	@ (800fc34 <cleanup_stdio+0x34>)
 800fc04:	4299      	cmp	r1, r3
 800fc06:	b510      	push	{r4, lr}
 800fc08:	4604      	mov	r4, r0
 800fc0a:	d001      	beq.n	800fc10 <cleanup_stdio+0x10>
 800fc0c:	f003 f8a0 	bl	8012d50 <_fflush_r>
 800fc10:	68a1      	ldr	r1, [r4, #8]
 800fc12:	4b09      	ldr	r3, [pc, #36]	@ (800fc38 <cleanup_stdio+0x38>)
 800fc14:	4299      	cmp	r1, r3
 800fc16:	d002      	beq.n	800fc1e <cleanup_stdio+0x1e>
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f003 f899 	bl	8012d50 <_fflush_r>
 800fc1e:	68e1      	ldr	r1, [r4, #12]
 800fc20:	4b06      	ldr	r3, [pc, #24]	@ (800fc3c <cleanup_stdio+0x3c>)
 800fc22:	4299      	cmp	r1, r3
 800fc24:	d004      	beq.n	800fc30 <cleanup_stdio+0x30>
 800fc26:	4620      	mov	r0, r4
 800fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2c:	f003 b890 	b.w	8012d50 <_fflush_r>
 800fc30:	bd10      	pop	{r4, pc}
 800fc32:	bf00      	nop
 800fc34:	200017b8 	.word	0x200017b8
 800fc38:	20001820 	.word	0x20001820
 800fc3c:	20001888 	.word	0x20001888

0800fc40 <global_stdio_init.part.0>:
 800fc40:	b510      	push	{r4, lr}
 800fc42:	4b0b      	ldr	r3, [pc, #44]	@ (800fc70 <global_stdio_init.part.0+0x30>)
 800fc44:	4c0b      	ldr	r4, [pc, #44]	@ (800fc74 <global_stdio_init.part.0+0x34>)
 800fc46:	4a0c      	ldr	r2, [pc, #48]	@ (800fc78 <global_stdio_init.part.0+0x38>)
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	2104      	movs	r1, #4
 800fc50:	f7ff ff94 	bl	800fb7c <std>
 800fc54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc58:	2201      	movs	r2, #1
 800fc5a:	2109      	movs	r1, #9
 800fc5c:	f7ff ff8e 	bl	800fb7c <std>
 800fc60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc64:	2202      	movs	r2, #2
 800fc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6a:	2112      	movs	r1, #18
 800fc6c:	f7ff bf86 	b.w	800fb7c <std>
 800fc70:	200018f0 	.word	0x200018f0
 800fc74:	200017b8 	.word	0x200017b8
 800fc78:	0800fbe9 	.word	0x0800fbe9

0800fc7c <__sfp_lock_acquire>:
 800fc7c:	4801      	ldr	r0, [pc, #4]	@ (800fc84 <__sfp_lock_acquire+0x8>)
 800fc7e:	f000 b982 	b.w	800ff86 <__retarget_lock_acquire_recursive>
 800fc82:	bf00      	nop
 800fc84:	200018f9 	.word	0x200018f9

0800fc88 <__sfp_lock_release>:
 800fc88:	4801      	ldr	r0, [pc, #4]	@ (800fc90 <__sfp_lock_release+0x8>)
 800fc8a:	f000 b97d 	b.w	800ff88 <__retarget_lock_release_recursive>
 800fc8e:	bf00      	nop
 800fc90:	200018f9 	.word	0x200018f9

0800fc94 <__sinit>:
 800fc94:	b510      	push	{r4, lr}
 800fc96:	4604      	mov	r4, r0
 800fc98:	f7ff fff0 	bl	800fc7c <__sfp_lock_acquire>
 800fc9c:	6a23      	ldr	r3, [r4, #32]
 800fc9e:	b11b      	cbz	r3, 800fca8 <__sinit+0x14>
 800fca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca4:	f7ff bff0 	b.w	800fc88 <__sfp_lock_release>
 800fca8:	4b04      	ldr	r3, [pc, #16]	@ (800fcbc <__sinit+0x28>)
 800fcaa:	6223      	str	r3, [r4, #32]
 800fcac:	4b04      	ldr	r3, [pc, #16]	@ (800fcc0 <__sinit+0x2c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1f5      	bne.n	800fca0 <__sinit+0xc>
 800fcb4:	f7ff ffc4 	bl	800fc40 <global_stdio_init.part.0>
 800fcb8:	e7f2      	b.n	800fca0 <__sinit+0xc>
 800fcba:	bf00      	nop
 800fcbc:	0800fc01 	.word	0x0800fc01
 800fcc0:	200018f0 	.word	0x200018f0

0800fcc4 <_fwalk_sglue>:
 800fcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc8:	4607      	mov	r7, r0
 800fcca:	4688      	mov	r8, r1
 800fccc:	4614      	mov	r4, r2
 800fcce:	2600      	movs	r6, #0
 800fcd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcd4:	f1b9 0901 	subs.w	r9, r9, #1
 800fcd8:	d505      	bpl.n	800fce6 <_fwalk_sglue+0x22>
 800fcda:	6824      	ldr	r4, [r4, #0]
 800fcdc:	2c00      	cmp	r4, #0
 800fcde:	d1f7      	bne.n	800fcd0 <_fwalk_sglue+0xc>
 800fce0:	4630      	mov	r0, r6
 800fce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fce6:	89ab      	ldrh	r3, [r5, #12]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d907      	bls.n	800fcfc <_fwalk_sglue+0x38>
 800fcec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	d003      	beq.n	800fcfc <_fwalk_sglue+0x38>
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	47c0      	blx	r8
 800fcfa:	4306      	orrs	r6, r0
 800fcfc:	3568      	adds	r5, #104	@ 0x68
 800fcfe:	e7e9      	b.n	800fcd4 <_fwalk_sglue+0x10>

0800fd00 <siprintf>:
 800fd00:	b40e      	push	{r1, r2, r3}
 800fd02:	b500      	push	{lr}
 800fd04:	b09c      	sub	sp, #112	@ 0x70
 800fd06:	ab1d      	add	r3, sp, #116	@ 0x74
 800fd08:	9002      	str	r0, [sp, #8]
 800fd0a:	9006      	str	r0, [sp, #24]
 800fd0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd10:	4809      	ldr	r0, [pc, #36]	@ (800fd38 <siprintf+0x38>)
 800fd12:	9107      	str	r1, [sp, #28]
 800fd14:	9104      	str	r1, [sp, #16]
 800fd16:	4909      	ldr	r1, [pc, #36]	@ (800fd3c <siprintf+0x3c>)
 800fd18:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd1c:	9105      	str	r1, [sp, #20]
 800fd1e:	6800      	ldr	r0, [r0, #0]
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	a902      	add	r1, sp, #8
 800fd24:	f002 fb7a 	bl	801241c <_svfiprintf_r>
 800fd28:	9b02      	ldr	r3, [sp, #8]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	701a      	strb	r2, [r3, #0]
 800fd2e:	b01c      	add	sp, #112	@ 0x70
 800fd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd34:	b003      	add	sp, #12
 800fd36:	4770      	bx	lr
 800fd38:	20000050 	.word	0x20000050
 800fd3c:	ffff0208 	.word	0xffff0208

0800fd40 <siscanf>:
 800fd40:	b40e      	push	{r1, r2, r3}
 800fd42:	b530      	push	{r4, r5, lr}
 800fd44:	b09c      	sub	sp, #112	@ 0x70
 800fd46:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fd48:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fd4c:	f854 5b04 	ldr.w	r5, [r4], #4
 800fd50:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fd54:	9002      	str	r0, [sp, #8]
 800fd56:	9006      	str	r0, [sp, #24]
 800fd58:	f7f0 faaa 	bl	80002b0 <strlen>
 800fd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd8c <siscanf+0x4c>)
 800fd5e:	9003      	str	r0, [sp, #12]
 800fd60:	9007      	str	r0, [sp, #28]
 800fd62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd64:	480a      	ldr	r0, [pc, #40]	@ (800fd90 <siscanf+0x50>)
 800fd66:	9401      	str	r4, [sp, #4]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd6c:	9314      	str	r3, [sp, #80]	@ 0x50
 800fd6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd72:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd76:	462a      	mov	r2, r5
 800fd78:	4623      	mov	r3, r4
 800fd7a:	a902      	add	r1, sp, #8
 800fd7c:	6800      	ldr	r0, [r0, #0]
 800fd7e:	f002 fca1 	bl	80126c4 <__ssvfiscanf_r>
 800fd82:	b01c      	add	sp, #112	@ 0x70
 800fd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd88:	b003      	add	sp, #12
 800fd8a:	4770      	bx	lr
 800fd8c:	0800fdb7 	.word	0x0800fdb7
 800fd90:	20000050 	.word	0x20000050

0800fd94 <__sread>:
 800fd94:	b510      	push	{r4, lr}
 800fd96:	460c      	mov	r4, r1
 800fd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd9c:	f000 f894 	bl	800fec8 <_read_r>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	bfab      	itete	ge
 800fda4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fda6:	89a3      	ldrhlt	r3, [r4, #12]
 800fda8:	181b      	addge	r3, r3, r0
 800fdaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdae:	bfac      	ite	ge
 800fdb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdb2:	81a3      	strhlt	r3, [r4, #12]
 800fdb4:	bd10      	pop	{r4, pc}

0800fdb6 <__seofread>:
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	4770      	bx	lr

0800fdba <__swrite>:
 800fdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbe:	461f      	mov	r7, r3
 800fdc0:	898b      	ldrh	r3, [r1, #12]
 800fdc2:	05db      	lsls	r3, r3, #23
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	460c      	mov	r4, r1
 800fdc8:	4616      	mov	r6, r2
 800fdca:	d505      	bpl.n	800fdd8 <__swrite+0x1e>
 800fdcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd0:	2302      	movs	r3, #2
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f000 f866 	bl	800fea4 <_lseek_r>
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fde2:	81a3      	strh	r3, [r4, #12]
 800fde4:	4632      	mov	r2, r6
 800fde6:	463b      	mov	r3, r7
 800fde8:	4628      	mov	r0, r5
 800fdea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdee:	f000 b88d 	b.w	800ff0c <_write_r>

0800fdf2 <__sseek>:
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdfa:	f000 f853 	bl	800fea4 <_lseek_r>
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	bf15      	itete	ne
 800fe04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe0e:	81a3      	strheq	r3, [r4, #12]
 800fe10:	bf18      	it	ne
 800fe12:	81a3      	strhne	r3, [r4, #12]
 800fe14:	bd10      	pop	{r4, pc}

0800fe16 <__sclose>:
 800fe16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe1a:	f000 b833 	b.w	800fe84 <_close_r>

0800fe1e <memcmp>:
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	3901      	subs	r1, #1
 800fe22:	4402      	add	r2, r0
 800fe24:	4290      	cmp	r0, r2
 800fe26:	d101      	bne.n	800fe2c <memcmp+0xe>
 800fe28:	2000      	movs	r0, #0
 800fe2a:	e005      	b.n	800fe38 <memcmp+0x1a>
 800fe2c:	7803      	ldrb	r3, [r0, #0]
 800fe2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fe32:	42a3      	cmp	r3, r4
 800fe34:	d001      	beq.n	800fe3a <memcmp+0x1c>
 800fe36:	1b18      	subs	r0, r3, r4
 800fe38:	bd10      	pop	{r4, pc}
 800fe3a:	3001      	adds	r0, #1
 800fe3c:	e7f2      	b.n	800fe24 <memcmp+0x6>

0800fe3e <memset>:
 800fe3e:	4402      	add	r2, r0
 800fe40:	4603      	mov	r3, r0
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d100      	bne.n	800fe48 <memset+0xa>
 800fe46:	4770      	bx	lr
 800fe48:	f803 1b01 	strb.w	r1, [r3], #1
 800fe4c:	e7f9      	b.n	800fe42 <memset+0x4>

0800fe4e <strstr>:
 800fe4e:	780a      	ldrb	r2, [r1, #0]
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	b96a      	cbnz	r2, 800fe70 <strstr+0x22>
 800fe54:	bd70      	pop	{r4, r5, r6, pc}
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d109      	bne.n	800fe6e <strstr+0x20>
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	4605      	mov	r5, r0
 800fe5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0f6      	beq.n	800fe54 <strstr+0x6>
 800fe66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fe6a:	429e      	cmp	r6, r3
 800fe6c:	d0f7      	beq.n	800fe5e <strstr+0x10>
 800fe6e:	3001      	adds	r0, #1
 800fe70:	7803      	ldrb	r3, [r0, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d1ef      	bne.n	800fe56 <strstr+0x8>
 800fe76:	4618      	mov	r0, r3
 800fe78:	e7ec      	b.n	800fe54 <strstr+0x6>
	...

0800fe7c <_localeconv_r>:
 800fe7c:	4800      	ldr	r0, [pc, #0]	@ (800fe80 <_localeconv_r+0x4>)
 800fe7e:	4770      	bx	lr
 800fe80:	20000190 	.word	0x20000190

0800fe84 <_close_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d06      	ldr	r5, [pc, #24]	@ (800fea0 <_close_r+0x1c>)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	602b      	str	r3, [r5, #0]
 800fe90:	f7f7 fd52 	bl	8007938 <_close>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_close_r+0x1a>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_close_r+0x1a>
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	200018f4 	.word	0x200018f4

0800fea4 <_lseek_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d07      	ldr	r5, [pc, #28]	@ (800fec4 <_lseek_r+0x20>)
 800fea8:	4604      	mov	r4, r0
 800feaa:	4608      	mov	r0, r1
 800feac:	4611      	mov	r1, r2
 800feae:	2200      	movs	r2, #0
 800feb0:	602a      	str	r2, [r5, #0]
 800feb2:	461a      	mov	r2, r3
 800feb4:	f7f7 fd67 	bl	8007986 <_lseek>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_lseek_r+0x1e>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_lseek_r+0x1e>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	200018f4 	.word	0x200018f4

0800fec8 <_read_r>:
 800fec8:	b538      	push	{r3, r4, r5, lr}
 800feca:	4d07      	ldr	r5, [pc, #28]	@ (800fee8 <_read_r+0x20>)
 800fecc:	4604      	mov	r4, r0
 800fece:	4608      	mov	r0, r1
 800fed0:	4611      	mov	r1, r2
 800fed2:	2200      	movs	r2, #0
 800fed4:	602a      	str	r2, [r5, #0]
 800fed6:	461a      	mov	r2, r3
 800fed8:	f7f7 fcf5 	bl	80078c6 <_read>
 800fedc:	1c43      	adds	r3, r0, #1
 800fede:	d102      	bne.n	800fee6 <_read_r+0x1e>
 800fee0:	682b      	ldr	r3, [r5, #0]
 800fee2:	b103      	cbz	r3, 800fee6 <_read_r+0x1e>
 800fee4:	6023      	str	r3, [r4, #0]
 800fee6:	bd38      	pop	{r3, r4, r5, pc}
 800fee8:	200018f4 	.word	0x200018f4

0800feec <_sbrk_r>:
 800feec:	b538      	push	{r3, r4, r5, lr}
 800feee:	4d06      	ldr	r5, [pc, #24]	@ (800ff08 <_sbrk_r+0x1c>)
 800fef0:	2300      	movs	r3, #0
 800fef2:	4604      	mov	r4, r0
 800fef4:	4608      	mov	r0, r1
 800fef6:	602b      	str	r3, [r5, #0]
 800fef8:	f7f7 fd52 	bl	80079a0 <_sbrk>
 800fefc:	1c43      	adds	r3, r0, #1
 800fefe:	d102      	bne.n	800ff06 <_sbrk_r+0x1a>
 800ff00:	682b      	ldr	r3, [r5, #0]
 800ff02:	b103      	cbz	r3, 800ff06 <_sbrk_r+0x1a>
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	200018f4 	.word	0x200018f4

0800ff0c <_write_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4d07      	ldr	r5, [pc, #28]	@ (800ff2c <_write_r+0x20>)
 800ff10:	4604      	mov	r4, r0
 800ff12:	4608      	mov	r0, r1
 800ff14:	4611      	mov	r1, r2
 800ff16:	2200      	movs	r2, #0
 800ff18:	602a      	str	r2, [r5, #0]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	f7f7 fcf0 	bl	8007900 <_write>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_write_r+0x1e>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_write_r+0x1e>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	200018f4 	.word	0x200018f4

0800ff30 <__errno>:
 800ff30:	4b01      	ldr	r3, [pc, #4]	@ (800ff38 <__errno+0x8>)
 800ff32:	6818      	ldr	r0, [r3, #0]
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop
 800ff38:	20000050 	.word	0x20000050

0800ff3c <__libc_init_array>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	4d0d      	ldr	r5, [pc, #52]	@ (800ff74 <__libc_init_array+0x38>)
 800ff40:	4c0d      	ldr	r4, [pc, #52]	@ (800ff78 <__libc_init_array+0x3c>)
 800ff42:	1b64      	subs	r4, r4, r5
 800ff44:	10a4      	asrs	r4, r4, #2
 800ff46:	2600      	movs	r6, #0
 800ff48:	42a6      	cmp	r6, r4
 800ff4a:	d109      	bne.n	800ff60 <__libc_init_array+0x24>
 800ff4c:	4d0b      	ldr	r5, [pc, #44]	@ (800ff7c <__libc_init_array+0x40>)
 800ff4e:	4c0c      	ldr	r4, [pc, #48]	@ (800ff80 <__libc_init_array+0x44>)
 800ff50:	f005 ff76 	bl	8015e40 <_init>
 800ff54:	1b64      	subs	r4, r4, r5
 800ff56:	10a4      	asrs	r4, r4, #2
 800ff58:	2600      	movs	r6, #0
 800ff5a:	42a6      	cmp	r6, r4
 800ff5c:	d105      	bne.n	800ff6a <__libc_init_array+0x2e>
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff64:	4798      	blx	r3
 800ff66:	3601      	adds	r6, #1
 800ff68:	e7ee      	b.n	800ff48 <__libc_init_array+0xc>
 800ff6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff6e:	4798      	blx	r3
 800ff70:	3601      	adds	r6, #1
 800ff72:	e7f2      	b.n	800ff5a <__libc_init_array+0x1e>
 800ff74:	080166d0 	.word	0x080166d0
 800ff78:	080166d0 	.word	0x080166d0
 800ff7c:	080166d0 	.word	0x080166d0
 800ff80:	080166d4 	.word	0x080166d4

0800ff84 <__retarget_lock_init_recursive>:
 800ff84:	4770      	bx	lr

0800ff86 <__retarget_lock_acquire_recursive>:
 800ff86:	4770      	bx	lr

0800ff88 <__retarget_lock_release_recursive>:
 800ff88:	4770      	bx	lr

0800ff8a <memcpy>:
 800ff8a:	440a      	add	r2, r1
 800ff8c:	4291      	cmp	r1, r2
 800ff8e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff92:	d100      	bne.n	800ff96 <memcpy+0xc>
 800ff94:	4770      	bx	lr
 800ff96:	b510      	push	{r4, lr}
 800ff98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffa0:	4291      	cmp	r1, r2
 800ffa2:	d1f9      	bne.n	800ff98 <memcpy+0xe>
 800ffa4:	bd10      	pop	{r4, pc}
	...

0800ffa8 <nanf>:
 800ffa8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ffb0 <nanf+0x8>
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	7fc00000 	.word	0x7fc00000

0800ffb4 <quorem>:
 800ffb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb8:	6903      	ldr	r3, [r0, #16]
 800ffba:	690c      	ldr	r4, [r1, #16]
 800ffbc:	42a3      	cmp	r3, r4
 800ffbe:	4607      	mov	r7, r0
 800ffc0:	db7e      	blt.n	80100c0 <quorem+0x10c>
 800ffc2:	3c01      	subs	r4, #1
 800ffc4:	f101 0814 	add.w	r8, r1, #20
 800ffc8:	00a3      	lsls	r3, r4, #2
 800ffca:	f100 0514 	add.w	r5, r0, #20
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffd4:	9301      	str	r3, [sp, #4]
 800ffd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ffe6:	fbb2 f6f3 	udiv	r6, r2, r3
 800ffea:	d32e      	bcc.n	801004a <quorem+0x96>
 800ffec:	f04f 0a00 	mov.w	sl, #0
 800fff0:	46c4      	mov	ip, r8
 800fff2:	46ae      	mov	lr, r5
 800fff4:	46d3      	mov	fp, sl
 800fff6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fffa:	b298      	uxth	r0, r3
 800fffc:	fb06 a000 	mla	r0, r6, r0, sl
 8010000:	0c02      	lsrs	r2, r0, #16
 8010002:	0c1b      	lsrs	r3, r3, #16
 8010004:	fb06 2303 	mla	r3, r6, r3, r2
 8010008:	f8de 2000 	ldr.w	r2, [lr]
 801000c:	b280      	uxth	r0, r0
 801000e:	b292      	uxth	r2, r2
 8010010:	1a12      	subs	r2, r2, r0
 8010012:	445a      	add	r2, fp
 8010014:	f8de 0000 	ldr.w	r0, [lr]
 8010018:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801001c:	b29b      	uxth	r3, r3
 801001e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010022:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010026:	b292      	uxth	r2, r2
 8010028:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801002c:	45e1      	cmp	r9, ip
 801002e:	f84e 2b04 	str.w	r2, [lr], #4
 8010032:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010036:	d2de      	bcs.n	800fff6 <quorem+0x42>
 8010038:	9b00      	ldr	r3, [sp, #0]
 801003a:	58eb      	ldr	r3, [r5, r3]
 801003c:	b92b      	cbnz	r3, 801004a <quorem+0x96>
 801003e:	9b01      	ldr	r3, [sp, #4]
 8010040:	3b04      	subs	r3, #4
 8010042:	429d      	cmp	r5, r3
 8010044:	461a      	mov	r2, r3
 8010046:	d32f      	bcc.n	80100a8 <quorem+0xf4>
 8010048:	613c      	str	r4, [r7, #16]
 801004a:	4638      	mov	r0, r7
 801004c:	f001 f916 	bl	801127c <__mcmp>
 8010050:	2800      	cmp	r0, #0
 8010052:	db25      	blt.n	80100a0 <quorem+0xec>
 8010054:	4629      	mov	r1, r5
 8010056:	2000      	movs	r0, #0
 8010058:	f858 2b04 	ldr.w	r2, [r8], #4
 801005c:	f8d1 c000 	ldr.w	ip, [r1]
 8010060:	fa1f fe82 	uxth.w	lr, r2
 8010064:	fa1f f38c 	uxth.w	r3, ip
 8010068:	eba3 030e 	sub.w	r3, r3, lr
 801006c:	4403      	add	r3, r0
 801006e:	0c12      	lsrs	r2, r2, #16
 8010070:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010074:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010078:	b29b      	uxth	r3, r3
 801007a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801007e:	45c1      	cmp	r9, r8
 8010080:	f841 3b04 	str.w	r3, [r1], #4
 8010084:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010088:	d2e6      	bcs.n	8010058 <quorem+0xa4>
 801008a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801008e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010092:	b922      	cbnz	r2, 801009e <quorem+0xea>
 8010094:	3b04      	subs	r3, #4
 8010096:	429d      	cmp	r5, r3
 8010098:	461a      	mov	r2, r3
 801009a:	d30b      	bcc.n	80100b4 <quorem+0x100>
 801009c:	613c      	str	r4, [r7, #16]
 801009e:	3601      	adds	r6, #1
 80100a0:	4630      	mov	r0, r6
 80100a2:	b003      	add	sp, #12
 80100a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a8:	6812      	ldr	r2, [r2, #0]
 80100aa:	3b04      	subs	r3, #4
 80100ac:	2a00      	cmp	r2, #0
 80100ae:	d1cb      	bne.n	8010048 <quorem+0x94>
 80100b0:	3c01      	subs	r4, #1
 80100b2:	e7c6      	b.n	8010042 <quorem+0x8e>
 80100b4:	6812      	ldr	r2, [r2, #0]
 80100b6:	3b04      	subs	r3, #4
 80100b8:	2a00      	cmp	r2, #0
 80100ba:	d1ef      	bne.n	801009c <quorem+0xe8>
 80100bc:	3c01      	subs	r4, #1
 80100be:	e7ea      	b.n	8010096 <quorem+0xe2>
 80100c0:	2000      	movs	r0, #0
 80100c2:	e7ee      	b.n	80100a2 <quorem+0xee>
 80100c4:	0000      	movs	r0, r0
	...

080100c8 <_dtoa_r>:
 80100c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	69c7      	ldr	r7, [r0, #28]
 80100ce:	b099      	sub	sp, #100	@ 0x64
 80100d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100d4:	ec55 4b10 	vmov	r4, r5, d0
 80100d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80100da:	9109      	str	r1, [sp, #36]	@ 0x24
 80100dc:	4683      	mov	fp, r0
 80100de:	920e      	str	r2, [sp, #56]	@ 0x38
 80100e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100e2:	b97f      	cbnz	r7, 8010104 <_dtoa_r+0x3c>
 80100e4:	2010      	movs	r0, #16
 80100e6:	f000 fdfd 	bl	8010ce4 <malloc>
 80100ea:	4602      	mov	r2, r0
 80100ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80100f0:	b920      	cbnz	r0, 80100fc <_dtoa_r+0x34>
 80100f2:	4ba7      	ldr	r3, [pc, #668]	@ (8010390 <_dtoa_r+0x2c8>)
 80100f4:	21ef      	movs	r1, #239	@ 0xef
 80100f6:	48a7      	ldr	r0, [pc, #668]	@ (8010394 <_dtoa_r+0x2cc>)
 80100f8:	f002 fefa 	bl	8012ef0 <__assert_func>
 80100fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010100:	6007      	str	r7, [r0, #0]
 8010102:	60c7      	str	r7, [r0, #12]
 8010104:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010108:	6819      	ldr	r1, [r3, #0]
 801010a:	b159      	cbz	r1, 8010124 <_dtoa_r+0x5c>
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	604a      	str	r2, [r1, #4]
 8010110:	2301      	movs	r3, #1
 8010112:	4093      	lsls	r3, r2
 8010114:	608b      	str	r3, [r1, #8]
 8010116:	4658      	mov	r0, fp
 8010118:	f000 fe2c 	bl	8010d74 <_Bfree>
 801011c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	1e2b      	subs	r3, r5, #0
 8010126:	bfb9      	ittee	lt
 8010128:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801012c:	9303      	strlt	r3, [sp, #12]
 801012e:	2300      	movge	r3, #0
 8010130:	6033      	strge	r3, [r6, #0]
 8010132:	9f03      	ldr	r7, [sp, #12]
 8010134:	4b98      	ldr	r3, [pc, #608]	@ (8010398 <_dtoa_r+0x2d0>)
 8010136:	bfbc      	itt	lt
 8010138:	2201      	movlt	r2, #1
 801013a:	6032      	strlt	r2, [r6, #0]
 801013c:	43bb      	bics	r3, r7
 801013e:	d112      	bne.n	8010166 <_dtoa_r+0x9e>
 8010140:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010142:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010146:	6013      	str	r3, [r2, #0]
 8010148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801014c:	4323      	orrs	r3, r4
 801014e:	f000 854d 	beq.w	8010bec <_dtoa_r+0xb24>
 8010152:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010154:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80103ac <_dtoa_r+0x2e4>
 8010158:	2b00      	cmp	r3, #0
 801015a:	f000 854f 	beq.w	8010bfc <_dtoa_r+0xb34>
 801015e:	f10a 0303 	add.w	r3, sl, #3
 8010162:	f000 bd49 	b.w	8010bf8 <_dtoa_r+0xb30>
 8010166:	ed9d 7b02 	vldr	d7, [sp, #8]
 801016a:	2200      	movs	r2, #0
 801016c:	ec51 0b17 	vmov	r0, r1, d7
 8010170:	2300      	movs	r3, #0
 8010172:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010176:	f7f0 fcc7 	bl	8000b08 <__aeabi_dcmpeq>
 801017a:	4680      	mov	r8, r0
 801017c:	b158      	cbz	r0, 8010196 <_dtoa_r+0xce>
 801017e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010180:	2301      	movs	r3, #1
 8010182:	6013      	str	r3, [r2, #0]
 8010184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010186:	b113      	cbz	r3, 801018e <_dtoa_r+0xc6>
 8010188:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801018a:	4b84      	ldr	r3, [pc, #528]	@ (801039c <_dtoa_r+0x2d4>)
 801018c:	6013      	str	r3, [r2, #0]
 801018e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80103b0 <_dtoa_r+0x2e8>
 8010192:	f000 bd33 	b.w	8010bfc <_dtoa_r+0xb34>
 8010196:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801019a:	aa16      	add	r2, sp, #88	@ 0x58
 801019c:	a917      	add	r1, sp, #92	@ 0x5c
 801019e:	4658      	mov	r0, fp
 80101a0:	f001 f98c 	bl	80114bc <__d2b>
 80101a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80101a8:	4681      	mov	r9, r0
 80101aa:	2e00      	cmp	r6, #0
 80101ac:	d077      	beq.n	801029e <_dtoa_r+0x1d6>
 80101ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80101b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80101b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80101c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80101c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80101c8:	4619      	mov	r1, r3
 80101ca:	2200      	movs	r2, #0
 80101cc:	4b74      	ldr	r3, [pc, #464]	@ (80103a0 <_dtoa_r+0x2d8>)
 80101ce:	f7f0 f87b 	bl	80002c8 <__aeabi_dsub>
 80101d2:	a369      	add	r3, pc, #420	@ (adr r3, 8010378 <_dtoa_r+0x2b0>)
 80101d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d8:	f7f0 fa2e 	bl	8000638 <__aeabi_dmul>
 80101dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010380 <_dtoa_r+0x2b8>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	f7f0 f873 	bl	80002cc <__adddf3>
 80101e6:	4604      	mov	r4, r0
 80101e8:	4630      	mov	r0, r6
 80101ea:	460d      	mov	r5, r1
 80101ec:	f7f0 f9ba 	bl	8000564 <__aeabi_i2d>
 80101f0:	a365      	add	r3, pc, #404	@ (adr r3, 8010388 <_dtoa_r+0x2c0>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	f7f0 fa1f 	bl	8000638 <__aeabi_dmul>
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	4620      	mov	r0, r4
 8010200:	4629      	mov	r1, r5
 8010202:	f7f0 f863 	bl	80002cc <__adddf3>
 8010206:	4604      	mov	r4, r0
 8010208:	460d      	mov	r5, r1
 801020a:	f7f0 fcc5 	bl	8000b98 <__aeabi_d2iz>
 801020e:	2200      	movs	r2, #0
 8010210:	4607      	mov	r7, r0
 8010212:	2300      	movs	r3, #0
 8010214:	4620      	mov	r0, r4
 8010216:	4629      	mov	r1, r5
 8010218:	f7f0 fc80 	bl	8000b1c <__aeabi_dcmplt>
 801021c:	b140      	cbz	r0, 8010230 <_dtoa_r+0x168>
 801021e:	4638      	mov	r0, r7
 8010220:	f7f0 f9a0 	bl	8000564 <__aeabi_i2d>
 8010224:	4622      	mov	r2, r4
 8010226:	462b      	mov	r3, r5
 8010228:	f7f0 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 801022c:	b900      	cbnz	r0, 8010230 <_dtoa_r+0x168>
 801022e:	3f01      	subs	r7, #1
 8010230:	2f16      	cmp	r7, #22
 8010232:	d851      	bhi.n	80102d8 <_dtoa_r+0x210>
 8010234:	4b5b      	ldr	r3, [pc, #364]	@ (80103a4 <_dtoa_r+0x2dc>)
 8010236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010242:	f7f0 fc6b 	bl	8000b1c <__aeabi_dcmplt>
 8010246:	2800      	cmp	r0, #0
 8010248:	d048      	beq.n	80102dc <_dtoa_r+0x214>
 801024a:	3f01      	subs	r7, #1
 801024c:	2300      	movs	r3, #0
 801024e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010250:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010252:	1b9b      	subs	r3, r3, r6
 8010254:	1e5a      	subs	r2, r3, #1
 8010256:	bf44      	itt	mi
 8010258:	f1c3 0801 	rsbmi	r8, r3, #1
 801025c:	2300      	movmi	r3, #0
 801025e:	9208      	str	r2, [sp, #32]
 8010260:	bf54      	ite	pl
 8010262:	f04f 0800 	movpl.w	r8, #0
 8010266:	9308      	strmi	r3, [sp, #32]
 8010268:	2f00      	cmp	r7, #0
 801026a:	db39      	blt.n	80102e0 <_dtoa_r+0x218>
 801026c:	9b08      	ldr	r3, [sp, #32]
 801026e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010270:	443b      	add	r3, r7
 8010272:	9308      	str	r3, [sp, #32]
 8010274:	2300      	movs	r3, #0
 8010276:	930a      	str	r3, [sp, #40]	@ 0x28
 8010278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801027a:	2b09      	cmp	r3, #9
 801027c:	d864      	bhi.n	8010348 <_dtoa_r+0x280>
 801027e:	2b05      	cmp	r3, #5
 8010280:	bfc4      	itt	gt
 8010282:	3b04      	subgt	r3, #4
 8010284:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010288:	f1a3 0302 	sub.w	r3, r3, #2
 801028c:	bfcc      	ite	gt
 801028e:	2400      	movgt	r4, #0
 8010290:	2401      	movle	r4, #1
 8010292:	2b03      	cmp	r3, #3
 8010294:	d863      	bhi.n	801035e <_dtoa_r+0x296>
 8010296:	e8df f003 	tbb	[pc, r3]
 801029a:	372a      	.short	0x372a
 801029c:	5535      	.short	0x5535
 801029e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80102a2:	441e      	add	r6, r3
 80102a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80102a8:	2b20      	cmp	r3, #32
 80102aa:	bfc1      	itttt	gt
 80102ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80102b0:	409f      	lslgt	r7, r3
 80102b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80102b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80102ba:	bfd6      	itet	le
 80102bc:	f1c3 0320 	rsble	r3, r3, #32
 80102c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80102c4:	fa04 f003 	lslle.w	r0, r4, r3
 80102c8:	f7f0 f93c 	bl	8000544 <__aeabi_ui2d>
 80102cc:	2201      	movs	r2, #1
 80102ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80102d2:	3e01      	subs	r6, #1
 80102d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80102d6:	e777      	b.n	80101c8 <_dtoa_r+0x100>
 80102d8:	2301      	movs	r3, #1
 80102da:	e7b8      	b.n	801024e <_dtoa_r+0x186>
 80102dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80102de:	e7b7      	b.n	8010250 <_dtoa_r+0x188>
 80102e0:	427b      	negs	r3, r7
 80102e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80102e4:	2300      	movs	r3, #0
 80102e6:	eba8 0807 	sub.w	r8, r8, r7
 80102ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102ec:	e7c4      	b.n	8010278 <_dtoa_r+0x1b0>
 80102ee:	2300      	movs	r3, #0
 80102f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	dc35      	bgt.n	8010364 <_dtoa_r+0x29c>
 80102f8:	2301      	movs	r3, #1
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	9307      	str	r3, [sp, #28]
 80102fe:	461a      	mov	r2, r3
 8010300:	920e      	str	r2, [sp, #56]	@ 0x38
 8010302:	e00b      	b.n	801031c <_dtoa_r+0x254>
 8010304:	2301      	movs	r3, #1
 8010306:	e7f3      	b.n	80102f0 <_dtoa_r+0x228>
 8010308:	2300      	movs	r3, #0
 801030a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801030c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801030e:	18fb      	adds	r3, r7, r3
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	3301      	adds	r3, #1
 8010314:	2b01      	cmp	r3, #1
 8010316:	9307      	str	r3, [sp, #28]
 8010318:	bfb8      	it	lt
 801031a:	2301      	movlt	r3, #1
 801031c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010320:	2100      	movs	r1, #0
 8010322:	2204      	movs	r2, #4
 8010324:	f102 0514 	add.w	r5, r2, #20
 8010328:	429d      	cmp	r5, r3
 801032a:	d91f      	bls.n	801036c <_dtoa_r+0x2a4>
 801032c:	6041      	str	r1, [r0, #4]
 801032e:	4658      	mov	r0, fp
 8010330:	f000 fce0 	bl	8010cf4 <_Balloc>
 8010334:	4682      	mov	sl, r0
 8010336:	2800      	cmp	r0, #0
 8010338:	d13c      	bne.n	80103b4 <_dtoa_r+0x2ec>
 801033a:	4b1b      	ldr	r3, [pc, #108]	@ (80103a8 <_dtoa_r+0x2e0>)
 801033c:	4602      	mov	r2, r0
 801033e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010342:	e6d8      	b.n	80100f6 <_dtoa_r+0x2e>
 8010344:	2301      	movs	r3, #1
 8010346:	e7e0      	b.n	801030a <_dtoa_r+0x242>
 8010348:	2401      	movs	r4, #1
 801034a:	2300      	movs	r3, #0
 801034c:	9309      	str	r3, [sp, #36]	@ 0x24
 801034e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010350:	f04f 33ff 	mov.w	r3, #4294967295
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	9307      	str	r3, [sp, #28]
 8010358:	2200      	movs	r2, #0
 801035a:	2312      	movs	r3, #18
 801035c:	e7d0      	b.n	8010300 <_dtoa_r+0x238>
 801035e:	2301      	movs	r3, #1
 8010360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010362:	e7f5      	b.n	8010350 <_dtoa_r+0x288>
 8010364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010366:	9300      	str	r3, [sp, #0]
 8010368:	9307      	str	r3, [sp, #28]
 801036a:	e7d7      	b.n	801031c <_dtoa_r+0x254>
 801036c:	3101      	adds	r1, #1
 801036e:	0052      	lsls	r2, r2, #1
 8010370:	e7d8      	b.n	8010324 <_dtoa_r+0x25c>
 8010372:	bf00      	nop
 8010374:	f3af 8000 	nop.w
 8010378:	636f4361 	.word	0x636f4361
 801037c:	3fd287a7 	.word	0x3fd287a7
 8010380:	8b60c8b3 	.word	0x8b60c8b3
 8010384:	3fc68a28 	.word	0x3fc68a28
 8010388:	509f79fb 	.word	0x509f79fb
 801038c:	3fd34413 	.word	0x3fd34413
 8010390:	080160b4 	.word	0x080160b4
 8010394:	080160cb 	.word	0x080160cb
 8010398:	7ff00000 	.word	0x7ff00000
 801039c:	08016411 	.word	0x08016411
 80103a0:	3ff80000 	.word	0x3ff80000
 80103a4:	080161c8 	.word	0x080161c8
 80103a8:	08016123 	.word	0x08016123
 80103ac:	080160b0 	.word	0x080160b0
 80103b0:	08016410 	.word	0x08016410
 80103b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80103b8:	6018      	str	r0, [r3, #0]
 80103ba:	9b07      	ldr	r3, [sp, #28]
 80103bc:	2b0e      	cmp	r3, #14
 80103be:	f200 80a4 	bhi.w	801050a <_dtoa_r+0x442>
 80103c2:	2c00      	cmp	r4, #0
 80103c4:	f000 80a1 	beq.w	801050a <_dtoa_r+0x442>
 80103c8:	2f00      	cmp	r7, #0
 80103ca:	dd33      	ble.n	8010434 <_dtoa_r+0x36c>
 80103cc:	4bad      	ldr	r3, [pc, #692]	@ (8010684 <_dtoa_r+0x5bc>)
 80103ce:	f007 020f 	and.w	r2, r7, #15
 80103d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103d6:	ed93 7b00 	vldr	d7, [r3]
 80103da:	05f8      	lsls	r0, r7, #23
 80103dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80103e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80103e4:	d516      	bpl.n	8010414 <_dtoa_r+0x34c>
 80103e6:	4ba8      	ldr	r3, [pc, #672]	@ (8010688 <_dtoa_r+0x5c0>)
 80103e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80103f0:	f7f0 fa4c 	bl	800088c <__aeabi_ddiv>
 80103f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103f8:	f004 040f 	and.w	r4, r4, #15
 80103fc:	2603      	movs	r6, #3
 80103fe:	4da2      	ldr	r5, [pc, #648]	@ (8010688 <_dtoa_r+0x5c0>)
 8010400:	b954      	cbnz	r4, 8010418 <_dtoa_r+0x350>
 8010402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801040a:	f7f0 fa3f 	bl	800088c <__aeabi_ddiv>
 801040e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010412:	e028      	b.n	8010466 <_dtoa_r+0x39e>
 8010414:	2602      	movs	r6, #2
 8010416:	e7f2      	b.n	80103fe <_dtoa_r+0x336>
 8010418:	07e1      	lsls	r1, r4, #31
 801041a:	d508      	bpl.n	801042e <_dtoa_r+0x366>
 801041c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010420:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010424:	f7f0 f908 	bl	8000638 <__aeabi_dmul>
 8010428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801042c:	3601      	adds	r6, #1
 801042e:	1064      	asrs	r4, r4, #1
 8010430:	3508      	adds	r5, #8
 8010432:	e7e5      	b.n	8010400 <_dtoa_r+0x338>
 8010434:	f000 80d2 	beq.w	80105dc <_dtoa_r+0x514>
 8010438:	427c      	negs	r4, r7
 801043a:	4b92      	ldr	r3, [pc, #584]	@ (8010684 <_dtoa_r+0x5bc>)
 801043c:	4d92      	ldr	r5, [pc, #584]	@ (8010688 <_dtoa_r+0x5c0>)
 801043e:	f004 020f 	and.w	r2, r4, #15
 8010442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801044e:	f7f0 f8f3 	bl	8000638 <__aeabi_dmul>
 8010452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010456:	1124      	asrs	r4, r4, #4
 8010458:	2300      	movs	r3, #0
 801045a:	2602      	movs	r6, #2
 801045c:	2c00      	cmp	r4, #0
 801045e:	f040 80b2 	bne.w	80105c6 <_dtoa_r+0x4fe>
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1d3      	bne.n	801040e <_dtoa_r+0x346>
 8010466:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010468:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 80b7 	beq.w	80105e0 <_dtoa_r+0x518>
 8010472:	4b86      	ldr	r3, [pc, #536]	@ (801068c <_dtoa_r+0x5c4>)
 8010474:	2200      	movs	r2, #0
 8010476:	4620      	mov	r0, r4
 8010478:	4629      	mov	r1, r5
 801047a:	f7f0 fb4f 	bl	8000b1c <__aeabi_dcmplt>
 801047e:	2800      	cmp	r0, #0
 8010480:	f000 80ae 	beq.w	80105e0 <_dtoa_r+0x518>
 8010484:	9b07      	ldr	r3, [sp, #28]
 8010486:	2b00      	cmp	r3, #0
 8010488:	f000 80aa 	beq.w	80105e0 <_dtoa_r+0x518>
 801048c:	9b00      	ldr	r3, [sp, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	dd37      	ble.n	8010502 <_dtoa_r+0x43a>
 8010492:	1e7b      	subs	r3, r7, #1
 8010494:	9304      	str	r3, [sp, #16]
 8010496:	4620      	mov	r0, r4
 8010498:	4b7d      	ldr	r3, [pc, #500]	@ (8010690 <_dtoa_r+0x5c8>)
 801049a:	2200      	movs	r2, #0
 801049c:	4629      	mov	r1, r5
 801049e:	f7f0 f8cb 	bl	8000638 <__aeabi_dmul>
 80104a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104a6:	9c00      	ldr	r4, [sp, #0]
 80104a8:	3601      	adds	r6, #1
 80104aa:	4630      	mov	r0, r6
 80104ac:	f7f0 f85a 	bl	8000564 <__aeabi_i2d>
 80104b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104b4:	f7f0 f8c0 	bl	8000638 <__aeabi_dmul>
 80104b8:	4b76      	ldr	r3, [pc, #472]	@ (8010694 <_dtoa_r+0x5cc>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	f7ef ff06 	bl	80002cc <__adddf3>
 80104c0:	4605      	mov	r5, r0
 80104c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80104c6:	2c00      	cmp	r4, #0
 80104c8:	f040 808d 	bne.w	80105e6 <_dtoa_r+0x51e>
 80104cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d0:	4b71      	ldr	r3, [pc, #452]	@ (8010698 <_dtoa_r+0x5d0>)
 80104d2:	2200      	movs	r2, #0
 80104d4:	f7ef fef8 	bl	80002c8 <__aeabi_dsub>
 80104d8:	4602      	mov	r2, r0
 80104da:	460b      	mov	r3, r1
 80104dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104e0:	462a      	mov	r2, r5
 80104e2:	4633      	mov	r3, r6
 80104e4:	f7f0 fb38 	bl	8000b58 <__aeabi_dcmpgt>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	f040 828b 	bne.w	8010a04 <_dtoa_r+0x93c>
 80104ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f2:	462a      	mov	r2, r5
 80104f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80104f8:	f7f0 fb10 	bl	8000b1c <__aeabi_dcmplt>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	f040 8128 	bne.w	8010752 <_dtoa_r+0x68a>
 8010502:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010506:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801050a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801050c:	2b00      	cmp	r3, #0
 801050e:	f2c0 815a 	blt.w	80107c6 <_dtoa_r+0x6fe>
 8010512:	2f0e      	cmp	r7, #14
 8010514:	f300 8157 	bgt.w	80107c6 <_dtoa_r+0x6fe>
 8010518:	4b5a      	ldr	r3, [pc, #360]	@ (8010684 <_dtoa_r+0x5bc>)
 801051a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801051e:	ed93 7b00 	vldr	d7, [r3]
 8010522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010524:	2b00      	cmp	r3, #0
 8010526:	ed8d 7b00 	vstr	d7, [sp]
 801052a:	da03      	bge.n	8010534 <_dtoa_r+0x46c>
 801052c:	9b07      	ldr	r3, [sp, #28]
 801052e:	2b00      	cmp	r3, #0
 8010530:	f340 8101 	ble.w	8010736 <_dtoa_r+0x66e>
 8010534:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010538:	4656      	mov	r6, sl
 801053a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801053e:	4620      	mov	r0, r4
 8010540:	4629      	mov	r1, r5
 8010542:	f7f0 f9a3 	bl	800088c <__aeabi_ddiv>
 8010546:	f7f0 fb27 	bl	8000b98 <__aeabi_d2iz>
 801054a:	4680      	mov	r8, r0
 801054c:	f7f0 f80a 	bl	8000564 <__aeabi_i2d>
 8010550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010554:	f7f0 f870 	bl	8000638 <__aeabi_dmul>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	4620      	mov	r0, r4
 801055e:	4629      	mov	r1, r5
 8010560:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010564:	f7ef feb0 	bl	80002c8 <__aeabi_dsub>
 8010568:	f806 4b01 	strb.w	r4, [r6], #1
 801056c:	9d07      	ldr	r5, [sp, #28]
 801056e:	eba6 040a 	sub.w	r4, r6, sl
 8010572:	42a5      	cmp	r5, r4
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	f040 8117 	bne.w	80107aa <_dtoa_r+0x6e2>
 801057c:	f7ef fea6 	bl	80002cc <__adddf3>
 8010580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010584:	4604      	mov	r4, r0
 8010586:	460d      	mov	r5, r1
 8010588:	f7f0 fae6 	bl	8000b58 <__aeabi_dcmpgt>
 801058c:	2800      	cmp	r0, #0
 801058e:	f040 80f9 	bne.w	8010784 <_dtoa_r+0x6bc>
 8010592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010596:	4620      	mov	r0, r4
 8010598:	4629      	mov	r1, r5
 801059a:	f7f0 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 801059e:	b118      	cbz	r0, 80105a8 <_dtoa_r+0x4e0>
 80105a0:	f018 0f01 	tst.w	r8, #1
 80105a4:	f040 80ee 	bne.w	8010784 <_dtoa_r+0x6bc>
 80105a8:	4649      	mov	r1, r9
 80105aa:	4658      	mov	r0, fp
 80105ac:	f000 fbe2 	bl	8010d74 <_Bfree>
 80105b0:	2300      	movs	r3, #0
 80105b2:	7033      	strb	r3, [r6, #0]
 80105b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105b6:	3701      	adds	r7, #1
 80105b8:	601f      	str	r7, [r3, #0]
 80105ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f000 831d 	beq.w	8010bfc <_dtoa_r+0xb34>
 80105c2:	601e      	str	r6, [r3, #0]
 80105c4:	e31a      	b.n	8010bfc <_dtoa_r+0xb34>
 80105c6:	07e2      	lsls	r2, r4, #31
 80105c8:	d505      	bpl.n	80105d6 <_dtoa_r+0x50e>
 80105ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105ce:	f7f0 f833 	bl	8000638 <__aeabi_dmul>
 80105d2:	3601      	adds	r6, #1
 80105d4:	2301      	movs	r3, #1
 80105d6:	1064      	asrs	r4, r4, #1
 80105d8:	3508      	adds	r5, #8
 80105da:	e73f      	b.n	801045c <_dtoa_r+0x394>
 80105dc:	2602      	movs	r6, #2
 80105de:	e742      	b.n	8010466 <_dtoa_r+0x39e>
 80105e0:	9c07      	ldr	r4, [sp, #28]
 80105e2:	9704      	str	r7, [sp, #16]
 80105e4:	e761      	b.n	80104aa <_dtoa_r+0x3e2>
 80105e6:	4b27      	ldr	r3, [pc, #156]	@ (8010684 <_dtoa_r+0x5bc>)
 80105e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105f2:	4454      	add	r4, sl
 80105f4:	2900      	cmp	r1, #0
 80105f6:	d053      	beq.n	80106a0 <_dtoa_r+0x5d8>
 80105f8:	4928      	ldr	r1, [pc, #160]	@ (801069c <_dtoa_r+0x5d4>)
 80105fa:	2000      	movs	r0, #0
 80105fc:	f7f0 f946 	bl	800088c <__aeabi_ddiv>
 8010600:	4633      	mov	r3, r6
 8010602:	462a      	mov	r2, r5
 8010604:	f7ef fe60 	bl	80002c8 <__aeabi_dsub>
 8010608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801060c:	4656      	mov	r6, sl
 801060e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010612:	f7f0 fac1 	bl	8000b98 <__aeabi_d2iz>
 8010616:	4605      	mov	r5, r0
 8010618:	f7ef ffa4 	bl	8000564 <__aeabi_i2d>
 801061c:	4602      	mov	r2, r0
 801061e:	460b      	mov	r3, r1
 8010620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010624:	f7ef fe50 	bl	80002c8 <__aeabi_dsub>
 8010628:	3530      	adds	r5, #48	@ 0x30
 801062a:	4602      	mov	r2, r0
 801062c:	460b      	mov	r3, r1
 801062e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010632:	f806 5b01 	strb.w	r5, [r6], #1
 8010636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801063a:	f7f0 fa6f 	bl	8000b1c <__aeabi_dcmplt>
 801063e:	2800      	cmp	r0, #0
 8010640:	d171      	bne.n	8010726 <_dtoa_r+0x65e>
 8010642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010646:	4911      	ldr	r1, [pc, #68]	@ (801068c <_dtoa_r+0x5c4>)
 8010648:	2000      	movs	r0, #0
 801064a:	f7ef fe3d 	bl	80002c8 <__aeabi_dsub>
 801064e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010652:	f7f0 fa63 	bl	8000b1c <__aeabi_dcmplt>
 8010656:	2800      	cmp	r0, #0
 8010658:	f040 8095 	bne.w	8010786 <_dtoa_r+0x6be>
 801065c:	42a6      	cmp	r6, r4
 801065e:	f43f af50 	beq.w	8010502 <_dtoa_r+0x43a>
 8010662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010666:	4b0a      	ldr	r3, [pc, #40]	@ (8010690 <_dtoa_r+0x5c8>)
 8010668:	2200      	movs	r2, #0
 801066a:	f7ef ffe5 	bl	8000638 <__aeabi_dmul>
 801066e:	4b08      	ldr	r3, [pc, #32]	@ (8010690 <_dtoa_r+0x5c8>)
 8010670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010674:	2200      	movs	r2, #0
 8010676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801067a:	f7ef ffdd 	bl	8000638 <__aeabi_dmul>
 801067e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010682:	e7c4      	b.n	801060e <_dtoa_r+0x546>
 8010684:	080161c8 	.word	0x080161c8
 8010688:	080161a0 	.word	0x080161a0
 801068c:	3ff00000 	.word	0x3ff00000
 8010690:	40240000 	.word	0x40240000
 8010694:	401c0000 	.word	0x401c0000
 8010698:	40140000 	.word	0x40140000
 801069c:	3fe00000 	.word	0x3fe00000
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	f7ef ffc8 	bl	8000638 <__aeabi_dmul>
 80106a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80106ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80106ae:	4656      	mov	r6, sl
 80106b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106b4:	f7f0 fa70 	bl	8000b98 <__aeabi_d2iz>
 80106b8:	4605      	mov	r5, r0
 80106ba:	f7ef ff53 	bl	8000564 <__aeabi_i2d>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106c6:	f7ef fdff 	bl	80002c8 <__aeabi_dsub>
 80106ca:	3530      	adds	r5, #48	@ 0x30
 80106cc:	f806 5b01 	strb.w	r5, [r6], #1
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	42a6      	cmp	r6, r4
 80106d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106da:	f04f 0200 	mov.w	r2, #0
 80106de:	d124      	bne.n	801072a <_dtoa_r+0x662>
 80106e0:	4bac      	ldr	r3, [pc, #688]	@ (8010994 <_dtoa_r+0x8cc>)
 80106e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80106e6:	f7ef fdf1 	bl	80002cc <__adddf3>
 80106ea:	4602      	mov	r2, r0
 80106ec:	460b      	mov	r3, r1
 80106ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106f2:	f7f0 fa31 	bl	8000b58 <__aeabi_dcmpgt>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d145      	bne.n	8010786 <_dtoa_r+0x6be>
 80106fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80106fe:	49a5      	ldr	r1, [pc, #660]	@ (8010994 <_dtoa_r+0x8cc>)
 8010700:	2000      	movs	r0, #0
 8010702:	f7ef fde1 	bl	80002c8 <__aeabi_dsub>
 8010706:	4602      	mov	r2, r0
 8010708:	460b      	mov	r3, r1
 801070a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801070e:	f7f0 fa05 	bl	8000b1c <__aeabi_dcmplt>
 8010712:	2800      	cmp	r0, #0
 8010714:	f43f aef5 	beq.w	8010502 <_dtoa_r+0x43a>
 8010718:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801071a:	1e73      	subs	r3, r6, #1
 801071c:	9315      	str	r3, [sp, #84]	@ 0x54
 801071e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010722:	2b30      	cmp	r3, #48	@ 0x30
 8010724:	d0f8      	beq.n	8010718 <_dtoa_r+0x650>
 8010726:	9f04      	ldr	r7, [sp, #16]
 8010728:	e73e      	b.n	80105a8 <_dtoa_r+0x4e0>
 801072a:	4b9b      	ldr	r3, [pc, #620]	@ (8010998 <_dtoa_r+0x8d0>)
 801072c:	f7ef ff84 	bl	8000638 <__aeabi_dmul>
 8010730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010734:	e7bc      	b.n	80106b0 <_dtoa_r+0x5e8>
 8010736:	d10c      	bne.n	8010752 <_dtoa_r+0x68a>
 8010738:	4b98      	ldr	r3, [pc, #608]	@ (801099c <_dtoa_r+0x8d4>)
 801073a:	2200      	movs	r2, #0
 801073c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010740:	f7ef ff7a 	bl	8000638 <__aeabi_dmul>
 8010744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010748:	f7f0 f9fc 	bl	8000b44 <__aeabi_dcmpge>
 801074c:	2800      	cmp	r0, #0
 801074e:	f000 8157 	beq.w	8010a00 <_dtoa_r+0x938>
 8010752:	2400      	movs	r4, #0
 8010754:	4625      	mov	r5, r4
 8010756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010758:	43db      	mvns	r3, r3
 801075a:	9304      	str	r3, [sp, #16]
 801075c:	4656      	mov	r6, sl
 801075e:	2700      	movs	r7, #0
 8010760:	4621      	mov	r1, r4
 8010762:	4658      	mov	r0, fp
 8010764:	f000 fb06 	bl	8010d74 <_Bfree>
 8010768:	2d00      	cmp	r5, #0
 801076a:	d0dc      	beq.n	8010726 <_dtoa_r+0x65e>
 801076c:	b12f      	cbz	r7, 801077a <_dtoa_r+0x6b2>
 801076e:	42af      	cmp	r7, r5
 8010770:	d003      	beq.n	801077a <_dtoa_r+0x6b2>
 8010772:	4639      	mov	r1, r7
 8010774:	4658      	mov	r0, fp
 8010776:	f000 fafd 	bl	8010d74 <_Bfree>
 801077a:	4629      	mov	r1, r5
 801077c:	4658      	mov	r0, fp
 801077e:	f000 faf9 	bl	8010d74 <_Bfree>
 8010782:	e7d0      	b.n	8010726 <_dtoa_r+0x65e>
 8010784:	9704      	str	r7, [sp, #16]
 8010786:	4633      	mov	r3, r6
 8010788:	461e      	mov	r6, r3
 801078a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801078e:	2a39      	cmp	r2, #57	@ 0x39
 8010790:	d107      	bne.n	80107a2 <_dtoa_r+0x6da>
 8010792:	459a      	cmp	sl, r3
 8010794:	d1f8      	bne.n	8010788 <_dtoa_r+0x6c0>
 8010796:	9a04      	ldr	r2, [sp, #16]
 8010798:	3201      	adds	r2, #1
 801079a:	9204      	str	r2, [sp, #16]
 801079c:	2230      	movs	r2, #48	@ 0x30
 801079e:	f88a 2000 	strb.w	r2, [sl]
 80107a2:	781a      	ldrb	r2, [r3, #0]
 80107a4:	3201      	adds	r2, #1
 80107a6:	701a      	strb	r2, [r3, #0]
 80107a8:	e7bd      	b.n	8010726 <_dtoa_r+0x65e>
 80107aa:	4b7b      	ldr	r3, [pc, #492]	@ (8010998 <_dtoa_r+0x8d0>)
 80107ac:	2200      	movs	r2, #0
 80107ae:	f7ef ff43 	bl	8000638 <__aeabi_dmul>
 80107b2:	2200      	movs	r2, #0
 80107b4:	2300      	movs	r3, #0
 80107b6:	4604      	mov	r4, r0
 80107b8:	460d      	mov	r5, r1
 80107ba:	f7f0 f9a5 	bl	8000b08 <__aeabi_dcmpeq>
 80107be:	2800      	cmp	r0, #0
 80107c0:	f43f aebb 	beq.w	801053a <_dtoa_r+0x472>
 80107c4:	e6f0      	b.n	80105a8 <_dtoa_r+0x4e0>
 80107c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80107c8:	2a00      	cmp	r2, #0
 80107ca:	f000 80db 	beq.w	8010984 <_dtoa_r+0x8bc>
 80107ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107d0:	2a01      	cmp	r2, #1
 80107d2:	f300 80bf 	bgt.w	8010954 <_dtoa_r+0x88c>
 80107d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80107d8:	2a00      	cmp	r2, #0
 80107da:	f000 80b7 	beq.w	801094c <_dtoa_r+0x884>
 80107de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80107e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80107e4:	4646      	mov	r6, r8
 80107e6:	9a08      	ldr	r2, [sp, #32]
 80107e8:	2101      	movs	r1, #1
 80107ea:	441a      	add	r2, r3
 80107ec:	4658      	mov	r0, fp
 80107ee:	4498      	add	r8, r3
 80107f0:	9208      	str	r2, [sp, #32]
 80107f2:	f000 fbbd 	bl	8010f70 <__i2b>
 80107f6:	4605      	mov	r5, r0
 80107f8:	b15e      	cbz	r6, 8010812 <_dtoa_r+0x74a>
 80107fa:	9b08      	ldr	r3, [sp, #32]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dd08      	ble.n	8010812 <_dtoa_r+0x74a>
 8010800:	42b3      	cmp	r3, r6
 8010802:	9a08      	ldr	r2, [sp, #32]
 8010804:	bfa8      	it	ge
 8010806:	4633      	movge	r3, r6
 8010808:	eba8 0803 	sub.w	r8, r8, r3
 801080c:	1af6      	subs	r6, r6, r3
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	9308      	str	r3, [sp, #32]
 8010812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010814:	b1f3      	cbz	r3, 8010854 <_dtoa_r+0x78c>
 8010816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 80b7 	beq.w	801098c <_dtoa_r+0x8c4>
 801081e:	b18c      	cbz	r4, 8010844 <_dtoa_r+0x77c>
 8010820:	4629      	mov	r1, r5
 8010822:	4622      	mov	r2, r4
 8010824:	4658      	mov	r0, fp
 8010826:	f000 fc63 	bl	80110f0 <__pow5mult>
 801082a:	464a      	mov	r2, r9
 801082c:	4601      	mov	r1, r0
 801082e:	4605      	mov	r5, r0
 8010830:	4658      	mov	r0, fp
 8010832:	f000 fbb3 	bl	8010f9c <__multiply>
 8010836:	4649      	mov	r1, r9
 8010838:	9004      	str	r0, [sp, #16]
 801083a:	4658      	mov	r0, fp
 801083c:	f000 fa9a 	bl	8010d74 <_Bfree>
 8010840:	9b04      	ldr	r3, [sp, #16]
 8010842:	4699      	mov	r9, r3
 8010844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010846:	1b1a      	subs	r2, r3, r4
 8010848:	d004      	beq.n	8010854 <_dtoa_r+0x78c>
 801084a:	4649      	mov	r1, r9
 801084c:	4658      	mov	r0, fp
 801084e:	f000 fc4f 	bl	80110f0 <__pow5mult>
 8010852:	4681      	mov	r9, r0
 8010854:	2101      	movs	r1, #1
 8010856:	4658      	mov	r0, fp
 8010858:	f000 fb8a 	bl	8010f70 <__i2b>
 801085c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801085e:	4604      	mov	r4, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 81cf 	beq.w	8010c04 <_dtoa_r+0xb3c>
 8010866:	461a      	mov	r2, r3
 8010868:	4601      	mov	r1, r0
 801086a:	4658      	mov	r0, fp
 801086c:	f000 fc40 	bl	80110f0 <__pow5mult>
 8010870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010872:	2b01      	cmp	r3, #1
 8010874:	4604      	mov	r4, r0
 8010876:	f300 8095 	bgt.w	80109a4 <_dtoa_r+0x8dc>
 801087a:	9b02      	ldr	r3, [sp, #8]
 801087c:	2b00      	cmp	r3, #0
 801087e:	f040 8087 	bne.w	8010990 <_dtoa_r+0x8c8>
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010888:	2b00      	cmp	r3, #0
 801088a:	f040 8089 	bne.w	80109a0 <_dtoa_r+0x8d8>
 801088e:	9b03      	ldr	r3, [sp, #12]
 8010890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010894:	0d1b      	lsrs	r3, r3, #20
 8010896:	051b      	lsls	r3, r3, #20
 8010898:	b12b      	cbz	r3, 80108a6 <_dtoa_r+0x7de>
 801089a:	9b08      	ldr	r3, [sp, #32]
 801089c:	3301      	adds	r3, #1
 801089e:	9308      	str	r3, [sp, #32]
 80108a0:	f108 0801 	add.w	r8, r8, #1
 80108a4:	2301      	movs	r3, #1
 80108a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80108a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f000 81b0 	beq.w	8010c10 <_dtoa_r+0xb48>
 80108b0:	6923      	ldr	r3, [r4, #16]
 80108b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108b6:	6918      	ldr	r0, [r3, #16]
 80108b8:	f000 fb0e 	bl	8010ed8 <__hi0bits>
 80108bc:	f1c0 0020 	rsb	r0, r0, #32
 80108c0:	9b08      	ldr	r3, [sp, #32]
 80108c2:	4418      	add	r0, r3
 80108c4:	f010 001f 	ands.w	r0, r0, #31
 80108c8:	d077      	beq.n	80109ba <_dtoa_r+0x8f2>
 80108ca:	f1c0 0320 	rsb	r3, r0, #32
 80108ce:	2b04      	cmp	r3, #4
 80108d0:	dd6b      	ble.n	80109aa <_dtoa_r+0x8e2>
 80108d2:	9b08      	ldr	r3, [sp, #32]
 80108d4:	f1c0 001c 	rsb	r0, r0, #28
 80108d8:	4403      	add	r3, r0
 80108da:	4480      	add	r8, r0
 80108dc:	4406      	add	r6, r0
 80108de:	9308      	str	r3, [sp, #32]
 80108e0:	f1b8 0f00 	cmp.w	r8, #0
 80108e4:	dd05      	ble.n	80108f2 <_dtoa_r+0x82a>
 80108e6:	4649      	mov	r1, r9
 80108e8:	4642      	mov	r2, r8
 80108ea:	4658      	mov	r0, fp
 80108ec:	f000 fc5a 	bl	80111a4 <__lshift>
 80108f0:	4681      	mov	r9, r0
 80108f2:	9b08      	ldr	r3, [sp, #32]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	dd05      	ble.n	8010904 <_dtoa_r+0x83c>
 80108f8:	4621      	mov	r1, r4
 80108fa:	461a      	mov	r2, r3
 80108fc:	4658      	mov	r0, fp
 80108fe:	f000 fc51 	bl	80111a4 <__lshift>
 8010902:	4604      	mov	r4, r0
 8010904:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010906:	2b00      	cmp	r3, #0
 8010908:	d059      	beq.n	80109be <_dtoa_r+0x8f6>
 801090a:	4621      	mov	r1, r4
 801090c:	4648      	mov	r0, r9
 801090e:	f000 fcb5 	bl	801127c <__mcmp>
 8010912:	2800      	cmp	r0, #0
 8010914:	da53      	bge.n	80109be <_dtoa_r+0x8f6>
 8010916:	1e7b      	subs	r3, r7, #1
 8010918:	9304      	str	r3, [sp, #16]
 801091a:	4649      	mov	r1, r9
 801091c:	2300      	movs	r3, #0
 801091e:	220a      	movs	r2, #10
 8010920:	4658      	mov	r0, fp
 8010922:	f000 fa49 	bl	8010db8 <__multadd>
 8010926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010928:	4681      	mov	r9, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	f000 8172 	beq.w	8010c14 <_dtoa_r+0xb4c>
 8010930:	2300      	movs	r3, #0
 8010932:	4629      	mov	r1, r5
 8010934:	220a      	movs	r2, #10
 8010936:	4658      	mov	r0, fp
 8010938:	f000 fa3e 	bl	8010db8 <__multadd>
 801093c:	9b00      	ldr	r3, [sp, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	4605      	mov	r5, r0
 8010942:	dc67      	bgt.n	8010a14 <_dtoa_r+0x94c>
 8010944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010946:	2b02      	cmp	r3, #2
 8010948:	dc41      	bgt.n	80109ce <_dtoa_r+0x906>
 801094a:	e063      	b.n	8010a14 <_dtoa_r+0x94c>
 801094c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801094e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010952:	e746      	b.n	80107e2 <_dtoa_r+0x71a>
 8010954:	9b07      	ldr	r3, [sp, #28]
 8010956:	1e5c      	subs	r4, r3, #1
 8010958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801095a:	42a3      	cmp	r3, r4
 801095c:	bfbf      	itttt	lt
 801095e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010960:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010962:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010964:	1ae3      	sublt	r3, r4, r3
 8010966:	bfb4      	ite	lt
 8010968:	18d2      	addlt	r2, r2, r3
 801096a:	1b1c      	subge	r4, r3, r4
 801096c:	9b07      	ldr	r3, [sp, #28]
 801096e:	bfbc      	itt	lt
 8010970:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010972:	2400      	movlt	r4, #0
 8010974:	2b00      	cmp	r3, #0
 8010976:	bfb5      	itete	lt
 8010978:	eba8 0603 	sublt.w	r6, r8, r3
 801097c:	9b07      	ldrge	r3, [sp, #28]
 801097e:	2300      	movlt	r3, #0
 8010980:	4646      	movge	r6, r8
 8010982:	e730      	b.n	80107e6 <_dtoa_r+0x71e>
 8010984:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010986:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010988:	4646      	mov	r6, r8
 801098a:	e735      	b.n	80107f8 <_dtoa_r+0x730>
 801098c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801098e:	e75c      	b.n	801084a <_dtoa_r+0x782>
 8010990:	2300      	movs	r3, #0
 8010992:	e788      	b.n	80108a6 <_dtoa_r+0x7de>
 8010994:	3fe00000 	.word	0x3fe00000
 8010998:	40240000 	.word	0x40240000
 801099c:	40140000 	.word	0x40140000
 80109a0:	9b02      	ldr	r3, [sp, #8]
 80109a2:	e780      	b.n	80108a6 <_dtoa_r+0x7de>
 80109a4:	2300      	movs	r3, #0
 80109a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109a8:	e782      	b.n	80108b0 <_dtoa_r+0x7e8>
 80109aa:	d099      	beq.n	80108e0 <_dtoa_r+0x818>
 80109ac:	9a08      	ldr	r2, [sp, #32]
 80109ae:	331c      	adds	r3, #28
 80109b0:	441a      	add	r2, r3
 80109b2:	4498      	add	r8, r3
 80109b4:	441e      	add	r6, r3
 80109b6:	9208      	str	r2, [sp, #32]
 80109b8:	e792      	b.n	80108e0 <_dtoa_r+0x818>
 80109ba:	4603      	mov	r3, r0
 80109bc:	e7f6      	b.n	80109ac <_dtoa_r+0x8e4>
 80109be:	9b07      	ldr	r3, [sp, #28]
 80109c0:	9704      	str	r7, [sp, #16]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	dc20      	bgt.n	8010a08 <_dtoa_r+0x940>
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	dd1e      	ble.n	8010a0c <_dtoa_r+0x944>
 80109ce:	9b00      	ldr	r3, [sp, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f47f aec0 	bne.w	8010756 <_dtoa_r+0x68e>
 80109d6:	4621      	mov	r1, r4
 80109d8:	2205      	movs	r2, #5
 80109da:	4658      	mov	r0, fp
 80109dc:	f000 f9ec 	bl	8010db8 <__multadd>
 80109e0:	4601      	mov	r1, r0
 80109e2:	4604      	mov	r4, r0
 80109e4:	4648      	mov	r0, r9
 80109e6:	f000 fc49 	bl	801127c <__mcmp>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	f77f aeb3 	ble.w	8010756 <_dtoa_r+0x68e>
 80109f0:	4656      	mov	r6, sl
 80109f2:	2331      	movs	r3, #49	@ 0x31
 80109f4:	f806 3b01 	strb.w	r3, [r6], #1
 80109f8:	9b04      	ldr	r3, [sp, #16]
 80109fa:	3301      	adds	r3, #1
 80109fc:	9304      	str	r3, [sp, #16]
 80109fe:	e6ae      	b.n	801075e <_dtoa_r+0x696>
 8010a00:	9c07      	ldr	r4, [sp, #28]
 8010a02:	9704      	str	r7, [sp, #16]
 8010a04:	4625      	mov	r5, r4
 8010a06:	e7f3      	b.n	80109f0 <_dtoa_r+0x928>
 8010a08:	9b07      	ldr	r3, [sp, #28]
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f000 8104 	beq.w	8010c1c <_dtoa_r+0xb54>
 8010a14:	2e00      	cmp	r6, #0
 8010a16:	dd05      	ble.n	8010a24 <_dtoa_r+0x95c>
 8010a18:	4629      	mov	r1, r5
 8010a1a:	4632      	mov	r2, r6
 8010a1c:	4658      	mov	r0, fp
 8010a1e:	f000 fbc1 	bl	80111a4 <__lshift>
 8010a22:	4605      	mov	r5, r0
 8010a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d05a      	beq.n	8010ae0 <_dtoa_r+0xa18>
 8010a2a:	6869      	ldr	r1, [r5, #4]
 8010a2c:	4658      	mov	r0, fp
 8010a2e:	f000 f961 	bl	8010cf4 <_Balloc>
 8010a32:	4606      	mov	r6, r0
 8010a34:	b928      	cbnz	r0, 8010a42 <_dtoa_r+0x97a>
 8010a36:	4b84      	ldr	r3, [pc, #528]	@ (8010c48 <_dtoa_r+0xb80>)
 8010a38:	4602      	mov	r2, r0
 8010a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a3e:	f7ff bb5a 	b.w	80100f6 <_dtoa_r+0x2e>
 8010a42:	692a      	ldr	r2, [r5, #16]
 8010a44:	3202      	adds	r2, #2
 8010a46:	0092      	lsls	r2, r2, #2
 8010a48:	f105 010c 	add.w	r1, r5, #12
 8010a4c:	300c      	adds	r0, #12
 8010a4e:	f7ff fa9c 	bl	800ff8a <memcpy>
 8010a52:	2201      	movs	r2, #1
 8010a54:	4631      	mov	r1, r6
 8010a56:	4658      	mov	r0, fp
 8010a58:	f000 fba4 	bl	80111a4 <__lshift>
 8010a5c:	f10a 0301 	add.w	r3, sl, #1
 8010a60:	9307      	str	r3, [sp, #28]
 8010a62:	9b00      	ldr	r3, [sp, #0]
 8010a64:	4453      	add	r3, sl
 8010a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	f003 0301 	and.w	r3, r3, #1
 8010a6e:	462f      	mov	r7, r5
 8010a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a72:	4605      	mov	r5, r0
 8010a74:	9b07      	ldr	r3, [sp, #28]
 8010a76:	4621      	mov	r1, r4
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	4648      	mov	r0, r9
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	f7ff fa99 	bl	800ffb4 <quorem>
 8010a82:	4639      	mov	r1, r7
 8010a84:	9002      	str	r0, [sp, #8]
 8010a86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a8a:	4648      	mov	r0, r9
 8010a8c:	f000 fbf6 	bl	801127c <__mcmp>
 8010a90:	462a      	mov	r2, r5
 8010a92:	9008      	str	r0, [sp, #32]
 8010a94:	4621      	mov	r1, r4
 8010a96:	4658      	mov	r0, fp
 8010a98:	f000 fc0c 	bl	80112b4 <__mdiff>
 8010a9c:	68c2      	ldr	r2, [r0, #12]
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	bb02      	cbnz	r2, 8010ae4 <_dtoa_r+0xa1c>
 8010aa2:	4601      	mov	r1, r0
 8010aa4:	4648      	mov	r0, r9
 8010aa6:	f000 fbe9 	bl	801127c <__mcmp>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	4631      	mov	r1, r6
 8010aae:	4658      	mov	r0, fp
 8010ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ab2:	f000 f95f 	bl	8010d74 <_Bfree>
 8010ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aba:	9e07      	ldr	r6, [sp, #28]
 8010abc:	ea43 0102 	orr.w	r1, r3, r2
 8010ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ac2:	4319      	orrs	r1, r3
 8010ac4:	d110      	bne.n	8010ae8 <_dtoa_r+0xa20>
 8010ac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010aca:	d029      	beq.n	8010b20 <_dtoa_r+0xa58>
 8010acc:	9b08      	ldr	r3, [sp, #32]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dd02      	ble.n	8010ad8 <_dtoa_r+0xa10>
 8010ad2:	9b02      	ldr	r3, [sp, #8]
 8010ad4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010ad8:	9b00      	ldr	r3, [sp, #0]
 8010ada:	f883 8000 	strb.w	r8, [r3]
 8010ade:	e63f      	b.n	8010760 <_dtoa_r+0x698>
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	e7bb      	b.n	8010a5c <_dtoa_r+0x994>
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	e7e1      	b.n	8010aac <_dtoa_r+0x9e4>
 8010ae8:	9b08      	ldr	r3, [sp, #32]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	db04      	blt.n	8010af8 <_dtoa_r+0xa30>
 8010aee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010af0:	430b      	orrs	r3, r1
 8010af2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010af4:	430b      	orrs	r3, r1
 8010af6:	d120      	bne.n	8010b3a <_dtoa_r+0xa72>
 8010af8:	2a00      	cmp	r2, #0
 8010afa:	dded      	ble.n	8010ad8 <_dtoa_r+0xa10>
 8010afc:	4649      	mov	r1, r9
 8010afe:	2201      	movs	r2, #1
 8010b00:	4658      	mov	r0, fp
 8010b02:	f000 fb4f 	bl	80111a4 <__lshift>
 8010b06:	4621      	mov	r1, r4
 8010b08:	4681      	mov	r9, r0
 8010b0a:	f000 fbb7 	bl	801127c <__mcmp>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	dc03      	bgt.n	8010b1a <_dtoa_r+0xa52>
 8010b12:	d1e1      	bne.n	8010ad8 <_dtoa_r+0xa10>
 8010b14:	f018 0f01 	tst.w	r8, #1
 8010b18:	d0de      	beq.n	8010ad8 <_dtoa_r+0xa10>
 8010b1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b1e:	d1d8      	bne.n	8010ad2 <_dtoa_r+0xa0a>
 8010b20:	9a00      	ldr	r2, [sp, #0]
 8010b22:	2339      	movs	r3, #57	@ 0x39
 8010b24:	7013      	strb	r3, [r2, #0]
 8010b26:	4633      	mov	r3, r6
 8010b28:	461e      	mov	r6, r3
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b30:	2a39      	cmp	r2, #57	@ 0x39
 8010b32:	d052      	beq.n	8010bda <_dtoa_r+0xb12>
 8010b34:	3201      	adds	r2, #1
 8010b36:	701a      	strb	r2, [r3, #0]
 8010b38:	e612      	b.n	8010760 <_dtoa_r+0x698>
 8010b3a:	2a00      	cmp	r2, #0
 8010b3c:	dd07      	ble.n	8010b4e <_dtoa_r+0xa86>
 8010b3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b42:	d0ed      	beq.n	8010b20 <_dtoa_r+0xa58>
 8010b44:	9a00      	ldr	r2, [sp, #0]
 8010b46:	f108 0301 	add.w	r3, r8, #1
 8010b4a:	7013      	strb	r3, [r2, #0]
 8010b4c:	e608      	b.n	8010760 <_dtoa_r+0x698>
 8010b4e:	9b07      	ldr	r3, [sp, #28]
 8010b50:	9a07      	ldr	r2, [sp, #28]
 8010b52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010b56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d028      	beq.n	8010bae <_dtoa_r+0xae6>
 8010b5c:	4649      	mov	r1, r9
 8010b5e:	2300      	movs	r3, #0
 8010b60:	220a      	movs	r2, #10
 8010b62:	4658      	mov	r0, fp
 8010b64:	f000 f928 	bl	8010db8 <__multadd>
 8010b68:	42af      	cmp	r7, r5
 8010b6a:	4681      	mov	r9, r0
 8010b6c:	f04f 0300 	mov.w	r3, #0
 8010b70:	f04f 020a 	mov.w	r2, #10
 8010b74:	4639      	mov	r1, r7
 8010b76:	4658      	mov	r0, fp
 8010b78:	d107      	bne.n	8010b8a <_dtoa_r+0xac2>
 8010b7a:	f000 f91d 	bl	8010db8 <__multadd>
 8010b7e:	4607      	mov	r7, r0
 8010b80:	4605      	mov	r5, r0
 8010b82:	9b07      	ldr	r3, [sp, #28]
 8010b84:	3301      	adds	r3, #1
 8010b86:	9307      	str	r3, [sp, #28]
 8010b88:	e774      	b.n	8010a74 <_dtoa_r+0x9ac>
 8010b8a:	f000 f915 	bl	8010db8 <__multadd>
 8010b8e:	4629      	mov	r1, r5
 8010b90:	4607      	mov	r7, r0
 8010b92:	2300      	movs	r3, #0
 8010b94:	220a      	movs	r2, #10
 8010b96:	4658      	mov	r0, fp
 8010b98:	f000 f90e 	bl	8010db8 <__multadd>
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	e7f0      	b.n	8010b82 <_dtoa_r+0xaba>
 8010ba0:	9b00      	ldr	r3, [sp, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	bfcc      	ite	gt
 8010ba6:	461e      	movgt	r6, r3
 8010ba8:	2601      	movle	r6, #1
 8010baa:	4456      	add	r6, sl
 8010bac:	2700      	movs	r7, #0
 8010bae:	4649      	mov	r1, r9
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	4658      	mov	r0, fp
 8010bb4:	f000 faf6 	bl	80111a4 <__lshift>
 8010bb8:	4621      	mov	r1, r4
 8010bba:	4681      	mov	r9, r0
 8010bbc:	f000 fb5e 	bl	801127c <__mcmp>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	dcb0      	bgt.n	8010b26 <_dtoa_r+0xa5e>
 8010bc4:	d102      	bne.n	8010bcc <_dtoa_r+0xb04>
 8010bc6:	f018 0f01 	tst.w	r8, #1
 8010bca:	d1ac      	bne.n	8010b26 <_dtoa_r+0xa5e>
 8010bcc:	4633      	mov	r3, r6
 8010bce:	461e      	mov	r6, r3
 8010bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bd4:	2a30      	cmp	r2, #48	@ 0x30
 8010bd6:	d0fa      	beq.n	8010bce <_dtoa_r+0xb06>
 8010bd8:	e5c2      	b.n	8010760 <_dtoa_r+0x698>
 8010bda:	459a      	cmp	sl, r3
 8010bdc:	d1a4      	bne.n	8010b28 <_dtoa_r+0xa60>
 8010bde:	9b04      	ldr	r3, [sp, #16]
 8010be0:	3301      	adds	r3, #1
 8010be2:	9304      	str	r3, [sp, #16]
 8010be4:	2331      	movs	r3, #49	@ 0x31
 8010be6:	f88a 3000 	strb.w	r3, [sl]
 8010bea:	e5b9      	b.n	8010760 <_dtoa_r+0x698>
 8010bec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010c4c <_dtoa_r+0xb84>
 8010bf2:	b11b      	cbz	r3, 8010bfc <_dtoa_r+0xb34>
 8010bf4:	f10a 0308 	add.w	r3, sl, #8
 8010bf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010bfa:	6013      	str	r3, [r2, #0]
 8010bfc:	4650      	mov	r0, sl
 8010bfe:	b019      	add	sp, #100	@ 0x64
 8010c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	f77f ae37 	ble.w	801087a <_dtoa_r+0x7b2>
 8010c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c10:	2001      	movs	r0, #1
 8010c12:	e655      	b.n	80108c0 <_dtoa_r+0x7f8>
 8010c14:	9b00      	ldr	r3, [sp, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f77f aed6 	ble.w	80109c8 <_dtoa_r+0x900>
 8010c1c:	4656      	mov	r6, sl
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4648      	mov	r0, r9
 8010c22:	f7ff f9c7 	bl	800ffb4 <quorem>
 8010c26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c2a:	f806 8b01 	strb.w	r8, [r6], #1
 8010c2e:	9b00      	ldr	r3, [sp, #0]
 8010c30:	eba6 020a 	sub.w	r2, r6, sl
 8010c34:	4293      	cmp	r3, r2
 8010c36:	ddb3      	ble.n	8010ba0 <_dtoa_r+0xad8>
 8010c38:	4649      	mov	r1, r9
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	220a      	movs	r2, #10
 8010c3e:	4658      	mov	r0, fp
 8010c40:	f000 f8ba 	bl	8010db8 <__multadd>
 8010c44:	4681      	mov	r9, r0
 8010c46:	e7ea      	b.n	8010c1e <_dtoa_r+0xb56>
 8010c48:	08016123 	.word	0x08016123
 8010c4c:	080160a7 	.word	0x080160a7

08010c50 <_free_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4605      	mov	r5, r0
 8010c54:	2900      	cmp	r1, #0
 8010c56:	d041      	beq.n	8010cdc <_free_r+0x8c>
 8010c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c5c:	1f0c      	subs	r4, r1, #4
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	bfb8      	it	lt
 8010c62:	18e4      	addlt	r4, r4, r3
 8010c64:	f7fe f912 	bl	800ee8c <__malloc_lock>
 8010c68:	4a1d      	ldr	r2, [pc, #116]	@ (8010ce0 <_free_r+0x90>)
 8010c6a:	6813      	ldr	r3, [r2, #0]
 8010c6c:	b933      	cbnz	r3, 8010c7c <_free_r+0x2c>
 8010c6e:	6063      	str	r3, [r4, #4]
 8010c70:	6014      	str	r4, [r2, #0]
 8010c72:	4628      	mov	r0, r5
 8010c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c78:	f7fe b90e 	b.w	800ee98 <__malloc_unlock>
 8010c7c:	42a3      	cmp	r3, r4
 8010c7e:	d908      	bls.n	8010c92 <_free_r+0x42>
 8010c80:	6820      	ldr	r0, [r4, #0]
 8010c82:	1821      	adds	r1, r4, r0
 8010c84:	428b      	cmp	r3, r1
 8010c86:	bf01      	itttt	eq
 8010c88:	6819      	ldreq	r1, [r3, #0]
 8010c8a:	685b      	ldreq	r3, [r3, #4]
 8010c8c:	1809      	addeq	r1, r1, r0
 8010c8e:	6021      	streq	r1, [r4, #0]
 8010c90:	e7ed      	b.n	8010c6e <_free_r+0x1e>
 8010c92:	461a      	mov	r2, r3
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	b10b      	cbz	r3, 8010c9c <_free_r+0x4c>
 8010c98:	42a3      	cmp	r3, r4
 8010c9a:	d9fa      	bls.n	8010c92 <_free_r+0x42>
 8010c9c:	6811      	ldr	r1, [r2, #0]
 8010c9e:	1850      	adds	r0, r2, r1
 8010ca0:	42a0      	cmp	r0, r4
 8010ca2:	d10b      	bne.n	8010cbc <_free_r+0x6c>
 8010ca4:	6820      	ldr	r0, [r4, #0]
 8010ca6:	4401      	add	r1, r0
 8010ca8:	1850      	adds	r0, r2, r1
 8010caa:	4283      	cmp	r3, r0
 8010cac:	6011      	str	r1, [r2, #0]
 8010cae:	d1e0      	bne.n	8010c72 <_free_r+0x22>
 8010cb0:	6818      	ldr	r0, [r3, #0]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	6053      	str	r3, [r2, #4]
 8010cb6:	4408      	add	r0, r1
 8010cb8:	6010      	str	r0, [r2, #0]
 8010cba:	e7da      	b.n	8010c72 <_free_r+0x22>
 8010cbc:	d902      	bls.n	8010cc4 <_free_r+0x74>
 8010cbe:	230c      	movs	r3, #12
 8010cc0:	602b      	str	r3, [r5, #0]
 8010cc2:	e7d6      	b.n	8010c72 <_free_r+0x22>
 8010cc4:	6820      	ldr	r0, [r4, #0]
 8010cc6:	1821      	adds	r1, r4, r0
 8010cc8:	428b      	cmp	r3, r1
 8010cca:	bf04      	itt	eq
 8010ccc:	6819      	ldreq	r1, [r3, #0]
 8010cce:	685b      	ldreq	r3, [r3, #4]
 8010cd0:	6063      	str	r3, [r4, #4]
 8010cd2:	bf04      	itt	eq
 8010cd4:	1809      	addeq	r1, r1, r0
 8010cd6:	6021      	streq	r1, [r4, #0]
 8010cd8:	6054      	str	r4, [r2, #4]
 8010cda:	e7ca      	b.n	8010c72 <_free_r+0x22>
 8010cdc:	bd38      	pop	{r3, r4, r5, pc}
 8010cde:	bf00      	nop
 8010ce0:	200017b4 	.word	0x200017b4

08010ce4 <malloc>:
 8010ce4:	4b02      	ldr	r3, [pc, #8]	@ (8010cf0 <malloc+0xc>)
 8010ce6:	4601      	mov	r1, r0
 8010ce8:	6818      	ldr	r0, [r3, #0]
 8010cea:	f7fe b84f 	b.w	800ed8c <_malloc_r>
 8010cee:	bf00      	nop
 8010cf0:	20000050 	.word	0x20000050

08010cf4 <_Balloc>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	69c6      	ldr	r6, [r0, #28]
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	b976      	cbnz	r6, 8010d1c <_Balloc+0x28>
 8010cfe:	2010      	movs	r0, #16
 8010d00:	f7ff fff0 	bl	8010ce4 <malloc>
 8010d04:	4602      	mov	r2, r0
 8010d06:	61e0      	str	r0, [r4, #28]
 8010d08:	b920      	cbnz	r0, 8010d14 <_Balloc+0x20>
 8010d0a:	4b18      	ldr	r3, [pc, #96]	@ (8010d6c <_Balloc+0x78>)
 8010d0c:	4818      	ldr	r0, [pc, #96]	@ (8010d70 <_Balloc+0x7c>)
 8010d0e:	216b      	movs	r1, #107	@ 0x6b
 8010d10:	f002 f8ee 	bl	8012ef0 <__assert_func>
 8010d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d18:	6006      	str	r6, [r0, #0]
 8010d1a:	60c6      	str	r6, [r0, #12]
 8010d1c:	69e6      	ldr	r6, [r4, #28]
 8010d1e:	68f3      	ldr	r3, [r6, #12]
 8010d20:	b183      	cbz	r3, 8010d44 <_Balloc+0x50>
 8010d22:	69e3      	ldr	r3, [r4, #28]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d2a:	b9b8      	cbnz	r0, 8010d5c <_Balloc+0x68>
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8010d32:	1d72      	adds	r2, r6, #5
 8010d34:	0092      	lsls	r2, r2, #2
 8010d36:	4620      	mov	r0, r4
 8010d38:	f7fd fff2 	bl	800ed20 <_calloc_r>
 8010d3c:	b160      	cbz	r0, 8010d58 <_Balloc+0x64>
 8010d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d42:	e00e      	b.n	8010d62 <_Balloc+0x6e>
 8010d44:	2221      	movs	r2, #33	@ 0x21
 8010d46:	2104      	movs	r1, #4
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7fd ffe9 	bl	800ed20 <_calloc_r>
 8010d4e:	69e3      	ldr	r3, [r4, #28]
 8010d50:	60f0      	str	r0, [r6, #12]
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1e4      	bne.n	8010d22 <_Balloc+0x2e>
 8010d58:	2000      	movs	r0, #0
 8010d5a:	bd70      	pop	{r4, r5, r6, pc}
 8010d5c:	6802      	ldr	r2, [r0, #0]
 8010d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d62:	2300      	movs	r3, #0
 8010d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d68:	e7f7      	b.n	8010d5a <_Balloc+0x66>
 8010d6a:	bf00      	nop
 8010d6c:	080160b4 	.word	0x080160b4
 8010d70:	08016134 	.word	0x08016134

08010d74 <_Bfree>:
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	69c6      	ldr	r6, [r0, #28]
 8010d78:	4605      	mov	r5, r0
 8010d7a:	460c      	mov	r4, r1
 8010d7c:	b976      	cbnz	r6, 8010d9c <_Bfree+0x28>
 8010d7e:	2010      	movs	r0, #16
 8010d80:	f7ff ffb0 	bl	8010ce4 <malloc>
 8010d84:	4602      	mov	r2, r0
 8010d86:	61e8      	str	r0, [r5, #28]
 8010d88:	b920      	cbnz	r0, 8010d94 <_Bfree+0x20>
 8010d8a:	4b09      	ldr	r3, [pc, #36]	@ (8010db0 <_Bfree+0x3c>)
 8010d8c:	4809      	ldr	r0, [pc, #36]	@ (8010db4 <_Bfree+0x40>)
 8010d8e:	218f      	movs	r1, #143	@ 0x8f
 8010d90:	f002 f8ae 	bl	8012ef0 <__assert_func>
 8010d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d98:	6006      	str	r6, [r0, #0]
 8010d9a:	60c6      	str	r6, [r0, #12]
 8010d9c:	b13c      	cbz	r4, 8010dae <_Bfree+0x3a>
 8010d9e:	69eb      	ldr	r3, [r5, #28]
 8010da0:	6862      	ldr	r2, [r4, #4]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010da8:	6021      	str	r1, [r4, #0]
 8010daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	080160b4 	.word	0x080160b4
 8010db4:	08016134 	.word	0x08016134

08010db8 <__multadd>:
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	690d      	ldr	r5, [r1, #16]
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	461e      	mov	r6, r3
 8010dc4:	f101 0c14 	add.w	ip, r1, #20
 8010dc8:	2000      	movs	r0, #0
 8010dca:	f8dc 3000 	ldr.w	r3, [ip]
 8010dce:	b299      	uxth	r1, r3
 8010dd0:	fb02 6101 	mla	r1, r2, r1, r6
 8010dd4:	0c1e      	lsrs	r6, r3, #16
 8010dd6:	0c0b      	lsrs	r3, r1, #16
 8010dd8:	fb02 3306 	mla	r3, r2, r6, r3
 8010ddc:	b289      	uxth	r1, r1
 8010dde:	3001      	adds	r0, #1
 8010de0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010de4:	4285      	cmp	r5, r0
 8010de6:	f84c 1b04 	str.w	r1, [ip], #4
 8010dea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dee:	dcec      	bgt.n	8010dca <__multadd+0x12>
 8010df0:	b30e      	cbz	r6, 8010e36 <__multadd+0x7e>
 8010df2:	68a3      	ldr	r3, [r4, #8]
 8010df4:	42ab      	cmp	r3, r5
 8010df6:	dc19      	bgt.n	8010e2c <__multadd+0x74>
 8010df8:	6861      	ldr	r1, [r4, #4]
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	3101      	adds	r1, #1
 8010dfe:	f7ff ff79 	bl	8010cf4 <_Balloc>
 8010e02:	4680      	mov	r8, r0
 8010e04:	b928      	cbnz	r0, 8010e12 <__multadd+0x5a>
 8010e06:	4602      	mov	r2, r0
 8010e08:	4b0c      	ldr	r3, [pc, #48]	@ (8010e3c <__multadd+0x84>)
 8010e0a:	480d      	ldr	r0, [pc, #52]	@ (8010e40 <__multadd+0x88>)
 8010e0c:	21ba      	movs	r1, #186	@ 0xba
 8010e0e:	f002 f86f 	bl	8012ef0 <__assert_func>
 8010e12:	6922      	ldr	r2, [r4, #16]
 8010e14:	3202      	adds	r2, #2
 8010e16:	f104 010c 	add.w	r1, r4, #12
 8010e1a:	0092      	lsls	r2, r2, #2
 8010e1c:	300c      	adds	r0, #12
 8010e1e:	f7ff f8b4 	bl	800ff8a <memcpy>
 8010e22:	4621      	mov	r1, r4
 8010e24:	4638      	mov	r0, r7
 8010e26:	f7ff ffa5 	bl	8010d74 <_Bfree>
 8010e2a:	4644      	mov	r4, r8
 8010e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e30:	3501      	adds	r5, #1
 8010e32:	615e      	str	r6, [r3, #20]
 8010e34:	6125      	str	r5, [r4, #16]
 8010e36:	4620      	mov	r0, r4
 8010e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e3c:	08016123 	.word	0x08016123
 8010e40:	08016134 	.word	0x08016134

08010e44 <__s2b>:
 8010e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e48:	460c      	mov	r4, r1
 8010e4a:	4615      	mov	r5, r2
 8010e4c:	461f      	mov	r7, r3
 8010e4e:	2209      	movs	r2, #9
 8010e50:	3308      	adds	r3, #8
 8010e52:	4606      	mov	r6, r0
 8010e54:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e58:	2100      	movs	r1, #0
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	db09      	blt.n	8010e74 <__s2b+0x30>
 8010e60:	4630      	mov	r0, r6
 8010e62:	f7ff ff47 	bl	8010cf4 <_Balloc>
 8010e66:	b940      	cbnz	r0, 8010e7a <__s2b+0x36>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	4b19      	ldr	r3, [pc, #100]	@ (8010ed0 <__s2b+0x8c>)
 8010e6c:	4819      	ldr	r0, [pc, #100]	@ (8010ed4 <__s2b+0x90>)
 8010e6e:	21d3      	movs	r1, #211	@ 0xd3
 8010e70:	f002 f83e 	bl	8012ef0 <__assert_func>
 8010e74:	0052      	lsls	r2, r2, #1
 8010e76:	3101      	adds	r1, #1
 8010e78:	e7f0      	b.n	8010e5c <__s2b+0x18>
 8010e7a:	9b08      	ldr	r3, [sp, #32]
 8010e7c:	6143      	str	r3, [r0, #20]
 8010e7e:	2d09      	cmp	r5, #9
 8010e80:	f04f 0301 	mov.w	r3, #1
 8010e84:	6103      	str	r3, [r0, #16]
 8010e86:	dd16      	ble.n	8010eb6 <__s2b+0x72>
 8010e88:	f104 0909 	add.w	r9, r4, #9
 8010e8c:	46c8      	mov	r8, r9
 8010e8e:	442c      	add	r4, r5
 8010e90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e94:	4601      	mov	r1, r0
 8010e96:	3b30      	subs	r3, #48	@ 0x30
 8010e98:	220a      	movs	r2, #10
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff ff8c 	bl	8010db8 <__multadd>
 8010ea0:	45a0      	cmp	r8, r4
 8010ea2:	d1f5      	bne.n	8010e90 <__s2b+0x4c>
 8010ea4:	f1a5 0408 	sub.w	r4, r5, #8
 8010ea8:	444c      	add	r4, r9
 8010eaa:	1b2d      	subs	r5, r5, r4
 8010eac:	1963      	adds	r3, r4, r5
 8010eae:	42bb      	cmp	r3, r7
 8010eb0:	db04      	blt.n	8010ebc <__s2b+0x78>
 8010eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb6:	340a      	adds	r4, #10
 8010eb8:	2509      	movs	r5, #9
 8010eba:	e7f6      	b.n	8010eaa <__s2b+0x66>
 8010ebc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ec0:	4601      	mov	r1, r0
 8010ec2:	3b30      	subs	r3, #48	@ 0x30
 8010ec4:	220a      	movs	r2, #10
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7ff ff76 	bl	8010db8 <__multadd>
 8010ecc:	e7ee      	b.n	8010eac <__s2b+0x68>
 8010ece:	bf00      	nop
 8010ed0:	08016123 	.word	0x08016123
 8010ed4:	08016134 	.word	0x08016134

08010ed8 <__hi0bits>:
 8010ed8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010edc:	4603      	mov	r3, r0
 8010ede:	bf36      	itet	cc
 8010ee0:	0403      	lslcc	r3, r0, #16
 8010ee2:	2000      	movcs	r0, #0
 8010ee4:	2010      	movcc	r0, #16
 8010ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010eea:	bf3c      	itt	cc
 8010eec:	021b      	lslcc	r3, r3, #8
 8010eee:	3008      	addcc	r0, #8
 8010ef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ef4:	bf3c      	itt	cc
 8010ef6:	011b      	lslcc	r3, r3, #4
 8010ef8:	3004      	addcc	r0, #4
 8010efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010efe:	bf3c      	itt	cc
 8010f00:	009b      	lslcc	r3, r3, #2
 8010f02:	3002      	addcc	r0, #2
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	db05      	blt.n	8010f14 <__hi0bits+0x3c>
 8010f08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f0c:	f100 0001 	add.w	r0, r0, #1
 8010f10:	bf08      	it	eq
 8010f12:	2020      	moveq	r0, #32
 8010f14:	4770      	bx	lr

08010f16 <__lo0bits>:
 8010f16:	6803      	ldr	r3, [r0, #0]
 8010f18:	4602      	mov	r2, r0
 8010f1a:	f013 0007 	ands.w	r0, r3, #7
 8010f1e:	d00b      	beq.n	8010f38 <__lo0bits+0x22>
 8010f20:	07d9      	lsls	r1, r3, #31
 8010f22:	d421      	bmi.n	8010f68 <__lo0bits+0x52>
 8010f24:	0798      	lsls	r0, r3, #30
 8010f26:	bf49      	itett	mi
 8010f28:	085b      	lsrmi	r3, r3, #1
 8010f2a:	089b      	lsrpl	r3, r3, #2
 8010f2c:	2001      	movmi	r0, #1
 8010f2e:	6013      	strmi	r3, [r2, #0]
 8010f30:	bf5c      	itt	pl
 8010f32:	6013      	strpl	r3, [r2, #0]
 8010f34:	2002      	movpl	r0, #2
 8010f36:	4770      	bx	lr
 8010f38:	b299      	uxth	r1, r3
 8010f3a:	b909      	cbnz	r1, 8010f40 <__lo0bits+0x2a>
 8010f3c:	0c1b      	lsrs	r3, r3, #16
 8010f3e:	2010      	movs	r0, #16
 8010f40:	b2d9      	uxtb	r1, r3
 8010f42:	b909      	cbnz	r1, 8010f48 <__lo0bits+0x32>
 8010f44:	3008      	adds	r0, #8
 8010f46:	0a1b      	lsrs	r3, r3, #8
 8010f48:	0719      	lsls	r1, r3, #28
 8010f4a:	bf04      	itt	eq
 8010f4c:	091b      	lsreq	r3, r3, #4
 8010f4e:	3004      	addeq	r0, #4
 8010f50:	0799      	lsls	r1, r3, #30
 8010f52:	bf04      	itt	eq
 8010f54:	089b      	lsreq	r3, r3, #2
 8010f56:	3002      	addeq	r0, #2
 8010f58:	07d9      	lsls	r1, r3, #31
 8010f5a:	d403      	bmi.n	8010f64 <__lo0bits+0x4e>
 8010f5c:	085b      	lsrs	r3, r3, #1
 8010f5e:	f100 0001 	add.w	r0, r0, #1
 8010f62:	d003      	beq.n	8010f6c <__lo0bits+0x56>
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	4770      	bx	lr
 8010f68:	2000      	movs	r0, #0
 8010f6a:	4770      	bx	lr
 8010f6c:	2020      	movs	r0, #32
 8010f6e:	4770      	bx	lr

08010f70 <__i2b>:
 8010f70:	b510      	push	{r4, lr}
 8010f72:	460c      	mov	r4, r1
 8010f74:	2101      	movs	r1, #1
 8010f76:	f7ff febd 	bl	8010cf4 <_Balloc>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	b928      	cbnz	r0, 8010f8a <__i2b+0x1a>
 8010f7e:	4b05      	ldr	r3, [pc, #20]	@ (8010f94 <__i2b+0x24>)
 8010f80:	4805      	ldr	r0, [pc, #20]	@ (8010f98 <__i2b+0x28>)
 8010f82:	f240 1145 	movw	r1, #325	@ 0x145
 8010f86:	f001 ffb3 	bl	8012ef0 <__assert_func>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	6144      	str	r4, [r0, #20]
 8010f8e:	6103      	str	r3, [r0, #16]
 8010f90:	bd10      	pop	{r4, pc}
 8010f92:	bf00      	nop
 8010f94:	08016123 	.word	0x08016123
 8010f98:	08016134 	.word	0x08016134

08010f9c <__multiply>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	4614      	mov	r4, r2
 8010fa2:	690a      	ldr	r2, [r1, #16]
 8010fa4:	6923      	ldr	r3, [r4, #16]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	bfa8      	it	ge
 8010faa:	4623      	movge	r3, r4
 8010fac:	460f      	mov	r7, r1
 8010fae:	bfa4      	itt	ge
 8010fb0:	460c      	movge	r4, r1
 8010fb2:	461f      	movge	r7, r3
 8010fb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010fb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010fbc:	68a3      	ldr	r3, [r4, #8]
 8010fbe:	6861      	ldr	r1, [r4, #4]
 8010fc0:	eb0a 0609 	add.w	r6, sl, r9
 8010fc4:	42b3      	cmp	r3, r6
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	bfb8      	it	lt
 8010fca:	3101      	addlt	r1, #1
 8010fcc:	f7ff fe92 	bl	8010cf4 <_Balloc>
 8010fd0:	b930      	cbnz	r0, 8010fe0 <__multiply+0x44>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	4b44      	ldr	r3, [pc, #272]	@ (80110e8 <__multiply+0x14c>)
 8010fd6:	4845      	ldr	r0, [pc, #276]	@ (80110ec <__multiply+0x150>)
 8010fd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010fdc:	f001 ff88 	bl	8012ef0 <__assert_func>
 8010fe0:	f100 0514 	add.w	r5, r0, #20
 8010fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fe8:	462b      	mov	r3, r5
 8010fea:	2200      	movs	r2, #0
 8010fec:	4543      	cmp	r3, r8
 8010fee:	d321      	bcc.n	8011034 <__multiply+0x98>
 8010ff0:	f107 0114 	add.w	r1, r7, #20
 8010ff4:	f104 0214 	add.w	r2, r4, #20
 8010ff8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010ffc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011000:	9302      	str	r3, [sp, #8]
 8011002:	1b13      	subs	r3, r2, r4
 8011004:	3b15      	subs	r3, #21
 8011006:	f023 0303 	bic.w	r3, r3, #3
 801100a:	3304      	adds	r3, #4
 801100c:	f104 0715 	add.w	r7, r4, #21
 8011010:	42ba      	cmp	r2, r7
 8011012:	bf38      	it	cc
 8011014:	2304      	movcc	r3, #4
 8011016:	9301      	str	r3, [sp, #4]
 8011018:	9b02      	ldr	r3, [sp, #8]
 801101a:	9103      	str	r1, [sp, #12]
 801101c:	428b      	cmp	r3, r1
 801101e:	d80c      	bhi.n	801103a <__multiply+0x9e>
 8011020:	2e00      	cmp	r6, #0
 8011022:	dd03      	ble.n	801102c <__multiply+0x90>
 8011024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011028:	2b00      	cmp	r3, #0
 801102a:	d05b      	beq.n	80110e4 <__multiply+0x148>
 801102c:	6106      	str	r6, [r0, #16]
 801102e:	b005      	add	sp, #20
 8011030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	f843 2b04 	str.w	r2, [r3], #4
 8011038:	e7d8      	b.n	8010fec <__multiply+0x50>
 801103a:	f8b1 a000 	ldrh.w	sl, [r1]
 801103e:	f1ba 0f00 	cmp.w	sl, #0
 8011042:	d024      	beq.n	801108e <__multiply+0xf2>
 8011044:	f104 0e14 	add.w	lr, r4, #20
 8011048:	46a9      	mov	r9, r5
 801104a:	f04f 0c00 	mov.w	ip, #0
 801104e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011052:	f8d9 3000 	ldr.w	r3, [r9]
 8011056:	fa1f fb87 	uxth.w	fp, r7
 801105a:	b29b      	uxth	r3, r3
 801105c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011060:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011064:	f8d9 7000 	ldr.w	r7, [r9]
 8011068:	4463      	add	r3, ip
 801106a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801106e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011072:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011076:	b29b      	uxth	r3, r3
 8011078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801107c:	4572      	cmp	r2, lr
 801107e:	f849 3b04 	str.w	r3, [r9], #4
 8011082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011086:	d8e2      	bhi.n	801104e <__multiply+0xb2>
 8011088:	9b01      	ldr	r3, [sp, #4]
 801108a:	f845 c003 	str.w	ip, [r5, r3]
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011094:	3104      	adds	r1, #4
 8011096:	f1b9 0f00 	cmp.w	r9, #0
 801109a:	d021      	beq.n	80110e0 <__multiply+0x144>
 801109c:	682b      	ldr	r3, [r5, #0]
 801109e:	f104 0c14 	add.w	ip, r4, #20
 80110a2:	46ae      	mov	lr, r5
 80110a4:	f04f 0a00 	mov.w	sl, #0
 80110a8:	f8bc b000 	ldrh.w	fp, [ip]
 80110ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80110b0:	fb09 770b 	mla	r7, r9, fp, r7
 80110b4:	4457      	add	r7, sl
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80110bc:	f84e 3b04 	str.w	r3, [lr], #4
 80110c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80110c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110c8:	f8be 3000 	ldrh.w	r3, [lr]
 80110cc:	fb09 330a 	mla	r3, r9, sl, r3
 80110d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80110d4:	4562      	cmp	r2, ip
 80110d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110da:	d8e5      	bhi.n	80110a8 <__multiply+0x10c>
 80110dc:	9f01      	ldr	r7, [sp, #4]
 80110de:	51eb      	str	r3, [r5, r7]
 80110e0:	3504      	adds	r5, #4
 80110e2:	e799      	b.n	8011018 <__multiply+0x7c>
 80110e4:	3e01      	subs	r6, #1
 80110e6:	e79b      	b.n	8011020 <__multiply+0x84>
 80110e8:	08016123 	.word	0x08016123
 80110ec:	08016134 	.word	0x08016134

080110f0 <__pow5mult>:
 80110f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f4:	4615      	mov	r5, r2
 80110f6:	f012 0203 	ands.w	r2, r2, #3
 80110fa:	4607      	mov	r7, r0
 80110fc:	460e      	mov	r6, r1
 80110fe:	d007      	beq.n	8011110 <__pow5mult+0x20>
 8011100:	4c25      	ldr	r4, [pc, #148]	@ (8011198 <__pow5mult+0xa8>)
 8011102:	3a01      	subs	r2, #1
 8011104:	2300      	movs	r3, #0
 8011106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801110a:	f7ff fe55 	bl	8010db8 <__multadd>
 801110e:	4606      	mov	r6, r0
 8011110:	10ad      	asrs	r5, r5, #2
 8011112:	d03d      	beq.n	8011190 <__pow5mult+0xa0>
 8011114:	69fc      	ldr	r4, [r7, #28]
 8011116:	b97c      	cbnz	r4, 8011138 <__pow5mult+0x48>
 8011118:	2010      	movs	r0, #16
 801111a:	f7ff fde3 	bl	8010ce4 <malloc>
 801111e:	4602      	mov	r2, r0
 8011120:	61f8      	str	r0, [r7, #28]
 8011122:	b928      	cbnz	r0, 8011130 <__pow5mult+0x40>
 8011124:	4b1d      	ldr	r3, [pc, #116]	@ (801119c <__pow5mult+0xac>)
 8011126:	481e      	ldr	r0, [pc, #120]	@ (80111a0 <__pow5mult+0xb0>)
 8011128:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801112c:	f001 fee0 	bl	8012ef0 <__assert_func>
 8011130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011134:	6004      	str	r4, [r0, #0]
 8011136:	60c4      	str	r4, [r0, #12]
 8011138:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801113c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011140:	b94c      	cbnz	r4, 8011156 <__pow5mult+0x66>
 8011142:	f240 2171 	movw	r1, #625	@ 0x271
 8011146:	4638      	mov	r0, r7
 8011148:	f7ff ff12 	bl	8010f70 <__i2b>
 801114c:	2300      	movs	r3, #0
 801114e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011152:	4604      	mov	r4, r0
 8011154:	6003      	str	r3, [r0, #0]
 8011156:	f04f 0900 	mov.w	r9, #0
 801115a:	07eb      	lsls	r3, r5, #31
 801115c:	d50a      	bpl.n	8011174 <__pow5mult+0x84>
 801115e:	4631      	mov	r1, r6
 8011160:	4622      	mov	r2, r4
 8011162:	4638      	mov	r0, r7
 8011164:	f7ff ff1a 	bl	8010f9c <__multiply>
 8011168:	4631      	mov	r1, r6
 801116a:	4680      	mov	r8, r0
 801116c:	4638      	mov	r0, r7
 801116e:	f7ff fe01 	bl	8010d74 <_Bfree>
 8011172:	4646      	mov	r6, r8
 8011174:	106d      	asrs	r5, r5, #1
 8011176:	d00b      	beq.n	8011190 <__pow5mult+0xa0>
 8011178:	6820      	ldr	r0, [r4, #0]
 801117a:	b938      	cbnz	r0, 801118c <__pow5mult+0x9c>
 801117c:	4622      	mov	r2, r4
 801117e:	4621      	mov	r1, r4
 8011180:	4638      	mov	r0, r7
 8011182:	f7ff ff0b 	bl	8010f9c <__multiply>
 8011186:	6020      	str	r0, [r4, #0]
 8011188:	f8c0 9000 	str.w	r9, [r0]
 801118c:	4604      	mov	r4, r0
 801118e:	e7e4      	b.n	801115a <__pow5mult+0x6a>
 8011190:	4630      	mov	r0, r6
 8011192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011196:	bf00      	nop
 8011198:	08016190 	.word	0x08016190
 801119c:	080160b4 	.word	0x080160b4
 80111a0:	08016134 	.word	0x08016134

080111a4 <__lshift>:
 80111a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111a8:	460c      	mov	r4, r1
 80111aa:	6849      	ldr	r1, [r1, #4]
 80111ac:	6923      	ldr	r3, [r4, #16]
 80111ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111b2:	68a3      	ldr	r3, [r4, #8]
 80111b4:	4607      	mov	r7, r0
 80111b6:	4691      	mov	r9, r2
 80111b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111bc:	f108 0601 	add.w	r6, r8, #1
 80111c0:	42b3      	cmp	r3, r6
 80111c2:	db0b      	blt.n	80111dc <__lshift+0x38>
 80111c4:	4638      	mov	r0, r7
 80111c6:	f7ff fd95 	bl	8010cf4 <_Balloc>
 80111ca:	4605      	mov	r5, r0
 80111cc:	b948      	cbnz	r0, 80111e2 <__lshift+0x3e>
 80111ce:	4602      	mov	r2, r0
 80111d0:	4b28      	ldr	r3, [pc, #160]	@ (8011274 <__lshift+0xd0>)
 80111d2:	4829      	ldr	r0, [pc, #164]	@ (8011278 <__lshift+0xd4>)
 80111d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80111d8:	f001 fe8a 	bl	8012ef0 <__assert_func>
 80111dc:	3101      	adds	r1, #1
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	e7ee      	b.n	80111c0 <__lshift+0x1c>
 80111e2:	2300      	movs	r3, #0
 80111e4:	f100 0114 	add.w	r1, r0, #20
 80111e8:	f100 0210 	add.w	r2, r0, #16
 80111ec:	4618      	mov	r0, r3
 80111ee:	4553      	cmp	r3, sl
 80111f0:	db33      	blt.n	801125a <__lshift+0xb6>
 80111f2:	6920      	ldr	r0, [r4, #16]
 80111f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111f8:	f104 0314 	add.w	r3, r4, #20
 80111fc:	f019 091f 	ands.w	r9, r9, #31
 8011200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011208:	d02b      	beq.n	8011262 <__lshift+0xbe>
 801120a:	f1c9 0e20 	rsb	lr, r9, #32
 801120e:	468a      	mov	sl, r1
 8011210:	2200      	movs	r2, #0
 8011212:	6818      	ldr	r0, [r3, #0]
 8011214:	fa00 f009 	lsl.w	r0, r0, r9
 8011218:	4310      	orrs	r0, r2
 801121a:	f84a 0b04 	str.w	r0, [sl], #4
 801121e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011222:	459c      	cmp	ip, r3
 8011224:	fa22 f20e 	lsr.w	r2, r2, lr
 8011228:	d8f3      	bhi.n	8011212 <__lshift+0x6e>
 801122a:	ebac 0304 	sub.w	r3, ip, r4
 801122e:	3b15      	subs	r3, #21
 8011230:	f023 0303 	bic.w	r3, r3, #3
 8011234:	3304      	adds	r3, #4
 8011236:	f104 0015 	add.w	r0, r4, #21
 801123a:	4584      	cmp	ip, r0
 801123c:	bf38      	it	cc
 801123e:	2304      	movcc	r3, #4
 8011240:	50ca      	str	r2, [r1, r3]
 8011242:	b10a      	cbz	r2, 8011248 <__lshift+0xa4>
 8011244:	f108 0602 	add.w	r6, r8, #2
 8011248:	3e01      	subs	r6, #1
 801124a:	4638      	mov	r0, r7
 801124c:	612e      	str	r6, [r5, #16]
 801124e:	4621      	mov	r1, r4
 8011250:	f7ff fd90 	bl	8010d74 <_Bfree>
 8011254:	4628      	mov	r0, r5
 8011256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801125a:	f842 0f04 	str.w	r0, [r2, #4]!
 801125e:	3301      	adds	r3, #1
 8011260:	e7c5      	b.n	80111ee <__lshift+0x4a>
 8011262:	3904      	subs	r1, #4
 8011264:	f853 2b04 	ldr.w	r2, [r3], #4
 8011268:	f841 2f04 	str.w	r2, [r1, #4]!
 801126c:	459c      	cmp	ip, r3
 801126e:	d8f9      	bhi.n	8011264 <__lshift+0xc0>
 8011270:	e7ea      	b.n	8011248 <__lshift+0xa4>
 8011272:	bf00      	nop
 8011274:	08016123 	.word	0x08016123
 8011278:	08016134 	.word	0x08016134

0801127c <__mcmp>:
 801127c:	690a      	ldr	r2, [r1, #16]
 801127e:	4603      	mov	r3, r0
 8011280:	6900      	ldr	r0, [r0, #16]
 8011282:	1a80      	subs	r0, r0, r2
 8011284:	b530      	push	{r4, r5, lr}
 8011286:	d10e      	bne.n	80112a6 <__mcmp+0x2a>
 8011288:	3314      	adds	r3, #20
 801128a:	3114      	adds	r1, #20
 801128c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011290:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801129c:	4295      	cmp	r5, r2
 801129e:	d003      	beq.n	80112a8 <__mcmp+0x2c>
 80112a0:	d205      	bcs.n	80112ae <__mcmp+0x32>
 80112a2:	f04f 30ff 	mov.w	r0, #4294967295
 80112a6:	bd30      	pop	{r4, r5, pc}
 80112a8:	42a3      	cmp	r3, r4
 80112aa:	d3f3      	bcc.n	8011294 <__mcmp+0x18>
 80112ac:	e7fb      	b.n	80112a6 <__mcmp+0x2a>
 80112ae:	2001      	movs	r0, #1
 80112b0:	e7f9      	b.n	80112a6 <__mcmp+0x2a>
	...

080112b4 <__mdiff>:
 80112b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	4689      	mov	r9, r1
 80112ba:	4606      	mov	r6, r0
 80112bc:	4611      	mov	r1, r2
 80112be:	4648      	mov	r0, r9
 80112c0:	4614      	mov	r4, r2
 80112c2:	f7ff ffdb 	bl	801127c <__mcmp>
 80112c6:	1e05      	subs	r5, r0, #0
 80112c8:	d112      	bne.n	80112f0 <__mdiff+0x3c>
 80112ca:	4629      	mov	r1, r5
 80112cc:	4630      	mov	r0, r6
 80112ce:	f7ff fd11 	bl	8010cf4 <_Balloc>
 80112d2:	4602      	mov	r2, r0
 80112d4:	b928      	cbnz	r0, 80112e2 <__mdiff+0x2e>
 80112d6:	4b3f      	ldr	r3, [pc, #252]	@ (80113d4 <__mdiff+0x120>)
 80112d8:	f240 2137 	movw	r1, #567	@ 0x237
 80112dc:	483e      	ldr	r0, [pc, #248]	@ (80113d8 <__mdiff+0x124>)
 80112de:	f001 fe07 	bl	8012ef0 <__assert_func>
 80112e2:	2301      	movs	r3, #1
 80112e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112e8:	4610      	mov	r0, r2
 80112ea:	b003      	add	sp, #12
 80112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f0:	bfbc      	itt	lt
 80112f2:	464b      	movlt	r3, r9
 80112f4:	46a1      	movlt	r9, r4
 80112f6:	4630      	mov	r0, r6
 80112f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80112fc:	bfba      	itte	lt
 80112fe:	461c      	movlt	r4, r3
 8011300:	2501      	movlt	r5, #1
 8011302:	2500      	movge	r5, #0
 8011304:	f7ff fcf6 	bl	8010cf4 <_Balloc>
 8011308:	4602      	mov	r2, r0
 801130a:	b918      	cbnz	r0, 8011314 <__mdiff+0x60>
 801130c:	4b31      	ldr	r3, [pc, #196]	@ (80113d4 <__mdiff+0x120>)
 801130e:	f240 2145 	movw	r1, #581	@ 0x245
 8011312:	e7e3      	b.n	80112dc <__mdiff+0x28>
 8011314:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011318:	6926      	ldr	r6, [r4, #16]
 801131a:	60c5      	str	r5, [r0, #12]
 801131c:	f109 0310 	add.w	r3, r9, #16
 8011320:	f109 0514 	add.w	r5, r9, #20
 8011324:	f104 0e14 	add.w	lr, r4, #20
 8011328:	f100 0b14 	add.w	fp, r0, #20
 801132c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011330:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011334:	9301      	str	r3, [sp, #4]
 8011336:	46d9      	mov	r9, fp
 8011338:	f04f 0c00 	mov.w	ip, #0
 801133c:	9b01      	ldr	r3, [sp, #4]
 801133e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011342:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	fa1f f38a 	uxth.w	r3, sl
 801134c:	4619      	mov	r1, r3
 801134e:	b283      	uxth	r3, r0
 8011350:	1acb      	subs	r3, r1, r3
 8011352:	0c00      	lsrs	r0, r0, #16
 8011354:	4463      	add	r3, ip
 8011356:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801135a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801135e:	b29b      	uxth	r3, r3
 8011360:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011364:	4576      	cmp	r6, lr
 8011366:	f849 3b04 	str.w	r3, [r9], #4
 801136a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801136e:	d8e5      	bhi.n	801133c <__mdiff+0x88>
 8011370:	1b33      	subs	r3, r6, r4
 8011372:	3b15      	subs	r3, #21
 8011374:	f023 0303 	bic.w	r3, r3, #3
 8011378:	3415      	adds	r4, #21
 801137a:	3304      	adds	r3, #4
 801137c:	42a6      	cmp	r6, r4
 801137e:	bf38      	it	cc
 8011380:	2304      	movcc	r3, #4
 8011382:	441d      	add	r5, r3
 8011384:	445b      	add	r3, fp
 8011386:	461e      	mov	r6, r3
 8011388:	462c      	mov	r4, r5
 801138a:	4544      	cmp	r4, r8
 801138c:	d30e      	bcc.n	80113ac <__mdiff+0xf8>
 801138e:	f108 0103 	add.w	r1, r8, #3
 8011392:	1b49      	subs	r1, r1, r5
 8011394:	f021 0103 	bic.w	r1, r1, #3
 8011398:	3d03      	subs	r5, #3
 801139a:	45a8      	cmp	r8, r5
 801139c:	bf38      	it	cc
 801139e:	2100      	movcc	r1, #0
 80113a0:	440b      	add	r3, r1
 80113a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113a6:	b191      	cbz	r1, 80113ce <__mdiff+0x11a>
 80113a8:	6117      	str	r7, [r2, #16]
 80113aa:	e79d      	b.n	80112e8 <__mdiff+0x34>
 80113ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80113b0:	46e6      	mov	lr, ip
 80113b2:	0c08      	lsrs	r0, r1, #16
 80113b4:	fa1c fc81 	uxtah	ip, ip, r1
 80113b8:	4471      	add	r1, lr
 80113ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80113be:	b289      	uxth	r1, r1
 80113c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80113c4:	f846 1b04 	str.w	r1, [r6], #4
 80113c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113cc:	e7dd      	b.n	801138a <__mdiff+0xd6>
 80113ce:	3f01      	subs	r7, #1
 80113d0:	e7e7      	b.n	80113a2 <__mdiff+0xee>
 80113d2:	bf00      	nop
 80113d4:	08016123 	.word	0x08016123
 80113d8:	08016134 	.word	0x08016134

080113dc <__ulp>:
 80113dc:	b082      	sub	sp, #8
 80113de:	ed8d 0b00 	vstr	d0, [sp]
 80113e2:	9a01      	ldr	r2, [sp, #4]
 80113e4:	4b0f      	ldr	r3, [pc, #60]	@ (8011424 <__ulp+0x48>)
 80113e6:	4013      	ands	r3, r2
 80113e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	dc08      	bgt.n	8011402 <__ulp+0x26>
 80113f0:	425b      	negs	r3, r3
 80113f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80113f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80113fa:	da04      	bge.n	8011406 <__ulp+0x2a>
 80113fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011400:	4113      	asrs	r3, r2
 8011402:	2200      	movs	r2, #0
 8011404:	e008      	b.n	8011418 <__ulp+0x3c>
 8011406:	f1a2 0314 	sub.w	r3, r2, #20
 801140a:	2b1e      	cmp	r3, #30
 801140c:	bfda      	itte	le
 801140e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011412:	40da      	lsrle	r2, r3
 8011414:	2201      	movgt	r2, #1
 8011416:	2300      	movs	r3, #0
 8011418:	4619      	mov	r1, r3
 801141a:	4610      	mov	r0, r2
 801141c:	ec41 0b10 	vmov	d0, r0, r1
 8011420:	b002      	add	sp, #8
 8011422:	4770      	bx	lr
 8011424:	7ff00000 	.word	0x7ff00000

08011428 <__b2d>:
 8011428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801142c:	6906      	ldr	r6, [r0, #16]
 801142e:	f100 0814 	add.w	r8, r0, #20
 8011432:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011436:	1f37      	subs	r7, r6, #4
 8011438:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801143c:	4610      	mov	r0, r2
 801143e:	f7ff fd4b 	bl	8010ed8 <__hi0bits>
 8011442:	f1c0 0320 	rsb	r3, r0, #32
 8011446:	280a      	cmp	r0, #10
 8011448:	600b      	str	r3, [r1, #0]
 801144a:	491b      	ldr	r1, [pc, #108]	@ (80114b8 <__b2d+0x90>)
 801144c:	dc15      	bgt.n	801147a <__b2d+0x52>
 801144e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011452:	fa22 f30c 	lsr.w	r3, r2, ip
 8011456:	45b8      	cmp	r8, r7
 8011458:	ea43 0501 	orr.w	r5, r3, r1
 801145c:	bf34      	ite	cc
 801145e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011462:	2300      	movcs	r3, #0
 8011464:	3015      	adds	r0, #21
 8011466:	fa02 f000 	lsl.w	r0, r2, r0
 801146a:	fa23 f30c 	lsr.w	r3, r3, ip
 801146e:	4303      	orrs	r3, r0
 8011470:	461c      	mov	r4, r3
 8011472:	ec45 4b10 	vmov	d0, r4, r5
 8011476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147a:	45b8      	cmp	r8, r7
 801147c:	bf3a      	itte	cc
 801147e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011482:	f1a6 0708 	subcc.w	r7, r6, #8
 8011486:	2300      	movcs	r3, #0
 8011488:	380b      	subs	r0, #11
 801148a:	d012      	beq.n	80114b2 <__b2d+0x8a>
 801148c:	f1c0 0120 	rsb	r1, r0, #32
 8011490:	fa23 f401 	lsr.w	r4, r3, r1
 8011494:	4082      	lsls	r2, r0
 8011496:	4322      	orrs	r2, r4
 8011498:	4547      	cmp	r7, r8
 801149a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801149e:	bf8c      	ite	hi
 80114a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80114a4:	2200      	movls	r2, #0
 80114a6:	4083      	lsls	r3, r0
 80114a8:	40ca      	lsrs	r2, r1
 80114aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80114ae:	4313      	orrs	r3, r2
 80114b0:	e7de      	b.n	8011470 <__b2d+0x48>
 80114b2:	ea42 0501 	orr.w	r5, r2, r1
 80114b6:	e7db      	b.n	8011470 <__b2d+0x48>
 80114b8:	3ff00000 	.word	0x3ff00000

080114bc <__d2b>:
 80114bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114c0:	460f      	mov	r7, r1
 80114c2:	2101      	movs	r1, #1
 80114c4:	ec59 8b10 	vmov	r8, r9, d0
 80114c8:	4616      	mov	r6, r2
 80114ca:	f7ff fc13 	bl	8010cf4 <_Balloc>
 80114ce:	4604      	mov	r4, r0
 80114d0:	b930      	cbnz	r0, 80114e0 <__d2b+0x24>
 80114d2:	4602      	mov	r2, r0
 80114d4:	4b23      	ldr	r3, [pc, #140]	@ (8011564 <__d2b+0xa8>)
 80114d6:	4824      	ldr	r0, [pc, #144]	@ (8011568 <__d2b+0xac>)
 80114d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80114dc:	f001 fd08 	bl	8012ef0 <__assert_func>
 80114e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114e8:	b10d      	cbz	r5, 80114ee <__d2b+0x32>
 80114ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	f1b8 0300 	subs.w	r3, r8, #0
 80114f4:	d023      	beq.n	801153e <__d2b+0x82>
 80114f6:	4668      	mov	r0, sp
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	f7ff fd0c 	bl	8010f16 <__lo0bits>
 80114fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011502:	b1d0      	cbz	r0, 801153a <__d2b+0x7e>
 8011504:	f1c0 0320 	rsb	r3, r0, #32
 8011508:	fa02 f303 	lsl.w	r3, r2, r3
 801150c:	430b      	orrs	r3, r1
 801150e:	40c2      	lsrs	r2, r0
 8011510:	6163      	str	r3, [r4, #20]
 8011512:	9201      	str	r2, [sp, #4]
 8011514:	9b01      	ldr	r3, [sp, #4]
 8011516:	61a3      	str	r3, [r4, #24]
 8011518:	2b00      	cmp	r3, #0
 801151a:	bf0c      	ite	eq
 801151c:	2201      	moveq	r2, #1
 801151e:	2202      	movne	r2, #2
 8011520:	6122      	str	r2, [r4, #16]
 8011522:	b1a5      	cbz	r5, 801154e <__d2b+0x92>
 8011524:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011528:	4405      	add	r5, r0
 801152a:	603d      	str	r5, [r7, #0]
 801152c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011530:	6030      	str	r0, [r6, #0]
 8011532:	4620      	mov	r0, r4
 8011534:	b003      	add	sp, #12
 8011536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801153a:	6161      	str	r1, [r4, #20]
 801153c:	e7ea      	b.n	8011514 <__d2b+0x58>
 801153e:	a801      	add	r0, sp, #4
 8011540:	f7ff fce9 	bl	8010f16 <__lo0bits>
 8011544:	9b01      	ldr	r3, [sp, #4]
 8011546:	6163      	str	r3, [r4, #20]
 8011548:	3020      	adds	r0, #32
 801154a:	2201      	movs	r2, #1
 801154c:	e7e8      	b.n	8011520 <__d2b+0x64>
 801154e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011552:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011556:	6038      	str	r0, [r7, #0]
 8011558:	6918      	ldr	r0, [r3, #16]
 801155a:	f7ff fcbd 	bl	8010ed8 <__hi0bits>
 801155e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011562:	e7e5      	b.n	8011530 <__d2b+0x74>
 8011564:	08016123 	.word	0x08016123
 8011568:	08016134 	.word	0x08016134

0801156c <__ratio>:
 801156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011570:	b085      	sub	sp, #20
 8011572:	e9cd 1000 	strd	r1, r0, [sp]
 8011576:	a902      	add	r1, sp, #8
 8011578:	f7ff ff56 	bl	8011428 <__b2d>
 801157c:	9800      	ldr	r0, [sp, #0]
 801157e:	a903      	add	r1, sp, #12
 8011580:	ec55 4b10 	vmov	r4, r5, d0
 8011584:	f7ff ff50 	bl	8011428 <__b2d>
 8011588:	9b01      	ldr	r3, [sp, #4]
 801158a:	6919      	ldr	r1, [r3, #16]
 801158c:	9b00      	ldr	r3, [sp, #0]
 801158e:	691b      	ldr	r3, [r3, #16]
 8011590:	1ac9      	subs	r1, r1, r3
 8011592:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011596:	1a9b      	subs	r3, r3, r2
 8011598:	ec5b ab10 	vmov	sl, fp, d0
 801159c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	bfce      	itee	gt
 80115a4:	462a      	movgt	r2, r5
 80115a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80115aa:	465a      	movle	r2, fp
 80115ac:	462f      	mov	r7, r5
 80115ae:	46d9      	mov	r9, fp
 80115b0:	bfcc      	ite	gt
 80115b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80115b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80115ba:	464b      	mov	r3, r9
 80115bc:	4652      	mov	r2, sl
 80115be:	4620      	mov	r0, r4
 80115c0:	4639      	mov	r1, r7
 80115c2:	f7ef f963 	bl	800088c <__aeabi_ddiv>
 80115c6:	ec41 0b10 	vmov	d0, r0, r1
 80115ca:	b005      	add	sp, #20
 80115cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115d0 <__copybits>:
 80115d0:	3901      	subs	r1, #1
 80115d2:	b570      	push	{r4, r5, r6, lr}
 80115d4:	1149      	asrs	r1, r1, #5
 80115d6:	6914      	ldr	r4, [r2, #16]
 80115d8:	3101      	adds	r1, #1
 80115da:	f102 0314 	add.w	r3, r2, #20
 80115de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115e6:	1f05      	subs	r5, r0, #4
 80115e8:	42a3      	cmp	r3, r4
 80115ea:	d30c      	bcc.n	8011606 <__copybits+0x36>
 80115ec:	1aa3      	subs	r3, r4, r2
 80115ee:	3b11      	subs	r3, #17
 80115f0:	f023 0303 	bic.w	r3, r3, #3
 80115f4:	3211      	adds	r2, #17
 80115f6:	42a2      	cmp	r2, r4
 80115f8:	bf88      	it	hi
 80115fa:	2300      	movhi	r3, #0
 80115fc:	4418      	add	r0, r3
 80115fe:	2300      	movs	r3, #0
 8011600:	4288      	cmp	r0, r1
 8011602:	d305      	bcc.n	8011610 <__copybits+0x40>
 8011604:	bd70      	pop	{r4, r5, r6, pc}
 8011606:	f853 6b04 	ldr.w	r6, [r3], #4
 801160a:	f845 6f04 	str.w	r6, [r5, #4]!
 801160e:	e7eb      	b.n	80115e8 <__copybits+0x18>
 8011610:	f840 3b04 	str.w	r3, [r0], #4
 8011614:	e7f4      	b.n	8011600 <__copybits+0x30>

08011616 <__any_on>:
 8011616:	f100 0214 	add.w	r2, r0, #20
 801161a:	6900      	ldr	r0, [r0, #16]
 801161c:	114b      	asrs	r3, r1, #5
 801161e:	4298      	cmp	r0, r3
 8011620:	b510      	push	{r4, lr}
 8011622:	db11      	blt.n	8011648 <__any_on+0x32>
 8011624:	dd0a      	ble.n	801163c <__any_on+0x26>
 8011626:	f011 011f 	ands.w	r1, r1, #31
 801162a:	d007      	beq.n	801163c <__any_on+0x26>
 801162c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011630:	fa24 f001 	lsr.w	r0, r4, r1
 8011634:	fa00 f101 	lsl.w	r1, r0, r1
 8011638:	428c      	cmp	r4, r1
 801163a:	d10b      	bne.n	8011654 <__any_on+0x3e>
 801163c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011640:	4293      	cmp	r3, r2
 8011642:	d803      	bhi.n	801164c <__any_on+0x36>
 8011644:	2000      	movs	r0, #0
 8011646:	bd10      	pop	{r4, pc}
 8011648:	4603      	mov	r3, r0
 801164a:	e7f7      	b.n	801163c <__any_on+0x26>
 801164c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011650:	2900      	cmp	r1, #0
 8011652:	d0f5      	beq.n	8011640 <__any_on+0x2a>
 8011654:	2001      	movs	r0, #1
 8011656:	e7f6      	b.n	8011646 <__any_on+0x30>

08011658 <sulp>:
 8011658:	b570      	push	{r4, r5, r6, lr}
 801165a:	4604      	mov	r4, r0
 801165c:	460d      	mov	r5, r1
 801165e:	ec45 4b10 	vmov	d0, r4, r5
 8011662:	4616      	mov	r6, r2
 8011664:	f7ff feba 	bl	80113dc <__ulp>
 8011668:	ec51 0b10 	vmov	r0, r1, d0
 801166c:	b17e      	cbz	r6, 801168e <sulp+0x36>
 801166e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011672:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011676:	2b00      	cmp	r3, #0
 8011678:	dd09      	ble.n	801168e <sulp+0x36>
 801167a:	051b      	lsls	r3, r3, #20
 801167c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011680:	2400      	movs	r4, #0
 8011682:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011686:	4622      	mov	r2, r4
 8011688:	462b      	mov	r3, r5
 801168a:	f7ee ffd5 	bl	8000638 <__aeabi_dmul>
 801168e:	ec41 0b10 	vmov	d0, r0, r1
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	0000      	movs	r0, r0
	...

08011698 <_strtod_l>:
 8011698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801169c:	b09f      	sub	sp, #124	@ 0x7c
 801169e:	460c      	mov	r4, r1
 80116a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80116a2:	2200      	movs	r2, #0
 80116a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80116a6:	9005      	str	r0, [sp, #20]
 80116a8:	f04f 0a00 	mov.w	sl, #0
 80116ac:	f04f 0b00 	mov.w	fp, #0
 80116b0:	460a      	mov	r2, r1
 80116b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80116b4:	7811      	ldrb	r1, [r2, #0]
 80116b6:	292b      	cmp	r1, #43	@ 0x2b
 80116b8:	d04a      	beq.n	8011750 <_strtod_l+0xb8>
 80116ba:	d838      	bhi.n	801172e <_strtod_l+0x96>
 80116bc:	290d      	cmp	r1, #13
 80116be:	d832      	bhi.n	8011726 <_strtod_l+0x8e>
 80116c0:	2908      	cmp	r1, #8
 80116c2:	d832      	bhi.n	801172a <_strtod_l+0x92>
 80116c4:	2900      	cmp	r1, #0
 80116c6:	d03b      	beq.n	8011740 <_strtod_l+0xa8>
 80116c8:	2200      	movs	r2, #0
 80116ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80116cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80116ce:	782a      	ldrb	r2, [r5, #0]
 80116d0:	2a30      	cmp	r2, #48	@ 0x30
 80116d2:	f040 80b3 	bne.w	801183c <_strtod_l+0x1a4>
 80116d6:	786a      	ldrb	r2, [r5, #1]
 80116d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80116dc:	2a58      	cmp	r2, #88	@ 0x58
 80116de:	d16e      	bne.n	80117be <_strtod_l+0x126>
 80116e0:	9302      	str	r3, [sp, #8]
 80116e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	4a8e      	ldr	r2, [pc, #568]	@ (8011924 <_strtod_l+0x28c>)
 80116ec:	9805      	ldr	r0, [sp, #20]
 80116ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80116f0:	a919      	add	r1, sp, #100	@ 0x64
 80116f2:	f001 fc83 	bl	8012ffc <__gethex>
 80116f6:	f010 060f 	ands.w	r6, r0, #15
 80116fa:	4604      	mov	r4, r0
 80116fc:	d005      	beq.n	801170a <_strtod_l+0x72>
 80116fe:	2e06      	cmp	r6, #6
 8011700:	d128      	bne.n	8011754 <_strtod_l+0xbc>
 8011702:	3501      	adds	r5, #1
 8011704:	2300      	movs	r3, #0
 8011706:	9519      	str	r5, [sp, #100]	@ 0x64
 8011708:	930b      	str	r3, [sp, #44]	@ 0x2c
 801170a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801170c:	2b00      	cmp	r3, #0
 801170e:	f040 858e 	bne.w	801222e <_strtod_l+0xb96>
 8011712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011714:	b1cb      	cbz	r3, 801174a <_strtod_l+0xb2>
 8011716:	4652      	mov	r2, sl
 8011718:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801171c:	ec43 2b10 	vmov	d0, r2, r3
 8011720:	b01f      	add	sp, #124	@ 0x7c
 8011722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011726:	2920      	cmp	r1, #32
 8011728:	d1ce      	bne.n	80116c8 <_strtod_l+0x30>
 801172a:	3201      	adds	r2, #1
 801172c:	e7c1      	b.n	80116b2 <_strtod_l+0x1a>
 801172e:	292d      	cmp	r1, #45	@ 0x2d
 8011730:	d1ca      	bne.n	80116c8 <_strtod_l+0x30>
 8011732:	2101      	movs	r1, #1
 8011734:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011736:	1c51      	adds	r1, r2, #1
 8011738:	9119      	str	r1, [sp, #100]	@ 0x64
 801173a:	7852      	ldrb	r2, [r2, #1]
 801173c:	2a00      	cmp	r2, #0
 801173e:	d1c5      	bne.n	80116cc <_strtod_l+0x34>
 8011740:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011742:	9419      	str	r4, [sp, #100]	@ 0x64
 8011744:	2b00      	cmp	r3, #0
 8011746:	f040 8570 	bne.w	801222a <_strtod_l+0xb92>
 801174a:	4652      	mov	r2, sl
 801174c:	465b      	mov	r3, fp
 801174e:	e7e5      	b.n	801171c <_strtod_l+0x84>
 8011750:	2100      	movs	r1, #0
 8011752:	e7ef      	b.n	8011734 <_strtod_l+0x9c>
 8011754:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011756:	b13a      	cbz	r2, 8011768 <_strtod_l+0xd0>
 8011758:	2135      	movs	r1, #53	@ 0x35
 801175a:	a81c      	add	r0, sp, #112	@ 0x70
 801175c:	f7ff ff38 	bl	80115d0 <__copybits>
 8011760:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011762:	9805      	ldr	r0, [sp, #20]
 8011764:	f7ff fb06 	bl	8010d74 <_Bfree>
 8011768:	3e01      	subs	r6, #1
 801176a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801176c:	2e04      	cmp	r6, #4
 801176e:	d806      	bhi.n	801177e <_strtod_l+0xe6>
 8011770:	e8df f006 	tbb	[pc, r6]
 8011774:	201d0314 	.word	0x201d0314
 8011778:	14          	.byte	0x14
 8011779:	00          	.byte	0x00
 801177a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801177e:	05e1      	lsls	r1, r4, #23
 8011780:	bf48      	it	mi
 8011782:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011786:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801178a:	0d1b      	lsrs	r3, r3, #20
 801178c:	051b      	lsls	r3, r3, #20
 801178e:	2b00      	cmp	r3, #0
 8011790:	d1bb      	bne.n	801170a <_strtod_l+0x72>
 8011792:	f7fe fbcd 	bl	800ff30 <__errno>
 8011796:	2322      	movs	r3, #34	@ 0x22
 8011798:	6003      	str	r3, [r0, #0]
 801179a:	e7b6      	b.n	801170a <_strtod_l+0x72>
 801179c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80117a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80117a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80117a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80117ac:	e7e7      	b.n	801177e <_strtod_l+0xe6>
 80117ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801192c <_strtod_l+0x294>
 80117b2:	e7e4      	b.n	801177e <_strtod_l+0xe6>
 80117b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80117b8:	f04f 3aff 	mov.w	sl, #4294967295
 80117bc:	e7df      	b.n	801177e <_strtod_l+0xe6>
 80117be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117c0:	1c5a      	adds	r2, r3, #1
 80117c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80117c4:	785b      	ldrb	r3, [r3, #1]
 80117c6:	2b30      	cmp	r3, #48	@ 0x30
 80117c8:	d0f9      	beq.n	80117be <_strtod_l+0x126>
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d09d      	beq.n	801170a <_strtod_l+0x72>
 80117ce:	2301      	movs	r3, #1
 80117d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80117d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80117d6:	2300      	movs	r3, #0
 80117d8:	9308      	str	r3, [sp, #32]
 80117da:	930a      	str	r3, [sp, #40]	@ 0x28
 80117dc:	461f      	mov	r7, r3
 80117de:	220a      	movs	r2, #10
 80117e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80117e2:	7805      	ldrb	r5, [r0, #0]
 80117e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80117e8:	b2d9      	uxtb	r1, r3
 80117ea:	2909      	cmp	r1, #9
 80117ec:	d928      	bls.n	8011840 <_strtod_l+0x1a8>
 80117ee:	494e      	ldr	r1, [pc, #312]	@ (8011928 <_strtod_l+0x290>)
 80117f0:	2201      	movs	r2, #1
 80117f2:	f001 fb62 	bl	8012eba <strncmp>
 80117f6:	2800      	cmp	r0, #0
 80117f8:	d032      	beq.n	8011860 <_strtod_l+0x1c8>
 80117fa:	2000      	movs	r0, #0
 80117fc:	462a      	mov	r2, r5
 80117fe:	4681      	mov	r9, r0
 8011800:	463d      	mov	r5, r7
 8011802:	4603      	mov	r3, r0
 8011804:	2a65      	cmp	r2, #101	@ 0x65
 8011806:	d001      	beq.n	801180c <_strtod_l+0x174>
 8011808:	2a45      	cmp	r2, #69	@ 0x45
 801180a:	d114      	bne.n	8011836 <_strtod_l+0x19e>
 801180c:	b91d      	cbnz	r5, 8011816 <_strtod_l+0x17e>
 801180e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011810:	4302      	orrs	r2, r0
 8011812:	d095      	beq.n	8011740 <_strtod_l+0xa8>
 8011814:	2500      	movs	r5, #0
 8011816:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011818:	1c62      	adds	r2, r4, #1
 801181a:	9219      	str	r2, [sp, #100]	@ 0x64
 801181c:	7862      	ldrb	r2, [r4, #1]
 801181e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011820:	d077      	beq.n	8011912 <_strtod_l+0x27a>
 8011822:	2a2d      	cmp	r2, #45	@ 0x2d
 8011824:	d07b      	beq.n	801191e <_strtod_l+0x286>
 8011826:	f04f 0c00 	mov.w	ip, #0
 801182a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801182e:	2909      	cmp	r1, #9
 8011830:	f240 8082 	bls.w	8011938 <_strtod_l+0x2a0>
 8011834:	9419      	str	r4, [sp, #100]	@ 0x64
 8011836:	f04f 0800 	mov.w	r8, #0
 801183a:	e0a2      	b.n	8011982 <_strtod_l+0x2ea>
 801183c:	2300      	movs	r3, #0
 801183e:	e7c7      	b.n	80117d0 <_strtod_l+0x138>
 8011840:	2f08      	cmp	r7, #8
 8011842:	bfd5      	itete	le
 8011844:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011846:	9908      	ldrgt	r1, [sp, #32]
 8011848:	fb02 3301 	mlale	r3, r2, r1, r3
 801184c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011850:	f100 0001 	add.w	r0, r0, #1
 8011854:	bfd4      	ite	le
 8011856:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011858:	9308      	strgt	r3, [sp, #32]
 801185a:	3701      	adds	r7, #1
 801185c:	9019      	str	r0, [sp, #100]	@ 0x64
 801185e:	e7bf      	b.n	80117e0 <_strtod_l+0x148>
 8011860:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011862:	1c5a      	adds	r2, r3, #1
 8011864:	9219      	str	r2, [sp, #100]	@ 0x64
 8011866:	785a      	ldrb	r2, [r3, #1]
 8011868:	b37f      	cbz	r7, 80118ca <_strtod_l+0x232>
 801186a:	4681      	mov	r9, r0
 801186c:	463d      	mov	r5, r7
 801186e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011872:	2b09      	cmp	r3, #9
 8011874:	d912      	bls.n	801189c <_strtod_l+0x204>
 8011876:	2301      	movs	r3, #1
 8011878:	e7c4      	b.n	8011804 <_strtod_l+0x16c>
 801187a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801187c:	1c5a      	adds	r2, r3, #1
 801187e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011880:	785a      	ldrb	r2, [r3, #1]
 8011882:	3001      	adds	r0, #1
 8011884:	2a30      	cmp	r2, #48	@ 0x30
 8011886:	d0f8      	beq.n	801187a <_strtod_l+0x1e2>
 8011888:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801188c:	2b08      	cmp	r3, #8
 801188e:	f200 84d3 	bhi.w	8012238 <_strtod_l+0xba0>
 8011892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011894:	930c      	str	r3, [sp, #48]	@ 0x30
 8011896:	4681      	mov	r9, r0
 8011898:	2000      	movs	r0, #0
 801189a:	4605      	mov	r5, r0
 801189c:	3a30      	subs	r2, #48	@ 0x30
 801189e:	f100 0301 	add.w	r3, r0, #1
 80118a2:	d02a      	beq.n	80118fa <_strtod_l+0x262>
 80118a4:	4499      	add	r9, r3
 80118a6:	eb00 0c05 	add.w	ip, r0, r5
 80118aa:	462b      	mov	r3, r5
 80118ac:	210a      	movs	r1, #10
 80118ae:	4563      	cmp	r3, ip
 80118b0:	d10d      	bne.n	80118ce <_strtod_l+0x236>
 80118b2:	1c69      	adds	r1, r5, #1
 80118b4:	4401      	add	r1, r0
 80118b6:	4428      	add	r0, r5
 80118b8:	2808      	cmp	r0, #8
 80118ba:	dc16      	bgt.n	80118ea <_strtod_l+0x252>
 80118bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80118be:	230a      	movs	r3, #10
 80118c0:	fb03 2300 	mla	r3, r3, r0, r2
 80118c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80118c6:	2300      	movs	r3, #0
 80118c8:	e018      	b.n	80118fc <_strtod_l+0x264>
 80118ca:	4638      	mov	r0, r7
 80118cc:	e7da      	b.n	8011884 <_strtod_l+0x1ec>
 80118ce:	2b08      	cmp	r3, #8
 80118d0:	f103 0301 	add.w	r3, r3, #1
 80118d4:	dc03      	bgt.n	80118de <_strtod_l+0x246>
 80118d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80118d8:	434e      	muls	r6, r1
 80118da:	960a      	str	r6, [sp, #40]	@ 0x28
 80118dc:	e7e7      	b.n	80118ae <_strtod_l+0x216>
 80118de:	2b10      	cmp	r3, #16
 80118e0:	bfde      	ittt	le
 80118e2:	9e08      	ldrle	r6, [sp, #32]
 80118e4:	434e      	mulle	r6, r1
 80118e6:	9608      	strle	r6, [sp, #32]
 80118e8:	e7e1      	b.n	80118ae <_strtod_l+0x216>
 80118ea:	280f      	cmp	r0, #15
 80118ec:	dceb      	bgt.n	80118c6 <_strtod_l+0x22e>
 80118ee:	9808      	ldr	r0, [sp, #32]
 80118f0:	230a      	movs	r3, #10
 80118f2:	fb03 2300 	mla	r3, r3, r0, r2
 80118f6:	9308      	str	r3, [sp, #32]
 80118f8:	e7e5      	b.n	80118c6 <_strtod_l+0x22e>
 80118fa:	4629      	mov	r1, r5
 80118fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80118fe:	1c50      	adds	r0, r2, #1
 8011900:	9019      	str	r0, [sp, #100]	@ 0x64
 8011902:	7852      	ldrb	r2, [r2, #1]
 8011904:	4618      	mov	r0, r3
 8011906:	460d      	mov	r5, r1
 8011908:	e7b1      	b.n	801186e <_strtod_l+0x1d6>
 801190a:	f04f 0900 	mov.w	r9, #0
 801190e:	2301      	movs	r3, #1
 8011910:	e77d      	b.n	801180e <_strtod_l+0x176>
 8011912:	f04f 0c00 	mov.w	ip, #0
 8011916:	1ca2      	adds	r2, r4, #2
 8011918:	9219      	str	r2, [sp, #100]	@ 0x64
 801191a:	78a2      	ldrb	r2, [r4, #2]
 801191c:	e785      	b.n	801182a <_strtod_l+0x192>
 801191e:	f04f 0c01 	mov.w	ip, #1
 8011922:	e7f8      	b.n	8011916 <_strtod_l+0x27e>
 8011924:	080162a8 	.word	0x080162a8
 8011928:	08016290 	.word	0x08016290
 801192c:	7ff00000 	.word	0x7ff00000
 8011930:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011932:	1c51      	adds	r1, r2, #1
 8011934:	9119      	str	r1, [sp, #100]	@ 0x64
 8011936:	7852      	ldrb	r2, [r2, #1]
 8011938:	2a30      	cmp	r2, #48	@ 0x30
 801193a:	d0f9      	beq.n	8011930 <_strtod_l+0x298>
 801193c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011940:	2908      	cmp	r1, #8
 8011942:	f63f af78 	bhi.w	8011836 <_strtod_l+0x19e>
 8011946:	3a30      	subs	r2, #48	@ 0x30
 8011948:	920e      	str	r2, [sp, #56]	@ 0x38
 801194a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801194c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801194e:	f04f 080a 	mov.w	r8, #10
 8011952:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011954:	1c56      	adds	r6, r2, #1
 8011956:	9619      	str	r6, [sp, #100]	@ 0x64
 8011958:	7852      	ldrb	r2, [r2, #1]
 801195a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801195e:	f1be 0f09 	cmp.w	lr, #9
 8011962:	d939      	bls.n	80119d8 <_strtod_l+0x340>
 8011964:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011966:	1a76      	subs	r6, r6, r1
 8011968:	2e08      	cmp	r6, #8
 801196a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801196e:	dc03      	bgt.n	8011978 <_strtod_l+0x2e0>
 8011970:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011972:	4588      	cmp	r8, r1
 8011974:	bfa8      	it	ge
 8011976:	4688      	movge	r8, r1
 8011978:	f1bc 0f00 	cmp.w	ip, #0
 801197c:	d001      	beq.n	8011982 <_strtod_l+0x2ea>
 801197e:	f1c8 0800 	rsb	r8, r8, #0
 8011982:	2d00      	cmp	r5, #0
 8011984:	d14e      	bne.n	8011a24 <_strtod_l+0x38c>
 8011986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011988:	4308      	orrs	r0, r1
 801198a:	f47f aebe 	bne.w	801170a <_strtod_l+0x72>
 801198e:	2b00      	cmp	r3, #0
 8011990:	f47f aed6 	bne.w	8011740 <_strtod_l+0xa8>
 8011994:	2a69      	cmp	r2, #105	@ 0x69
 8011996:	d028      	beq.n	80119ea <_strtod_l+0x352>
 8011998:	dc25      	bgt.n	80119e6 <_strtod_l+0x34e>
 801199a:	2a49      	cmp	r2, #73	@ 0x49
 801199c:	d025      	beq.n	80119ea <_strtod_l+0x352>
 801199e:	2a4e      	cmp	r2, #78	@ 0x4e
 80119a0:	f47f aece 	bne.w	8011740 <_strtod_l+0xa8>
 80119a4:	499b      	ldr	r1, [pc, #620]	@ (8011c14 <_strtod_l+0x57c>)
 80119a6:	a819      	add	r0, sp, #100	@ 0x64
 80119a8:	f001 fd4a 	bl	8013440 <__match>
 80119ac:	2800      	cmp	r0, #0
 80119ae:	f43f aec7 	beq.w	8011740 <_strtod_l+0xa8>
 80119b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	2b28      	cmp	r3, #40	@ 0x28
 80119b8:	d12e      	bne.n	8011a18 <_strtod_l+0x380>
 80119ba:	4997      	ldr	r1, [pc, #604]	@ (8011c18 <_strtod_l+0x580>)
 80119bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80119be:	a819      	add	r0, sp, #100	@ 0x64
 80119c0:	f001 fd52 	bl	8013468 <__hexnan>
 80119c4:	2805      	cmp	r0, #5
 80119c6:	d127      	bne.n	8011a18 <_strtod_l+0x380>
 80119c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80119ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80119ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80119d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80119d6:	e698      	b.n	801170a <_strtod_l+0x72>
 80119d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80119da:	fb08 2101 	mla	r1, r8, r1, r2
 80119de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80119e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80119e4:	e7b5      	b.n	8011952 <_strtod_l+0x2ba>
 80119e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80119e8:	e7da      	b.n	80119a0 <_strtod_l+0x308>
 80119ea:	498c      	ldr	r1, [pc, #560]	@ (8011c1c <_strtod_l+0x584>)
 80119ec:	a819      	add	r0, sp, #100	@ 0x64
 80119ee:	f001 fd27 	bl	8013440 <__match>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	f43f aea4 	beq.w	8011740 <_strtod_l+0xa8>
 80119f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119fa:	4989      	ldr	r1, [pc, #548]	@ (8011c20 <_strtod_l+0x588>)
 80119fc:	3b01      	subs	r3, #1
 80119fe:	a819      	add	r0, sp, #100	@ 0x64
 8011a00:	9319      	str	r3, [sp, #100]	@ 0x64
 8011a02:	f001 fd1d 	bl	8013440 <__match>
 8011a06:	b910      	cbnz	r0, 8011a0e <_strtod_l+0x376>
 8011a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8011a0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011c30 <_strtod_l+0x598>
 8011a12:	f04f 0a00 	mov.w	sl, #0
 8011a16:	e678      	b.n	801170a <_strtod_l+0x72>
 8011a18:	4882      	ldr	r0, [pc, #520]	@ (8011c24 <_strtod_l+0x58c>)
 8011a1a:	f001 fa61 	bl	8012ee0 <nan>
 8011a1e:	ec5b ab10 	vmov	sl, fp, d0
 8011a22:	e672      	b.n	801170a <_strtod_l+0x72>
 8011a24:	eba8 0309 	sub.w	r3, r8, r9
 8011a28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a2c:	2f00      	cmp	r7, #0
 8011a2e:	bf08      	it	eq
 8011a30:	462f      	moveq	r7, r5
 8011a32:	2d10      	cmp	r5, #16
 8011a34:	462c      	mov	r4, r5
 8011a36:	bfa8      	it	ge
 8011a38:	2410      	movge	r4, #16
 8011a3a:	f7ee fd83 	bl	8000544 <__aeabi_ui2d>
 8011a3e:	2d09      	cmp	r5, #9
 8011a40:	4682      	mov	sl, r0
 8011a42:	468b      	mov	fp, r1
 8011a44:	dc13      	bgt.n	8011a6e <_strtod_l+0x3d6>
 8011a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f43f ae5e 	beq.w	801170a <_strtod_l+0x72>
 8011a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a50:	dd78      	ble.n	8011b44 <_strtod_l+0x4ac>
 8011a52:	2b16      	cmp	r3, #22
 8011a54:	dc5f      	bgt.n	8011b16 <_strtod_l+0x47e>
 8011a56:	4974      	ldr	r1, [pc, #464]	@ (8011c28 <_strtod_l+0x590>)
 8011a58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a60:	4652      	mov	r2, sl
 8011a62:	465b      	mov	r3, fp
 8011a64:	f7ee fde8 	bl	8000638 <__aeabi_dmul>
 8011a68:	4682      	mov	sl, r0
 8011a6a:	468b      	mov	fp, r1
 8011a6c:	e64d      	b.n	801170a <_strtod_l+0x72>
 8011a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8011c28 <_strtod_l+0x590>)
 8011a70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011a78:	f7ee fdde 	bl	8000638 <__aeabi_dmul>
 8011a7c:	4682      	mov	sl, r0
 8011a7e:	9808      	ldr	r0, [sp, #32]
 8011a80:	468b      	mov	fp, r1
 8011a82:	f7ee fd5f 	bl	8000544 <__aeabi_ui2d>
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	4650      	mov	r0, sl
 8011a8c:	4659      	mov	r1, fp
 8011a8e:	f7ee fc1d 	bl	80002cc <__adddf3>
 8011a92:	2d0f      	cmp	r5, #15
 8011a94:	4682      	mov	sl, r0
 8011a96:	468b      	mov	fp, r1
 8011a98:	ddd5      	ble.n	8011a46 <_strtod_l+0x3ae>
 8011a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a9c:	1b2c      	subs	r4, r5, r4
 8011a9e:	441c      	add	r4, r3
 8011aa0:	2c00      	cmp	r4, #0
 8011aa2:	f340 8096 	ble.w	8011bd2 <_strtod_l+0x53a>
 8011aa6:	f014 030f 	ands.w	r3, r4, #15
 8011aaa:	d00a      	beq.n	8011ac2 <_strtod_l+0x42a>
 8011aac:	495e      	ldr	r1, [pc, #376]	@ (8011c28 <_strtod_l+0x590>)
 8011aae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ab2:	4652      	mov	r2, sl
 8011ab4:	465b      	mov	r3, fp
 8011ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aba:	f7ee fdbd 	bl	8000638 <__aeabi_dmul>
 8011abe:	4682      	mov	sl, r0
 8011ac0:	468b      	mov	fp, r1
 8011ac2:	f034 040f 	bics.w	r4, r4, #15
 8011ac6:	d073      	beq.n	8011bb0 <_strtod_l+0x518>
 8011ac8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011acc:	dd48      	ble.n	8011b60 <_strtod_l+0x4c8>
 8011ace:	2400      	movs	r4, #0
 8011ad0:	46a0      	mov	r8, r4
 8011ad2:	940a      	str	r4, [sp, #40]	@ 0x28
 8011ad4:	46a1      	mov	r9, r4
 8011ad6:	9a05      	ldr	r2, [sp, #20]
 8011ad8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011c30 <_strtod_l+0x598>
 8011adc:	2322      	movs	r3, #34	@ 0x22
 8011ade:	6013      	str	r3, [r2, #0]
 8011ae0:	f04f 0a00 	mov.w	sl, #0
 8011ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f43f ae0f 	beq.w	801170a <_strtod_l+0x72>
 8011aec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011aee:	9805      	ldr	r0, [sp, #20]
 8011af0:	f7ff f940 	bl	8010d74 <_Bfree>
 8011af4:	9805      	ldr	r0, [sp, #20]
 8011af6:	4649      	mov	r1, r9
 8011af8:	f7ff f93c 	bl	8010d74 <_Bfree>
 8011afc:	9805      	ldr	r0, [sp, #20]
 8011afe:	4641      	mov	r1, r8
 8011b00:	f7ff f938 	bl	8010d74 <_Bfree>
 8011b04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011b06:	9805      	ldr	r0, [sp, #20]
 8011b08:	f7ff f934 	bl	8010d74 <_Bfree>
 8011b0c:	9805      	ldr	r0, [sp, #20]
 8011b0e:	4621      	mov	r1, r4
 8011b10:	f7ff f930 	bl	8010d74 <_Bfree>
 8011b14:	e5f9      	b.n	801170a <_strtod_l+0x72>
 8011b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	dbbc      	blt.n	8011a9a <_strtod_l+0x402>
 8011b20:	4c41      	ldr	r4, [pc, #260]	@ (8011c28 <_strtod_l+0x590>)
 8011b22:	f1c5 050f 	rsb	r5, r5, #15
 8011b26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	465b      	mov	r3, fp
 8011b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b32:	f7ee fd81 	bl	8000638 <__aeabi_dmul>
 8011b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b38:	1b5d      	subs	r5, r3, r5
 8011b3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011b42:	e78f      	b.n	8011a64 <_strtod_l+0x3cc>
 8011b44:	3316      	adds	r3, #22
 8011b46:	dba8      	blt.n	8011a9a <_strtod_l+0x402>
 8011b48:	4b37      	ldr	r3, [pc, #220]	@ (8011c28 <_strtod_l+0x590>)
 8011b4a:	eba9 0808 	sub.w	r8, r9, r8
 8011b4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011b52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011b56:	4650      	mov	r0, sl
 8011b58:	4659      	mov	r1, fp
 8011b5a:	f7ee fe97 	bl	800088c <__aeabi_ddiv>
 8011b5e:	e783      	b.n	8011a68 <_strtod_l+0x3d0>
 8011b60:	4b32      	ldr	r3, [pc, #200]	@ (8011c2c <_strtod_l+0x594>)
 8011b62:	9308      	str	r3, [sp, #32]
 8011b64:	2300      	movs	r3, #0
 8011b66:	1124      	asrs	r4, r4, #4
 8011b68:	4650      	mov	r0, sl
 8011b6a:	4659      	mov	r1, fp
 8011b6c:	461e      	mov	r6, r3
 8011b6e:	2c01      	cmp	r4, #1
 8011b70:	dc21      	bgt.n	8011bb6 <_strtod_l+0x51e>
 8011b72:	b10b      	cbz	r3, 8011b78 <_strtod_l+0x4e0>
 8011b74:	4682      	mov	sl, r0
 8011b76:	468b      	mov	fp, r1
 8011b78:	492c      	ldr	r1, [pc, #176]	@ (8011c2c <_strtod_l+0x594>)
 8011b7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011b7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011b82:	4652      	mov	r2, sl
 8011b84:	465b      	mov	r3, fp
 8011b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b8a:	f7ee fd55 	bl	8000638 <__aeabi_dmul>
 8011b8e:	4b28      	ldr	r3, [pc, #160]	@ (8011c30 <_strtod_l+0x598>)
 8011b90:	460a      	mov	r2, r1
 8011b92:	400b      	ands	r3, r1
 8011b94:	4927      	ldr	r1, [pc, #156]	@ (8011c34 <_strtod_l+0x59c>)
 8011b96:	428b      	cmp	r3, r1
 8011b98:	4682      	mov	sl, r0
 8011b9a:	d898      	bhi.n	8011ace <_strtod_l+0x436>
 8011b9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011ba0:	428b      	cmp	r3, r1
 8011ba2:	bf86      	itte	hi
 8011ba4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011c38 <_strtod_l+0x5a0>
 8011ba8:	f04f 3aff 	movhi.w	sl, #4294967295
 8011bac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	9308      	str	r3, [sp, #32]
 8011bb4:	e07a      	b.n	8011cac <_strtod_l+0x614>
 8011bb6:	07e2      	lsls	r2, r4, #31
 8011bb8:	d505      	bpl.n	8011bc6 <_strtod_l+0x52e>
 8011bba:	9b08      	ldr	r3, [sp, #32]
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	f7ee fd3a 	bl	8000638 <__aeabi_dmul>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	9a08      	ldr	r2, [sp, #32]
 8011bc8:	3208      	adds	r2, #8
 8011bca:	3601      	adds	r6, #1
 8011bcc:	1064      	asrs	r4, r4, #1
 8011bce:	9208      	str	r2, [sp, #32]
 8011bd0:	e7cd      	b.n	8011b6e <_strtod_l+0x4d6>
 8011bd2:	d0ed      	beq.n	8011bb0 <_strtod_l+0x518>
 8011bd4:	4264      	negs	r4, r4
 8011bd6:	f014 020f 	ands.w	r2, r4, #15
 8011bda:	d00a      	beq.n	8011bf2 <_strtod_l+0x55a>
 8011bdc:	4b12      	ldr	r3, [pc, #72]	@ (8011c28 <_strtod_l+0x590>)
 8011bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011be2:	4650      	mov	r0, sl
 8011be4:	4659      	mov	r1, fp
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	f7ee fe4f 	bl	800088c <__aeabi_ddiv>
 8011bee:	4682      	mov	sl, r0
 8011bf0:	468b      	mov	fp, r1
 8011bf2:	1124      	asrs	r4, r4, #4
 8011bf4:	d0dc      	beq.n	8011bb0 <_strtod_l+0x518>
 8011bf6:	2c1f      	cmp	r4, #31
 8011bf8:	dd20      	ble.n	8011c3c <_strtod_l+0x5a4>
 8011bfa:	2400      	movs	r4, #0
 8011bfc:	46a0      	mov	r8, r4
 8011bfe:	940a      	str	r4, [sp, #40]	@ 0x28
 8011c00:	46a1      	mov	r9, r4
 8011c02:	9a05      	ldr	r2, [sp, #20]
 8011c04:	2322      	movs	r3, #34	@ 0x22
 8011c06:	f04f 0a00 	mov.w	sl, #0
 8011c0a:	f04f 0b00 	mov.w	fp, #0
 8011c0e:	6013      	str	r3, [r2, #0]
 8011c10:	e768      	b.n	8011ae4 <_strtod_l+0x44c>
 8011c12:	bf00      	nop
 8011c14:	0801607d 	.word	0x0801607d
 8011c18:	08016294 	.word	0x08016294
 8011c1c:	08016075 	.word	0x08016075
 8011c20:	080160aa 	.word	0x080160aa
 8011c24:	08016458 	.word	0x08016458
 8011c28:	080161c8 	.word	0x080161c8
 8011c2c:	080161a0 	.word	0x080161a0
 8011c30:	7ff00000 	.word	0x7ff00000
 8011c34:	7ca00000 	.word	0x7ca00000
 8011c38:	7fefffff 	.word	0x7fefffff
 8011c3c:	f014 0310 	ands.w	r3, r4, #16
 8011c40:	bf18      	it	ne
 8011c42:	236a      	movne	r3, #106	@ 0x6a
 8011c44:	4ea9      	ldr	r6, [pc, #676]	@ (8011eec <_strtod_l+0x854>)
 8011c46:	9308      	str	r3, [sp, #32]
 8011c48:	4650      	mov	r0, sl
 8011c4a:	4659      	mov	r1, fp
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	07e2      	lsls	r2, r4, #31
 8011c50:	d504      	bpl.n	8011c5c <_strtod_l+0x5c4>
 8011c52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011c56:	f7ee fcef 	bl	8000638 <__aeabi_dmul>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	1064      	asrs	r4, r4, #1
 8011c5e:	f106 0608 	add.w	r6, r6, #8
 8011c62:	d1f4      	bne.n	8011c4e <_strtod_l+0x5b6>
 8011c64:	b10b      	cbz	r3, 8011c6a <_strtod_l+0x5d2>
 8011c66:	4682      	mov	sl, r0
 8011c68:	468b      	mov	fp, r1
 8011c6a:	9b08      	ldr	r3, [sp, #32]
 8011c6c:	b1b3      	cbz	r3, 8011c9c <_strtod_l+0x604>
 8011c6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011c72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	4659      	mov	r1, fp
 8011c7a:	dd0f      	ble.n	8011c9c <_strtod_l+0x604>
 8011c7c:	2b1f      	cmp	r3, #31
 8011c7e:	dd55      	ble.n	8011d2c <_strtod_l+0x694>
 8011c80:	2b34      	cmp	r3, #52	@ 0x34
 8011c82:	bfde      	ittt	le
 8011c84:	f04f 33ff 	movle.w	r3, #4294967295
 8011c88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011c8c:	4093      	lslle	r3, r2
 8011c8e:	f04f 0a00 	mov.w	sl, #0
 8011c92:	bfcc      	ite	gt
 8011c94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011c98:	ea03 0b01 	andle.w	fp, r3, r1
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	4650      	mov	r0, sl
 8011ca2:	4659      	mov	r1, fp
 8011ca4:	f7ee ff30 	bl	8000b08 <__aeabi_dcmpeq>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d1a6      	bne.n	8011bfa <_strtod_l+0x562>
 8011cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cae:	9300      	str	r3, [sp, #0]
 8011cb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011cb2:	9805      	ldr	r0, [sp, #20]
 8011cb4:	462b      	mov	r3, r5
 8011cb6:	463a      	mov	r2, r7
 8011cb8:	f7ff f8c4 	bl	8010e44 <__s2b>
 8011cbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	f43f af05 	beq.w	8011ace <_strtod_l+0x436>
 8011cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cc6:	2a00      	cmp	r2, #0
 8011cc8:	eba9 0308 	sub.w	r3, r9, r8
 8011ccc:	bfa8      	it	ge
 8011cce:	2300      	movge	r3, #0
 8011cd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8011cd2:	2400      	movs	r4, #0
 8011cd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011cd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8011cda:	46a0      	mov	r8, r4
 8011cdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cde:	9805      	ldr	r0, [sp, #20]
 8011ce0:	6859      	ldr	r1, [r3, #4]
 8011ce2:	f7ff f807 	bl	8010cf4 <_Balloc>
 8011ce6:	4681      	mov	r9, r0
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	f43f aef4 	beq.w	8011ad6 <_strtod_l+0x43e>
 8011cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cf0:	691a      	ldr	r2, [r3, #16]
 8011cf2:	3202      	adds	r2, #2
 8011cf4:	f103 010c 	add.w	r1, r3, #12
 8011cf8:	0092      	lsls	r2, r2, #2
 8011cfa:	300c      	adds	r0, #12
 8011cfc:	f7fe f945 	bl	800ff8a <memcpy>
 8011d00:	ec4b ab10 	vmov	d0, sl, fp
 8011d04:	9805      	ldr	r0, [sp, #20]
 8011d06:	aa1c      	add	r2, sp, #112	@ 0x70
 8011d08:	a91b      	add	r1, sp, #108	@ 0x6c
 8011d0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011d0e:	f7ff fbd5 	bl	80114bc <__d2b>
 8011d12:	901a      	str	r0, [sp, #104]	@ 0x68
 8011d14:	2800      	cmp	r0, #0
 8011d16:	f43f aede 	beq.w	8011ad6 <_strtod_l+0x43e>
 8011d1a:	9805      	ldr	r0, [sp, #20]
 8011d1c:	2101      	movs	r1, #1
 8011d1e:	f7ff f927 	bl	8010f70 <__i2b>
 8011d22:	4680      	mov	r8, r0
 8011d24:	b948      	cbnz	r0, 8011d3a <_strtod_l+0x6a2>
 8011d26:	f04f 0800 	mov.w	r8, #0
 8011d2a:	e6d4      	b.n	8011ad6 <_strtod_l+0x43e>
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d30:	fa02 f303 	lsl.w	r3, r2, r3
 8011d34:	ea03 0a0a 	and.w	sl, r3, sl
 8011d38:	e7b0      	b.n	8011c9c <_strtod_l+0x604>
 8011d3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011d3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011d3e:	2d00      	cmp	r5, #0
 8011d40:	bfab      	itete	ge
 8011d42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011d44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011d46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011d48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011d4a:	bfac      	ite	ge
 8011d4c:	18ef      	addge	r7, r5, r3
 8011d4e:	1b5e      	sublt	r6, r3, r5
 8011d50:	9b08      	ldr	r3, [sp, #32]
 8011d52:	1aed      	subs	r5, r5, r3
 8011d54:	4415      	add	r5, r2
 8011d56:	4b66      	ldr	r3, [pc, #408]	@ (8011ef0 <_strtod_l+0x858>)
 8011d58:	3d01      	subs	r5, #1
 8011d5a:	429d      	cmp	r5, r3
 8011d5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011d60:	da50      	bge.n	8011e04 <_strtod_l+0x76c>
 8011d62:	1b5b      	subs	r3, r3, r5
 8011d64:	2b1f      	cmp	r3, #31
 8011d66:	eba2 0203 	sub.w	r2, r2, r3
 8011d6a:	f04f 0101 	mov.w	r1, #1
 8011d6e:	dc3d      	bgt.n	8011dec <_strtod_l+0x754>
 8011d70:	fa01 f303 	lsl.w	r3, r1, r3
 8011d74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011d76:	2300      	movs	r3, #0
 8011d78:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d7a:	18bd      	adds	r5, r7, r2
 8011d7c:	9b08      	ldr	r3, [sp, #32]
 8011d7e:	42af      	cmp	r7, r5
 8011d80:	4416      	add	r6, r2
 8011d82:	441e      	add	r6, r3
 8011d84:	463b      	mov	r3, r7
 8011d86:	bfa8      	it	ge
 8011d88:	462b      	movge	r3, r5
 8011d8a:	42b3      	cmp	r3, r6
 8011d8c:	bfa8      	it	ge
 8011d8e:	4633      	movge	r3, r6
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	bfc2      	ittt	gt
 8011d94:	1aed      	subgt	r5, r5, r3
 8011d96:	1af6      	subgt	r6, r6, r3
 8011d98:	1aff      	subgt	r7, r7, r3
 8011d9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	dd16      	ble.n	8011dce <_strtod_l+0x736>
 8011da0:	4641      	mov	r1, r8
 8011da2:	9805      	ldr	r0, [sp, #20]
 8011da4:	461a      	mov	r2, r3
 8011da6:	f7ff f9a3 	bl	80110f0 <__pow5mult>
 8011daa:	4680      	mov	r8, r0
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d0ba      	beq.n	8011d26 <_strtod_l+0x68e>
 8011db0:	4601      	mov	r1, r0
 8011db2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011db4:	9805      	ldr	r0, [sp, #20]
 8011db6:	f7ff f8f1 	bl	8010f9c <__multiply>
 8011dba:	900e      	str	r0, [sp, #56]	@ 0x38
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	f43f ae8a 	beq.w	8011ad6 <_strtod_l+0x43e>
 8011dc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011dc4:	9805      	ldr	r0, [sp, #20]
 8011dc6:	f7fe ffd5 	bl	8010d74 <_Bfree>
 8011dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dce:	2d00      	cmp	r5, #0
 8011dd0:	dc1d      	bgt.n	8011e0e <_strtod_l+0x776>
 8011dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	dd23      	ble.n	8011e20 <_strtod_l+0x788>
 8011dd8:	4649      	mov	r1, r9
 8011dda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011ddc:	9805      	ldr	r0, [sp, #20]
 8011dde:	f7ff f987 	bl	80110f0 <__pow5mult>
 8011de2:	4681      	mov	r9, r0
 8011de4:	b9e0      	cbnz	r0, 8011e20 <_strtod_l+0x788>
 8011de6:	f04f 0900 	mov.w	r9, #0
 8011dea:	e674      	b.n	8011ad6 <_strtod_l+0x43e>
 8011dec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011df0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011df4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011df8:	35e2      	adds	r5, #226	@ 0xe2
 8011dfa:	fa01 f305 	lsl.w	r3, r1, r5
 8011dfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011e00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011e02:	e7ba      	b.n	8011d7a <_strtod_l+0x6e2>
 8011e04:	2300      	movs	r3, #0
 8011e06:	9310      	str	r3, [sp, #64]	@ 0x40
 8011e08:	2301      	movs	r3, #1
 8011e0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011e0c:	e7b5      	b.n	8011d7a <_strtod_l+0x6e2>
 8011e0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011e10:	9805      	ldr	r0, [sp, #20]
 8011e12:	462a      	mov	r2, r5
 8011e14:	f7ff f9c6 	bl	80111a4 <__lshift>
 8011e18:	901a      	str	r0, [sp, #104]	@ 0x68
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	d1d9      	bne.n	8011dd2 <_strtod_l+0x73a>
 8011e1e:	e65a      	b.n	8011ad6 <_strtod_l+0x43e>
 8011e20:	2e00      	cmp	r6, #0
 8011e22:	dd07      	ble.n	8011e34 <_strtod_l+0x79c>
 8011e24:	4649      	mov	r1, r9
 8011e26:	9805      	ldr	r0, [sp, #20]
 8011e28:	4632      	mov	r2, r6
 8011e2a:	f7ff f9bb 	bl	80111a4 <__lshift>
 8011e2e:	4681      	mov	r9, r0
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d0d8      	beq.n	8011de6 <_strtod_l+0x74e>
 8011e34:	2f00      	cmp	r7, #0
 8011e36:	dd08      	ble.n	8011e4a <_strtod_l+0x7b2>
 8011e38:	4641      	mov	r1, r8
 8011e3a:	9805      	ldr	r0, [sp, #20]
 8011e3c:	463a      	mov	r2, r7
 8011e3e:	f7ff f9b1 	bl	80111a4 <__lshift>
 8011e42:	4680      	mov	r8, r0
 8011e44:	2800      	cmp	r0, #0
 8011e46:	f43f ae46 	beq.w	8011ad6 <_strtod_l+0x43e>
 8011e4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011e4c:	9805      	ldr	r0, [sp, #20]
 8011e4e:	464a      	mov	r2, r9
 8011e50:	f7ff fa30 	bl	80112b4 <__mdiff>
 8011e54:	4604      	mov	r4, r0
 8011e56:	2800      	cmp	r0, #0
 8011e58:	f43f ae3d 	beq.w	8011ad6 <_strtod_l+0x43e>
 8011e5c:	68c3      	ldr	r3, [r0, #12]
 8011e5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e60:	2300      	movs	r3, #0
 8011e62:	60c3      	str	r3, [r0, #12]
 8011e64:	4641      	mov	r1, r8
 8011e66:	f7ff fa09 	bl	801127c <__mcmp>
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	da46      	bge.n	8011efc <_strtod_l+0x864>
 8011e6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e70:	ea53 030a 	orrs.w	r3, r3, sl
 8011e74:	d16c      	bne.n	8011f50 <_strtod_l+0x8b8>
 8011e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d168      	bne.n	8011f50 <_strtod_l+0x8b8>
 8011e7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011e82:	0d1b      	lsrs	r3, r3, #20
 8011e84:	051b      	lsls	r3, r3, #20
 8011e86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011e8a:	d961      	bls.n	8011f50 <_strtod_l+0x8b8>
 8011e8c:	6963      	ldr	r3, [r4, #20]
 8011e8e:	b913      	cbnz	r3, 8011e96 <_strtod_l+0x7fe>
 8011e90:	6923      	ldr	r3, [r4, #16]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	dd5c      	ble.n	8011f50 <_strtod_l+0x8b8>
 8011e96:	4621      	mov	r1, r4
 8011e98:	2201      	movs	r2, #1
 8011e9a:	9805      	ldr	r0, [sp, #20]
 8011e9c:	f7ff f982 	bl	80111a4 <__lshift>
 8011ea0:	4641      	mov	r1, r8
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	f7ff f9ea 	bl	801127c <__mcmp>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	dd51      	ble.n	8011f50 <_strtod_l+0x8b8>
 8011eac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011eb0:	9a08      	ldr	r2, [sp, #32]
 8011eb2:	0d1b      	lsrs	r3, r3, #20
 8011eb4:	051b      	lsls	r3, r3, #20
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	d06b      	beq.n	8011f92 <_strtod_l+0x8fa>
 8011eba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011ebe:	d868      	bhi.n	8011f92 <_strtod_l+0x8fa>
 8011ec0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011ec4:	f67f ae9d 	bls.w	8011c02 <_strtod_l+0x56a>
 8011ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ef4 <_strtod_l+0x85c>)
 8011eca:	4650      	mov	r0, sl
 8011ecc:	4659      	mov	r1, fp
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f7ee fbb2 	bl	8000638 <__aeabi_dmul>
 8011ed4:	4b08      	ldr	r3, [pc, #32]	@ (8011ef8 <_strtod_l+0x860>)
 8011ed6:	400b      	ands	r3, r1
 8011ed8:	4682      	mov	sl, r0
 8011eda:	468b      	mov	fp, r1
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f47f ae05 	bne.w	8011aec <_strtod_l+0x454>
 8011ee2:	9a05      	ldr	r2, [sp, #20]
 8011ee4:	2322      	movs	r3, #34	@ 0x22
 8011ee6:	6013      	str	r3, [r2, #0]
 8011ee8:	e600      	b.n	8011aec <_strtod_l+0x454>
 8011eea:	bf00      	nop
 8011eec:	080162c0 	.word	0x080162c0
 8011ef0:	fffffc02 	.word	0xfffffc02
 8011ef4:	39500000 	.word	0x39500000
 8011ef8:	7ff00000 	.word	0x7ff00000
 8011efc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011f00:	d165      	bne.n	8011fce <_strtod_l+0x936>
 8011f02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f08:	b35a      	cbz	r2, 8011f62 <_strtod_l+0x8ca>
 8011f0a:	4a9f      	ldr	r2, [pc, #636]	@ (8012188 <_strtod_l+0xaf0>)
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	d12b      	bne.n	8011f68 <_strtod_l+0x8d0>
 8011f10:	9b08      	ldr	r3, [sp, #32]
 8011f12:	4651      	mov	r1, sl
 8011f14:	b303      	cbz	r3, 8011f58 <_strtod_l+0x8c0>
 8011f16:	4b9d      	ldr	r3, [pc, #628]	@ (801218c <_strtod_l+0xaf4>)
 8011f18:	465a      	mov	r2, fp
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011f20:	f04f 32ff 	mov.w	r2, #4294967295
 8011f24:	d81b      	bhi.n	8011f5e <_strtod_l+0x8c6>
 8011f26:	0d1b      	lsrs	r3, r3, #20
 8011f28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f30:	4299      	cmp	r1, r3
 8011f32:	d119      	bne.n	8011f68 <_strtod_l+0x8d0>
 8011f34:	4b96      	ldr	r3, [pc, #600]	@ (8012190 <_strtod_l+0xaf8>)
 8011f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d102      	bne.n	8011f42 <_strtod_l+0x8aa>
 8011f3c:	3101      	adds	r1, #1
 8011f3e:	f43f adca 	beq.w	8011ad6 <_strtod_l+0x43e>
 8011f42:	4b92      	ldr	r3, [pc, #584]	@ (801218c <_strtod_l+0xaf4>)
 8011f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f46:	401a      	ands	r2, r3
 8011f48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011f4c:	f04f 0a00 	mov.w	sl, #0
 8011f50:	9b08      	ldr	r3, [sp, #32]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d1b8      	bne.n	8011ec8 <_strtod_l+0x830>
 8011f56:	e5c9      	b.n	8011aec <_strtod_l+0x454>
 8011f58:	f04f 33ff 	mov.w	r3, #4294967295
 8011f5c:	e7e8      	b.n	8011f30 <_strtod_l+0x898>
 8011f5e:	4613      	mov	r3, r2
 8011f60:	e7e6      	b.n	8011f30 <_strtod_l+0x898>
 8011f62:	ea53 030a 	orrs.w	r3, r3, sl
 8011f66:	d0a1      	beq.n	8011eac <_strtod_l+0x814>
 8011f68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f6a:	b1db      	cbz	r3, 8011fa4 <_strtod_l+0x90c>
 8011f6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f6e:	4213      	tst	r3, r2
 8011f70:	d0ee      	beq.n	8011f50 <_strtod_l+0x8b8>
 8011f72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f74:	9a08      	ldr	r2, [sp, #32]
 8011f76:	4650      	mov	r0, sl
 8011f78:	4659      	mov	r1, fp
 8011f7a:	b1bb      	cbz	r3, 8011fac <_strtod_l+0x914>
 8011f7c:	f7ff fb6c 	bl	8011658 <sulp>
 8011f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011f84:	ec53 2b10 	vmov	r2, r3, d0
 8011f88:	f7ee f9a0 	bl	80002cc <__adddf3>
 8011f8c:	4682      	mov	sl, r0
 8011f8e:	468b      	mov	fp, r1
 8011f90:	e7de      	b.n	8011f50 <_strtod_l+0x8b8>
 8011f92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011f96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011f9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011f9e:	f04f 3aff 	mov.w	sl, #4294967295
 8011fa2:	e7d5      	b.n	8011f50 <_strtod_l+0x8b8>
 8011fa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011fa6:	ea13 0f0a 	tst.w	r3, sl
 8011faa:	e7e1      	b.n	8011f70 <_strtod_l+0x8d8>
 8011fac:	f7ff fb54 	bl	8011658 <sulp>
 8011fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011fb4:	ec53 2b10 	vmov	r2, r3, d0
 8011fb8:	f7ee f986 	bl	80002c8 <__aeabi_dsub>
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	4682      	mov	sl, r0
 8011fc2:	468b      	mov	fp, r1
 8011fc4:	f7ee fda0 	bl	8000b08 <__aeabi_dcmpeq>
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d0c1      	beq.n	8011f50 <_strtod_l+0x8b8>
 8011fcc:	e619      	b.n	8011c02 <_strtod_l+0x56a>
 8011fce:	4641      	mov	r1, r8
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f7ff facb 	bl	801156c <__ratio>
 8011fd6:	ec57 6b10 	vmov	r6, r7, d0
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	f7ee fda4 	bl	8000b30 <__aeabi_dcmple>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d06f      	beq.n	80120cc <_strtod_l+0xa34>
 8011fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d17a      	bne.n	80120e8 <_strtod_l+0xa50>
 8011ff2:	f1ba 0f00 	cmp.w	sl, #0
 8011ff6:	d158      	bne.n	80120aa <_strtod_l+0xa12>
 8011ff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d15a      	bne.n	80120b8 <_strtod_l+0xa20>
 8012002:	4b64      	ldr	r3, [pc, #400]	@ (8012194 <_strtod_l+0xafc>)
 8012004:	2200      	movs	r2, #0
 8012006:	4630      	mov	r0, r6
 8012008:	4639      	mov	r1, r7
 801200a:	f7ee fd87 	bl	8000b1c <__aeabi_dcmplt>
 801200e:	2800      	cmp	r0, #0
 8012010:	d159      	bne.n	80120c6 <_strtod_l+0xa2e>
 8012012:	4630      	mov	r0, r6
 8012014:	4639      	mov	r1, r7
 8012016:	4b60      	ldr	r3, [pc, #384]	@ (8012198 <_strtod_l+0xb00>)
 8012018:	2200      	movs	r2, #0
 801201a:	f7ee fb0d 	bl	8000638 <__aeabi_dmul>
 801201e:	4606      	mov	r6, r0
 8012020:	460f      	mov	r7, r1
 8012022:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012026:	9606      	str	r6, [sp, #24]
 8012028:	9307      	str	r3, [sp, #28]
 801202a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801202e:	4d57      	ldr	r5, [pc, #348]	@ (801218c <_strtod_l+0xaf4>)
 8012030:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012036:	401d      	ands	r5, r3
 8012038:	4b58      	ldr	r3, [pc, #352]	@ (801219c <_strtod_l+0xb04>)
 801203a:	429d      	cmp	r5, r3
 801203c:	f040 80b2 	bne.w	80121a4 <_strtod_l+0xb0c>
 8012040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012042:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012046:	ec4b ab10 	vmov	d0, sl, fp
 801204a:	f7ff f9c7 	bl	80113dc <__ulp>
 801204e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012052:	ec51 0b10 	vmov	r0, r1, d0
 8012056:	f7ee faef 	bl	8000638 <__aeabi_dmul>
 801205a:	4652      	mov	r2, sl
 801205c:	465b      	mov	r3, fp
 801205e:	f7ee f935 	bl	80002cc <__adddf3>
 8012062:	460b      	mov	r3, r1
 8012064:	4949      	ldr	r1, [pc, #292]	@ (801218c <_strtod_l+0xaf4>)
 8012066:	4a4e      	ldr	r2, [pc, #312]	@ (80121a0 <_strtod_l+0xb08>)
 8012068:	4019      	ands	r1, r3
 801206a:	4291      	cmp	r1, r2
 801206c:	4682      	mov	sl, r0
 801206e:	d942      	bls.n	80120f6 <_strtod_l+0xa5e>
 8012070:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012072:	4b47      	ldr	r3, [pc, #284]	@ (8012190 <_strtod_l+0xaf8>)
 8012074:	429a      	cmp	r2, r3
 8012076:	d103      	bne.n	8012080 <_strtod_l+0x9e8>
 8012078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801207a:	3301      	adds	r3, #1
 801207c:	f43f ad2b 	beq.w	8011ad6 <_strtod_l+0x43e>
 8012080:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012190 <_strtod_l+0xaf8>
 8012084:	f04f 3aff 	mov.w	sl, #4294967295
 8012088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801208a:	9805      	ldr	r0, [sp, #20]
 801208c:	f7fe fe72 	bl	8010d74 <_Bfree>
 8012090:	9805      	ldr	r0, [sp, #20]
 8012092:	4649      	mov	r1, r9
 8012094:	f7fe fe6e 	bl	8010d74 <_Bfree>
 8012098:	9805      	ldr	r0, [sp, #20]
 801209a:	4641      	mov	r1, r8
 801209c:	f7fe fe6a 	bl	8010d74 <_Bfree>
 80120a0:	9805      	ldr	r0, [sp, #20]
 80120a2:	4621      	mov	r1, r4
 80120a4:	f7fe fe66 	bl	8010d74 <_Bfree>
 80120a8:	e618      	b.n	8011cdc <_strtod_l+0x644>
 80120aa:	f1ba 0f01 	cmp.w	sl, #1
 80120ae:	d103      	bne.n	80120b8 <_strtod_l+0xa20>
 80120b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f43f ada5 	beq.w	8011c02 <_strtod_l+0x56a>
 80120b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012168 <_strtod_l+0xad0>
 80120bc:	4f35      	ldr	r7, [pc, #212]	@ (8012194 <_strtod_l+0xafc>)
 80120be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120c2:	2600      	movs	r6, #0
 80120c4:	e7b1      	b.n	801202a <_strtod_l+0x992>
 80120c6:	4f34      	ldr	r7, [pc, #208]	@ (8012198 <_strtod_l+0xb00>)
 80120c8:	2600      	movs	r6, #0
 80120ca:	e7aa      	b.n	8012022 <_strtod_l+0x98a>
 80120cc:	4b32      	ldr	r3, [pc, #200]	@ (8012198 <_strtod_l+0xb00>)
 80120ce:	4630      	mov	r0, r6
 80120d0:	4639      	mov	r1, r7
 80120d2:	2200      	movs	r2, #0
 80120d4:	f7ee fab0 	bl	8000638 <__aeabi_dmul>
 80120d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120da:	4606      	mov	r6, r0
 80120dc:	460f      	mov	r7, r1
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d09f      	beq.n	8012022 <_strtod_l+0x98a>
 80120e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80120e6:	e7a0      	b.n	801202a <_strtod_l+0x992>
 80120e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012170 <_strtod_l+0xad8>
 80120ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120f0:	ec57 6b17 	vmov	r6, r7, d7
 80120f4:	e799      	b.n	801202a <_strtod_l+0x992>
 80120f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80120fa:	9b08      	ldr	r3, [sp, #32]
 80120fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1c1      	bne.n	8012088 <_strtod_l+0x9f0>
 8012104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012108:	0d1b      	lsrs	r3, r3, #20
 801210a:	051b      	lsls	r3, r3, #20
 801210c:	429d      	cmp	r5, r3
 801210e:	d1bb      	bne.n	8012088 <_strtod_l+0x9f0>
 8012110:	4630      	mov	r0, r6
 8012112:	4639      	mov	r1, r7
 8012114:	f7ee ff4e 	bl	8000fb4 <__aeabi_d2lz>
 8012118:	f7ee fa60 	bl	80005dc <__aeabi_l2d>
 801211c:	4602      	mov	r2, r0
 801211e:	460b      	mov	r3, r1
 8012120:	4630      	mov	r0, r6
 8012122:	4639      	mov	r1, r7
 8012124:	f7ee f8d0 	bl	80002c8 <__aeabi_dsub>
 8012128:	460b      	mov	r3, r1
 801212a:	4602      	mov	r2, r0
 801212c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012130:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012136:	ea46 060a 	orr.w	r6, r6, sl
 801213a:	431e      	orrs	r6, r3
 801213c:	d06f      	beq.n	801221e <_strtod_l+0xb86>
 801213e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012178 <_strtod_l+0xae0>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	f7ee fcea 	bl	8000b1c <__aeabi_dcmplt>
 8012148:	2800      	cmp	r0, #0
 801214a:	f47f accf 	bne.w	8011aec <_strtod_l+0x454>
 801214e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012180 <_strtod_l+0xae8>)
 8012150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012158:	f7ee fcfe 	bl	8000b58 <__aeabi_dcmpgt>
 801215c:	2800      	cmp	r0, #0
 801215e:	d093      	beq.n	8012088 <_strtod_l+0x9f0>
 8012160:	e4c4      	b.n	8011aec <_strtod_l+0x454>
 8012162:	bf00      	nop
 8012164:	f3af 8000 	nop.w
 8012168:	00000000 	.word	0x00000000
 801216c:	bff00000 	.word	0xbff00000
 8012170:	00000000 	.word	0x00000000
 8012174:	3ff00000 	.word	0x3ff00000
 8012178:	94a03595 	.word	0x94a03595
 801217c:	3fdfffff 	.word	0x3fdfffff
 8012180:	35afe535 	.word	0x35afe535
 8012184:	3fe00000 	.word	0x3fe00000
 8012188:	000fffff 	.word	0x000fffff
 801218c:	7ff00000 	.word	0x7ff00000
 8012190:	7fefffff 	.word	0x7fefffff
 8012194:	3ff00000 	.word	0x3ff00000
 8012198:	3fe00000 	.word	0x3fe00000
 801219c:	7fe00000 	.word	0x7fe00000
 80121a0:	7c9fffff 	.word	0x7c9fffff
 80121a4:	9b08      	ldr	r3, [sp, #32]
 80121a6:	b323      	cbz	r3, 80121f2 <_strtod_l+0xb5a>
 80121a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80121ac:	d821      	bhi.n	80121f2 <_strtod_l+0xb5a>
 80121ae:	a328      	add	r3, pc, #160	@ (adr r3, 8012250 <_strtod_l+0xbb8>)
 80121b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b4:	4630      	mov	r0, r6
 80121b6:	4639      	mov	r1, r7
 80121b8:	f7ee fcba 	bl	8000b30 <__aeabi_dcmple>
 80121bc:	b1a0      	cbz	r0, 80121e8 <_strtod_l+0xb50>
 80121be:	4639      	mov	r1, r7
 80121c0:	4630      	mov	r0, r6
 80121c2:	f7ee fd11 	bl	8000be8 <__aeabi_d2uiz>
 80121c6:	2801      	cmp	r0, #1
 80121c8:	bf38      	it	cc
 80121ca:	2001      	movcc	r0, #1
 80121cc:	f7ee f9ba 	bl	8000544 <__aeabi_ui2d>
 80121d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121d2:	4606      	mov	r6, r0
 80121d4:	460f      	mov	r7, r1
 80121d6:	b9fb      	cbnz	r3, 8012218 <_strtod_l+0xb80>
 80121d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80121dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80121de:	9315      	str	r3, [sp, #84]	@ 0x54
 80121e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80121e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80121e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80121ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80121ee:	1b5b      	subs	r3, r3, r5
 80121f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80121f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80121f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80121fa:	f7ff f8ef 	bl	80113dc <__ulp>
 80121fe:	4650      	mov	r0, sl
 8012200:	ec53 2b10 	vmov	r2, r3, d0
 8012204:	4659      	mov	r1, fp
 8012206:	f7ee fa17 	bl	8000638 <__aeabi_dmul>
 801220a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801220e:	f7ee f85d 	bl	80002cc <__adddf3>
 8012212:	4682      	mov	sl, r0
 8012214:	468b      	mov	fp, r1
 8012216:	e770      	b.n	80120fa <_strtod_l+0xa62>
 8012218:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801221c:	e7e0      	b.n	80121e0 <_strtod_l+0xb48>
 801221e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012258 <_strtod_l+0xbc0>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	f7ee fc7a 	bl	8000b1c <__aeabi_dcmplt>
 8012228:	e798      	b.n	801215c <_strtod_l+0xac4>
 801222a:	2300      	movs	r3, #0
 801222c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801222e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	f7ff ba6d 	b.w	8011712 <_strtod_l+0x7a>
 8012238:	2a65      	cmp	r2, #101	@ 0x65
 801223a:	f43f ab66 	beq.w	801190a <_strtod_l+0x272>
 801223e:	2a45      	cmp	r2, #69	@ 0x45
 8012240:	f43f ab63 	beq.w	801190a <_strtod_l+0x272>
 8012244:	2301      	movs	r3, #1
 8012246:	f7ff bb9e 	b.w	8011986 <_strtod_l+0x2ee>
 801224a:	bf00      	nop
 801224c:	f3af 8000 	nop.w
 8012250:	ffc00000 	.word	0xffc00000
 8012254:	41dfffff 	.word	0x41dfffff
 8012258:	94a03595 	.word	0x94a03595
 801225c:	3fcfffff 	.word	0x3fcfffff

08012260 <_strtod_r>:
 8012260:	4b01      	ldr	r3, [pc, #4]	@ (8012268 <_strtod_r+0x8>)
 8012262:	f7ff ba19 	b.w	8011698 <_strtod_l>
 8012266:	bf00      	nop
 8012268:	200000a0 	.word	0x200000a0

0801226c <_strtol_l.constprop.0>:
 801226c:	2b24      	cmp	r3, #36	@ 0x24
 801226e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012272:	4686      	mov	lr, r0
 8012274:	4690      	mov	r8, r2
 8012276:	d801      	bhi.n	801227c <_strtol_l.constprop.0+0x10>
 8012278:	2b01      	cmp	r3, #1
 801227a:	d106      	bne.n	801228a <_strtol_l.constprop.0+0x1e>
 801227c:	f7fd fe58 	bl	800ff30 <__errno>
 8012280:	2316      	movs	r3, #22
 8012282:	6003      	str	r3, [r0, #0]
 8012284:	2000      	movs	r0, #0
 8012286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801228a:	4834      	ldr	r0, [pc, #208]	@ (801235c <_strtol_l.constprop.0+0xf0>)
 801228c:	460d      	mov	r5, r1
 801228e:	462a      	mov	r2, r5
 8012290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012294:	5d06      	ldrb	r6, [r0, r4]
 8012296:	f016 0608 	ands.w	r6, r6, #8
 801229a:	d1f8      	bne.n	801228e <_strtol_l.constprop.0+0x22>
 801229c:	2c2d      	cmp	r4, #45	@ 0x2d
 801229e:	d12d      	bne.n	80122fc <_strtol_l.constprop.0+0x90>
 80122a0:	782c      	ldrb	r4, [r5, #0]
 80122a2:	2601      	movs	r6, #1
 80122a4:	1c95      	adds	r5, r2, #2
 80122a6:	f033 0210 	bics.w	r2, r3, #16
 80122aa:	d109      	bne.n	80122c0 <_strtol_l.constprop.0+0x54>
 80122ac:	2c30      	cmp	r4, #48	@ 0x30
 80122ae:	d12a      	bne.n	8012306 <_strtol_l.constprop.0+0x9a>
 80122b0:	782a      	ldrb	r2, [r5, #0]
 80122b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80122b6:	2a58      	cmp	r2, #88	@ 0x58
 80122b8:	d125      	bne.n	8012306 <_strtol_l.constprop.0+0x9a>
 80122ba:	786c      	ldrb	r4, [r5, #1]
 80122bc:	2310      	movs	r3, #16
 80122be:	3502      	adds	r5, #2
 80122c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80122c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80122c8:	2200      	movs	r2, #0
 80122ca:	fbbc f9f3 	udiv	r9, ip, r3
 80122ce:	4610      	mov	r0, r2
 80122d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80122d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80122d8:	2f09      	cmp	r7, #9
 80122da:	d81b      	bhi.n	8012314 <_strtol_l.constprop.0+0xa8>
 80122dc:	463c      	mov	r4, r7
 80122de:	42a3      	cmp	r3, r4
 80122e0:	dd27      	ble.n	8012332 <_strtol_l.constprop.0+0xc6>
 80122e2:	1c57      	adds	r7, r2, #1
 80122e4:	d007      	beq.n	80122f6 <_strtol_l.constprop.0+0x8a>
 80122e6:	4581      	cmp	r9, r0
 80122e8:	d320      	bcc.n	801232c <_strtol_l.constprop.0+0xc0>
 80122ea:	d101      	bne.n	80122f0 <_strtol_l.constprop.0+0x84>
 80122ec:	45a2      	cmp	sl, r4
 80122ee:	db1d      	blt.n	801232c <_strtol_l.constprop.0+0xc0>
 80122f0:	fb00 4003 	mla	r0, r0, r3, r4
 80122f4:	2201      	movs	r2, #1
 80122f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122fa:	e7eb      	b.n	80122d4 <_strtol_l.constprop.0+0x68>
 80122fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80122fe:	bf04      	itt	eq
 8012300:	782c      	ldrbeq	r4, [r5, #0]
 8012302:	1c95      	addeq	r5, r2, #2
 8012304:	e7cf      	b.n	80122a6 <_strtol_l.constprop.0+0x3a>
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1da      	bne.n	80122c0 <_strtol_l.constprop.0+0x54>
 801230a:	2c30      	cmp	r4, #48	@ 0x30
 801230c:	bf0c      	ite	eq
 801230e:	2308      	moveq	r3, #8
 8012310:	230a      	movne	r3, #10
 8012312:	e7d5      	b.n	80122c0 <_strtol_l.constprop.0+0x54>
 8012314:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012318:	2f19      	cmp	r7, #25
 801231a:	d801      	bhi.n	8012320 <_strtol_l.constprop.0+0xb4>
 801231c:	3c37      	subs	r4, #55	@ 0x37
 801231e:	e7de      	b.n	80122de <_strtol_l.constprop.0+0x72>
 8012320:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012324:	2f19      	cmp	r7, #25
 8012326:	d804      	bhi.n	8012332 <_strtol_l.constprop.0+0xc6>
 8012328:	3c57      	subs	r4, #87	@ 0x57
 801232a:	e7d8      	b.n	80122de <_strtol_l.constprop.0+0x72>
 801232c:	f04f 32ff 	mov.w	r2, #4294967295
 8012330:	e7e1      	b.n	80122f6 <_strtol_l.constprop.0+0x8a>
 8012332:	1c53      	adds	r3, r2, #1
 8012334:	d108      	bne.n	8012348 <_strtol_l.constprop.0+0xdc>
 8012336:	2322      	movs	r3, #34	@ 0x22
 8012338:	f8ce 3000 	str.w	r3, [lr]
 801233c:	4660      	mov	r0, ip
 801233e:	f1b8 0f00 	cmp.w	r8, #0
 8012342:	d0a0      	beq.n	8012286 <_strtol_l.constprop.0+0x1a>
 8012344:	1e69      	subs	r1, r5, #1
 8012346:	e006      	b.n	8012356 <_strtol_l.constprop.0+0xea>
 8012348:	b106      	cbz	r6, 801234c <_strtol_l.constprop.0+0xe0>
 801234a:	4240      	negs	r0, r0
 801234c:	f1b8 0f00 	cmp.w	r8, #0
 8012350:	d099      	beq.n	8012286 <_strtol_l.constprop.0+0x1a>
 8012352:	2a00      	cmp	r2, #0
 8012354:	d1f6      	bne.n	8012344 <_strtol_l.constprop.0+0xd8>
 8012356:	f8c8 1000 	str.w	r1, [r8]
 801235a:	e794      	b.n	8012286 <_strtol_l.constprop.0+0x1a>
 801235c:	080162e9 	.word	0x080162e9

08012360 <_strtol_r>:
 8012360:	f7ff bf84 	b.w	801226c <_strtol_l.constprop.0>

08012364 <__ssputs_r>:
 8012364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012368:	688e      	ldr	r6, [r1, #8]
 801236a:	461f      	mov	r7, r3
 801236c:	42be      	cmp	r6, r7
 801236e:	680b      	ldr	r3, [r1, #0]
 8012370:	4682      	mov	sl, r0
 8012372:	460c      	mov	r4, r1
 8012374:	4690      	mov	r8, r2
 8012376:	d82d      	bhi.n	80123d4 <__ssputs_r+0x70>
 8012378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801237c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012380:	d026      	beq.n	80123d0 <__ssputs_r+0x6c>
 8012382:	6965      	ldr	r5, [r4, #20]
 8012384:	6909      	ldr	r1, [r1, #16]
 8012386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801238a:	eba3 0901 	sub.w	r9, r3, r1
 801238e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012392:	1c7b      	adds	r3, r7, #1
 8012394:	444b      	add	r3, r9
 8012396:	106d      	asrs	r5, r5, #1
 8012398:	429d      	cmp	r5, r3
 801239a:	bf38      	it	cc
 801239c:	461d      	movcc	r5, r3
 801239e:	0553      	lsls	r3, r2, #21
 80123a0:	d527      	bpl.n	80123f2 <__ssputs_r+0x8e>
 80123a2:	4629      	mov	r1, r5
 80123a4:	f7fc fcf2 	bl	800ed8c <_malloc_r>
 80123a8:	4606      	mov	r6, r0
 80123aa:	b360      	cbz	r0, 8012406 <__ssputs_r+0xa2>
 80123ac:	6921      	ldr	r1, [r4, #16]
 80123ae:	464a      	mov	r2, r9
 80123b0:	f7fd fdeb 	bl	800ff8a <memcpy>
 80123b4:	89a3      	ldrh	r3, [r4, #12]
 80123b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80123ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123be:	81a3      	strh	r3, [r4, #12]
 80123c0:	6126      	str	r6, [r4, #16]
 80123c2:	6165      	str	r5, [r4, #20]
 80123c4:	444e      	add	r6, r9
 80123c6:	eba5 0509 	sub.w	r5, r5, r9
 80123ca:	6026      	str	r6, [r4, #0]
 80123cc:	60a5      	str	r5, [r4, #8]
 80123ce:	463e      	mov	r6, r7
 80123d0:	42be      	cmp	r6, r7
 80123d2:	d900      	bls.n	80123d6 <__ssputs_r+0x72>
 80123d4:	463e      	mov	r6, r7
 80123d6:	6820      	ldr	r0, [r4, #0]
 80123d8:	4632      	mov	r2, r6
 80123da:	4641      	mov	r1, r8
 80123dc:	f000 fd53 	bl	8012e86 <memmove>
 80123e0:	68a3      	ldr	r3, [r4, #8]
 80123e2:	1b9b      	subs	r3, r3, r6
 80123e4:	60a3      	str	r3, [r4, #8]
 80123e6:	6823      	ldr	r3, [r4, #0]
 80123e8:	4433      	add	r3, r6
 80123ea:	6023      	str	r3, [r4, #0]
 80123ec:	2000      	movs	r0, #0
 80123ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f2:	462a      	mov	r2, r5
 80123f4:	f001 f8e5 	bl	80135c2 <_realloc_r>
 80123f8:	4606      	mov	r6, r0
 80123fa:	2800      	cmp	r0, #0
 80123fc:	d1e0      	bne.n	80123c0 <__ssputs_r+0x5c>
 80123fe:	6921      	ldr	r1, [r4, #16]
 8012400:	4650      	mov	r0, sl
 8012402:	f7fe fc25 	bl	8010c50 <_free_r>
 8012406:	230c      	movs	r3, #12
 8012408:	f8ca 3000 	str.w	r3, [sl]
 801240c:	89a3      	ldrh	r3, [r4, #12]
 801240e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012412:	81a3      	strh	r3, [r4, #12]
 8012414:	f04f 30ff 	mov.w	r0, #4294967295
 8012418:	e7e9      	b.n	80123ee <__ssputs_r+0x8a>
	...

0801241c <_svfiprintf_r>:
 801241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012420:	4698      	mov	r8, r3
 8012422:	898b      	ldrh	r3, [r1, #12]
 8012424:	061b      	lsls	r3, r3, #24
 8012426:	b09d      	sub	sp, #116	@ 0x74
 8012428:	4607      	mov	r7, r0
 801242a:	460d      	mov	r5, r1
 801242c:	4614      	mov	r4, r2
 801242e:	d510      	bpl.n	8012452 <_svfiprintf_r+0x36>
 8012430:	690b      	ldr	r3, [r1, #16]
 8012432:	b973      	cbnz	r3, 8012452 <_svfiprintf_r+0x36>
 8012434:	2140      	movs	r1, #64	@ 0x40
 8012436:	f7fc fca9 	bl	800ed8c <_malloc_r>
 801243a:	6028      	str	r0, [r5, #0]
 801243c:	6128      	str	r0, [r5, #16]
 801243e:	b930      	cbnz	r0, 801244e <_svfiprintf_r+0x32>
 8012440:	230c      	movs	r3, #12
 8012442:	603b      	str	r3, [r7, #0]
 8012444:	f04f 30ff 	mov.w	r0, #4294967295
 8012448:	b01d      	add	sp, #116	@ 0x74
 801244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244e:	2340      	movs	r3, #64	@ 0x40
 8012450:	616b      	str	r3, [r5, #20]
 8012452:	2300      	movs	r3, #0
 8012454:	9309      	str	r3, [sp, #36]	@ 0x24
 8012456:	2320      	movs	r3, #32
 8012458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801245c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012460:	2330      	movs	r3, #48	@ 0x30
 8012462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012600 <_svfiprintf_r+0x1e4>
 8012466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801246a:	f04f 0901 	mov.w	r9, #1
 801246e:	4623      	mov	r3, r4
 8012470:	469a      	mov	sl, r3
 8012472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012476:	b10a      	cbz	r2, 801247c <_svfiprintf_r+0x60>
 8012478:	2a25      	cmp	r2, #37	@ 0x25
 801247a:	d1f9      	bne.n	8012470 <_svfiprintf_r+0x54>
 801247c:	ebba 0b04 	subs.w	fp, sl, r4
 8012480:	d00b      	beq.n	801249a <_svfiprintf_r+0x7e>
 8012482:	465b      	mov	r3, fp
 8012484:	4622      	mov	r2, r4
 8012486:	4629      	mov	r1, r5
 8012488:	4638      	mov	r0, r7
 801248a:	f7ff ff6b 	bl	8012364 <__ssputs_r>
 801248e:	3001      	adds	r0, #1
 8012490:	f000 80a7 	beq.w	80125e2 <_svfiprintf_r+0x1c6>
 8012494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012496:	445a      	add	r2, fp
 8012498:	9209      	str	r2, [sp, #36]	@ 0x24
 801249a:	f89a 3000 	ldrb.w	r3, [sl]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f000 809f 	beq.w	80125e2 <_svfiprintf_r+0x1c6>
 80124a4:	2300      	movs	r3, #0
 80124a6:	f04f 32ff 	mov.w	r2, #4294967295
 80124aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124ae:	f10a 0a01 	add.w	sl, sl, #1
 80124b2:	9304      	str	r3, [sp, #16]
 80124b4:	9307      	str	r3, [sp, #28]
 80124b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80124bc:	4654      	mov	r4, sl
 80124be:	2205      	movs	r2, #5
 80124c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c4:	484e      	ldr	r0, [pc, #312]	@ (8012600 <_svfiprintf_r+0x1e4>)
 80124c6:	f7ed fea3 	bl	8000210 <memchr>
 80124ca:	9a04      	ldr	r2, [sp, #16]
 80124cc:	b9d8      	cbnz	r0, 8012506 <_svfiprintf_r+0xea>
 80124ce:	06d0      	lsls	r0, r2, #27
 80124d0:	bf44      	itt	mi
 80124d2:	2320      	movmi	r3, #32
 80124d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124d8:	0711      	lsls	r1, r2, #28
 80124da:	bf44      	itt	mi
 80124dc:	232b      	movmi	r3, #43	@ 0x2b
 80124de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124e2:	f89a 3000 	ldrb.w	r3, [sl]
 80124e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e8:	d015      	beq.n	8012516 <_svfiprintf_r+0xfa>
 80124ea:	9a07      	ldr	r2, [sp, #28]
 80124ec:	4654      	mov	r4, sl
 80124ee:	2000      	movs	r0, #0
 80124f0:	f04f 0c0a 	mov.w	ip, #10
 80124f4:	4621      	mov	r1, r4
 80124f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124fa:	3b30      	subs	r3, #48	@ 0x30
 80124fc:	2b09      	cmp	r3, #9
 80124fe:	d94b      	bls.n	8012598 <_svfiprintf_r+0x17c>
 8012500:	b1b0      	cbz	r0, 8012530 <_svfiprintf_r+0x114>
 8012502:	9207      	str	r2, [sp, #28]
 8012504:	e014      	b.n	8012530 <_svfiprintf_r+0x114>
 8012506:	eba0 0308 	sub.w	r3, r0, r8
 801250a:	fa09 f303 	lsl.w	r3, r9, r3
 801250e:	4313      	orrs	r3, r2
 8012510:	9304      	str	r3, [sp, #16]
 8012512:	46a2      	mov	sl, r4
 8012514:	e7d2      	b.n	80124bc <_svfiprintf_r+0xa0>
 8012516:	9b03      	ldr	r3, [sp, #12]
 8012518:	1d19      	adds	r1, r3, #4
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	9103      	str	r1, [sp, #12]
 801251e:	2b00      	cmp	r3, #0
 8012520:	bfbb      	ittet	lt
 8012522:	425b      	neglt	r3, r3
 8012524:	f042 0202 	orrlt.w	r2, r2, #2
 8012528:	9307      	strge	r3, [sp, #28]
 801252a:	9307      	strlt	r3, [sp, #28]
 801252c:	bfb8      	it	lt
 801252e:	9204      	strlt	r2, [sp, #16]
 8012530:	7823      	ldrb	r3, [r4, #0]
 8012532:	2b2e      	cmp	r3, #46	@ 0x2e
 8012534:	d10a      	bne.n	801254c <_svfiprintf_r+0x130>
 8012536:	7863      	ldrb	r3, [r4, #1]
 8012538:	2b2a      	cmp	r3, #42	@ 0x2a
 801253a:	d132      	bne.n	80125a2 <_svfiprintf_r+0x186>
 801253c:	9b03      	ldr	r3, [sp, #12]
 801253e:	1d1a      	adds	r2, r3, #4
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	9203      	str	r2, [sp, #12]
 8012544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012548:	3402      	adds	r4, #2
 801254a:	9305      	str	r3, [sp, #20]
 801254c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012610 <_svfiprintf_r+0x1f4>
 8012550:	7821      	ldrb	r1, [r4, #0]
 8012552:	2203      	movs	r2, #3
 8012554:	4650      	mov	r0, sl
 8012556:	f7ed fe5b 	bl	8000210 <memchr>
 801255a:	b138      	cbz	r0, 801256c <_svfiprintf_r+0x150>
 801255c:	9b04      	ldr	r3, [sp, #16]
 801255e:	eba0 000a 	sub.w	r0, r0, sl
 8012562:	2240      	movs	r2, #64	@ 0x40
 8012564:	4082      	lsls	r2, r0
 8012566:	4313      	orrs	r3, r2
 8012568:	3401      	adds	r4, #1
 801256a:	9304      	str	r3, [sp, #16]
 801256c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012570:	4824      	ldr	r0, [pc, #144]	@ (8012604 <_svfiprintf_r+0x1e8>)
 8012572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012576:	2206      	movs	r2, #6
 8012578:	f7ed fe4a 	bl	8000210 <memchr>
 801257c:	2800      	cmp	r0, #0
 801257e:	d036      	beq.n	80125ee <_svfiprintf_r+0x1d2>
 8012580:	4b21      	ldr	r3, [pc, #132]	@ (8012608 <_svfiprintf_r+0x1ec>)
 8012582:	bb1b      	cbnz	r3, 80125cc <_svfiprintf_r+0x1b0>
 8012584:	9b03      	ldr	r3, [sp, #12]
 8012586:	3307      	adds	r3, #7
 8012588:	f023 0307 	bic.w	r3, r3, #7
 801258c:	3308      	adds	r3, #8
 801258e:	9303      	str	r3, [sp, #12]
 8012590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012592:	4433      	add	r3, r6
 8012594:	9309      	str	r3, [sp, #36]	@ 0x24
 8012596:	e76a      	b.n	801246e <_svfiprintf_r+0x52>
 8012598:	fb0c 3202 	mla	r2, ip, r2, r3
 801259c:	460c      	mov	r4, r1
 801259e:	2001      	movs	r0, #1
 80125a0:	e7a8      	b.n	80124f4 <_svfiprintf_r+0xd8>
 80125a2:	2300      	movs	r3, #0
 80125a4:	3401      	adds	r4, #1
 80125a6:	9305      	str	r3, [sp, #20]
 80125a8:	4619      	mov	r1, r3
 80125aa:	f04f 0c0a 	mov.w	ip, #10
 80125ae:	4620      	mov	r0, r4
 80125b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b4:	3a30      	subs	r2, #48	@ 0x30
 80125b6:	2a09      	cmp	r2, #9
 80125b8:	d903      	bls.n	80125c2 <_svfiprintf_r+0x1a6>
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d0c6      	beq.n	801254c <_svfiprintf_r+0x130>
 80125be:	9105      	str	r1, [sp, #20]
 80125c0:	e7c4      	b.n	801254c <_svfiprintf_r+0x130>
 80125c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80125c6:	4604      	mov	r4, r0
 80125c8:	2301      	movs	r3, #1
 80125ca:	e7f0      	b.n	80125ae <_svfiprintf_r+0x192>
 80125cc:	ab03      	add	r3, sp, #12
 80125ce:	9300      	str	r3, [sp, #0]
 80125d0:	462a      	mov	r2, r5
 80125d2:	4b0e      	ldr	r3, [pc, #56]	@ (801260c <_svfiprintf_r+0x1f0>)
 80125d4:	a904      	add	r1, sp, #16
 80125d6:	4638      	mov	r0, r7
 80125d8:	f7fc fd04 	bl	800efe4 <_printf_float>
 80125dc:	1c42      	adds	r2, r0, #1
 80125de:	4606      	mov	r6, r0
 80125e0:	d1d6      	bne.n	8012590 <_svfiprintf_r+0x174>
 80125e2:	89ab      	ldrh	r3, [r5, #12]
 80125e4:	065b      	lsls	r3, r3, #25
 80125e6:	f53f af2d 	bmi.w	8012444 <_svfiprintf_r+0x28>
 80125ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125ec:	e72c      	b.n	8012448 <_svfiprintf_r+0x2c>
 80125ee:	ab03      	add	r3, sp, #12
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	462a      	mov	r2, r5
 80125f4:	4b05      	ldr	r3, [pc, #20]	@ (801260c <_svfiprintf_r+0x1f0>)
 80125f6:	a904      	add	r1, sp, #16
 80125f8:	4638      	mov	r0, r7
 80125fa:	f7fc ff8b 	bl	800f514 <_printf_i>
 80125fe:	e7ed      	b.n	80125dc <_svfiprintf_r+0x1c0>
 8012600:	080163e9 	.word	0x080163e9
 8012604:	080163f3 	.word	0x080163f3
 8012608:	0800efe5 	.word	0x0800efe5
 801260c:	08012365 	.word	0x08012365
 8012610:	080163ef 	.word	0x080163ef

08012614 <_sungetc_r>:
 8012614:	b538      	push	{r3, r4, r5, lr}
 8012616:	1c4b      	adds	r3, r1, #1
 8012618:	4614      	mov	r4, r2
 801261a:	d103      	bne.n	8012624 <_sungetc_r+0x10>
 801261c:	f04f 35ff 	mov.w	r5, #4294967295
 8012620:	4628      	mov	r0, r5
 8012622:	bd38      	pop	{r3, r4, r5, pc}
 8012624:	8993      	ldrh	r3, [r2, #12]
 8012626:	f023 0320 	bic.w	r3, r3, #32
 801262a:	8193      	strh	r3, [r2, #12]
 801262c:	6853      	ldr	r3, [r2, #4]
 801262e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012630:	b2cd      	uxtb	r5, r1
 8012632:	b18a      	cbz	r2, 8012658 <_sungetc_r+0x44>
 8012634:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012636:	429a      	cmp	r2, r3
 8012638:	dd08      	ble.n	801264c <_sungetc_r+0x38>
 801263a:	6823      	ldr	r3, [r4, #0]
 801263c:	1e5a      	subs	r2, r3, #1
 801263e:	6022      	str	r2, [r4, #0]
 8012640:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012644:	6863      	ldr	r3, [r4, #4]
 8012646:	3301      	adds	r3, #1
 8012648:	6063      	str	r3, [r4, #4]
 801264a:	e7e9      	b.n	8012620 <_sungetc_r+0xc>
 801264c:	4621      	mov	r1, r4
 801264e:	f000 fbe0 	bl	8012e12 <__submore>
 8012652:	2800      	cmp	r0, #0
 8012654:	d0f1      	beq.n	801263a <_sungetc_r+0x26>
 8012656:	e7e1      	b.n	801261c <_sungetc_r+0x8>
 8012658:	6921      	ldr	r1, [r4, #16]
 801265a:	6822      	ldr	r2, [r4, #0]
 801265c:	b141      	cbz	r1, 8012670 <_sungetc_r+0x5c>
 801265e:	4291      	cmp	r1, r2
 8012660:	d206      	bcs.n	8012670 <_sungetc_r+0x5c>
 8012662:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012666:	42a9      	cmp	r1, r5
 8012668:	d102      	bne.n	8012670 <_sungetc_r+0x5c>
 801266a:	3a01      	subs	r2, #1
 801266c:	6022      	str	r2, [r4, #0]
 801266e:	e7ea      	b.n	8012646 <_sungetc_r+0x32>
 8012670:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012678:	6363      	str	r3, [r4, #52]	@ 0x34
 801267a:	2303      	movs	r3, #3
 801267c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801267e:	4623      	mov	r3, r4
 8012680:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012684:	6023      	str	r3, [r4, #0]
 8012686:	2301      	movs	r3, #1
 8012688:	e7de      	b.n	8012648 <_sungetc_r+0x34>

0801268a <__ssrefill_r>:
 801268a:	b510      	push	{r4, lr}
 801268c:	460c      	mov	r4, r1
 801268e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012690:	b169      	cbz	r1, 80126ae <__ssrefill_r+0x24>
 8012692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012696:	4299      	cmp	r1, r3
 8012698:	d001      	beq.n	801269e <__ssrefill_r+0x14>
 801269a:	f7fe fad9 	bl	8010c50 <_free_r>
 801269e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126a0:	6063      	str	r3, [r4, #4]
 80126a2:	2000      	movs	r0, #0
 80126a4:	6360      	str	r0, [r4, #52]	@ 0x34
 80126a6:	b113      	cbz	r3, 80126ae <__ssrefill_r+0x24>
 80126a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80126aa:	6023      	str	r3, [r4, #0]
 80126ac:	bd10      	pop	{r4, pc}
 80126ae:	6923      	ldr	r3, [r4, #16]
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	2300      	movs	r3, #0
 80126b4:	6063      	str	r3, [r4, #4]
 80126b6:	89a3      	ldrh	r3, [r4, #12]
 80126b8:	f043 0320 	orr.w	r3, r3, #32
 80126bc:	81a3      	strh	r3, [r4, #12]
 80126be:	f04f 30ff 	mov.w	r0, #4294967295
 80126c2:	e7f3      	b.n	80126ac <__ssrefill_r+0x22>

080126c4 <__ssvfiscanf_r>:
 80126c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126c8:	460c      	mov	r4, r1
 80126ca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80126ce:	2100      	movs	r1, #0
 80126d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80126d4:	49a5      	ldr	r1, [pc, #660]	@ (801296c <__ssvfiscanf_r+0x2a8>)
 80126d6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80126d8:	f10d 0804 	add.w	r8, sp, #4
 80126dc:	49a4      	ldr	r1, [pc, #656]	@ (8012970 <__ssvfiscanf_r+0x2ac>)
 80126de:	4fa5      	ldr	r7, [pc, #660]	@ (8012974 <__ssvfiscanf_r+0x2b0>)
 80126e0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80126e4:	4606      	mov	r6, r0
 80126e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	7813      	ldrb	r3, [r2, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f000 8158 	beq.w	80129a2 <__ssvfiscanf_r+0x2de>
 80126f2:	5cf9      	ldrb	r1, [r7, r3]
 80126f4:	f011 0108 	ands.w	r1, r1, #8
 80126f8:	f102 0501 	add.w	r5, r2, #1
 80126fc:	d019      	beq.n	8012732 <__ssvfiscanf_r+0x6e>
 80126fe:	6863      	ldr	r3, [r4, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	dd0f      	ble.n	8012724 <__ssvfiscanf_r+0x60>
 8012704:	6823      	ldr	r3, [r4, #0]
 8012706:	781a      	ldrb	r2, [r3, #0]
 8012708:	5cba      	ldrb	r2, [r7, r2]
 801270a:	0712      	lsls	r2, r2, #28
 801270c:	d401      	bmi.n	8012712 <__ssvfiscanf_r+0x4e>
 801270e:	462a      	mov	r2, r5
 8012710:	e7eb      	b.n	80126ea <__ssvfiscanf_r+0x26>
 8012712:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012714:	3201      	adds	r2, #1
 8012716:	9245      	str	r2, [sp, #276]	@ 0x114
 8012718:	6862      	ldr	r2, [r4, #4]
 801271a:	3301      	adds	r3, #1
 801271c:	3a01      	subs	r2, #1
 801271e:	6062      	str	r2, [r4, #4]
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	e7ec      	b.n	80126fe <__ssvfiscanf_r+0x3a>
 8012724:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012726:	4621      	mov	r1, r4
 8012728:	4630      	mov	r0, r6
 801272a:	4798      	blx	r3
 801272c:	2800      	cmp	r0, #0
 801272e:	d0e9      	beq.n	8012704 <__ssvfiscanf_r+0x40>
 8012730:	e7ed      	b.n	801270e <__ssvfiscanf_r+0x4a>
 8012732:	2b25      	cmp	r3, #37	@ 0x25
 8012734:	d012      	beq.n	801275c <__ssvfiscanf_r+0x98>
 8012736:	4699      	mov	r9, r3
 8012738:	6863      	ldr	r3, [r4, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	f340 8093 	ble.w	8012866 <__ssvfiscanf_r+0x1a2>
 8012740:	6822      	ldr	r2, [r4, #0]
 8012742:	7813      	ldrb	r3, [r2, #0]
 8012744:	454b      	cmp	r3, r9
 8012746:	f040 812c 	bne.w	80129a2 <__ssvfiscanf_r+0x2de>
 801274a:	6863      	ldr	r3, [r4, #4]
 801274c:	3b01      	subs	r3, #1
 801274e:	6063      	str	r3, [r4, #4]
 8012750:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012752:	3201      	adds	r2, #1
 8012754:	3301      	adds	r3, #1
 8012756:	6022      	str	r2, [r4, #0]
 8012758:	9345      	str	r3, [sp, #276]	@ 0x114
 801275a:	e7d8      	b.n	801270e <__ssvfiscanf_r+0x4a>
 801275c:	9141      	str	r1, [sp, #260]	@ 0x104
 801275e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012760:	7853      	ldrb	r3, [r2, #1]
 8012762:	2b2a      	cmp	r3, #42	@ 0x2a
 8012764:	bf02      	ittt	eq
 8012766:	2310      	moveq	r3, #16
 8012768:	1c95      	addeq	r5, r2, #2
 801276a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801276c:	220a      	movs	r2, #10
 801276e:	46a9      	mov	r9, r5
 8012770:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012774:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012778:	2b09      	cmp	r3, #9
 801277a:	d91e      	bls.n	80127ba <__ssvfiscanf_r+0xf6>
 801277c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012978 <__ssvfiscanf_r+0x2b4>
 8012780:	2203      	movs	r2, #3
 8012782:	4650      	mov	r0, sl
 8012784:	f7ed fd44 	bl	8000210 <memchr>
 8012788:	b138      	cbz	r0, 801279a <__ssvfiscanf_r+0xd6>
 801278a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801278c:	eba0 000a 	sub.w	r0, r0, sl
 8012790:	2301      	movs	r3, #1
 8012792:	4083      	lsls	r3, r0
 8012794:	4313      	orrs	r3, r2
 8012796:	9341      	str	r3, [sp, #260]	@ 0x104
 8012798:	464d      	mov	r5, r9
 801279a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801279e:	2b78      	cmp	r3, #120	@ 0x78
 80127a0:	d806      	bhi.n	80127b0 <__ssvfiscanf_r+0xec>
 80127a2:	2b57      	cmp	r3, #87	@ 0x57
 80127a4:	d810      	bhi.n	80127c8 <__ssvfiscanf_r+0x104>
 80127a6:	2b25      	cmp	r3, #37	@ 0x25
 80127a8:	d0c5      	beq.n	8012736 <__ssvfiscanf_r+0x72>
 80127aa:	d857      	bhi.n	801285c <__ssvfiscanf_r+0x198>
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d065      	beq.n	801287c <__ssvfiscanf_r+0x1b8>
 80127b0:	2303      	movs	r3, #3
 80127b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80127b4:	230a      	movs	r3, #10
 80127b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80127b8:	e078      	b.n	80128ac <__ssvfiscanf_r+0x1e8>
 80127ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80127bc:	fb02 1103 	mla	r1, r2, r3, r1
 80127c0:	3930      	subs	r1, #48	@ 0x30
 80127c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80127c4:	464d      	mov	r5, r9
 80127c6:	e7d2      	b.n	801276e <__ssvfiscanf_r+0xaa>
 80127c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80127cc:	2a20      	cmp	r2, #32
 80127ce:	d8ef      	bhi.n	80127b0 <__ssvfiscanf_r+0xec>
 80127d0:	a101      	add	r1, pc, #4	@ (adr r1, 80127d8 <__ssvfiscanf_r+0x114>)
 80127d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80127d6:	bf00      	nop
 80127d8:	0801288b 	.word	0x0801288b
 80127dc:	080127b1 	.word	0x080127b1
 80127e0:	080127b1 	.word	0x080127b1
 80127e4:	080128e5 	.word	0x080128e5
 80127e8:	080127b1 	.word	0x080127b1
 80127ec:	080127b1 	.word	0x080127b1
 80127f0:	080127b1 	.word	0x080127b1
 80127f4:	080127b1 	.word	0x080127b1
 80127f8:	080127b1 	.word	0x080127b1
 80127fc:	080127b1 	.word	0x080127b1
 8012800:	080127b1 	.word	0x080127b1
 8012804:	080128fb 	.word	0x080128fb
 8012808:	080128e1 	.word	0x080128e1
 801280c:	08012863 	.word	0x08012863
 8012810:	08012863 	.word	0x08012863
 8012814:	08012863 	.word	0x08012863
 8012818:	080127b1 	.word	0x080127b1
 801281c:	0801289d 	.word	0x0801289d
 8012820:	080127b1 	.word	0x080127b1
 8012824:	080127b1 	.word	0x080127b1
 8012828:	080127b1 	.word	0x080127b1
 801282c:	080127b1 	.word	0x080127b1
 8012830:	0801290b 	.word	0x0801290b
 8012834:	080128a5 	.word	0x080128a5
 8012838:	08012883 	.word	0x08012883
 801283c:	080127b1 	.word	0x080127b1
 8012840:	080127b1 	.word	0x080127b1
 8012844:	08012907 	.word	0x08012907
 8012848:	080127b1 	.word	0x080127b1
 801284c:	080128e1 	.word	0x080128e1
 8012850:	080127b1 	.word	0x080127b1
 8012854:	080127b1 	.word	0x080127b1
 8012858:	0801288b 	.word	0x0801288b
 801285c:	3b45      	subs	r3, #69	@ 0x45
 801285e:	2b02      	cmp	r3, #2
 8012860:	d8a6      	bhi.n	80127b0 <__ssvfiscanf_r+0xec>
 8012862:	2305      	movs	r3, #5
 8012864:	e021      	b.n	80128aa <__ssvfiscanf_r+0x1e6>
 8012866:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012868:	4621      	mov	r1, r4
 801286a:	4630      	mov	r0, r6
 801286c:	4798      	blx	r3
 801286e:	2800      	cmp	r0, #0
 8012870:	f43f af66 	beq.w	8012740 <__ssvfiscanf_r+0x7c>
 8012874:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012876:	2800      	cmp	r0, #0
 8012878:	f040 808b 	bne.w	8012992 <__ssvfiscanf_r+0x2ce>
 801287c:	f04f 30ff 	mov.w	r0, #4294967295
 8012880:	e08b      	b.n	801299a <__ssvfiscanf_r+0x2d6>
 8012882:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012884:	f042 0220 	orr.w	r2, r2, #32
 8012888:	9241      	str	r2, [sp, #260]	@ 0x104
 801288a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801288c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012890:	9241      	str	r2, [sp, #260]	@ 0x104
 8012892:	2210      	movs	r2, #16
 8012894:	2b6e      	cmp	r3, #110	@ 0x6e
 8012896:	9242      	str	r2, [sp, #264]	@ 0x108
 8012898:	d902      	bls.n	80128a0 <__ssvfiscanf_r+0x1dc>
 801289a:	e005      	b.n	80128a8 <__ssvfiscanf_r+0x1e4>
 801289c:	2300      	movs	r3, #0
 801289e:	9342      	str	r3, [sp, #264]	@ 0x108
 80128a0:	2303      	movs	r3, #3
 80128a2:	e002      	b.n	80128aa <__ssvfiscanf_r+0x1e6>
 80128a4:	2308      	movs	r3, #8
 80128a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80128a8:	2304      	movs	r3, #4
 80128aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80128ac:	6863      	ldr	r3, [r4, #4]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	dd39      	ble.n	8012926 <__ssvfiscanf_r+0x262>
 80128b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80128b4:	0659      	lsls	r1, r3, #25
 80128b6:	d404      	bmi.n	80128c2 <__ssvfiscanf_r+0x1fe>
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	781a      	ldrb	r2, [r3, #0]
 80128bc:	5cba      	ldrb	r2, [r7, r2]
 80128be:	0712      	lsls	r2, r2, #28
 80128c0:	d438      	bmi.n	8012934 <__ssvfiscanf_r+0x270>
 80128c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80128c4:	2b02      	cmp	r3, #2
 80128c6:	dc47      	bgt.n	8012958 <__ssvfiscanf_r+0x294>
 80128c8:	466b      	mov	r3, sp
 80128ca:	4622      	mov	r2, r4
 80128cc:	a941      	add	r1, sp, #260	@ 0x104
 80128ce:	4630      	mov	r0, r6
 80128d0:	f000 f86c 	bl	80129ac <_scanf_chars>
 80128d4:	2801      	cmp	r0, #1
 80128d6:	d064      	beq.n	80129a2 <__ssvfiscanf_r+0x2de>
 80128d8:	2802      	cmp	r0, #2
 80128da:	f47f af18 	bne.w	801270e <__ssvfiscanf_r+0x4a>
 80128de:	e7c9      	b.n	8012874 <__ssvfiscanf_r+0x1b0>
 80128e0:	220a      	movs	r2, #10
 80128e2:	e7d7      	b.n	8012894 <__ssvfiscanf_r+0x1d0>
 80128e4:	4629      	mov	r1, r5
 80128e6:	4640      	mov	r0, r8
 80128e8:	f000 fa5a 	bl	8012da0 <__sccl>
 80128ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80128ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80128f4:	4605      	mov	r5, r0
 80128f6:	2301      	movs	r3, #1
 80128f8:	e7d7      	b.n	80128aa <__ssvfiscanf_r+0x1e6>
 80128fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80128fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012900:	9341      	str	r3, [sp, #260]	@ 0x104
 8012902:	2300      	movs	r3, #0
 8012904:	e7d1      	b.n	80128aa <__ssvfiscanf_r+0x1e6>
 8012906:	2302      	movs	r3, #2
 8012908:	e7cf      	b.n	80128aa <__ssvfiscanf_r+0x1e6>
 801290a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801290c:	06c3      	lsls	r3, r0, #27
 801290e:	f53f aefe 	bmi.w	801270e <__ssvfiscanf_r+0x4a>
 8012912:	9b00      	ldr	r3, [sp, #0]
 8012914:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012916:	1d19      	adds	r1, r3, #4
 8012918:	9100      	str	r1, [sp, #0]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	07c0      	lsls	r0, r0, #31
 801291e:	bf4c      	ite	mi
 8012920:	801a      	strhmi	r2, [r3, #0]
 8012922:	601a      	strpl	r2, [r3, #0]
 8012924:	e6f3      	b.n	801270e <__ssvfiscanf_r+0x4a>
 8012926:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012928:	4621      	mov	r1, r4
 801292a:	4630      	mov	r0, r6
 801292c:	4798      	blx	r3
 801292e:	2800      	cmp	r0, #0
 8012930:	d0bf      	beq.n	80128b2 <__ssvfiscanf_r+0x1ee>
 8012932:	e79f      	b.n	8012874 <__ssvfiscanf_r+0x1b0>
 8012934:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012936:	3201      	adds	r2, #1
 8012938:	9245      	str	r2, [sp, #276]	@ 0x114
 801293a:	6862      	ldr	r2, [r4, #4]
 801293c:	3a01      	subs	r2, #1
 801293e:	2a00      	cmp	r2, #0
 8012940:	6062      	str	r2, [r4, #4]
 8012942:	dd02      	ble.n	801294a <__ssvfiscanf_r+0x286>
 8012944:	3301      	adds	r3, #1
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	e7b6      	b.n	80128b8 <__ssvfiscanf_r+0x1f4>
 801294a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801294c:	4621      	mov	r1, r4
 801294e:	4630      	mov	r0, r6
 8012950:	4798      	blx	r3
 8012952:	2800      	cmp	r0, #0
 8012954:	d0b0      	beq.n	80128b8 <__ssvfiscanf_r+0x1f4>
 8012956:	e78d      	b.n	8012874 <__ssvfiscanf_r+0x1b0>
 8012958:	2b04      	cmp	r3, #4
 801295a:	dc0f      	bgt.n	801297c <__ssvfiscanf_r+0x2b8>
 801295c:	466b      	mov	r3, sp
 801295e:	4622      	mov	r2, r4
 8012960:	a941      	add	r1, sp, #260	@ 0x104
 8012962:	4630      	mov	r0, r6
 8012964:	f000 f87c 	bl	8012a60 <_scanf_i>
 8012968:	e7b4      	b.n	80128d4 <__ssvfiscanf_r+0x210>
 801296a:	bf00      	nop
 801296c:	08012615 	.word	0x08012615
 8012970:	0801268b 	.word	0x0801268b
 8012974:	080162e9 	.word	0x080162e9
 8012978:	080163ef 	.word	0x080163ef
 801297c:	4b0a      	ldr	r3, [pc, #40]	@ (80129a8 <__ssvfiscanf_r+0x2e4>)
 801297e:	2b00      	cmp	r3, #0
 8012980:	f43f aec5 	beq.w	801270e <__ssvfiscanf_r+0x4a>
 8012984:	466b      	mov	r3, sp
 8012986:	4622      	mov	r2, r4
 8012988:	a941      	add	r1, sp, #260	@ 0x104
 801298a:	4630      	mov	r0, r6
 801298c:	f7fc fee2 	bl	800f754 <_scanf_float>
 8012990:	e7a0      	b.n	80128d4 <__ssvfiscanf_r+0x210>
 8012992:	89a3      	ldrh	r3, [r4, #12]
 8012994:	065b      	lsls	r3, r3, #25
 8012996:	f53f af71 	bmi.w	801287c <__ssvfiscanf_r+0x1b8>
 801299a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80129a4:	e7f9      	b.n	801299a <__ssvfiscanf_r+0x2d6>
 80129a6:	bf00      	nop
 80129a8:	0800f755 	.word	0x0800f755

080129ac <_scanf_chars>:
 80129ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129b0:	4615      	mov	r5, r2
 80129b2:	688a      	ldr	r2, [r1, #8]
 80129b4:	4680      	mov	r8, r0
 80129b6:	460c      	mov	r4, r1
 80129b8:	b932      	cbnz	r2, 80129c8 <_scanf_chars+0x1c>
 80129ba:	698a      	ldr	r2, [r1, #24]
 80129bc:	2a00      	cmp	r2, #0
 80129be:	bf14      	ite	ne
 80129c0:	f04f 32ff 	movne.w	r2, #4294967295
 80129c4:	2201      	moveq	r2, #1
 80129c6:	608a      	str	r2, [r1, #8]
 80129c8:	6822      	ldr	r2, [r4, #0]
 80129ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012a5c <_scanf_chars+0xb0>
 80129ce:	06d1      	lsls	r1, r2, #27
 80129d0:	bf5f      	itttt	pl
 80129d2:	681a      	ldrpl	r2, [r3, #0]
 80129d4:	1d11      	addpl	r1, r2, #4
 80129d6:	6019      	strpl	r1, [r3, #0]
 80129d8:	6816      	ldrpl	r6, [r2, #0]
 80129da:	2700      	movs	r7, #0
 80129dc:	69a0      	ldr	r0, [r4, #24]
 80129de:	b188      	cbz	r0, 8012a04 <_scanf_chars+0x58>
 80129e0:	2801      	cmp	r0, #1
 80129e2:	d107      	bne.n	80129f4 <_scanf_chars+0x48>
 80129e4:	682b      	ldr	r3, [r5, #0]
 80129e6:	781a      	ldrb	r2, [r3, #0]
 80129e8:	6963      	ldr	r3, [r4, #20]
 80129ea:	5c9b      	ldrb	r3, [r3, r2]
 80129ec:	b953      	cbnz	r3, 8012a04 <_scanf_chars+0x58>
 80129ee:	2f00      	cmp	r7, #0
 80129f0:	d031      	beq.n	8012a56 <_scanf_chars+0xaa>
 80129f2:	e022      	b.n	8012a3a <_scanf_chars+0x8e>
 80129f4:	2802      	cmp	r0, #2
 80129f6:	d120      	bne.n	8012a3a <_scanf_chars+0x8e>
 80129f8:	682b      	ldr	r3, [r5, #0]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012a00:	071b      	lsls	r3, r3, #28
 8012a02:	d41a      	bmi.n	8012a3a <_scanf_chars+0x8e>
 8012a04:	6823      	ldr	r3, [r4, #0]
 8012a06:	06da      	lsls	r2, r3, #27
 8012a08:	bf5e      	ittt	pl
 8012a0a:	682b      	ldrpl	r3, [r5, #0]
 8012a0c:	781b      	ldrbpl	r3, [r3, #0]
 8012a0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012a12:	682a      	ldr	r2, [r5, #0]
 8012a14:	686b      	ldr	r3, [r5, #4]
 8012a16:	3201      	adds	r2, #1
 8012a18:	602a      	str	r2, [r5, #0]
 8012a1a:	68a2      	ldr	r2, [r4, #8]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	3a01      	subs	r2, #1
 8012a20:	606b      	str	r3, [r5, #4]
 8012a22:	3701      	adds	r7, #1
 8012a24:	60a2      	str	r2, [r4, #8]
 8012a26:	b142      	cbz	r2, 8012a3a <_scanf_chars+0x8e>
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	dcd7      	bgt.n	80129dc <_scanf_chars+0x30>
 8012a2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012a30:	4629      	mov	r1, r5
 8012a32:	4640      	mov	r0, r8
 8012a34:	4798      	blx	r3
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d0d0      	beq.n	80129dc <_scanf_chars+0x30>
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	f013 0310 	ands.w	r3, r3, #16
 8012a40:	d105      	bne.n	8012a4e <_scanf_chars+0xa2>
 8012a42:	68e2      	ldr	r2, [r4, #12]
 8012a44:	3201      	adds	r2, #1
 8012a46:	60e2      	str	r2, [r4, #12]
 8012a48:	69a2      	ldr	r2, [r4, #24]
 8012a4a:	b102      	cbz	r2, 8012a4e <_scanf_chars+0xa2>
 8012a4c:	7033      	strb	r3, [r6, #0]
 8012a4e:	6923      	ldr	r3, [r4, #16]
 8012a50:	443b      	add	r3, r7
 8012a52:	6123      	str	r3, [r4, #16]
 8012a54:	2000      	movs	r0, #0
 8012a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a5a:	bf00      	nop
 8012a5c:	080162e9 	.word	0x080162e9

08012a60 <_scanf_i>:
 8012a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	4698      	mov	r8, r3
 8012a66:	4b74      	ldr	r3, [pc, #464]	@ (8012c38 <_scanf_i+0x1d8>)
 8012a68:	460c      	mov	r4, r1
 8012a6a:	4682      	mov	sl, r0
 8012a6c:	4616      	mov	r6, r2
 8012a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a72:	b087      	sub	sp, #28
 8012a74:	ab03      	add	r3, sp, #12
 8012a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012a7a:	4b70      	ldr	r3, [pc, #448]	@ (8012c3c <_scanf_i+0x1dc>)
 8012a7c:	69a1      	ldr	r1, [r4, #24]
 8012a7e:	4a70      	ldr	r2, [pc, #448]	@ (8012c40 <_scanf_i+0x1e0>)
 8012a80:	2903      	cmp	r1, #3
 8012a82:	bf08      	it	eq
 8012a84:	461a      	moveq	r2, r3
 8012a86:	68a3      	ldr	r3, [r4, #8]
 8012a88:	9201      	str	r2, [sp, #4]
 8012a8a:	1e5a      	subs	r2, r3, #1
 8012a8c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012a90:	bf88      	it	hi
 8012a92:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012a96:	4627      	mov	r7, r4
 8012a98:	bf82      	ittt	hi
 8012a9a:	eb03 0905 	addhi.w	r9, r3, r5
 8012a9e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012aa2:	60a3      	strhi	r3, [r4, #8]
 8012aa4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012aa8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012aac:	bf98      	it	ls
 8012aae:	f04f 0900 	movls.w	r9, #0
 8012ab2:	6023      	str	r3, [r4, #0]
 8012ab4:	463d      	mov	r5, r7
 8012ab6:	f04f 0b00 	mov.w	fp, #0
 8012aba:	6831      	ldr	r1, [r6, #0]
 8012abc:	ab03      	add	r3, sp, #12
 8012abe:	7809      	ldrb	r1, [r1, #0]
 8012ac0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012ac4:	2202      	movs	r2, #2
 8012ac6:	f7ed fba3 	bl	8000210 <memchr>
 8012aca:	b328      	cbz	r0, 8012b18 <_scanf_i+0xb8>
 8012acc:	f1bb 0f01 	cmp.w	fp, #1
 8012ad0:	d159      	bne.n	8012b86 <_scanf_i+0x126>
 8012ad2:	6862      	ldr	r2, [r4, #4]
 8012ad4:	b92a      	cbnz	r2, 8012ae2 <_scanf_i+0x82>
 8012ad6:	6822      	ldr	r2, [r4, #0]
 8012ad8:	2108      	movs	r1, #8
 8012ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012ade:	6061      	str	r1, [r4, #4]
 8012ae0:	6022      	str	r2, [r4, #0]
 8012ae2:	6822      	ldr	r2, [r4, #0]
 8012ae4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012ae8:	6022      	str	r2, [r4, #0]
 8012aea:	68a2      	ldr	r2, [r4, #8]
 8012aec:	1e51      	subs	r1, r2, #1
 8012aee:	60a1      	str	r1, [r4, #8]
 8012af0:	b192      	cbz	r2, 8012b18 <_scanf_i+0xb8>
 8012af2:	6832      	ldr	r2, [r6, #0]
 8012af4:	1c51      	adds	r1, r2, #1
 8012af6:	6031      	str	r1, [r6, #0]
 8012af8:	7812      	ldrb	r2, [r2, #0]
 8012afa:	f805 2b01 	strb.w	r2, [r5], #1
 8012afe:	6872      	ldr	r2, [r6, #4]
 8012b00:	3a01      	subs	r2, #1
 8012b02:	2a00      	cmp	r2, #0
 8012b04:	6072      	str	r2, [r6, #4]
 8012b06:	dc07      	bgt.n	8012b18 <_scanf_i+0xb8>
 8012b08:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012b0c:	4631      	mov	r1, r6
 8012b0e:	4650      	mov	r0, sl
 8012b10:	4790      	blx	r2
 8012b12:	2800      	cmp	r0, #0
 8012b14:	f040 8085 	bne.w	8012c22 <_scanf_i+0x1c2>
 8012b18:	f10b 0b01 	add.w	fp, fp, #1
 8012b1c:	f1bb 0f03 	cmp.w	fp, #3
 8012b20:	d1cb      	bne.n	8012aba <_scanf_i+0x5a>
 8012b22:	6863      	ldr	r3, [r4, #4]
 8012b24:	b90b      	cbnz	r3, 8012b2a <_scanf_i+0xca>
 8012b26:	230a      	movs	r3, #10
 8012b28:	6063      	str	r3, [r4, #4]
 8012b2a:	6863      	ldr	r3, [r4, #4]
 8012b2c:	4945      	ldr	r1, [pc, #276]	@ (8012c44 <_scanf_i+0x1e4>)
 8012b2e:	6960      	ldr	r0, [r4, #20]
 8012b30:	1ac9      	subs	r1, r1, r3
 8012b32:	f000 f935 	bl	8012da0 <__sccl>
 8012b36:	f04f 0b00 	mov.w	fp, #0
 8012b3a:	68a3      	ldr	r3, [r4, #8]
 8012b3c:	6822      	ldr	r2, [r4, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d03d      	beq.n	8012bbe <_scanf_i+0x15e>
 8012b42:	6831      	ldr	r1, [r6, #0]
 8012b44:	6960      	ldr	r0, [r4, #20]
 8012b46:	f891 c000 	ldrb.w	ip, [r1]
 8012b4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d035      	beq.n	8012bbe <_scanf_i+0x15e>
 8012b52:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012b56:	d124      	bne.n	8012ba2 <_scanf_i+0x142>
 8012b58:	0510      	lsls	r0, r2, #20
 8012b5a:	d522      	bpl.n	8012ba2 <_scanf_i+0x142>
 8012b5c:	f10b 0b01 	add.w	fp, fp, #1
 8012b60:	f1b9 0f00 	cmp.w	r9, #0
 8012b64:	d003      	beq.n	8012b6e <_scanf_i+0x10e>
 8012b66:	3301      	adds	r3, #1
 8012b68:	f109 39ff 	add.w	r9, r9, #4294967295
 8012b6c:	60a3      	str	r3, [r4, #8]
 8012b6e:	6873      	ldr	r3, [r6, #4]
 8012b70:	3b01      	subs	r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	6073      	str	r3, [r6, #4]
 8012b76:	dd1b      	ble.n	8012bb0 <_scanf_i+0x150>
 8012b78:	6833      	ldr	r3, [r6, #0]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	6033      	str	r3, [r6, #0]
 8012b7e:	68a3      	ldr	r3, [r4, #8]
 8012b80:	3b01      	subs	r3, #1
 8012b82:	60a3      	str	r3, [r4, #8]
 8012b84:	e7d9      	b.n	8012b3a <_scanf_i+0xda>
 8012b86:	f1bb 0f02 	cmp.w	fp, #2
 8012b8a:	d1ae      	bne.n	8012aea <_scanf_i+0x8a>
 8012b8c:	6822      	ldr	r2, [r4, #0]
 8012b8e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012b92:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012b96:	d1bf      	bne.n	8012b18 <_scanf_i+0xb8>
 8012b98:	2110      	movs	r1, #16
 8012b9a:	6061      	str	r1, [r4, #4]
 8012b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012ba0:	e7a2      	b.n	8012ae8 <_scanf_i+0x88>
 8012ba2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012ba6:	6022      	str	r2, [r4, #0]
 8012ba8:	780b      	ldrb	r3, [r1, #0]
 8012baa:	f805 3b01 	strb.w	r3, [r5], #1
 8012bae:	e7de      	b.n	8012b6e <_scanf_i+0x10e>
 8012bb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012bb4:	4631      	mov	r1, r6
 8012bb6:	4650      	mov	r0, sl
 8012bb8:	4798      	blx	r3
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d0df      	beq.n	8012b7e <_scanf_i+0x11e>
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	05d9      	lsls	r1, r3, #23
 8012bc2:	d50d      	bpl.n	8012be0 <_scanf_i+0x180>
 8012bc4:	42bd      	cmp	r5, r7
 8012bc6:	d909      	bls.n	8012bdc <_scanf_i+0x17c>
 8012bc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012bd0:	4632      	mov	r2, r6
 8012bd2:	4650      	mov	r0, sl
 8012bd4:	4798      	blx	r3
 8012bd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8012bda:	464d      	mov	r5, r9
 8012bdc:	42bd      	cmp	r5, r7
 8012bde:	d028      	beq.n	8012c32 <_scanf_i+0x1d2>
 8012be0:	6822      	ldr	r2, [r4, #0]
 8012be2:	f012 0210 	ands.w	r2, r2, #16
 8012be6:	d113      	bne.n	8012c10 <_scanf_i+0x1b0>
 8012be8:	702a      	strb	r2, [r5, #0]
 8012bea:	6863      	ldr	r3, [r4, #4]
 8012bec:	9e01      	ldr	r6, [sp, #4]
 8012bee:	4639      	mov	r1, r7
 8012bf0:	4650      	mov	r0, sl
 8012bf2:	47b0      	blx	r6
 8012bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8012bf8:	6821      	ldr	r1, [r4, #0]
 8012bfa:	1d1a      	adds	r2, r3, #4
 8012bfc:	f8c8 2000 	str.w	r2, [r8]
 8012c00:	f011 0f20 	tst.w	r1, #32
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	d00f      	beq.n	8012c28 <_scanf_i+0x1c8>
 8012c08:	6018      	str	r0, [r3, #0]
 8012c0a:	68e3      	ldr	r3, [r4, #12]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	60e3      	str	r3, [r4, #12]
 8012c10:	6923      	ldr	r3, [r4, #16]
 8012c12:	1bed      	subs	r5, r5, r7
 8012c14:	445d      	add	r5, fp
 8012c16:	442b      	add	r3, r5
 8012c18:	6123      	str	r3, [r4, #16]
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	b007      	add	sp, #28
 8012c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c22:	f04f 0b00 	mov.w	fp, #0
 8012c26:	e7ca      	b.n	8012bbe <_scanf_i+0x15e>
 8012c28:	07ca      	lsls	r2, r1, #31
 8012c2a:	bf4c      	ite	mi
 8012c2c:	8018      	strhmi	r0, [r3, #0]
 8012c2e:	6018      	strpl	r0, [r3, #0]
 8012c30:	e7eb      	b.n	8012c0a <_scanf_i+0x1aa>
 8012c32:	2001      	movs	r0, #1
 8012c34:	e7f2      	b.n	8012c1c <_scanf_i+0x1bc>
 8012c36:	bf00      	nop
 8012c38:	08016044 	.word	0x08016044
 8012c3c:	08012361 	.word	0x08012361
 8012c40:	080136fd 	.word	0x080136fd
 8012c44:	0801640a 	.word	0x0801640a

08012c48 <__sflush_r>:
 8012c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c50:	0716      	lsls	r6, r2, #28
 8012c52:	4605      	mov	r5, r0
 8012c54:	460c      	mov	r4, r1
 8012c56:	d454      	bmi.n	8012d02 <__sflush_r+0xba>
 8012c58:	684b      	ldr	r3, [r1, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	dc02      	bgt.n	8012c64 <__sflush_r+0x1c>
 8012c5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	dd48      	ble.n	8012cf6 <__sflush_r+0xae>
 8012c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c66:	2e00      	cmp	r6, #0
 8012c68:	d045      	beq.n	8012cf6 <__sflush_r+0xae>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012c70:	682f      	ldr	r7, [r5, #0]
 8012c72:	6a21      	ldr	r1, [r4, #32]
 8012c74:	602b      	str	r3, [r5, #0]
 8012c76:	d030      	beq.n	8012cda <__sflush_r+0x92>
 8012c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	0759      	lsls	r1, r3, #29
 8012c7e:	d505      	bpl.n	8012c8c <__sflush_r+0x44>
 8012c80:	6863      	ldr	r3, [r4, #4]
 8012c82:	1ad2      	subs	r2, r2, r3
 8012c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012c86:	b10b      	cbz	r3, 8012c8c <__sflush_r+0x44>
 8012c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012c8a:	1ad2      	subs	r2, r2, r3
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c90:	6a21      	ldr	r1, [r4, #32]
 8012c92:	4628      	mov	r0, r5
 8012c94:	47b0      	blx	r6
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	89a3      	ldrh	r3, [r4, #12]
 8012c9a:	d106      	bne.n	8012caa <__sflush_r+0x62>
 8012c9c:	6829      	ldr	r1, [r5, #0]
 8012c9e:	291d      	cmp	r1, #29
 8012ca0:	d82b      	bhi.n	8012cfa <__sflush_r+0xb2>
 8012ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8012d4c <__sflush_r+0x104>)
 8012ca4:	410a      	asrs	r2, r1
 8012ca6:	07d6      	lsls	r6, r2, #31
 8012ca8:	d427      	bmi.n	8012cfa <__sflush_r+0xb2>
 8012caa:	2200      	movs	r2, #0
 8012cac:	6062      	str	r2, [r4, #4]
 8012cae:	04d9      	lsls	r1, r3, #19
 8012cb0:	6922      	ldr	r2, [r4, #16]
 8012cb2:	6022      	str	r2, [r4, #0]
 8012cb4:	d504      	bpl.n	8012cc0 <__sflush_r+0x78>
 8012cb6:	1c42      	adds	r2, r0, #1
 8012cb8:	d101      	bne.n	8012cbe <__sflush_r+0x76>
 8012cba:	682b      	ldr	r3, [r5, #0]
 8012cbc:	b903      	cbnz	r3, 8012cc0 <__sflush_r+0x78>
 8012cbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8012cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012cc2:	602f      	str	r7, [r5, #0]
 8012cc4:	b1b9      	cbz	r1, 8012cf6 <__sflush_r+0xae>
 8012cc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cca:	4299      	cmp	r1, r3
 8012ccc:	d002      	beq.n	8012cd4 <__sflush_r+0x8c>
 8012cce:	4628      	mov	r0, r5
 8012cd0:	f7fd ffbe 	bl	8010c50 <_free_r>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8012cd8:	e00d      	b.n	8012cf6 <__sflush_r+0xae>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	4628      	mov	r0, r5
 8012cde:	47b0      	blx	r6
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	1c50      	adds	r0, r2, #1
 8012ce4:	d1c9      	bne.n	8012c7a <__sflush_r+0x32>
 8012ce6:	682b      	ldr	r3, [r5, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d0c6      	beq.n	8012c7a <__sflush_r+0x32>
 8012cec:	2b1d      	cmp	r3, #29
 8012cee:	d001      	beq.n	8012cf4 <__sflush_r+0xac>
 8012cf0:	2b16      	cmp	r3, #22
 8012cf2:	d11e      	bne.n	8012d32 <__sflush_r+0xea>
 8012cf4:	602f      	str	r7, [r5, #0]
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	e022      	b.n	8012d40 <__sflush_r+0xf8>
 8012cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cfe:	b21b      	sxth	r3, r3
 8012d00:	e01b      	b.n	8012d3a <__sflush_r+0xf2>
 8012d02:	690f      	ldr	r7, [r1, #16]
 8012d04:	2f00      	cmp	r7, #0
 8012d06:	d0f6      	beq.n	8012cf6 <__sflush_r+0xae>
 8012d08:	0793      	lsls	r3, r2, #30
 8012d0a:	680e      	ldr	r6, [r1, #0]
 8012d0c:	bf08      	it	eq
 8012d0e:	694b      	ldreq	r3, [r1, #20]
 8012d10:	600f      	str	r7, [r1, #0]
 8012d12:	bf18      	it	ne
 8012d14:	2300      	movne	r3, #0
 8012d16:	eba6 0807 	sub.w	r8, r6, r7
 8012d1a:	608b      	str	r3, [r1, #8]
 8012d1c:	f1b8 0f00 	cmp.w	r8, #0
 8012d20:	dde9      	ble.n	8012cf6 <__sflush_r+0xae>
 8012d22:	6a21      	ldr	r1, [r4, #32]
 8012d24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012d26:	4643      	mov	r3, r8
 8012d28:	463a      	mov	r2, r7
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	47b0      	blx	r6
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	dc08      	bgt.n	8012d44 <__sflush_r+0xfc>
 8012d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d3a:	81a3      	strh	r3, [r4, #12]
 8012d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d44:	4407      	add	r7, r0
 8012d46:	eba8 0800 	sub.w	r8, r8, r0
 8012d4a:	e7e7      	b.n	8012d1c <__sflush_r+0xd4>
 8012d4c:	dfbffffe 	.word	0xdfbffffe

08012d50 <_fflush_r>:
 8012d50:	b538      	push	{r3, r4, r5, lr}
 8012d52:	690b      	ldr	r3, [r1, #16]
 8012d54:	4605      	mov	r5, r0
 8012d56:	460c      	mov	r4, r1
 8012d58:	b913      	cbnz	r3, 8012d60 <_fflush_r+0x10>
 8012d5a:	2500      	movs	r5, #0
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	bd38      	pop	{r3, r4, r5, pc}
 8012d60:	b118      	cbz	r0, 8012d6a <_fflush_r+0x1a>
 8012d62:	6a03      	ldr	r3, [r0, #32]
 8012d64:	b90b      	cbnz	r3, 8012d6a <_fflush_r+0x1a>
 8012d66:	f7fc ff95 	bl	800fc94 <__sinit>
 8012d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d0f3      	beq.n	8012d5a <_fflush_r+0xa>
 8012d72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012d74:	07d0      	lsls	r0, r2, #31
 8012d76:	d404      	bmi.n	8012d82 <_fflush_r+0x32>
 8012d78:	0599      	lsls	r1, r3, #22
 8012d7a:	d402      	bmi.n	8012d82 <_fflush_r+0x32>
 8012d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d7e:	f7fd f902 	bl	800ff86 <__retarget_lock_acquire_recursive>
 8012d82:	4628      	mov	r0, r5
 8012d84:	4621      	mov	r1, r4
 8012d86:	f7ff ff5f 	bl	8012c48 <__sflush_r>
 8012d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d8c:	07da      	lsls	r2, r3, #31
 8012d8e:	4605      	mov	r5, r0
 8012d90:	d4e4      	bmi.n	8012d5c <_fflush_r+0xc>
 8012d92:	89a3      	ldrh	r3, [r4, #12]
 8012d94:	059b      	lsls	r3, r3, #22
 8012d96:	d4e1      	bmi.n	8012d5c <_fflush_r+0xc>
 8012d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d9a:	f7fd f8f5 	bl	800ff88 <__retarget_lock_release_recursive>
 8012d9e:	e7dd      	b.n	8012d5c <_fflush_r+0xc>

08012da0 <__sccl>:
 8012da0:	b570      	push	{r4, r5, r6, lr}
 8012da2:	780b      	ldrb	r3, [r1, #0]
 8012da4:	4604      	mov	r4, r0
 8012da6:	2b5e      	cmp	r3, #94	@ 0x5e
 8012da8:	bf0b      	itete	eq
 8012daa:	784b      	ldrbeq	r3, [r1, #1]
 8012dac:	1c4a      	addne	r2, r1, #1
 8012dae:	1c8a      	addeq	r2, r1, #2
 8012db0:	2100      	movne	r1, #0
 8012db2:	bf08      	it	eq
 8012db4:	2101      	moveq	r1, #1
 8012db6:	3801      	subs	r0, #1
 8012db8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012dbc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012dc0:	42a8      	cmp	r0, r5
 8012dc2:	d1fb      	bne.n	8012dbc <__sccl+0x1c>
 8012dc4:	b90b      	cbnz	r3, 8012dca <__sccl+0x2a>
 8012dc6:	1e50      	subs	r0, r2, #1
 8012dc8:	bd70      	pop	{r4, r5, r6, pc}
 8012dca:	f081 0101 	eor.w	r1, r1, #1
 8012dce:	54e1      	strb	r1, [r4, r3]
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012dd8:	2d2d      	cmp	r5, #45	@ 0x2d
 8012dda:	d005      	beq.n	8012de8 <__sccl+0x48>
 8012ddc:	2d5d      	cmp	r5, #93	@ 0x5d
 8012dde:	d016      	beq.n	8012e0e <__sccl+0x6e>
 8012de0:	2d00      	cmp	r5, #0
 8012de2:	d0f1      	beq.n	8012dc8 <__sccl+0x28>
 8012de4:	462b      	mov	r3, r5
 8012de6:	e7f2      	b.n	8012dce <__sccl+0x2e>
 8012de8:	7846      	ldrb	r6, [r0, #1]
 8012dea:	2e5d      	cmp	r6, #93	@ 0x5d
 8012dec:	d0fa      	beq.n	8012de4 <__sccl+0x44>
 8012dee:	42b3      	cmp	r3, r6
 8012df0:	dcf8      	bgt.n	8012de4 <__sccl+0x44>
 8012df2:	3002      	adds	r0, #2
 8012df4:	461a      	mov	r2, r3
 8012df6:	3201      	adds	r2, #1
 8012df8:	4296      	cmp	r6, r2
 8012dfa:	54a1      	strb	r1, [r4, r2]
 8012dfc:	dcfb      	bgt.n	8012df6 <__sccl+0x56>
 8012dfe:	1af2      	subs	r2, r6, r3
 8012e00:	3a01      	subs	r2, #1
 8012e02:	1c5d      	adds	r5, r3, #1
 8012e04:	42b3      	cmp	r3, r6
 8012e06:	bfa8      	it	ge
 8012e08:	2200      	movge	r2, #0
 8012e0a:	18ab      	adds	r3, r5, r2
 8012e0c:	e7e1      	b.n	8012dd2 <__sccl+0x32>
 8012e0e:	4610      	mov	r0, r2
 8012e10:	e7da      	b.n	8012dc8 <__sccl+0x28>

08012e12 <__submore>:
 8012e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e16:	460c      	mov	r4, r1
 8012e18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012e1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e1e:	4299      	cmp	r1, r3
 8012e20:	d11d      	bne.n	8012e5e <__submore+0x4c>
 8012e22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012e26:	f7fb ffb1 	bl	800ed8c <_malloc_r>
 8012e2a:	b918      	cbnz	r0, 8012e34 <__submore+0x22>
 8012e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012e3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012e3e:	6360      	str	r0, [r4, #52]	@ 0x34
 8012e40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012e44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012e48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012e4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012e50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012e54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012e58:	6020      	str	r0, [r4, #0]
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	e7e8      	b.n	8012e30 <__submore+0x1e>
 8012e5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012e60:	0077      	lsls	r7, r6, #1
 8012e62:	463a      	mov	r2, r7
 8012e64:	f000 fbad 	bl	80135c2 <_realloc_r>
 8012e68:	4605      	mov	r5, r0
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d0de      	beq.n	8012e2c <__submore+0x1a>
 8012e6e:	eb00 0806 	add.w	r8, r0, r6
 8012e72:	4601      	mov	r1, r0
 8012e74:	4632      	mov	r2, r6
 8012e76:	4640      	mov	r0, r8
 8012e78:	f7fd f887 	bl	800ff8a <memcpy>
 8012e7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012e80:	f8c4 8000 	str.w	r8, [r4]
 8012e84:	e7e9      	b.n	8012e5a <__submore+0x48>

08012e86 <memmove>:
 8012e86:	4288      	cmp	r0, r1
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	eb01 0402 	add.w	r4, r1, r2
 8012e8e:	d902      	bls.n	8012e96 <memmove+0x10>
 8012e90:	4284      	cmp	r4, r0
 8012e92:	4623      	mov	r3, r4
 8012e94:	d807      	bhi.n	8012ea6 <memmove+0x20>
 8012e96:	1e43      	subs	r3, r0, #1
 8012e98:	42a1      	cmp	r1, r4
 8012e9a:	d008      	beq.n	8012eae <memmove+0x28>
 8012e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ea0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ea4:	e7f8      	b.n	8012e98 <memmove+0x12>
 8012ea6:	4402      	add	r2, r0
 8012ea8:	4601      	mov	r1, r0
 8012eaa:	428a      	cmp	r2, r1
 8012eac:	d100      	bne.n	8012eb0 <memmove+0x2a>
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012eb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012eb8:	e7f7      	b.n	8012eaa <memmove+0x24>

08012eba <strncmp>:
 8012eba:	b510      	push	{r4, lr}
 8012ebc:	b16a      	cbz	r2, 8012eda <strncmp+0x20>
 8012ebe:	3901      	subs	r1, #1
 8012ec0:	1884      	adds	r4, r0, r2
 8012ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ec6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d103      	bne.n	8012ed6 <strncmp+0x1c>
 8012ece:	42a0      	cmp	r0, r4
 8012ed0:	d001      	beq.n	8012ed6 <strncmp+0x1c>
 8012ed2:	2a00      	cmp	r2, #0
 8012ed4:	d1f5      	bne.n	8012ec2 <strncmp+0x8>
 8012ed6:	1ad0      	subs	r0, r2, r3
 8012ed8:	bd10      	pop	{r4, pc}
 8012eda:	4610      	mov	r0, r2
 8012edc:	e7fc      	b.n	8012ed8 <strncmp+0x1e>
	...

08012ee0 <nan>:
 8012ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012ee8 <nan+0x8>
 8012ee4:	4770      	bx	lr
 8012ee6:	bf00      	nop
 8012ee8:	00000000 	.word	0x00000000
 8012eec:	7ff80000 	.word	0x7ff80000

08012ef0 <__assert_func>:
 8012ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ef2:	4614      	mov	r4, r2
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	4b09      	ldr	r3, [pc, #36]	@ (8012f1c <__assert_func+0x2c>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4605      	mov	r5, r0
 8012efc:	68d8      	ldr	r0, [r3, #12]
 8012efe:	b954      	cbnz	r4, 8012f16 <__assert_func+0x26>
 8012f00:	4b07      	ldr	r3, [pc, #28]	@ (8012f20 <__assert_func+0x30>)
 8012f02:	461c      	mov	r4, r3
 8012f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f08:	9100      	str	r1, [sp, #0]
 8012f0a:	462b      	mov	r3, r5
 8012f0c:	4905      	ldr	r1, [pc, #20]	@ (8012f24 <__assert_func+0x34>)
 8012f0e:	f000 fc05 	bl	801371c <fiprintf>
 8012f12:	f000 fc15 	bl	8013740 <abort>
 8012f16:	4b04      	ldr	r3, [pc, #16]	@ (8012f28 <__assert_func+0x38>)
 8012f18:	e7f4      	b.n	8012f04 <__assert_func+0x14>
 8012f1a:	bf00      	nop
 8012f1c:	20000050 	.word	0x20000050
 8012f20:	08016458 	.word	0x08016458
 8012f24:	0801642a 	.word	0x0801642a
 8012f28:	0801641d 	.word	0x0801641d

08012f2c <rshift>:
 8012f2c:	6903      	ldr	r3, [r0, #16]
 8012f2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012f32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012f3a:	f100 0414 	add.w	r4, r0, #20
 8012f3e:	dd45      	ble.n	8012fcc <rshift+0xa0>
 8012f40:	f011 011f 	ands.w	r1, r1, #31
 8012f44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012f48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012f4c:	d10c      	bne.n	8012f68 <rshift+0x3c>
 8012f4e:	f100 0710 	add.w	r7, r0, #16
 8012f52:	4629      	mov	r1, r5
 8012f54:	42b1      	cmp	r1, r6
 8012f56:	d334      	bcc.n	8012fc2 <rshift+0x96>
 8012f58:	1a9b      	subs	r3, r3, r2
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	1eea      	subs	r2, r5, #3
 8012f5e:	4296      	cmp	r6, r2
 8012f60:	bf38      	it	cc
 8012f62:	2300      	movcc	r3, #0
 8012f64:	4423      	add	r3, r4
 8012f66:	e015      	b.n	8012f94 <rshift+0x68>
 8012f68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012f6c:	f1c1 0820 	rsb	r8, r1, #32
 8012f70:	40cf      	lsrs	r7, r1
 8012f72:	f105 0e04 	add.w	lr, r5, #4
 8012f76:	46a1      	mov	r9, r4
 8012f78:	4576      	cmp	r6, lr
 8012f7a:	46f4      	mov	ip, lr
 8012f7c:	d815      	bhi.n	8012faa <rshift+0x7e>
 8012f7e:	1a9a      	subs	r2, r3, r2
 8012f80:	0092      	lsls	r2, r2, #2
 8012f82:	3a04      	subs	r2, #4
 8012f84:	3501      	adds	r5, #1
 8012f86:	42ae      	cmp	r6, r5
 8012f88:	bf38      	it	cc
 8012f8a:	2200      	movcc	r2, #0
 8012f8c:	18a3      	adds	r3, r4, r2
 8012f8e:	50a7      	str	r7, [r4, r2]
 8012f90:	b107      	cbz	r7, 8012f94 <rshift+0x68>
 8012f92:	3304      	adds	r3, #4
 8012f94:	1b1a      	subs	r2, r3, r4
 8012f96:	42a3      	cmp	r3, r4
 8012f98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012f9c:	bf08      	it	eq
 8012f9e:	2300      	moveq	r3, #0
 8012fa0:	6102      	str	r2, [r0, #16]
 8012fa2:	bf08      	it	eq
 8012fa4:	6143      	streq	r3, [r0, #20]
 8012fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012faa:	f8dc c000 	ldr.w	ip, [ip]
 8012fae:	fa0c fc08 	lsl.w	ip, ip, r8
 8012fb2:	ea4c 0707 	orr.w	r7, ip, r7
 8012fb6:	f849 7b04 	str.w	r7, [r9], #4
 8012fba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012fbe:	40cf      	lsrs	r7, r1
 8012fc0:	e7da      	b.n	8012f78 <rshift+0x4c>
 8012fc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8012fc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8012fca:	e7c3      	b.n	8012f54 <rshift+0x28>
 8012fcc:	4623      	mov	r3, r4
 8012fce:	e7e1      	b.n	8012f94 <rshift+0x68>

08012fd0 <__hexdig_fun>:
 8012fd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012fd4:	2b09      	cmp	r3, #9
 8012fd6:	d802      	bhi.n	8012fde <__hexdig_fun+0xe>
 8012fd8:	3820      	subs	r0, #32
 8012fda:	b2c0      	uxtb	r0, r0
 8012fdc:	4770      	bx	lr
 8012fde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012fe2:	2b05      	cmp	r3, #5
 8012fe4:	d801      	bhi.n	8012fea <__hexdig_fun+0x1a>
 8012fe6:	3847      	subs	r0, #71	@ 0x47
 8012fe8:	e7f7      	b.n	8012fda <__hexdig_fun+0xa>
 8012fea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012fee:	2b05      	cmp	r3, #5
 8012ff0:	d801      	bhi.n	8012ff6 <__hexdig_fun+0x26>
 8012ff2:	3827      	subs	r0, #39	@ 0x27
 8012ff4:	e7f1      	b.n	8012fda <__hexdig_fun+0xa>
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	4770      	bx	lr
	...

08012ffc <__gethex>:
 8012ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013000:	b085      	sub	sp, #20
 8013002:	468a      	mov	sl, r1
 8013004:	9302      	str	r3, [sp, #8]
 8013006:	680b      	ldr	r3, [r1, #0]
 8013008:	9001      	str	r0, [sp, #4]
 801300a:	4690      	mov	r8, r2
 801300c:	1c9c      	adds	r4, r3, #2
 801300e:	46a1      	mov	r9, r4
 8013010:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013014:	2830      	cmp	r0, #48	@ 0x30
 8013016:	d0fa      	beq.n	801300e <__gethex+0x12>
 8013018:	eba9 0303 	sub.w	r3, r9, r3
 801301c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013020:	f7ff ffd6 	bl	8012fd0 <__hexdig_fun>
 8013024:	4605      	mov	r5, r0
 8013026:	2800      	cmp	r0, #0
 8013028:	d168      	bne.n	80130fc <__gethex+0x100>
 801302a:	49a0      	ldr	r1, [pc, #640]	@ (80132ac <__gethex+0x2b0>)
 801302c:	2201      	movs	r2, #1
 801302e:	4648      	mov	r0, r9
 8013030:	f7ff ff43 	bl	8012eba <strncmp>
 8013034:	4607      	mov	r7, r0
 8013036:	2800      	cmp	r0, #0
 8013038:	d167      	bne.n	801310a <__gethex+0x10e>
 801303a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801303e:	4626      	mov	r6, r4
 8013040:	f7ff ffc6 	bl	8012fd0 <__hexdig_fun>
 8013044:	2800      	cmp	r0, #0
 8013046:	d062      	beq.n	801310e <__gethex+0x112>
 8013048:	4623      	mov	r3, r4
 801304a:	7818      	ldrb	r0, [r3, #0]
 801304c:	2830      	cmp	r0, #48	@ 0x30
 801304e:	4699      	mov	r9, r3
 8013050:	f103 0301 	add.w	r3, r3, #1
 8013054:	d0f9      	beq.n	801304a <__gethex+0x4e>
 8013056:	f7ff ffbb 	bl	8012fd0 <__hexdig_fun>
 801305a:	fab0 f580 	clz	r5, r0
 801305e:	096d      	lsrs	r5, r5, #5
 8013060:	f04f 0b01 	mov.w	fp, #1
 8013064:	464a      	mov	r2, r9
 8013066:	4616      	mov	r6, r2
 8013068:	3201      	adds	r2, #1
 801306a:	7830      	ldrb	r0, [r6, #0]
 801306c:	f7ff ffb0 	bl	8012fd0 <__hexdig_fun>
 8013070:	2800      	cmp	r0, #0
 8013072:	d1f8      	bne.n	8013066 <__gethex+0x6a>
 8013074:	498d      	ldr	r1, [pc, #564]	@ (80132ac <__gethex+0x2b0>)
 8013076:	2201      	movs	r2, #1
 8013078:	4630      	mov	r0, r6
 801307a:	f7ff ff1e 	bl	8012eba <strncmp>
 801307e:	2800      	cmp	r0, #0
 8013080:	d13f      	bne.n	8013102 <__gethex+0x106>
 8013082:	b944      	cbnz	r4, 8013096 <__gethex+0x9a>
 8013084:	1c74      	adds	r4, r6, #1
 8013086:	4622      	mov	r2, r4
 8013088:	4616      	mov	r6, r2
 801308a:	3201      	adds	r2, #1
 801308c:	7830      	ldrb	r0, [r6, #0]
 801308e:	f7ff ff9f 	bl	8012fd0 <__hexdig_fun>
 8013092:	2800      	cmp	r0, #0
 8013094:	d1f8      	bne.n	8013088 <__gethex+0x8c>
 8013096:	1ba4      	subs	r4, r4, r6
 8013098:	00a7      	lsls	r7, r4, #2
 801309a:	7833      	ldrb	r3, [r6, #0]
 801309c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80130a0:	2b50      	cmp	r3, #80	@ 0x50
 80130a2:	d13e      	bne.n	8013122 <__gethex+0x126>
 80130a4:	7873      	ldrb	r3, [r6, #1]
 80130a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80130a8:	d033      	beq.n	8013112 <__gethex+0x116>
 80130aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80130ac:	d034      	beq.n	8013118 <__gethex+0x11c>
 80130ae:	1c71      	adds	r1, r6, #1
 80130b0:	2400      	movs	r4, #0
 80130b2:	7808      	ldrb	r0, [r1, #0]
 80130b4:	f7ff ff8c 	bl	8012fd0 <__hexdig_fun>
 80130b8:	1e43      	subs	r3, r0, #1
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	2b18      	cmp	r3, #24
 80130be:	d830      	bhi.n	8013122 <__gethex+0x126>
 80130c0:	f1a0 0210 	sub.w	r2, r0, #16
 80130c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80130c8:	f7ff ff82 	bl	8012fd0 <__hexdig_fun>
 80130cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80130d0:	fa5f fc8c 	uxtb.w	ip, ip
 80130d4:	f1bc 0f18 	cmp.w	ip, #24
 80130d8:	f04f 030a 	mov.w	r3, #10
 80130dc:	d91e      	bls.n	801311c <__gethex+0x120>
 80130de:	b104      	cbz	r4, 80130e2 <__gethex+0xe6>
 80130e0:	4252      	negs	r2, r2
 80130e2:	4417      	add	r7, r2
 80130e4:	f8ca 1000 	str.w	r1, [sl]
 80130e8:	b1ed      	cbz	r5, 8013126 <__gethex+0x12a>
 80130ea:	f1bb 0f00 	cmp.w	fp, #0
 80130ee:	bf0c      	ite	eq
 80130f0:	2506      	moveq	r5, #6
 80130f2:	2500      	movne	r5, #0
 80130f4:	4628      	mov	r0, r5
 80130f6:	b005      	add	sp, #20
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	2500      	movs	r5, #0
 80130fe:	462c      	mov	r4, r5
 8013100:	e7b0      	b.n	8013064 <__gethex+0x68>
 8013102:	2c00      	cmp	r4, #0
 8013104:	d1c7      	bne.n	8013096 <__gethex+0x9a>
 8013106:	4627      	mov	r7, r4
 8013108:	e7c7      	b.n	801309a <__gethex+0x9e>
 801310a:	464e      	mov	r6, r9
 801310c:	462f      	mov	r7, r5
 801310e:	2501      	movs	r5, #1
 8013110:	e7c3      	b.n	801309a <__gethex+0x9e>
 8013112:	2400      	movs	r4, #0
 8013114:	1cb1      	adds	r1, r6, #2
 8013116:	e7cc      	b.n	80130b2 <__gethex+0xb6>
 8013118:	2401      	movs	r4, #1
 801311a:	e7fb      	b.n	8013114 <__gethex+0x118>
 801311c:	fb03 0002 	mla	r0, r3, r2, r0
 8013120:	e7ce      	b.n	80130c0 <__gethex+0xc4>
 8013122:	4631      	mov	r1, r6
 8013124:	e7de      	b.n	80130e4 <__gethex+0xe8>
 8013126:	eba6 0309 	sub.w	r3, r6, r9
 801312a:	3b01      	subs	r3, #1
 801312c:	4629      	mov	r1, r5
 801312e:	2b07      	cmp	r3, #7
 8013130:	dc0a      	bgt.n	8013148 <__gethex+0x14c>
 8013132:	9801      	ldr	r0, [sp, #4]
 8013134:	f7fd fdde 	bl	8010cf4 <_Balloc>
 8013138:	4604      	mov	r4, r0
 801313a:	b940      	cbnz	r0, 801314e <__gethex+0x152>
 801313c:	4b5c      	ldr	r3, [pc, #368]	@ (80132b0 <__gethex+0x2b4>)
 801313e:	4602      	mov	r2, r0
 8013140:	21e4      	movs	r1, #228	@ 0xe4
 8013142:	485c      	ldr	r0, [pc, #368]	@ (80132b4 <__gethex+0x2b8>)
 8013144:	f7ff fed4 	bl	8012ef0 <__assert_func>
 8013148:	3101      	adds	r1, #1
 801314a:	105b      	asrs	r3, r3, #1
 801314c:	e7ef      	b.n	801312e <__gethex+0x132>
 801314e:	f100 0a14 	add.w	sl, r0, #20
 8013152:	2300      	movs	r3, #0
 8013154:	4655      	mov	r5, sl
 8013156:	469b      	mov	fp, r3
 8013158:	45b1      	cmp	r9, r6
 801315a:	d337      	bcc.n	80131cc <__gethex+0x1d0>
 801315c:	f845 bb04 	str.w	fp, [r5], #4
 8013160:	eba5 050a 	sub.w	r5, r5, sl
 8013164:	10ad      	asrs	r5, r5, #2
 8013166:	6125      	str	r5, [r4, #16]
 8013168:	4658      	mov	r0, fp
 801316a:	f7fd feb5 	bl	8010ed8 <__hi0bits>
 801316e:	016d      	lsls	r5, r5, #5
 8013170:	f8d8 6000 	ldr.w	r6, [r8]
 8013174:	1a2d      	subs	r5, r5, r0
 8013176:	42b5      	cmp	r5, r6
 8013178:	dd54      	ble.n	8013224 <__gethex+0x228>
 801317a:	1bad      	subs	r5, r5, r6
 801317c:	4629      	mov	r1, r5
 801317e:	4620      	mov	r0, r4
 8013180:	f7fe fa49 	bl	8011616 <__any_on>
 8013184:	4681      	mov	r9, r0
 8013186:	b178      	cbz	r0, 80131a8 <__gethex+0x1ac>
 8013188:	1e6b      	subs	r3, r5, #1
 801318a:	1159      	asrs	r1, r3, #5
 801318c:	f003 021f 	and.w	r2, r3, #31
 8013190:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013194:	f04f 0901 	mov.w	r9, #1
 8013198:	fa09 f202 	lsl.w	r2, r9, r2
 801319c:	420a      	tst	r2, r1
 801319e:	d003      	beq.n	80131a8 <__gethex+0x1ac>
 80131a0:	454b      	cmp	r3, r9
 80131a2:	dc36      	bgt.n	8013212 <__gethex+0x216>
 80131a4:	f04f 0902 	mov.w	r9, #2
 80131a8:	4629      	mov	r1, r5
 80131aa:	4620      	mov	r0, r4
 80131ac:	f7ff febe 	bl	8012f2c <rshift>
 80131b0:	442f      	add	r7, r5
 80131b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131b6:	42bb      	cmp	r3, r7
 80131b8:	da42      	bge.n	8013240 <__gethex+0x244>
 80131ba:	9801      	ldr	r0, [sp, #4]
 80131bc:	4621      	mov	r1, r4
 80131be:	f7fd fdd9 	bl	8010d74 <_Bfree>
 80131c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131c4:	2300      	movs	r3, #0
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	25a3      	movs	r5, #163	@ 0xa3
 80131ca:	e793      	b.n	80130f4 <__gethex+0xf8>
 80131cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80131d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80131d2:	d012      	beq.n	80131fa <__gethex+0x1fe>
 80131d4:	2b20      	cmp	r3, #32
 80131d6:	d104      	bne.n	80131e2 <__gethex+0x1e6>
 80131d8:	f845 bb04 	str.w	fp, [r5], #4
 80131dc:	f04f 0b00 	mov.w	fp, #0
 80131e0:	465b      	mov	r3, fp
 80131e2:	7830      	ldrb	r0, [r6, #0]
 80131e4:	9303      	str	r3, [sp, #12]
 80131e6:	f7ff fef3 	bl	8012fd0 <__hexdig_fun>
 80131ea:	9b03      	ldr	r3, [sp, #12]
 80131ec:	f000 000f 	and.w	r0, r0, #15
 80131f0:	4098      	lsls	r0, r3
 80131f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80131f6:	3304      	adds	r3, #4
 80131f8:	e7ae      	b.n	8013158 <__gethex+0x15c>
 80131fa:	45b1      	cmp	r9, r6
 80131fc:	d8ea      	bhi.n	80131d4 <__gethex+0x1d8>
 80131fe:	492b      	ldr	r1, [pc, #172]	@ (80132ac <__gethex+0x2b0>)
 8013200:	9303      	str	r3, [sp, #12]
 8013202:	2201      	movs	r2, #1
 8013204:	4630      	mov	r0, r6
 8013206:	f7ff fe58 	bl	8012eba <strncmp>
 801320a:	9b03      	ldr	r3, [sp, #12]
 801320c:	2800      	cmp	r0, #0
 801320e:	d1e1      	bne.n	80131d4 <__gethex+0x1d8>
 8013210:	e7a2      	b.n	8013158 <__gethex+0x15c>
 8013212:	1ea9      	subs	r1, r5, #2
 8013214:	4620      	mov	r0, r4
 8013216:	f7fe f9fe 	bl	8011616 <__any_on>
 801321a:	2800      	cmp	r0, #0
 801321c:	d0c2      	beq.n	80131a4 <__gethex+0x1a8>
 801321e:	f04f 0903 	mov.w	r9, #3
 8013222:	e7c1      	b.n	80131a8 <__gethex+0x1ac>
 8013224:	da09      	bge.n	801323a <__gethex+0x23e>
 8013226:	1b75      	subs	r5, r6, r5
 8013228:	4621      	mov	r1, r4
 801322a:	9801      	ldr	r0, [sp, #4]
 801322c:	462a      	mov	r2, r5
 801322e:	f7fd ffb9 	bl	80111a4 <__lshift>
 8013232:	1b7f      	subs	r7, r7, r5
 8013234:	4604      	mov	r4, r0
 8013236:	f100 0a14 	add.w	sl, r0, #20
 801323a:	f04f 0900 	mov.w	r9, #0
 801323e:	e7b8      	b.n	80131b2 <__gethex+0x1b6>
 8013240:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013244:	42bd      	cmp	r5, r7
 8013246:	dd6f      	ble.n	8013328 <__gethex+0x32c>
 8013248:	1bed      	subs	r5, r5, r7
 801324a:	42ae      	cmp	r6, r5
 801324c:	dc34      	bgt.n	80132b8 <__gethex+0x2bc>
 801324e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013252:	2b02      	cmp	r3, #2
 8013254:	d022      	beq.n	801329c <__gethex+0x2a0>
 8013256:	2b03      	cmp	r3, #3
 8013258:	d024      	beq.n	80132a4 <__gethex+0x2a8>
 801325a:	2b01      	cmp	r3, #1
 801325c:	d115      	bne.n	801328a <__gethex+0x28e>
 801325e:	42ae      	cmp	r6, r5
 8013260:	d113      	bne.n	801328a <__gethex+0x28e>
 8013262:	2e01      	cmp	r6, #1
 8013264:	d10b      	bne.n	801327e <__gethex+0x282>
 8013266:	9a02      	ldr	r2, [sp, #8]
 8013268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801326c:	6013      	str	r3, [r2, #0]
 801326e:	2301      	movs	r3, #1
 8013270:	6123      	str	r3, [r4, #16]
 8013272:	f8ca 3000 	str.w	r3, [sl]
 8013276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013278:	2562      	movs	r5, #98	@ 0x62
 801327a:	601c      	str	r4, [r3, #0]
 801327c:	e73a      	b.n	80130f4 <__gethex+0xf8>
 801327e:	1e71      	subs	r1, r6, #1
 8013280:	4620      	mov	r0, r4
 8013282:	f7fe f9c8 	bl	8011616 <__any_on>
 8013286:	2800      	cmp	r0, #0
 8013288:	d1ed      	bne.n	8013266 <__gethex+0x26a>
 801328a:	9801      	ldr	r0, [sp, #4]
 801328c:	4621      	mov	r1, r4
 801328e:	f7fd fd71 	bl	8010d74 <_Bfree>
 8013292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013294:	2300      	movs	r3, #0
 8013296:	6013      	str	r3, [r2, #0]
 8013298:	2550      	movs	r5, #80	@ 0x50
 801329a:	e72b      	b.n	80130f4 <__gethex+0xf8>
 801329c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d1f3      	bne.n	801328a <__gethex+0x28e>
 80132a2:	e7e0      	b.n	8013266 <__gethex+0x26a>
 80132a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1dd      	bne.n	8013266 <__gethex+0x26a>
 80132aa:	e7ee      	b.n	801328a <__gethex+0x28e>
 80132ac:	08016290 	.word	0x08016290
 80132b0:	08016123 	.word	0x08016123
 80132b4:	08016459 	.word	0x08016459
 80132b8:	1e6f      	subs	r7, r5, #1
 80132ba:	f1b9 0f00 	cmp.w	r9, #0
 80132be:	d130      	bne.n	8013322 <__gethex+0x326>
 80132c0:	b127      	cbz	r7, 80132cc <__gethex+0x2d0>
 80132c2:	4639      	mov	r1, r7
 80132c4:	4620      	mov	r0, r4
 80132c6:	f7fe f9a6 	bl	8011616 <__any_on>
 80132ca:	4681      	mov	r9, r0
 80132cc:	117a      	asrs	r2, r7, #5
 80132ce:	2301      	movs	r3, #1
 80132d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80132d4:	f007 071f 	and.w	r7, r7, #31
 80132d8:	40bb      	lsls	r3, r7
 80132da:	4213      	tst	r3, r2
 80132dc:	4629      	mov	r1, r5
 80132de:	4620      	mov	r0, r4
 80132e0:	bf18      	it	ne
 80132e2:	f049 0902 	orrne.w	r9, r9, #2
 80132e6:	f7ff fe21 	bl	8012f2c <rshift>
 80132ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80132ee:	1b76      	subs	r6, r6, r5
 80132f0:	2502      	movs	r5, #2
 80132f2:	f1b9 0f00 	cmp.w	r9, #0
 80132f6:	d047      	beq.n	8013388 <__gethex+0x38c>
 80132f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132fc:	2b02      	cmp	r3, #2
 80132fe:	d015      	beq.n	801332c <__gethex+0x330>
 8013300:	2b03      	cmp	r3, #3
 8013302:	d017      	beq.n	8013334 <__gethex+0x338>
 8013304:	2b01      	cmp	r3, #1
 8013306:	d109      	bne.n	801331c <__gethex+0x320>
 8013308:	f019 0f02 	tst.w	r9, #2
 801330c:	d006      	beq.n	801331c <__gethex+0x320>
 801330e:	f8da 3000 	ldr.w	r3, [sl]
 8013312:	ea49 0903 	orr.w	r9, r9, r3
 8013316:	f019 0f01 	tst.w	r9, #1
 801331a:	d10e      	bne.n	801333a <__gethex+0x33e>
 801331c:	f045 0510 	orr.w	r5, r5, #16
 8013320:	e032      	b.n	8013388 <__gethex+0x38c>
 8013322:	f04f 0901 	mov.w	r9, #1
 8013326:	e7d1      	b.n	80132cc <__gethex+0x2d0>
 8013328:	2501      	movs	r5, #1
 801332a:	e7e2      	b.n	80132f2 <__gethex+0x2f6>
 801332c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801332e:	f1c3 0301 	rsb	r3, r3, #1
 8013332:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013336:	2b00      	cmp	r3, #0
 8013338:	d0f0      	beq.n	801331c <__gethex+0x320>
 801333a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801333e:	f104 0314 	add.w	r3, r4, #20
 8013342:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013346:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801334a:	f04f 0c00 	mov.w	ip, #0
 801334e:	4618      	mov	r0, r3
 8013350:	f853 2b04 	ldr.w	r2, [r3], #4
 8013354:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013358:	d01b      	beq.n	8013392 <__gethex+0x396>
 801335a:	3201      	adds	r2, #1
 801335c:	6002      	str	r2, [r0, #0]
 801335e:	2d02      	cmp	r5, #2
 8013360:	f104 0314 	add.w	r3, r4, #20
 8013364:	d13c      	bne.n	80133e0 <__gethex+0x3e4>
 8013366:	f8d8 2000 	ldr.w	r2, [r8]
 801336a:	3a01      	subs	r2, #1
 801336c:	42b2      	cmp	r2, r6
 801336e:	d109      	bne.n	8013384 <__gethex+0x388>
 8013370:	1171      	asrs	r1, r6, #5
 8013372:	2201      	movs	r2, #1
 8013374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013378:	f006 061f 	and.w	r6, r6, #31
 801337c:	fa02 f606 	lsl.w	r6, r2, r6
 8013380:	421e      	tst	r6, r3
 8013382:	d13a      	bne.n	80133fa <__gethex+0x3fe>
 8013384:	f045 0520 	orr.w	r5, r5, #32
 8013388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801338a:	601c      	str	r4, [r3, #0]
 801338c:	9b02      	ldr	r3, [sp, #8]
 801338e:	601f      	str	r7, [r3, #0]
 8013390:	e6b0      	b.n	80130f4 <__gethex+0xf8>
 8013392:	4299      	cmp	r1, r3
 8013394:	f843 cc04 	str.w	ip, [r3, #-4]
 8013398:	d8d9      	bhi.n	801334e <__gethex+0x352>
 801339a:	68a3      	ldr	r3, [r4, #8]
 801339c:	459b      	cmp	fp, r3
 801339e:	db17      	blt.n	80133d0 <__gethex+0x3d4>
 80133a0:	6861      	ldr	r1, [r4, #4]
 80133a2:	9801      	ldr	r0, [sp, #4]
 80133a4:	3101      	adds	r1, #1
 80133a6:	f7fd fca5 	bl	8010cf4 <_Balloc>
 80133aa:	4681      	mov	r9, r0
 80133ac:	b918      	cbnz	r0, 80133b6 <__gethex+0x3ba>
 80133ae:	4b1a      	ldr	r3, [pc, #104]	@ (8013418 <__gethex+0x41c>)
 80133b0:	4602      	mov	r2, r0
 80133b2:	2184      	movs	r1, #132	@ 0x84
 80133b4:	e6c5      	b.n	8013142 <__gethex+0x146>
 80133b6:	6922      	ldr	r2, [r4, #16]
 80133b8:	3202      	adds	r2, #2
 80133ba:	f104 010c 	add.w	r1, r4, #12
 80133be:	0092      	lsls	r2, r2, #2
 80133c0:	300c      	adds	r0, #12
 80133c2:	f7fc fde2 	bl	800ff8a <memcpy>
 80133c6:	4621      	mov	r1, r4
 80133c8:	9801      	ldr	r0, [sp, #4]
 80133ca:	f7fd fcd3 	bl	8010d74 <_Bfree>
 80133ce:	464c      	mov	r4, r9
 80133d0:	6923      	ldr	r3, [r4, #16]
 80133d2:	1c5a      	adds	r2, r3, #1
 80133d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80133d8:	6122      	str	r2, [r4, #16]
 80133da:	2201      	movs	r2, #1
 80133dc:	615a      	str	r2, [r3, #20]
 80133de:	e7be      	b.n	801335e <__gethex+0x362>
 80133e0:	6922      	ldr	r2, [r4, #16]
 80133e2:	455a      	cmp	r2, fp
 80133e4:	dd0b      	ble.n	80133fe <__gethex+0x402>
 80133e6:	2101      	movs	r1, #1
 80133e8:	4620      	mov	r0, r4
 80133ea:	f7ff fd9f 	bl	8012f2c <rshift>
 80133ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80133f2:	3701      	adds	r7, #1
 80133f4:	42bb      	cmp	r3, r7
 80133f6:	f6ff aee0 	blt.w	80131ba <__gethex+0x1be>
 80133fa:	2501      	movs	r5, #1
 80133fc:	e7c2      	b.n	8013384 <__gethex+0x388>
 80133fe:	f016 061f 	ands.w	r6, r6, #31
 8013402:	d0fa      	beq.n	80133fa <__gethex+0x3fe>
 8013404:	4453      	add	r3, sl
 8013406:	f1c6 0620 	rsb	r6, r6, #32
 801340a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801340e:	f7fd fd63 	bl	8010ed8 <__hi0bits>
 8013412:	42b0      	cmp	r0, r6
 8013414:	dbe7      	blt.n	80133e6 <__gethex+0x3ea>
 8013416:	e7f0      	b.n	80133fa <__gethex+0x3fe>
 8013418:	08016123 	.word	0x08016123

0801341c <L_shift>:
 801341c:	f1c2 0208 	rsb	r2, r2, #8
 8013420:	0092      	lsls	r2, r2, #2
 8013422:	b570      	push	{r4, r5, r6, lr}
 8013424:	f1c2 0620 	rsb	r6, r2, #32
 8013428:	6843      	ldr	r3, [r0, #4]
 801342a:	6804      	ldr	r4, [r0, #0]
 801342c:	fa03 f506 	lsl.w	r5, r3, r6
 8013430:	432c      	orrs	r4, r5
 8013432:	40d3      	lsrs	r3, r2
 8013434:	6004      	str	r4, [r0, #0]
 8013436:	f840 3f04 	str.w	r3, [r0, #4]!
 801343a:	4288      	cmp	r0, r1
 801343c:	d3f4      	bcc.n	8013428 <L_shift+0xc>
 801343e:	bd70      	pop	{r4, r5, r6, pc}

08013440 <__match>:
 8013440:	b530      	push	{r4, r5, lr}
 8013442:	6803      	ldr	r3, [r0, #0]
 8013444:	3301      	adds	r3, #1
 8013446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801344a:	b914      	cbnz	r4, 8013452 <__match+0x12>
 801344c:	6003      	str	r3, [r0, #0]
 801344e:	2001      	movs	r0, #1
 8013450:	bd30      	pop	{r4, r5, pc}
 8013452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013456:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801345a:	2d19      	cmp	r5, #25
 801345c:	bf98      	it	ls
 801345e:	3220      	addls	r2, #32
 8013460:	42a2      	cmp	r2, r4
 8013462:	d0f0      	beq.n	8013446 <__match+0x6>
 8013464:	2000      	movs	r0, #0
 8013466:	e7f3      	b.n	8013450 <__match+0x10>

08013468 <__hexnan>:
 8013468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	680b      	ldr	r3, [r1, #0]
 801346e:	6801      	ldr	r1, [r0, #0]
 8013470:	115e      	asrs	r6, r3, #5
 8013472:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013476:	f013 031f 	ands.w	r3, r3, #31
 801347a:	b087      	sub	sp, #28
 801347c:	bf18      	it	ne
 801347e:	3604      	addne	r6, #4
 8013480:	2500      	movs	r5, #0
 8013482:	1f37      	subs	r7, r6, #4
 8013484:	4682      	mov	sl, r0
 8013486:	4690      	mov	r8, r2
 8013488:	9301      	str	r3, [sp, #4]
 801348a:	f846 5c04 	str.w	r5, [r6, #-4]
 801348e:	46b9      	mov	r9, r7
 8013490:	463c      	mov	r4, r7
 8013492:	9502      	str	r5, [sp, #8]
 8013494:	46ab      	mov	fp, r5
 8013496:	784a      	ldrb	r2, [r1, #1]
 8013498:	1c4b      	adds	r3, r1, #1
 801349a:	9303      	str	r3, [sp, #12]
 801349c:	b342      	cbz	r2, 80134f0 <__hexnan+0x88>
 801349e:	4610      	mov	r0, r2
 80134a0:	9105      	str	r1, [sp, #20]
 80134a2:	9204      	str	r2, [sp, #16]
 80134a4:	f7ff fd94 	bl	8012fd0 <__hexdig_fun>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d151      	bne.n	8013550 <__hexnan+0xe8>
 80134ac:	9a04      	ldr	r2, [sp, #16]
 80134ae:	9905      	ldr	r1, [sp, #20]
 80134b0:	2a20      	cmp	r2, #32
 80134b2:	d818      	bhi.n	80134e6 <__hexnan+0x7e>
 80134b4:	9b02      	ldr	r3, [sp, #8]
 80134b6:	459b      	cmp	fp, r3
 80134b8:	dd13      	ble.n	80134e2 <__hexnan+0x7a>
 80134ba:	454c      	cmp	r4, r9
 80134bc:	d206      	bcs.n	80134cc <__hexnan+0x64>
 80134be:	2d07      	cmp	r5, #7
 80134c0:	dc04      	bgt.n	80134cc <__hexnan+0x64>
 80134c2:	462a      	mov	r2, r5
 80134c4:	4649      	mov	r1, r9
 80134c6:	4620      	mov	r0, r4
 80134c8:	f7ff ffa8 	bl	801341c <L_shift>
 80134cc:	4544      	cmp	r4, r8
 80134ce:	d952      	bls.n	8013576 <__hexnan+0x10e>
 80134d0:	2300      	movs	r3, #0
 80134d2:	f1a4 0904 	sub.w	r9, r4, #4
 80134d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80134da:	f8cd b008 	str.w	fp, [sp, #8]
 80134de:	464c      	mov	r4, r9
 80134e0:	461d      	mov	r5, r3
 80134e2:	9903      	ldr	r1, [sp, #12]
 80134e4:	e7d7      	b.n	8013496 <__hexnan+0x2e>
 80134e6:	2a29      	cmp	r2, #41	@ 0x29
 80134e8:	d157      	bne.n	801359a <__hexnan+0x132>
 80134ea:	3102      	adds	r1, #2
 80134ec:	f8ca 1000 	str.w	r1, [sl]
 80134f0:	f1bb 0f00 	cmp.w	fp, #0
 80134f4:	d051      	beq.n	801359a <__hexnan+0x132>
 80134f6:	454c      	cmp	r4, r9
 80134f8:	d206      	bcs.n	8013508 <__hexnan+0xa0>
 80134fa:	2d07      	cmp	r5, #7
 80134fc:	dc04      	bgt.n	8013508 <__hexnan+0xa0>
 80134fe:	462a      	mov	r2, r5
 8013500:	4649      	mov	r1, r9
 8013502:	4620      	mov	r0, r4
 8013504:	f7ff ff8a 	bl	801341c <L_shift>
 8013508:	4544      	cmp	r4, r8
 801350a:	d936      	bls.n	801357a <__hexnan+0x112>
 801350c:	f1a8 0204 	sub.w	r2, r8, #4
 8013510:	4623      	mov	r3, r4
 8013512:	f853 1b04 	ldr.w	r1, [r3], #4
 8013516:	f842 1f04 	str.w	r1, [r2, #4]!
 801351a:	429f      	cmp	r7, r3
 801351c:	d2f9      	bcs.n	8013512 <__hexnan+0xaa>
 801351e:	1b3b      	subs	r3, r7, r4
 8013520:	f023 0303 	bic.w	r3, r3, #3
 8013524:	3304      	adds	r3, #4
 8013526:	3401      	adds	r4, #1
 8013528:	3e03      	subs	r6, #3
 801352a:	42b4      	cmp	r4, r6
 801352c:	bf88      	it	hi
 801352e:	2304      	movhi	r3, #4
 8013530:	4443      	add	r3, r8
 8013532:	2200      	movs	r2, #0
 8013534:	f843 2b04 	str.w	r2, [r3], #4
 8013538:	429f      	cmp	r7, r3
 801353a:	d2fb      	bcs.n	8013534 <__hexnan+0xcc>
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	b91b      	cbnz	r3, 8013548 <__hexnan+0xe0>
 8013540:	4547      	cmp	r7, r8
 8013542:	d128      	bne.n	8013596 <__hexnan+0x12e>
 8013544:	2301      	movs	r3, #1
 8013546:	603b      	str	r3, [r7, #0]
 8013548:	2005      	movs	r0, #5
 801354a:	b007      	add	sp, #28
 801354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013550:	3501      	adds	r5, #1
 8013552:	2d08      	cmp	r5, #8
 8013554:	f10b 0b01 	add.w	fp, fp, #1
 8013558:	dd06      	ble.n	8013568 <__hexnan+0x100>
 801355a:	4544      	cmp	r4, r8
 801355c:	d9c1      	bls.n	80134e2 <__hexnan+0x7a>
 801355e:	2300      	movs	r3, #0
 8013560:	f844 3c04 	str.w	r3, [r4, #-4]
 8013564:	2501      	movs	r5, #1
 8013566:	3c04      	subs	r4, #4
 8013568:	6822      	ldr	r2, [r4, #0]
 801356a:	f000 000f 	and.w	r0, r0, #15
 801356e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013572:	6020      	str	r0, [r4, #0]
 8013574:	e7b5      	b.n	80134e2 <__hexnan+0x7a>
 8013576:	2508      	movs	r5, #8
 8013578:	e7b3      	b.n	80134e2 <__hexnan+0x7a>
 801357a:	9b01      	ldr	r3, [sp, #4]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d0dd      	beq.n	801353c <__hexnan+0xd4>
 8013580:	f1c3 0320 	rsb	r3, r3, #32
 8013584:	f04f 32ff 	mov.w	r2, #4294967295
 8013588:	40da      	lsrs	r2, r3
 801358a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801358e:	4013      	ands	r3, r2
 8013590:	f846 3c04 	str.w	r3, [r6, #-4]
 8013594:	e7d2      	b.n	801353c <__hexnan+0xd4>
 8013596:	3f04      	subs	r7, #4
 8013598:	e7d0      	b.n	801353c <__hexnan+0xd4>
 801359a:	2004      	movs	r0, #4
 801359c:	e7d5      	b.n	801354a <__hexnan+0xe2>

0801359e <__ascii_mbtowc>:
 801359e:	b082      	sub	sp, #8
 80135a0:	b901      	cbnz	r1, 80135a4 <__ascii_mbtowc+0x6>
 80135a2:	a901      	add	r1, sp, #4
 80135a4:	b142      	cbz	r2, 80135b8 <__ascii_mbtowc+0x1a>
 80135a6:	b14b      	cbz	r3, 80135bc <__ascii_mbtowc+0x1e>
 80135a8:	7813      	ldrb	r3, [r2, #0]
 80135aa:	600b      	str	r3, [r1, #0]
 80135ac:	7812      	ldrb	r2, [r2, #0]
 80135ae:	1e10      	subs	r0, r2, #0
 80135b0:	bf18      	it	ne
 80135b2:	2001      	movne	r0, #1
 80135b4:	b002      	add	sp, #8
 80135b6:	4770      	bx	lr
 80135b8:	4610      	mov	r0, r2
 80135ba:	e7fb      	b.n	80135b4 <__ascii_mbtowc+0x16>
 80135bc:	f06f 0001 	mvn.w	r0, #1
 80135c0:	e7f8      	b.n	80135b4 <__ascii_mbtowc+0x16>

080135c2 <_realloc_r>:
 80135c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135c6:	4680      	mov	r8, r0
 80135c8:	4615      	mov	r5, r2
 80135ca:	460c      	mov	r4, r1
 80135cc:	b921      	cbnz	r1, 80135d8 <_realloc_r+0x16>
 80135ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135d2:	4611      	mov	r1, r2
 80135d4:	f7fb bbda 	b.w	800ed8c <_malloc_r>
 80135d8:	b92a      	cbnz	r2, 80135e6 <_realloc_r+0x24>
 80135da:	f7fd fb39 	bl	8010c50 <_free_r>
 80135de:	2400      	movs	r4, #0
 80135e0:	4620      	mov	r0, r4
 80135e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e6:	f000 f8b2 	bl	801374e <_malloc_usable_size_r>
 80135ea:	4285      	cmp	r5, r0
 80135ec:	4606      	mov	r6, r0
 80135ee:	d802      	bhi.n	80135f6 <_realloc_r+0x34>
 80135f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80135f4:	d8f4      	bhi.n	80135e0 <_realloc_r+0x1e>
 80135f6:	4629      	mov	r1, r5
 80135f8:	4640      	mov	r0, r8
 80135fa:	f7fb fbc7 	bl	800ed8c <_malloc_r>
 80135fe:	4607      	mov	r7, r0
 8013600:	2800      	cmp	r0, #0
 8013602:	d0ec      	beq.n	80135de <_realloc_r+0x1c>
 8013604:	42b5      	cmp	r5, r6
 8013606:	462a      	mov	r2, r5
 8013608:	4621      	mov	r1, r4
 801360a:	bf28      	it	cs
 801360c:	4632      	movcs	r2, r6
 801360e:	f7fc fcbc 	bl	800ff8a <memcpy>
 8013612:	4621      	mov	r1, r4
 8013614:	4640      	mov	r0, r8
 8013616:	f7fd fb1b 	bl	8010c50 <_free_r>
 801361a:	463c      	mov	r4, r7
 801361c:	e7e0      	b.n	80135e0 <_realloc_r+0x1e>
	...

08013620 <_strtoul_l.constprop.0>:
 8013620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013624:	4e34      	ldr	r6, [pc, #208]	@ (80136f8 <_strtoul_l.constprop.0+0xd8>)
 8013626:	4686      	mov	lr, r0
 8013628:	460d      	mov	r5, r1
 801362a:	4628      	mov	r0, r5
 801362c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013630:	5d37      	ldrb	r7, [r6, r4]
 8013632:	f017 0708 	ands.w	r7, r7, #8
 8013636:	d1f8      	bne.n	801362a <_strtoul_l.constprop.0+0xa>
 8013638:	2c2d      	cmp	r4, #45	@ 0x2d
 801363a:	d12f      	bne.n	801369c <_strtoul_l.constprop.0+0x7c>
 801363c:	782c      	ldrb	r4, [r5, #0]
 801363e:	2701      	movs	r7, #1
 8013640:	1c85      	adds	r5, r0, #2
 8013642:	f033 0010 	bics.w	r0, r3, #16
 8013646:	d109      	bne.n	801365c <_strtoul_l.constprop.0+0x3c>
 8013648:	2c30      	cmp	r4, #48	@ 0x30
 801364a:	d12c      	bne.n	80136a6 <_strtoul_l.constprop.0+0x86>
 801364c:	7828      	ldrb	r0, [r5, #0]
 801364e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013652:	2858      	cmp	r0, #88	@ 0x58
 8013654:	d127      	bne.n	80136a6 <_strtoul_l.constprop.0+0x86>
 8013656:	786c      	ldrb	r4, [r5, #1]
 8013658:	2310      	movs	r3, #16
 801365a:	3502      	adds	r5, #2
 801365c:	f04f 38ff 	mov.w	r8, #4294967295
 8013660:	2600      	movs	r6, #0
 8013662:	fbb8 f8f3 	udiv	r8, r8, r3
 8013666:	fb03 f908 	mul.w	r9, r3, r8
 801366a:	ea6f 0909 	mvn.w	r9, r9
 801366e:	4630      	mov	r0, r6
 8013670:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013674:	f1bc 0f09 	cmp.w	ip, #9
 8013678:	d81c      	bhi.n	80136b4 <_strtoul_l.constprop.0+0x94>
 801367a:	4664      	mov	r4, ip
 801367c:	42a3      	cmp	r3, r4
 801367e:	dd2a      	ble.n	80136d6 <_strtoul_l.constprop.0+0xb6>
 8013680:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013684:	d007      	beq.n	8013696 <_strtoul_l.constprop.0+0x76>
 8013686:	4580      	cmp	r8, r0
 8013688:	d322      	bcc.n	80136d0 <_strtoul_l.constprop.0+0xb0>
 801368a:	d101      	bne.n	8013690 <_strtoul_l.constprop.0+0x70>
 801368c:	45a1      	cmp	r9, r4
 801368e:	db1f      	blt.n	80136d0 <_strtoul_l.constprop.0+0xb0>
 8013690:	fb00 4003 	mla	r0, r0, r3, r4
 8013694:	2601      	movs	r6, #1
 8013696:	f815 4b01 	ldrb.w	r4, [r5], #1
 801369a:	e7e9      	b.n	8013670 <_strtoul_l.constprop.0+0x50>
 801369c:	2c2b      	cmp	r4, #43	@ 0x2b
 801369e:	bf04      	itt	eq
 80136a0:	782c      	ldrbeq	r4, [r5, #0]
 80136a2:	1c85      	addeq	r5, r0, #2
 80136a4:	e7cd      	b.n	8013642 <_strtoul_l.constprop.0+0x22>
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d1d8      	bne.n	801365c <_strtoul_l.constprop.0+0x3c>
 80136aa:	2c30      	cmp	r4, #48	@ 0x30
 80136ac:	bf0c      	ite	eq
 80136ae:	2308      	moveq	r3, #8
 80136b0:	230a      	movne	r3, #10
 80136b2:	e7d3      	b.n	801365c <_strtoul_l.constprop.0+0x3c>
 80136b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80136b8:	f1bc 0f19 	cmp.w	ip, #25
 80136bc:	d801      	bhi.n	80136c2 <_strtoul_l.constprop.0+0xa2>
 80136be:	3c37      	subs	r4, #55	@ 0x37
 80136c0:	e7dc      	b.n	801367c <_strtoul_l.constprop.0+0x5c>
 80136c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80136c6:	f1bc 0f19 	cmp.w	ip, #25
 80136ca:	d804      	bhi.n	80136d6 <_strtoul_l.constprop.0+0xb6>
 80136cc:	3c57      	subs	r4, #87	@ 0x57
 80136ce:	e7d5      	b.n	801367c <_strtoul_l.constprop.0+0x5c>
 80136d0:	f04f 36ff 	mov.w	r6, #4294967295
 80136d4:	e7df      	b.n	8013696 <_strtoul_l.constprop.0+0x76>
 80136d6:	1c73      	adds	r3, r6, #1
 80136d8:	d106      	bne.n	80136e8 <_strtoul_l.constprop.0+0xc8>
 80136da:	2322      	movs	r3, #34	@ 0x22
 80136dc:	f8ce 3000 	str.w	r3, [lr]
 80136e0:	4630      	mov	r0, r6
 80136e2:	b932      	cbnz	r2, 80136f2 <_strtoul_l.constprop.0+0xd2>
 80136e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136e8:	b107      	cbz	r7, 80136ec <_strtoul_l.constprop.0+0xcc>
 80136ea:	4240      	negs	r0, r0
 80136ec:	2a00      	cmp	r2, #0
 80136ee:	d0f9      	beq.n	80136e4 <_strtoul_l.constprop.0+0xc4>
 80136f0:	b106      	cbz	r6, 80136f4 <_strtoul_l.constprop.0+0xd4>
 80136f2:	1e69      	subs	r1, r5, #1
 80136f4:	6011      	str	r1, [r2, #0]
 80136f6:	e7f5      	b.n	80136e4 <_strtoul_l.constprop.0+0xc4>
 80136f8:	080162e9 	.word	0x080162e9

080136fc <_strtoul_r>:
 80136fc:	f7ff bf90 	b.w	8013620 <_strtoul_l.constprop.0>

08013700 <__ascii_wctomb>:
 8013700:	4603      	mov	r3, r0
 8013702:	4608      	mov	r0, r1
 8013704:	b141      	cbz	r1, 8013718 <__ascii_wctomb+0x18>
 8013706:	2aff      	cmp	r2, #255	@ 0xff
 8013708:	d904      	bls.n	8013714 <__ascii_wctomb+0x14>
 801370a:	228a      	movs	r2, #138	@ 0x8a
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	f04f 30ff 	mov.w	r0, #4294967295
 8013712:	4770      	bx	lr
 8013714:	700a      	strb	r2, [r1, #0]
 8013716:	2001      	movs	r0, #1
 8013718:	4770      	bx	lr
	...

0801371c <fiprintf>:
 801371c:	b40e      	push	{r1, r2, r3}
 801371e:	b503      	push	{r0, r1, lr}
 8013720:	4601      	mov	r1, r0
 8013722:	ab03      	add	r3, sp, #12
 8013724:	4805      	ldr	r0, [pc, #20]	@ (801373c <fiprintf+0x20>)
 8013726:	f853 2b04 	ldr.w	r2, [r3], #4
 801372a:	6800      	ldr	r0, [r0, #0]
 801372c:	9301      	str	r3, [sp, #4]
 801372e:	f000 f83f 	bl	80137b0 <_vfiprintf_r>
 8013732:	b002      	add	sp, #8
 8013734:	f85d eb04 	ldr.w	lr, [sp], #4
 8013738:	b003      	add	sp, #12
 801373a:	4770      	bx	lr
 801373c:	20000050 	.word	0x20000050

08013740 <abort>:
 8013740:	b508      	push	{r3, lr}
 8013742:	2006      	movs	r0, #6
 8013744:	f000 fa08 	bl	8013b58 <raise>
 8013748:	2001      	movs	r0, #1
 801374a:	f7f4 f8b1 	bl	80078b0 <_exit>

0801374e <_malloc_usable_size_r>:
 801374e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013752:	1f18      	subs	r0, r3, #4
 8013754:	2b00      	cmp	r3, #0
 8013756:	bfbc      	itt	lt
 8013758:	580b      	ldrlt	r3, [r1, r0]
 801375a:	18c0      	addlt	r0, r0, r3
 801375c:	4770      	bx	lr

0801375e <__sfputc_r>:
 801375e:	6893      	ldr	r3, [r2, #8]
 8013760:	3b01      	subs	r3, #1
 8013762:	2b00      	cmp	r3, #0
 8013764:	b410      	push	{r4}
 8013766:	6093      	str	r3, [r2, #8]
 8013768:	da08      	bge.n	801377c <__sfputc_r+0x1e>
 801376a:	6994      	ldr	r4, [r2, #24]
 801376c:	42a3      	cmp	r3, r4
 801376e:	db01      	blt.n	8013774 <__sfputc_r+0x16>
 8013770:	290a      	cmp	r1, #10
 8013772:	d103      	bne.n	801377c <__sfputc_r+0x1e>
 8013774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013778:	f000 b932 	b.w	80139e0 <__swbuf_r>
 801377c:	6813      	ldr	r3, [r2, #0]
 801377e:	1c58      	adds	r0, r3, #1
 8013780:	6010      	str	r0, [r2, #0]
 8013782:	7019      	strb	r1, [r3, #0]
 8013784:	4608      	mov	r0, r1
 8013786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801378a:	4770      	bx	lr

0801378c <__sfputs_r>:
 801378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378e:	4606      	mov	r6, r0
 8013790:	460f      	mov	r7, r1
 8013792:	4614      	mov	r4, r2
 8013794:	18d5      	adds	r5, r2, r3
 8013796:	42ac      	cmp	r4, r5
 8013798:	d101      	bne.n	801379e <__sfputs_r+0x12>
 801379a:	2000      	movs	r0, #0
 801379c:	e007      	b.n	80137ae <__sfputs_r+0x22>
 801379e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137a2:	463a      	mov	r2, r7
 80137a4:	4630      	mov	r0, r6
 80137a6:	f7ff ffda 	bl	801375e <__sfputc_r>
 80137aa:	1c43      	adds	r3, r0, #1
 80137ac:	d1f3      	bne.n	8013796 <__sfputs_r+0xa>
 80137ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080137b0 <_vfiprintf_r>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	460d      	mov	r5, r1
 80137b6:	b09d      	sub	sp, #116	@ 0x74
 80137b8:	4614      	mov	r4, r2
 80137ba:	4698      	mov	r8, r3
 80137bc:	4606      	mov	r6, r0
 80137be:	b118      	cbz	r0, 80137c8 <_vfiprintf_r+0x18>
 80137c0:	6a03      	ldr	r3, [r0, #32]
 80137c2:	b90b      	cbnz	r3, 80137c8 <_vfiprintf_r+0x18>
 80137c4:	f7fc fa66 	bl	800fc94 <__sinit>
 80137c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137ca:	07d9      	lsls	r1, r3, #31
 80137cc:	d405      	bmi.n	80137da <_vfiprintf_r+0x2a>
 80137ce:	89ab      	ldrh	r3, [r5, #12]
 80137d0:	059a      	lsls	r2, r3, #22
 80137d2:	d402      	bmi.n	80137da <_vfiprintf_r+0x2a>
 80137d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137d6:	f7fc fbd6 	bl	800ff86 <__retarget_lock_acquire_recursive>
 80137da:	89ab      	ldrh	r3, [r5, #12]
 80137dc:	071b      	lsls	r3, r3, #28
 80137de:	d501      	bpl.n	80137e4 <_vfiprintf_r+0x34>
 80137e0:	692b      	ldr	r3, [r5, #16]
 80137e2:	b99b      	cbnz	r3, 801380c <_vfiprintf_r+0x5c>
 80137e4:	4629      	mov	r1, r5
 80137e6:	4630      	mov	r0, r6
 80137e8:	f000 f938 	bl	8013a5c <__swsetup_r>
 80137ec:	b170      	cbz	r0, 801380c <_vfiprintf_r+0x5c>
 80137ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137f0:	07dc      	lsls	r4, r3, #31
 80137f2:	d504      	bpl.n	80137fe <_vfiprintf_r+0x4e>
 80137f4:	f04f 30ff 	mov.w	r0, #4294967295
 80137f8:	b01d      	add	sp, #116	@ 0x74
 80137fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fe:	89ab      	ldrh	r3, [r5, #12]
 8013800:	0598      	lsls	r0, r3, #22
 8013802:	d4f7      	bmi.n	80137f4 <_vfiprintf_r+0x44>
 8013804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013806:	f7fc fbbf 	bl	800ff88 <__retarget_lock_release_recursive>
 801380a:	e7f3      	b.n	80137f4 <_vfiprintf_r+0x44>
 801380c:	2300      	movs	r3, #0
 801380e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013810:	2320      	movs	r3, #32
 8013812:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013816:	f8cd 800c 	str.w	r8, [sp, #12]
 801381a:	2330      	movs	r3, #48	@ 0x30
 801381c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80139cc <_vfiprintf_r+0x21c>
 8013820:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013824:	f04f 0901 	mov.w	r9, #1
 8013828:	4623      	mov	r3, r4
 801382a:	469a      	mov	sl, r3
 801382c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013830:	b10a      	cbz	r2, 8013836 <_vfiprintf_r+0x86>
 8013832:	2a25      	cmp	r2, #37	@ 0x25
 8013834:	d1f9      	bne.n	801382a <_vfiprintf_r+0x7a>
 8013836:	ebba 0b04 	subs.w	fp, sl, r4
 801383a:	d00b      	beq.n	8013854 <_vfiprintf_r+0xa4>
 801383c:	465b      	mov	r3, fp
 801383e:	4622      	mov	r2, r4
 8013840:	4629      	mov	r1, r5
 8013842:	4630      	mov	r0, r6
 8013844:	f7ff ffa2 	bl	801378c <__sfputs_r>
 8013848:	3001      	adds	r0, #1
 801384a:	f000 80a7 	beq.w	801399c <_vfiprintf_r+0x1ec>
 801384e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013850:	445a      	add	r2, fp
 8013852:	9209      	str	r2, [sp, #36]	@ 0x24
 8013854:	f89a 3000 	ldrb.w	r3, [sl]
 8013858:	2b00      	cmp	r3, #0
 801385a:	f000 809f 	beq.w	801399c <_vfiprintf_r+0x1ec>
 801385e:	2300      	movs	r3, #0
 8013860:	f04f 32ff 	mov.w	r2, #4294967295
 8013864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013868:	f10a 0a01 	add.w	sl, sl, #1
 801386c:	9304      	str	r3, [sp, #16]
 801386e:	9307      	str	r3, [sp, #28]
 8013870:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013874:	931a      	str	r3, [sp, #104]	@ 0x68
 8013876:	4654      	mov	r4, sl
 8013878:	2205      	movs	r2, #5
 801387a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801387e:	4853      	ldr	r0, [pc, #332]	@ (80139cc <_vfiprintf_r+0x21c>)
 8013880:	f7ec fcc6 	bl	8000210 <memchr>
 8013884:	9a04      	ldr	r2, [sp, #16]
 8013886:	b9d8      	cbnz	r0, 80138c0 <_vfiprintf_r+0x110>
 8013888:	06d1      	lsls	r1, r2, #27
 801388a:	bf44      	itt	mi
 801388c:	2320      	movmi	r3, #32
 801388e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013892:	0713      	lsls	r3, r2, #28
 8013894:	bf44      	itt	mi
 8013896:	232b      	movmi	r3, #43	@ 0x2b
 8013898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801389c:	f89a 3000 	ldrb.w	r3, [sl]
 80138a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80138a2:	d015      	beq.n	80138d0 <_vfiprintf_r+0x120>
 80138a4:	9a07      	ldr	r2, [sp, #28]
 80138a6:	4654      	mov	r4, sl
 80138a8:	2000      	movs	r0, #0
 80138aa:	f04f 0c0a 	mov.w	ip, #10
 80138ae:	4621      	mov	r1, r4
 80138b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138b4:	3b30      	subs	r3, #48	@ 0x30
 80138b6:	2b09      	cmp	r3, #9
 80138b8:	d94b      	bls.n	8013952 <_vfiprintf_r+0x1a2>
 80138ba:	b1b0      	cbz	r0, 80138ea <_vfiprintf_r+0x13a>
 80138bc:	9207      	str	r2, [sp, #28]
 80138be:	e014      	b.n	80138ea <_vfiprintf_r+0x13a>
 80138c0:	eba0 0308 	sub.w	r3, r0, r8
 80138c4:	fa09 f303 	lsl.w	r3, r9, r3
 80138c8:	4313      	orrs	r3, r2
 80138ca:	9304      	str	r3, [sp, #16]
 80138cc:	46a2      	mov	sl, r4
 80138ce:	e7d2      	b.n	8013876 <_vfiprintf_r+0xc6>
 80138d0:	9b03      	ldr	r3, [sp, #12]
 80138d2:	1d19      	adds	r1, r3, #4
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	9103      	str	r1, [sp, #12]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	bfbb      	ittet	lt
 80138dc:	425b      	neglt	r3, r3
 80138de:	f042 0202 	orrlt.w	r2, r2, #2
 80138e2:	9307      	strge	r3, [sp, #28]
 80138e4:	9307      	strlt	r3, [sp, #28]
 80138e6:	bfb8      	it	lt
 80138e8:	9204      	strlt	r2, [sp, #16]
 80138ea:	7823      	ldrb	r3, [r4, #0]
 80138ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80138ee:	d10a      	bne.n	8013906 <_vfiprintf_r+0x156>
 80138f0:	7863      	ldrb	r3, [r4, #1]
 80138f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80138f4:	d132      	bne.n	801395c <_vfiprintf_r+0x1ac>
 80138f6:	9b03      	ldr	r3, [sp, #12]
 80138f8:	1d1a      	adds	r2, r3, #4
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	9203      	str	r2, [sp, #12]
 80138fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013902:	3402      	adds	r4, #2
 8013904:	9305      	str	r3, [sp, #20]
 8013906:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80139dc <_vfiprintf_r+0x22c>
 801390a:	7821      	ldrb	r1, [r4, #0]
 801390c:	2203      	movs	r2, #3
 801390e:	4650      	mov	r0, sl
 8013910:	f7ec fc7e 	bl	8000210 <memchr>
 8013914:	b138      	cbz	r0, 8013926 <_vfiprintf_r+0x176>
 8013916:	9b04      	ldr	r3, [sp, #16]
 8013918:	eba0 000a 	sub.w	r0, r0, sl
 801391c:	2240      	movs	r2, #64	@ 0x40
 801391e:	4082      	lsls	r2, r0
 8013920:	4313      	orrs	r3, r2
 8013922:	3401      	adds	r4, #1
 8013924:	9304      	str	r3, [sp, #16]
 8013926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801392a:	4829      	ldr	r0, [pc, #164]	@ (80139d0 <_vfiprintf_r+0x220>)
 801392c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013930:	2206      	movs	r2, #6
 8013932:	f7ec fc6d 	bl	8000210 <memchr>
 8013936:	2800      	cmp	r0, #0
 8013938:	d03f      	beq.n	80139ba <_vfiprintf_r+0x20a>
 801393a:	4b26      	ldr	r3, [pc, #152]	@ (80139d4 <_vfiprintf_r+0x224>)
 801393c:	bb1b      	cbnz	r3, 8013986 <_vfiprintf_r+0x1d6>
 801393e:	9b03      	ldr	r3, [sp, #12]
 8013940:	3307      	adds	r3, #7
 8013942:	f023 0307 	bic.w	r3, r3, #7
 8013946:	3308      	adds	r3, #8
 8013948:	9303      	str	r3, [sp, #12]
 801394a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801394c:	443b      	add	r3, r7
 801394e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013950:	e76a      	b.n	8013828 <_vfiprintf_r+0x78>
 8013952:	fb0c 3202 	mla	r2, ip, r2, r3
 8013956:	460c      	mov	r4, r1
 8013958:	2001      	movs	r0, #1
 801395a:	e7a8      	b.n	80138ae <_vfiprintf_r+0xfe>
 801395c:	2300      	movs	r3, #0
 801395e:	3401      	adds	r4, #1
 8013960:	9305      	str	r3, [sp, #20]
 8013962:	4619      	mov	r1, r3
 8013964:	f04f 0c0a 	mov.w	ip, #10
 8013968:	4620      	mov	r0, r4
 801396a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801396e:	3a30      	subs	r2, #48	@ 0x30
 8013970:	2a09      	cmp	r2, #9
 8013972:	d903      	bls.n	801397c <_vfiprintf_r+0x1cc>
 8013974:	2b00      	cmp	r3, #0
 8013976:	d0c6      	beq.n	8013906 <_vfiprintf_r+0x156>
 8013978:	9105      	str	r1, [sp, #20]
 801397a:	e7c4      	b.n	8013906 <_vfiprintf_r+0x156>
 801397c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013980:	4604      	mov	r4, r0
 8013982:	2301      	movs	r3, #1
 8013984:	e7f0      	b.n	8013968 <_vfiprintf_r+0x1b8>
 8013986:	ab03      	add	r3, sp, #12
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	462a      	mov	r2, r5
 801398c:	4b12      	ldr	r3, [pc, #72]	@ (80139d8 <_vfiprintf_r+0x228>)
 801398e:	a904      	add	r1, sp, #16
 8013990:	4630      	mov	r0, r6
 8013992:	f7fb fb27 	bl	800efe4 <_printf_float>
 8013996:	4607      	mov	r7, r0
 8013998:	1c78      	adds	r0, r7, #1
 801399a:	d1d6      	bne.n	801394a <_vfiprintf_r+0x19a>
 801399c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801399e:	07d9      	lsls	r1, r3, #31
 80139a0:	d405      	bmi.n	80139ae <_vfiprintf_r+0x1fe>
 80139a2:	89ab      	ldrh	r3, [r5, #12]
 80139a4:	059a      	lsls	r2, r3, #22
 80139a6:	d402      	bmi.n	80139ae <_vfiprintf_r+0x1fe>
 80139a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139aa:	f7fc faed 	bl	800ff88 <__retarget_lock_release_recursive>
 80139ae:	89ab      	ldrh	r3, [r5, #12]
 80139b0:	065b      	lsls	r3, r3, #25
 80139b2:	f53f af1f 	bmi.w	80137f4 <_vfiprintf_r+0x44>
 80139b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139b8:	e71e      	b.n	80137f8 <_vfiprintf_r+0x48>
 80139ba:	ab03      	add	r3, sp, #12
 80139bc:	9300      	str	r3, [sp, #0]
 80139be:	462a      	mov	r2, r5
 80139c0:	4b05      	ldr	r3, [pc, #20]	@ (80139d8 <_vfiprintf_r+0x228>)
 80139c2:	a904      	add	r1, sp, #16
 80139c4:	4630      	mov	r0, r6
 80139c6:	f7fb fda5 	bl	800f514 <_printf_i>
 80139ca:	e7e4      	b.n	8013996 <_vfiprintf_r+0x1e6>
 80139cc:	080163e9 	.word	0x080163e9
 80139d0:	080163f3 	.word	0x080163f3
 80139d4:	0800efe5 	.word	0x0800efe5
 80139d8:	0801378d 	.word	0x0801378d
 80139dc:	080163ef 	.word	0x080163ef

080139e0 <__swbuf_r>:
 80139e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e2:	460e      	mov	r6, r1
 80139e4:	4614      	mov	r4, r2
 80139e6:	4605      	mov	r5, r0
 80139e8:	b118      	cbz	r0, 80139f2 <__swbuf_r+0x12>
 80139ea:	6a03      	ldr	r3, [r0, #32]
 80139ec:	b90b      	cbnz	r3, 80139f2 <__swbuf_r+0x12>
 80139ee:	f7fc f951 	bl	800fc94 <__sinit>
 80139f2:	69a3      	ldr	r3, [r4, #24]
 80139f4:	60a3      	str	r3, [r4, #8]
 80139f6:	89a3      	ldrh	r3, [r4, #12]
 80139f8:	071a      	lsls	r2, r3, #28
 80139fa:	d501      	bpl.n	8013a00 <__swbuf_r+0x20>
 80139fc:	6923      	ldr	r3, [r4, #16]
 80139fe:	b943      	cbnz	r3, 8013a12 <__swbuf_r+0x32>
 8013a00:	4621      	mov	r1, r4
 8013a02:	4628      	mov	r0, r5
 8013a04:	f000 f82a 	bl	8013a5c <__swsetup_r>
 8013a08:	b118      	cbz	r0, 8013a12 <__swbuf_r+0x32>
 8013a0a:	f04f 37ff 	mov.w	r7, #4294967295
 8013a0e:	4638      	mov	r0, r7
 8013a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	6922      	ldr	r2, [r4, #16]
 8013a16:	1a98      	subs	r0, r3, r2
 8013a18:	6963      	ldr	r3, [r4, #20]
 8013a1a:	b2f6      	uxtb	r6, r6
 8013a1c:	4283      	cmp	r3, r0
 8013a1e:	4637      	mov	r7, r6
 8013a20:	dc05      	bgt.n	8013a2e <__swbuf_r+0x4e>
 8013a22:	4621      	mov	r1, r4
 8013a24:	4628      	mov	r0, r5
 8013a26:	f7ff f993 	bl	8012d50 <_fflush_r>
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d1ed      	bne.n	8013a0a <__swbuf_r+0x2a>
 8013a2e:	68a3      	ldr	r3, [r4, #8]
 8013a30:	3b01      	subs	r3, #1
 8013a32:	60a3      	str	r3, [r4, #8]
 8013a34:	6823      	ldr	r3, [r4, #0]
 8013a36:	1c5a      	adds	r2, r3, #1
 8013a38:	6022      	str	r2, [r4, #0]
 8013a3a:	701e      	strb	r6, [r3, #0]
 8013a3c:	6962      	ldr	r2, [r4, #20]
 8013a3e:	1c43      	adds	r3, r0, #1
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d004      	beq.n	8013a4e <__swbuf_r+0x6e>
 8013a44:	89a3      	ldrh	r3, [r4, #12]
 8013a46:	07db      	lsls	r3, r3, #31
 8013a48:	d5e1      	bpl.n	8013a0e <__swbuf_r+0x2e>
 8013a4a:	2e0a      	cmp	r6, #10
 8013a4c:	d1df      	bne.n	8013a0e <__swbuf_r+0x2e>
 8013a4e:	4621      	mov	r1, r4
 8013a50:	4628      	mov	r0, r5
 8013a52:	f7ff f97d 	bl	8012d50 <_fflush_r>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d0d9      	beq.n	8013a0e <__swbuf_r+0x2e>
 8013a5a:	e7d6      	b.n	8013a0a <__swbuf_r+0x2a>

08013a5c <__swsetup_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4b29      	ldr	r3, [pc, #164]	@ (8013b04 <__swsetup_r+0xa8>)
 8013a60:	4605      	mov	r5, r0
 8013a62:	6818      	ldr	r0, [r3, #0]
 8013a64:	460c      	mov	r4, r1
 8013a66:	b118      	cbz	r0, 8013a70 <__swsetup_r+0x14>
 8013a68:	6a03      	ldr	r3, [r0, #32]
 8013a6a:	b90b      	cbnz	r3, 8013a70 <__swsetup_r+0x14>
 8013a6c:	f7fc f912 	bl	800fc94 <__sinit>
 8013a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a74:	0719      	lsls	r1, r3, #28
 8013a76:	d422      	bmi.n	8013abe <__swsetup_r+0x62>
 8013a78:	06da      	lsls	r2, r3, #27
 8013a7a:	d407      	bmi.n	8013a8c <__swsetup_r+0x30>
 8013a7c:	2209      	movs	r2, #9
 8013a7e:	602a      	str	r2, [r5, #0]
 8013a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a84:	81a3      	strh	r3, [r4, #12]
 8013a86:	f04f 30ff 	mov.w	r0, #4294967295
 8013a8a:	e033      	b.n	8013af4 <__swsetup_r+0x98>
 8013a8c:	0758      	lsls	r0, r3, #29
 8013a8e:	d512      	bpl.n	8013ab6 <__swsetup_r+0x5a>
 8013a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a92:	b141      	cbz	r1, 8013aa6 <__swsetup_r+0x4a>
 8013a94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a98:	4299      	cmp	r1, r3
 8013a9a:	d002      	beq.n	8013aa2 <__swsetup_r+0x46>
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f7fd f8d7 	bl	8010c50 <_free_r>
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013aac:	81a3      	strh	r3, [r4, #12]
 8013aae:	2300      	movs	r3, #0
 8013ab0:	6063      	str	r3, [r4, #4]
 8013ab2:	6923      	ldr	r3, [r4, #16]
 8013ab4:	6023      	str	r3, [r4, #0]
 8013ab6:	89a3      	ldrh	r3, [r4, #12]
 8013ab8:	f043 0308 	orr.w	r3, r3, #8
 8013abc:	81a3      	strh	r3, [r4, #12]
 8013abe:	6923      	ldr	r3, [r4, #16]
 8013ac0:	b94b      	cbnz	r3, 8013ad6 <__swsetup_r+0x7a>
 8013ac2:	89a3      	ldrh	r3, [r4, #12]
 8013ac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013acc:	d003      	beq.n	8013ad6 <__swsetup_r+0x7a>
 8013ace:	4621      	mov	r1, r4
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	f000 f883 	bl	8013bdc <__smakebuf_r>
 8013ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ada:	f013 0201 	ands.w	r2, r3, #1
 8013ade:	d00a      	beq.n	8013af6 <__swsetup_r+0x9a>
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	60a2      	str	r2, [r4, #8]
 8013ae4:	6962      	ldr	r2, [r4, #20]
 8013ae6:	4252      	negs	r2, r2
 8013ae8:	61a2      	str	r2, [r4, #24]
 8013aea:	6922      	ldr	r2, [r4, #16]
 8013aec:	b942      	cbnz	r2, 8013b00 <__swsetup_r+0xa4>
 8013aee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013af2:	d1c5      	bne.n	8013a80 <__swsetup_r+0x24>
 8013af4:	bd38      	pop	{r3, r4, r5, pc}
 8013af6:	0799      	lsls	r1, r3, #30
 8013af8:	bf58      	it	pl
 8013afa:	6962      	ldrpl	r2, [r4, #20]
 8013afc:	60a2      	str	r2, [r4, #8]
 8013afe:	e7f4      	b.n	8013aea <__swsetup_r+0x8e>
 8013b00:	2000      	movs	r0, #0
 8013b02:	e7f7      	b.n	8013af4 <__swsetup_r+0x98>
 8013b04:	20000050 	.word	0x20000050

08013b08 <_raise_r>:
 8013b08:	291f      	cmp	r1, #31
 8013b0a:	b538      	push	{r3, r4, r5, lr}
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	d904      	bls.n	8013b1c <_raise_r+0x14>
 8013b12:	2316      	movs	r3, #22
 8013b14:	6003      	str	r3, [r0, #0]
 8013b16:	f04f 30ff 	mov.w	r0, #4294967295
 8013b1a:	bd38      	pop	{r3, r4, r5, pc}
 8013b1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b1e:	b112      	cbz	r2, 8013b26 <_raise_r+0x1e>
 8013b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b24:	b94b      	cbnz	r3, 8013b3a <_raise_r+0x32>
 8013b26:	4628      	mov	r0, r5
 8013b28:	f000 f830 	bl	8013b8c <_getpid_r>
 8013b2c:	4622      	mov	r2, r4
 8013b2e:	4601      	mov	r1, r0
 8013b30:	4628      	mov	r0, r5
 8013b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b36:	f000 b817 	b.w	8013b68 <_kill_r>
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d00a      	beq.n	8013b54 <_raise_r+0x4c>
 8013b3e:	1c59      	adds	r1, r3, #1
 8013b40:	d103      	bne.n	8013b4a <_raise_r+0x42>
 8013b42:	2316      	movs	r3, #22
 8013b44:	6003      	str	r3, [r0, #0]
 8013b46:	2001      	movs	r0, #1
 8013b48:	e7e7      	b.n	8013b1a <_raise_r+0x12>
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b50:	4620      	mov	r0, r4
 8013b52:	4798      	blx	r3
 8013b54:	2000      	movs	r0, #0
 8013b56:	e7e0      	b.n	8013b1a <_raise_r+0x12>

08013b58 <raise>:
 8013b58:	4b02      	ldr	r3, [pc, #8]	@ (8013b64 <raise+0xc>)
 8013b5a:	4601      	mov	r1, r0
 8013b5c:	6818      	ldr	r0, [r3, #0]
 8013b5e:	f7ff bfd3 	b.w	8013b08 <_raise_r>
 8013b62:	bf00      	nop
 8013b64:	20000050 	.word	0x20000050

08013b68 <_kill_r>:
 8013b68:	b538      	push	{r3, r4, r5, lr}
 8013b6a:	4d07      	ldr	r5, [pc, #28]	@ (8013b88 <_kill_r+0x20>)
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	4604      	mov	r4, r0
 8013b70:	4608      	mov	r0, r1
 8013b72:	4611      	mov	r1, r2
 8013b74:	602b      	str	r3, [r5, #0]
 8013b76:	f7f3 fe8b 	bl	8007890 <_kill>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	d102      	bne.n	8013b84 <_kill_r+0x1c>
 8013b7e:	682b      	ldr	r3, [r5, #0]
 8013b80:	b103      	cbz	r3, 8013b84 <_kill_r+0x1c>
 8013b82:	6023      	str	r3, [r4, #0]
 8013b84:	bd38      	pop	{r3, r4, r5, pc}
 8013b86:	bf00      	nop
 8013b88:	200018f4 	.word	0x200018f4

08013b8c <_getpid_r>:
 8013b8c:	f7f3 be78 	b.w	8007880 <_getpid>

08013b90 <__swhatbuf_r>:
 8013b90:	b570      	push	{r4, r5, r6, lr}
 8013b92:	460c      	mov	r4, r1
 8013b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b98:	2900      	cmp	r1, #0
 8013b9a:	b096      	sub	sp, #88	@ 0x58
 8013b9c:	4615      	mov	r5, r2
 8013b9e:	461e      	mov	r6, r3
 8013ba0:	da0d      	bge.n	8013bbe <__swhatbuf_r+0x2e>
 8013ba2:	89a3      	ldrh	r3, [r4, #12]
 8013ba4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013ba8:	f04f 0100 	mov.w	r1, #0
 8013bac:	bf14      	ite	ne
 8013bae:	2340      	movne	r3, #64	@ 0x40
 8013bb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	6031      	str	r1, [r6, #0]
 8013bb8:	602b      	str	r3, [r5, #0]
 8013bba:	b016      	add	sp, #88	@ 0x58
 8013bbc:	bd70      	pop	{r4, r5, r6, pc}
 8013bbe:	466a      	mov	r2, sp
 8013bc0:	f000 f848 	bl	8013c54 <_fstat_r>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	dbec      	blt.n	8013ba2 <__swhatbuf_r+0x12>
 8013bc8:	9901      	ldr	r1, [sp, #4]
 8013bca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013bce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013bd2:	4259      	negs	r1, r3
 8013bd4:	4159      	adcs	r1, r3
 8013bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013bda:	e7eb      	b.n	8013bb4 <__swhatbuf_r+0x24>

08013bdc <__smakebuf_r>:
 8013bdc:	898b      	ldrh	r3, [r1, #12]
 8013bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013be0:	079d      	lsls	r5, r3, #30
 8013be2:	4606      	mov	r6, r0
 8013be4:	460c      	mov	r4, r1
 8013be6:	d507      	bpl.n	8013bf8 <__smakebuf_r+0x1c>
 8013be8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013bec:	6023      	str	r3, [r4, #0]
 8013bee:	6123      	str	r3, [r4, #16]
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	6163      	str	r3, [r4, #20]
 8013bf4:	b003      	add	sp, #12
 8013bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf8:	ab01      	add	r3, sp, #4
 8013bfa:	466a      	mov	r2, sp
 8013bfc:	f7ff ffc8 	bl	8013b90 <__swhatbuf_r>
 8013c00:	9f00      	ldr	r7, [sp, #0]
 8013c02:	4605      	mov	r5, r0
 8013c04:	4639      	mov	r1, r7
 8013c06:	4630      	mov	r0, r6
 8013c08:	f7fb f8c0 	bl	800ed8c <_malloc_r>
 8013c0c:	b948      	cbnz	r0, 8013c22 <__smakebuf_r+0x46>
 8013c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c12:	059a      	lsls	r2, r3, #22
 8013c14:	d4ee      	bmi.n	8013bf4 <__smakebuf_r+0x18>
 8013c16:	f023 0303 	bic.w	r3, r3, #3
 8013c1a:	f043 0302 	orr.w	r3, r3, #2
 8013c1e:	81a3      	strh	r3, [r4, #12]
 8013c20:	e7e2      	b.n	8013be8 <__smakebuf_r+0xc>
 8013c22:	89a3      	ldrh	r3, [r4, #12]
 8013c24:	6020      	str	r0, [r4, #0]
 8013c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c2a:	81a3      	strh	r3, [r4, #12]
 8013c2c:	9b01      	ldr	r3, [sp, #4]
 8013c2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c32:	b15b      	cbz	r3, 8013c4c <__smakebuf_r+0x70>
 8013c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c38:	4630      	mov	r0, r6
 8013c3a:	f000 f81d 	bl	8013c78 <_isatty_r>
 8013c3e:	b128      	cbz	r0, 8013c4c <__smakebuf_r+0x70>
 8013c40:	89a3      	ldrh	r3, [r4, #12]
 8013c42:	f023 0303 	bic.w	r3, r3, #3
 8013c46:	f043 0301 	orr.w	r3, r3, #1
 8013c4a:	81a3      	strh	r3, [r4, #12]
 8013c4c:	89a3      	ldrh	r3, [r4, #12]
 8013c4e:	431d      	orrs	r5, r3
 8013c50:	81a5      	strh	r5, [r4, #12]
 8013c52:	e7cf      	b.n	8013bf4 <__smakebuf_r+0x18>

08013c54 <_fstat_r>:
 8013c54:	b538      	push	{r3, r4, r5, lr}
 8013c56:	4d07      	ldr	r5, [pc, #28]	@ (8013c74 <_fstat_r+0x20>)
 8013c58:	2300      	movs	r3, #0
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	4608      	mov	r0, r1
 8013c5e:	4611      	mov	r1, r2
 8013c60:	602b      	str	r3, [r5, #0]
 8013c62:	f7f3 fe75 	bl	8007950 <_fstat>
 8013c66:	1c43      	adds	r3, r0, #1
 8013c68:	d102      	bne.n	8013c70 <_fstat_r+0x1c>
 8013c6a:	682b      	ldr	r3, [r5, #0]
 8013c6c:	b103      	cbz	r3, 8013c70 <_fstat_r+0x1c>
 8013c6e:	6023      	str	r3, [r4, #0]
 8013c70:	bd38      	pop	{r3, r4, r5, pc}
 8013c72:	bf00      	nop
 8013c74:	200018f4 	.word	0x200018f4

08013c78 <_isatty_r>:
 8013c78:	b538      	push	{r3, r4, r5, lr}
 8013c7a:	4d06      	ldr	r5, [pc, #24]	@ (8013c94 <_isatty_r+0x1c>)
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	4604      	mov	r4, r0
 8013c80:	4608      	mov	r0, r1
 8013c82:	602b      	str	r3, [r5, #0]
 8013c84:	f7f3 fe74 	bl	8007970 <_isatty>
 8013c88:	1c43      	adds	r3, r0, #1
 8013c8a:	d102      	bne.n	8013c92 <_isatty_r+0x1a>
 8013c8c:	682b      	ldr	r3, [r5, #0]
 8013c8e:	b103      	cbz	r3, 8013c92 <_isatty_r+0x1a>
 8013c90:	6023      	str	r3, [r4, #0]
 8013c92:	bd38      	pop	{r3, r4, r5, pc}
 8013c94:	200018f4 	.word	0x200018f4

08013c98 <pow>:
 8013c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c9a:	ed2d 8b02 	vpush	{d8}
 8013c9e:	eeb0 8a40 	vmov.f32	s16, s0
 8013ca2:	eef0 8a60 	vmov.f32	s17, s1
 8013ca6:	ec55 4b11 	vmov	r4, r5, d1
 8013caa:	f000 fc75 	bl	8014598 <__ieee754_pow>
 8013cae:	4622      	mov	r2, r4
 8013cb0:	462b      	mov	r3, r5
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	4629      	mov	r1, r5
 8013cb6:	ec57 6b10 	vmov	r6, r7, d0
 8013cba:	f7ec ff57 	bl	8000b6c <__aeabi_dcmpun>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d13b      	bne.n	8013d3a <pow+0xa2>
 8013cc2:	ec51 0b18 	vmov	r0, r1, d8
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	2300      	movs	r3, #0
 8013cca:	f7ec ff1d 	bl	8000b08 <__aeabi_dcmpeq>
 8013cce:	b1b8      	cbz	r0, 8013d00 <pow+0x68>
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	4629      	mov	r1, r5
 8013cd8:	f7ec ff16 	bl	8000b08 <__aeabi_dcmpeq>
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	d146      	bne.n	8013d6e <pow+0xd6>
 8013ce0:	ec45 4b10 	vmov	d0, r4, r5
 8013ce4:	f000 f919 	bl	8013f1a <finite>
 8013ce8:	b338      	cbz	r0, 8013d3a <pow+0xa2>
 8013cea:	2200      	movs	r2, #0
 8013cec:	2300      	movs	r3, #0
 8013cee:	4620      	mov	r0, r4
 8013cf0:	4629      	mov	r1, r5
 8013cf2:	f7ec ff13 	bl	8000b1c <__aeabi_dcmplt>
 8013cf6:	b300      	cbz	r0, 8013d3a <pow+0xa2>
 8013cf8:	f7fc f91a 	bl	800ff30 <__errno>
 8013cfc:	2322      	movs	r3, #34	@ 0x22
 8013cfe:	e01b      	b.n	8013d38 <pow+0xa0>
 8013d00:	ec47 6b10 	vmov	d0, r6, r7
 8013d04:	f000 f909 	bl	8013f1a <finite>
 8013d08:	b9e0      	cbnz	r0, 8013d44 <pow+0xac>
 8013d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8013d0e:	eef0 0a68 	vmov.f32	s1, s17
 8013d12:	f000 f902 	bl	8013f1a <finite>
 8013d16:	b1a8      	cbz	r0, 8013d44 <pow+0xac>
 8013d18:	ec45 4b10 	vmov	d0, r4, r5
 8013d1c:	f000 f8fd 	bl	8013f1a <finite>
 8013d20:	b180      	cbz	r0, 8013d44 <pow+0xac>
 8013d22:	4632      	mov	r2, r6
 8013d24:	463b      	mov	r3, r7
 8013d26:	4630      	mov	r0, r6
 8013d28:	4639      	mov	r1, r7
 8013d2a:	f7ec ff1f 	bl	8000b6c <__aeabi_dcmpun>
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d0e2      	beq.n	8013cf8 <pow+0x60>
 8013d32:	f7fc f8fd 	bl	800ff30 <__errno>
 8013d36:	2321      	movs	r3, #33	@ 0x21
 8013d38:	6003      	str	r3, [r0, #0]
 8013d3a:	ecbd 8b02 	vpop	{d8}
 8013d3e:	ec47 6b10 	vmov	d0, r6, r7
 8013d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d44:	2200      	movs	r2, #0
 8013d46:	2300      	movs	r3, #0
 8013d48:	4630      	mov	r0, r6
 8013d4a:	4639      	mov	r1, r7
 8013d4c:	f7ec fedc 	bl	8000b08 <__aeabi_dcmpeq>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d0f2      	beq.n	8013d3a <pow+0xa2>
 8013d54:	eeb0 0a48 	vmov.f32	s0, s16
 8013d58:	eef0 0a68 	vmov.f32	s1, s17
 8013d5c:	f000 f8dd 	bl	8013f1a <finite>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d0ea      	beq.n	8013d3a <pow+0xa2>
 8013d64:	ec45 4b10 	vmov	d0, r4, r5
 8013d68:	f000 f8d7 	bl	8013f1a <finite>
 8013d6c:	e7c3      	b.n	8013cf6 <pow+0x5e>
 8013d6e:	4f01      	ldr	r7, [pc, #4]	@ (8013d74 <pow+0xdc>)
 8013d70:	2600      	movs	r6, #0
 8013d72:	e7e2      	b.n	8013d3a <pow+0xa2>
 8013d74:	3ff00000 	.word	0x3ff00000

08013d78 <sqrt>:
 8013d78:	b538      	push	{r3, r4, r5, lr}
 8013d7a:	ed2d 8b02 	vpush	{d8}
 8013d7e:	ec55 4b10 	vmov	r4, r5, d0
 8013d82:	f000 f92b 	bl	8013fdc <__ieee754_sqrt>
 8013d86:	4622      	mov	r2, r4
 8013d88:	462b      	mov	r3, r5
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	eeb0 8a40 	vmov.f32	s16, s0
 8013d92:	eef0 8a60 	vmov.f32	s17, s1
 8013d96:	f7ec fee9 	bl	8000b6c <__aeabi_dcmpun>
 8013d9a:	b990      	cbnz	r0, 8013dc2 <sqrt+0x4a>
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	2300      	movs	r3, #0
 8013da0:	4620      	mov	r0, r4
 8013da2:	4629      	mov	r1, r5
 8013da4:	f7ec feba 	bl	8000b1c <__aeabi_dcmplt>
 8013da8:	b158      	cbz	r0, 8013dc2 <sqrt+0x4a>
 8013daa:	f7fc f8c1 	bl	800ff30 <__errno>
 8013dae:	2321      	movs	r3, #33	@ 0x21
 8013db0:	6003      	str	r3, [r0, #0]
 8013db2:	2200      	movs	r2, #0
 8013db4:	2300      	movs	r3, #0
 8013db6:	4610      	mov	r0, r2
 8013db8:	4619      	mov	r1, r3
 8013dba:	f7ec fd67 	bl	800088c <__aeabi_ddiv>
 8013dbe:	ec41 0b18 	vmov	d8, r0, r1
 8013dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8013dc6:	eef0 0a68 	vmov.f32	s1, s17
 8013dca:	ecbd 8b02 	vpop	{d8}
 8013dce:	bd38      	pop	{r3, r4, r5, pc}

08013dd0 <cos>:
 8013dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013dd2:	ec53 2b10 	vmov	r2, r3, d0
 8013dd6:	4826      	ldr	r0, [pc, #152]	@ (8013e70 <cos+0xa0>)
 8013dd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013ddc:	4281      	cmp	r1, r0
 8013dde:	d806      	bhi.n	8013dee <cos+0x1e>
 8013de0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013e68 <cos+0x98>
 8013de4:	b005      	add	sp, #20
 8013de6:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dea:	f000 ba51 	b.w	8014290 <__kernel_cos>
 8013dee:	4821      	ldr	r0, [pc, #132]	@ (8013e74 <cos+0xa4>)
 8013df0:	4281      	cmp	r1, r0
 8013df2:	d908      	bls.n	8013e06 <cos+0x36>
 8013df4:	4610      	mov	r0, r2
 8013df6:	4619      	mov	r1, r3
 8013df8:	f7ec fa66 	bl	80002c8 <__aeabi_dsub>
 8013dfc:	ec41 0b10 	vmov	d0, r0, r1
 8013e00:	b005      	add	sp, #20
 8013e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e06:	4668      	mov	r0, sp
 8013e08:	f001 f90a 	bl	8015020 <__ieee754_rem_pio2>
 8013e0c:	f000 0003 	and.w	r0, r0, #3
 8013e10:	2801      	cmp	r0, #1
 8013e12:	d00b      	beq.n	8013e2c <cos+0x5c>
 8013e14:	2802      	cmp	r0, #2
 8013e16:	d015      	beq.n	8013e44 <cos+0x74>
 8013e18:	b9d8      	cbnz	r0, 8013e52 <cos+0x82>
 8013e1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013e1e:	ed9d 0b00 	vldr	d0, [sp]
 8013e22:	f000 fa35 	bl	8014290 <__kernel_cos>
 8013e26:	ec51 0b10 	vmov	r0, r1, d0
 8013e2a:	e7e7      	b.n	8013dfc <cos+0x2c>
 8013e2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013e30:	ed9d 0b00 	vldr	d0, [sp]
 8013e34:	f000 faf4 	bl	8014420 <__kernel_sin>
 8013e38:	ec53 2b10 	vmov	r2, r3, d0
 8013e3c:	4610      	mov	r0, r2
 8013e3e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013e42:	e7db      	b.n	8013dfc <cos+0x2c>
 8013e44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013e48:	ed9d 0b00 	vldr	d0, [sp]
 8013e4c:	f000 fa20 	bl	8014290 <__kernel_cos>
 8013e50:	e7f2      	b.n	8013e38 <cos+0x68>
 8013e52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013e56:	ed9d 0b00 	vldr	d0, [sp]
 8013e5a:	2001      	movs	r0, #1
 8013e5c:	f000 fae0 	bl	8014420 <__kernel_sin>
 8013e60:	e7e1      	b.n	8013e26 <cos+0x56>
 8013e62:	bf00      	nop
 8013e64:	f3af 8000 	nop.w
	...
 8013e70:	3fe921fb 	.word	0x3fe921fb
 8013e74:	7fefffff 	.word	0x7fefffff

08013e78 <acosf>:
 8013e78:	b508      	push	{r3, lr}
 8013e7a:	ed2d 8b02 	vpush	{d8}
 8013e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8013e82:	f001 fad1 	bl	8015428 <__ieee754_acosf>
 8013e86:	eeb4 8a48 	vcmp.f32	s16, s16
 8013e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e8e:	eef0 8a40 	vmov.f32	s17, s0
 8013e92:	d615      	bvs.n	8013ec0 <acosf+0x48>
 8013e94:	eeb0 0a48 	vmov.f32	s0, s16
 8013e98:	f000 f838 	bl	8013f0c <fabsf>
 8013e9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013ea0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea8:	dd0a      	ble.n	8013ec0 <acosf+0x48>
 8013eaa:	f7fc f841 	bl	800ff30 <__errno>
 8013eae:	ecbd 8b02 	vpop	{d8}
 8013eb2:	2321      	movs	r3, #33	@ 0x21
 8013eb4:	6003      	str	r3, [r0, #0]
 8013eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013eba:	4804      	ldr	r0, [pc, #16]	@ (8013ecc <acosf+0x54>)
 8013ebc:	f7fc b874 	b.w	800ffa8 <nanf>
 8013ec0:	eeb0 0a68 	vmov.f32	s0, s17
 8013ec4:	ecbd 8b02 	vpop	{d8}
 8013ec8:	bd08      	pop	{r3, pc}
 8013eca:	bf00      	nop
 8013ecc:	08016458 	.word	0x08016458

08013ed0 <sqrtf>:
 8013ed0:	b508      	push	{r3, lr}
 8013ed2:	ed2d 8b02 	vpush	{d8}
 8013ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8013eda:	f000 f959 	bl	8014190 <__ieee754_sqrtf>
 8013ede:	eeb4 8a48 	vcmp.f32	s16, s16
 8013ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee6:	d60c      	bvs.n	8013f02 <sqrtf+0x32>
 8013ee8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8013f08 <sqrtf+0x38>
 8013eec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	d505      	bpl.n	8013f02 <sqrtf+0x32>
 8013ef6:	f7fc f81b 	bl	800ff30 <__errno>
 8013efa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013efe:	2321      	movs	r3, #33	@ 0x21
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	ecbd 8b02 	vpop	{d8}
 8013f06:	bd08      	pop	{r3, pc}
 8013f08:	00000000 	.word	0x00000000

08013f0c <fabsf>:
 8013f0c:	ee10 3a10 	vmov	r3, s0
 8013f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f14:	ee00 3a10 	vmov	s0, r3
 8013f18:	4770      	bx	lr

08013f1a <finite>:
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	ed8d 0b00 	vstr	d0, [sp]
 8013f20:	9801      	ldr	r0, [sp, #4]
 8013f22:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013f26:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013f2a:	0fc0      	lsrs	r0, r0, #31
 8013f2c:	b002      	add	sp, #8
 8013f2e:	4770      	bx	lr

08013f30 <fmaxf>:
 8013f30:	b508      	push	{r3, lr}
 8013f32:	ed2d 8b02 	vpush	{d8}
 8013f36:	eeb0 8a40 	vmov.f32	s16, s0
 8013f3a:	eef0 8a60 	vmov.f32	s17, s1
 8013f3e:	f000 f831 	bl	8013fa4 <__fpclassifyf>
 8013f42:	b930      	cbnz	r0, 8013f52 <fmaxf+0x22>
 8013f44:	eeb0 8a68 	vmov.f32	s16, s17
 8013f48:	eeb0 0a48 	vmov.f32	s0, s16
 8013f4c:	ecbd 8b02 	vpop	{d8}
 8013f50:	bd08      	pop	{r3, pc}
 8013f52:	eeb0 0a68 	vmov.f32	s0, s17
 8013f56:	f000 f825 	bl	8013fa4 <__fpclassifyf>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	d0f4      	beq.n	8013f48 <fmaxf+0x18>
 8013f5e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f66:	dded      	ble.n	8013f44 <fmaxf+0x14>
 8013f68:	e7ee      	b.n	8013f48 <fmaxf+0x18>

08013f6a <fminf>:
 8013f6a:	b508      	push	{r3, lr}
 8013f6c:	ed2d 8b02 	vpush	{d8}
 8013f70:	eeb0 8a40 	vmov.f32	s16, s0
 8013f74:	eef0 8a60 	vmov.f32	s17, s1
 8013f78:	f000 f814 	bl	8013fa4 <__fpclassifyf>
 8013f7c:	b930      	cbnz	r0, 8013f8c <fminf+0x22>
 8013f7e:	eeb0 8a68 	vmov.f32	s16, s17
 8013f82:	eeb0 0a48 	vmov.f32	s0, s16
 8013f86:	ecbd 8b02 	vpop	{d8}
 8013f8a:	bd08      	pop	{r3, pc}
 8013f8c:	eeb0 0a68 	vmov.f32	s0, s17
 8013f90:	f000 f808 	bl	8013fa4 <__fpclassifyf>
 8013f94:	2800      	cmp	r0, #0
 8013f96:	d0f4      	beq.n	8013f82 <fminf+0x18>
 8013f98:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa0:	d5ed      	bpl.n	8013f7e <fminf+0x14>
 8013fa2:	e7ee      	b.n	8013f82 <fminf+0x18>

08013fa4 <__fpclassifyf>:
 8013fa4:	ee10 3a10 	vmov	r3, s0
 8013fa8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8013fac:	d00d      	beq.n	8013fca <__fpclassifyf+0x26>
 8013fae:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8013fb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8013fb6:	d30a      	bcc.n	8013fce <__fpclassifyf+0x2a>
 8013fb8:	4b07      	ldr	r3, [pc, #28]	@ (8013fd8 <__fpclassifyf+0x34>)
 8013fba:	1e42      	subs	r2, r0, #1
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d908      	bls.n	8013fd2 <__fpclassifyf+0x2e>
 8013fc0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8013fc4:	4258      	negs	r0, r3
 8013fc6:	4158      	adcs	r0, r3
 8013fc8:	4770      	bx	lr
 8013fca:	2002      	movs	r0, #2
 8013fcc:	4770      	bx	lr
 8013fce:	2004      	movs	r0, #4
 8013fd0:	4770      	bx	lr
 8013fd2:	2003      	movs	r0, #3
 8013fd4:	4770      	bx	lr
 8013fd6:	bf00      	nop
 8013fd8:	007ffffe 	.word	0x007ffffe

08013fdc <__ieee754_sqrt>:
 8013fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe0:	4a68      	ldr	r2, [pc, #416]	@ (8014184 <__ieee754_sqrt+0x1a8>)
 8013fe2:	ec55 4b10 	vmov	r4, r5, d0
 8013fe6:	43aa      	bics	r2, r5
 8013fe8:	462b      	mov	r3, r5
 8013fea:	4621      	mov	r1, r4
 8013fec:	d110      	bne.n	8014010 <__ieee754_sqrt+0x34>
 8013fee:	4622      	mov	r2, r4
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	f7ec fb20 	bl	8000638 <__aeabi_dmul>
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	460b      	mov	r3, r1
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	4629      	mov	r1, r5
 8014000:	f7ec f964 	bl	80002cc <__adddf3>
 8014004:	4604      	mov	r4, r0
 8014006:	460d      	mov	r5, r1
 8014008:	ec45 4b10 	vmov	d0, r4, r5
 801400c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014010:	2d00      	cmp	r5, #0
 8014012:	dc0e      	bgt.n	8014032 <__ieee754_sqrt+0x56>
 8014014:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014018:	4322      	orrs	r2, r4
 801401a:	d0f5      	beq.n	8014008 <__ieee754_sqrt+0x2c>
 801401c:	b19d      	cbz	r5, 8014046 <__ieee754_sqrt+0x6a>
 801401e:	4622      	mov	r2, r4
 8014020:	4620      	mov	r0, r4
 8014022:	4629      	mov	r1, r5
 8014024:	f7ec f950 	bl	80002c8 <__aeabi_dsub>
 8014028:	4602      	mov	r2, r0
 801402a:	460b      	mov	r3, r1
 801402c:	f7ec fc2e 	bl	800088c <__aeabi_ddiv>
 8014030:	e7e8      	b.n	8014004 <__ieee754_sqrt+0x28>
 8014032:	152a      	asrs	r2, r5, #20
 8014034:	d115      	bne.n	8014062 <__ieee754_sqrt+0x86>
 8014036:	2000      	movs	r0, #0
 8014038:	e009      	b.n	801404e <__ieee754_sqrt+0x72>
 801403a:	0acb      	lsrs	r3, r1, #11
 801403c:	3a15      	subs	r2, #21
 801403e:	0549      	lsls	r1, r1, #21
 8014040:	2b00      	cmp	r3, #0
 8014042:	d0fa      	beq.n	801403a <__ieee754_sqrt+0x5e>
 8014044:	e7f7      	b.n	8014036 <__ieee754_sqrt+0x5a>
 8014046:	462a      	mov	r2, r5
 8014048:	e7fa      	b.n	8014040 <__ieee754_sqrt+0x64>
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	3001      	adds	r0, #1
 801404e:	02dc      	lsls	r4, r3, #11
 8014050:	d5fb      	bpl.n	801404a <__ieee754_sqrt+0x6e>
 8014052:	1e44      	subs	r4, r0, #1
 8014054:	1b12      	subs	r2, r2, r4
 8014056:	f1c0 0420 	rsb	r4, r0, #32
 801405a:	fa21 f404 	lsr.w	r4, r1, r4
 801405e:	4323      	orrs	r3, r4
 8014060:	4081      	lsls	r1, r0
 8014062:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014066:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801406a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801406e:	07d2      	lsls	r2, r2, #31
 8014070:	bf5c      	itt	pl
 8014072:	005b      	lslpl	r3, r3, #1
 8014074:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8014078:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801407c:	bf58      	it	pl
 801407e:	0049      	lslpl	r1, r1, #1
 8014080:	2600      	movs	r6, #0
 8014082:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8014086:	106d      	asrs	r5, r5, #1
 8014088:	0049      	lsls	r1, r1, #1
 801408a:	2016      	movs	r0, #22
 801408c:	4632      	mov	r2, r6
 801408e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8014092:	1917      	adds	r7, r2, r4
 8014094:	429f      	cmp	r7, r3
 8014096:	bfde      	ittt	le
 8014098:	193a      	addle	r2, r7, r4
 801409a:	1bdb      	suble	r3, r3, r7
 801409c:	1936      	addle	r6, r6, r4
 801409e:	0fcf      	lsrs	r7, r1, #31
 80140a0:	3801      	subs	r0, #1
 80140a2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80140a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80140aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80140ae:	d1f0      	bne.n	8014092 <__ieee754_sqrt+0xb6>
 80140b0:	4604      	mov	r4, r0
 80140b2:	2720      	movs	r7, #32
 80140b4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80140b8:	429a      	cmp	r2, r3
 80140ba:	eb00 0e0c 	add.w	lr, r0, ip
 80140be:	db02      	blt.n	80140c6 <__ieee754_sqrt+0xea>
 80140c0:	d113      	bne.n	80140ea <__ieee754_sqrt+0x10e>
 80140c2:	458e      	cmp	lr, r1
 80140c4:	d811      	bhi.n	80140ea <__ieee754_sqrt+0x10e>
 80140c6:	f1be 0f00 	cmp.w	lr, #0
 80140ca:	eb0e 000c 	add.w	r0, lr, ip
 80140ce:	da42      	bge.n	8014156 <__ieee754_sqrt+0x17a>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	db40      	blt.n	8014156 <__ieee754_sqrt+0x17a>
 80140d4:	f102 0801 	add.w	r8, r2, #1
 80140d8:	1a9b      	subs	r3, r3, r2
 80140da:	458e      	cmp	lr, r1
 80140dc:	bf88      	it	hi
 80140de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80140e2:	eba1 010e 	sub.w	r1, r1, lr
 80140e6:	4464      	add	r4, ip
 80140e8:	4642      	mov	r2, r8
 80140ea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80140ee:	3f01      	subs	r7, #1
 80140f0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80140f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80140f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80140fc:	d1dc      	bne.n	80140b8 <__ieee754_sqrt+0xdc>
 80140fe:	4319      	orrs	r1, r3
 8014100:	d01b      	beq.n	801413a <__ieee754_sqrt+0x15e>
 8014102:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8014188 <__ieee754_sqrt+0x1ac>
 8014106:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801418c <__ieee754_sqrt+0x1b0>
 801410a:	e9da 0100 	ldrd	r0, r1, [sl]
 801410e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014112:	f7ec f8d9 	bl	80002c8 <__aeabi_dsub>
 8014116:	e9da 8900 	ldrd	r8, r9, [sl]
 801411a:	4602      	mov	r2, r0
 801411c:	460b      	mov	r3, r1
 801411e:	4640      	mov	r0, r8
 8014120:	4649      	mov	r1, r9
 8014122:	f7ec fd05 	bl	8000b30 <__aeabi_dcmple>
 8014126:	b140      	cbz	r0, 801413a <__ieee754_sqrt+0x15e>
 8014128:	f1b4 3fff 	cmp.w	r4, #4294967295
 801412c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014130:	e9db 2300 	ldrd	r2, r3, [fp]
 8014134:	d111      	bne.n	801415a <__ieee754_sqrt+0x17e>
 8014136:	3601      	adds	r6, #1
 8014138:	463c      	mov	r4, r7
 801413a:	1072      	asrs	r2, r6, #1
 801413c:	0863      	lsrs	r3, r4, #1
 801413e:	07f1      	lsls	r1, r6, #31
 8014140:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014144:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014148:	bf48      	it	mi
 801414a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801414e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8014152:	4618      	mov	r0, r3
 8014154:	e756      	b.n	8014004 <__ieee754_sqrt+0x28>
 8014156:	4690      	mov	r8, r2
 8014158:	e7be      	b.n	80140d8 <__ieee754_sqrt+0xfc>
 801415a:	f7ec f8b7 	bl	80002cc <__adddf3>
 801415e:	e9da 8900 	ldrd	r8, r9, [sl]
 8014162:	4602      	mov	r2, r0
 8014164:	460b      	mov	r3, r1
 8014166:	4640      	mov	r0, r8
 8014168:	4649      	mov	r1, r9
 801416a:	f7ec fcd7 	bl	8000b1c <__aeabi_dcmplt>
 801416e:	b120      	cbz	r0, 801417a <__ieee754_sqrt+0x19e>
 8014170:	1ca0      	adds	r0, r4, #2
 8014172:	bf08      	it	eq
 8014174:	3601      	addeq	r6, #1
 8014176:	3402      	adds	r4, #2
 8014178:	e7df      	b.n	801413a <__ieee754_sqrt+0x15e>
 801417a:	1c63      	adds	r3, r4, #1
 801417c:	f023 0401 	bic.w	r4, r3, #1
 8014180:	e7db      	b.n	801413a <__ieee754_sqrt+0x15e>
 8014182:	bf00      	nop
 8014184:	7ff00000 	.word	0x7ff00000
 8014188:	20000218 	.word	0x20000218
 801418c:	20000210 	.word	0x20000210

08014190 <__ieee754_sqrtf>:
 8014190:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014194:	4770      	bx	lr
	...

08014198 <floor>:
 8014198:	ec51 0b10 	vmov	r0, r1, d0
 801419c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80141a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80141a8:	2e13      	cmp	r6, #19
 80141aa:	460c      	mov	r4, r1
 80141ac:	4605      	mov	r5, r0
 80141ae:	4680      	mov	r8, r0
 80141b0:	dc34      	bgt.n	801421c <floor+0x84>
 80141b2:	2e00      	cmp	r6, #0
 80141b4:	da17      	bge.n	80141e6 <floor+0x4e>
 80141b6:	a332      	add	r3, pc, #200	@ (adr r3, 8014280 <floor+0xe8>)
 80141b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141bc:	f7ec f886 	bl	80002cc <__adddf3>
 80141c0:	2200      	movs	r2, #0
 80141c2:	2300      	movs	r3, #0
 80141c4:	f7ec fcc8 	bl	8000b58 <__aeabi_dcmpgt>
 80141c8:	b150      	cbz	r0, 80141e0 <floor+0x48>
 80141ca:	2c00      	cmp	r4, #0
 80141cc:	da55      	bge.n	801427a <floor+0xe2>
 80141ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80141d2:	432c      	orrs	r4, r5
 80141d4:	2500      	movs	r5, #0
 80141d6:	42ac      	cmp	r4, r5
 80141d8:	4c2b      	ldr	r4, [pc, #172]	@ (8014288 <floor+0xf0>)
 80141da:	bf08      	it	eq
 80141dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80141e0:	4621      	mov	r1, r4
 80141e2:	4628      	mov	r0, r5
 80141e4:	e023      	b.n	801422e <floor+0x96>
 80141e6:	4f29      	ldr	r7, [pc, #164]	@ (801428c <floor+0xf4>)
 80141e8:	4137      	asrs	r7, r6
 80141ea:	ea01 0307 	and.w	r3, r1, r7
 80141ee:	4303      	orrs	r3, r0
 80141f0:	d01d      	beq.n	801422e <floor+0x96>
 80141f2:	a323      	add	r3, pc, #140	@ (adr r3, 8014280 <floor+0xe8>)
 80141f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f8:	f7ec f868 	bl	80002cc <__adddf3>
 80141fc:	2200      	movs	r2, #0
 80141fe:	2300      	movs	r3, #0
 8014200:	f7ec fcaa 	bl	8000b58 <__aeabi_dcmpgt>
 8014204:	2800      	cmp	r0, #0
 8014206:	d0eb      	beq.n	80141e0 <floor+0x48>
 8014208:	2c00      	cmp	r4, #0
 801420a:	bfbe      	ittt	lt
 801420c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014210:	4133      	asrlt	r3, r6
 8014212:	18e4      	addlt	r4, r4, r3
 8014214:	ea24 0407 	bic.w	r4, r4, r7
 8014218:	2500      	movs	r5, #0
 801421a:	e7e1      	b.n	80141e0 <floor+0x48>
 801421c:	2e33      	cmp	r6, #51	@ 0x33
 801421e:	dd0a      	ble.n	8014236 <floor+0x9e>
 8014220:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014224:	d103      	bne.n	801422e <floor+0x96>
 8014226:	4602      	mov	r2, r0
 8014228:	460b      	mov	r3, r1
 801422a:	f7ec f84f 	bl	80002cc <__adddf3>
 801422e:	ec41 0b10 	vmov	d0, r0, r1
 8014232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014236:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801423a:	f04f 37ff 	mov.w	r7, #4294967295
 801423e:	40df      	lsrs	r7, r3
 8014240:	4207      	tst	r7, r0
 8014242:	d0f4      	beq.n	801422e <floor+0x96>
 8014244:	a30e      	add	r3, pc, #56	@ (adr r3, 8014280 <floor+0xe8>)
 8014246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424a:	f7ec f83f 	bl	80002cc <__adddf3>
 801424e:	2200      	movs	r2, #0
 8014250:	2300      	movs	r3, #0
 8014252:	f7ec fc81 	bl	8000b58 <__aeabi_dcmpgt>
 8014256:	2800      	cmp	r0, #0
 8014258:	d0c2      	beq.n	80141e0 <floor+0x48>
 801425a:	2c00      	cmp	r4, #0
 801425c:	da0a      	bge.n	8014274 <floor+0xdc>
 801425e:	2e14      	cmp	r6, #20
 8014260:	d101      	bne.n	8014266 <floor+0xce>
 8014262:	3401      	adds	r4, #1
 8014264:	e006      	b.n	8014274 <floor+0xdc>
 8014266:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801426a:	2301      	movs	r3, #1
 801426c:	40b3      	lsls	r3, r6
 801426e:	441d      	add	r5, r3
 8014270:	4545      	cmp	r5, r8
 8014272:	d3f6      	bcc.n	8014262 <floor+0xca>
 8014274:	ea25 0507 	bic.w	r5, r5, r7
 8014278:	e7b2      	b.n	80141e0 <floor+0x48>
 801427a:	2500      	movs	r5, #0
 801427c:	462c      	mov	r4, r5
 801427e:	e7af      	b.n	80141e0 <floor+0x48>
 8014280:	8800759c 	.word	0x8800759c
 8014284:	7e37e43c 	.word	0x7e37e43c
 8014288:	bff00000 	.word	0xbff00000
 801428c:	000fffff 	.word	0x000fffff

08014290 <__kernel_cos>:
 8014290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014294:	ec57 6b10 	vmov	r6, r7, d0
 8014298:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801429c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80142a0:	ed8d 1b00 	vstr	d1, [sp]
 80142a4:	d206      	bcs.n	80142b4 <__kernel_cos+0x24>
 80142a6:	4630      	mov	r0, r6
 80142a8:	4639      	mov	r1, r7
 80142aa:	f7ec fc75 	bl	8000b98 <__aeabi_d2iz>
 80142ae:	2800      	cmp	r0, #0
 80142b0:	f000 8088 	beq.w	80143c4 <__kernel_cos+0x134>
 80142b4:	4632      	mov	r2, r6
 80142b6:	463b      	mov	r3, r7
 80142b8:	4630      	mov	r0, r6
 80142ba:	4639      	mov	r1, r7
 80142bc:	f7ec f9bc 	bl	8000638 <__aeabi_dmul>
 80142c0:	4b51      	ldr	r3, [pc, #324]	@ (8014408 <__kernel_cos+0x178>)
 80142c2:	2200      	movs	r2, #0
 80142c4:	4604      	mov	r4, r0
 80142c6:	460d      	mov	r5, r1
 80142c8:	f7ec f9b6 	bl	8000638 <__aeabi_dmul>
 80142cc:	a340      	add	r3, pc, #256	@ (adr r3, 80143d0 <__kernel_cos+0x140>)
 80142ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d2:	4682      	mov	sl, r0
 80142d4:	468b      	mov	fp, r1
 80142d6:	4620      	mov	r0, r4
 80142d8:	4629      	mov	r1, r5
 80142da:	f7ec f9ad 	bl	8000638 <__aeabi_dmul>
 80142de:	a33e      	add	r3, pc, #248	@ (adr r3, 80143d8 <__kernel_cos+0x148>)
 80142e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e4:	f7eb fff2 	bl	80002cc <__adddf3>
 80142e8:	4622      	mov	r2, r4
 80142ea:	462b      	mov	r3, r5
 80142ec:	f7ec f9a4 	bl	8000638 <__aeabi_dmul>
 80142f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80143e0 <__kernel_cos+0x150>)
 80142f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f6:	f7eb ffe7 	bl	80002c8 <__aeabi_dsub>
 80142fa:	4622      	mov	r2, r4
 80142fc:	462b      	mov	r3, r5
 80142fe:	f7ec f99b 	bl	8000638 <__aeabi_dmul>
 8014302:	a339      	add	r3, pc, #228	@ (adr r3, 80143e8 <__kernel_cos+0x158>)
 8014304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014308:	f7eb ffe0 	bl	80002cc <__adddf3>
 801430c:	4622      	mov	r2, r4
 801430e:	462b      	mov	r3, r5
 8014310:	f7ec f992 	bl	8000638 <__aeabi_dmul>
 8014314:	a336      	add	r3, pc, #216	@ (adr r3, 80143f0 <__kernel_cos+0x160>)
 8014316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431a:	f7eb ffd5 	bl	80002c8 <__aeabi_dsub>
 801431e:	4622      	mov	r2, r4
 8014320:	462b      	mov	r3, r5
 8014322:	f7ec f989 	bl	8000638 <__aeabi_dmul>
 8014326:	a334      	add	r3, pc, #208	@ (adr r3, 80143f8 <__kernel_cos+0x168>)
 8014328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432c:	f7eb ffce 	bl	80002cc <__adddf3>
 8014330:	4622      	mov	r2, r4
 8014332:	462b      	mov	r3, r5
 8014334:	f7ec f980 	bl	8000638 <__aeabi_dmul>
 8014338:	4622      	mov	r2, r4
 801433a:	462b      	mov	r3, r5
 801433c:	f7ec f97c 	bl	8000638 <__aeabi_dmul>
 8014340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014344:	4604      	mov	r4, r0
 8014346:	460d      	mov	r5, r1
 8014348:	4630      	mov	r0, r6
 801434a:	4639      	mov	r1, r7
 801434c:	f7ec f974 	bl	8000638 <__aeabi_dmul>
 8014350:	460b      	mov	r3, r1
 8014352:	4602      	mov	r2, r0
 8014354:	4629      	mov	r1, r5
 8014356:	4620      	mov	r0, r4
 8014358:	f7eb ffb6 	bl	80002c8 <__aeabi_dsub>
 801435c:	4b2b      	ldr	r3, [pc, #172]	@ (801440c <__kernel_cos+0x17c>)
 801435e:	4598      	cmp	r8, r3
 8014360:	4606      	mov	r6, r0
 8014362:	460f      	mov	r7, r1
 8014364:	d810      	bhi.n	8014388 <__kernel_cos+0xf8>
 8014366:	4602      	mov	r2, r0
 8014368:	460b      	mov	r3, r1
 801436a:	4650      	mov	r0, sl
 801436c:	4659      	mov	r1, fp
 801436e:	f7eb ffab 	bl	80002c8 <__aeabi_dsub>
 8014372:	460b      	mov	r3, r1
 8014374:	4926      	ldr	r1, [pc, #152]	@ (8014410 <__kernel_cos+0x180>)
 8014376:	4602      	mov	r2, r0
 8014378:	2000      	movs	r0, #0
 801437a:	f7eb ffa5 	bl	80002c8 <__aeabi_dsub>
 801437e:	ec41 0b10 	vmov	d0, r0, r1
 8014382:	b003      	add	sp, #12
 8014384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014388:	4b22      	ldr	r3, [pc, #136]	@ (8014414 <__kernel_cos+0x184>)
 801438a:	4921      	ldr	r1, [pc, #132]	@ (8014410 <__kernel_cos+0x180>)
 801438c:	4598      	cmp	r8, r3
 801438e:	bf8c      	ite	hi
 8014390:	4d21      	ldrhi	r5, [pc, #132]	@ (8014418 <__kernel_cos+0x188>)
 8014392:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8014396:	2400      	movs	r4, #0
 8014398:	4622      	mov	r2, r4
 801439a:	462b      	mov	r3, r5
 801439c:	2000      	movs	r0, #0
 801439e:	f7eb ff93 	bl	80002c8 <__aeabi_dsub>
 80143a2:	4622      	mov	r2, r4
 80143a4:	4680      	mov	r8, r0
 80143a6:	4689      	mov	r9, r1
 80143a8:	462b      	mov	r3, r5
 80143aa:	4650      	mov	r0, sl
 80143ac:	4659      	mov	r1, fp
 80143ae:	f7eb ff8b 	bl	80002c8 <__aeabi_dsub>
 80143b2:	4632      	mov	r2, r6
 80143b4:	463b      	mov	r3, r7
 80143b6:	f7eb ff87 	bl	80002c8 <__aeabi_dsub>
 80143ba:	4602      	mov	r2, r0
 80143bc:	460b      	mov	r3, r1
 80143be:	4640      	mov	r0, r8
 80143c0:	4649      	mov	r1, r9
 80143c2:	e7da      	b.n	801437a <__kernel_cos+0xea>
 80143c4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8014400 <__kernel_cos+0x170>
 80143c8:	e7db      	b.n	8014382 <__kernel_cos+0xf2>
 80143ca:	bf00      	nop
 80143cc:	f3af 8000 	nop.w
 80143d0:	be8838d4 	.word	0xbe8838d4
 80143d4:	bda8fae9 	.word	0xbda8fae9
 80143d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80143dc:	3e21ee9e 	.word	0x3e21ee9e
 80143e0:	809c52ad 	.word	0x809c52ad
 80143e4:	3e927e4f 	.word	0x3e927e4f
 80143e8:	19cb1590 	.word	0x19cb1590
 80143ec:	3efa01a0 	.word	0x3efa01a0
 80143f0:	16c15177 	.word	0x16c15177
 80143f4:	3f56c16c 	.word	0x3f56c16c
 80143f8:	5555554c 	.word	0x5555554c
 80143fc:	3fa55555 	.word	0x3fa55555
 8014400:	00000000 	.word	0x00000000
 8014404:	3ff00000 	.word	0x3ff00000
 8014408:	3fe00000 	.word	0x3fe00000
 801440c:	3fd33332 	.word	0x3fd33332
 8014410:	3ff00000 	.word	0x3ff00000
 8014414:	3fe90000 	.word	0x3fe90000
 8014418:	3fd20000 	.word	0x3fd20000
 801441c:	00000000 	.word	0x00000000

08014420 <__kernel_sin>:
 8014420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014424:	ec55 4b10 	vmov	r4, r5, d0
 8014428:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801442c:	b085      	sub	sp, #20
 801442e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014432:	ed8d 1b02 	vstr	d1, [sp, #8]
 8014436:	4680      	mov	r8, r0
 8014438:	d205      	bcs.n	8014446 <__kernel_sin+0x26>
 801443a:	4620      	mov	r0, r4
 801443c:	4629      	mov	r1, r5
 801443e:	f7ec fbab 	bl	8000b98 <__aeabi_d2iz>
 8014442:	2800      	cmp	r0, #0
 8014444:	d052      	beq.n	80144ec <__kernel_sin+0xcc>
 8014446:	4622      	mov	r2, r4
 8014448:	462b      	mov	r3, r5
 801444a:	4620      	mov	r0, r4
 801444c:	4629      	mov	r1, r5
 801444e:	f7ec f8f3 	bl	8000638 <__aeabi_dmul>
 8014452:	4682      	mov	sl, r0
 8014454:	468b      	mov	fp, r1
 8014456:	4602      	mov	r2, r0
 8014458:	460b      	mov	r3, r1
 801445a:	4620      	mov	r0, r4
 801445c:	4629      	mov	r1, r5
 801445e:	f7ec f8eb 	bl	8000638 <__aeabi_dmul>
 8014462:	a342      	add	r3, pc, #264	@ (adr r3, 801456c <__kernel_sin+0x14c>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	e9cd 0100 	strd	r0, r1, [sp]
 801446c:	4650      	mov	r0, sl
 801446e:	4659      	mov	r1, fp
 8014470:	f7ec f8e2 	bl	8000638 <__aeabi_dmul>
 8014474:	a33f      	add	r3, pc, #252	@ (adr r3, 8014574 <__kernel_sin+0x154>)
 8014476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447a:	f7eb ff25 	bl	80002c8 <__aeabi_dsub>
 801447e:	4652      	mov	r2, sl
 8014480:	465b      	mov	r3, fp
 8014482:	f7ec f8d9 	bl	8000638 <__aeabi_dmul>
 8014486:	a33d      	add	r3, pc, #244	@ (adr r3, 801457c <__kernel_sin+0x15c>)
 8014488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448c:	f7eb ff1e 	bl	80002cc <__adddf3>
 8014490:	4652      	mov	r2, sl
 8014492:	465b      	mov	r3, fp
 8014494:	f7ec f8d0 	bl	8000638 <__aeabi_dmul>
 8014498:	a33a      	add	r3, pc, #232	@ (adr r3, 8014584 <__kernel_sin+0x164>)
 801449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449e:	f7eb ff13 	bl	80002c8 <__aeabi_dsub>
 80144a2:	4652      	mov	r2, sl
 80144a4:	465b      	mov	r3, fp
 80144a6:	f7ec f8c7 	bl	8000638 <__aeabi_dmul>
 80144aa:	a338      	add	r3, pc, #224	@ (adr r3, 801458c <__kernel_sin+0x16c>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	f7eb ff0c 	bl	80002cc <__adddf3>
 80144b4:	4606      	mov	r6, r0
 80144b6:	460f      	mov	r7, r1
 80144b8:	f1b8 0f00 	cmp.w	r8, #0
 80144bc:	d11b      	bne.n	80144f6 <__kernel_sin+0xd6>
 80144be:	4602      	mov	r2, r0
 80144c0:	460b      	mov	r3, r1
 80144c2:	4650      	mov	r0, sl
 80144c4:	4659      	mov	r1, fp
 80144c6:	f7ec f8b7 	bl	8000638 <__aeabi_dmul>
 80144ca:	a325      	add	r3, pc, #148	@ (adr r3, 8014560 <__kernel_sin+0x140>)
 80144cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d0:	f7eb fefa 	bl	80002c8 <__aeabi_dsub>
 80144d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144d8:	f7ec f8ae 	bl	8000638 <__aeabi_dmul>
 80144dc:	4602      	mov	r2, r0
 80144de:	460b      	mov	r3, r1
 80144e0:	4620      	mov	r0, r4
 80144e2:	4629      	mov	r1, r5
 80144e4:	f7eb fef2 	bl	80002cc <__adddf3>
 80144e8:	4604      	mov	r4, r0
 80144ea:	460d      	mov	r5, r1
 80144ec:	ec45 4b10 	vmov	d0, r4, r5
 80144f0:	b005      	add	sp, #20
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144fa:	4b1b      	ldr	r3, [pc, #108]	@ (8014568 <__kernel_sin+0x148>)
 80144fc:	2200      	movs	r2, #0
 80144fe:	f7ec f89b 	bl	8000638 <__aeabi_dmul>
 8014502:	4632      	mov	r2, r6
 8014504:	4680      	mov	r8, r0
 8014506:	4689      	mov	r9, r1
 8014508:	463b      	mov	r3, r7
 801450a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801450e:	f7ec f893 	bl	8000638 <__aeabi_dmul>
 8014512:	4602      	mov	r2, r0
 8014514:	460b      	mov	r3, r1
 8014516:	4640      	mov	r0, r8
 8014518:	4649      	mov	r1, r9
 801451a:	f7eb fed5 	bl	80002c8 <__aeabi_dsub>
 801451e:	4652      	mov	r2, sl
 8014520:	465b      	mov	r3, fp
 8014522:	f7ec f889 	bl	8000638 <__aeabi_dmul>
 8014526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801452a:	f7eb fecd 	bl	80002c8 <__aeabi_dsub>
 801452e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014560 <__kernel_sin+0x140>)
 8014530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014534:	4606      	mov	r6, r0
 8014536:	460f      	mov	r7, r1
 8014538:	e9dd 0100 	ldrd	r0, r1, [sp]
 801453c:	f7ec f87c 	bl	8000638 <__aeabi_dmul>
 8014540:	4602      	mov	r2, r0
 8014542:	460b      	mov	r3, r1
 8014544:	4630      	mov	r0, r6
 8014546:	4639      	mov	r1, r7
 8014548:	f7eb fec0 	bl	80002cc <__adddf3>
 801454c:	4602      	mov	r2, r0
 801454e:	460b      	mov	r3, r1
 8014550:	4620      	mov	r0, r4
 8014552:	4629      	mov	r1, r5
 8014554:	f7eb feb8 	bl	80002c8 <__aeabi_dsub>
 8014558:	e7c6      	b.n	80144e8 <__kernel_sin+0xc8>
 801455a:	bf00      	nop
 801455c:	f3af 8000 	nop.w
 8014560:	55555549 	.word	0x55555549
 8014564:	3fc55555 	.word	0x3fc55555
 8014568:	3fe00000 	.word	0x3fe00000
 801456c:	5acfd57c 	.word	0x5acfd57c
 8014570:	3de5d93a 	.word	0x3de5d93a
 8014574:	8a2b9ceb 	.word	0x8a2b9ceb
 8014578:	3e5ae5e6 	.word	0x3e5ae5e6
 801457c:	57b1fe7d 	.word	0x57b1fe7d
 8014580:	3ec71de3 	.word	0x3ec71de3
 8014584:	19c161d5 	.word	0x19c161d5
 8014588:	3f2a01a0 	.word	0x3f2a01a0
 801458c:	1110f8a6 	.word	0x1110f8a6
 8014590:	3f811111 	.word	0x3f811111
 8014594:	00000000 	.word	0x00000000

08014598 <__ieee754_pow>:
 8014598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459c:	b091      	sub	sp, #68	@ 0x44
 801459e:	ed8d 1b00 	vstr	d1, [sp]
 80145a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80145a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80145aa:	ea5a 0001 	orrs.w	r0, sl, r1
 80145ae:	ec57 6b10 	vmov	r6, r7, d0
 80145b2:	d113      	bne.n	80145dc <__ieee754_pow+0x44>
 80145b4:	19b3      	adds	r3, r6, r6
 80145b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80145ba:	4152      	adcs	r2, r2
 80145bc:	4298      	cmp	r0, r3
 80145be:	4b98      	ldr	r3, [pc, #608]	@ (8014820 <__ieee754_pow+0x288>)
 80145c0:	4193      	sbcs	r3, r2
 80145c2:	f080 84ea 	bcs.w	8014f9a <__ieee754_pow+0xa02>
 80145c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145ca:	4630      	mov	r0, r6
 80145cc:	4639      	mov	r1, r7
 80145ce:	f7eb fe7d 	bl	80002cc <__adddf3>
 80145d2:	ec41 0b10 	vmov	d0, r0, r1
 80145d6:	b011      	add	sp, #68	@ 0x44
 80145d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145dc:	4a91      	ldr	r2, [pc, #580]	@ (8014824 <__ieee754_pow+0x28c>)
 80145de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80145e2:	4590      	cmp	r8, r2
 80145e4:	463d      	mov	r5, r7
 80145e6:	4633      	mov	r3, r6
 80145e8:	d806      	bhi.n	80145f8 <__ieee754_pow+0x60>
 80145ea:	d101      	bne.n	80145f0 <__ieee754_pow+0x58>
 80145ec:	2e00      	cmp	r6, #0
 80145ee:	d1ea      	bne.n	80145c6 <__ieee754_pow+0x2e>
 80145f0:	4592      	cmp	sl, r2
 80145f2:	d801      	bhi.n	80145f8 <__ieee754_pow+0x60>
 80145f4:	d10e      	bne.n	8014614 <__ieee754_pow+0x7c>
 80145f6:	b169      	cbz	r1, 8014614 <__ieee754_pow+0x7c>
 80145f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80145fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014600:	431d      	orrs	r5, r3
 8014602:	d1e0      	bne.n	80145c6 <__ieee754_pow+0x2e>
 8014604:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014608:	18db      	adds	r3, r3, r3
 801460a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801460e:	4152      	adcs	r2, r2
 8014610:	429d      	cmp	r5, r3
 8014612:	e7d4      	b.n	80145be <__ieee754_pow+0x26>
 8014614:	2d00      	cmp	r5, #0
 8014616:	46c3      	mov	fp, r8
 8014618:	da3a      	bge.n	8014690 <__ieee754_pow+0xf8>
 801461a:	4a83      	ldr	r2, [pc, #524]	@ (8014828 <__ieee754_pow+0x290>)
 801461c:	4592      	cmp	sl, r2
 801461e:	d84d      	bhi.n	80146bc <__ieee754_pow+0x124>
 8014620:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8014624:	4592      	cmp	sl, r2
 8014626:	f240 84c7 	bls.w	8014fb8 <__ieee754_pow+0xa20>
 801462a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801462e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014632:	2a14      	cmp	r2, #20
 8014634:	dd0f      	ble.n	8014656 <__ieee754_pow+0xbe>
 8014636:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801463a:	fa21 f402 	lsr.w	r4, r1, r2
 801463e:	fa04 f202 	lsl.w	r2, r4, r2
 8014642:	428a      	cmp	r2, r1
 8014644:	f040 84b8 	bne.w	8014fb8 <__ieee754_pow+0xa20>
 8014648:	f004 0401 	and.w	r4, r4, #1
 801464c:	f1c4 0402 	rsb	r4, r4, #2
 8014650:	2900      	cmp	r1, #0
 8014652:	d158      	bne.n	8014706 <__ieee754_pow+0x16e>
 8014654:	e00e      	b.n	8014674 <__ieee754_pow+0xdc>
 8014656:	2900      	cmp	r1, #0
 8014658:	d154      	bne.n	8014704 <__ieee754_pow+0x16c>
 801465a:	f1c2 0214 	rsb	r2, r2, #20
 801465e:	fa4a f402 	asr.w	r4, sl, r2
 8014662:	fa04 f202 	lsl.w	r2, r4, r2
 8014666:	4552      	cmp	r2, sl
 8014668:	f040 84a3 	bne.w	8014fb2 <__ieee754_pow+0xa1a>
 801466c:	f004 0401 	and.w	r4, r4, #1
 8014670:	f1c4 0402 	rsb	r4, r4, #2
 8014674:	4a6d      	ldr	r2, [pc, #436]	@ (801482c <__ieee754_pow+0x294>)
 8014676:	4592      	cmp	sl, r2
 8014678:	d12e      	bne.n	80146d8 <__ieee754_pow+0x140>
 801467a:	f1b9 0f00 	cmp.w	r9, #0
 801467e:	f280 8494 	bge.w	8014faa <__ieee754_pow+0xa12>
 8014682:	496a      	ldr	r1, [pc, #424]	@ (801482c <__ieee754_pow+0x294>)
 8014684:	4632      	mov	r2, r6
 8014686:	463b      	mov	r3, r7
 8014688:	2000      	movs	r0, #0
 801468a:	f7ec f8ff 	bl	800088c <__aeabi_ddiv>
 801468e:	e7a0      	b.n	80145d2 <__ieee754_pow+0x3a>
 8014690:	2400      	movs	r4, #0
 8014692:	bbc1      	cbnz	r1, 8014706 <__ieee754_pow+0x16e>
 8014694:	4a63      	ldr	r2, [pc, #396]	@ (8014824 <__ieee754_pow+0x28c>)
 8014696:	4592      	cmp	sl, r2
 8014698:	d1ec      	bne.n	8014674 <__ieee754_pow+0xdc>
 801469a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801469e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80146a2:	431a      	orrs	r2, r3
 80146a4:	f000 8479 	beq.w	8014f9a <__ieee754_pow+0xa02>
 80146a8:	4b61      	ldr	r3, [pc, #388]	@ (8014830 <__ieee754_pow+0x298>)
 80146aa:	4598      	cmp	r8, r3
 80146ac:	d908      	bls.n	80146c0 <__ieee754_pow+0x128>
 80146ae:	f1b9 0f00 	cmp.w	r9, #0
 80146b2:	f2c0 8476 	blt.w	8014fa2 <__ieee754_pow+0xa0a>
 80146b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146ba:	e78a      	b.n	80145d2 <__ieee754_pow+0x3a>
 80146bc:	2402      	movs	r4, #2
 80146be:	e7e8      	b.n	8014692 <__ieee754_pow+0xfa>
 80146c0:	f1b9 0f00 	cmp.w	r9, #0
 80146c4:	f04f 0000 	mov.w	r0, #0
 80146c8:	f04f 0100 	mov.w	r1, #0
 80146cc:	da81      	bge.n	80145d2 <__ieee754_pow+0x3a>
 80146ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80146d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80146d6:	e77c      	b.n	80145d2 <__ieee754_pow+0x3a>
 80146d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80146dc:	d106      	bne.n	80146ec <__ieee754_pow+0x154>
 80146de:	4632      	mov	r2, r6
 80146e0:	463b      	mov	r3, r7
 80146e2:	4630      	mov	r0, r6
 80146e4:	4639      	mov	r1, r7
 80146e6:	f7eb ffa7 	bl	8000638 <__aeabi_dmul>
 80146ea:	e772      	b.n	80145d2 <__ieee754_pow+0x3a>
 80146ec:	4a51      	ldr	r2, [pc, #324]	@ (8014834 <__ieee754_pow+0x29c>)
 80146ee:	4591      	cmp	r9, r2
 80146f0:	d109      	bne.n	8014706 <__ieee754_pow+0x16e>
 80146f2:	2d00      	cmp	r5, #0
 80146f4:	db07      	blt.n	8014706 <__ieee754_pow+0x16e>
 80146f6:	ec47 6b10 	vmov	d0, r6, r7
 80146fa:	b011      	add	sp, #68	@ 0x44
 80146fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014700:	f7ff bc6c 	b.w	8013fdc <__ieee754_sqrt>
 8014704:	2400      	movs	r4, #0
 8014706:	ec47 6b10 	vmov	d0, r6, r7
 801470a:	9302      	str	r3, [sp, #8]
 801470c:	f000 fe84 	bl	8015418 <fabs>
 8014710:	9b02      	ldr	r3, [sp, #8]
 8014712:	ec51 0b10 	vmov	r0, r1, d0
 8014716:	bb53      	cbnz	r3, 801476e <__ieee754_pow+0x1d6>
 8014718:	4b44      	ldr	r3, [pc, #272]	@ (801482c <__ieee754_pow+0x294>)
 801471a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801471e:	429a      	cmp	r2, r3
 8014720:	d002      	beq.n	8014728 <__ieee754_pow+0x190>
 8014722:	f1b8 0f00 	cmp.w	r8, #0
 8014726:	d122      	bne.n	801476e <__ieee754_pow+0x1d6>
 8014728:	f1b9 0f00 	cmp.w	r9, #0
 801472c:	da05      	bge.n	801473a <__ieee754_pow+0x1a2>
 801472e:	4602      	mov	r2, r0
 8014730:	460b      	mov	r3, r1
 8014732:	2000      	movs	r0, #0
 8014734:	493d      	ldr	r1, [pc, #244]	@ (801482c <__ieee754_pow+0x294>)
 8014736:	f7ec f8a9 	bl	800088c <__aeabi_ddiv>
 801473a:	2d00      	cmp	r5, #0
 801473c:	f6bf af49 	bge.w	80145d2 <__ieee754_pow+0x3a>
 8014740:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014744:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014748:	ea58 0804 	orrs.w	r8, r8, r4
 801474c:	d108      	bne.n	8014760 <__ieee754_pow+0x1c8>
 801474e:	4602      	mov	r2, r0
 8014750:	460b      	mov	r3, r1
 8014752:	4610      	mov	r0, r2
 8014754:	4619      	mov	r1, r3
 8014756:	f7eb fdb7 	bl	80002c8 <__aeabi_dsub>
 801475a:	4602      	mov	r2, r0
 801475c:	460b      	mov	r3, r1
 801475e:	e794      	b.n	801468a <__ieee754_pow+0xf2>
 8014760:	2c01      	cmp	r4, #1
 8014762:	f47f af36 	bne.w	80145d2 <__ieee754_pow+0x3a>
 8014766:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801476a:	4619      	mov	r1, r3
 801476c:	e731      	b.n	80145d2 <__ieee754_pow+0x3a>
 801476e:	0feb      	lsrs	r3, r5, #31
 8014770:	3b01      	subs	r3, #1
 8014772:	ea53 0204 	orrs.w	r2, r3, r4
 8014776:	d102      	bne.n	801477e <__ieee754_pow+0x1e6>
 8014778:	4632      	mov	r2, r6
 801477a:	463b      	mov	r3, r7
 801477c:	e7e9      	b.n	8014752 <__ieee754_pow+0x1ba>
 801477e:	3c01      	subs	r4, #1
 8014780:	431c      	orrs	r4, r3
 8014782:	d016      	beq.n	80147b2 <__ieee754_pow+0x21a>
 8014784:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014810 <__ieee754_pow+0x278>
 8014788:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801478c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014790:	f240 8112 	bls.w	80149b8 <__ieee754_pow+0x420>
 8014794:	4b28      	ldr	r3, [pc, #160]	@ (8014838 <__ieee754_pow+0x2a0>)
 8014796:	459a      	cmp	sl, r3
 8014798:	4b25      	ldr	r3, [pc, #148]	@ (8014830 <__ieee754_pow+0x298>)
 801479a:	d916      	bls.n	80147ca <__ieee754_pow+0x232>
 801479c:	4598      	cmp	r8, r3
 801479e:	d80b      	bhi.n	80147b8 <__ieee754_pow+0x220>
 80147a0:	f1b9 0f00 	cmp.w	r9, #0
 80147a4:	da0b      	bge.n	80147be <__ieee754_pow+0x226>
 80147a6:	2000      	movs	r0, #0
 80147a8:	b011      	add	sp, #68	@ 0x44
 80147aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ae:	f000 bfe7 	b.w	8015780 <__math_oflow>
 80147b2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014818 <__ieee754_pow+0x280>
 80147b6:	e7e7      	b.n	8014788 <__ieee754_pow+0x1f0>
 80147b8:	f1b9 0f00 	cmp.w	r9, #0
 80147bc:	dcf3      	bgt.n	80147a6 <__ieee754_pow+0x20e>
 80147be:	2000      	movs	r0, #0
 80147c0:	b011      	add	sp, #68	@ 0x44
 80147c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c6:	f000 bfd3 	b.w	8015770 <__math_uflow>
 80147ca:	4598      	cmp	r8, r3
 80147cc:	d20c      	bcs.n	80147e8 <__ieee754_pow+0x250>
 80147ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147d2:	2200      	movs	r2, #0
 80147d4:	2300      	movs	r3, #0
 80147d6:	f7ec f9a1 	bl	8000b1c <__aeabi_dcmplt>
 80147da:	3800      	subs	r0, #0
 80147dc:	bf18      	it	ne
 80147de:	2001      	movne	r0, #1
 80147e0:	f1b9 0f00 	cmp.w	r9, #0
 80147e4:	daec      	bge.n	80147c0 <__ieee754_pow+0x228>
 80147e6:	e7df      	b.n	80147a8 <__ieee754_pow+0x210>
 80147e8:	4b10      	ldr	r3, [pc, #64]	@ (801482c <__ieee754_pow+0x294>)
 80147ea:	4598      	cmp	r8, r3
 80147ec:	f04f 0200 	mov.w	r2, #0
 80147f0:	d924      	bls.n	801483c <__ieee754_pow+0x2a4>
 80147f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147f6:	2300      	movs	r3, #0
 80147f8:	f7ec f990 	bl	8000b1c <__aeabi_dcmplt>
 80147fc:	3800      	subs	r0, #0
 80147fe:	bf18      	it	ne
 8014800:	2001      	movne	r0, #1
 8014802:	f1b9 0f00 	cmp.w	r9, #0
 8014806:	dccf      	bgt.n	80147a8 <__ieee754_pow+0x210>
 8014808:	e7da      	b.n	80147c0 <__ieee754_pow+0x228>
 801480a:	bf00      	nop
 801480c:	f3af 8000 	nop.w
 8014810:	00000000 	.word	0x00000000
 8014814:	3ff00000 	.word	0x3ff00000
 8014818:	00000000 	.word	0x00000000
 801481c:	bff00000 	.word	0xbff00000
 8014820:	fff00000 	.word	0xfff00000
 8014824:	7ff00000 	.word	0x7ff00000
 8014828:	433fffff 	.word	0x433fffff
 801482c:	3ff00000 	.word	0x3ff00000
 8014830:	3fefffff 	.word	0x3fefffff
 8014834:	3fe00000 	.word	0x3fe00000
 8014838:	43f00000 	.word	0x43f00000
 801483c:	4b5a      	ldr	r3, [pc, #360]	@ (80149a8 <__ieee754_pow+0x410>)
 801483e:	f7eb fd43 	bl	80002c8 <__aeabi_dsub>
 8014842:	a351      	add	r3, pc, #324	@ (adr r3, 8014988 <__ieee754_pow+0x3f0>)
 8014844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014848:	4604      	mov	r4, r0
 801484a:	460d      	mov	r5, r1
 801484c:	f7eb fef4 	bl	8000638 <__aeabi_dmul>
 8014850:	a34f      	add	r3, pc, #316	@ (adr r3, 8014990 <__ieee754_pow+0x3f8>)
 8014852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014856:	4606      	mov	r6, r0
 8014858:	460f      	mov	r7, r1
 801485a:	4620      	mov	r0, r4
 801485c:	4629      	mov	r1, r5
 801485e:	f7eb feeb 	bl	8000638 <__aeabi_dmul>
 8014862:	4b52      	ldr	r3, [pc, #328]	@ (80149ac <__ieee754_pow+0x414>)
 8014864:	4682      	mov	sl, r0
 8014866:	468b      	mov	fp, r1
 8014868:	2200      	movs	r2, #0
 801486a:	4620      	mov	r0, r4
 801486c:	4629      	mov	r1, r5
 801486e:	f7eb fee3 	bl	8000638 <__aeabi_dmul>
 8014872:	4602      	mov	r2, r0
 8014874:	460b      	mov	r3, r1
 8014876:	a148      	add	r1, pc, #288	@ (adr r1, 8014998 <__ieee754_pow+0x400>)
 8014878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801487c:	f7eb fd24 	bl	80002c8 <__aeabi_dsub>
 8014880:	4622      	mov	r2, r4
 8014882:	462b      	mov	r3, r5
 8014884:	f7eb fed8 	bl	8000638 <__aeabi_dmul>
 8014888:	4602      	mov	r2, r0
 801488a:	460b      	mov	r3, r1
 801488c:	2000      	movs	r0, #0
 801488e:	4948      	ldr	r1, [pc, #288]	@ (80149b0 <__ieee754_pow+0x418>)
 8014890:	f7eb fd1a 	bl	80002c8 <__aeabi_dsub>
 8014894:	4622      	mov	r2, r4
 8014896:	4680      	mov	r8, r0
 8014898:	4689      	mov	r9, r1
 801489a:	462b      	mov	r3, r5
 801489c:	4620      	mov	r0, r4
 801489e:	4629      	mov	r1, r5
 80148a0:	f7eb feca 	bl	8000638 <__aeabi_dmul>
 80148a4:	4602      	mov	r2, r0
 80148a6:	460b      	mov	r3, r1
 80148a8:	4640      	mov	r0, r8
 80148aa:	4649      	mov	r1, r9
 80148ac:	f7eb fec4 	bl	8000638 <__aeabi_dmul>
 80148b0:	a33b      	add	r3, pc, #236	@ (adr r3, 80149a0 <__ieee754_pow+0x408>)
 80148b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b6:	f7eb febf 	bl	8000638 <__aeabi_dmul>
 80148ba:	4602      	mov	r2, r0
 80148bc:	460b      	mov	r3, r1
 80148be:	4650      	mov	r0, sl
 80148c0:	4659      	mov	r1, fp
 80148c2:	f7eb fd01 	bl	80002c8 <__aeabi_dsub>
 80148c6:	4602      	mov	r2, r0
 80148c8:	460b      	mov	r3, r1
 80148ca:	4680      	mov	r8, r0
 80148cc:	4689      	mov	r9, r1
 80148ce:	4630      	mov	r0, r6
 80148d0:	4639      	mov	r1, r7
 80148d2:	f7eb fcfb 	bl	80002cc <__adddf3>
 80148d6:	2400      	movs	r4, #0
 80148d8:	4632      	mov	r2, r6
 80148da:	463b      	mov	r3, r7
 80148dc:	4620      	mov	r0, r4
 80148de:	460d      	mov	r5, r1
 80148e0:	f7eb fcf2 	bl	80002c8 <__aeabi_dsub>
 80148e4:	4602      	mov	r2, r0
 80148e6:	460b      	mov	r3, r1
 80148e8:	4640      	mov	r0, r8
 80148ea:	4649      	mov	r1, r9
 80148ec:	f7eb fcec 	bl	80002c8 <__aeabi_dsub>
 80148f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80148f8:	2300      	movs	r3, #0
 80148fa:	9304      	str	r3, [sp, #16]
 80148fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014900:	4606      	mov	r6, r0
 8014902:	460f      	mov	r7, r1
 8014904:	4652      	mov	r2, sl
 8014906:	465b      	mov	r3, fp
 8014908:	e9dd 0100 	ldrd	r0, r1, [sp]
 801490c:	f7eb fcdc 	bl	80002c8 <__aeabi_dsub>
 8014910:	4622      	mov	r2, r4
 8014912:	462b      	mov	r3, r5
 8014914:	f7eb fe90 	bl	8000638 <__aeabi_dmul>
 8014918:	e9dd 2300 	ldrd	r2, r3, [sp]
 801491c:	4680      	mov	r8, r0
 801491e:	4689      	mov	r9, r1
 8014920:	4630      	mov	r0, r6
 8014922:	4639      	mov	r1, r7
 8014924:	f7eb fe88 	bl	8000638 <__aeabi_dmul>
 8014928:	4602      	mov	r2, r0
 801492a:	460b      	mov	r3, r1
 801492c:	4640      	mov	r0, r8
 801492e:	4649      	mov	r1, r9
 8014930:	f7eb fccc 	bl	80002cc <__adddf3>
 8014934:	4652      	mov	r2, sl
 8014936:	465b      	mov	r3, fp
 8014938:	4606      	mov	r6, r0
 801493a:	460f      	mov	r7, r1
 801493c:	4620      	mov	r0, r4
 801493e:	4629      	mov	r1, r5
 8014940:	f7eb fe7a 	bl	8000638 <__aeabi_dmul>
 8014944:	460b      	mov	r3, r1
 8014946:	4602      	mov	r2, r0
 8014948:	4680      	mov	r8, r0
 801494a:	4689      	mov	r9, r1
 801494c:	4630      	mov	r0, r6
 801494e:	4639      	mov	r1, r7
 8014950:	f7eb fcbc 	bl	80002cc <__adddf3>
 8014954:	4b17      	ldr	r3, [pc, #92]	@ (80149b4 <__ieee754_pow+0x41c>)
 8014956:	4299      	cmp	r1, r3
 8014958:	4604      	mov	r4, r0
 801495a:	460d      	mov	r5, r1
 801495c:	468a      	mov	sl, r1
 801495e:	468b      	mov	fp, r1
 8014960:	f340 82ef 	ble.w	8014f42 <__ieee754_pow+0x9aa>
 8014964:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014968:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801496c:	4303      	orrs	r3, r0
 801496e:	f000 81e8 	beq.w	8014d42 <__ieee754_pow+0x7aa>
 8014972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014976:	2200      	movs	r2, #0
 8014978:	2300      	movs	r3, #0
 801497a:	f7ec f8cf 	bl	8000b1c <__aeabi_dcmplt>
 801497e:	3800      	subs	r0, #0
 8014980:	bf18      	it	ne
 8014982:	2001      	movne	r0, #1
 8014984:	e710      	b.n	80147a8 <__ieee754_pow+0x210>
 8014986:	bf00      	nop
 8014988:	60000000 	.word	0x60000000
 801498c:	3ff71547 	.word	0x3ff71547
 8014990:	f85ddf44 	.word	0xf85ddf44
 8014994:	3e54ae0b 	.word	0x3e54ae0b
 8014998:	55555555 	.word	0x55555555
 801499c:	3fd55555 	.word	0x3fd55555
 80149a0:	652b82fe 	.word	0x652b82fe
 80149a4:	3ff71547 	.word	0x3ff71547
 80149a8:	3ff00000 	.word	0x3ff00000
 80149ac:	3fd00000 	.word	0x3fd00000
 80149b0:	3fe00000 	.word	0x3fe00000
 80149b4:	408fffff 	.word	0x408fffff
 80149b8:	4bd5      	ldr	r3, [pc, #852]	@ (8014d10 <__ieee754_pow+0x778>)
 80149ba:	402b      	ands	r3, r5
 80149bc:	2200      	movs	r2, #0
 80149be:	b92b      	cbnz	r3, 80149cc <__ieee754_pow+0x434>
 80149c0:	4bd4      	ldr	r3, [pc, #848]	@ (8014d14 <__ieee754_pow+0x77c>)
 80149c2:	f7eb fe39 	bl	8000638 <__aeabi_dmul>
 80149c6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80149ca:	468b      	mov	fp, r1
 80149cc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80149d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80149d4:	4413      	add	r3, r2
 80149d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80149d8:	4bcf      	ldr	r3, [pc, #828]	@ (8014d18 <__ieee754_pow+0x780>)
 80149da:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80149de:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80149e2:	459b      	cmp	fp, r3
 80149e4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80149e8:	dd08      	ble.n	80149fc <__ieee754_pow+0x464>
 80149ea:	4bcc      	ldr	r3, [pc, #816]	@ (8014d1c <__ieee754_pow+0x784>)
 80149ec:	459b      	cmp	fp, r3
 80149ee:	f340 81a5 	ble.w	8014d3c <__ieee754_pow+0x7a4>
 80149f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149f4:	3301      	adds	r3, #1
 80149f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80149f8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80149fc:	f04f 0a00 	mov.w	sl, #0
 8014a00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a06:	4bc6      	ldr	r3, [pc, #792]	@ (8014d20 <__ieee754_pow+0x788>)
 8014a08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a0c:	ed93 7b00 	vldr	d7, [r3]
 8014a10:	4629      	mov	r1, r5
 8014a12:	ec53 2b17 	vmov	r2, r3, d7
 8014a16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014a1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014a1e:	f7eb fc53 	bl	80002c8 <__aeabi_dsub>
 8014a22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014a26:	4606      	mov	r6, r0
 8014a28:	460f      	mov	r7, r1
 8014a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a2e:	f7eb fc4d 	bl	80002cc <__adddf3>
 8014a32:	4602      	mov	r2, r0
 8014a34:	460b      	mov	r3, r1
 8014a36:	2000      	movs	r0, #0
 8014a38:	49ba      	ldr	r1, [pc, #744]	@ (8014d24 <__ieee754_pow+0x78c>)
 8014a3a:	f7eb ff27 	bl	800088c <__aeabi_ddiv>
 8014a3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014a42:	4602      	mov	r2, r0
 8014a44:	460b      	mov	r3, r1
 8014a46:	4630      	mov	r0, r6
 8014a48:	4639      	mov	r1, r7
 8014a4a:	f7eb fdf5 	bl	8000638 <__aeabi_dmul>
 8014a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014a52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014a56:	106d      	asrs	r5, r5, #1
 8014a58:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014a5c:	f04f 0b00 	mov.w	fp, #0
 8014a60:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014a64:	4661      	mov	r1, ip
 8014a66:	2200      	movs	r2, #0
 8014a68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014a6c:	4658      	mov	r0, fp
 8014a6e:	46e1      	mov	r9, ip
 8014a70:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8014a74:	4614      	mov	r4, r2
 8014a76:	461d      	mov	r5, r3
 8014a78:	f7eb fdde 	bl	8000638 <__aeabi_dmul>
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	460b      	mov	r3, r1
 8014a80:	4630      	mov	r0, r6
 8014a82:	4639      	mov	r1, r7
 8014a84:	f7eb fc20 	bl	80002c8 <__aeabi_dsub>
 8014a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	460f      	mov	r7, r1
 8014a90:	4620      	mov	r0, r4
 8014a92:	4629      	mov	r1, r5
 8014a94:	f7eb fc18 	bl	80002c8 <__aeabi_dsub>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	460b      	mov	r3, r1
 8014a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014aa0:	f7eb fc12 	bl	80002c8 <__aeabi_dsub>
 8014aa4:	465a      	mov	r2, fp
 8014aa6:	464b      	mov	r3, r9
 8014aa8:	f7eb fdc6 	bl	8000638 <__aeabi_dmul>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	4639      	mov	r1, r7
 8014ab4:	f7eb fc08 	bl	80002c8 <__aeabi_dsub>
 8014ab8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014abc:	f7eb fdbc 	bl	8000638 <__aeabi_dmul>
 8014ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ac4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ac8:	4610      	mov	r0, r2
 8014aca:	4619      	mov	r1, r3
 8014acc:	f7eb fdb4 	bl	8000638 <__aeabi_dmul>
 8014ad0:	a37d      	add	r3, pc, #500	@ (adr r3, 8014cc8 <__ieee754_pow+0x730>)
 8014ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	460d      	mov	r5, r1
 8014ada:	f7eb fdad 	bl	8000638 <__aeabi_dmul>
 8014ade:	a37c      	add	r3, pc, #496	@ (adr r3, 8014cd0 <__ieee754_pow+0x738>)
 8014ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae4:	f7eb fbf2 	bl	80002cc <__adddf3>
 8014ae8:	4622      	mov	r2, r4
 8014aea:	462b      	mov	r3, r5
 8014aec:	f7eb fda4 	bl	8000638 <__aeabi_dmul>
 8014af0:	a379      	add	r3, pc, #484	@ (adr r3, 8014cd8 <__ieee754_pow+0x740>)
 8014af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af6:	f7eb fbe9 	bl	80002cc <__adddf3>
 8014afa:	4622      	mov	r2, r4
 8014afc:	462b      	mov	r3, r5
 8014afe:	f7eb fd9b 	bl	8000638 <__aeabi_dmul>
 8014b02:	a377      	add	r3, pc, #476	@ (adr r3, 8014ce0 <__ieee754_pow+0x748>)
 8014b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b08:	f7eb fbe0 	bl	80002cc <__adddf3>
 8014b0c:	4622      	mov	r2, r4
 8014b0e:	462b      	mov	r3, r5
 8014b10:	f7eb fd92 	bl	8000638 <__aeabi_dmul>
 8014b14:	a374      	add	r3, pc, #464	@ (adr r3, 8014ce8 <__ieee754_pow+0x750>)
 8014b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1a:	f7eb fbd7 	bl	80002cc <__adddf3>
 8014b1e:	4622      	mov	r2, r4
 8014b20:	462b      	mov	r3, r5
 8014b22:	f7eb fd89 	bl	8000638 <__aeabi_dmul>
 8014b26:	a372      	add	r3, pc, #456	@ (adr r3, 8014cf0 <__ieee754_pow+0x758>)
 8014b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2c:	f7eb fbce 	bl	80002cc <__adddf3>
 8014b30:	4622      	mov	r2, r4
 8014b32:	4606      	mov	r6, r0
 8014b34:	460f      	mov	r7, r1
 8014b36:	462b      	mov	r3, r5
 8014b38:	4620      	mov	r0, r4
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	f7eb fd7c 	bl	8000638 <__aeabi_dmul>
 8014b40:	4602      	mov	r2, r0
 8014b42:	460b      	mov	r3, r1
 8014b44:	4630      	mov	r0, r6
 8014b46:	4639      	mov	r1, r7
 8014b48:	f7eb fd76 	bl	8000638 <__aeabi_dmul>
 8014b4c:	465a      	mov	r2, fp
 8014b4e:	4604      	mov	r4, r0
 8014b50:	460d      	mov	r5, r1
 8014b52:	464b      	mov	r3, r9
 8014b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b58:	f7eb fbb8 	bl	80002cc <__adddf3>
 8014b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b60:	f7eb fd6a 	bl	8000638 <__aeabi_dmul>
 8014b64:	4622      	mov	r2, r4
 8014b66:	462b      	mov	r3, r5
 8014b68:	f7eb fbb0 	bl	80002cc <__adddf3>
 8014b6c:	465a      	mov	r2, fp
 8014b6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014b72:	464b      	mov	r3, r9
 8014b74:	4658      	mov	r0, fp
 8014b76:	4649      	mov	r1, r9
 8014b78:	f7eb fd5e 	bl	8000638 <__aeabi_dmul>
 8014b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8014d28 <__ieee754_pow+0x790>)
 8014b7e:	2200      	movs	r2, #0
 8014b80:	4606      	mov	r6, r0
 8014b82:	460f      	mov	r7, r1
 8014b84:	f7eb fba2 	bl	80002cc <__adddf3>
 8014b88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b8c:	f7eb fb9e 	bl	80002cc <__adddf3>
 8014b90:	46d8      	mov	r8, fp
 8014b92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8014b96:	460d      	mov	r5, r1
 8014b98:	465a      	mov	r2, fp
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	4640      	mov	r0, r8
 8014b9e:	4649      	mov	r1, r9
 8014ba0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8014ba4:	f7eb fd48 	bl	8000638 <__aeabi_dmul>
 8014ba8:	465c      	mov	r4, fp
 8014baa:	4680      	mov	r8, r0
 8014bac:	4689      	mov	r9, r1
 8014bae:	4b5e      	ldr	r3, [pc, #376]	@ (8014d28 <__ieee754_pow+0x790>)
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	f7eb fb87 	bl	80002c8 <__aeabi_dsub>
 8014bba:	4632      	mov	r2, r6
 8014bbc:	463b      	mov	r3, r7
 8014bbe:	f7eb fb83 	bl	80002c8 <__aeabi_dsub>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014bca:	f7eb fb7d 	bl	80002c8 <__aeabi_dsub>
 8014bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bd2:	f7eb fd31 	bl	8000638 <__aeabi_dmul>
 8014bd6:	4622      	mov	r2, r4
 8014bd8:	4606      	mov	r6, r0
 8014bda:	460f      	mov	r7, r1
 8014bdc:	462b      	mov	r3, r5
 8014bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014be2:	f7eb fd29 	bl	8000638 <__aeabi_dmul>
 8014be6:	4602      	mov	r2, r0
 8014be8:	460b      	mov	r3, r1
 8014bea:	4630      	mov	r0, r6
 8014bec:	4639      	mov	r1, r7
 8014bee:	f7eb fb6d 	bl	80002cc <__adddf3>
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	460f      	mov	r7, r1
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	4640      	mov	r0, r8
 8014bfc:	4649      	mov	r1, r9
 8014bfe:	f7eb fb65 	bl	80002cc <__adddf3>
 8014c02:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014c06:	a33c      	add	r3, pc, #240	@ (adr r3, 8014cf8 <__ieee754_pow+0x760>)
 8014c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0c:	4658      	mov	r0, fp
 8014c0e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8014c12:	460d      	mov	r5, r1
 8014c14:	f7eb fd10 	bl	8000638 <__aeabi_dmul>
 8014c18:	465c      	mov	r4, fp
 8014c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c1e:	4642      	mov	r2, r8
 8014c20:	464b      	mov	r3, r9
 8014c22:	4620      	mov	r0, r4
 8014c24:	4629      	mov	r1, r5
 8014c26:	f7eb fb4f 	bl	80002c8 <__aeabi_dsub>
 8014c2a:	4602      	mov	r2, r0
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	4630      	mov	r0, r6
 8014c30:	4639      	mov	r1, r7
 8014c32:	f7eb fb49 	bl	80002c8 <__aeabi_dsub>
 8014c36:	a332      	add	r3, pc, #200	@ (adr r3, 8014d00 <__ieee754_pow+0x768>)
 8014c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3c:	f7eb fcfc 	bl	8000638 <__aeabi_dmul>
 8014c40:	a331      	add	r3, pc, #196	@ (adr r3, 8014d08 <__ieee754_pow+0x770>)
 8014c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c46:	4606      	mov	r6, r0
 8014c48:	460f      	mov	r7, r1
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	4629      	mov	r1, r5
 8014c4e:	f7eb fcf3 	bl	8000638 <__aeabi_dmul>
 8014c52:	4602      	mov	r2, r0
 8014c54:	460b      	mov	r3, r1
 8014c56:	4630      	mov	r0, r6
 8014c58:	4639      	mov	r1, r7
 8014c5a:	f7eb fb37 	bl	80002cc <__adddf3>
 8014c5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014c60:	4b32      	ldr	r3, [pc, #200]	@ (8014d2c <__ieee754_pow+0x794>)
 8014c62:	4413      	add	r3, r2
 8014c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c68:	f7eb fb30 	bl	80002cc <__adddf3>
 8014c6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014c70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014c72:	f7eb fc77 	bl	8000564 <__aeabi_i2d>
 8014c76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014c78:	4b2d      	ldr	r3, [pc, #180]	@ (8014d30 <__ieee754_pow+0x798>)
 8014c7a:	4413      	add	r3, r2
 8014c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c80:	4606      	mov	r6, r0
 8014c82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c86:	460f      	mov	r7, r1
 8014c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c8c:	f7eb fb1e 	bl	80002cc <__adddf3>
 8014c90:	4642      	mov	r2, r8
 8014c92:	464b      	mov	r3, r9
 8014c94:	f7eb fb1a 	bl	80002cc <__adddf3>
 8014c98:	4632      	mov	r2, r6
 8014c9a:	463b      	mov	r3, r7
 8014c9c:	f7eb fb16 	bl	80002cc <__adddf3>
 8014ca0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8014ca4:	4632      	mov	r2, r6
 8014ca6:	463b      	mov	r3, r7
 8014ca8:	4658      	mov	r0, fp
 8014caa:	460d      	mov	r5, r1
 8014cac:	f7eb fb0c 	bl	80002c8 <__aeabi_dsub>
 8014cb0:	4642      	mov	r2, r8
 8014cb2:	464b      	mov	r3, r9
 8014cb4:	f7eb fb08 	bl	80002c8 <__aeabi_dsub>
 8014cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cbc:	f7eb fb04 	bl	80002c8 <__aeabi_dsub>
 8014cc0:	465c      	mov	r4, fp
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	e036      	b.n	8014d34 <__ieee754_pow+0x79c>
 8014cc6:	bf00      	nop
 8014cc8:	4a454eef 	.word	0x4a454eef
 8014ccc:	3fca7e28 	.word	0x3fca7e28
 8014cd0:	93c9db65 	.word	0x93c9db65
 8014cd4:	3fcd864a 	.word	0x3fcd864a
 8014cd8:	a91d4101 	.word	0xa91d4101
 8014cdc:	3fd17460 	.word	0x3fd17460
 8014ce0:	518f264d 	.word	0x518f264d
 8014ce4:	3fd55555 	.word	0x3fd55555
 8014ce8:	db6fabff 	.word	0xdb6fabff
 8014cec:	3fdb6db6 	.word	0x3fdb6db6
 8014cf0:	33333303 	.word	0x33333303
 8014cf4:	3fe33333 	.word	0x3fe33333
 8014cf8:	e0000000 	.word	0xe0000000
 8014cfc:	3feec709 	.word	0x3feec709
 8014d00:	dc3a03fd 	.word	0xdc3a03fd
 8014d04:	3feec709 	.word	0x3feec709
 8014d08:	145b01f5 	.word	0x145b01f5
 8014d0c:	be3e2fe0 	.word	0xbe3e2fe0
 8014d10:	7ff00000 	.word	0x7ff00000
 8014d14:	43400000 	.word	0x43400000
 8014d18:	0003988e 	.word	0x0003988e
 8014d1c:	000bb679 	.word	0x000bb679
 8014d20:	080164e0 	.word	0x080164e0
 8014d24:	3ff00000 	.word	0x3ff00000
 8014d28:	40080000 	.word	0x40080000
 8014d2c:	080164c0 	.word	0x080164c0
 8014d30:	080164d0 	.word	0x080164d0
 8014d34:	460b      	mov	r3, r1
 8014d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d3a:	e5d7      	b.n	80148ec <__ieee754_pow+0x354>
 8014d3c:	f04f 0a01 	mov.w	sl, #1
 8014d40:	e65e      	b.n	8014a00 <__ieee754_pow+0x468>
 8014d42:	a3b4      	add	r3, pc, #720	@ (adr r3, 8015014 <__ieee754_pow+0xa7c>)
 8014d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d48:	4630      	mov	r0, r6
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	f7eb fabe 	bl	80002cc <__adddf3>
 8014d50:	4642      	mov	r2, r8
 8014d52:	e9cd 0100 	strd	r0, r1, [sp]
 8014d56:	464b      	mov	r3, r9
 8014d58:	4620      	mov	r0, r4
 8014d5a:	4629      	mov	r1, r5
 8014d5c:	f7eb fab4 	bl	80002c8 <__aeabi_dsub>
 8014d60:	4602      	mov	r2, r0
 8014d62:	460b      	mov	r3, r1
 8014d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d68:	f7eb fef6 	bl	8000b58 <__aeabi_dcmpgt>
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	f47f ae00 	bne.w	8014972 <__ieee754_pow+0x3da>
 8014d72:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8014d76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014d7a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8014d7e:	fa43 fa0a 	asr.w	sl, r3, sl
 8014d82:	44da      	add	sl, fp
 8014d84:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8014d88:	489d      	ldr	r0, [pc, #628]	@ (8015000 <__ieee754_pow+0xa68>)
 8014d8a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8014d8e:	4108      	asrs	r0, r1
 8014d90:	ea00 030a 	and.w	r3, r0, sl
 8014d94:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8014d98:	f1c1 0114 	rsb	r1, r1, #20
 8014d9c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8014da0:	fa4a fa01 	asr.w	sl, sl, r1
 8014da4:	f1bb 0f00 	cmp.w	fp, #0
 8014da8:	4640      	mov	r0, r8
 8014daa:	4649      	mov	r1, r9
 8014dac:	f04f 0200 	mov.w	r2, #0
 8014db0:	bfb8      	it	lt
 8014db2:	f1ca 0a00 	rsblt	sl, sl, #0
 8014db6:	f7eb fa87 	bl	80002c8 <__aeabi_dsub>
 8014dba:	4680      	mov	r8, r0
 8014dbc:	4689      	mov	r9, r1
 8014dbe:	4632      	mov	r2, r6
 8014dc0:	463b      	mov	r3, r7
 8014dc2:	4640      	mov	r0, r8
 8014dc4:	4649      	mov	r1, r9
 8014dc6:	f7eb fa81 	bl	80002cc <__adddf3>
 8014dca:	2400      	movs	r4, #0
 8014dcc:	a37c      	add	r3, pc, #496	@ (adr r3, 8014fc0 <__ieee754_pow+0xa28>)
 8014dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	460d      	mov	r5, r1
 8014dd6:	f7eb fc2f 	bl	8000638 <__aeabi_dmul>
 8014dda:	4642      	mov	r2, r8
 8014ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8014de0:	464b      	mov	r3, r9
 8014de2:	4620      	mov	r0, r4
 8014de4:	4629      	mov	r1, r5
 8014de6:	f7eb fa6f 	bl	80002c8 <__aeabi_dsub>
 8014dea:	4602      	mov	r2, r0
 8014dec:	460b      	mov	r3, r1
 8014dee:	4630      	mov	r0, r6
 8014df0:	4639      	mov	r1, r7
 8014df2:	f7eb fa69 	bl	80002c8 <__aeabi_dsub>
 8014df6:	a374      	add	r3, pc, #464	@ (adr r3, 8014fc8 <__ieee754_pow+0xa30>)
 8014df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfc:	f7eb fc1c 	bl	8000638 <__aeabi_dmul>
 8014e00:	a373      	add	r3, pc, #460	@ (adr r3, 8014fd0 <__ieee754_pow+0xa38>)
 8014e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e06:	4680      	mov	r8, r0
 8014e08:	4689      	mov	r9, r1
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	4629      	mov	r1, r5
 8014e0e:	f7eb fc13 	bl	8000638 <__aeabi_dmul>
 8014e12:	4602      	mov	r2, r0
 8014e14:	460b      	mov	r3, r1
 8014e16:	4640      	mov	r0, r8
 8014e18:	4649      	mov	r1, r9
 8014e1a:	f7eb fa57 	bl	80002cc <__adddf3>
 8014e1e:	4604      	mov	r4, r0
 8014e20:	460d      	mov	r5, r1
 8014e22:	4602      	mov	r2, r0
 8014e24:	460b      	mov	r3, r1
 8014e26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e2a:	f7eb fa4f 	bl	80002cc <__adddf3>
 8014e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e32:	4680      	mov	r8, r0
 8014e34:	4689      	mov	r9, r1
 8014e36:	f7eb fa47 	bl	80002c8 <__aeabi_dsub>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	4620      	mov	r0, r4
 8014e40:	4629      	mov	r1, r5
 8014e42:	f7eb fa41 	bl	80002c8 <__aeabi_dsub>
 8014e46:	4642      	mov	r2, r8
 8014e48:	4606      	mov	r6, r0
 8014e4a:	460f      	mov	r7, r1
 8014e4c:	464b      	mov	r3, r9
 8014e4e:	4640      	mov	r0, r8
 8014e50:	4649      	mov	r1, r9
 8014e52:	f7eb fbf1 	bl	8000638 <__aeabi_dmul>
 8014e56:	a360      	add	r3, pc, #384	@ (adr r3, 8014fd8 <__ieee754_pow+0xa40>)
 8014e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	460d      	mov	r5, r1
 8014e60:	f7eb fbea 	bl	8000638 <__aeabi_dmul>
 8014e64:	a35e      	add	r3, pc, #376	@ (adr r3, 8014fe0 <__ieee754_pow+0xa48>)
 8014e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6a:	f7eb fa2d 	bl	80002c8 <__aeabi_dsub>
 8014e6e:	4622      	mov	r2, r4
 8014e70:	462b      	mov	r3, r5
 8014e72:	f7eb fbe1 	bl	8000638 <__aeabi_dmul>
 8014e76:	a35c      	add	r3, pc, #368	@ (adr r3, 8014fe8 <__ieee754_pow+0xa50>)
 8014e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7c:	f7eb fa26 	bl	80002cc <__adddf3>
 8014e80:	4622      	mov	r2, r4
 8014e82:	462b      	mov	r3, r5
 8014e84:	f7eb fbd8 	bl	8000638 <__aeabi_dmul>
 8014e88:	a359      	add	r3, pc, #356	@ (adr r3, 8014ff0 <__ieee754_pow+0xa58>)
 8014e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8e:	f7eb fa1b 	bl	80002c8 <__aeabi_dsub>
 8014e92:	4622      	mov	r2, r4
 8014e94:	462b      	mov	r3, r5
 8014e96:	f7eb fbcf 	bl	8000638 <__aeabi_dmul>
 8014e9a:	a357      	add	r3, pc, #348	@ (adr r3, 8014ff8 <__ieee754_pow+0xa60>)
 8014e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea0:	f7eb fa14 	bl	80002cc <__adddf3>
 8014ea4:	4622      	mov	r2, r4
 8014ea6:	462b      	mov	r3, r5
 8014ea8:	f7eb fbc6 	bl	8000638 <__aeabi_dmul>
 8014eac:	4602      	mov	r2, r0
 8014eae:	460b      	mov	r3, r1
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	4649      	mov	r1, r9
 8014eb4:	f7eb fa08 	bl	80002c8 <__aeabi_dsub>
 8014eb8:	4604      	mov	r4, r0
 8014eba:	460d      	mov	r5, r1
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	4640      	mov	r0, r8
 8014ec2:	4649      	mov	r1, r9
 8014ec4:	f7eb fbb8 	bl	8000638 <__aeabi_dmul>
 8014ec8:	2200      	movs	r2, #0
 8014eca:	e9cd 0100 	strd	r0, r1, [sp]
 8014ece:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	4629      	mov	r1, r5
 8014ed6:	f7eb f9f7 	bl	80002c8 <__aeabi_dsub>
 8014eda:	4602      	mov	r2, r0
 8014edc:	460b      	mov	r3, r1
 8014ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ee2:	f7eb fcd3 	bl	800088c <__aeabi_ddiv>
 8014ee6:	4632      	mov	r2, r6
 8014ee8:	4604      	mov	r4, r0
 8014eea:	460d      	mov	r5, r1
 8014eec:	463b      	mov	r3, r7
 8014eee:	4640      	mov	r0, r8
 8014ef0:	4649      	mov	r1, r9
 8014ef2:	f7eb fba1 	bl	8000638 <__aeabi_dmul>
 8014ef6:	4632      	mov	r2, r6
 8014ef8:	463b      	mov	r3, r7
 8014efa:	f7eb f9e7 	bl	80002cc <__adddf3>
 8014efe:	4602      	mov	r2, r0
 8014f00:	460b      	mov	r3, r1
 8014f02:	4620      	mov	r0, r4
 8014f04:	4629      	mov	r1, r5
 8014f06:	f7eb f9df 	bl	80002c8 <__aeabi_dsub>
 8014f0a:	4642      	mov	r2, r8
 8014f0c:	464b      	mov	r3, r9
 8014f0e:	f7eb f9db 	bl	80002c8 <__aeabi_dsub>
 8014f12:	460b      	mov	r3, r1
 8014f14:	4602      	mov	r2, r0
 8014f16:	493b      	ldr	r1, [pc, #236]	@ (8015004 <__ieee754_pow+0xa6c>)
 8014f18:	2000      	movs	r0, #0
 8014f1a:	f7eb f9d5 	bl	80002c8 <__aeabi_dsub>
 8014f1e:	ec41 0b10 	vmov	d0, r0, r1
 8014f22:	ee10 3a90 	vmov	r3, s1
 8014f26:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014f2e:	da30      	bge.n	8014f92 <__ieee754_pow+0x9fa>
 8014f30:	4650      	mov	r0, sl
 8014f32:	f000 fb71 	bl	8015618 <scalbn>
 8014f36:	ec51 0b10 	vmov	r0, r1, d0
 8014f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f3e:	f7ff bbd2 	b.w	80146e6 <__ieee754_pow+0x14e>
 8014f42:	4c31      	ldr	r4, [pc, #196]	@ (8015008 <__ieee754_pow+0xa70>)
 8014f44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014f48:	42a3      	cmp	r3, r4
 8014f4a:	d91a      	bls.n	8014f82 <__ieee754_pow+0x9ea>
 8014f4c:	4b2f      	ldr	r3, [pc, #188]	@ (801500c <__ieee754_pow+0xa74>)
 8014f4e:	440b      	add	r3, r1
 8014f50:	4303      	orrs	r3, r0
 8014f52:	d009      	beq.n	8014f68 <__ieee754_pow+0x9d0>
 8014f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	f7eb fdde 	bl	8000b1c <__aeabi_dcmplt>
 8014f60:	3800      	subs	r0, #0
 8014f62:	bf18      	it	ne
 8014f64:	2001      	movne	r0, #1
 8014f66:	e42b      	b.n	80147c0 <__ieee754_pow+0x228>
 8014f68:	4642      	mov	r2, r8
 8014f6a:	464b      	mov	r3, r9
 8014f6c:	f7eb f9ac 	bl	80002c8 <__aeabi_dsub>
 8014f70:	4632      	mov	r2, r6
 8014f72:	463b      	mov	r3, r7
 8014f74:	f7eb fde6 	bl	8000b44 <__aeabi_dcmpge>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d1eb      	bne.n	8014f54 <__ieee754_pow+0x9bc>
 8014f7c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801501c <__ieee754_pow+0xa84>
 8014f80:	e6f7      	b.n	8014d72 <__ieee754_pow+0x7da>
 8014f82:	469a      	mov	sl, r3
 8014f84:	4b22      	ldr	r3, [pc, #136]	@ (8015010 <__ieee754_pow+0xa78>)
 8014f86:	459a      	cmp	sl, r3
 8014f88:	f63f aef3 	bhi.w	8014d72 <__ieee754_pow+0x7da>
 8014f8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014f90:	e715      	b.n	8014dbe <__ieee754_pow+0x826>
 8014f92:	ec51 0b10 	vmov	r0, r1, d0
 8014f96:	4619      	mov	r1, r3
 8014f98:	e7cf      	b.n	8014f3a <__ieee754_pow+0x9a2>
 8014f9a:	491a      	ldr	r1, [pc, #104]	@ (8015004 <__ieee754_pow+0xa6c>)
 8014f9c:	2000      	movs	r0, #0
 8014f9e:	f7ff bb18 	b.w	80145d2 <__ieee754_pow+0x3a>
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	f7ff bb14 	b.w	80145d2 <__ieee754_pow+0x3a>
 8014faa:	4630      	mov	r0, r6
 8014fac:	4639      	mov	r1, r7
 8014fae:	f7ff bb10 	b.w	80145d2 <__ieee754_pow+0x3a>
 8014fb2:	460c      	mov	r4, r1
 8014fb4:	f7ff bb5e 	b.w	8014674 <__ieee754_pow+0xdc>
 8014fb8:	2400      	movs	r4, #0
 8014fba:	f7ff bb49 	b.w	8014650 <__ieee754_pow+0xb8>
 8014fbe:	bf00      	nop
 8014fc0:	00000000 	.word	0x00000000
 8014fc4:	3fe62e43 	.word	0x3fe62e43
 8014fc8:	fefa39ef 	.word	0xfefa39ef
 8014fcc:	3fe62e42 	.word	0x3fe62e42
 8014fd0:	0ca86c39 	.word	0x0ca86c39
 8014fd4:	be205c61 	.word	0xbe205c61
 8014fd8:	72bea4d0 	.word	0x72bea4d0
 8014fdc:	3e663769 	.word	0x3e663769
 8014fe0:	c5d26bf1 	.word	0xc5d26bf1
 8014fe4:	3ebbbd41 	.word	0x3ebbbd41
 8014fe8:	af25de2c 	.word	0xaf25de2c
 8014fec:	3f11566a 	.word	0x3f11566a
 8014ff0:	16bebd93 	.word	0x16bebd93
 8014ff4:	3f66c16c 	.word	0x3f66c16c
 8014ff8:	5555553e 	.word	0x5555553e
 8014ffc:	3fc55555 	.word	0x3fc55555
 8015000:	fff00000 	.word	0xfff00000
 8015004:	3ff00000 	.word	0x3ff00000
 8015008:	4090cbff 	.word	0x4090cbff
 801500c:	3f6f3400 	.word	0x3f6f3400
 8015010:	3fe00000 	.word	0x3fe00000
 8015014:	652b82fe 	.word	0x652b82fe
 8015018:	3c971547 	.word	0x3c971547
 801501c:	4090cc00 	.word	0x4090cc00

08015020 <__ieee754_rem_pio2>:
 8015020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015024:	ec57 6b10 	vmov	r6, r7, d0
 8015028:	4bc5      	ldr	r3, [pc, #788]	@ (8015340 <__ieee754_rem_pio2+0x320>)
 801502a:	b08d      	sub	sp, #52	@ 0x34
 801502c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015030:	4598      	cmp	r8, r3
 8015032:	4604      	mov	r4, r0
 8015034:	9704      	str	r7, [sp, #16]
 8015036:	d807      	bhi.n	8015048 <__ieee754_rem_pio2+0x28>
 8015038:	2200      	movs	r2, #0
 801503a:	2300      	movs	r3, #0
 801503c:	ed80 0b00 	vstr	d0, [r0]
 8015040:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015044:	2500      	movs	r5, #0
 8015046:	e028      	b.n	801509a <__ieee754_rem_pio2+0x7a>
 8015048:	4bbe      	ldr	r3, [pc, #760]	@ (8015344 <__ieee754_rem_pio2+0x324>)
 801504a:	4598      	cmp	r8, r3
 801504c:	d878      	bhi.n	8015140 <__ieee754_rem_pio2+0x120>
 801504e:	9b04      	ldr	r3, [sp, #16]
 8015050:	4dbd      	ldr	r5, [pc, #756]	@ (8015348 <__ieee754_rem_pio2+0x328>)
 8015052:	2b00      	cmp	r3, #0
 8015054:	4630      	mov	r0, r6
 8015056:	a3ac      	add	r3, pc, #688	@ (adr r3, 8015308 <__ieee754_rem_pio2+0x2e8>)
 8015058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801505c:	4639      	mov	r1, r7
 801505e:	dd38      	ble.n	80150d2 <__ieee754_rem_pio2+0xb2>
 8015060:	f7eb f932 	bl	80002c8 <__aeabi_dsub>
 8015064:	45a8      	cmp	r8, r5
 8015066:	4606      	mov	r6, r0
 8015068:	460f      	mov	r7, r1
 801506a:	d01a      	beq.n	80150a2 <__ieee754_rem_pio2+0x82>
 801506c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8015310 <__ieee754_rem_pio2+0x2f0>)
 801506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015072:	f7eb f929 	bl	80002c8 <__aeabi_dsub>
 8015076:	4602      	mov	r2, r0
 8015078:	460b      	mov	r3, r1
 801507a:	4680      	mov	r8, r0
 801507c:	4689      	mov	r9, r1
 801507e:	4630      	mov	r0, r6
 8015080:	4639      	mov	r1, r7
 8015082:	f7eb f921 	bl	80002c8 <__aeabi_dsub>
 8015086:	a3a2      	add	r3, pc, #648	@ (adr r3, 8015310 <__ieee754_rem_pio2+0x2f0>)
 8015088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508c:	f7eb f91c 	bl	80002c8 <__aeabi_dsub>
 8015090:	e9c4 8900 	strd	r8, r9, [r4]
 8015094:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015098:	2501      	movs	r5, #1
 801509a:	4628      	mov	r0, r5
 801509c:	b00d      	add	sp, #52	@ 0x34
 801509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8015318 <__ieee754_rem_pio2+0x2f8>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7eb f90e 	bl	80002c8 <__aeabi_dsub>
 80150ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8015320 <__ieee754_rem_pio2+0x300>)
 80150ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b2:	4606      	mov	r6, r0
 80150b4:	460f      	mov	r7, r1
 80150b6:	f7eb f907 	bl	80002c8 <__aeabi_dsub>
 80150ba:	4602      	mov	r2, r0
 80150bc:	460b      	mov	r3, r1
 80150be:	4680      	mov	r8, r0
 80150c0:	4689      	mov	r9, r1
 80150c2:	4630      	mov	r0, r6
 80150c4:	4639      	mov	r1, r7
 80150c6:	f7eb f8ff 	bl	80002c8 <__aeabi_dsub>
 80150ca:	a395      	add	r3, pc, #596	@ (adr r3, 8015320 <__ieee754_rem_pio2+0x300>)
 80150cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d0:	e7dc      	b.n	801508c <__ieee754_rem_pio2+0x6c>
 80150d2:	f7eb f8fb 	bl	80002cc <__adddf3>
 80150d6:	45a8      	cmp	r8, r5
 80150d8:	4606      	mov	r6, r0
 80150da:	460f      	mov	r7, r1
 80150dc:	d018      	beq.n	8015110 <__ieee754_rem_pio2+0xf0>
 80150de:	a38c      	add	r3, pc, #560	@ (adr r3, 8015310 <__ieee754_rem_pio2+0x2f0>)
 80150e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e4:	f7eb f8f2 	bl	80002cc <__adddf3>
 80150e8:	4602      	mov	r2, r0
 80150ea:	460b      	mov	r3, r1
 80150ec:	4680      	mov	r8, r0
 80150ee:	4689      	mov	r9, r1
 80150f0:	4630      	mov	r0, r6
 80150f2:	4639      	mov	r1, r7
 80150f4:	f7eb f8e8 	bl	80002c8 <__aeabi_dsub>
 80150f8:	a385      	add	r3, pc, #532	@ (adr r3, 8015310 <__ieee754_rem_pio2+0x2f0>)
 80150fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150fe:	f7eb f8e5 	bl	80002cc <__adddf3>
 8015102:	f04f 35ff 	mov.w	r5, #4294967295
 8015106:	e9c4 8900 	strd	r8, r9, [r4]
 801510a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801510e:	e7c4      	b.n	801509a <__ieee754_rem_pio2+0x7a>
 8015110:	a381      	add	r3, pc, #516	@ (adr r3, 8015318 <__ieee754_rem_pio2+0x2f8>)
 8015112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015116:	f7eb f8d9 	bl	80002cc <__adddf3>
 801511a:	a381      	add	r3, pc, #516	@ (adr r3, 8015320 <__ieee754_rem_pio2+0x300>)
 801511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015120:	4606      	mov	r6, r0
 8015122:	460f      	mov	r7, r1
 8015124:	f7eb f8d2 	bl	80002cc <__adddf3>
 8015128:	4602      	mov	r2, r0
 801512a:	460b      	mov	r3, r1
 801512c:	4680      	mov	r8, r0
 801512e:	4689      	mov	r9, r1
 8015130:	4630      	mov	r0, r6
 8015132:	4639      	mov	r1, r7
 8015134:	f7eb f8c8 	bl	80002c8 <__aeabi_dsub>
 8015138:	a379      	add	r3, pc, #484	@ (adr r3, 8015320 <__ieee754_rem_pio2+0x300>)
 801513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513e:	e7de      	b.n	80150fe <__ieee754_rem_pio2+0xde>
 8015140:	4b82      	ldr	r3, [pc, #520]	@ (801534c <__ieee754_rem_pio2+0x32c>)
 8015142:	4598      	cmp	r8, r3
 8015144:	f200 80d1 	bhi.w	80152ea <__ieee754_rem_pio2+0x2ca>
 8015148:	f000 f966 	bl	8015418 <fabs>
 801514c:	ec57 6b10 	vmov	r6, r7, d0
 8015150:	a375      	add	r3, pc, #468	@ (adr r3, 8015328 <__ieee754_rem_pio2+0x308>)
 8015152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015156:	4630      	mov	r0, r6
 8015158:	4639      	mov	r1, r7
 801515a:	f7eb fa6d 	bl	8000638 <__aeabi_dmul>
 801515e:	4b7c      	ldr	r3, [pc, #496]	@ (8015350 <__ieee754_rem_pio2+0x330>)
 8015160:	2200      	movs	r2, #0
 8015162:	f7eb f8b3 	bl	80002cc <__adddf3>
 8015166:	f7eb fd17 	bl	8000b98 <__aeabi_d2iz>
 801516a:	4605      	mov	r5, r0
 801516c:	f7eb f9fa 	bl	8000564 <__aeabi_i2d>
 8015170:	4602      	mov	r2, r0
 8015172:	460b      	mov	r3, r1
 8015174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015178:	a363      	add	r3, pc, #396	@ (adr r3, 8015308 <__ieee754_rem_pio2+0x2e8>)
 801517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517e:	f7eb fa5b 	bl	8000638 <__aeabi_dmul>
 8015182:	4602      	mov	r2, r0
 8015184:	460b      	mov	r3, r1
 8015186:	4630      	mov	r0, r6
 8015188:	4639      	mov	r1, r7
 801518a:	f7eb f89d 	bl	80002c8 <__aeabi_dsub>
 801518e:	a360      	add	r3, pc, #384	@ (adr r3, 8015310 <__ieee754_rem_pio2+0x2f0>)
 8015190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015194:	4682      	mov	sl, r0
 8015196:	468b      	mov	fp, r1
 8015198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801519c:	f7eb fa4c 	bl	8000638 <__aeabi_dmul>
 80151a0:	2d1f      	cmp	r5, #31
 80151a2:	4606      	mov	r6, r0
 80151a4:	460f      	mov	r7, r1
 80151a6:	dc0c      	bgt.n	80151c2 <__ieee754_rem_pio2+0x1a2>
 80151a8:	4b6a      	ldr	r3, [pc, #424]	@ (8015354 <__ieee754_rem_pio2+0x334>)
 80151aa:	1e6a      	subs	r2, r5, #1
 80151ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b0:	4543      	cmp	r3, r8
 80151b2:	d006      	beq.n	80151c2 <__ieee754_rem_pio2+0x1a2>
 80151b4:	4632      	mov	r2, r6
 80151b6:	463b      	mov	r3, r7
 80151b8:	4650      	mov	r0, sl
 80151ba:	4659      	mov	r1, fp
 80151bc:	f7eb f884 	bl	80002c8 <__aeabi_dsub>
 80151c0:	e00e      	b.n	80151e0 <__ieee754_rem_pio2+0x1c0>
 80151c2:	463b      	mov	r3, r7
 80151c4:	4632      	mov	r2, r6
 80151c6:	4650      	mov	r0, sl
 80151c8:	4659      	mov	r1, fp
 80151ca:	f7eb f87d 	bl	80002c8 <__aeabi_dsub>
 80151ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80151d2:	9305      	str	r3, [sp, #20]
 80151d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80151d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80151dc:	2b10      	cmp	r3, #16
 80151de:	dc02      	bgt.n	80151e6 <__ieee754_rem_pio2+0x1c6>
 80151e0:	e9c4 0100 	strd	r0, r1, [r4]
 80151e4:	e039      	b.n	801525a <__ieee754_rem_pio2+0x23a>
 80151e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8015318 <__ieee754_rem_pio2+0x2f8>)
 80151e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151f0:	f7eb fa22 	bl	8000638 <__aeabi_dmul>
 80151f4:	4606      	mov	r6, r0
 80151f6:	460f      	mov	r7, r1
 80151f8:	4602      	mov	r2, r0
 80151fa:	460b      	mov	r3, r1
 80151fc:	4650      	mov	r0, sl
 80151fe:	4659      	mov	r1, fp
 8015200:	f7eb f862 	bl	80002c8 <__aeabi_dsub>
 8015204:	4602      	mov	r2, r0
 8015206:	460b      	mov	r3, r1
 8015208:	4680      	mov	r8, r0
 801520a:	4689      	mov	r9, r1
 801520c:	4650      	mov	r0, sl
 801520e:	4659      	mov	r1, fp
 8015210:	f7eb f85a 	bl	80002c8 <__aeabi_dsub>
 8015214:	4632      	mov	r2, r6
 8015216:	463b      	mov	r3, r7
 8015218:	f7eb f856 	bl	80002c8 <__aeabi_dsub>
 801521c:	a340      	add	r3, pc, #256	@ (adr r3, 8015320 <__ieee754_rem_pio2+0x300>)
 801521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015222:	4606      	mov	r6, r0
 8015224:	460f      	mov	r7, r1
 8015226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801522a:	f7eb fa05 	bl	8000638 <__aeabi_dmul>
 801522e:	4632      	mov	r2, r6
 8015230:	463b      	mov	r3, r7
 8015232:	f7eb f849 	bl	80002c8 <__aeabi_dsub>
 8015236:	4602      	mov	r2, r0
 8015238:	460b      	mov	r3, r1
 801523a:	4606      	mov	r6, r0
 801523c:	460f      	mov	r7, r1
 801523e:	4640      	mov	r0, r8
 8015240:	4649      	mov	r1, r9
 8015242:	f7eb f841 	bl	80002c8 <__aeabi_dsub>
 8015246:	9a05      	ldr	r2, [sp, #20]
 8015248:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801524c:	1ad3      	subs	r3, r2, r3
 801524e:	2b31      	cmp	r3, #49	@ 0x31
 8015250:	dc20      	bgt.n	8015294 <__ieee754_rem_pio2+0x274>
 8015252:	e9c4 0100 	strd	r0, r1, [r4]
 8015256:	46c2      	mov	sl, r8
 8015258:	46cb      	mov	fp, r9
 801525a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801525e:	4650      	mov	r0, sl
 8015260:	4642      	mov	r2, r8
 8015262:	464b      	mov	r3, r9
 8015264:	4659      	mov	r1, fp
 8015266:	f7eb f82f 	bl	80002c8 <__aeabi_dsub>
 801526a:	463b      	mov	r3, r7
 801526c:	4632      	mov	r2, r6
 801526e:	f7eb f82b 	bl	80002c8 <__aeabi_dsub>
 8015272:	9b04      	ldr	r3, [sp, #16]
 8015274:	2b00      	cmp	r3, #0
 8015276:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801527a:	f6bf af0e 	bge.w	801509a <__ieee754_rem_pio2+0x7a>
 801527e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8015282:	6063      	str	r3, [r4, #4]
 8015284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015288:	f8c4 8000 	str.w	r8, [r4]
 801528c:	60a0      	str	r0, [r4, #8]
 801528e:	60e3      	str	r3, [r4, #12]
 8015290:	426d      	negs	r5, r5
 8015292:	e702      	b.n	801509a <__ieee754_rem_pio2+0x7a>
 8015294:	a326      	add	r3, pc, #152	@ (adr r3, 8015330 <__ieee754_rem_pio2+0x310>)
 8015296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801529e:	f7eb f9cb 	bl	8000638 <__aeabi_dmul>
 80152a2:	4606      	mov	r6, r0
 80152a4:	460f      	mov	r7, r1
 80152a6:	4602      	mov	r2, r0
 80152a8:	460b      	mov	r3, r1
 80152aa:	4640      	mov	r0, r8
 80152ac:	4649      	mov	r1, r9
 80152ae:	f7eb f80b 	bl	80002c8 <__aeabi_dsub>
 80152b2:	4602      	mov	r2, r0
 80152b4:	460b      	mov	r3, r1
 80152b6:	4682      	mov	sl, r0
 80152b8:	468b      	mov	fp, r1
 80152ba:	4640      	mov	r0, r8
 80152bc:	4649      	mov	r1, r9
 80152be:	f7eb f803 	bl	80002c8 <__aeabi_dsub>
 80152c2:	4632      	mov	r2, r6
 80152c4:	463b      	mov	r3, r7
 80152c6:	f7ea ffff 	bl	80002c8 <__aeabi_dsub>
 80152ca:	a31b      	add	r3, pc, #108	@ (adr r3, 8015338 <__ieee754_rem_pio2+0x318>)
 80152cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d0:	4606      	mov	r6, r0
 80152d2:	460f      	mov	r7, r1
 80152d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152d8:	f7eb f9ae 	bl	8000638 <__aeabi_dmul>
 80152dc:	4632      	mov	r2, r6
 80152de:	463b      	mov	r3, r7
 80152e0:	f7ea fff2 	bl	80002c8 <__aeabi_dsub>
 80152e4:	4606      	mov	r6, r0
 80152e6:	460f      	mov	r7, r1
 80152e8:	e764      	b.n	80151b4 <__ieee754_rem_pio2+0x194>
 80152ea:	4b1b      	ldr	r3, [pc, #108]	@ (8015358 <__ieee754_rem_pio2+0x338>)
 80152ec:	4598      	cmp	r8, r3
 80152ee:	d935      	bls.n	801535c <__ieee754_rem_pio2+0x33c>
 80152f0:	4632      	mov	r2, r6
 80152f2:	463b      	mov	r3, r7
 80152f4:	4630      	mov	r0, r6
 80152f6:	4639      	mov	r1, r7
 80152f8:	f7ea ffe6 	bl	80002c8 <__aeabi_dsub>
 80152fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015300:	e9c4 0100 	strd	r0, r1, [r4]
 8015304:	e69e      	b.n	8015044 <__ieee754_rem_pio2+0x24>
 8015306:	bf00      	nop
 8015308:	54400000 	.word	0x54400000
 801530c:	3ff921fb 	.word	0x3ff921fb
 8015310:	1a626331 	.word	0x1a626331
 8015314:	3dd0b461 	.word	0x3dd0b461
 8015318:	1a600000 	.word	0x1a600000
 801531c:	3dd0b461 	.word	0x3dd0b461
 8015320:	2e037073 	.word	0x2e037073
 8015324:	3ba3198a 	.word	0x3ba3198a
 8015328:	6dc9c883 	.word	0x6dc9c883
 801532c:	3fe45f30 	.word	0x3fe45f30
 8015330:	2e000000 	.word	0x2e000000
 8015334:	3ba3198a 	.word	0x3ba3198a
 8015338:	252049c1 	.word	0x252049c1
 801533c:	397b839a 	.word	0x397b839a
 8015340:	3fe921fb 	.word	0x3fe921fb
 8015344:	4002d97b 	.word	0x4002d97b
 8015348:	3ff921fb 	.word	0x3ff921fb
 801534c:	413921fb 	.word	0x413921fb
 8015350:	3fe00000 	.word	0x3fe00000
 8015354:	080164f0 	.word	0x080164f0
 8015358:	7fefffff 	.word	0x7fefffff
 801535c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8015360:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8015364:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8015368:	4630      	mov	r0, r6
 801536a:	460f      	mov	r7, r1
 801536c:	f7eb fc14 	bl	8000b98 <__aeabi_d2iz>
 8015370:	f7eb f8f8 	bl	8000564 <__aeabi_i2d>
 8015374:	4602      	mov	r2, r0
 8015376:	460b      	mov	r3, r1
 8015378:	4630      	mov	r0, r6
 801537a:	4639      	mov	r1, r7
 801537c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015380:	f7ea ffa2 	bl	80002c8 <__aeabi_dsub>
 8015384:	4b22      	ldr	r3, [pc, #136]	@ (8015410 <__ieee754_rem_pio2+0x3f0>)
 8015386:	2200      	movs	r2, #0
 8015388:	f7eb f956 	bl	8000638 <__aeabi_dmul>
 801538c:	460f      	mov	r7, r1
 801538e:	4606      	mov	r6, r0
 8015390:	f7eb fc02 	bl	8000b98 <__aeabi_d2iz>
 8015394:	f7eb f8e6 	bl	8000564 <__aeabi_i2d>
 8015398:	4602      	mov	r2, r0
 801539a:	460b      	mov	r3, r1
 801539c:	4630      	mov	r0, r6
 801539e:	4639      	mov	r1, r7
 80153a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80153a4:	f7ea ff90 	bl	80002c8 <__aeabi_dsub>
 80153a8:	4b19      	ldr	r3, [pc, #100]	@ (8015410 <__ieee754_rem_pio2+0x3f0>)
 80153aa:	2200      	movs	r2, #0
 80153ac:	f7eb f944 	bl	8000638 <__aeabi_dmul>
 80153b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80153b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80153b8:	f04f 0803 	mov.w	r8, #3
 80153bc:	2600      	movs	r6, #0
 80153be:	2700      	movs	r7, #0
 80153c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80153c4:	4632      	mov	r2, r6
 80153c6:	463b      	mov	r3, r7
 80153c8:	46c2      	mov	sl, r8
 80153ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80153ce:	f7eb fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d1f4      	bne.n	80153c0 <__ieee754_rem_pio2+0x3a0>
 80153d6:	4b0f      	ldr	r3, [pc, #60]	@ (8015414 <__ieee754_rem_pio2+0x3f4>)
 80153d8:	9301      	str	r3, [sp, #4]
 80153da:	2302      	movs	r3, #2
 80153dc:	9300      	str	r3, [sp, #0]
 80153de:	462a      	mov	r2, r5
 80153e0:	4653      	mov	r3, sl
 80153e2:	4621      	mov	r1, r4
 80153e4:	a806      	add	r0, sp, #24
 80153e6:	f000 f9d3 	bl	8015790 <__kernel_rem_pio2>
 80153ea:	9b04      	ldr	r3, [sp, #16]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	4605      	mov	r5, r0
 80153f0:	f6bf ae53 	bge.w	801509a <__ieee754_rem_pio2+0x7a>
 80153f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80153f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80153fc:	e9c4 2300 	strd	r2, r3, [r4]
 8015400:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8015404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015408:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801540c:	e740      	b.n	8015290 <__ieee754_rem_pio2+0x270>
 801540e:	bf00      	nop
 8015410:	41700000 	.word	0x41700000
 8015414:	08016570 	.word	0x08016570

08015418 <fabs>:
 8015418:	ec51 0b10 	vmov	r0, r1, d0
 801541c:	4602      	mov	r2, r0
 801541e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015422:	ec43 2b10 	vmov	d0, r2, r3
 8015426:	4770      	bx	lr

08015428 <__ieee754_acosf>:
 8015428:	b508      	push	{r3, lr}
 801542a:	ee10 3a10 	vmov	r3, s0
 801542e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015432:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8015436:	ed2d 8b0c 	vpush	{d8-d13}
 801543a:	d10a      	bne.n	8015452 <__ieee754_acosf+0x2a>
 801543c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80155d4 <__ieee754_acosf+0x1ac>
 8015440:	eddf 7a65 	vldr	s15, [pc, #404]	@ 80155d8 <__ieee754_acosf+0x1b0>
 8015444:	2b00      	cmp	r3, #0
 8015446:	bfc8      	it	gt
 8015448:	eeb0 0a67 	vmovgt.f32	s0, s15
 801544c:	ecbd 8b0c 	vpop	{d8-d13}
 8015450:	bd08      	pop	{r3, pc}
 8015452:	d904      	bls.n	801545e <__ieee754_acosf+0x36>
 8015454:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015458:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801545c:	e7f6      	b.n	801544c <__ieee754_acosf+0x24>
 801545e:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8015462:	d23c      	bcs.n	80154de <__ieee754_acosf+0xb6>
 8015464:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8015468:	f240 80b1 	bls.w	80155ce <__ieee754_acosf+0x1a6>
 801546c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015470:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80155dc <__ieee754_acosf+0x1b4>
 8015474:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80155e0 <__ieee754_acosf+0x1b8>
 8015478:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80155e4 <__ieee754_acosf+0x1bc>
 801547c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015480:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80155e8 <__ieee754_acosf+0x1c0>
 8015484:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015488:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80155ec <__ieee754_acosf+0x1c4>
 801548c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015490:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80155f0 <__ieee754_acosf+0x1c8>
 8015494:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015498:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80155f4 <__ieee754_acosf+0x1cc>
 801549c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80154a0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80155f8 <__ieee754_acosf+0x1d0>
 80154a4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80154a8:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80155fc <__ieee754_acosf+0x1d4>
 80154ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80154b0:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8015600 <__ieee754_acosf+0x1d8>
 80154b4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80154b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80154bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80154c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80154c4:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8015604 <__ieee754_acosf+0x1dc>
 80154c8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80154cc:	eee0 7a46 	vfms.f32	s15, s0, s12
 80154d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80154d4:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8015608 <__ieee754_acosf+0x1e0>
 80154d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80154dc:	e7b6      	b.n	801544c <__ieee754_acosf+0x24>
 80154de:	2b00      	cmp	r3, #0
 80154e0:	eddf da3e 	vldr	s27, [pc, #248]	@ 80155dc <__ieee754_acosf+0x1b4>
 80154e4:	eddf ca3e 	vldr	s25, [pc, #248]	@ 80155e0 <__ieee754_acosf+0x1b8>
 80154e8:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 80155e8 <__ieee754_acosf+0x1c0>
 80154ec:	eddf ba3f 	vldr	s23, [pc, #252]	@ 80155ec <__ieee754_acosf+0x1c4>
 80154f0:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 80155f0 <__ieee754_acosf+0x1c8>
 80154f4:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 80155f4 <__ieee754_acosf+0x1cc>
 80154f8:	ed9f da3f 	vldr	s26, [pc, #252]	@ 80155f8 <__ieee754_acosf+0x1d0>
 80154fc:	eddf aa39 	vldr	s21, [pc, #228]	@ 80155e4 <__ieee754_acosf+0x1bc>
 8015500:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80155fc <__ieee754_acosf+0x1d4>
 8015504:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8015600 <__ieee754_acosf+0x1d8>
 8015508:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801550c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015510:	da28      	bge.n	8015564 <__ieee754_acosf+0x13c>
 8015512:	ee30 8a09 	vadd.f32	s16, s0, s18
 8015516:	ee28 0a27 	vmul.f32	s0, s16, s15
 801551a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801551e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015522:	eeac ca80 	vfma.f32	s24, s25, s0
 8015526:	eeaa aa80 	vfma.f32	s20, s21, s0
 801552a:	eeec ba00 	vfma.f32	s23, s24, s0
 801552e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015532:	eeab ba80 	vfma.f32	s22, s23, s0
 8015536:	eea9 9a80 	vfma.f32	s18, s19, s0
 801553a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801553e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015542:	f7fe fe25 	bl	8014190 <__ieee754_sqrtf>
 8015546:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801554a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801560c <__ieee754_acosf+0x1e4>
 801554e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015552:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8015556:	ee77 7a80 	vadd.f32	s15, s15, s0
 801555a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8015610 <__ieee754_acosf+0x1e8>
 801555e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015562:	e773      	b.n	801544c <__ieee754_acosf+0x24>
 8015564:	ee39 8a40 	vsub.f32	s16, s18, s0
 8015568:	ee28 8a27 	vmul.f32	s16, s16, s15
 801556c:	eeb0 0a48 	vmov.f32	s0, s16
 8015570:	f7fe fe0e 	bl	8014190 <__ieee754_sqrtf>
 8015574:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8015578:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801557c:	eeac ca88 	vfma.f32	s24, s25, s16
 8015580:	eeaa aa88 	vfma.f32	s20, s21, s16
 8015584:	eeec ba08 	vfma.f32	s23, s24, s16
 8015588:	ee10 3a10 	vmov	r3, s0
 801558c:	eeab ba88 	vfma.f32	s22, s23, s16
 8015590:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8015594:	f023 030f 	bic.w	r3, r3, #15
 8015598:	eeea 9a08 	vfma.f32	s19, s20, s16
 801559c:	ee07 3a90 	vmov	s15, r3
 80155a0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80155a4:	eeb0 6a48 	vmov.f32	s12, s16
 80155a8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80155ac:	eea9 9a88 	vfma.f32	s18, s19, s16
 80155b0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80155b4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80155b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80155bc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80155c0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80155c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80155c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80155cc:	e73e      	b.n	801544c <__ieee754_acosf+0x24>
 80155ce:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8015614 <__ieee754_acosf+0x1ec>
 80155d2:	e73b      	b.n	801544c <__ieee754_acosf+0x24>
 80155d4:	40490fdb 	.word	0x40490fdb
 80155d8:	00000000 	.word	0x00000000
 80155dc:	3811ef08 	.word	0x3811ef08
 80155e0:	3a4f7f04 	.word	0x3a4f7f04
 80155e4:	bf303361 	.word	0xbf303361
 80155e8:	bd241146 	.word	0xbd241146
 80155ec:	3e4e0aa8 	.word	0x3e4e0aa8
 80155f0:	bea6b090 	.word	0xbea6b090
 80155f4:	3e2aaaab 	.word	0x3e2aaaab
 80155f8:	3d9dc62e 	.word	0x3d9dc62e
 80155fc:	4001572d 	.word	0x4001572d
 8015600:	c019d139 	.word	0xc019d139
 8015604:	33a22168 	.word	0x33a22168
 8015608:	3fc90fda 	.word	0x3fc90fda
 801560c:	b3a22168 	.word	0xb3a22168
 8015610:	40490fda 	.word	0x40490fda
 8015614:	3fc90fdb 	.word	0x3fc90fdb

08015618 <scalbn>:
 8015618:	b570      	push	{r4, r5, r6, lr}
 801561a:	ec55 4b10 	vmov	r4, r5, d0
 801561e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015622:	4606      	mov	r6, r0
 8015624:	462b      	mov	r3, r5
 8015626:	b991      	cbnz	r1, 801564e <scalbn+0x36>
 8015628:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801562c:	4323      	orrs	r3, r4
 801562e:	d03d      	beq.n	80156ac <scalbn+0x94>
 8015630:	4b35      	ldr	r3, [pc, #212]	@ (8015708 <scalbn+0xf0>)
 8015632:	4620      	mov	r0, r4
 8015634:	4629      	mov	r1, r5
 8015636:	2200      	movs	r2, #0
 8015638:	f7ea fffe 	bl	8000638 <__aeabi_dmul>
 801563c:	4b33      	ldr	r3, [pc, #204]	@ (801570c <scalbn+0xf4>)
 801563e:	429e      	cmp	r6, r3
 8015640:	4604      	mov	r4, r0
 8015642:	460d      	mov	r5, r1
 8015644:	da0f      	bge.n	8015666 <scalbn+0x4e>
 8015646:	a328      	add	r3, pc, #160	@ (adr r3, 80156e8 <scalbn+0xd0>)
 8015648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801564c:	e01e      	b.n	801568c <scalbn+0x74>
 801564e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015652:	4291      	cmp	r1, r2
 8015654:	d10b      	bne.n	801566e <scalbn+0x56>
 8015656:	4622      	mov	r2, r4
 8015658:	4620      	mov	r0, r4
 801565a:	4629      	mov	r1, r5
 801565c:	f7ea fe36 	bl	80002cc <__adddf3>
 8015660:	4604      	mov	r4, r0
 8015662:	460d      	mov	r5, r1
 8015664:	e022      	b.n	80156ac <scalbn+0x94>
 8015666:	460b      	mov	r3, r1
 8015668:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801566c:	3936      	subs	r1, #54	@ 0x36
 801566e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015672:	4296      	cmp	r6, r2
 8015674:	dd0d      	ble.n	8015692 <scalbn+0x7a>
 8015676:	2d00      	cmp	r5, #0
 8015678:	a11d      	add	r1, pc, #116	@ (adr r1, 80156f0 <scalbn+0xd8>)
 801567a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801567e:	da02      	bge.n	8015686 <scalbn+0x6e>
 8015680:	a11d      	add	r1, pc, #116	@ (adr r1, 80156f8 <scalbn+0xe0>)
 8015682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015686:	a31a      	add	r3, pc, #104	@ (adr r3, 80156f0 <scalbn+0xd8>)
 8015688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568c:	f7ea ffd4 	bl	8000638 <__aeabi_dmul>
 8015690:	e7e6      	b.n	8015660 <scalbn+0x48>
 8015692:	1872      	adds	r2, r6, r1
 8015694:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015698:	428a      	cmp	r2, r1
 801569a:	dcec      	bgt.n	8015676 <scalbn+0x5e>
 801569c:	2a00      	cmp	r2, #0
 801569e:	dd08      	ble.n	80156b2 <scalbn+0x9a>
 80156a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80156a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80156a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156ac:	ec45 4b10 	vmov	d0, r4, r5
 80156b0:	bd70      	pop	{r4, r5, r6, pc}
 80156b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80156b6:	da08      	bge.n	80156ca <scalbn+0xb2>
 80156b8:	2d00      	cmp	r5, #0
 80156ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80156e8 <scalbn+0xd0>)
 80156bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156c0:	dac1      	bge.n	8015646 <scalbn+0x2e>
 80156c2:	a10f      	add	r1, pc, #60	@ (adr r1, 8015700 <scalbn+0xe8>)
 80156c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156c8:	e7bd      	b.n	8015646 <scalbn+0x2e>
 80156ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80156ce:	3236      	adds	r2, #54	@ 0x36
 80156d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80156d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156d8:	4620      	mov	r0, r4
 80156da:	4b0d      	ldr	r3, [pc, #52]	@ (8015710 <scalbn+0xf8>)
 80156dc:	4629      	mov	r1, r5
 80156de:	2200      	movs	r2, #0
 80156e0:	e7d4      	b.n	801568c <scalbn+0x74>
 80156e2:	bf00      	nop
 80156e4:	f3af 8000 	nop.w
 80156e8:	c2f8f359 	.word	0xc2f8f359
 80156ec:	01a56e1f 	.word	0x01a56e1f
 80156f0:	8800759c 	.word	0x8800759c
 80156f4:	7e37e43c 	.word	0x7e37e43c
 80156f8:	8800759c 	.word	0x8800759c
 80156fc:	fe37e43c 	.word	0xfe37e43c
 8015700:	c2f8f359 	.word	0xc2f8f359
 8015704:	81a56e1f 	.word	0x81a56e1f
 8015708:	43500000 	.word	0x43500000
 801570c:	ffff3cb0 	.word	0xffff3cb0
 8015710:	3c900000 	.word	0x3c900000

08015714 <with_errno>:
 8015714:	b510      	push	{r4, lr}
 8015716:	ed2d 8b02 	vpush	{d8}
 801571a:	eeb0 8a40 	vmov.f32	s16, s0
 801571e:	eef0 8a60 	vmov.f32	s17, s1
 8015722:	4604      	mov	r4, r0
 8015724:	f7fa fc04 	bl	800ff30 <__errno>
 8015728:	eeb0 0a48 	vmov.f32	s0, s16
 801572c:	eef0 0a68 	vmov.f32	s1, s17
 8015730:	ecbd 8b02 	vpop	{d8}
 8015734:	6004      	str	r4, [r0, #0]
 8015736:	bd10      	pop	{r4, pc}

08015738 <xflow>:
 8015738:	4603      	mov	r3, r0
 801573a:	b507      	push	{r0, r1, r2, lr}
 801573c:	ec51 0b10 	vmov	r0, r1, d0
 8015740:	b183      	cbz	r3, 8015764 <xflow+0x2c>
 8015742:	4602      	mov	r2, r0
 8015744:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015748:	e9cd 2300 	strd	r2, r3, [sp]
 801574c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015750:	f7ea ff72 	bl	8000638 <__aeabi_dmul>
 8015754:	ec41 0b10 	vmov	d0, r0, r1
 8015758:	2022      	movs	r0, #34	@ 0x22
 801575a:	b003      	add	sp, #12
 801575c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015760:	f7ff bfd8 	b.w	8015714 <with_errno>
 8015764:	4602      	mov	r2, r0
 8015766:	460b      	mov	r3, r1
 8015768:	e7ee      	b.n	8015748 <xflow+0x10>
 801576a:	0000      	movs	r0, r0
 801576c:	0000      	movs	r0, r0
	...

08015770 <__math_uflow>:
 8015770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015778 <__math_uflow+0x8>
 8015774:	f7ff bfe0 	b.w	8015738 <xflow>
 8015778:	00000000 	.word	0x00000000
 801577c:	10000000 	.word	0x10000000

08015780 <__math_oflow>:
 8015780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015788 <__math_oflow+0x8>
 8015784:	f7ff bfd8 	b.w	8015738 <xflow>
 8015788:	00000000 	.word	0x00000000
 801578c:	70000000 	.word	0x70000000

08015790 <__kernel_rem_pio2>:
 8015790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015794:	ed2d 8b02 	vpush	{d8}
 8015798:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801579c:	f112 0f14 	cmn.w	r2, #20
 80157a0:	9306      	str	r3, [sp, #24]
 80157a2:	9104      	str	r1, [sp, #16]
 80157a4:	4bbe      	ldr	r3, [pc, #760]	@ (8015aa0 <__kernel_rem_pio2+0x310>)
 80157a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80157a8:	9008      	str	r0, [sp, #32]
 80157aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80157ae:	9300      	str	r3, [sp, #0]
 80157b0:	9b06      	ldr	r3, [sp, #24]
 80157b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80157b6:	bfa8      	it	ge
 80157b8:	1ed4      	subge	r4, r2, #3
 80157ba:	9305      	str	r3, [sp, #20]
 80157bc:	bfb2      	itee	lt
 80157be:	2400      	movlt	r4, #0
 80157c0:	2318      	movge	r3, #24
 80157c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80157c6:	f06f 0317 	mvn.w	r3, #23
 80157ca:	fb04 3303 	mla	r3, r4, r3, r3
 80157ce:	eb03 0b02 	add.w	fp, r3, r2
 80157d2:	9b00      	ldr	r3, [sp, #0]
 80157d4:	9a05      	ldr	r2, [sp, #20]
 80157d6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8015a90 <__kernel_rem_pio2+0x300>
 80157da:	eb03 0802 	add.w	r8, r3, r2
 80157de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80157e0:	1aa7      	subs	r7, r4, r2
 80157e2:	ae20      	add	r6, sp, #128	@ 0x80
 80157e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80157e8:	2500      	movs	r5, #0
 80157ea:	4545      	cmp	r5, r8
 80157ec:	dd13      	ble.n	8015816 <__kernel_rem_pio2+0x86>
 80157ee:	9b06      	ldr	r3, [sp, #24]
 80157f0:	aa20      	add	r2, sp, #128	@ 0x80
 80157f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80157f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80157fa:	f04f 0800 	mov.w	r8, #0
 80157fe:	9b00      	ldr	r3, [sp, #0]
 8015800:	4598      	cmp	r8, r3
 8015802:	dc31      	bgt.n	8015868 <__kernel_rem_pio2+0xd8>
 8015804:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8015a90 <__kernel_rem_pio2+0x300>
 8015808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801580c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015810:	462f      	mov	r7, r5
 8015812:	2600      	movs	r6, #0
 8015814:	e01b      	b.n	801584e <__kernel_rem_pio2+0xbe>
 8015816:	42ef      	cmn	r7, r5
 8015818:	d407      	bmi.n	801582a <__kernel_rem_pio2+0x9a>
 801581a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801581e:	f7ea fea1 	bl	8000564 <__aeabi_i2d>
 8015822:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015826:	3501      	adds	r5, #1
 8015828:	e7df      	b.n	80157ea <__kernel_rem_pio2+0x5a>
 801582a:	ec51 0b18 	vmov	r0, r1, d8
 801582e:	e7f8      	b.n	8015822 <__kernel_rem_pio2+0x92>
 8015830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015834:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015838:	f7ea fefe 	bl	8000638 <__aeabi_dmul>
 801583c:	4602      	mov	r2, r0
 801583e:	460b      	mov	r3, r1
 8015840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015844:	f7ea fd42 	bl	80002cc <__adddf3>
 8015848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801584c:	3601      	adds	r6, #1
 801584e:	9b05      	ldr	r3, [sp, #20]
 8015850:	429e      	cmp	r6, r3
 8015852:	f1a7 0708 	sub.w	r7, r7, #8
 8015856:	ddeb      	ble.n	8015830 <__kernel_rem_pio2+0xa0>
 8015858:	ed9d 7b02 	vldr	d7, [sp, #8]
 801585c:	f108 0801 	add.w	r8, r8, #1
 8015860:	ecaa 7b02 	vstmia	sl!, {d7}
 8015864:	3508      	adds	r5, #8
 8015866:	e7ca      	b.n	80157fe <__kernel_rem_pio2+0x6e>
 8015868:	9b00      	ldr	r3, [sp, #0]
 801586a:	f8dd 8000 	ldr.w	r8, [sp]
 801586e:	aa0c      	add	r2, sp, #48	@ 0x30
 8015870:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015874:	930a      	str	r3, [sp, #40]	@ 0x28
 8015876:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8015878:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801587c:	9309      	str	r3, [sp, #36]	@ 0x24
 801587e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8015882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015884:	ab98      	add	r3, sp, #608	@ 0x260
 8015886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801588a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801588e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015892:	ac0c      	add	r4, sp, #48	@ 0x30
 8015894:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015896:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801589a:	46a1      	mov	r9, r4
 801589c:	46c2      	mov	sl, r8
 801589e:	f1ba 0f00 	cmp.w	sl, #0
 80158a2:	f1a5 0508 	sub.w	r5, r5, #8
 80158a6:	dc77      	bgt.n	8015998 <__kernel_rem_pio2+0x208>
 80158a8:	4658      	mov	r0, fp
 80158aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80158ae:	f7ff feb3 	bl	8015618 <scalbn>
 80158b2:	ec57 6b10 	vmov	r6, r7, d0
 80158b6:	2200      	movs	r2, #0
 80158b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80158bc:	4630      	mov	r0, r6
 80158be:	4639      	mov	r1, r7
 80158c0:	f7ea feba 	bl	8000638 <__aeabi_dmul>
 80158c4:	ec41 0b10 	vmov	d0, r0, r1
 80158c8:	f7fe fc66 	bl	8014198 <floor>
 80158cc:	4b75      	ldr	r3, [pc, #468]	@ (8015aa4 <__kernel_rem_pio2+0x314>)
 80158ce:	ec51 0b10 	vmov	r0, r1, d0
 80158d2:	2200      	movs	r2, #0
 80158d4:	f7ea feb0 	bl	8000638 <__aeabi_dmul>
 80158d8:	4602      	mov	r2, r0
 80158da:	460b      	mov	r3, r1
 80158dc:	4630      	mov	r0, r6
 80158de:	4639      	mov	r1, r7
 80158e0:	f7ea fcf2 	bl	80002c8 <__aeabi_dsub>
 80158e4:	460f      	mov	r7, r1
 80158e6:	4606      	mov	r6, r0
 80158e8:	f7eb f956 	bl	8000b98 <__aeabi_d2iz>
 80158ec:	9002      	str	r0, [sp, #8]
 80158ee:	f7ea fe39 	bl	8000564 <__aeabi_i2d>
 80158f2:	4602      	mov	r2, r0
 80158f4:	460b      	mov	r3, r1
 80158f6:	4630      	mov	r0, r6
 80158f8:	4639      	mov	r1, r7
 80158fa:	f7ea fce5 	bl	80002c8 <__aeabi_dsub>
 80158fe:	f1bb 0f00 	cmp.w	fp, #0
 8015902:	4606      	mov	r6, r0
 8015904:	460f      	mov	r7, r1
 8015906:	dd6c      	ble.n	80159e2 <__kernel_rem_pio2+0x252>
 8015908:	f108 31ff 	add.w	r1, r8, #4294967295
 801590c:	ab0c      	add	r3, sp, #48	@ 0x30
 801590e:	9d02      	ldr	r5, [sp, #8]
 8015910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015914:	f1cb 0018 	rsb	r0, fp, #24
 8015918:	fa43 f200 	asr.w	r2, r3, r0
 801591c:	4415      	add	r5, r2
 801591e:	4082      	lsls	r2, r0
 8015920:	1a9b      	subs	r3, r3, r2
 8015922:	aa0c      	add	r2, sp, #48	@ 0x30
 8015924:	9502      	str	r5, [sp, #8]
 8015926:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801592a:	f1cb 0217 	rsb	r2, fp, #23
 801592e:	fa43 f902 	asr.w	r9, r3, r2
 8015932:	f1b9 0f00 	cmp.w	r9, #0
 8015936:	dd64      	ble.n	8015a02 <__kernel_rem_pio2+0x272>
 8015938:	9b02      	ldr	r3, [sp, #8]
 801593a:	2200      	movs	r2, #0
 801593c:	3301      	adds	r3, #1
 801593e:	9302      	str	r3, [sp, #8]
 8015940:	4615      	mov	r5, r2
 8015942:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8015946:	4590      	cmp	r8, r2
 8015948:	f300 80b8 	bgt.w	8015abc <__kernel_rem_pio2+0x32c>
 801594c:	f1bb 0f00 	cmp.w	fp, #0
 8015950:	dd07      	ble.n	8015962 <__kernel_rem_pio2+0x1d2>
 8015952:	f1bb 0f01 	cmp.w	fp, #1
 8015956:	f000 80bf 	beq.w	8015ad8 <__kernel_rem_pio2+0x348>
 801595a:	f1bb 0f02 	cmp.w	fp, #2
 801595e:	f000 80c6 	beq.w	8015aee <__kernel_rem_pio2+0x35e>
 8015962:	f1b9 0f02 	cmp.w	r9, #2
 8015966:	d14c      	bne.n	8015a02 <__kernel_rem_pio2+0x272>
 8015968:	4632      	mov	r2, r6
 801596a:	463b      	mov	r3, r7
 801596c:	494e      	ldr	r1, [pc, #312]	@ (8015aa8 <__kernel_rem_pio2+0x318>)
 801596e:	2000      	movs	r0, #0
 8015970:	f7ea fcaa 	bl	80002c8 <__aeabi_dsub>
 8015974:	4606      	mov	r6, r0
 8015976:	460f      	mov	r7, r1
 8015978:	2d00      	cmp	r5, #0
 801597a:	d042      	beq.n	8015a02 <__kernel_rem_pio2+0x272>
 801597c:	4658      	mov	r0, fp
 801597e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8015a98 <__kernel_rem_pio2+0x308>
 8015982:	f7ff fe49 	bl	8015618 <scalbn>
 8015986:	4630      	mov	r0, r6
 8015988:	4639      	mov	r1, r7
 801598a:	ec53 2b10 	vmov	r2, r3, d0
 801598e:	f7ea fc9b 	bl	80002c8 <__aeabi_dsub>
 8015992:	4606      	mov	r6, r0
 8015994:	460f      	mov	r7, r1
 8015996:	e034      	b.n	8015a02 <__kernel_rem_pio2+0x272>
 8015998:	4b44      	ldr	r3, [pc, #272]	@ (8015aac <__kernel_rem_pio2+0x31c>)
 801599a:	2200      	movs	r2, #0
 801599c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159a0:	f7ea fe4a 	bl	8000638 <__aeabi_dmul>
 80159a4:	f7eb f8f8 	bl	8000b98 <__aeabi_d2iz>
 80159a8:	f7ea fddc 	bl	8000564 <__aeabi_i2d>
 80159ac:	4b40      	ldr	r3, [pc, #256]	@ (8015ab0 <__kernel_rem_pio2+0x320>)
 80159ae:	2200      	movs	r2, #0
 80159b0:	4606      	mov	r6, r0
 80159b2:	460f      	mov	r7, r1
 80159b4:	f7ea fe40 	bl	8000638 <__aeabi_dmul>
 80159b8:	4602      	mov	r2, r0
 80159ba:	460b      	mov	r3, r1
 80159bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159c0:	f7ea fc82 	bl	80002c8 <__aeabi_dsub>
 80159c4:	f7eb f8e8 	bl	8000b98 <__aeabi_d2iz>
 80159c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159cc:	f849 0b04 	str.w	r0, [r9], #4
 80159d0:	4639      	mov	r1, r7
 80159d2:	4630      	mov	r0, r6
 80159d4:	f7ea fc7a 	bl	80002cc <__adddf3>
 80159d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80159dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80159e0:	e75d      	b.n	801589e <__kernel_rem_pio2+0x10e>
 80159e2:	d107      	bne.n	80159f4 <__kernel_rem_pio2+0x264>
 80159e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80159e8:	aa0c      	add	r2, sp, #48	@ 0x30
 80159ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80159f2:	e79e      	b.n	8015932 <__kernel_rem_pio2+0x1a2>
 80159f4:	4b2f      	ldr	r3, [pc, #188]	@ (8015ab4 <__kernel_rem_pio2+0x324>)
 80159f6:	2200      	movs	r2, #0
 80159f8:	f7eb f8a4 	bl	8000b44 <__aeabi_dcmpge>
 80159fc:	2800      	cmp	r0, #0
 80159fe:	d143      	bne.n	8015a88 <__kernel_rem_pio2+0x2f8>
 8015a00:	4681      	mov	r9, r0
 8015a02:	2200      	movs	r2, #0
 8015a04:	2300      	movs	r3, #0
 8015a06:	4630      	mov	r0, r6
 8015a08:	4639      	mov	r1, r7
 8015a0a:	f7eb f87d 	bl	8000b08 <__aeabi_dcmpeq>
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	f000 80bf 	beq.w	8015b92 <__kernel_rem_pio2+0x402>
 8015a14:	f108 33ff 	add.w	r3, r8, #4294967295
 8015a18:	2200      	movs	r2, #0
 8015a1a:	9900      	ldr	r1, [sp, #0]
 8015a1c:	428b      	cmp	r3, r1
 8015a1e:	da6e      	bge.n	8015afe <__kernel_rem_pio2+0x36e>
 8015a20:	2a00      	cmp	r2, #0
 8015a22:	f000 8089 	beq.w	8015b38 <__kernel_rem_pio2+0x3a8>
 8015a26:	f108 38ff 	add.w	r8, r8, #4294967295
 8015a2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8015a2c:	f1ab 0b18 	sub.w	fp, fp, #24
 8015a30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d0f6      	beq.n	8015a26 <__kernel_rem_pio2+0x296>
 8015a38:	4658      	mov	r0, fp
 8015a3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015a98 <__kernel_rem_pio2+0x308>
 8015a3e:	f7ff fdeb 	bl	8015618 <scalbn>
 8015a42:	f108 0301 	add.w	r3, r8, #1
 8015a46:	00da      	lsls	r2, r3, #3
 8015a48:	9205      	str	r2, [sp, #20]
 8015a4a:	ec55 4b10 	vmov	r4, r5, d0
 8015a4e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8015a50:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8015aac <__kernel_rem_pio2+0x31c>
 8015a54:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8015a58:	4646      	mov	r6, r8
 8015a5a:	f04f 0a00 	mov.w	sl, #0
 8015a5e:	2e00      	cmp	r6, #0
 8015a60:	f280 80cf 	bge.w	8015c02 <__kernel_rem_pio2+0x472>
 8015a64:	4644      	mov	r4, r8
 8015a66:	2c00      	cmp	r4, #0
 8015a68:	f2c0 80fd 	blt.w	8015c66 <__kernel_rem_pio2+0x4d6>
 8015a6c:	4b12      	ldr	r3, [pc, #72]	@ (8015ab8 <__kernel_rem_pio2+0x328>)
 8015a6e:	461f      	mov	r7, r3
 8015a70:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015a72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015a76:	9306      	str	r3, [sp, #24]
 8015a78:	f04f 0a00 	mov.w	sl, #0
 8015a7c:	f04f 0b00 	mov.w	fp, #0
 8015a80:	2600      	movs	r6, #0
 8015a82:	eba8 0504 	sub.w	r5, r8, r4
 8015a86:	e0e2      	b.n	8015c4e <__kernel_rem_pio2+0x4be>
 8015a88:	f04f 0902 	mov.w	r9, #2
 8015a8c:	e754      	b.n	8015938 <__kernel_rem_pio2+0x1a8>
 8015a8e:	bf00      	nop
	...
 8015a9c:	3ff00000 	.word	0x3ff00000
 8015aa0:	080166b8 	.word	0x080166b8
 8015aa4:	40200000 	.word	0x40200000
 8015aa8:	3ff00000 	.word	0x3ff00000
 8015aac:	3e700000 	.word	0x3e700000
 8015ab0:	41700000 	.word	0x41700000
 8015ab4:	3fe00000 	.word	0x3fe00000
 8015ab8:	08016678 	.word	0x08016678
 8015abc:	f854 3b04 	ldr.w	r3, [r4], #4
 8015ac0:	b945      	cbnz	r5, 8015ad4 <__kernel_rem_pio2+0x344>
 8015ac2:	b123      	cbz	r3, 8015ace <__kernel_rem_pio2+0x33e>
 8015ac4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015ac8:	f844 3c04 	str.w	r3, [r4, #-4]
 8015acc:	2301      	movs	r3, #1
 8015ace:	3201      	adds	r2, #1
 8015ad0:	461d      	mov	r5, r3
 8015ad2:	e738      	b.n	8015946 <__kernel_rem_pio2+0x1b6>
 8015ad4:	1acb      	subs	r3, r1, r3
 8015ad6:	e7f7      	b.n	8015ac8 <__kernel_rem_pio2+0x338>
 8015ad8:	f108 32ff 	add.w	r2, r8, #4294967295
 8015adc:	ab0c      	add	r3, sp, #48	@ 0x30
 8015ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ae2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015ae6:	a90c      	add	r1, sp, #48	@ 0x30
 8015ae8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015aec:	e739      	b.n	8015962 <__kernel_rem_pio2+0x1d2>
 8015aee:	f108 32ff 	add.w	r2, r8, #4294967295
 8015af2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015af8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015afc:	e7f3      	b.n	8015ae6 <__kernel_rem_pio2+0x356>
 8015afe:	a90c      	add	r1, sp, #48	@ 0x30
 8015b00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015b04:	3b01      	subs	r3, #1
 8015b06:	430a      	orrs	r2, r1
 8015b08:	e787      	b.n	8015a1a <__kernel_rem_pio2+0x28a>
 8015b0a:	3401      	adds	r4, #1
 8015b0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015b10:	2a00      	cmp	r2, #0
 8015b12:	d0fa      	beq.n	8015b0a <__kernel_rem_pio2+0x37a>
 8015b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015b16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015b1a:	eb0d 0503 	add.w	r5, sp, r3
 8015b1e:	9b06      	ldr	r3, [sp, #24]
 8015b20:	aa20      	add	r2, sp, #128	@ 0x80
 8015b22:	4443      	add	r3, r8
 8015b24:	f108 0701 	add.w	r7, r8, #1
 8015b28:	3d98      	subs	r5, #152	@ 0x98
 8015b2a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8015b2e:	4444      	add	r4, r8
 8015b30:	42bc      	cmp	r4, r7
 8015b32:	da04      	bge.n	8015b3e <__kernel_rem_pio2+0x3ae>
 8015b34:	46a0      	mov	r8, r4
 8015b36:	e6a2      	b.n	801587e <__kernel_rem_pio2+0xee>
 8015b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b3a:	2401      	movs	r4, #1
 8015b3c:	e7e6      	b.n	8015b0c <__kernel_rem_pio2+0x37c>
 8015b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b40:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015b44:	f7ea fd0e 	bl	8000564 <__aeabi_i2d>
 8015b48:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015e10 <__kernel_rem_pio2+0x680>
 8015b4c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015b58:	46b2      	mov	sl, r6
 8015b5a:	f04f 0800 	mov.w	r8, #0
 8015b5e:	9b05      	ldr	r3, [sp, #20]
 8015b60:	4598      	cmp	r8, r3
 8015b62:	dd05      	ble.n	8015b70 <__kernel_rem_pio2+0x3e0>
 8015b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015b68:	3701      	adds	r7, #1
 8015b6a:	eca5 7b02 	vstmia	r5!, {d7}
 8015b6e:	e7df      	b.n	8015b30 <__kernel_rem_pio2+0x3a0>
 8015b70:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8015b74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015b78:	f7ea fd5e 	bl	8000638 <__aeabi_dmul>
 8015b7c:	4602      	mov	r2, r0
 8015b7e:	460b      	mov	r3, r1
 8015b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b84:	f7ea fba2 	bl	80002cc <__adddf3>
 8015b88:	f108 0801 	add.w	r8, r8, #1
 8015b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b90:	e7e5      	b.n	8015b5e <__kernel_rem_pio2+0x3ce>
 8015b92:	f1cb 0000 	rsb	r0, fp, #0
 8015b96:	ec47 6b10 	vmov	d0, r6, r7
 8015b9a:	f7ff fd3d 	bl	8015618 <scalbn>
 8015b9e:	ec55 4b10 	vmov	r4, r5, d0
 8015ba2:	4b9d      	ldr	r3, [pc, #628]	@ (8015e18 <__kernel_rem_pio2+0x688>)
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	4629      	mov	r1, r5
 8015baa:	f7ea ffcb 	bl	8000b44 <__aeabi_dcmpge>
 8015bae:	b300      	cbz	r0, 8015bf2 <__kernel_rem_pio2+0x462>
 8015bb0:	4b9a      	ldr	r3, [pc, #616]	@ (8015e1c <__kernel_rem_pio2+0x68c>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	f7ea fd3e 	bl	8000638 <__aeabi_dmul>
 8015bbc:	f7ea ffec 	bl	8000b98 <__aeabi_d2iz>
 8015bc0:	4606      	mov	r6, r0
 8015bc2:	f7ea fccf 	bl	8000564 <__aeabi_i2d>
 8015bc6:	4b94      	ldr	r3, [pc, #592]	@ (8015e18 <__kernel_rem_pio2+0x688>)
 8015bc8:	2200      	movs	r2, #0
 8015bca:	f7ea fd35 	bl	8000638 <__aeabi_dmul>
 8015bce:	460b      	mov	r3, r1
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	4629      	mov	r1, r5
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	f7ea fb77 	bl	80002c8 <__aeabi_dsub>
 8015bda:	f7ea ffdd 	bl	8000b98 <__aeabi_d2iz>
 8015bde:	ab0c      	add	r3, sp, #48	@ 0x30
 8015be0:	f10b 0b18 	add.w	fp, fp, #24
 8015be4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015be8:	f108 0801 	add.w	r8, r8, #1
 8015bec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015bf0:	e722      	b.n	8015a38 <__kernel_rem_pio2+0x2a8>
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	4629      	mov	r1, r5
 8015bf6:	f7ea ffcf 	bl	8000b98 <__aeabi_d2iz>
 8015bfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8015bfc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015c00:	e71a      	b.n	8015a38 <__kernel_rem_pio2+0x2a8>
 8015c02:	ab0c      	add	r3, sp, #48	@ 0x30
 8015c04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015c08:	f7ea fcac 	bl	8000564 <__aeabi_i2d>
 8015c0c:	4622      	mov	r2, r4
 8015c0e:	462b      	mov	r3, r5
 8015c10:	f7ea fd12 	bl	8000638 <__aeabi_dmul>
 8015c14:	4652      	mov	r2, sl
 8015c16:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8015c1a:	465b      	mov	r3, fp
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	4629      	mov	r1, r5
 8015c20:	f7ea fd0a 	bl	8000638 <__aeabi_dmul>
 8015c24:	3e01      	subs	r6, #1
 8015c26:	4604      	mov	r4, r0
 8015c28:	460d      	mov	r5, r1
 8015c2a:	e718      	b.n	8015a5e <__kernel_rem_pio2+0x2ce>
 8015c2c:	9906      	ldr	r1, [sp, #24]
 8015c2e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8015c32:	9106      	str	r1, [sp, #24]
 8015c34:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8015c38:	f7ea fcfe 	bl	8000638 <__aeabi_dmul>
 8015c3c:	4602      	mov	r2, r0
 8015c3e:	460b      	mov	r3, r1
 8015c40:	4650      	mov	r0, sl
 8015c42:	4659      	mov	r1, fp
 8015c44:	f7ea fb42 	bl	80002cc <__adddf3>
 8015c48:	3601      	adds	r6, #1
 8015c4a:	4682      	mov	sl, r0
 8015c4c:	468b      	mov	fp, r1
 8015c4e:	9b00      	ldr	r3, [sp, #0]
 8015c50:	429e      	cmp	r6, r3
 8015c52:	dc01      	bgt.n	8015c58 <__kernel_rem_pio2+0x4c8>
 8015c54:	42b5      	cmp	r5, r6
 8015c56:	dae9      	bge.n	8015c2c <__kernel_rem_pio2+0x49c>
 8015c58:	ab48      	add	r3, sp, #288	@ 0x120
 8015c5a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015c5e:	e9c5 ab00 	strd	sl, fp, [r5]
 8015c62:	3c01      	subs	r4, #1
 8015c64:	e6ff      	b.n	8015a66 <__kernel_rem_pio2+0x2d6>
 8015c66:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015c68:	2b02      	cmp	r3, #2
 8015c6a:	dc0b      	bgt.n	8015c84 <__kernel_rem_pio2+0x4f4>
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	dc39      	bgt.n	8015ce4 <__kernel_rem_pio2+0x554>
 8015c70:	d05d      	beq.n	8015d2e <__kernel_rem_pio2+0x59e>
 8015c72:	9b02      	ldr	r3, [sp, #8]
 8015c74:	f003 0007 	and.w	r0, r3, #7
 8015c78:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8015c7c:	ecbd 8b02 	vpop	{d8}
 8015c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c84:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015c86:	2b03      	cmp	r3, #3
 8015c88:	d1f3      	bne.n	8015c72 <__kernel_rem_pio2+0x4e2>
 8015c8a:	9b05      	ldr	r3, [sp, #20]
 8015c8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015c90:	eb0d 0403 	add.w	r4, sp, r3
 8015c94:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8015c98:	4625      	mov	r5, r4
 8015c9a:	46c2      	mov	sl, r8
 8015c9c:	f1ba 0f00 	cmp.w	sl, #0
 8015ca0:	f1a5 0508 	sub.w	r5, r5, #8
 8015ca4:	dc6b      	bgt.n	8015d7e <__kernel_rem_pio2+0x5ee>
 8015ca6:	4645      	mov	r5, r8
 8015ca8:	2d01      	cmp	r5, #1
 8015caa:	f1a4 0408 	sub.w	r4, r4, #8
 8015cae:	f300 8087 	bgt.w	8015dc0 <__kernel_rem_pio2+0x630>
 8015cb2:	9c05      	ldr	r4, [sp, #20]
 8015cb4:	ab48      	add	r3, sp, #288	@ 0x120
 8015cb6:	441c      	add	r4, r3
 8015cb8:	2000      	movs	r0, #0
 8015cba:	2100      	movs	r1, #0
 8015cbc:	f1b8 0f01 	cmp.w	r8, #1
 8015cc0:	f300 809c 	bgt.w	8015dfc <__kernel_rem_pio2+0x66c>
 8015cc4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015cc8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8015ccc:	f1b9 0f00 	cmp.w	r9, #0
 8015cd0:	f040 80a6 	bne.w	8015e20 <__kernel_rem_pio2+0x690>
 8015cd4:	9b04      	ldr	r3, [sp, #16]
 8015cd6:	e9c3 7800 	strd	r7, r8, [r3]
 8015cda:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015cde:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015ce2:	e7c6      	b.n	8015c72 <__kernel_rem_pio2+0x4e2>
 8015ce4:	9d05      	ldr	r5, [sp, #20]
 8015ce6:	ab48      	add	r3, sp, #288	@ 0x120
 8015ce8:	441d      	add	r5, r3
 8015cea:	4644      	mov	r4, r8
 8015cec:	2000      	movs	r0, #0
 8015cee:	2100      	movs	r1, #0
 8015cf0:	2c00      	cmp	r4, #0
 8015cf2:	da35      	bge.n	8015d60 <__kernel_rem_pio2+0x5d0>
 8015cf4:	f1b9 0f00 	cmp.w	r9, #0
 8015cf8:	d038      	beq.n	8015d6c <__kernel_rem_pio2+0x5dc>
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015d00:	9c04      	ldr	r4, [sp, #16]
 8015d02:	e9c4 2300 	strd	r2, r3, [r4]
 8015d06:	4602      	mov	r2, r0
 8015d08:	460b      	mov	r3, r1
 8015d0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8015d0e:	f7ea fadb 	bl	80002c8 <__aeabi_dsub>
 8015d12:	ad4a      	add	r5, sp, #296	@ 0x128
 8015d14:	2401      	movs	r4, #1
 8015d16:	45a0      	cmp	r8, r4
 8015d18:	da2b      	bge.n	8015d72 <__kernel_rem_pio2+0x5e2>
 8015d1a:	f1b9 0f00 	cmp.w	r9, #0
 8015d1e:	d002      	beq.n	8015d26 <__kernel_rem_pio2+0x596>
 8015d20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015d24:	4619      	mov	r1, r3
 8015d26:	9b04      	ldr	r3, [sp, #16]
 8015d28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015d2c:	e7a1      	b.n	8015c72 <__kernel_rem_pio2+0x4e2>
 8015d2e:	9c05      	ldr	r4, [sp, #20]
 8015d30:	ab48      	add	r3, sp, #288	@ 0x120
 8015d32:	441c      	add	r4, r3
 8015d34:	2000      	movs	r0, #0
 8015d36:	2100      	movs	r1, #0
 8015d38:	f1b8 0f00 	cmp.w	r8, #0
 8015d3c:	da09      	bge.n	8015d52 <__kernel_rem_pio2+0x5c2>
 8015d3e:	f1b9 0f00 	cmp.w	r9, #0
 8015d42:	d002      	beq.n	8015d4a <__kernel_rem_pio2+0x5ba>
 8015d44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015d48:	4619      	mov	r1, r3
 8015d4a:	9b04      	ldr	r3, [sp, #16]
 8015d4c:	e9c3 0100 	strd	r0, r1, [r3]
 8015d50:	e78f      	b.n	8015c72 <__kernel_rem_pio2+0x4e2>
 8015d52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015d56:	f7ea fab9 	bl	80002cc <__adddf3>
 8015d5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8015d5e:	e7eb      	b.n	8015d38 <__kernel_rem_pio2+0x5a8>
 8015d60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8015d64:	f7ea fab2 	bl	80002cc <__adddf3>
 8015d68:	3c01      	subs	r4, #1
 8015d6a:	e7c1      	b.n	8015cf0 <__kernel_rem_pio2+0x560>
 8015d6c:	4602      	mov	r2, r0
 8015d6e:	460b      	mov	r3, r1
 8015d70:	e7c6      	b.n	8015d00 <__kernel_rem_pio2+0x570>
 8015d72:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8015d76:	f7ea faa9 	bl	80002cc <__adddf3>
 8015d7a:	3401      	adds	r4, #1
 8015d7c:	e7cb      	b.n	8015d16 <__kernel_rem_pio2+0x586>
 8015d7e:	ed95 7b00 	vldr	d7, [r5]
 8015d82:	ed8d 7b00 	vstr	d7, [sp]
 8015d86:	ed95 7b02 	vldr	d7, [r5, #8]
 8015d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d8e:	ec53 2b17 	vmov	r2, r3, d7
 8015d92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015d96:	f7ea fa99 	bl	80002cc <__adddf3>
 8015d9a:	4602      	mov	r2, r0
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	4606      	mov	r6, r0
 8015da0:	460f      	mov	r7, r1
 8015da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015da6:	f7ea fa8f 	bl	80002c8 <__aeabi_dsub>
 8015daa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015dae:	f7ea fa8d 	bl	80002cc <__adddf3>
 8015db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015db6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8015dba:	e9c5 6700 	strd	r6, r7, [r5]
 8015dbe:	e76d      	b.n	8015c9c <__kernel_rem_pio2+0x50c>
 8015dc0:	ed94 7b00 	vldr	d7, [r4]
 8015dc4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015dc8:	ec51 0b17 	vmov	r0, r1, d7
 8015dcc:	4652      	mov	r2, sl
 8015dce:	465b      	mov	r3, fp
 8015dd0:	ed8d 7b00 	vstr	d7, [sp]
 8015dd4:	f7ea fa7a 	bl	80002cc <__adddf3>
 8015dd8:	4602      	mov	r2, r0
 8015dda:	460b      	mov	r3, r1
 8015ddc:	4606      	mov	r6, r0
 8015dde:	460f      	mov	r7, r1
 8015de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015de4:	f7ea fa70 	bl	80002c8 <__aeabi_dsub>
 8015de8:	4652      	mov	r2, sl
 8015dea:	465b      	mov	r3, fp
 8015dec:	f7ea fa6e 	bl	80002cc <__adddf3>
 8015df0:	3d01      	subs	r5, #1
 8015df2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015df6:	e9c4 6700 	strd	r6, r7, [r4]
 8015dfa:	e755      	b.n	8015ca8 <__kernel_rem_pio2+0x518>
 8015dfc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015e00:	f7ea fa64 	bl	80002cc <__adddf3>
 8015e04:	f108 38ff 	add.w	r8, r8, #4294967295
 8015e08:	e758      	b.n	8015cbc <__kernel_rem_pio2+0x52c>
 8015e0a:	bf00      	nop
 8015e0c:	f3af 8000 	nop.w
	...
 8015e18:	41700000 	.word	0x41700000
 8015e1c:	3e700000 	.word	0x3e700000
 8015e20:	9b04      	ldr	r3, [sp, #16]
 8015e22:	9a04      	ldr	r2, [sp, #16]
 8015e24:	601f      	str	r7, [r3, #0]
 8015e26:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8015e2a:	605c      	str	r4, [r3, #4]
 8015e2c:	609d      	str	r5, [r3, #8]
 8015e2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015e32:	60d3      	str	r3, [r2, #12]
 8015e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015e38:	6110      	str	r0, [r2, #16]
 8015e3a:	6153      	str	r3, [r2, #20]
 8015e3c:	e719      	b.n	8015c72 <__kernel_rem_pio2+0x4e2>
 8015e3e:	bf00      	nop

08015e40 <_init>:
 8015e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e42:	bf00      	nop
 8015e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e46:	bc08      	pop	{r3}
 8015e48:	469e      	mov	lr, r3
 8015e4a:	4770      	bx	lr

08015e4c <_fini>:
 8015e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e4e:	bf00      	nop
 8015e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e52:	bc08      	pop	{r3}
 8015e54:	469e      	mov	lr, r3
 8015e56:	4770      	bx	lr
