
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ff0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  080121c0  080121c0  000131c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012830  08012830  00014210  2**0
                  CONTENTS
  4 .ARM          00000008  08012830  08012830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012838  08012838  00014210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012838  08012838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801283c  0801283c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08012840  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000176c  20000210  08012a50  00014210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08012a50  0001497c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c619  00000000  00000000  00014240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3c  00000000  00000000  00030859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00034798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f5  00000000  00000000  00035d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027090  00000000  00000000  00036e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0ce  00000000  00000000  0005deb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5891  00000000  00000000  0007cf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b8  00000000  00000000  00162858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080121a8 	.word	0x080121a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080121a8 	.word	0x080121a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f007 f86b 	bl	80083d8 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f007 f847 	bl	80083d8 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fbb0 	bl	800cac6 <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000022c 	.word	0x2000022c
 80013dc:	20000230 	.word	0x20000230
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f00f fa93 	bl	8010940 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000230 	.word	0x20000230
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fe6f 	bl	8008184 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f004 ffc4 	bl	8006434 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 fd23 	bl	8007efc <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f004 ffbc 	bl	8006434 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f006 ff81 	bl	80083d8 <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f006 fee8 	bl	80083d8 <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f006 fda7 	bl	80081e4 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f006 fd82 	bl	80081e4 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000230 	.word	0x20000230
 80016fc:	2000022c 	.word	0x2000022c
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f006 fd5e 	bl	80081e4 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f004 fe7e 	bl	8006434 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f004 fe6c 	bl	8006434 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000022c 	.word	0x2000022c
 800178c:	20000230 	.word	0x20000230
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f006 fe02 	bl	80083d8 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000230 	.word	0x20000230
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	20001590 	.word	0x20001590
 80017fc:	20000234 	.word	0x20000234
 8001800:	20001714 	.word	0x20001714

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f004 fdf6 	bl	800641c <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f004 fde6 	bl	800641c <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000230 	.word	0x20000230
 8001890:	20000234 	.word	0x20000234
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000230 	.word	0x20000230
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000230 	.word	0x20000230
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <bmi088_init+0xa8>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <bmi088_init+0xac>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2018      	movs	r0, #24
 8002088:	f009 fc62 	bl	800b950 <calloc>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68d8      	ldr	r0, [r3, #12]
 8002098:	2332      	movs	r3, #50	@ 0x32
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2200      	movs	r2, #0
 80020aa:	2130      	movs	r1, #48	@ 0x30
 80020ac:	f006 f994 	bl	80083d8 <HAL_I2C_Mem_Read>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68d8      	ldr	r0, [r3, #12]
 80020b8:	2332      	movs	r3, #50	@ 0x32
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	2301      	movs	r3, #1
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	3301      	adds	r3, #1
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2301      	movs	r3, #1
 80020ca:	2200      	movs	r2, #0
 80020cc:	21d0      	movs	r1, #208	@ 0xd0
 80020ce:	f006 f983 	bl	80083d8 <HAL_I2C_Mem_Read>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	2b1e      	cmp	r3, #30
 80020da:	d003      	beq.n	80020e4 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d003      	beq.n	80020f2 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000235 	.word	0x20000235
 8002100:	20000236 	.word	0x20000236

08002104 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af04      	add	r7, sp, #16
 800210a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002112:	4618      	mov	r0, r3
 8002114:	f005 f81b 	bl	800714e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800211e:	4618      	mov	r0, r3
 8002120:	f005 f815 	bl	800714e <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002128:	2301      	movs	r3, #1
 800212a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d8      	ldr	r0, [r3, #12]
 8002130:	2364      	movs	r3, #100	@ 0x64
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	227c      	movs	r2, #124	@ 0x7c
 8002142:	2130      	movs	r1, #48	@ 0x30
 8002144:	f006 f84e 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	4313      	orrs	r3, r2
 8002150:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d8      	ldr	r0, [r3, #12]
 800215a:	2364      	movs	r3, #100	@ 0x64
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2301      	movs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	227d      	movs	r2, #125	@ 0x7d
 800216c:	2130      	movs	r1, #48	@ 0x30
 800216e:	f006 f839 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4313      	orrs	r3, r2
 800217a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f004 f959 	bl	8006434 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002182:	23b6      	movs	r3, #182	@ 0xb6
 8002184:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68d8      	ldr	r0, [r3, #12]
 800218a:	2364      	movs	r3, #100	@ 0x64
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2301      	movs	r3, #1
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	227e      	movs	r2, #126	@ 0x7e
 800219c:	2130      	movs	r1, #48	@ 0x30
 800219e:	f006 f821 	bl	80081e4 <HAL_I2C_Mem_Write>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <bmi088_config+0xb4>
 80021b2:	4bb4      	ldr	r3, [pc, #720]	@ (8002484 <bmi088_config+0x380>)
 80021b4:	22a1      	movs	r2, #161	@ 0xa1
 80021b6:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021b8:	200a      	movs	r0, #10
 80021ba:	f004 f93b 	bl	8006434 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021be:	23b0      	movs	r3, #176	@ 0xb0
 80021c0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68d8      	ldr	r0, [r3, #12]
 80021c6:	2364      	movs	r3, #100	@ 0x64
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	227e      	movs	r2, #126	@ 0x7e
 80021d8:	2130      	movs	r1, #48	@ 0x30
 80021da:	f006 f803 	bl	80081e4 <HAL_I2C_Mem_Write>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <bmi088_config+0xf0>
 80021ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002484 <bmi088_config+0x380>)
 80021f0:	22a6      	movs	r2, #166	@ 0xa6
 80021f2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f004 f91d 	bl	8006434 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80021fa:	23b6      	movs	r3, #182	@ 0xb6
 80021fc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68d8      	ldr	r0, [r3, #12]
 8002202:	2364      	movs	r3, #100	@ 0x64
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	2214      	movs	r2, #20
 8002214:	21d0      	movs	r1, #208	@ 0xd0
 8002216:	f005 ffe5 	bl	80081e4 <HAL_I2C_Mem_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4313      	orrs	r3, r2
 8002222:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <bmi088_config+0x12c>
 800222a:	4b96      	ldr	r3, [pc, #600]	@ (8002484 <bmi088_config+0x380>)
 800222c:	22ab      	movs	r2, #171	@ 0xab
 800222e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002230:	200a      	movs	r0, #10
 8002232:	f004 f8ff 	bl	8006434 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68d8      	ldr	r0, [r3, #12]
 8002240:	2364      	movs	r3, #100	@ 0x64
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	2301      	movs	r3, #1
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	220f      	movs	r2, #15
 8002252:	21d0      	movs	r1, #208	@ 0xd0
 8002254:	f005 ffc6 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	4313      	orrs	r3, r2
 8002260:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <bmi088_config+0x16a>
 8002268:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <bmi088_config+0x380>)
 800226a:	22b1      	movs	r2, #177	@ 0xb1
 800226c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7a5b      	ldrb	r3, [r3, #9]
 8002272:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68d8      	ldr	r0, [r3, #12]
 8002278:	2314      	movs	r3, #20
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2301      	movs	r3, #1
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	2210      	movs	r2, #16
 800228a:	21d0      	movs	r1, #208	@ 0xd0
 800228c:	f005 ffaa 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <bmi088_config+0x1a2>
 80022a0:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <bmi088_config+0x380>)
 80022a2:	22b5      	movs	r2, #181	@ 0xb5
 80022a4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	2314      	movs	r3, #20
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	2211      	movs	r2, #17
 80022c2:	21d0      	movs	r1, #208	@ 0xd0
 80022c4:	f005 ff8e 	bl	80081e4 <HAL_I2C_Mem_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <bmi088_config+0x1da>
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <bmi088_config+0x380>)
 80022da:	22b9      	movs	r2, #185	@ 0xb9
 80022dc:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022de:	2014      	movs	r0, #20
 80022e0:	f004 f8a8 	bl	8006434 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68d8      	ldr	r0, [r3, #12]
 80022ec:	2314      	movs	r3, #20
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	2215      	movs	r2, #21
 80022fe:	21d0      	movs	r1, #208	@ 0xd0
 8002300:	f005 ff70 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4313      	orrs	r3, r2
 800230c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <bmi088_config+0x216>
 8002314:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <bmi088_config+0x380>)
 8002316:	22bf      	movs	r2, #191	@ 0xbf
 8002318:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800231a:	2305      	movs	r3, #5
 800231c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68d8      	ldr	r0, [r3, #12]
 8002322:	2314      	movs	r3, #20
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	2216      	movs	r2, #22
 8002334:	21d0      	movs	r1, #208	@ 0xd0
 8002336:	f005 ff55 	bl	80081e4 <HAL_I2C_Mem_Write>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	4313      	orrs	r3, r2
 8002342:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <bmi088_config+0x24c>
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <bmi088_config+0x380>)
 800234c:	22c3      	movs	r2, #195	@ 0xc3
 800234e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002350:	2381      	movs	r3, #129	@ 0x81
 8002352:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68d8      	ldr	r0, [r3, #12]
 8002358:	2314      	movs	r3, #20
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2218      	movs	r2, #24
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	f005 ff3a 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4313      	orrs	r3, r2
 8002378:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <bmi088_config+0x282>
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <bmi088_config+0x380>)
 8002382:	22c7      	movs	r2, #199	@ 0xc7
 8002384:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002386:	2304      	movs	r3, #4
 8002388:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68d8      	ldr	r0, [r3, #12]
 800238e:	2314      	movs	r3, #20
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2301      	movs	r3, #1
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	227d      	movs	r2, #125	@ 0x7d
 80023a0:	2130      	movs	r1, #48	@ 0x30
 80023a2:	f005 ff1f 	bl	80081e4 <HAL_I2C_Mem_Write>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <bmi088_config+0x2b8>
 80023b6:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <bmi088_config+0x380>)
 80023b8:	22cc      	movs	r2, #204	@ 0xcc
 80023ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023bc:	2008      	movs	r0, #8
 80023be:	f004 f839 	bl	8006434 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68d8      	ldr	r0, [r3, #12]
 80023cc:	2314      	movs	r3, #20
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	227c      	movs	r2, #124	@ 0x7c
 80023de:	2130      	movs	r1, #48	@ 0x30
 80023e0:	f005 ff00 	bl	80081e4 <HAL_I2C_Mem_Write>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <bmi088_config+0x2f6>
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <bmi088_config+0x380>)
 80023f6:	22d1      	movs	r2, #209	@ 0xd1
 80023f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023fa:	2008      	movs	r0, #8
 80023fc:	f004 f81a 	bl	8006434 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	799b      	ldrb	r3, [r3, #6]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	b25a      	sxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	79db      	ldrb	r3, [r3, #7]
 800240c:	b25b      	sxtb	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b25b      	sxtb	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68d8      	ldr	r0, [r3, #12]
 800241a:	2314      	movs	r3, #20
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	2301      	movs	r3, #1
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2130      	movs	r1, #48	@ 0x30
 800242e:	f005 fed9 	bl	80081e4 <HAL_I2C_Mem_Write>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	4313      	orrs	r3, r2
 800243a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <bmi088_config+0x344>
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <bmi088_config+0x380>)
 8002444:	22d6      	movs	r2, #214	@ 0xd6
 8002446:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68d8      	ldr	r0, [r3, #12]
 8002452:	2314      	movs	r3, #20
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2301      	movs	r3, #1
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2241      	movs	r2, #65	@ 0x41
 8002464:	2130      	movs	r1, #48	@ 0x30
 8002466:	f005 febd 	bl	80081e4 <HAL_I2C_Mem_Write>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4313      	orrs	r3, r2
 8002472:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <bmi088_config+0x384>
 800247a:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <bmi088_config+0x380>)
 800247c:	22da      	movs	r2, #218	@ 0xda
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <bmi088_config+0x384>
 8002482:	bf00      	nop
 8002484:	20000238 	.word	0x20000238

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002488:	230a      	movs	r3, #10
 800248a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68d8      	ldr	r0, [r3, #12]
 8002490:	2314      	movs	r3, #20
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2301      	movs	r3, #1
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2253      	movs	r2, #83	@ 0x53
 80024a2:	2130      	movs	r1, #48	@ 0x30
 80024a4:	f005 fe9e 	bl	80081e4 <HAL_I2C_Mem_Write>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024b2:	2304      	movs	r3, #4
 80024b4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68d8      	ldr	r0, [r3, #12]
 80024ba:	2314      	movs	r3, #20
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2258      	movs	r2, #88	@ 0x58
 80024cc:	2130      	movs	r1, #48	@ 0x30
 80024ce:	f005 fe89 	bl	80081e4 <HAL_I2C_Mem_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4313      	orrs	r3, r2
 80024da:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fe25 	bl	8007132 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fe1f 	bl	8007132 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 80024f4:	2046      	movs	r0, #70	@ 0x46
 80024f6:	f003 ff9d 	bl	8006434 <HAL_Delay>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0000      	movs	r0, r0
	...

08002508 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b092      	sub	sp, #72	@ 0x48
 800250c:	af04      	add	r7, sp, #16
 800250e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 820d 	beq.w	800293a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68d8      	ldr	r0, [r3, #12]
 8002524:	2314      	movs	r3, #20
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	2309      	movs	r3, #9
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	2212      	movs	r2, #18
 8002536:	2130      	movs	r1, #48	@ 0x30
 8002538:	f005 ff4e 	bl	80083d8 <HAL_I2C_Mem_Read>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68d8      	ldr	r0, [r3, #12]
 8002546:	2314      	movs	r3, #20
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2302      	movs	r3, #2
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	2222      	movs	r2, #34	@ 0x22
 8002558:	2130      	movs	r1, #48	@ 0x30
 800255a:	f005 ff3d 	bl	80083d8 <HAL_I2C_Mem_Read>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 8002564:	7c3b      	ldrb	r3, [r7, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	b21a      	sxth	r2, r3
 800256a:	7c7b      	ldrb	r3, [r7, #17]
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b21b      	sxth	r3, r3
 8002576:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800257c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d305      	bcc.n	8002590 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 8002584:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002586:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800258a:	b29b      	uxth	r3, r3
 800258c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800258e:	e023      	b.n	80025d8 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 8002590:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002592:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8002594:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80025b0:	f7fe f842 	bl	8000638 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4bcf      	ldr	r3, [pc, #828]	@ (8002900 <bmi088_update+0x3f8>)
 80025c2:	f7fd fe83 	bl	80002cc <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb2b 	bl	8000c28 <__aeabi_d2f>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 80025d8:	7f3b      	ldrb	r3, [r7, #28]
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	7efb      	ldrb	r3, [r7, #27]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4313      	orrs	r3, r2
 80025e2:	7eba      	ldrb	r2, [r7, #26]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffc7 	bl	8000588 <__aeabi_f2d>
 80025fa:	a3b9      	add	r3, pc, #740	@ (adr r3, 80028e0 <bmi088_update+0x3d8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f81a 	bl	8000638 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	a3b6      	add	r3, pc, #728	@ (adr r3, 80028e8 <bmi088_update+0x3e0>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fe f93b 	bl	800088c <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fb03 	bl	8000c28 <__aeabi_d2f>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002628:	7e7b      	ldrb	r3, [r7, #25]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21a      	sxth	r2, r3
 800262e:	7e3b      	ldrb	r3, [r7, #24]
 8002630:	b21b      	sxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002644:	7d7b      	ldrb	r3, [r7, #21]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7d3b      	ldrb	r3, [r7, #20]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 8002652:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4ba6      	ldr	r3, [pc, #664]	@ (8002904 <bmi088_update+0x3fc>)
 800266c:	f7fe f90e 	bl	800088c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4ba2      	ldr	r3, [pc, #648]	@ (8002908 <bmi088_update+0x400>)
 800267e:	f7fd ffdb 	bl	8000638 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b9f      	ldr	r3, [pc, #636]	@ (800290c <bmi088_update+0x404>)
 8002690:	f7fd ffd2 	bl	8000638 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	795b      	ldrb	r3, [r3, #5]
 80026a0:	3301      	adds	r3, #1
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fd ff6b 	bl	8000588 <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ec43 2b11 	vmov	d1, r2, r3
 80026ba:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80028f0 <bmi088_update+0x3e8>
 80026be:	f00e f93f 	bl	8010940 <pow>
 80026c2:	ec53 2b10 	vmov	r2, r3, d0
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd ffb5 	bl	8000638 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b8d      	ldr	r3, [pc, #564]	@ (8002910 <bmi088_update+0x408>)
 80026dc:	f7fd fdf4 	bl	80002c8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	a383      	add	r3, pc, #524	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <bmi088_update+0x400>)
 8002700:	f7fe f8c4 	bl	800088c <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa8c 	bl	8000c28 <__aeabi_d2f>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002716:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd ff2f 	bl	8000588 <__aeabi_f2d>
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <bmi088_update+0x3fc>)
 8002730:	f7fe f8ac 	bl	800088c <__aeabi_ddiv>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <bmi088_update+0x400>)
 8002742:	f7fd ff79 	bl	8000638 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <bmi088_update+0x404>)
 8002754:	f7fd ff70 	bl	8000638 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	795b      	ldrb	r3, [r3, #5]
 8002764:	3301      	adds	r3, #1
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276e:	ee17 0a90 	vmov	r0, s15
 8002772:	f7fd ff09 	bl	8000588 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b11 	vmov	d1, r2, r3
 800277e:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 80028f0 <bmi088_update+0x3e8>
 8002782:	f00e f8dd 	bl	8010940 <pow>
 8002786:	ec53 2b10 	vmov	r2, r3, d0
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd ff53 	bl	8000638 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <bmi088_update+0x40c>)
 80027a0:	f7fd fd94 	bl	80002cc <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	a352      	add	r3, pc, #328	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <bmi088_update+0x400>)
 80027c4:	f7fe f862 	bl	800088c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe fa2a 	bl	8000c28 <__aeabi_d2f>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 80027da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	ee17 0a90 	vmov	r0, s15
 80027ea:	f7fd fecd 	bl	8000588 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <bmi088_update+0x3fc>)
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <bmi088_update+0x400>)
 8002806:	f7fd ff17 	bl	8000638 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <bmi088_update+0x404>)
 8002818:	f7fd ff0e 	bl	8000638 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	795b      	ldrb	r3, [r3, #5]
 8002828:	3301      	adds	r3, #1
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fea7 	bl	8000588 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b11 	vmov	d1, r2, r3
 8002842:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 80028f0 <bmi088_update+0x3e8>
 8002846:	f00e f87b 	bl	8010940 <pow>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd fef1 	bl	8000638 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <bmi088_update+0x408>)
 8002864:	f7fd fd32 	bl	80002cc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a321      	add	r3, pc, #132	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <bmi088_update+0x400>)
 8002888:	f7fe f800 	bl	800088c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f9c8 	bl	8000c28 <__aeabi_d2f>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <bmi088_update+0x410>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03c      	beq.n	8002920 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d502      	bpl.n	80028c6 <bmi088_update+0x3be>
 80028c0:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800291c <bmi088_update+0x414>
 80028c4:	e007      	b.n	80028d6 <bmi088_update+0x3ce>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 80028dc:	e023      	b.n	8002926 <bmi088_update+0x41e>
 80028de:	bf00      	nop
 80028e0:	00000000 	.word	0x00000000
 80028e4:	40438800 	.word	0x40438800
 80028e8:	00000000 	.word	0x00000000
 80028ec:	412e8480 	.word	0x412e8480
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40000000 	.word	0x40000000
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	40239eb8 	.word	0x40239eb8
 8002900:	40370000 	.word	0x40370000
 8002904:	40e00000 	.word	0x40e00000
 8002908:	408f4000 	.word	0x408f4000
 800290c:	3ff80000 	.word	0x3ff80000
 8002910:	40100000 	.word	0x40100000
 8002914:	402e0000 	.word	0x402e0000
 8002918:	20000236 	.word	0x20000236
 800291c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002920:	4bd1      	ldr	r3, [pc, #836]	@ (8002c68 <bmi088_update+0x760>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002934:	4bcd      	ldr	r3, [pc, #820]	@ (8002c6c <bmi088_update+0x764>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81b1 	beq.w	8002ca6 <bmi088_update+0x79e>
 8002944:	4bc9      	ldr	r3, [pc, #804]	@ (8002c6c <bmi088_update+0x764>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81ac 	beq.w	8002ca6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800294e:	4bc6      	ldr	r3, [pc, #792]	@ (8002c68 <bmi088_update+0x760>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 819f 	beq.w	8002c96 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68d8      	ldr	r0, [r3, #12]
 800295c:	230a      	movs	r3, #10
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2306      	movs	r3, #6
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2301      	movs	r3, #1
 800296c:	2202      	movs	r2, #2
 800296e:	21d0      	movs	r1, #208	@ 0xd0
 8002970:	f005 fd32 	bl	80083d8 <HAL_I2C_Mem_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800297a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8190 	bne.w	8002ca4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b21a      	sxth	r2, r3
 800298a:	7a3b      	ldrb	r3, [r7, #8]
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	ee17 0a90 	vmov	r0, s15
 80029be:	f7fd fde3 	bl	8000588 <__aeabi_f2d>
 80029c2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd ff60 	bl	800088c <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7a9b      	ldrb	r3, [r3, #10]
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029de:	4113      	asrs	r3, r2
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	ee17 0a90 	vmov	r0, s15
 80029ec:	f7fd fdcc 	bl	8000588 <__aeabi_f2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fe1e 	bl	8000638 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fdbc 	bl	8000588 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fc56 	bl	80002c8 <__aeabi_dsub>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	a38e      	add	r3, pc, #568	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fe05 	bl	8000638 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8f7 	bl	8000c28 <__aeabi_d2f>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	ee17 0a90 	vmov	r0, s15
 8002a50:	f7fd fd9a 	bl	8000588 <__aeabi_f2d>
 8002a54:	a380      	add	r3, pc, #512	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd ff17 	bl	800088c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7a9b      	ldrb	r3, [r3, #10]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a70:	4113      	asrs	r3, r2
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fdd5 	bl	8000638 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	461d      	mov	r5, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd73 	bl	8000588 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd fc0d 	bl	80002c8 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	a36a      	add	r3, pc, #424	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdbc 	bl	8000638 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f8ae 	bl	8000c28 <__aeabi_d2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	a35c      	add	r3, pc, #368	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fece 	bl	800088c <__aeabi_ddiv>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7a9b      	ldrb	r3, [r3, #10]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b02:	4113      	asrs	r3, r2
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fd3a 	bl	8000588 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fd8c 	bl	8000638 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd2a 	bl	8000588 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	f7fd fbc4 	bl	80002c8 <__aeabi_dsub>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	a345      	add	r3, pc, #276	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd73 	bl	8000638 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f865 	bl	8000c28 <__aeabi_d2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b70:	eef1 6a67 	vneg.f32	s13, s15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002b86:	eef1 7a67 	vneg.f32	s15, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002b96:	eeb0 3a64 	vmov.f32	s6, s9
 8002b9a:	eef0 2a45 	vmov.f32	s5, s10
 8002b9e:	eeb0 2a67 	vmov.f32	s4, s15
 8002ba2:	eef0 1a65 	vmov.f32	s3, s11
 8002ba6:	eeb0 1a46 	vmov.f32	s2, s12
 8002baa:	eef0 0a66 	vmov.f32	s1, s13
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	f001 ff65 	bl	8004a80 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002bb6:	f002 fcff 	bl	80055b8 <quaternionToYaw>
 8002bba:	eef0 7a40 	vmov.f32	s15, s0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002bc4:	f002 fd56 	bl	8005674 <quaternionToPitch>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002bd2:	f002 fd87 	bl	80056e4 <quaternionToRoll>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002be0:	f002 fbc2 	bl	8005368 <quaternionToThetaZ>
 8002be4:	eef0 7a40 	vmov.f32	s15, s0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002bee:	f001 fd33 	bl	8004658 <quaternionToYawDegree1>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002bfc:	f002 fc44 	bl	8005488 <quaternionToPitchDegree>
 8002c00:	eef0 7a40 	vmov.f32	s15, s0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002c0a:	f002 fc8d 	bl	8005528 <quaternionToRollDegree>
 8002c0e:	eef0 7a40 	vmov.f32	s15, s0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c24:	eef1 7a67 	vneg.f32	s15, s15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002c34:	eef0 1a46 	vmov.f32	s3, s12
 8002c38:	eeb0 1a66 	vmov.f32	s2, s13
 8002c3c:	eef0 0a67 	vmov.f32	s1, s15
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	f001 faee 	bl	8004224 <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002c48:	f001 fc12 	bl	8004470 <quaternionToYaw1>
 8002c4c:	eef0 7a40 	vmov.f32	s15, s0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e00d      	b.n	8002c70 <bmi088_update+0x768>
 8002c54:	f3af 8000 	nop.w
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40dfffc0 	.word	0x40dfffc0
 8002c60:	a0000000 	.word	0xa0000000
 8002c64:	3f91df46 	.word	0x3f91df46
 8002c68:	20000236 	.word	0x20000236
 8002c6c:	20000235 	.word	0x20000235
 8002c70:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002c74:	f001 fc5a 	bl	800452c <quaternionToPitch1>
 8002c78:	eef0 7a40 	vmov.f32	s15, s0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002c82:	f001 fc8b 	bl	800459c <quaternionToRoll1>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <bmi088_update+0x7a4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <bmi088_update+0x7a8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <bmi088_update+0x79e>
					return;
 8002ca4:	bf00      	nop
		}
}
 8002ca6:	3738      	adds	r7, #56	@ 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cac:	20000237 	.word	0x20000237
 8002cb0:	20000235 	.word	0x20000235

08002cb4 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <flight_algorithm_get_durum_verisi>:
{
    return current_phase;
}

uint8_t flight_algorithm_get_durum_verisi(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
    return durum_verisi;
 8002cec:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <flight_algorithm_get_durum_verisi+0x14>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000001 	.word	0x20000001

08002d00 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e01f      	b.n	8002d66 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	e016      	b.n	8002d5a <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d101      	bne.n	8002d38 <KalmanFilter_Init+0x38>
 8002d34:	491b      	ldr	r1, [pc, #108]	@ (8002da4 <KalmanFilter_Init+0xa4>)
 8002d36:	e001      	b.n	8002d3c <KalmanFilter_Init+0x3c>
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4403      	add	r3, r0
 8002d50:	3304      	adds	r3, #4
 8002d52:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	dde5      	ble.n	8002d2c <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3301      	adds	r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	dddc      	ble.n	8002d26 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002da8 <KalmanFilter_Init+0xa8>)
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <KalmanFilter_Init+0xac>)
 8002d76:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <KalmanFilter_Init+0xb0>)
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	42c80000 	.word	0x42c80000
 8002da8:	3c23d70a 	.word	0x3c23d70a
 8002dac:	3ba3d70a 	.word	0x3ba3d70a
 8002db0:	40a00000 	.word	0x40a00000

08002db4 <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_, L86_GNSS_BAUD_RATE baud_rate)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
	// Global UART handle'ı ayarla
	huart_gnss = huart_gnss_;
 8002dbe:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <L86_GNSS_Init+0x70>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6013      	str	r3, [r2, #0]
	
	// Baud rate ayarlarını şimdilik atla (varsayılan 9600 kullan)
	//set_baud_rate(baud_rate);
	
	// Buffer'ları temizle
	memset(gnss_rx_buffer, 0, BUFFER_SIZE * 2);
 8002dc4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4817      	ldr	r0, [pc, #92]	@ (8002e28 <L86_GNSS_Init+0x74>)
 8002dcc:	f009 fe8b 	bl	800cae6 <memset>
	memset(gps_buffer, 0, BUFFER_SIZE);
 8002dd0:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4815      	ldr	r0, [pc, #84]	@ (8002e2c <L86_GNSS_Init+0x78>)
 8002dd8:	f009 fe85 	bl	800cae6 <memset>
	
	// Eğer daha önce bir DMA işlemi varsa durdur
	HAL_UART_DMAStop(huart_gnss);
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <L86_GNSS_Init+0x70>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f007 fc37 	bl	800a654 <HAL_UART_DMAStop>
	HAL_Delay(50);
 8002de6:	2032      	movs	r0, #50	@ 0x32
 8002de8:	f003 fb24 	bl	8006434 <HAL_Delay>
	
	// DMA ile UART receive'i başlat (circular mode)
	HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8002dec:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <L86_GNSS_Init+0x70>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002df4:	490c      	ldr	r1, [pc, #48]	@ (8002e28 <L86_GNSS_Init+0x74>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f007 fc07 	bl	800a60a <HAL_UART_Receive_DMA>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
	
	// Eğer başlatma başarısızsa, tekrar dene
	if(status != HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <L86_GNSS_Init+0x68>
	{
		HAL_Delay(100);
 8002e06:	2064      	movs	r0, #100	@ 0x64
 8002e08:	f003 fb14 	bl	8006434 <HAL_Delay>
		HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <L86_GNSS_Init+0x70>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002e14:	4904      	ldr	r1, [pc, #16]	@ (8002e28 <L86_GNSS_Init+0x74>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f007 fbf7 	bl	800a60a <HAL_UART_Receive_DMA>
	}
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000023c 	.word	0x2000023c
 8002e28:	20000240 	.word	0x20000240
 8002e2c:	20000ba0 	.word	0x20000ba0

08002e30 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_UART_RxHalfCpltCallback+0x24>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d104      	bne.n	8002e4c <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 8002e42:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002e46:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <HAL_UART_RxHalfCpltCallback+0x28>)
 8002e48:	f000 f8e6 	bl	8003018 <process_data>
	}
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	2000023c 	.word	0x2000023c
 8002e58:	20000240 	.word	0x20000240

08002e5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_UART_RxCpltCallback+0x24>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d104      	bne.n	8002e78 <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 8002e6e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002e72:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <HAL_UART_RxCpltCallback+0x28>)
 8002e74:	f000 f8d0 	bl	8003018 <process_data>
		// DMA circular mode'da çalışıyor, yeniden başlatmaya gerek yok
	}
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000023c 	.word	0x2000023c
 8002e84:	200006f0 	.word	0x200006f0

08002e88 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f8d3 	bl	800303c <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f954 	bl	8003144 <get_GPGGA_data>
	format_data(gps_data_);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f9c3 	bl	8003228 <format_data>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <L86_GNSS_Print_Info>:

void L86_GNSS_Print_Info(gps_data_t *gps_data_, UART_HandleTypeDef *huart_Seri_Port)
{
 8002eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb0:	b0af      	sub	sp, #188	@ 0xbc
 8002eb2:	af1c      	add	r7, sp, #112	@ 0x70
 8002eb4:	6478      	str	r0, [r7, #68]	@ 0x44
 8002eb6:	6439      	str	r1, [r7, #64]	@ 0x40
	memset(msg, 0, MSG_SIZE);
 8002eb8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4853      	ldr	r0, [pc, #332]	@ (800300c <L86_GNSS_Print_Info+0x160>)
 8002ec0:	f009 fe11 	bl	800cae6 <memset>

	if(gps_data_->is_valid == VALID)
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	2b41      	cmp	r3, #65	@ 0x41
 8002eca:	f040 808a 	bne.w	8002fe2 <L86_GNSS_Print_Info+0x136>
	{
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
					"Speed: %f, Course: %f, Satellites in use: %u, HDOP: %f, Altitude: %f, Geoid height: %f, Orthometric height: %f\r\n",
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fb58 	bl	8000588 <__aeabi_f2d>
 8002ed8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ede:	7b1b      	ldrb	r3, [r3, #12]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb4e 	bl	8000588 <__aeabi_f2d>
 8002eec:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	7d1b      	ldrb	r3, [r3, #20]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ef4:	633b      	str	r3, [r7, #48]	@ 0x30
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f04:	623b      	str	r3, [r7, #32]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f0c:	61fb      	str	r3, [r7, #28]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f14:	61bb      	str	r3, [r7, #24]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f1c:	617b      	str	r3, [r7, #20]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f24:	613b      	str	r3, [r7, #16]
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f28:	699b      	ldr	r3, [r3, #24]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fb2c 	bl	8000588 <__aeabi_f2d>
 8002f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f36:	69db      	ldr	r3, [r3, #28]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fb25 	bl	8000588 <__aeabi_f2d>
 8002f3e:	e9c7 0100 	strd	r0, r1, [r7]
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f44:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f48:	461e      	mov	r6, r3
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fb1a 	bl	8000588 <__aeabi_f2d>
 8002f54:	4682      	mov	sl, r0
 8002f56:	468b      	mov	fp, r1
					gps_data_->altitude, gps_data_->geoid_height, gps_data_->orthometric_height);
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fb13 	bl	8000588 <__aeabi_f2d>
 8002f62:	4680      	mov	r8, r0
 8002f64:	4689      	mov	r9, r1
					gps_data_->altitude, gps_data_->geoid_height, gps_data_->orthometric_height);
 8002f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fb0c 	bl	8000588 <__aeabi_f2d>
 8002f70:	4604      	mov	r4, r0
 8002f72:	460d      	mov	r5, r1
					gps_data_->altitude, gps_data_->geoid_height, gps_data_->orthometric_height);
 8002f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd fb05 	bl	8000588 <__aeabi_f2d>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8002f86:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8002f8a:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 8002f8e:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8002f92:	9612      	str	r6, [sp, #72]	@ 0x48
 8002f94:	ed97 7b00 	vldr	d7, [r7]
 8002f98:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8002f9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002fa0:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	920c      	str	r2, [sp, #48]	@ 0x30
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	920a      	str	r2, [sp, #40]	@ 0x28
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	9208      	str	r2, [sp, #32]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fba:	9207      	str	r2, [sp, #28]
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbe:	9206      	str	r2, [sp, #24]
 8002fc0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002fc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002fd0:	ed8d 7b00 	vstr	d7, [sp]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <L86_GNSS_Print_Info+0x164>)
 8002fd6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002fda:	480c      	ldr	r0, [pc, #48]	@ (800300c <L86_GNSS_Print_Info+0x160>)
 8002fdc:	f009 fcb0 	bl	800c940 <sniprintf>
 8002fe0:	e004      	b.n	8002fec <L86_GNSS_Print_Info+0x140>
	}
	else
	{
		memcpy(msg, "Invalid Data!\r\n", 15);
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	490b      	ldr	r1, [pc, #44]	@ (8003014 <L86_GNSS_Print_Info+0x168>)
 8002fe6:	4809      	ldr	r0, [pc, #36]	@ (800300c <L86_GNSS_Print_Info+0x160>)
 8002fe8:	f009 fe23 	bl	800cc32 <memcpy>
	}

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002fec:	4807      	ldr	r0, [pc, #28]	@ (800300c <L86_GNSS_Print_Info+0x160>)
 8002fee:	f7fd f95f 	bl	80002b0 <strlen>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	4904      	ldr	r1, [pc, #16]	@ (800300c <L86_GNSS_Print_Info+0x160>)
 8002ffc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002ffe:	f007 fa79 	bl	800a4f4 <HAL_UART_Transmit>
}
 8003002:	bf00      	nop
 8003004:	374c      	adds	r7, #76	@ 0x4c
 8003006:	46bd      	mov	sp, r7
 8003008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800300c:	200010dc 	.word	0x200010dc
 8003010:	080121c0 	.word	0x080121c0
 8003014:	08012274 	.word	0x08012274

08003018 <process_data>:
	}
	return check_sum;
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	461a      	mov	r2, r3
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4803      	ldr	r0, [pc, #12]	@ (8003038 <process_data+0x20>)
 800302c:	f009 fe01 	bl	800cc32 <memcpy>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000ba0 	.word	0x20000ba0

0800303c <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	b08d      	sub	sp, #52	@ 0x34
 8003040:	af08      	add	r7, sp, #32
 8003042:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <get_GNRMC_data+0xe8>)
 8003046:	4838      	ldr	r0, [pc, #224]	@ (8003128 <get_GNRMC_data+0xec>)
 8003048:	f009 fd55 	bl	800caf6 <strstr>
 800304c:	4603      	mov	r3, r0
 800304e:	4a37      	ldr	r2, [pc, #220]	@ (800312c <get_GNRMC_data+0xf0>)
 8003050:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 8003052:	4b36      	ldr	r3, [pc, #216]	@ (800312c <get_GNRMC_data+0xf0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <get_GNRMC_data+0x32>
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <get_GNRMC_data+0xf0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3311      	adds	r3, #17
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b41      	cmp	r3, #65	@ 0x41
 8003064:	d103      	bne.n	800306e <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 8003066:	4b32      	ldr	r3, [pc, #200]	@ (8003130 <get_GNRMC_data+0xf4>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e005      	b.n	800307a <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 800306e:	4b30      	ldr	r3, [pc, #192]	@ (8003130 <get_GNRMC_data+0xf4>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2256      	movs	r2, #86	@ 0x56
 8003078:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 800307a:	4b2d      	ldr	r3, [pc, #180]	@ (8003130 <get_GNRMC_data+0xf4>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d148      	bne.n	8003114 <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 8003082:	2278      	movs	r2, #120	@ 0x78
 8003084:	2100      	movs	r1, #0
 8003086:	482b      	ldr	r0, [pc, #172]	@ (8003134 <get_GNRMC_data+0xf8>)
 8003088:	f009 fd2d 	bl	800cae6 <memset>
		counter = 0;
 800308c:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <get_GNRMC_data+0xfc>)
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8003092:	4b26      	ldr	r3, [pc, #152]	@ (800312c <get_GNRMC_data+0xf0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a29      	ldr	r2, [pc, #164]	@ (800313c <get_GNRMC_data+0x100>)
 8003098:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 800309a:	e011      	b.n	80030c0 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <get_GNRMC_data+0x100>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a25      	ldr	r2, [pc, #148]	@ (8003138 <get_GNRMC_data+0xfc>)
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	7819      	ldrb	r1, [r3, #0]
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <get_GNRMC_data+0xf8>)
 80030a8:	5499      	strb	r1, [r3, r2]
			counter++;
 80030aa:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <get_GNRMC_data+0xfc>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <get_GNRMC_data+0xfc>)
 80030b4:	701a      	strb	r2, [r3, #0]
			current_char++;
 80030b6:	4b21      	ldr	r3, [pc, #132]	@ (800313c <get_GNRMC_data+0x100>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <get_GNRMC_data+0x100>)
 80030be:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 80030c0:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <get_GNRMC_data+0x100>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80030c8:	d1e8      	bne.n	800309c <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f103 0c04 	add.w	ip, r3, #4
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3308      	adds	r3, #8
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	320c      	adds	r2, #12
 80030dc:	68f9      	ldr	r1, [r7, #12]
 80030de:	3110      	adds	r1, #16
 80030e0:	6079      	str	r1, [r7, #4]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	3014      	adds	r0, #20
 80030e6:	68fc      	ldr	r4, [r7, #12]
 80030e8:	3418      	adds	r4, #24
 80030ea:	68fd      	ldr	r5, [r7, #12]
 80030ec:	351c      	adds	r5, #28
 80030ee:	68fe      	ldr	r6, [r7, #12]
 80030f0:	3620      	adds	r6, #32
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	3124      	adds	r1, #36	@ 0x24
 80030f6:	9107      	str	r1, [sp, #28]
 80030f8:	9606      	str	r6, [sp, #24]
 80030fa:	9505      	str	r5, [sp, #20]
 80030fc:	9404      	str	r4, [sp, #16]
 80030fe:	9003      	str	r0, [sp, #12]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	9102      	str	r1, [sp, #8]
 8003104:	9201      	str	r2, [sp, #4]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4663      	mov	r3, ip
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	490c      	ldr	r1, [pc, #48]	@ (8003140 <get_GNRMC_data+0x104>)
 800310e:	4809      	ldr	r0, [pc, #36]	@ (8003134 <get_GNRMC_data+0xf8>)
 8003110:	f009 fc6a 	bl	800c9e8 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <get_GNRMC_data+0xf0>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003122:	bf00      	nop
 8003124:	080122a4 	.word	0x080122a4
 8003128:	20000ba0 	.word	0x20000ba0
 800312c:	20001050 	.word	0x20001050
 8003130:	20001058 	.word	0x20001058
 8003134:	20001060 	.word	0x20001060
 8003138:	200010d8 	.word	0x200010d8
 800313c:	2000105c 	.word	0x2000105c
 8003140:	080122ac 	.word	0x080122ac

08003144 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b08d      	sub	sp, #52	@ 0x34
 8003148:	af08      	add	r7, sp, #32
 800314a:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 800314c:	492f      	ldr	r1, [pc, #188]	@ (800320c <get_GPGGA_data+0xc8>)
 800314e:	4830      	ldr	r0, [pc, #192]	@ (8003210 <get_GPGGA_data+0xcc>)
 8003150:	f009 fcd1 	bl	800caf6 <strstr>
 8003154:	4603      	mov	r3, r0
 8003156:	4a2f      	ldr	r2, [pc, #188]	@ (8003214 <get_GPGGA_data+0xd0>)
 8003158:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 800315a:	4b2e      	ldr	r3, [pc, #184]	@ (8003214 <get_GPGGA_data+0xd0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d04f      	beq.n	8003202 <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	791b      	ldrb	r3, [r3, #4]
 8003166:	2b41      	cmp	r3, #65	@ 0x41
 8003168:	d148      	bne.n	80031fc <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 800316a:	2278      	movs	r2, #120	@ 0x78
 800316c:	2100      	movs	r1, #0
 800316e:	482a      	ldr	r0, [pc, #168]	@ (8003218 <get_GPGGA_data+0xd4>)
 8003170:	f009 fcb9 	bl	800cae6 <memset>
			counter = 0;
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <get_GPGGA_data+0xd8>)
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 800317a:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <get_GPGGA_data+0xd0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a28      	ldr	r2, [pc, #160]	@ (8003220 <get_GPGGA_data+0xdc>)
 8003180:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8003182:	e011      	b.n	80031a8 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8003184:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <get_GPGGA_data+0xdc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a24      	ldr	r2, [pc, #144]	@ (800321c <get_GPGGA_data+0xd8>)
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	7819      	ldrb	r1, [r3, #0]
 800318e:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <get_GPGGA_data+0xd4>)
 8003190:	5499      	strb	r1, [r3, r2]
				counter++;
 8003192:	4b22      	ldr	r3, [pc, #136]	@ (800321c <get_GPGGA_data+0xd8>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <get_GPGGA_data+0xd8>)
 800319c:	701a      	strb	r2, [r3, #0]
				current_char++;
 800319e:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <get_GPGGA_data+0xdc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3301      	adds	r3, #1
 80031a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003220 <get_GPGGA_data+0xdc>)
 80031a6:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 80031a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <get_GPGGA_data+0xdc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80031b0:	d1e8      	bne.n	8003184 <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f103 0c08 	add.w	ip, r3, #8
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	330c      	adds	r3, #12
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	3210      	adds	r2, #16
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	3114      	adds	r1, #20
 80031c8:	6079      	str	r1, [r7, #4]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	3025      	adds	r0, #37	@ 0x25
 80031ce:	68fc      	ldr	r4, [r7, #12]
 80031d0:	3426      	adds	r4, #38	@ 0x26
 80031d2:	68fd      	ldr	r5, [r7, #12]
 80031d4:	3528      	adds	r5, #40	@ 0x28
 80031d6:	68fe      	ldr	r6, [r7, #12]
 80031d8:	362c      	adds	r6, #44	@ 0x2c
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	3130      	adds	r1, #48	@ 0x30
 80031de:	9107      	str	r1, [sp, #28]
 80031e0:	9606      	str	r6, [sp, #24]
 80031e2:	9505      	str	r5, [sp, #20]
 80031e4:	9404      	str	r4, [sp, #16]
 80031e6:	9003      	str	r0, [sp, #12]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	9102      	str	r1, [sp, #8]
 80031ec:	9201      	str	r2, [sp, #4]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4663      	mov	r3, ip
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	490b      	ldr	r1, [pc, #44]	@ (8003224 <get_GPGGA_data+0xe0>)
 80031f6:	4808      	ldr	r0, [pc, #32]	@ (8003218 <get_GPGGA_data+0xd4>)
 80031f8:	f009 fbf6 	bl	800c9e8 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <get_GPGGA_data+0xd0>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
	}
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320a:	bf00      	nop
 800320c:	080122d4 	.word	0x080122d4
 8003210:	20000ba0 	.word	0x20000ba0
 8003214:	20001054 	.word	0x20001054
 8003218:	20001060 	.word	0x20001060
 800321c:	200010d8 	.word	0x200010d8
 8003220:	2000105c 	.word	0x2000105c
 8003224:	080122dc 	.word	0x080122dc

08003228 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	791b      	ldrb	r3, [r3, #4]
 8003234:	2b41      	cmp	r3, #65	@ 0x41
 8003236:	f040 8154 	bne.w	80034e2 <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4aab      	ldr	r2, [pc, #684]	@ (80034ec <format_data+0x2c4>)
 8003240:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8003242:	4baa      	ldr	r3, [pc, #680]	@ (80034ec <format_data+0x2c4>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80034f0 <format_data+0x2c8>
 800324c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003250:	ee16 0a90 	vmov	r0, s13
 8003254:	f7fd f998 	bl	8000588 <__aeabi_f2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	ec43 2b10 	vmov	d0, r2, r3
 8003260:	f00d fdca 	bl	8010df8 <floor>
 8003264:	ec53 2b10 	vmov	r2, r3, d0
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fcdc 	bl	8000c28 <__aeabi_d2f>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8003276:	4b9d      	ldr	r3, [pc, #628]	@ (80034ec <format_data+0x2c4>)
 8003278:	ed93 7a00 	vldr	s14, [r3]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003282:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80034f0 <format_data+0x2c8>
 8003286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800328a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328e:	4b97      	ldr	r3, [pc, #604]	@ (80034ec <format_data+0x2c4>)
 8003290:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8003294:	4b95      	ldr	r3, [pc, #596]	@ (80034ec <format_data+0x2c4>)
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80034f4 <format_data+0x2cc>
 800329e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032a2:	4b92      	ldr	r3, [pc, #584]	@ (80034ec <format_data+0x2c4>)
 80032a4:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80032ae:	4b8f      	ldr	r3, [pc, #572]	@ (80034ec <format_data+0x2c4>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	4a8d      	ldr	r2, [pc, #564]	@ (80034f8 <format_data+0x2d0>)
 80032c4:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 80032c6:	4b8c      	ldr	r3, [pc, #560]	@ (80034f8 <format_data+0x2d0>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80034f0 <format_data+0x2c8>
 80032d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032d4:	ee16 0a90 	vmov	r0, s13
 80032d8:	f7fd f956 	bl	8000588 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	ec43 2b10 	vmov	d0, r2, r3
 80032e4:	f00d fd88 	bl	8010df8 <floor>
 80032e8:	ec53 2b10 	vmov	r2, r3, d0
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd fc9a 	bl	8000c28 <__aeabi_d2f>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 80032fa:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <format_data+0x2d0>)
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003306:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80034f0 <format_data+0x2c8>
 800330a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003312:	4b79      	ldr	r3, [pc, #484]	@ (80034f8 <format_data+0x2d0>)
 8003314:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8003318:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <format_data+0x2d0>)
 800331a:	ed93 7a00 	vldr	s14, [r3]
 800331e:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80034f4 <format_data+0x2cc>
 8003322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003326:	4b74      	ldr	r3, [pc, #464]	@ (80034f8 <format_data+0x2d0>)
 8003328:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003332:	4b71      	ldr	r3, [pc, #452]	@ (80034f8 <format_data+0x2d0>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6d      	ldr	r2, [pc, #436]	@ (80034fc <format_data+0x2d4>)
 8003348:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 800334a:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <format_data+0x2d4>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003500 <format_data+0x2d8>
 8003354:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003358:	ee16 0a90 	vmov	r0, s13
 800335c:	f7fd f914 	bl	8000588 <__aeabi_f2d>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	ec43 2b10 	vmov	d0, r2, r3
 8003368:	f00d fd46 	bl	8010df8 <floor>
 800336c:	ec53 2b10 	vmov	r2, r3, d0
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	f7fd fc38 	bl	8000be8 <__aeabi_d2uiz>
 8003378:	4603      	mov	r3, r0
 800337a:	b2da      	uxtb	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8003382:	4b5e      	ldr	r3, [pc, #376]	@ (80034fc <format_data+0x2d4>)
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800338e:	461a      	mov	r2, r3
 8003390:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a4:	4b55      	ldr	r3, [pc, #340]	@ (80034fc <format_data+0x2d4>)
 80033a6:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b0:	3303      	adds	r3, #3
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c0:	2b17      	cmp	r3, #23
 80033c2:	d907      	bls.n	80033d4 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ca:	3b18      	subs	r3, #24
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 80033d4:	4b49      	ldr	r3, [pc, #292]	@ (80034fc <format_data+0x2d4>)
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80034f0 <format_data+0x2c8>
 80033de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033e2:	ee16 0a90 	vmov	r0, s13
 80033e6:	f7fd f8cf 	bl	8000588 <__aeabi_f2d>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	ec43 2b10 	vmov	d0, r2, r3
 80033f2:	f00d fd01 	bl	8010df8 <floor>
 80033f6:	ec53 2b10 	vmov	r2, r3, d0
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f7fd fbf3 	bl	8000be8 <__aeabi_d2uiz>
 8003402:	4603      	mov	r3, r0
 8003404:	b2da      	uxtb	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 800340c:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <format_data+0x2d4>)
 800340e:	ed93 7a00 	vldr	s14, [r3]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003418:	461a      	mov	r2, r3
 800341a:	2364      	movs	r3, #100	@ 0x64
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342c:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <format_data+0x2d4>)
 800342e:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8003432:	4b32      	ldr	r3, [pc, #200]	@ (80034fc <format_data+0x2d4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd f8a6 	bl	8000588 <__aeabi_f2d>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	ec43 2b10 	vmov	d0, r2, r3
 8003444:	f00d fcd8 	bl	8010df8 <floor>
 8003448:	ec53 2b10 	vmov	r2, r3, d0
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f7fd fbca 	bl	8000be8 <__aeabi_d2uiz>
 8003454:	4603      	mov	r3, r0
 8003456:	b2da      	uxtb	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a28      	ldr	r2, [pc, #160]	@ (8003504 <format_data+0x2dc>)
 8003464:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8003466:	4b27      	ldr	r3, [pc, #156]	@ (8003504 <format_data+0x2dc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	@ (8003508 <format_data+0x2e0>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	0b5b      	lsrs	r3, r3, #13
 8003472:	b2da      	uxtb	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 800347a:	4b22      	ldr	r3, [pc, #136]	@ (8003504 <format_data+0x2dc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8003484:	4611      	mov	r1, r2
 8003486:	f242 7210 	movw	r2, #10000	@ 0x2710
 800348a:	fb01 f202 	mul.w	r2, r1, r2
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <format_data+0x2dc>)
 8003492:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <format_data+0x2dc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1c      	ldr	r2, [pc, #112]	@ (800350c <format_data+0x2e4>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 80034a8:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <format_data+0x2dc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80034b2:	4611      	mov	r1, r2
 80034b4:	2264      	movs	r2, #100	@ 0x64
 80034b6:	fb01 f202 	mul.w	r2, r1, r2
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	4a11      	ldr	r2, [pc, #68]	@ (8003504 <format_data+0x2dc>)
 80034be:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 80034c0:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <format_data+0x2dc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000126c 	.word	0x2000126c
 80034f0:	42c80000 	.word	0x42c80000
 80034f4:	42700000 	.word	0x42700000
 80034f8:	20001270 	.word	0x20001270
 80034fc:	20001274 	.word	0x20001274
 8003500:	461c4000 	.word	0x461c4000
 8003504:	20001278 	.word	0x20001278
 8003508:	d1b71759 	.word	0xd1b71759
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
 800351c:	460b      	mov	r3, r1
 800351e:	71bb      	strb	r3, [r7, #6]
 8003520:	4613      	mov	r3, r2
 8003522:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8003528:	79bb      	ldrb	r3, [r7, #6]
 800352a:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 800352c:	797b      	ldrb	r3, [r7, #5]
 800352e:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e00c      	b.n	8003550 <send_command+0x40>
        command[3 + i] = data[i];
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	441a      	add	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3303      	adds	r3, #3
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	3318      	adds	r3, #24
 8003544:	443b      	add	r3, r7
 8003546:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b08      	cmp	r3, #8
 8003554:	ddef      	ble.n	8003536 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 8003556:	f107 0108 	add.w	r1, r7, #8
 800355a:	2364      	movs	r3, #100	@ 0x64
 800355c:	220c      	movs	r2, #12
 800355e:	4803      	ldr	r0, [pc, #12]	@ (800356c <send_command+0x5c>)
 8003560:	f006 ffc8 	bl	800a4f4 <HAL_UART_Transmit>
}
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	2000145c 	.word	0x2000145c

08003570 <lora_activate>:

void lora_activate()
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8003574:	2200      	movs	r2, #0
 8003576:	2104      	movs	r1, #4
 8003578:	4804      	ldr	r0, [pc, #16]	@ (800358c <lora_activate+0x1c>)
 800357a:	f004 fc8d 	bl	8007e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 800357e:	2200      	movs	r2, #0
 8003580:	2108      	movs	r1, #8
 8003582:	4802      	ldr	r0, [pc, #8]	@ (800358c <lora_activate+0x1c>)
 8003584:	f004 fc88 	bl	8007e98 <HAL_GPIO_WritePin>
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40020800 	.word	0x40020800

08003590 <lora_deactivate>:

void lora_deactivate()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 8003594:	2201      	movs	r2, #1
 8003596:	2104      	movs	r1, #4
 8003598:	4804      	ldr	r0, [pc, #16]	@ (80035ac <lora_deactivate+0x1c>)
 800359a:	f004 fc7d 	bl	8007e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 800359e:	2201      	movs	r2, #1
 80035a0:	2108      	movs	r1, #8
 80035a2:	4802      	ldr	r0, [pc, #8]	@ (80035ac <lora_deactivate+0x1c>)
 80035a4:	f004 fc78 	bl	8007e98 <HAL_GPIO_WritePin>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40020800 	.word	0x40020800

080035b0 <lora_configure>:

void lora_configure(lorastruct *config)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2208      	movs	r2, #8
 80035e6:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2207      	movs	r2, #7
 80035ec:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	79db      	ldrb	r3, [r3, #7]
 80035f2:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	799b      	ldrb	r3, [r3, #6]
 80035f8:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7a5b      	ldrb	r3, [r3, #9]
 80035fe:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7c5b      	ldrb	r3, [r3, #17]
 8003608:	4313      	orrs	r3, r2
 800360a:	b2da      	uxtb	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	4313      	orrs	r3, r2
 8003612:	b2db      	uxtb	r3, r3
 8003614:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	789a      	ldrb	r2, [r3, #2]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7a9b      	ldrb	r3, [r3, #10]
 800361e:	4313      	orrs	r3, r2
 8003620:	b2da      	uxtb	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	78db      	ldrb	r3, [r3, #3]
 8003626:	4313      	orrs	r3, r2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7a1b      	ldrb	r3, [r3, #8]
 8003630:	2b53      	cmp	r3, #83	@ 0x53
 8003632:	d902      	bls.n	800363a <lora_configure+0x8a>
    	config->channel = 83;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2253      	movs	r2, #83	@ 0x53
 8003638:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7a1b      	ldrb	r3, [r3, #8]
 800363e:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7ada      	ldrb	r2, [r3, #11]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7b1b      	ldrb	r3, [r3, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	b2da      	uxtb	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7b5b      	ldrb	r3, [r3, #13]
 8003650:	4313      	orrs	r3, r2
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7b9b      	ldrb	r3, [r3, #14]
 8003658:	4313      	orrs	r3, r2
 800365a:	b2da      	uxtb	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7bdb      	ldrb	r3, [r3, #15]
 8003660:	4313      	orrs	r3, r2
 8003662:	b2da      	uxtb	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7c1b      	ldrb	r3, [r3, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	795b      	ldrb	r3, [r3, #5]
 8003672:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	791b      	ldrb	r3, [r3, #4]
 8003678:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	2209      	movs	r2, #9
 8003680:	2100      	movs	r1, #0
 8003682:	20c0      	movs	r0, #192	@ 0xc0
 8003684:	f7ff ff44 	bl	8003510 <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003694:	f002 fe5c 	bl	8006350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003698:	f000 f898 	bl	80037cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800369c:	f000 faa4 	bl	8003be8 <MX_GPIO_Init>
  MX_DMA_Init();
 80036a0:	f000 fa7a 	bl	8003b98 <MX_DMA_Init>
  MX_I2C1_Init();
 80036a4:	f000 f950 	bl	8003948 <MX_I2C1_Init>
  MX_I2C3_Init();
 80036a8:	f000 f97c 	bl	80039a4 <MX_I2C3_Init>
  MX_TIM2_Init();
 80036ac:	f000 f9a8 	bl	8003a00 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80036b0:	f000 fa1e 	bl	8003af0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80036b4:	f000 f8f6 	bl	80038a4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80036b8:	f000 fa44 	bl	8003b44 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80036bc:	f000 f9ee 	bl	8003a9c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 80036c0:	f000 f99e 	bl	8003a00 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80036c4:	4836      	ldr	r0, [pc, #216]	@ (80037a0 <main+0x110>)
 80036c6:	f006 faa5 	bl	8009c14 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2101      	movs	r1, #1
 80036ce:	201c      	movs	r0, #28
 80036d0:	f003 fd13 	bl	80070fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d4:	201c      	movs	r0, #28
 80036d6:	f003 fd2c 	bl	8007132 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 80036da:	2201      	movs	r2, #1
 80036dc:	2100      	movs	r1, #0
 80036de:	2009      	movs	r0, #9
 80036e0:	f003 fd0b 	bl	80070fa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 80036e4:	2201      	movs	r2, #1
 80036e6:	2100      	movs	r1, #0
 80036e8:	200a      	movs	r0, #10
 80036ea:	f003 fd06 	bl	80070fa <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80036ee:	200a      	movs	r0, #10
 80036f0:	f003 fd1f 	bl	8007132 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80036f4:	2009      	movs	r0, #9
 80036f6:	f003 fd1c 	bl	8007132 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 80036fa:	f000 fb07 	bl	8003d0c <bme280_begin>
	HAL_Delay(1000);
 80036fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003702:	f002 fe97 	bl	8006434 <HAL_Delay>
	bme280_config();
 8003706:	f7fd fec1 	bl	800148c <bme280_config>
	bme280_update();
 800370a:	f7fe f87b 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 800370e:	f000 fb15 	bl	8003d3c <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 8003712:	4824      	ldr	r0, [pc, #144]	@ (80037a4 <main+0x114>)
 8003714:	f7fe fcf6 	bl	8002104 <bmi088_config>
	//get_offset(&BMI_sensor);

	// Initialize HMC1021 ADC DMA for single-axis magnetometer readings
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)hmc1021_adc_buffer, 1);
 8003718:	2201      	movs	r2, #1
 800371a:	4923      	ldr	r1, [pc, #140]	@ (80037a8 <main+0x118>)
 800371c:	4823      	ldr	r0, [pc, #140]	@ (80037ac <main+0x11c>)
 800371e:	f003 f801 	bl	8006724 <HAL_ADC_Start_DMA>


	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 8003722:	f002 f83d 	bl	80057a0 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 8003726:	4822      	ldr	r0, [pc, #136]	@ (80037b0 <main+0x120>)
 8003728:	f002 f9b2 	bl	8005a90 <sensor_fusion_init>

	/* ==== LORA COMMUNICATION SETUP ==== */
	lora_deactivate();
 800372c:	f7ff ff30 	bl	8003590 <lora_deactivate>
	loraBegin();
 8003730:	f000 fb32 	bl	8003d98 <loraBegin>
	lora_activate();
 8003734:	f7ff ff1c 	bl	8003570 <lora_activate>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	L86_GPIO_Init();
 8003738:	f000 fb62 	bl	8003e00 <L86_GPIO_Init>
	HAL_Delay(100);  // GPS modülün boot olması için daha fazla bekle
 800373c:	2064      	movs	r0, #100	@ 0x64
 800373e:	f002 fe79 	bl	8006434 <HAL_Delay>
	L86_GNSS_Init(&huart6, BAUD_RATE_9600);
 8003742:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8003746:	481b      	ldr	r0, [pc, #108]	@ (80037b4 <main+0x124>)
 8003748:	f7ff fb34 	bl	8002db4 <L86_GNSS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 800374c:	4815      	ldr	r0, [pc, #84]	@ (80037a4 <main+0x114>)
 800374e:	f7fe fedb 	bl	8002508 <bmi088_update>
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 8003752:	f7fe f857 	bl	8001804 <bme280_update>
		//read_value();	// Transmit current sensor readings


		/*PERIODIC OPERATIONS (100ms)*/
		// Execute operations every 100ms
		if (tx_timer_flag_100ms >= 1) {
 8003756:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <main+0x128>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <main+0xfc>
		  tx_timer_flag_100ms = 0;
 8003760:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <main+0x128>)
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  read_ADC();
 8003766:	f000 fb73 	bl	8003e50 <read_ADC>

		  // Package all sensor data into telemetry packet for ground station transmission
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &gnss_data, hmc1021_gauss);
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <main+0x12c>)
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	eeb0 0a67 	vmov.f32	s0, s15
 8003774:	4a12      	ldr	r2, [pc, #72]	@ (80037c0 <main+0x130>)
 8003776:	490b      	ldr	r1, [pc, #44]	@ (80037a4 <main+0x114>)
 8003778:	480d      	ldr	r0, [pc, #52]	@ (80037b0 <main+0x120>)
 800377a:	f000 fc4d 	bl	8004018 <addDataPacketNormal>

		  // Update sensor readings and transmit data
		  //read_value();

		  // Update GPS/GNSS data
		  L86_GNSS_Update(&gnss_data);
 800377e:	4810      	ldr	r0, [pc, #64]	@ (80037c0 <main+0x130>)
 8003780:	f7ff fb82 	bl	8002e88 <L86_GNSS_Update>
		  L86_GNSS_Print_Info(&gnss_data,&huart2);
 8003784:	490f      	ldr	r1, [pc, #60]	@ (80037c4 <main+0x134>)
 8003786:	480e      	ldr	r0, [pc, #56]	@ (80037c0 <main+0x130>)
 8003788:	f7ff fb90 	bl	8002eac <L86_GNSS_Print_Info>
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 800378c:	4b0e      	ldr	r3, [pc, #56]	@ (80037c8 <main+0x138>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b09      	cmp	r3, #9
 8003794:	d9da      	bls.n	800374c <main+0xbc>
		  tx_timer_flag_1s = 0;
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <main+0x138>)
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 800379c:	e7d6      	b.n	800374c <main+0xbc>
 800379e:	bf00      	nop
 80037a0:	200013cc 	.word	0x200013cc
 80037a4:	200015b4 	.word	0x200015b4
 80037a8:	20001718 	.word	0x20001718
 80037ac:	2000127c 	.word	0x2000127c
 80037b0:	2000154c 	.word	0x2000154c
 80037b4:	200014a4 	.word	0x200014a4
 80037b8:	20001710 	.word	0x20001710
 80037bc:	20001720 	.word	0x20001720
 80037c0:	20001634 	.word	0x20001634
 80037c4:	2000145c 	.word	0x2000145c
 80037c8:	20001711 	.word	0x20001711

080037cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b094      	sub	sp, #80	@ 0x50
 80037d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037d2:	f107 031c 	add.w	r3, r7, #28
 80037d6:	2234      	movs	r2, #52	@ 0x34
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f009 f983 	bl	800cae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	4b29      	ldr	r3, [pc, #164]	@ (800389c <SystemClock_Config+0xd0>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	4a28      	ldr	r2, [pc, #160]	@ (800389c <SystemClock_Config+0xd0>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003800:	4b26      	ldr	r3, [pc, #152]	@ (800389c <SystemClock_Config+0xd0>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800380c:	2300      	movs	r3, #0
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4b23      	ldr	r3, [pc, #140]	@ (80038a0 <SystemClock_Config+0xd4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <SystemClock_Config+0xd4>)
 8003816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <SystemClock_Config+0xd4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003828:	2301      	movs	r3, #1
 800382a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800382c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003830:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003832:	2302      	movs	r3, #2
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800383a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800383c:	2308      	movs	r3, #8
 800383e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003840:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003844:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003846:	2302      	movs	r3, #2
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800384a:	2302      	movs	r3, #2
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800384e:	2302      	movs	r3, #2
 8003850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4618      	mov	r0, r3
 8003858:	f005 feee 	bl	8009638 <HAL_RCC_OscConfig>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003862:	f000 fbab 	bl	8003fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003866:	230f      	movs	r3, #15
 8003868:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800386a:	2302      	movs	r3, #2
 800386c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003872:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800387c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	2105      	movs	r1, #5
 8003884:	4618      	mov	r0, r3
 8003886:	f005 fb8d 	bl	8008fa4 <HAL_RCC_ClockConfig>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003890:	f000 fb94 	bl	8003fbc <Error_Handler>
  }
}
 8003894:	bf00      	nop
 8003896:	3750      	adds	r7, #80	@ 0x50
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	40007000 	.word	0x40007000

080038a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038aa:	463b      	mov	r3, r7
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038b6:	4b21      	ldr	r3, [pc, #132]	@ (800393c <MX_ADC1_Init+0x98>)
 80038b8:	4a21      	ldr	r2, [pc, #132]	@ (8003940 <MX_ADC1_Init+0x9c>)
 80038ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038bc:	4b1f      	ldr	r3, [pc, #124]	@ (800393c <MX_ADC1_Init+0x98>)
 80038be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038c4:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <MX_ADC1_Init+0x98>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80038ca:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <MX_ADC1_Init+0x98>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <MX_ADC1_Init+0x98>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038d6:	4b19      	ldr	r3, [pc, #100]	@ (800393c <MX_ADC1_Init+0x98>)
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038de:	4b17      	ldr	r3, [pc, #92]	@ (800393c <MX_ADC1_Init+0x98>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038e4:	4b15      	ldr	r3, [pc, #84]	@ (800393c <MX_ADC1_Init+0x98>)
 80038e6:	4a17      	ldr	r2, [pc, #92]	@ (8003944 <MX_ADC1_Init+0xa0>)
 80038e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038ea:	4b14      	ldr	r3, [pc, #80]	@ (800393c <MX_ADC1_Init+0x98>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <MX_ADC1_Init+0x98>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <MX_ADC1_Init+0x98>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038fe:	4b0f      	ldr	r3, [pc, #60]	@ (800393c <MX_ADC1_Init+0x98>)
 8003900:	2201      	movs	r2, #1
 8003902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003904:	480d      	ldr	r0, [pc, #52]	@ (800393c <MX_ADC1_Init+0x98>)
 8003906:	f002 fdb9 	bl	800647c <HAL_ADC_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003910:	f000 fb54 	bl	8003fbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003914:	2309      	movs	r3, #9
 8003916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003918:	2301      	movs	r3, #1
 800391a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800391c:	2301      	movs	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003920:	463b      	mov	r3, r7
 8003922:	4619      	mov	r1, r3
 8003924:	4805      	ldr	r0, [pc, #20]	@ (800393c <MX_ADC1_Init+0x98>)
 8003926:	f003 f82f 	bl	8006988 <HAL_ADC_ConfigChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003930:	f000 fb44 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000127c 	.word	0x2000127c
 8003940:	40012000 	.word	0x40012000
 8003944:	0f000001 	.word	0x0f000001

08003948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800394c:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <MX_I2C1_Init+0x50>)
 800394e:	4a13      	ldr	r2, [pc, #76]	@ (800399c <MX_I2C1_Init+0x54>)
 8003950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003952:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <MX_I2C1_Init+0x50>)
 8003954:	4a12      	ldr	r2, [pc, #72]	@ (80039a0 <MX_I2C1_Init+0x58>)
 8003956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <MX_I2C1_Init+0x50>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800395e:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <MX_I2C1_Init+0x50>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <MX_I2C1_Init+0x50>)
 8003966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800396a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <MX_I2C1_Init+0x50>)
 800396e:	2200      	movs	r2, #0
 8003970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003972:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <MX_I2C1_Init+0x50>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003978:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <MX_I2C1_Init+0x50>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <MX_I2C1_Init+0x50>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003984:	4804      	ldr	r0, [pc, #16]	@ (8003998 <MX_I2C1_Init+0x50>)
 8003986:	f004 fab9 	bl	8007efc <HAL_I2C_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003990:	f000 fb14 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20001324 	.word	0x20001324
 800399c:	40005400 	.word	0x40005400
 80039a0:	000186a0 	.word	0x000186a0

080039a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039a8:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <MX_I2C3_Init+0x54>)
 80039ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80039ae:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039b0:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <MX_I2C3_Init+0x58>)
 80039b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039b4:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039bc:	2200      	movs	r2, #0
 80039be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039d4:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80039e0:	4804      	ldr	r0, [pc, #16]	@ (80039f4 <MX_I2C3_Init+0x50>)
 80039e2:	f004 fa8b 	bl	8007efc <HAL_I2C_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80039ec:	f000 fae6 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20001378 	.word	0x20001378
 80039f8:	40005c00 	.word	0x40005c00
 80039fc:	000186a0 	.word	0x000186a0

08003a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a14:	463b      	mov	r3, r7
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8003a24:	4b1c      	ldr	r3, [pc, #112]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a26:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003a32:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3a:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a40:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a46:	4814      	ldr	r0, [pc, #80]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a48:	f006 f894 	bl	8009b74 <HAL_TIM_Base_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a52:	f000 fab3 	bl	8003fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a5c:	f107 0308 	add.w	r3, r7, #8
 8003a60:	4619      	mov	r1, r3
 8003a62:	480d      	ldr	r0, [pc, #52]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a64:	f006 fa36 	bl	8009ed4 <HAL_TIM_ConfigClockSource>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a6e:	f000 faa5 	bl	8003fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4806      	ldr	r0, [pc, #24]	@ (8003a98 <MX_TIM2_Init+0x98>)
 8003a80:	f006 fc58 	bl	800a334 <HAL_TIMEx_MasterConfigSynchronization>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a8a:	f000 fa97 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200013cc 	.word	0x200013cc

08003a9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <MX_UART4_Init+0x50>)
 8003aa4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003aa8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003aac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003ad2:	4805      	ldr	r0, [pc, #20]	@ (8003ae8 <MX_UART4_Init+0x4c>)
 8003ad4:	f006 fcbe 	bl	800a454 <HAL_UART_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003ade:	f000 fa6d 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20001414 	.word	0x20001414
 8003aec:	40004c00 	.word	0x40004c00

08003af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003af4:	4b11      	ldr	r3, [pc, #68]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003af6:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <MX_USART2_UART_Init+0x50>)
 8003af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b14:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b16:	220c      	movs	r2, #12
 8003b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b26:	4805      	ldr	r0, [pc, #20]	@ (8003b3c <MX_USART2_UART_Init+0x4c>)
 8003b28:	f006 fc94 	bl	800a454 <HAL_UART_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b32:	f000 fa43 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	2000145c 	.word	0x2000145c
 8003b40:	40004400 	.word	0x40004400

08003b44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <MX_USART6_UART_Init+0x50>)
 8003b4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b7a:	4805      	ldr	r0, [pc, #20]	@ (8003b90 <MX_USART6_UART_Init+0x4c>)
 8003b7c:	f006 fc6a 	bl	800a454 <HAL_UART_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b86:	f000 fa19 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200014a4 	.word	0x200014a4
 8003b94:	40011400 	.word	0x40011400

08003b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <MX_DMA_Init+0x4c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8003be4 <MX_DMA_Init+0x4c>)
 8003ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <MX_DMA_Init+0x4c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2038      	movs	r0, #56	@ 0x38
 8003bc0:	f003 fa9b 	bl	80070fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003bc4:	2038      	movs	r0, #56	@ 0x38
 8003bc6:	f003 fab4 	bl	8007132 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	203a      	movs	r0, #58	@ 0x3a
 8003bd0:	f003 fa93 	bl	80070fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003bd4:	203a      	movs	r0, #58	@ 0x3a
 8003bd6:	f003 faac 	bl	8007132 <HAL_NVIC_EnableIRQ>

}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800

08003be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	60da      	str	r2, [r3, #12]
 8003bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	4b3f      	ldr	r3, [pc, #252]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	4a3e      	ldr	r2, [pc, #248]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	4a37      	ldr	r2, [pc, #220]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2a:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	4a30      	ldr	r2, [pc, #192]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c46:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	4a29      	ldr	r2, [pc, #164]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c62:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <MX_GPIO_Init+0x118>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	210c      	movs	r1, #12
 8003c72:	4824      	ldr	r0, [pc, #144]	@ (8003d04 <MX_GPIO_Init+0x11c>)
 8003c74:	f004 f910 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c7e:	4822      	ldr	r0, [pc, #136]	@ (8003d08 <MX_GPIO_Init+0x120>)
 8003c80:	f004 f90a 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8003c84:	230c      	movs	r3, #12
 8003c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c90:	2300      	movs	r3, #0
 8003c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4619      	mov	r1, r3
 8003c9a:	481a      	ldr	r0, [pc, #104]	@ (8003d04 <MX_GPIO_Init+0x11c>)
 8003c9c:	f003 fe74 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4813      	ldr	r0, [pc, #76]	@ (8003d08 <MX_GPIO_Init+0x120>)
 8003cba:	f003 fe65 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003cbe:	2318      	movs	r3, #24
 8003cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480d      	ldr	r0, [pc, #52]	@ (8003d08 <MX_GPIO_Init+0x120>)
 8003cd4:	f003 fe58 	bl	8007988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2100      	movs	r1, #0
 8003cdc:	2009      	movs	r0, #9
 8003cde:	f003 fa0c 	bl	80070fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003ce2:	2009      	movs	r0, #9
 8003ce4:	f003 fa25 	bl	8007132 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	200a      	movs	r0, #10
 8003cee:	f003 fa04 	bl	80070fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003cf2:	200a      	movs	r0, #10
 8003cf4:	f003 fa1d 	bl	8007132 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cf8:	bf00      	nop
 8003cfa:	3728      	adds	r7, #40	@ 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020400 	.word	0x40020400

08003d0c <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_8;
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <bme280_begin+0x28>)
 8003d12:	2203      	movs	r2, #3
 8003d14:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <bme280_begin+0x28>)
 8003d18:	2203      	movs	r2, #3
 8003d1a:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_8;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <bme280_begin+0x28>)
 8003d1e:	2204      	movs	r2, #4
 8003d20:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_20;
 8003d22:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <bme280_begin+0x28>)
 8003d24:	2207      	movs	r2, #7
 8003d26:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8003d28:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <bme280_begin+0x2c>)
 8003d2a:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <bme280_begin+0x28>)
 8003d2c:	f7fd fd32 	bl	8001794 <bme280_init>
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000154c 	.word	0x2000154c
 8003d38:	20001378 	.word	0x20001378

08003d3c <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8003d40:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d42:	2208      	movs	r2, #8
 8003d44:	719a      	strb	r2, [r3, #6]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d48:	2209      	movs	r2, #9
 8003d4a:	71da      	strb	r2, [r3, #7]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003d4c:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	711a      	strb	r2, [r3, #4]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d54:	2203      	movs	r2, #3
 8003d56:	715a      	strb	r2, [r3, #5]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8003d58:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	725a      	strb	r2, [r3, #9]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	721a      	strb	r2, [r3, #8]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d6c:	2209      	movs	r2, #9
 8003d6e:	741a      	strb	r2, [r3, #16]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d72:	220a      	movs	r2, #10
 8003d74:	745a      	strb	r2, [r3, #17]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d78:	4a06      	ldr	r2, [pc, #24]	@ (8003d94 <bmi_imu_init+0x58>)
 8003d7a:	60da      	str	r2, [r3, #12]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8003d7c:	4b04      	ldr	r3, [pc, #16]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]

  return bmi088_init(&BMI_sensor);
 8003d82:	4803      	ldr	r0, [pc, #12]	@ (8003d90 <bmi_imu_init+0x54>)
 8003d84:	f7fe f966 	bl	8002054 <bmi088_init>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200015b4 	.word	0x200015b4
 8003d94:	20001324 	.word	0x20001324

08003d98 <loraBegin>:
/**
 * @brief Initialize LoRa communication module
 * @note Configures E22 LoRa module with communication parameters
 */
void loraBegin()
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8003d9c:	2064      	movs	r0, #100	@ 0x64
 8003d9e:	f002 fb49 	bl	8006434 <HAL_Delay>

  // Set LoRa module to configuration mode
  HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2104      	movs	r1, #4
 8003da6:	4814      	ldr	r0, [pc, #80]	@ (8003df8 <loraBegin+0x60>)
 8003da8:	f004 f876 	bl	8007e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8003dac:	2201      	movs	r2, #1
 8003dae:	2108      	movs	r1, #8
 8003db0:	4811      	ldr	r0, [pc, #68]	@ (8003df8 <loraBegin+0x60>)
 8003db2:	f004 f871 	bl	8007e98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003db6:	2064      	movs	r0, #100	@ 0x64
 8003db8:	f002 fb3c 	bl	8006434 <HAL_Delay>

  // Configure LoRa parameters
  e22_lora.baudRate = LORA_BAUD_9600;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <loraBegin+0x64>)
 8003dbe:	2260      	movs	r2, #96	@ 0x60
 8003dc0:	701a      	strb	r2, [r3, #0]
  e22_lora.airRate = LORA_AIR_RATE_2_4k;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <loraBegin+0x64>)
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	705a      	strb	r2, [r3, #1]
  e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <loraBegin+0x64>)
 8003dca:	2280      	movs	r2, #128	@ 0x80
 8003dcc:	709a      	strb	r2, [r3, #2]
  e22_lora.power = LORA_POWER_37dbm;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <loraBegin+0x64>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	70da      	strb	r2, [r3, #3]
  e22_lora.loraAddress.address16 = 0x0000;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <loraBegin+0x64>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	80da      	strh	r2, [r3, #6]
  e22_lora.loraKey.key16 = 0x0000;
 8003dda:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <loraBegin+0x64>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	809a      	strh	r2, [r3, #4]
  e22_lora.channel = ROCKET_TELEM_FREQ;
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <loraBegin+0x64>)
 8003de2:	2219      	movs	r2, #25
 8003de4:	721a      	strb	r2, [r3, #8]

  lora_configure(&e22_lora);
 8003de6:	4805      	ldr	r0, [pc, #20]	@ (8003dfc <loraBegin+0x64>)
 8003de8:	f7ff fbe2 	bl	80035b0 <lora_configure>
  HAL_Delay(1000);
 8003dec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003df0:	f002 fb20 	bl	8006434 <HAL_Delay>
}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	2000167c 	.word	0x2000167c

08003e00 <L86_GPIO_Init>:
/**
 * @brief Initialize L86 GPS/GNSS GPIO pins
 * @note Configures UART5 pins for GPS communication
 */
static void L86_GPIO_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct_UART6_TX;
  GPIO_InitTypeDef GPIO_InitStruct_UART6_RX;

  // Configure UART5 TX pin
  GPIO_InitStruct_UART6_TX.Pin = L86_TX_Pin;
 8003e06:	2340      	movs	r3, #64	@ 0x40
 8003e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct_UART6_TX.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct_UART6_TX.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct_UART6_TX.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct_UART6_TX.Alternate = GPIO_AF8_USART6;
 8003e16:	2308      	movs	r3, #8
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(L86_TX_GPIO_Port, &GPIO_InitStruct_UART6_TX);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	480a      	ldr	r0, [pc, #40]	@ (8003e4c <L86_GPIO_Init+0x4c>)
 8003e22:	f003 fdb1 	bl	8007988 <HAL_GPIO_Init>

  // Configure UART5 RX pin
  GPIO_InitStruct_UART6_RX.Pin = L86_RX_Pin;
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct_UART6_RX.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct_UART6_RX.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct_UART6_RX.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct_UART6_RX.Alternate = GPIO_AF8_USART6;
 8003e36:	2308      	movs	r3, #8
 8003e38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(L86_RX_GPIO_Port, &GPIO_InitStruct_UART6_RX);
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4803      	ldr	r0, [pc, #12]	@ (8003e4c <L86_GPIO_Init+0x4c>)
 8003e40:	f003 fda2 	bl	8007988 <HAL_GPIO_Init>
}
 8003e44:	bf00      	nop
 8003e46:	3728      	adds	r7, #40	@ 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40020800 	.word	0x40020800

08003e50 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC(void)
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af02      	add	r7, sp, #8
  if(adc_conversion_complete)
 8003e56:	4b26      	ldr	r3, [pc, #152]	@ (8003ef0 <read_ADC+0xa0>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d043      	beq.n	8003ee8 <read_ADC+0x98>
  {
    adc_conversion_complete = 0;
 8003e60:	4b23      	ldr	r3, [pc, #140]	@ (8003ef0 <read_ADC+0xa0>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
    
    // Convert ADC value to voltage (3.3V reference, 12-bit ADC)
    hmc1021_voltage = (float)hmc1021_adc_buffer[0] * 3.3f / 4095.0f;
 8003e66:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <read_ADC+0xa4>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e74:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003ef8 <read_ADC+0xa8>
 8003e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e7c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8003efc <read_ADC+0xac>
 8003e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e84:	4b1e      	ldr	r3, [pc, #120]	@ (8003f00 <read_ADC+0xb0>)
 8003e86:	edc3 7a00 	vstr	s15, [r3]
    
    // Convert voltage to magnetic field (±1 Gauss range with 1V/Gauss sensitivity)
    // Assuming 1.65V is zero field (VCC/2)
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <read_ADC+0xb0>)
 8003e8c:	edd3 7a00 	vldr	s15, [r3]
 8003e90:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003f04 <read_ADC+0xb4>
 8003e94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e98:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <read_ADC+0xb8>)
 8003e9a:	edc3 7a00 	vstr	s15, [r3]
    
    // Send magnetometer data via UART (single axis)
    sprintf(uart_buffer, "MAG %.3f %.3f\r\n", hmc1021_gauss, hmc1021_voltage);
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f08 <read_ADC+0xb8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc fb70 	bl	8000588 <__aeabi_f2d>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	460d      	mov	r5, r1
 8003eac:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <read_ADC+0xb0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc fb69 	bl	8000588 <__aeabi_f2d>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	e9cd 2300 	strd	r2, r3, [sp]
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	4912      	ldr	r1, [pc, #72]	@ (8003f0c <read_ADC+0xbc>)
 8003ec4:	4812      	ldr	r0, [pc, #72]	@ (8003f10 <read_ADC+0xc0>)
 8003ec6:	f008 fd6f 	bl	800c9a8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8003eca:	4811      	ldr	r0, [pc, #68]	@ (8003f10 <read_ADC+0xc0>)
 8003ecc:	f7fc f9f0 	bl	80002b0 <strlen>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	2364      	movs	r3, #100	@ 0x64
 8003ed6:	490e      	ldr	r1, [pc, #56]	@ (8003f10 <read_ADC+0xc0>)
 8003ed8:	480e      	ldr	r0, [pc, #56]	@ (8003f14 <read_ADC+0xc4>)
 8003eda:	f006 fb0b 	bl	800a4f4 <HAL_UART_Transmit>
    
    // Restart ADC DMA for next conversion
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)hmc1021_adc_buffer, 1);
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4904      	ldr	r1, [pc, #16]	@ (8003ef4 <read_ADC+0xa4>)
 8003ee2:	480d      	ldr	r0, [pc, #52]	@ (8003f18 <read_ADC+0xc8>)
 8003ee4:	f002 fc1e 	bl	8006724 <HAL_ADC_Start_DMA>
  }
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bdb0      	pop	{r4, r5, r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20001712 	.word	0x20001712
 8003ef4:	20001718 	.word	0x20001718
 8003ef8:	40533333 	.word	0x40533333
 8003efc:	457ff000 	.word	0x457ff000
 8003f00:	2000171c 	.word	0x2000171c
 8003f04:	3fd33333 	.word	0x3fd33333
 8003f08:	20001720 	.word	0x20001720
 8003f0c:	08012340 	.word	0x08012340
 8003f10:	20001690 	.word	0x20001690
 8003f14:	2000145c 	.word	0x2000145c
 8003f18:	2000127c 	.word	0x2000127c

08003f1c <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d102      	bne.n	8003f32 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8003f2c:	4806      	ldr	r0, [pc, #24]	@ (8003f48 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003f2e:	f7fe fec1 	bl	8002cb4 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d102      	bne.n	8003f3e <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8003f38:	4803      	ldr	r0, [pc, #12]	@ (8003f48 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003f3a:	f7fe fec8 	bl	8002cce <bmi088_set_gyro_INT>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200015b4 	.word	0x200015b4

08003f4c <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5c:	d10d      	bne.n	8003f7a <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003f6a:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003f78:	701a      	strb	r2, [r3, #0]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20001710 	.word	0x20001710
 8003f8c:	20001711 	.word	0x20001711

08003f90 <HAL_ADC_ConvCpltCallback>:
 * @brief ADC DMA conversion complete callback
 * @param hadc ADC handle
 * @note Sets flag when magnetometer ADC conversion is complete
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a05      	ldr	r2, [pc, #20]	@ (8003fb4 <HAL_ADC_ConvCpltCallback+0x24>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d102      	bne.n	8003fa8 <HAL_ADC_ConvCpltCallback+0x18>
  {
    adc_conversion_complete = 1;
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_ADC_ConvCpltCallback+0x28>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
  }
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40012000 	.word	0x40012000
 8003fb8:	20001712 	.word	0x20001712

08003fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc0:	b672      	cpsid	i
}
 8003fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <Error_Handler+0x8>

08003fc8 <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[51];

unsigned char check_sum_hesapla_normal(int a){
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	e00a      	b.n	8003ff0 <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8003fda:	4a0e      	ldr	r2, [pc, #56]	@ (8004014 <check_sum_hesapla_normal+0x4c>)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	dbf0      	blt.n	8003fda <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	425a      	negs	r2, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	bf58      	it	pl
 8004002:	4253      	negpl	r3, r2
 8004004:	b2db      	uxtb	r3, r3
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20001724 	.word	0x20001724

08004018 <addDataPacketNormal>:


void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, gps_data_t* GPS, float hmc1021_gauss){
 8004018:	b580      	push	{r7, lr}
 800401a:	b090      	sub	sp, #64	@ 0x40
 800401c:	af00      	add	r7, sp, #0
 800401e:	6178      	str	r0, [r7, #20]
 8004020:	6139      	str	r1, [r7, #16]
 8004022:	60fa      	str	r2, [r7, #12]
 8004024:	ed87 0a02 	vstr	s0, [r7, #8]
  normal_paket[0] = 0xFF; // Sabit
 8004028:	4b7d      	ldr	r3, [pc, #500]	@ (8004220 <addDataPacketNormal+0x208>)
 800402a:	22ff      	movs	r2, #255	@ 0xff
 800402c:	701a      	strb	r2, [r3, #0]
  normal_paket[1] = 0xFF; // Sabit
 800402e:	4b7c      	ldr	r3, [pc, #496]	@ (8004220 <addDataPacketNormal+0x208>)
 8004030:	22ff      	movs	r2, #255	@ 0xff
 8004032:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = 0x54; // Sabit
 8004034:	4b7a      	ldr	r3, [pc, #488]	@ (8004220 <addDataPacketNormal+0x208>)
 8004036:	2254      	movs	r2, #84	@ 0x54
 8004038:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = 0x52; // Sabit
 800403a:	4b79      	ldr	r3, [pc, #484]	@ (8004220 <addDataPacketNormal+0x208>)
 800403c:	2252      	movs	r2, #82	@ 0x52
 800403e:	70da      	strb	r2, [r3, #3]

  normal_paket[4] = 0;   // Takim ID = 0
 8004040:	4b77      	ldr	r3, [pc, #476]	@ (8004220 <addDataPacketNormal+0x208>)
 8004042:	2200      	movs	r2, #0
 8004044:	711a      	strb	r2, [r3, #4]
  normal_paket[5] = 0; // Sayac degeri = 0
 8004046:	4b76      	ldr	r3, [pc, #472]	@ (8004220 <addDataPacketNormal+0x208>)
 8004048:	2200      	movs	r2, #0
 800404a:	715a      	strb	r2, [r3, #5]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  normal_paket[6] = irtifa_float32_uint8_donusturucu.array[0];
 8004052:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8004056:	4b72      	ldr	r3, [pc, #456]	@ (8004220 <addDataPacketNormal+0x208>)
 8004058:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = irtifa_float32_uint8_donusturucu.array[1];
 800405a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800405e:	4b70      	ldr	r3, [pc, #448]	@ (8004220 <addDataPacketNormal+0x208>)
 8004060:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = irtifa_float32_uint8_donusturucu.array[2];
 8004062:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8004066:	4b6e      	ldr	r3, [pc, #440]	@ (8004220 <addDataPacketNormal+0x208>)
 8004068:	721a      	strb	r2, [r3, #8]
  normal_paket[9] = irtifa_float32_uint8_donusturucu.array[3];
 800406a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800406e:	4b6c      	ldr	r3, [pc, #432]	@ (8004220 <addDataPacketNormal+0x208>)
 8004070:	725a      	strb	r2, [r3, #9]

  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = (GPS->altitude); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	63bb      	str	r3, [r7, #56]	@ 0x38
  normal_paket[10] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8004078:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800407c:	4b68      	ldr	r3, [pc, #416]	@ (8004220 <addDataPacketNormal+0x208>)
 800407e:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8004080:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004084:	4b66      	ldr	r3, [pc, #408]	@ (8004220 <addDataPacketNormal+0x208>)
 8004086:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8004088:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800408c:	4b64      	ldr	r3, [pc, #400]	@ (8004220 <addDataPacketNormal+0x208>)
 800408e:	731a      	strb	r2, [r3, #12]
  normal_paket[13] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8004090:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8004094:	4b62      	ldr	r3, [pc, #392]	@ (8004220 <addDataPacketNormal+0x208>)
 8004096:	735a      	strb	r2, [r3, #13]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = (GPS->latitude); // Roket enlem degerinin atamasini yapiyoruz.
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[14] = roket_enlem_float32_uint8_donusturucu.array[0];
 800409e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80040a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004220 <addDataPacketNormal+0x208>)
 80040a4:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_enlem_float32_uint8_donusturucu.array[1];
 80040a6:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80040aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004220 <addDataPacketNormal+0x208>)
 80040ac:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_enlem_float32_uint8_donusturucu.array[2];
 80040ae:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80040b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004220 <addDataPacketNormal+0x208>)
 80040b4:	741a      	strb	r2, [r3, #16]
  normal_paket[17] = roket_enlem_float32_uint8_donusturucu.array[3];
 80040b6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80040ba:	4b59      	ldr	r3, [pc, #356]	@ (8004220 <addDataPacketNormal+0x208>)
 80040bc:	745a      	strb	r2, [r3, #17]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = (GPS->longitude); // Roket boylam degerinin atamasini yapiyoruz.
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[18] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 80040c4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80040c8:	4b55      	ldr	r3, [pc, #340]	@ (8004220 <addDataPacketNormal+0x208>)
 80040ca:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 80040cc:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80040d0:	4b53      	ldr	r3, [pc, #332]	@ (8004220 <addDataPacketNormal+0x208>)
 80040d2:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 80040d4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80040d8:	4b51      	ldr	r3, [pc, #324]	@ (8004220 <addDataPacketNormal+0x208>)
 80040da:	751a      	strb	r2, [r3, #20]
  normal_paket[21] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 80040dc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80040e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004220 <addDataPacketNormal+0x208>)
 80040e2:	755a      	strb	r2, [r3, #21]


  FLOAT32_UINT8_DONUSTURUCU aci_float32_uint8_donusturucu;
  aci_float32_uint8_donusturucu.sayi = (BMI->datas.theta); // Theta acisinin atamasini yapiyoruz.
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[22] = aci_float32_uint8_donusturucu.array[0];
 80040ea:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80040ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004220 <addDataPacketNormal+0x208>)
 80040f0:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = aci_float32_uint8_donusturucu.array[1];
 80040f2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80040f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004220 <addDataPacketNormal+0x208>)
 80040f8:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = aci_float32_uint8_donusturucu.array[2];
 80040fa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80040fe:	4b48      	ldr	r3, [pc, #288]	@ (8004220 <addDataPacketNormal+0x208>)
 8004100:	761a      	strb	r2, [r3, #24]
  normal_paket[25] = aci_float32_uint8_donusturucu.array[3];
 8004102:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004106:	4b46      	ldr	r3, [pc, #280]	@ (8004220 <addDataPacketNormal+0x208>)
 8004108:	765a      	strb	r2, [r3, #25]

  FLOAT32_UINT8_DONUSTURUCU volt_float32_uint8_donusturucu;
  volt_float32_uint8_donusturucu.sayi = (0); // Volt degerinin atamasini yapiyoruz.
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[26] = volt_float32_uint8_donusturucu.array[0];
 8004110:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004114:	4b42      	ldr	r3, [pc, #264]	@ (8004220 <addDataPacketNormal+0x208>)
 8004116:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = volt_float32_uint8_donusturucu.array[1];
 8004118:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800411c:	4b40      	ldr	r3, [pc, #256]	@ (8004220 <addDataPacketNormal+0x208>)
 800411e:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = volt_float32_uint8_donusturucu.array[2];
 8004120:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8004124:	4b3e      	ldr	r3, [pc, #248]	@ (8004220 <addDataPacketNormal+0x208>)
 8004126:	771a      	strb	r2, [r3, #28]
  normal_paket[29] = volt_float32_uint8_donusturucu.array[3];
 8004128:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800412c:	4b3c      	ldr	r3, [pc, #240]	@ (8004220 <addDataPacketNormal+0x208>)
 800412e:	775a      	strb	r2, [r3, #29]

  FLOAT32_UINT8_DONUSTURUCU akim_float32_uint8_donusturucu;
  akim_float32_uint8_donusturucu.sayi = (0); // Akim degerinin atamasini yapiyoruz.
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[30] = akim_float32_uint8_donusturucu.array[0];
 8004136:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800413a:	4b39      	ldr	r3, [pc, #228]	@ (8004220 <addDataPacketNormal+0x208>)
 800413c:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = akim_float32_uint8_donusturucu.array[1];
 800413e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004142:	4b37      	ldr	r3, [pc, #220]	@ (8004220 <addDataPacketNormal+0x208>)
 8004144:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = akim_float32_uint8_donusturucu.array[2];
 8004146:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800414a:	4b35      	ldr	r3, [pc, #212]	@ (8004220 <addDataPacketNormal+0x208>)
 800414c:	f883 2020 	strb.w	r2, [r3, #32]
  normal_paket[33] = akim_float32_uint8_donusturucu.array[3];
 8004150:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004154:	4b32      	ldr	r3, [pc, #200]	@ (8004220 <addDataPacketNormal+0x208>)
 8004156:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = (BME->temperature); // Sicaklik degerinin atamasini yapiyoruz.
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	623b      	str	r3, [r7, #32]
  normal_paket[34] = sicaklik_float32_uint8_donusturucu.array[0];
 8004160:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004164:	4b2e      	ldr	r3, [pc, #184]	@ (8004220 <addDataPacketNormal+0x208>)
 8004166:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  normal_paket[35] = sicaklik_float32_uint8_donusturucu.array[1];
 800416a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800416e:	4b2c      	ldr	r3, [pc, #176]	@ (8004220 <addDataPacketNormal+0x208>)
 8004170:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = sicaklik_float32_uint8_donusturucu.array[2];
 8004174:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004178:	4b29      	ldr	r3, [pc, #164]	@ (8004220 <addDataPacketNormal+0x208>)
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  normal_paket[37] = sicaklik_float32_uint8_donusturucu.array[3];
 800417e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004182:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <addDataPacketNormal+0x208>)
 8004184:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (BME->pressure); // basinc degerinin atamasini yapiyoruz.
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	61fb      	str	r3, [r7, #28]
  normal_paket[38] = basinc_float32_uint8_donusturucu.array[0];
 800418e:	7f3a      	ldrb	r2, [r7, #28]
 8004190:	4b23      	ldr	r3, [pc, #140]	@ (8004220 <addDataPacketNormal+0x208>)
 8004192:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  normal_paket[39] = basinc_float32_uint8_donusturucu.array[1];
 8004196:	7f7a      	ldrb	r2, [r7, #29]
 8004198:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <addDataPacketNormal+0x208>)
 800419a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  normal_paket[40] = basinc_float32_uint8_donusturucu.array[2];
 800419e:	7fba      	ldrb	r2, [r7, #30]
 80041a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <addDataPacketNormal+0x208>)
 80041a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  normal_paket[41] = basinc_float32_uint8_donusturucu.array[3];
 80041a6:	7ffa      	ldrb	r2, [r7, #31]
 80041a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004220 <addDataPacketNormal+0x208>)
 80041aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  FLOAT32_UINT8_DONUSTURUCU manyetik_alan_float32_uint8_donusturucu;
  manyetik_alan_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Manyetik alan degerinin atamasini yapiyoruz.
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	61bb      	str	r3, [r7, #24]
  normal_paket[42] = manyetik_alan_float32_uint8_donusturucu.array[0];
 80041b2:	7e3a      	ldrb	r2, [r7, #24]
 80041b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <addDataPacketNormal+0x208>)
 80041b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  normal_paket[43] = manyetik_alan_float32_uint8_donusturucu.array[1];
 80041ba:	7e7a      	ldrb	r2, [r7, #25]
 80041bc:	4b18      	ldr	r3, [pc, #96]	@ (8004220 <addDataPacketNormal+0x208>)
 80041be:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  normal_paket[44] = manyetik_alan_float32_uint8_donusturucu.array[2];
 80041c2:	7eba      	ldrb	r2, [r7, #26]
 80041c4:	4b16      	ldr	r3, [pc, #88]	@ (8004220 <addDataPacketNormal+0x208>)
 80041c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  normal_paket[45] = manyetik_alan_float32_uint8_donusturucu.array[3];
 80041ca:	7efa      	ldrb	r2, [r7, #27]
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <addDataPacketNormal+0x208>)
 80041ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  //NEM
  normal_paket[46] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80041d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80041e0:	793b      	ldrb	r3, [r7, #4]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <addDataPacketNormal+0x208>)
 80041e6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  normal_paket[47] = flight_algorithm_get_durum_verisi(); // Durum bilgisi = Iki parasut de tetiklenmedi
 80041ea:	f7fe fd7d 	bl	8002ce8 <flight_algorithm_get_durum_verisi>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <addDataPacketNormal+0x208>)
 80041f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  normal_paket[48] = check_sum_hesapla_normal(48); // Check_sum = check_sum_hesapla();
 80041f8:	2030      	movs	r0, #48	@ 0x30
 80041fa:	f7ff fee5 	bl	8003fc8 <check_sum_hesapla_normal>
 80041fe:	4603      	mov	r3, r0
 8004200:	461a      	mov	r2, r3
 8004202:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <addDataPacketNormal+0x208>)
 8004204:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  normal_paket[49] = 0x0D; // Sabit
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <addDataPacketNormal+0x208>)
 800420a:	220d      	movs	r2, #13
 800420c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  normal_paket[50] = 0x0A;
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <addDataPacketNormal+0x208>)
 8004212:	220a      	movs	r2, #10
 8004214:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8004218:	bf00      	nop
 800421a:	3740      	adds	r7, #64	@ 0x40
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20001724 	.word	0x20001724

08004224 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b09e      	sub	sp, #120	@ 0x78
 8004228:	af00      	add	r7, sp, #0
 800422a:	ed87 0a03 	vstr	s0, [r7, #12]
 800422e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004232:	ed87 1a01 	vstr	s2, [r7, #4]
 8004236:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8004240:	edd7 7a03 	vldr	s15, [r7, #12]
 8004244:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004248:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 800424c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004250:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004254:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8004258:	edd7 7a01 	vldr	s15, [r7, #4]
 800425c:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004260:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	633b      	str	r3, [r7, #48]	@ 0x30
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8004272:	edd7 7a02 	vldr	s15, [r7, #8]
 8004276:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800427a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800428a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	653b      	str	r3, [r7, #80]	@ 0x50
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 80042a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042a4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80042a8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 80042c0:	2300      	movs	r3, #0
 80042c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80042c4:	e043      	b.n	800434e <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 80042c6:	2300      	movs	r3, #0
 80042c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042ca:	e024      	b.n	8004316 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 80042cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	3378      	adds	r3, #120	@ 0x78
 80042d2:	443b      	add	r3, r7
 80042d4:	3b68      	subs	r3, #104	@ 0x68
 80042d6:	ed93 7a00 	vldr	s14, [r3]
 80042da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042dc:	009a      	lsls	r2, r3, #2
 80042de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	3378      	adds	r3, #120	@ 0x78
 80042e6:	443b      	add	r3, r7
 80042e8:	3b58      	subs	r3, #88	@ 0x58
 80042ea:	edd3 6a00 	vldr	s13, [r3]
 80042ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004464 <ekf_predict+0x240>)
 80042f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	edd3 7a00 	vldr	s15, [r3]
 80042fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3378      	adds	r3, #120	@ 0x78
 8004308:	443b      	add	r3, r7
 800430a:	3b68      	subs	r3, #104	@ 0x68
 800430c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8004310:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004312:	3301      	adds	r3, #1
 8004314:	673b      	str	r3, [r7, #112]	@ 0x70
 8004316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004318:	2b03      	cmp	r3, #3
 800431a:	ddd7      	ble.n	80042cc <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 800431c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3378      	adds	r3, #120	@ 0x78
 8004322:	443b      	add	r3, r7
 8004324:	3b68      	subs	r3, #104	@ 0x68
 8004326:	ed93 7a00 	vldr	s14, [r3]
 800432a:	edd7 7a00 	vldr	s15, [r7]
 800432e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004332:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3378      	adds	r3, #120	@ 0x78
 8004340:	443b      	add	r3, r7
 8004342:	3b68      	subs	r3, #104	@ 0x68
 8004344:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8004348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800434a:	3301      	adds	r3, #1
 800434c:	677b      	str	r3, [r7, #116]	@ 0x74
 800434e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004350:	2b03      	cmp	r3, #3
 8004352:	ddb8      	ble.n	80042c6 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8004354:	2300      	movs	r3, #0
 8004356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004358:	e017      	b.n	800438a <ekf_predict+0x166>
        q[i] += dq[i];
 800435a:	4a42      	ldr	r2, [pc, #264]	@ (8004464 <ekf_predict+0x240>)
 800435c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	ed93 7a00 	vldr	s14, [r3]
 8004366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	3378      	adds	r3, #120	@ 0x78
 800436c:	443b      	add	r3, r7
 800436e:	3b68      	subs	r3, #104	@ 0x68
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004378:	4a3a      	ldr	r2, [pc, #232]	@ (8004464 <ekf_predict+0x240>)
 800437a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004386:	3301      	adds	r3, #1
 8004388:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800438a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438c:	2b03      	cmp	r3, #3
 800438e:	dde4      	ble.n	800435a <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004390:	4b34      	ldr	r3, [pc, #208]	@ (8004464 <ekf_predict+0x240>)
 8004392:	ed93 7a00 	vldr	s14, [r3]
 8004396:	4b33      	ldr	r3, [pc, #204]	@ (8004464 <ekf_predict+0x240>)
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a0:	4b30      	ldr	r3, [pc, #192]	@ (8004464 <ekf_predict+0x240>)
 80043a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80043a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004464 <ekf_predict+0x240>)
 80043a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80043ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004464 <ekf_predict+0x240>)
 80043b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80043ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <ekf_predict+0x240>)
 80043bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80043c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043c8:	4b26      	ldr	r3, [pc, #152]	@ (8004464 <ekf_predict+0x240>)
 80043ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80043ce:	4b25      	ldr	r3, [pc, #148]	@ (8004464 <ekf_predict+0x240>)
 80043d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80043d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043dc:	eeb0 0a67 	vmov.f32	s0, s15
 80043e0:	f00c fba4 	bl	8010b2c <sqrtf>
 80043e4:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ec:	e012      	b.n	8004414 <ekf_predict+0x1f0>
        q[i] /= norm;
 80043ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004464 <ekf_predict+0x240>)
 80043f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	edd3 6a00 	vldr	s13, [r3]
 80043fa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80043fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004402:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <ekf_predict+0x240>)
 8004404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 800440e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004410:	3301      	adds	r3, #1
 8004412:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004416:	2b03      	cmp	r3, #3
 8004418:	dde9      	ble.n	80043ee <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	667b      	str	r3, [r7, #100]	@ 0x64
 800441e:	e018      	b.n	8004452 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8004420:	4911      	ldr	r1, [pc, #68]	@ (8004468 <ekf_predict+0x244>)
 8004422:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800446c <ekf_predict+0x248>
 8004436:	ee77 7a87 	vadd.f32	s15, s15, s14
 800443a:	490b      	ldr	r1, [pc, #44]	@ (8004468 <ekf_predict+0x244>)
 800443c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 800444c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800444e:	3301      	adds	r3, #1
 8004450:	667b      	str	r3, [r7, #100]	@ 0x64
 8004452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004454:	2b03      	cmp	r3, #3
 8004456:	dde3      	ble.n	8004420 <ekf_predict+0x1fc>
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	3778      	adds	r7, #120	@ 0x78
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000004 	.word	0x20000004
 8004468:	20001758 	.word	0x20001758
 800446c:	3727c5ac 	.word	0x3727c5ac

08004470 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8004476:	4b2a      	ldr	r3, [pc, #168]	@ (8004520 <quaternionToYaw1+0xb0>)
 8004478:	ed93 7a01 	vldr	s14, [r3, #4]
 800447c:	4b28      	ldr	r3, [pc, #160]	@ (8004520 <quaternionToYaw1+0xb0>)
 800447e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004486:	4b26      	ldr	r3, [pc, #152]	@ (8004520 <quaternionToYaw1+0xb0>)
 8004488:	edd3 6a00 	vldr	s13, [r3]
 800448c:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <quaternionToYaw1+0xb0>)
 800448e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800449a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800449e:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044a0:	ed93 7a00 	vldr	s14, [r3]
 80044a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80044b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80044ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044c2:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80044c8:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80044ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d6:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80044dc:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <quaternionToYaw1+0xb0>)
 80044de:	edd3 7a03 	vldr	s15, [r3, #12]
 80044e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ea:	eef0 0a67 	vmov.f32	s1, s15
 80044ee:	eeb0 0a46 	vmov.f32	s0, s12
 80044f2:	f00c fb19 	bl	8010b28 <atan2f>
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004524 <quaternionToYaw1+0xb4>
 80044fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004502:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004528 <quaternionToYaw1+0xb8>
 8004506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800450a:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	ee07 3a90 	vmov	s15, r3
}
 8004514:	eeb0 0a67 	vmov.f32	s0, s15
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000004 	.word	0x20000004
 8004524:	43340000 	.word	0x43340000
 8004528:	40490fd0 	.word	0x40490fd0

0800452c <quaternionToPitch1>:

float quaternionToPitch1(){
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 8004532:	4b17      	ldr	r3, [pc, #92]	@ (8004590 <quaternionToPitch1+0x64>)
 8004534:	ed93 7a01 	vldr	s14, [r3, #4]
 8004538:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <quaternionToPitch1+0x64>)
 800453a:	edd3 7a03 	vldr	s15, [r3, #12]
 800453e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004542:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <quaternionToPitch1+0x64>)
 8004544:	edd3 6a00 	vldr	s13, [r3]
 8004548:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <quaternionToPitch1+0x64>)
 800454a:	edd3 7a02 	vldr	s15, [r3, #8]
 800454e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004556:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800455a:	eeb0 0a67 	vmov.f32	s0, s15
 800455e:	f00c fab7 	bl	8010ad0 <asinf>
 8004562:	eef0 7a40 	vmov.f32	s15, s0
 8004566:	eef1 7a67 	vneg.f32	s15, s15
 800456a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004594 <quaternionToPitch1+0x68>
 800456e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004572:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004598 <quaternionToPitch1+0x6c>
 8004576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457a:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	ee07 3a90 	vmov	s15, r3
}
 8004584:	eeb0 0a67 	vmov.f32	s0, s15
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000004 	.word	0x20000004
 8004594:	43340000 	.word	0x43340000
 8004598:	40490fd0 	.word	0x40490fd0

0800459c <quaternionToRoll1>:

float quaternionToRoll1(){
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 80045a2:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <quaternionToRoll1+0xb0>)
 80045a4:	ed93 7a00 	vldr	s14, [r3]
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <quaternionToRoll1+0xb0>)
 80045aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80045ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b2:	4b26      	ldr	r3, [pc, #152]	@ (800464c <quaternionToRoll1+0xb0>)
 80045b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80045b8:	4b24      	ldr	r3, [pc, #144]	@ (800464c <quaternionToRoll1+0xb0>)
 80045ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80045be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80045ca:	4b20      	ldr	r3, [pc, #128]	@ (800464c <quaternionToRoll1+0xb0>)
 80045cc:	ed93 7a00 	vldr	s14, [r3]
 80045d0:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <quaternionToRoll1+0xb0>)
 80045d2:	edd3 7a00 	vldr	s15, [r3]
 80045d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045da:	4b1c      	ldr	r3, [pc, #112]	@ (800464c <quaternionToRoll1+0xb0>)
 80045dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <quaternionToRoll1+0xb0>)
 80045e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ee:	4b17      	ldr	r3, [pc, #92]	@ (800464c <quaternionToRoll1+0xb0>)
 80045f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80045f4:	4b15      	ldr	r3, [pc, #84]	@ (800464c <quaternionToRoll1+0xb0>)
 80045f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80045fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004602:	4b12      	ldr	r3, [pc, #72]	@ (800464c <quaternionToRoll1+0xb0>)
 8004604:	edd3 6a03 	vldr	s13, [r3, #12]
 8004608:	4b10      	ldr	r3, [pc, #64]	@ (800464c <quaternionToRoll1+0xb0>)
 800460a:	edd3 7a03 	vldr	s15, [r3, #12]
 800460e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004616:	eef0 0a67 	vmov.f32	s1, s15
 800461a:	eeb0 0a46 	vmov.f32	s0, s12
 800461e:	f00c fa83 	bl	8010b28 <atan2f>
 8004622:	eef0 7a40 	vmov.f32	s15, s0
 8004626:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004650 <quaternionToRoll1+0xb4>
 800462a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800462e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004654 <quaternionToRoll1+0xb8>
 8004632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004636:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	ee07 3a90 	vmov	s15, r3
}
 8004640:	eeb0 0a67 	vmov.f32	s0, s15
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000004 	.word	0x20000004
 8004650:	43340000 	.word	0x43340000
 8004654:	40490fd0 	.word	0x40490fd0

08004658 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <quaternionToYawDegree1+0x88>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <quaternionToYawDegree1+0x88>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <quaternionToYawDegree1+0x88>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <quaternionToYawDegree1+0x88>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 8004676:	ed97 7a05 	vldr	s14, [r7, #20]
 800467a:	edd7 7a02 	vldr	s15, [r7, #8]
 800467e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004682:	edd7 6a04 	vldr	s13, [r7, #16]
 8004686:	edd7 7a03 	vldr	s15, [r7, #12]
 800468a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800468e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004692:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004696:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800469a:	edd7 7a03 	vldr	s15, [r7, #12]
 800469e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80046a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ba:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 80046be:	edd7 0a00 	vldr	s1, [r7]
 80046c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80046c6:	f00c fa2f 	bl	8010b28 <atan2f>
 80046ca:	eef0 7a40 	vmov.f32	s15, s0
 80046ce:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80046e4 <quaternionToYawDegree1+0x8c>
 80046d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80046d6:	eeb0 0a67 	vmov.f32	s0, s15
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000004 	.word	0x20000004
 80046e4:	42652ee0 	.word	0x42652ee0

080046e8 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80046f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80046f6:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80046fa:	4bd5      	ldr	r3, [pc, #852]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80046fc:	ed93 7a00 	vldr	s14, [r3]
 8004700:	4bd3      	ldr	r3, [pc, #844]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004702:	edd3 7a00 	vldr	s15, [r3]
 8004706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800470a:	4bd1      	ldr	r3, [pc, #836]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800470c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004710:	4bcf      	ldr	r3, [pc, #828]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004712:	edd3 7a01 	vldr	s15, [r3, #4]
 8004716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800471a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800471e:	4bcc      	ldr	r3, [pc, #816]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004720:	edd3 6a02 	vldr	s13, [r3, #8]
 8004724:	4bca      	ldr	r3, [pc, #808]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004726:	edd3 7a02 	vldr	s15, [r3, #8]
 800472a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004732:	4bc7      	ldr	r3, [pc, #796]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004734:	edd3 6a03 	vldr	s13, [r3, #12]
 8004738:	4bc5      	ldr	r3, [pc, #788]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800473a:	edd3 7a03 	vldr	s15, [r3, #12]
 800473e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	f00c f9ef 	bl	8010b2c <sqrtf>
 800474e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8004752:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	f000 8172 	beq.w	8004a46 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8004762:	4bbb      	ldr	r3, [pc, #748]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004764:	edd3 6a00 	vldr	s13, [r3]
 8004768:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800476c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004770:	4bb7      	ldr	r3, [pc, #732]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004772:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8004776:	4bb6      	ldr	r3, [pc, #728]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004778:	edd3 6a01 	vldr	s13, [r3, #4]
 800477c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004784:	4bb2      	ldr	r3, [pc, #712]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004786:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 800478a:	4bb1      	ldr	r3, [pc, #708]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800478c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004790:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004798:	4bad      	ldr	r3, [pc, #692]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800479a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 800479e:	4bac      	ldr	r3, [pc, #688]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80047a4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80047a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ac:	4ba8      	ldr	r3, [pc, #672]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047ae:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 80047b2:	4ba7      	ldr	r3, [pc, #668]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80047b8:	4ba5      	ldr	r3, [pc, #660]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80047be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047c2:	4ba3      	ldr	r3, [pc, #652]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047c4:	edd3 6a00 	vldr	s13, [r3]
 80047c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80047ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 80047de:	4b9c      	ldr	r3, [pc, #624]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047e0:	ed93 7a00 	vldr	s14, [r3]
 80047e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80047ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ee:	4b98      	ldr	r3, [pc, #608]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80047f4:	4b96      	ldr	r3, [pc, #600]	@ (8004a50 <UpdateMahonyGains+0x368>)
 80047f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80047fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004802:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004806:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 800480a:	4b91      	ldr	r3, [pc, #580]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800480c:	ed93 7a00 	vldr	s14, [r3]
 8004810:	4b8f      	ldr	r3, [pc, #572]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004812:	edd3 7a00 	vldr	s15, [r3]
 8004816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800481a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800481c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004820:	4b8b      	ldr	r3, [pc, #556]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004822:	edd3 7a01 	vldr	s15, [r3, #4]
 8004826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800482a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800482e:	4b88      	ldr	r3, [pc, #544]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004830:	edd3 6a02 	vldr	s13, [r3, #8]
 8004834:	4b86      	ldr	r3, [pc, #536]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004836:	edd3 7a02 	vldr	s15, [r3, #8]
 800483a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800483e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004842:	4b83      	ldr	r3, [pc, #524]	@ (8004a50 <UpdateMahonyGains+0x368>)
 8004844:	edd3 6a03 	vldr	s13, [r3, #12]
 8004848:	4b81      	ldr	r3, [pc, #516]	@ (8004a50 <UpdateMahonyGains+0x368>)
 800484a:	edd3 7a03 	vldr	s15, [r3, #12]
 800484e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 800485a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800485e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004862:	edd7 7a08 	vldr	s15, [r7, #32]
 8004866:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800486a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800486e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004872:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800487a:	eeb0 0a67 	vmov.f32	s0, s15
 800487e:	f001 f8cb 	bl	8005a18 <invSqrt>
 8004882:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8004886:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800488a:	edd7 7a06 	vldr	s15, [r7, #24]
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8004896:	ed97 7a08 	vldr	s14, [r7, #32]
 800489a:	edd7 7a06 	vldr	s15, [r7, #24]
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 80048a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80048aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 80048b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80048be:	edd7 7a02 	vldr	s15, [r7, #8]
 80048c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80048c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80048ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80048d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d6:	eeb0 0a67 	vmov.f32	s0, s15
 80048da:	f001 f89d 	bl	8005a18 <invSqrt>
 80048de:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 80048e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80048e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 80048f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80048f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8004902:	ed97 7a01 	vldr	s14, [r7, #4]
 8004906:	edd7 7a05 	vldr	s15, [r7, #20]
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8004912:	ed97 7a03 	vldr	s14, [r7, #12]
 8004916:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800491a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800491e:	edd7 6a02 	vldr	s13, [r7, #8]
 8004922:	edd7 7a08 	vldr	s15, [r7, #32]
 8004926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800492a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800492e:	edd7 6a01 	vldr	s13, [r7, #4]
 8004932:	edd7 7a07 	vldr	s15, [r7, #28]
 8004936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8004942:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004946:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800494a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	dd02      	ble.n	800495a <UpdateMahonyGains+0x272>
 8004954:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 800495a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800495e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	d501      	bpl.n	8004970 <UpdateMahonyGains+0x288>
 800496c:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <UpdateMahonyGains+0x36c>)
 800496e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8004970:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004974:	f00c f880 	bl	8010a78 <acosf>
 8004978:	eef0 7a40 	vmov.f32	s15, s0
 800497c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004a58 <UpdateMahonyGains+0x370>
 8004980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004984:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8004988:	edd7 7a04 	vldr	s15, [r7, #16]
 800498c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004998:	dd0a      	ble.n	80049b0 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 800499a:	4b30      	ldr	r3, [pc, #192]	@ (8004a5c <UpdateMahonyGains+0x374>)
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80049a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a60 <UpdateMahonyGains+0x378>)
 80049a2:	4a30      	ldr	r2, [pc, #192]	@ (8004a64 <UpdateMahonyGains+0x37c>)
 80049a4:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 80049a6:	4b30      	ldr	r3, [pc, #192]	@ (8004a68 <UpdateMahonyGains+0x380>)
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e01d      	b.n	80049ec <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 80049b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80049b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80049b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c0:	dd0a      	ble.n	80049d8 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80049c2:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <UpdateMahonyGains+0x374>)
 80049c4:	2202      	movs	r2, #2
 80049c6:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 80049c8:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <UpdateMahonyGains+0x378>)
 80049ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80049ce:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 80049d0:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <UpdateMahonyGains+0x380>)
 80049d2:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <UpdateMahonyGains+0x384>)
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e009      	b.n	80049ec <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 80049d8:	4b20      	ldr	r3, [pc, #128]	@ (8004a5c <UpdateMahonyGains+0x374>)
 80049da:	2203      	movs	r2, #3
 80049dc:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 80049de:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <UpdateMahonyGains+0x378>)
 80049e0:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80049e4:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 80049e6:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <UpdateMahonyGains+0x380>)
 80049e8:	4a21      	ldr	r2, [pc, #132]	@ (8004a70 <UpdateMahonyGains+0x388>)
 80049ea:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 80049ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004a60 <UpdateMahonyGains+0x378>)
 80049ee:	edd3 7a00 	vldr	s15, [r3]
 80049f2:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80049f6:	eeb0 0a67 	vmov.f32	s0, s15
 80049fa:	f00c f8e4 	bl	8010bc6 <fminf>
 80049fe:	eef0 7a40 	vmov.f32	s15, s0
 8004a02:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004a74 <UpdateMahonyGains+0x38c>
 8004a06:	eeb0 0a67 	vmov.f32	s0, s15
 8004a0a:	f00c f8bf 	bl	8010b8c <fmaxf>
 8004a0e:	eef0 7a40 	vmov.f32	s15, s0
 8004a12:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <UpdateMahonyGains+0x378>)
 8004a14:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8004a18:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <UpdateMahonyGains+0x380>)
 8004a1a:	edd3 7a00 	vldr	s15, [r3]
 8004a1e:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8004a78 <UpdateMahonyGains+0x390>
 8004a22:	eeb0 0a67 	vmov.f32	s0, s15
 8004a26:	f00c f8ce 	bl	8010bc6 <fminf>
 8004a2a:	eef0 7a40 	vmov.f32	s15, s0
 8004a2e:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8004a7c <UpdateMahonyGains+0x394>
 8004a32:	eeb0 0a67 	vmov.f32	s0, s15
 8004a36:	f00c f8a9 	bl	8010b8c <fmaxf>
 8004a3a:	eef0 7a40 	vmov.f32	s15, s0
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <UpdateMahonyGains+0x380>)
 8004a40:	edc3 7a00 	vstr	s15, [r3]
 8004a44:	e000      	b.n	8004a48 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8004a46:	bf00      	nop
}
 8004a48:	3730      	adds	r7, #48	@ 0x30
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000014 	.word	0x20000014
 8004a54:	bf800000 	.word	0xbf800000
 8004a58:	42652ee2 	.word	0x42652ee2
 8004a5c:	200017a4 	.word	0x200017a4
 8004a60:	20000024 	.word	0x20000024
 8004a64:	3e4ccccd 	.word	0x3e4ccccd
 8004a68:	20000028 	.word	0x20000028
 8004a6c:	3c23d70a 	.word	0x3c23d70a
 8004a70:	3d4ccccd 	.word	0x3d4ccccd
 8004a74:	3dcccccd 	.word	0x3dcccccd
 8004a78:	3d4ccccd 	.word	0x3d4ccccd
 8004a7c:	00000000 	.word	0x00000000

08004a80 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	@ 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	ed87 0a07 	vstr	s0, [r7, #28]
 8004a8a:	edc7 0a06 	vstr	s1, [r7, #24]
 8004a8e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004a92:	edc7 1a04 	vstr	s3, [r7, #16]
 8004a96:	ed87 2a03 	vstr	s4, [r7, #12]
 8004a9a:	edc7 2a02 	vstr	s5, [r7, #8]
 8004a9e:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8004aa2:	4b60      	ldr	r3, [pc, #384]	@ (8004c24 <Orientation_Update+0x1a4>)
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8004aa6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004aba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004abe:	4b5a      	ldr	r3, [pc, #360]	@ (8004c28 <Orientation_Update+0x1a8>)
 8004ac0:	edd3 7a00 	vldr	s15, [r3]
 8004ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004acc:	4b56      	ldr	r3, [pc, #344]	@ (8004c28 <Orientation_Update+0x1a8>)
 8004ace:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8004ad2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ae6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004aea:	4b50      	ldr	r3, [pc, #320]	@ (8004c2c <Orientation_Update+0x1ac>)
 8004aec:	edd3 7a00 	vldr	s15, [r3]
 8004af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af8:	4b4c      	ldr	r3, [pc, #304]	@ (8004c2c <Orientation_Update+0x1ac>)
 8004afa:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8004afe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004b16:	4b46      	ldr	r3, [pc, #280]	@ (8004c30 <Orientation_Update+0x1b0>)
 8004b18:	edd3 7a00 	vldr	s15, [r3]
 8004b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b24:	4b42      	ldr	r3, [pc, #264]	@ (8004c30 <Orientation_Update+0x1b0>)
 8004b26:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8004b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c28 <Orientation_Update+0x1a8>)
 8004b2c:	edd3 7a00 	vldr	s15, [r3]
 8004b30:	4b3e      	ldr	r3, [pc, #248]	@ (8004c2c <Orientation_Update+0x1ac>)
 8004b32:	ed93 7a00 	vldr	s14, [r3]
 8004b36:	4b3e      	ldr	r3, [pc, #248]	@ (8004c30 <Orientation_Update+0x1b0>)
 8004b38:	edd3 6a00 	vldr	s13, [r3]
 8004b3c:	eeb0 1a66 	vmov.f32	s2, s13
 8004b40:	eef0 0a47 	vmov.f32	s1, s14
 8004b44:	eeb0 0a67 	vmov.f32	s0, s15
 8004b48:	f7ff fdce 	bl	80046e8 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8004b4c:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <Orientation_Update+0x1a8>)
 8004b4e:	ed93 7a00 	vldr	s14, [r3]
 8004b52:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <Orientation_Update+0x1a8>)
 8004b54:	edd3 7a00 	vldr	s15, [r3]
 8004b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b5c:	4b33      	ldr	r3, [pc, #204]	@ (8004c2c <Orientation_Update+0x1ac>)
 8004b5e:	edd3 6a00 	vldr	s13, [r3]
 8004b62:	4b32      	ldr	r3, [pc, #200]	@ (8004c2c <Orientation_Update+0x1ac>)
 8004b64:	edd3 7a00 	vldr	s15, [r3]
 8004b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b70:	4b2f      	ldr	r3, [pc, #188]	@ (8004c30 <Orientation_Update+0x1b0>)
 8004b72:	edd3 6a00 	vldr	s13, [r3]
 8004b76:	4b2e      	ldr	r3, [pc, #184]	@ (8004c30 <Orientation_Update+0x1b0>)
 8004b78:	edd3 7a00 	vldr	s15, [r3]
 8004b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b84:	eeb0 0a67 	vmov.f32	s0, s15
 8004b88:	f00b ffd0 	bl	8010b2c <sqrtf>
 8004b8c:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8004b90:	4b28      	ldr	r3, [pc, #160]	@ (8004c34 <Orientation_Update+0x1b4>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00c      	beq.n	8004bb2 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8004b98:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b9c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004c38 <Orientation_Update+0x1b8>
 8004ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	d50f      	bpl.n	8004bca <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <Orientation_Update+0x1b4>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e00b      	b.n	8004bca <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8004bb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8004bb6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004c3c <Orientation_Update+0x1bc>
 8004bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	dd02      	ble.n	8004bca <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <Orientation_Update+0x1b4>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8004bca:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <Orientation_Update+0x1b4>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8004bd2:	edd7 1a01 	vldr	s3, [r7, #4]
 8004bd6:	ed97 1a05 	vldr	s2, [r7, #20]
 8004bda:	edd7 0a06 	vldr	s1, [r7, #24]
 8004bde:	ed97 0a07 	vldr	s0, [r7, #28]
 8004be2:	f000 f82d 	bl	8004c40 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8004be6:	e018      	b.n	8004c1a <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8004be8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c28 <Orientation_Update+0x1a8>)
 8004bea:	edd3 7a00 	vldr	s15, [r3]
 8004bee:	4b0f      	ldr	r3, [pc, #60]	@ (8004c2c <Orientation_Update+0x1ac>)
 8004bf0:	ed93 7a00 	vldr	s14, [r3]
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <Orientation_Update+0x1b0>)
 8004bf6:	edd3 6a00 	vldr	s13, [r3]
 8004bfa:	ed97 3a01 	vldr	s6, [r7, #4]
 8004bfe:	eef0 2a66 	vmov.f32	s5, s13
 8004c02:	eeb0 2a47 	vmov.f32	s4, s14
 8004c06:	eef0 1a67 	vmov.f32	s3, s15
 8004c0a:	ed97 1a05 	vldr	s2, [r7, #20]
 8004c0e:	edd7 0a06 	vldr	s1, [r7, #24]
 8004c12:	ed97 0a07 	vldr	s0, [r7, #28]
 8004c16:	f000 f93b 	bl	8004e90 <MahonyAHRSupdateIMU>
}
 8004c1a:	bf00      	nop
 8004c1c:	3728      	adds	r7, #40	@ 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	3e99999a 	.word	0x3e99999a
 8004c28:	200017a8 	.word	0x200017a8
 8004c2c:	200017ac 	.word	0x200017ac
 8004c30:	200017b0 	.word	0x200017b0
 8004c34:	200017a5 	.word	0x200017a5
 8004c38:	41d3d2db 	.word	0x41d3d2db
 8004c3c:	420172a2 	.word	0x420172a2

08004c40 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	@ 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c4e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004c52:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8004c56:	4b8c      	ldr	r3, [pc, #560]	@ (8004e88 <updateQuaternion+0x248>)
 8004c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c5c:	eeb1 7a67 	vneg.f32	s14, s15
 8004c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c68:	4b87      	ldr	r3, [pc, #540]	@ (8004e88 <updateQuaternion+0x248>)
 8004c6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c7a:	4b83      	ldr	r3, [pc, #524]	@ (8004e88 <updateQuaternion+0x248>)
 8004c7c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8004c98:	4b7b      	ldr	r3, [pc, #492]	@ (8004e88 <updateQuaternion+0x248>)
 8004c9a:	ed93 7a00 	vldr	s14, [r3]
 8004c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca6:	4b78      	ldr	r3, [pc, #480]	@ (8004e88 <updateQuaternion+0x248>)
 8004ca8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb8:	4b73      	ldr	r3, [pc, #460]	@ (8004e88 <updateQuaternion+0x248>)
 8004cba:	edd3 6a03 	vldr	s13, [r3, #12]
 8004cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cd2:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8004cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e88 <updateQuaternion+0x248>)
 8004cd8:	ed93 7a00 	vldr	s14, [r3]
 8004cdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ce4:	4b68      	ldr	r3, [pc, #416]	@ (8004e88 <updateQuaternion+0x248>)
 8004ce6:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cf6:	4b64      	ldr	r3, [pc, #400]	@ (8004e88 <updateQuaternion+0x248>)
 8004cf8:	edd3 6a03 	vldr	s13, [r3, #12]
 8004cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d08:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d10:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8004d14:	4b5c      	ldr	r3, [pc, #368]	@ (8004e88 <updateQuaternion+0x248>)
 8004d16:	ed93 7a00 	vldr	s14, [r3]
 8004d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d22:	4b59      	ldr	r3, [pc, #356]	@ (8004e88 <updateQuaternion+0x248>)
 8004d24:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d34:	4b54      	ldr	r3, [pc, #336]	@ (8004e88 <updateQuaternion+0x248>)
 8004d36:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d4e:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8004d52:	4b4d      	ldr	r3, [pc, #308]	@ (8004e88 <updateQuaternion+0x248>)
 8004d54:	ed93 7a00 	vldr	s14, [r3]
 8004d58:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004d5c:	edd7 7a00 	vldr	s15, [r7]
 8004d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d68:	4b47      	ldr	r3, [pc, #284]	@ (8004e88 <updateQuaternion+0x248>)
 8004d6a:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8004d6e:	4b46      	ldr	r3, [pc, #280]	@ (8004e88 <updateQuaternion+0x248>)
 8004d70:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d74:	edd7 6a08 	vldr	s13, [r7, #32]
 8004d78:	edd7 7a00 	vldr	s15, [r7]
 8004d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d84:	4b40      	ldr	r3, [pc, #256]	@ (8004e88 <updateQuaternion+0x248>)
 8004d86:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8004d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e88 <updateQuaternion+0x248>)
 8004d8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d94:	edd7 7a00 	vldr	s15, [r7]
 8004d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da0:	4b39      	ldr	r3, [pc, #228]	@ (8004e88 <updateQuaternion+0x248>)
 8004da2:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8004da6:	4b38      	ldr	r3, [pc, #224]	@ (8004e88 <updateQuaternion+0x248>)
 8004da8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004dac:	edd7 6a06 	vldr	s13, [r7, #24]
 8004db0:	edd7 7a00 	vldr	s15, [r7]
 8004db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbc:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <updateQuaternion+0x248>)
 8004dbe:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004dc2:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <updateQuaternion+0x248>)
 8004dc4:	ed93 7a00 	vldr	s14, [r3]
 8004dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004e88 <updateQuaternion+0x248>)
 8004dca:	edd3 7a00 	vldr	s15, [r3]
 8004dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8004e88 <updateQuaternion+0x248>)
 8004dd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e88 <updateQuaternion+0x248>)
 8004dda:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004de6:	4b28      	ldr	r3, [pc, #160]	@ (8004e88 <updateQuaternion+0x248>)
 8004de8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004dec:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <updateQuaternion+0x248>)
 8004dee:	edd3 7a02 	vldr	s15, [r3, #8]
 8004df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dfa:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <updateQuaternion+0x248>)
 8004dfc:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e00:	4b21      	ldr	r3, [pc, #132]	@ (8004e88 <updateQuaternion+0x248>)
 8004e02:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e12:	f00b fe8b 	bl	8010b2c <sqrtf>
 8004e16:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8004e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e1e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004e8c <updateQuaternion+0x24c>
 8004e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	dc00      	bgt.n	8004e2e <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8004e2c:	e027      	b.n	8004e7e <updateQuaternion+0x23e>
        q[0] /= norm;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	@ (8004e88 <updateQuaternion+0x248>)
 8004e30:	edd3 6a00 	vldr	s13, [r3]
 8004e34:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	4b12      	ldr	r3, [pc, #72]	@ (8004e88 <updateQuaternion+0x248>)
 8004e3e:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8004e42:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <updateQuaternion+0x248>)
 8004e44:	edd3 6a01 	vldr	s13, [r3, #4]
 8004e48:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e50:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <updateQuaternion+0x248>)
 8004e52:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8004e56:	4b0c      	ldr	r3, [pc, #48]	@ (8004e88 <updateQuaternion+0x248>)
 8004e58:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e64:	4b08      	ldr	r3, [pc, #32]	@ (8004e88 <updateQuaternion+0x248>)
 8004e66:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <updateQuaternion+0x248>)
 8004e6c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e70:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <updateQuaternion+0x248>)
 8004e7a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004e7e:	bf00      	nop
 8004e80:	3728      	adds	r7, #40	@ 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000014 	.word	0x20000014
 8004e8c:	358637bd 	.word	0x358637bd

08004e90 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b092      	sub	sp, #72	@ 0x48
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	ed87 0a07 	vstr	s0, [r7, #28]
 8004e9a:	edc7 0a06 	vstr	s1, [r7, #24]
 8004e9e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004ea2:	edc7 1a04 	vstr	s3, [r7, #16]
 8004ea6:	ed87 2a03 	vstr	s4, [r7, #12]
 8004eaa:	edc7 2a02 	vstr	s5, [r7, #8]
 8004eae:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8004eb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebe:	d10e      	bne.n	8004ede <MahonyAHRSupdateIMU+0x4e>
 8004ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ecc:	d107      	bne.n	8004ede <MahonyAHRSupdateIMU+0x4e>
 8004ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ed2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	f000 8138 	beq.w	800514e <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8004ede:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ee2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ef2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ef6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efe:	eeb0 0a67 	vmov.f32	s0, s15
 8004f02:	f000 fd89 	bl	8005a18 <invSqrt>
 8004f06:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8004f0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f0e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8004f1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f1e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8004f2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8004f3a:	4b66      	ldr	r3, [pc, #408]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f40:	4b64      	ldr	r3, [pc, #400]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f42:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f4a:	4b62      	ldr	r3, [pc, #392]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f4c:	edd3 6a00 	vldr	s13, [r3]
 8004f50:	4b60      	ldr	r3, [pc, #384]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f52:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f5e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8004f62:	4b5c      	ldr	r3, [pc, #368]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f64:	ed93 7a00 	vldr	s14, [r3]
 8004f68:	4b5a      	ldr	r3, [pc, #360]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f72:	4b58      	ldr	r3, [pc, #352]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f74:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f78:	4b56      	ldr	r3, [pc, #344]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f86:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8004f8a:	4b52      	ldr	r3, [pc, #328]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f8c:	ed93 7a00 	vldr	s14, [r3]
 8004f90:	4b50      	ldr	r3, [pc, #320]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f9e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004fa4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80050d4 <MahonyAHRSupdateIMU+0x244>)
 8004faa:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fb6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8004fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fbe:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fc6:	edd7 6a02 	vldr	s13, [r7, #8]
 8004fca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8004fda:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fde:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fe6:	edd7 6a04 	vldr	s13, [r7, #16]
 8004fea:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8004ffa:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ffe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005006:	edd7 6a03 	vldr	s13, [r7, #12]
 800500a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800500e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005016:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 800501a:	4b2f      	ldr	r3, [pc, #188]	@ (80050d8 <MahonyAHRSupdateIMU+0x248>)
 800501c:	edd3 7a00 	vldr	s15, [r3]
 8005020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005028:	dd5e      	ble.n	80050e8 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 800502a:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <MahonyAHRSupdateIMU+0x248>)
 800502c:	ed93 7a00 	vldr	s14, [r3]
 8005030:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005038:	edd7 7a01 	vldr	s15, [r7, #4]
 800503c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005040:	4b26      	ldr	r3, [pc, #152]	@ (80050dc <MahonyAHRSupdateIMU+0x24c>)
 8005042:	edd3 7a00 	vldr	s15, [r3]
 8005046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <MahonyAHRSupdateIMU+0x24c>)
 800504c:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8005050:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <MahonyAHRSupdateIMU+0x248>)
 8005052:	ed93 7a00 	vldr	s14, [r3]
 8005056:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800505a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800505e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <MahonyAHRSupdateIMU+0x250>)
 8005068:	edd3 7a00 	vldr	s15, [r3]
 800506c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005070:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <MahonyAHRSupdateIMU+0x250>)
 8005072:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8005076:	4b18      	ldr	r3, [pc, #96]	@ (80050d8 <MahonyAHRSupdateIMU+0x248>)
 8005078:	ed93 7a00 	vldr	s14, [r3]
 800507c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005084:	edd7 7a01 	vldr	s15, [r7, #4]
 8005088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800508c:	4b15      	ldr	r3, [pc, #84]	@ (80050e4 <MahonyAHRSupdateIMU+0x254>)
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <MahonyAHRSupdateIMU+0x254>)
 8005098:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 800509c:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <MahonyAHRSupdateIMU+0x24c>)
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80050a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 80050ae:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <MahonyAHRSupdateIMU+0x250>)
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80050b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050bc:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 80050c0:	4b08      	ldr	r3, [pc, #32]	@ (80050e4 <MahonyAHRSupdateIMU+0x254>)
 80050c2:	edd3 7a00 	vldr	s15, [r3]
 80050c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80050ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ce:	edc7 7a05 	vstr	s15, [r7, #20]
 80050d2:	e015      	b.n	8005100 <MahonyAHRSupdateIMU+0x270>
 80050d4:	20000014 	.word	0x20000014
 80050d8:	20000028 	.word	0x20000028
 80050dc:	20001798 	.word	0x20001798
 80050e0:	2000179c 	.word	0x2000179c
 80050e4:	200017a0 	.word	0x200017a0
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 80050e8:	4b9a      	ldr	r3, [pc, #616]	@ (8005354 <MahonyAHRSupdateIMU+0x4c4>)
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80050f0:	4b99      	ldr	r3, [pc, #612]	@ (8005358 <MahonyAHRSupdateIMU+0x4c8>)
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80050f8:	4b98      	ldr	r3, [pc, #608]	@ (800535c <MahonyAHRSupdateIMU+0x4cc>)
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8005100:	4b97      	ldr	r3, [pc, #604]	@ (8005360 <MahonyAHRSupdateIMU+0x4d0>)
 8005102:	ed93 7a00 	vldr	s14, [r3]
 8005106:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 800511a:	4b91      	ldr	r3, [pc, #580]	@ (8005360 <MahonyAHRSupdateIMU+0x4d0>)
 800511c:	ed93 7a00 	vldr	s14, [r3]
 8005120:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005128:	ed97 7a06 	vldr	s14, [r7, #24]
 800512c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005130:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8005134:	4b8a      	ldr	r3, [pc, #552]	@ (8005360 <MahonyAHRSupdateIMU+0x4d0>)
 8005136:	ed93 7a00 	vldr	s14, [r3]
 800513a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	ed97 7a05 	vldr	s14, [r7, #20]
 8005146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800514a:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 800514e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005152:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515a:	ed97 7a07 	vldr	s14, [r7, #28]
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8005166:	edd7 7a01 	vldr	s15, [r7, #4]
 800516a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800516e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005172:	ed97 7a06 	vldr	s14, [r7, #24]
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 800517e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005182:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800518a:	ed97 7a05 	vldr	s14, [r7, #20]
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8005196:	4b73      	ldr	r3, [pc, #460]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 800519c:	4b71      	ldr	r3, [pc, #452]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 80051a2:	4b70      	ldr	r3, [pc, #448]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 80051a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80051aa:	ed93 7a00 	vldr	s14, [r3]
 80051ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80051b2:	eef1 6a67 	vneg.f32	s13, s15
 80051b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80051ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051be:	ed97 6a08 	vldr	s12, [r7, #32]
 80051c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80051c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80051ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80051ce:	4b65      	ldr	r3, [pc, #404]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80051d0:	ed93 6a03 	vldr	s12, [r3, #12]
 80051d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80051d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80051dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80051e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e4:	4b5f      	ldr	r3, [pc, #380]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80051e6:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 80051ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80051ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80051f0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80051f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80051f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051fc:	ed97 6a08 	vldr	s12, [r7, #32]
 8005200:	edd7 7a05 	vldr	s15, [r7, #20]
 8005204:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005208:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800520c:	4b55      	ldr	r3, [pc, #340]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800520e:	ed93 6a03 	vldr	s12, [r3, #12]
 8005212:	edd7 7a06 	vldr	s15, [r7, #24]
 8005216:	ee66 7a27 	vmul.f32	s15, s12, s15
 800521a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800521e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005222:	4b50      	ldr	r3, [pc, #320]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005224:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8005228:	4b4e      	ldr	r3, [pc, #312]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800522a:	ed93 7a02 	vldr	s14, [r3, #8]
 800522e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005232:	edd7 7a06 	vldr	s15, [r7, #24]
 8005236:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800523a:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800523e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005242:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005246:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800524a:	4b46      	ldr	r3, [pc, #280]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800524c:	ed93 6a03 	vldr	s12, [r3, #12]
 8005250:	edd7 7a07 	vldr	s15, [r7, #28]
 8005254:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005260:	4b40      	ldr	r3, [pc, #256]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005262:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8005266:	4b3f      	ldr	r3, [pc, #252]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005268:	ed93 7a03 	vldr	s14, [r3, #12]
 800526c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005270:	edd7 7a05 	vldr	s15, [r7, #20]
 8005274:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005278:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800527c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005280:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005284:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005288:	ed97 6a08 	vldr	s12, [r7, #32]
 800528c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005290:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005294:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529c:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800529e:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 80052a2:	4b30      	ldr	r3, [pc, #192]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052a4:	ed93 7a00 	vldr	s14, [r3]
 80052a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80052b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80052be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052c6:	4b27      	ldr	r3, [pc, #156]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80052cc:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80052d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052da:	4b22      	ldr	r3, [pc, #136]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052dc:	edd3 6a03 	vldr	s13, [r3, #12]
 80052e0:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80052e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ee:	eeb0 0a67 	vmov.f32	s0, s15
 80052f2:	f000 fb91 	bl	8005a18 <invSqrt>
 80052f6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 80052fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 80052fc:	ed93 7a00 	vldr	s14, [r3]
 8005300:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005308:	4b16      	ldr	r3, [pc, #88]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800530a:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 800530e:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005310:	ed93 7a01 	vldr	s14, [r3, #4]
 8005314:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531c:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 800531e:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005324:	ed93 7a02 	vldr	s14, [r3, #8]
 8005328:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800532c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005332:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005338:	ed93 7a03 	vldr	s14, [r3, #12]
 800533c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005344:	4b07      	ldr	r3, [pc, #28]	@ (8005364 <MahonyAHRSupdateIMU+0x4d4>)
 8005346:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800534a:	bf00      	nop
 800534c:	3748      	adds	r7, #72	@ 0x48
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20001798 	.word	0x20001798
 8005358:	2000179c 	.word	0x2000179c
 800535c:	200017a0 	.word	0x200017a0
 8005360:	20000024 	.word	0x20000024
 8005364:	20000014 	.word	0x20000014

08005368 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 800536e:	4b44      	ldr	r3, [pc, #272]	@ (8005480 <quaternionToThetaZ+0x118>)
 8005370:	edd3 7a01 	vldr	s15, [r3, #4]
 8005374:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005378:	4b41      	ldr	r3, [pc, #260]	@ (8005480 <quaternionToThetaZ+0x118>)
 800537a:	edd3 7a03 	vldr	s15, [r3, #12]
 800537e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005382:	4b3f      	ldr	r3, [pc, #252]	@ (8005480 <quaternionToThetaZ+0x118>)
 8005384:	edd3 7a02 	vldr	s15, [r3, #8]
 8005388:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800538c:	4b3c      	ldr	r3, [pc, #240]	@ (8005480 <quaternionToThetaZ+0x118>)
 800538e:	edd3 7a00 	vldr	s15, [r3]
 8005392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800539a:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800539e:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80053a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80053a8:	4b35      	ldr	r3, [pc, #212]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053b2:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80053b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053bc:	4b30      	ldr	r3, [pc, #192]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053be:	edd3 7a00 	vldr	s15, [r3]
 80053c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ca:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 80053ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80053d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80053d8:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053da:	edd3 7a01 	vldr	s15, [r3, #4]
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053ea:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80053f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053f4:	4b22      	ldr	r3, [pc, #136]	@ (8005480 <quaternionToThetaZ+0x118>)
 80053f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80053fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005402:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 800540a:	edd7 7a05 	vldr	s15, [r7, #20]
 800540e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005412:	edd7 7a04 	vldr	s15, [r7, #16]
 8005416:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800541a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800541e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005422:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800542a:	eeb0 0a67 	vmov.f32	s0, s15
 800542e:	f00b fb7d 	bl	8010b2c <sqrtf>
 8005432:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 8005436:	ed97 7a02 	vldr	s14, [r7, #8]
 800543a:	edd7 7a01 	vldr	s15, [r7, #4]
 800543e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005442:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8005446:	eeb0 0a66 	vmov.f32	s0, s13
 800544a:	f00b fbbc 	bl	8010bc6 <fminf>
 800544e:	eef0 7a40 	vmov.f32	s15, s0
 8005452:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8005456:	eeb0 0a67 	vmov.f32	s0, s15
 800545a:	f00b fb97 	bl	8010b8c <fmaxf>
 800545e:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8005462:	ed97 0a00 	vldr	s0, [r7]
 8005466:	f00b fb07 	bl	8010a78 <acosf>
 800546a:	eef0 7a40 	vmov.f32	s15, s0
 800546e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005484 <quaternionToThetaZ+0x11c>
 8005472:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005476:	eeb0 0a67 	vmov.f32	s0, s15
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000014 	.word	0x20000014
 8005484:	42654ca3 	.word	0x42654ca3

08005488 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800548e:	4b22      	ldr	r3, [pc, #136]	@ (8005518 <quaternionToPitchDegree+0x90>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	4b20      	ldr	r3, [pc, #128]	@ (8005518 <quaternionToPitchDegree+0x90>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	4b1f      	ldr	r3, [pc, #124]	@ (8005518 <quaternionToPitchDegree+0x90>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005518 <quaternionToPitchDegree+0x90>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 80054a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80054aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80054ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054b2:	edd7 6a02 	vldr	s13, [r7, #8]
 80054b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80054ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054c6:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 80054ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80054ce:	eef0 7ae7 	vabs.f32	s15, s15
 80054d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	db0c      	blt.n	80054fa <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 80054e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80054e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ec:	dd02      	ble.n	80054f4 <quaternionToPitchDegree+0x6c>
 80054ee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800551c <quaternionToPitchDegree+0x94>
 80054f2:	e00c      	b.n	800550e <quaternionToPitchDegree+0x86>
 80054f4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005520 <quaternionToPitchDegree+0x98>
 80054f8:	e009      	b.n	800550e <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 80054fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80054fe:	f00b fae7 	bl	8010ad0 <asinf>
 8005502:	eef0 7a40 	vmov.f32	s15, s0
 8005506:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005524 <quaternionToPitchDegree+0x9c>
 800550a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800550e:	eeb0 0a67 	vmov.f32	s0, s15
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000014 	.word	0x20000014
 800551c:	42b40000 	.word	0x42b40000
 8005520:	c2b40000 	.word	0xc2b40000
 8005524:	42652ee0 	.word	0x42652ee0

08005528 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800552e:	4b20      	ldr	r3, [pc, #128]	@ (80055b0 <quaternionToRollDegree+0x88>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	4b1e      	ldr	r3, [pc, #120]	@ (80055b0 <quaternionToRollDegree+0x88>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <quaternionToRollDegree+0x88>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <quaternionToRollDegree+0x88>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 8005546:	ed97 7a05 	vldr	s14, [r7, #20]
 800554a:	edd7 7a04 	vldr	s15, [r7, #16]
 800554e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005552:	edd7 6a03 	vldr	s13, [r7, #12]
 8005556:	edd7 7a02 	vldr	s15, [r7, #8]
 800555a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800555e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005566:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 800556a:	edd7 7a04 	vldr	s15, [r7, #16]
 800556e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005572:	edd7 7a03 	vldr	s15, [r7, #12]
 8005576:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800557a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 800558e:	edd7 0a00 	vldr	s1, [r7]
 8005592:	ed97 0a01 	vldr	s0, [r7, #4]
 8005596:	f00b fac7 	bl	8010b28 <atan2f>
 800559a:	eef0 7a40 	vmov.f32	s15, s0
 800559e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80055b4 <quaternionToRollDegree+0x8c>
 80055a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80055a6:	eeb0 0a67 	vmov.f32	s0, s15
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000014 	.word	0x20000014
 80055b4:	42652ee0 	.word	0x42652ee0

080055b8 <quaternionToYaw>:


float quaternionToYaw(){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80055be:	4b2a      	ldr	r3, [pc, #168]	@ (8005668 <quaternionToYaw+0xb0>)
 80055c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80055c4:	4b28      	ldr	r3, [pc, #160]	@ (8005668 <quaternionToYaw+0xb0>)
 80055c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80055ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055ce:	4b26      	ldr	r3, [pc, #152]	@ (8005668 <quaternionToYaw+0xb0>)
 80055d0:	edd3 6a00 	vldr	s13, [r3]
 80055d4:	4b24      	ldr	r3, [pc, #144]	@ (8005668 <quaternionToYaw+0xb0>)
 80055d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80055da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <quaternionToYaw+0xb0>)
 80055e8:	ed93 7a00 	vldr	s14, [r3]
 80055ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005668 <quaternionToYaw+0xb0>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005668 <quaternionToYaw+0xb0>)
 80055f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80055fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005668 <quaternionToYaw+0xb0>)
 80055fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800560a:	4b17      	ldr	r3, [pc, #92]	@ (8005668 <quaternionToYaw+0xb0>)
 800560c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005610:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <quaternionToYaw+0xb0>)
 8005612:	edd3 7a02 	vldr	s15, [r3, #8]
 8005616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800561e:	4b12      	ldr	r3, [pc, #72]	@ (8005668 <quaternionToYaw+0xb0>)
 8005620:	edd3 6a03 	vldr	s13, [r3, #12]
 8005624:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <quaternionToYaw+0xb0>)
 8005626:	edd3 7a03 	vldr	s15, [r3, #12]
 800562a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800562e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005632:	eef0 0a67 	vmov.f32	s1, s15
 8005636:	eeb0 0a46 	vmov.f32	s0, s12
 800563a:	f00b fa75 	bl	8010b28 <atan2f>
 800563e:	eef0 7a40 	vmov.f32	s15, s0
 8005642:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800566c <quaternionToYaw+0xb4>
 8005646:	ee27 7a87 	vmul.f32	s14, s15, s14
 800564a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005670 <quaternionToYaw+0xb8>
 800564e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005652:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	ee07 3a90 	vmov	s15, r3
}
 800565c:	eeb0 0a67 	vmov.f32	s0, s15
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000014 	.word	0x20000014
 800566c:	43340000 	.word	0x43340000
 8005670:	40490fd0 	.word	0x40490fd0

08005674 <quaternionToPitch>:

float quaternionToPitch(){
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800567a:	4b17      	ldr	r3, [pc, #92]	@ (80056d8 <quaternionToPitch+0x64>)
 800567c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005680:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <quaternionToPitch+0x64>)
 8005682:	edd3 7a03 	vldr	s15, [r3, #12]
 8005686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800568a:	4b13      	ldr	r3, [pc, #76]	@ (80056d8 <quaternionToPitch+0x64>)
 800568c:	edd3 6a00 	vldr	s13, [r3]
 8005690:	4b11      	ldr	r3, [pc, #68]	@ (80056d8 <quaternionToPitch+0x64>)
 8005692:	edd3 7a02 	vldr	s15, [r3, #8]
 8005696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800569a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800569e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056a2:	eeb0 0a67 	vmov.f32	s0, s15
 80056a6:	f00b fa13 	bl	8010ad0 <asinf>
 80056aa:	eef0 7a40 	vmov.f32	s15, s0
 80056ae:	eef1 7a67 	vneg.f32	s15, s15
 80056b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80056dc <quaternionToPitch+0x68>
 80056b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056ba:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80056e0 <quaternionToPitch+0x6c>
 80056be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c2:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	ee07 3a90 	vmov	s15, r3
}
 80056cc:	eeb0 0a67 	vmov.f32	s0, s15
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000014 	.word	0x20000014
 80056dc:	43340000 	.word	0x43340000
 80056e0:	40490fd0 	.word	0x40490fd0

080056e4 <quaternionToRoll>:

float quaternionToRoll(){
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 80056ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <quaternionToRoll+0xb0>)
 80056ec:	ed93 7a00 	vldr	s14, [r3]
 80056f0:	4b28      	ldr	r3, [pc, #160]	@ (8005794 <quaternionToRoll+0xb0>)
 80056f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80056f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056fa:	4b26      	ldr	r3, [pc, #152]	@ (8005794 <quaternionToRoll+0xb0>)
 80056fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005700:	4b24      	ldr	r3, [pc, #144]	@ (8005794 <quaternionToRoll+0xb0>)
 8005702:	edd3 7a03 	vldr	s15, [r3, #12]
 8005706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800570a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <quaternionToRoll+0xb0>)
 8005714:	ed93 7a00 	vldr	s14, [r3]
 8005718:	4b1e      	ldr	r3, [pc, #120]	@ (8005794 <quaternionToRoll+0xb0>)
 800571a:	edd3 7a00 	vldr	s15, [r3]
 800571e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005722:	4b1c      	ldr	r3, [pc, #112]	@ (8005794 <quaternionToRoll+0xb0>)
 8005724:	edd3 6a01 	vldr	s13, [r3, #4]
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <quaternionToRoll+0xb0>)
 800572a:	edd3 7a01 	vldr	s15, [r3, #4]
 800572e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005732:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005736:	4b17      	ldr	r3, [pc, #92]	@ (8005794 <quaternionToRoll+0xb0>)
 8005738:	edd3 6a02 	vldr	s13, [r3, #8]
 800573c:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <quaternionToRoll+0xb0>)
 800573e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800574a:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <quaternionToRoll+0xb0>)
 800574c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005750:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <quaternionToRoll+0xb0>)
 8005752:	edd3 7a03 	vldr	s15, [r3, #12]
 8005756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800575a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800575e:	eef0 0a67 	vmov.f32	s1, s15
 8005762:	eeb0 0a46 	vmov.f32	s0, s12
 8005766:	f00b f9df 	bl	8010b28 <atan2f>
 800576a:	eef0 7a40 	vmov.f32	s15, s0
 800576e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005798 <quaternionToRoll+0xb4>
 8005772:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005776:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800579c <quaternionToRoll+0xb8>
 800577a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800577e:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	ee07 3a90 	vmov	s15, r3
}
 8005788:	eeb0 0a67 	vmov.f32	s0, s15
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000014 	.word	0x20000014
 8005798:	43340000 	.word	0x43340000
 800579c:	40490fd0 	.word	0x40490fd0

080057a0 <getInitialQuaternion>:

void getInitialQuaternion() {
 80057a0:	b5b0      	push	{r4, r5, r7, lr}
 80057a2:	b092      	sub	sp, #72	@ 0x48
 80057a4:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 80057a6:	4b98      	ldr	r3, [pc, #608]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057a8:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80057ac:	4b96      	ldr	r3, [pc, #600]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057ae:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80057b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057b6:	4b94      	ldr	r3, [pc, #592]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057b8:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80057bc:	4b92      	ldr	r3, [pc, #584]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057be:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80057c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057cc:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 80057d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057d2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80057d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057de:	ee17 0a90 	vmov	r0, s15
 80057e2:	f7fa fed1 	bl	8000588 <__aeabi_f2d>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	ec43 2b10 	vmov	d0, r2, r3
 80057ee:	f00b f917 	bl	8010a20 <sqrt>
 80057f2:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 80057f6:	4b84      	ldr	r3, [pc, #528]	@ (8005a08 <getInitialQuaternion+0x268>)
 80057f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fa fec4 	bl	8000588 <__aeabi_f2d>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8005808:	4b7f      	ldr	r3, [pc, #508]	@ (8005a08 <getInitialQuaternion+0x268>)
 800580a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800580e:	eef1 7a67 	vneg.f32	s15, s15
 8005812:	ee17 3a90 	vmov	r3, s15
 8005816:	4618      	mov	r0, r3
 8005818:	f7fa feb6 	bl	8000588 <__aeabi_f2d>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8005824:	4b78      	ldr	r3, [pc, #480]	@ (8005a08 <getInitialQuaternion+0x268>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005828:	4618      	mov	r0, r3
 800582a:	f7fa fead 	bl	8000588 <__aeabi_f2d>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8005836:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800583a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800583e:	f7fb f825 	bl	800088c <__aeabi_ddiv>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 800584a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800584e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005852:	f7fb f81b 	bl	800088c <__aeabi_ddiv>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 800585e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005866:	f7fb f811 	bl	800088c <__aeabi_ddiv>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8005872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005876:	f04f 0000 	mov.w	r0, #0
 800587a:	4964      	ldr	r1, [pc, #400]	@ (8005a0c <getInitialQuaternion+0x26c>)
 800587c:	f7fa fd24 	bl	80002c8 <__aeabi_dsub>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	ec43 2b17 	vmov	d7, r2, r3
 8005888:	eeb0 0a47 	vmov.f32	s0, s14
 800588c:	eef0 0a67 	vmov.f32	s1, s15
 8005890:	f00b f8c6 	bl	8010a20 <sqrt>
 8005894:	ec51 0b10 	vmov	r0, r1, d0
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	4b5c      	ldr	r3, [pc, #368]	@ (8005a10 <getInitialQuaternion+0x270>)
 800589e:	f7fa fecb 	bl	8000638 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 80058aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	4957      	ldr	r1, [pc, #348]	@ (8005a10 <getInitialQuaternion+0x270>)
 80058b4:	f7fa ffea 	bl	800088c <__aeabi_ddiv>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 80058c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80058c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058c8:	f7fa feb6 	bl	8000638 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4610      	mov	r0, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005a10 <getInitialQuaternion+0x270>)
 80058da:	f7fa fead 	bl	8000638 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80058e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80058ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058ee:	f7fa fea3 	bl	8000638 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	4b44      	ldr	r3, [pc, #272]	@ (8005a10 <getInitialQuaternion+0x270>)
 8005900:	f7fa fe9a 	bl	8000638 <__aeabi_dmul>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8005918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800591c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005920:	f7fa fe8a 	bl	8000638 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4614      	mov	r4, r2
 800592a:	461d      	mov	r5, r3
 800592c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005934:	f7fa fe80 	bl	8000638 <__aeabi_dmul>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fcc4 	bl	80002cc <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005950:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005954:	f7fa fe70 	bl	8000638 <__aeabi_dmul>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fcb4 	bl	80002cc <__adddf3>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4614      	mov	r4, r2
 800596a:	461d      	mov	r5, r3
 800596c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005974:	f7fa fe60 	bl	8000638 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fca4 	bl	80002cc <__adddf3>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	ec43 2b17 	vmov	d7, r2, r3
 800598c:	eeb0 0a47 	vmov.f32	s0, s14
 8005990:	eef0 0a67 	vmov.f32	s1, s15
 8005994:	f00b f844 	bl	8010a20 <sqrt>
 8005998:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 800599c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059a4:	f7fa ff72 	bl	800088c <__aeabi_ddiv>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	f7fb f93a 	bl	8000c28 <__aeabi_d2f>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a17      	ldr	r2, [pc, #92]	@ (8005a14 <getInitialQuaternion+0x274>)
 80059b8:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 80059ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059c2:	f7fa ff63 	bl	800088c <__aeabi_ddiv>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	f7fb f92b 	bl	8000c28 <__aeabi_d2f>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005a14 <getInitialQuaternion+0x274>)
 80059d6:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 80059d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059e0:	f7fa ff54 	bl	800088c <__aeabi_ddiv>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4610      	mov	r0, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	f7fb f91c 	bl	8000c28 <__aeabi_d2f>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <getInitialQuaternion+0x274>)
 80059f4:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 80059f6:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <getInitialQuaternion+0x274>)
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	60da      	str	r2, [r3, #12]
}
 80059fe:	bf00      	nop
 8005a00:	3748      	adds	r7, #72	@ 0x48
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bdb0      	pop	{r4, r5, r7, pc}
 8005a06:	bf00      	nop
 8005a08:	200015b4 	.word	0x200015b4
 8005a0c:	3ff00000 	.word	0x3ff00000
 8005a10:	3fe00000 	.word	0x3fe00000
 8005a14:	20000014 	.word	0x20000014

08005a18 <invSqrt>:

float invSqrt(float x) {
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8005a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a2e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8005a36:	f107 0310 	add.w	r3, r7, #16
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	105a      	asrs	r2, r3, #1
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <invSqrt+0x74>)
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8005a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a64:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a74:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
}
 8005a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	5f3759df 	.word	0x5f3759df

08005a90 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8005a98:	481b      	ldr	r0, [pc, #108]	@ (8005b08 <sensor_fusion_init+0x78>)
 8005a9a:	f7fd f931 	bl	8002d00 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <sensor_fusion_init+0x78>)
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b0c <sensor_fusion_init+0x7c>)
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8005aa4:	4b18      	ldr	r3, [pc, #96]	@ (8005b08 <sensor_fusion_init+0x78>)
 8005aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b10 <sensor_fusion_init+0x80>)
 8005aa8:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8005aaa:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <sensor_fusion_init+0x78>)
 8005aac:	4a19      	ldr	r2, [pc, #100]	@ (8005b14 <sensor_fusion_init+0x84>)
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e009      	b.n	8005aca <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8005ab6:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <sensor_fusion_init+0x88>)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	ddf2      	ble.n	8005ab6 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8005ad0:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <sensor_fusion_init+0x8c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8005ad6:	4b12      	ldr	r3, [pc, #72]	@ (8005b20 <sensor_fusion_init+0x90>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8005adc:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <sensor_fusion_init+0x94>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8005ae2:	4b11      	ldr	r3, [pc, #68]	@ (8005b28 <sensor_fusion_init+0x98>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	4a0f      	ldr	r2, [pc, #60]	@ (8005b2c <sensor_fusion_init+0x9c>)
 8005aee:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8005af0:	f000 fc94 	bl	800641c <HAL_GetTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b30 <sensor_fusion_init+0xa0>)
 8005af8:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8005afa:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <sensor_fusion_init+0xa4>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	200017b4 	.word	0x200017b4
 8005b0c:	3dcccccd 	.word	0x3dcccccd
 8005b10:	3ba3d70a 	.word	0x3ba3d70a
 8005b14:	40a00000 	.word	0x40a00000
 8005b18:	20001810 	.word	0x20001810
 8005b1c:	20001824 	.word	0x20001824
 8005b20:	20001825 	.word	0x20001825
 8005b24:	20001826 	.word	0x20001826
 8005b28:	20001800 	.word	0x20001800
 8005b2c:	20001804 	.word	0x20001804
 8005b30:	20001808 	.word	0x20001808
 8005b34:	2000180c 	.word	0x2000180c

08005b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <HAL_MspInit+0x4c>)
 8005b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b46:	4a0f      	ldr	r2, [pc, #60]	@ (8005b84 <HAL_MspInit+0x4c>)
 8005b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <HAL_MspInit+0x4c>)
 8005b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4b09      	ldr	r3, [pc, #36]	@ (8005b84 <HAL_MspInit+0x4c>)
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	4a08      	ldr	r2, [pc, #32]	@ (8005b84 <HAL_MspInit+0x4c>)
 8005b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <HAL_MspInit+0x4c>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40023800 	.word	0x40023800

08005b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	@ 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a33      	ldr	r2, [pc, #204]	@ (8005c74 <HAL_ADC_MspInit+0xec>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d15f      	bne.n	8005c6a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	4b32      	ldr	r3, [pc, #200]	@ (8005c78 <HAL_ADC_MspInit+0xf0>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	4a31      	ldr	r2, [pc, #196]	@ (8005c78 <HAL_ADC_MspInit+0xf0>)
 8005bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bba:	4b2f      	ldr	r3, [pc, #188]	@ (8005c78 <HAL_ADC_MspInit+0xf0>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	4b2b      	ldr	r3, [pc, #172]	@ (8005c78 <HAL_ADC_MspInit+0xf0>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	4a2a      	ldr	r2, [pc, #168]	@ (8005c78 <HAL_ADC_MspInit+0xf0>)
 8005bd0:	f043 0302 	orr.w	r3, r3, #2
 8005bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bd6:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_ADC_MspInit+0xf0>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005be2:	2302      	movs	r3, #2
 8005be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005be6:	2303      	movs	r3, #3
 8005be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4821      	ldr	r0, [pc, #132]	@ (8005c7c <HAL_ADC_MspInit+0xf4>)
 8005bf6:	f001 fec7 	bl	8007988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005bfa:	4b21      	ldr	r3, [pc, #132]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005bfc:	4a21      	ldr	r2, [pc, #132]	@ (8005c84 <HAL_ADC_MspInit+0xfc>)
 8005bfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005c00:	4b1f      	ldr	r3, [pc, #124]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c06:	4b1e      	ldr	r3, [pc, #120]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005c12:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005c1a:	4b19      	ldr	r3, [pc, #100]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005c22:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005c2a:	4b15      	ldr	r3, [pc, #84]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005c32:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c38:	4b11      	ldr	r3, [pc, #68]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005c3e:	4810      	ldr	r0, [pc, #64]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c40:	f001 faa0 	bl	8007184 <HAL_DMA_Init>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005c4a:	f7fe f9b7 	bl	8003fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a0b      	ldr	r2, [pc, #44]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c52:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c54:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <HAL_ADC_MspInit+0xf8>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	2012      	movs	r0, #18
 8005c60:	f001 fa4b 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005c64:	2012      	movs	r0, #18
 8005c66:	f001 fa64 	bl	8007132 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005c6a:	bf00      	nop
 8005c6c:	3728      	adds	r7, #40	@ 0x28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40012000 	.word	0x40012000
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	40020400 	.word	0x40020400
 8005c80:	200012c4 	.word	0x200012c4
 8005c84:	40026410 	.word	0x40026410

08005c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08c      	sub	sp, #48	@ 0x30
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c90:	f107 031c 	add.w	r3, r7, #28
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a42      	ldr	r2, [pc, #264]	@ (8005db0 <HAL_I2C_MspInit+0x128>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d12d      	bne.n	8005d06 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	4b41      	ldr	r3, [pc, #260]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	4a40      	ldr	r2, [pc, #256]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cba:	4b3e      	ldr	r3, [pc, #248]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005cc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ccc:	2312      	movs	r3, #18
 8005cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005cd8:	2304      	movs	r3, #4
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cdc:	f107 031c 	add.w	r3, r7, #28
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4835      	ldr	r0, [pc, #212]	@ (8005db8 <HAL_I2C_MspInit+0x130>)
 8005ce4:	f001 fe50 	bl	8007988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	4b31      	ldr	r3, [pc, #196]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	4a30      	ldr	r2, [pc, #192]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005cf2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005d04:	e050      	b.n	8005da8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dbc <HAL_I2C_MspInit+0x134>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d14b      	bne.n	8005da8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d18:	4a26      	ldr	r2, [pc, #152]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d1a:	f043 0304 	orr.w	r3, r3, #4
 8005d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d20:	4b24      	ldr	r3, [pc, #144]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	4b20      	ldr	r3, [pc, #128]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d34:	4a1f      	ldr	r2, [pc, #124]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d4e:	2312      	movs	r3, #18
 8005d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d56:	2303      	movs	r3, #3
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d5e:	f107 031c 	add.w	r3, r7, #28
 8005d62:	4619      	mov	r1, r3
 8005d64:	4816      	ldr	r0, [pc, #88]	@ (8005dc0 <HAL_I2C_MspInit+0x138>)
 8005d66:	f001 fe0f 	bl	8007988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d70:	2312      	movs	r3, #18
 8005d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d80:	f107 031c 	add.w	r3, r7, #28
 8005d84:	4619      	mov	r1, r3
 8005d86:	480f      	ldr	r0, [pc, #60]	@ (8005dc4 <HAL_I2C_MspInit+0x13c>)
 8005d88:	f001 fdfe 	bl	8007988 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d94:	4a07      	ldr	r2, [pc, #28]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d9c:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <HAL_I2C_MspInit+0x12c>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]
}
 8005da8:	bf00      	nop
 8005daa:	3730      	adds	r7, #48	@ 0x30
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40005400 	.word	0x40005400
 8005db4:	40023800 	.word	0x40023800
 8005db8:	40020400 	.word	0x40020400
 8005dbc:	40005c00 	.word	0x40005c00
 8005dc0:	40020800 	.word	0x40020800
 8005dc4:	40020000 	.word	0x40020000

08005dc8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <HAL_I2C_MspDeInit+0x68>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d110      	bne.n	8005dfc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005dda:	4b16      	ldr	r3, [pc, #88]	@ (8005e34 <HAL_I2C_MspDeInit+0x6c>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <HAL_I2C_MspDeInit+0x6c>)
 8005de0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005de4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005de6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005dea:	4813      	ldr	r0, [pc, #76]	@ (8005e38 <HAL_I2C_MspDeInit+0x70>)
 8005dec:	f001 ff60 	bl	8007cb0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005df0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005df4:	4810      	ldr	r0, [pc, #64]	@ (8005e38 <HAL_I2C_MspDeInit+0x70>)
 8005df6:	f001 ff5b 	bl	8007cb0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005dfa:	e014      	b.n	8005e26 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C3)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0e      	ldr	r2, [pc, #56]	@ (8005e3c <HAL_I2C_MspDeInit+0x74>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10f      	bne.n	8005e26 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005e06:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <HAL_I2C_MspDeInit+0x6c>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e34 <HAL_I2C_MspDeInit+0x6c>)
 8005e0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e10:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005e16:	480a      	ldr	r0, [pc, #40]	@ (8005e40 <HAL_I2C_MspDeInit+0x78>)
 8005e18:	f001 ff4a 	bl	8007cb0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e20:	4808      	ldr	r0, [pc, #32]	@ (8005e44 <HAL_I2C_MspDeInit+0x7c>)
 8005e22:	f001 ff45 	bl	8007cb0 <HAL_GPIO_DeInit>
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40005400 	.word	0x40005400
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40020400 	.word	0x40020400
 8005e3c:	40005c00 	.word	0x40005c00
 8005e40:	40020800 	.word	0x40020800
 8005e44:	40020000 	.word	0x40020000

08005e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d115      	bne.n	8005e86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <HAL_TIM_Base_MspInit+0x48>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	4a0b      	ldr	r2, [pc, #44]	@ (8005e90 <HAL_TIM_Base_MspInit+0x48>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e6a:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <HAL_TIM_Base_MspInit+0x48>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	201c      	movs	r0, #28
 8005e7c:	f001 f93d 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005e80:	201c      	movs	r0, #28
 8005e82:	f001 f956 	bl	8007132 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	@ 0x38
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a66      	ldr	r2, [pc, #408]	@ (800604c <HAL_UART_MspInit+0x1b8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d12c      	bne.n	8005f10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	4b65      	ldr	r3, [pc, #404]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	4a64      	ldr	r2, [pc, #400]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ec6:	4b62      	ldr	r3, [pc, #392]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eda:	4a5d      	ldr	r2, [pc, #372]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005efa:	2303      	movs	r3, #3
 8005efc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005efe:	2308      	movs	r3, #8
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f06:	4619      	mov	r1, r3
 8005f08:	4852      	ldr	r0, [pc, #328]	@ (8006054 <HAL_UART_MspInit+0x1c0>)
 8005f0a:	f001 fd3d 	bl	8007988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005f0e:	e099      	b.n	8006044 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a50      	ldr	r2, [pc, #320]	@ (8006058 <HAL_UART_MspInit+0x1c4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d12c      	bne.n	8005f74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	4a4b      	ldr	r2, [pc, #300]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f2a:	4b49      	ldr	r3, [pc, #292]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	4b45      	ldr	r3, [pc, #276]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3e:	4a44      	ldr	r2, [pc, #272]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f46:	4b42      	ldr	r3, [pc, #264]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005f52:	230c      	movs	r3, #12
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f56:	2302      	movs	r3, #2
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f62:	2307      	movs	r3, #7
 8005f64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4839      	ldr	r0, [pc, #228]	@ (8006054 <HAL_UART_MspInit+0x1c0>)
 8005f6e:	f001 fd0b 	bl	8007988 <HAL_GPIO_Init>
}
 8005f72:	e067      	b.n	8006044 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a38      	ldr	r2, [pc, #224]	@ (800605c <HAL_UART_MspInit+0x1c8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d162      	bne.n	8006044 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	4b33      	ldr	r3, [pc, #204]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	4a32      	ldr	r2, [pc, #200]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f88:	f043 0320 	orr.w	r3, r3, #32
 8005f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f8e:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005faa:	4b29      	ldr	r3, [pc, #164]	@ (8006050 <HAL_UART_MspInit+0x1bc>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fb6:	23c0      	movs	r3, #192	@ 0xc0
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4823      	ldr	r0, [pc, #140]	@ (8006060 <HAL_UART_MspInit+0x1cc>)
 8005fd2:	f001 fcd9 	bl	8007988 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8005fd6:	4b23      	ldr	r3, [pc, #140]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8005fd8:	4a23      	ldr	r2, [pc, #140]	@ (8006068 <HAL_UART_MspInit+0x1d4>)
 8005fda:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005fdc:	4b21      	ldr	r3, [pc, #132]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8005fde:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005fe2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fea:	4b1e      	ldr	r3, [pc, #120]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8005ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ff6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ffe:	4b19      	ldr	r3, [pc, #100]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8006000:	2200      	movs	r2, #0
 8006002:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006004:	4b17      	ldr	r3, [pc, #92]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8006006:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800600a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800600c:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 800600e:	2200      	movs	r2, #0
 8006010:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006012:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8006014:	2200      	movs	r2, #0
 8006016:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006018:	4812      	ldr	r0, [pc, #72]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 800601a:	f001 f8b3 	bl	8007184 <HAL_DMA_Init>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8006024:	f7fd ffca 	bl	8003fbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0e      	ldr	r2, [pc, #56]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 800602c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800602e:	4a0d      	ldr	r2, [pc, #52]	@ (8006064 <HAL_UART_MspInit+0x1d0>)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	2047      	movs	r0, #71	@ 0x47
 800603a:	f001 f85e 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800603e:	2047      	movs	r0, #71	@ 0x47
 8006040:	f001 f877 	bl	8007132 <HAL_NVIC_EnableIRQ>
}
 8006044:	bf00      	nop
 8006046:	3738      	adds	r7, #56	@ 0x38
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40004c00 	.word	0x40004c00
 8006050:	40023800 	.word	0x40023800
 8006054:	40020000 	.word	0x40020000
 8006058:	40004400 	.word	0x40004400
 800605c:	40011400 	.word	0x40011400
 8006060:	40020800 	.word	0x40020800
 8006064:	200014ec 	.word	0x200014ec
 8006068:	40026440 	.word	0x40026440

0800606c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <NMI_Handler+0x4>

08006074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <HardFault_Handler+0x4>

0800607c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <MemManage_Handler+0x4>

08006084 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <BusFault_Handler+0x4>

0800608c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <UsageFault_Handler+0x4>

08006094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006098:	bf00      	nop
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060a2:	b480      	push	{r7}
 80060a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060c2:	f000 f997 	bl	80063f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}

080060ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80060ce:	2008      	movs	r0, #8
 80060d0:	f001 fefc 	bl	8007ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80060d4:	bf00      	nop
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80060dc:	2010      	movs	r0, #16
 80060de:	f001 fef5 	bl	8007ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80060ec:	4802      	ldr	r0, [pc, #8]	@ (80060f8 <ADC_IRQHandler+0x10>)
 80060ee:	f000 fa08 	bl	8006502 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	2000127c 	.word	0x2000127c

080060fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006100:	4802      	ldr	r0, [pc, #8]	@ (800610c <TIM2_IRQHandler+0x10>)
 8006102:	f003 fdf7 	bl	8009cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	200013cc 	.word	0x200013cc

08006110 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006114:	4802      	ldr	r0, [pc, #8]	@ (8006120 <DMA2_Stream0_IRQHandler+0x10>)
 8006116:	f001 f9cd 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200012c4 	.word	0x200012c4

08006124 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006128:	4802      	ldr	r0, [pc, #8]	@ (8006134 <DMA2_Stream2_IRQHandler+0x10>)
 800612a:	f001 f9c3 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200014ec 	.word	0x200014ec

08006138 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800613c:	4802      	ldr	r0, [pc, #8]	@ (8006148 <USART6_IRQHandler+0x10>)
 800613e:	f004 fb09 	bl	800a754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200014a4 	.word	0x200014a4

0800614c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  return 1;
 8006150:	2301      	movs	r3, #1
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <_kill>:

int _kill(int pid, int sig)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006166:	f006 fd37 	bl	800cbd8 <__errno>
 800616a:	4603      	mov	r3, r0
 800616c:	2216      	movs	r2, #22
 800616e:	601a      	str	r2, [r3, #0]
  return -1;
 8006170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <_exit>:

void _exit (int status)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006184:	f04f 31ff 	mov.w	r1, #4294967295
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ffe7 	bl	800615c <_kill>
  while (1) {}    /* Make sure we hang here */
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <_exit+0x12>

08006192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e00a      	b.n	80061ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80061a4:	f3af 8000 	nop.w
 80061a8:	4601      	mov	r1, r0
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	60ba      	str	r2, [r7, #8]
 80061b0:	b2ca      	uxtb	r2, r1
 80061b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	3301      	adds	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	dbf0      	blt.n	80061a4 <_read+0x12>
  }

  return len;
 80061c2:	687b      	ldr	r3, [r7, #4]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	e009      	b.n	80061f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	60ba      	str	r2, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	3301      	adds	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	dbf1      	blt.n	80061de <_write+0x12>
  }
  return len;
 80061fa:	687b      	ldr	r3, [r7, #4]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_close>:

int _close(int file)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800620c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800622c:	605a      	str	r2, [r3, #4]
  return 0;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <_isatty>:

int _isatty(int file)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006244:	2301      	movs	r3, #1
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006274:	4a14      	ldr	r2, [pc, #80]	@ (80062c8 <_sbrk+0x5c>)
 8006276:	4b15      	ldr	r3, [pc, #84]	@ (80062cc <_sbrk+0x60>)
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006280:	4b13      	ldr	r3, [pc, #76]	@ (80062d0 <_sbrk+0x64>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006288:	4b11      	ldr	r3, [pc, #68]	@ (80062d0 <_sbrk+0x64>)
 800628a:	4a12      	ldr	r2, [pc, #72]	@ (80062d4 <_sbrk+0x68>)
 800628c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <_sbrk+0x64>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	429a      	cmp	r2, r3
 800629a:	d207      	bcs.n	80062ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800629c:	f006 fc9c 	bl	800cbd8 <__errno>
 80062a0:	4603      	mov	r3, r0
 80062a2:	220c      	movs	r2, #12
 80062a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	e009      	b.n	80062c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062ac:	4b08      	ldr	r3, [pc, #32]	@ (80062d0 <_sbrk+0x64>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062b2:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <_sbrk+0x64>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	4a05      	ldr	r2, [pc, #20]	@ (80062d0 <_sbrk+0x64>)
 80062bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20020000 	.word	0x20020000
 80062cc:	00000400 	.word	0x00000400
 80062d0:	20001828 	.word	0x20001828
 80062d4:	20001980 	.word	0x20001980

080062d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062dc:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <SystemInit+0x20>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e2:	4a05      	ldr	r2, [pc, #20]	@ (80062f8 <SystemInit+0x20>)
 80062e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006300:	f7ff ffea 	bl	80062d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006304:	480c      	ldr	r0, [pc, #48]	@ (8006338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006306:	490d      	ldr	r1, [pc, #52]	@ (800633c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006308:	4a0d      	ldr	r2, [pc, #52]	@ (8006340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800630a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800630c:	e002      	b.n	8006314 <LoopCopyDataInit>

0800630e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800630e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006312:	3304      	adds	r3, #4

08006314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006318:	d3f9      	bcc.n	800630e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800631a:	4a0a      	ldr	r2, [pc, #40]	@ (8006344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800631c:	4c0a      	ldr	r4, [pc, #40]	@ (8006348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800631e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006320:	e001      	b.n	8006326 <LoopFillZerobss>

08006322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006324:	3204      	adds	r2, #4

08006326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006328:	d3fb      	bcc.n	8006322 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800632a:	f006 fc5b 	bl	800cbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800632e:	f7fd f9af 	bl	8003690 <main>
  bx  lr    
 8006332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800633c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8006340:	08012840 	.word	0x08012840
  ldr r2, =_sbss
 8006344:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8006348:	2000197c 	.word	0x2000197c

0800634c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800634c:	e7fe      	b.n	800634c <CAN1_RX0_IRQHandler>
	...

08006350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006354:	4b0e      	ldr	r3, [pc, #56]	@ (8006390 <HAL_Init+0x40>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a0d      	ldr	r2, [pc, #52]	@ (8006390 <HAL_Init+0x40>)
 800635a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800635e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006360:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <HAL_Init+0x40>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <HAL_Init+0x40>)
 8006366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800636a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800636c:	4b08      	ldr	r3, [pc, #32]	@ (8006390 <HAL_Init+0x40>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a07      	ldr	r2, [pc, #28]	@ (8006390 <HAL_Init+0x40>)
 8006372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006378:	2003      	movs	r0, #3
 800637a:	f000 feb3 	bl	80070e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800637e:	200f      	movs	r0, #15
 8006380:	f000 f808 	bl	8006394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006384:	f7ff fbd8 	bl	8005b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40023c00 	.word	0x40023c00

08006394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800639c:	4b12      	ldr	r3, [pc, #72]	@ (80063e8 <HAL_InitTick+0x54>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	4b12      	ldr	r3, [pc, #72]	@ (80063ec <HAL_InitTick+0x58>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80063aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fed9 	bl	800716a <HAL_SYSTICK_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e00e      	b.n	80063e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b0f      	cmp	r3, #15
 80063c6:	d80a      	bhi.n	80063de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063c8:	2200      	movs	r2, #0
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	f000 fe93 	bl	80070fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063d4:	4a06      	ldr	r2, [pc, #24]	@ (80063f0 <HAL_InitTick+0x5c>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	2000002c 	.word	0x2000002c
 80063ec:	20000034 	.word	0x20000034
 80063f0:	20000030 	.word	0x20000030

080063f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <HAL_IncTick+0x20>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <HAL_IncTick+0x24>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4413      	add	r3, r2
 8006404:	4a04      	ldr	r2, [pc, #16]	@ (8006418 <HAL_IncTick+0x24>)
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000034 	.word	0x20000034
 8006418:	2000182c 	.word	0x2000182c

0800641c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  return uwTick;
 8006420:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <HAL_GetTick+0x14>)
 8006422:	681b      	ldr	r3, [r3, #0]
}
 8006424:	4618      	mov	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	2000182c 	.word	0x2000182c

08006434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800643c:	f7ff ffee 	bl	800641c <HAL_GetTick>
 8006440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d005      	beq.n	800645a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800644e:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <HAL_Delay+0x44>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800645a:	bf00      	nop
 800645c:	f7ff ffde 	bl	800641c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	429a      	cmp	r2, r3
 800646a:	d8f7      	bhi.n	800645c <HAL_Delay+0x28>
  {
  }
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000034 	.word	0x20000034

0800647c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e033      	b.n	80064fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fb74 	bl	8005b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d118      	bne.n	80064ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80064c2:	f023 0302 	bic.w	r3, r3, #2
 80064c6:	f043 0202 	orr.w	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fb8c 	bl	8006bec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	f043 0201 	orr.w	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80064ea:	e001      	b.n	80064f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d049      	beq.n	80065cc <HAL_ADC_IRQHandler+0xca>
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d046      	beq.n	80065cc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d12b      	bne.n	80065bc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006568:	2b00      	cmp	r3, #0
 800656a:	d127      	bne.n	80065bc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006584:	2b00      	cmp	r3, #0
 8006586:	d119      	bne.n	80065bc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0220 	bic.w	r2, r2, #32
 8006596:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fd fce7 	bl	8003f90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0212 	mvn.w	r2, #18
 80065ca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065da:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d057      	beq.n	8006692 <HAL_ADC_IRQHandler+0x190>
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d054      	beq.n	8006692 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d139      	bne.n	8006682 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006618:	2b00      	cmp	r3, #0
 800661a:	d006      	beq.n	800662a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006626:	2b00      	cmp	r3, #0
 8006628:	d12b      	bne.n	8006682 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006634:	2b00      	cmp	r3, #0
 8006636:	d124      	bne.n	8006682 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11d      	bne.n	8006682 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800664a:	2b00      	cmp	r3, #0
 800664c:	d119      	bne.n	8006682 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800665c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006672:	2b00      	cmp	r3, #0
 8006674:	d105      	bne.n	8006682 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	f043 0201 	orr.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fc30 	bl	8006ee8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 020c 	mvn.w	r2, #12
 8006690:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <HAL_ADC_IRQHandler+0x1d6>
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d014      	beq.n	80066d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10d      	bne.n	80066d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f949 	bl	8006960 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f06f 0201 	mvn.w	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d015      	beq.n	800671a <HAL_ADC_IRQHandler+0x218>
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d012      	beq.n	800671a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f8:	f043 0202 	orr.w	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0220 	mvn.w	r2, #32
 8006708:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f932 	bl	8006974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0220 	mvn.w	r2, #32
 8006718:	601a      	str	r2, [r3, #0]
  }
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_ADC_Start_DMA+0x22>
 8006742:	2302      	movs	r3, #2
 8006744:	e0eb      	b.n	800691e <HAL_ADC_Start_DMA+0x1fa>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d018      	beq.n	800678e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800676c:	4b6e      	ldr	r3, [pc, #440]	@ (8006928 <HAL_ADC_Start_DMA+0x204>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a6e      	ldr	r2, [pc, #440]	@ (800692c <HAL_ADC_Start_DMA+0x208>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	0c9a      	lsrs	r2, r3, #18
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8006780:	e002      	b.n	8006788 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	3b01      	subs	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f9      	bne.n	8006782 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679c:	d107      	bne.n	80067ae <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 80a3 	bne.w	8006904 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80067e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fc:	d106      	bne.n	800680c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006802:	f023 0206 	bic.w	r2, r3, #6
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	645a      	str	r2, [r3, #68]	@ 0x44
 800680a:	e002      	b.n	8006812 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800681a:	4b45      	ldr	r3, [pc, #276]	@ (8006930 <HAL_ADC_Start_DMA+0x20c>)
 800681c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	4a44      	ldr	r2, [pc, #272]	@ (8006934 <HAL_ADC_Start_DMA+0x210>)
 8006824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	4a43      	ldr	r2, [pc, #268]	@ (8006938 <HAL_ADC_Start_DMA+0x214>)
 800682c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006832:	4a42      	ldr	r2, [pc, #264]	@ (800693c <HAL_ADC_Start_DMA+0x218>)
 8006834:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800683e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800684e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800685e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	334c      	adds	r3, #76	@ 0x4c
 800686a:	4619      	mov	r1, r3
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f000 fd36 	bl	80072e0 <HAL_DMA_Start_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2b00      	cmp	r3, #0
 8006882:	d12a      	bne.n	80068da <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2d      	ldr	r2, [pc, #180]	@ (8006940 <HAL_ADC_Start_DMA+0x21c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d015      	beq.n	80068ba <HAL_ADC_Start_DMA+0x196>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a2c      	ldr	r2, [pc, #176]	@ (8006944 <HAL_ADC_Start_DMA+0x220>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d105      	bne.n	80068a4 <HAL_ADC_Start_DMA+0x180>
 8006898:	4b25      	ldr	r3, [pc, #148]	@ (8006930 <HAL_ADC_Start_DMA+0x20c>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a27      	ldr	r2, [pc, #156]	@ (8006948 <HAL_ADC_Start_DMA+0x224>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d136      	bne.n	800691c <HAL_ADC_Start_DMA+0x1f8>
 80068ae:	4b20      	ldr	r3, [pc, #128]	@ (8006930 <HAL_ADC_Start_DMA+0x20c>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d130      	bne.n	800691c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d129      	bne.n	800691c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	e020      	b.n	800691c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_ADC_Start_DMA+0x21c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d11b      	bne.n	800691c <HAL_ADC_Start_DMA+0x1f8>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d114      	bne.n	800691c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006900:	609a      	str	r2, [r3, #8]
 8006902:	e00b      	b.n	800691c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006914:	f043 0201 	orr.w	r2, r3, #1
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800691c:	7ffb      	ldrb	r3, [r7, #31]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3720      	adds	r7, #32
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000002c 	.word	0x2000002c
 800692c:	431bde83 	.word	0x431bde83
 8006930:	40012300 	.word	0x40012300
 8006934:	08006de5 	.word	0x08006de5
 8006938:	08006e9f 	.word	0x08006e9f
 800693c:	08006ebb 	.word	0x08006ebb
 8006940:	40012000 	.word	0x40012000
 8006944:	40012100 	.word	0x40012100
 8006948:	40012200 	.word	0x40012200

0800694c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_ADC_ConfigChannel+0x1c>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e113      	b.n	8006bcc <HAL_ADC_ConfigChannel+0x244>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b09      	cmp	r3, #9
 80069b2:	d925      	bls.n	8006a00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68d9      	ldr	r1, [r3, #12]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	4613      	mov	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	3b1e      	subs	r3, #30
 80069ca:	2207      	movs	r2, #7
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	43da      	mvns	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	400a      	ands	r2, r1
 80069d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68d9      	ldr	r1, [r3, #12]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	4618      	mov	r0, r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4403      	add	r3, r0
 80069f2:	3b1e      	subs	r3, #30
 80069f4:	409a      	lsls	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	60da      	str	r2, [r3, #12]
 80069fe:	e022      	b.n	8006a46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6919      	ldr	r1, [r3, #16]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4613      	mov	r3, r2
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4413      	add	r3, r2
 8006a14:	2207      	movs	r2, #7
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	400a      	ands	r2, r1
 8006a22:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6919      	ldr	r1, [r3, #16]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	4618      	mov	r0, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4403      	add	r3, r0
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d824      	bhi.n	8006a98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3b05      	subs	r3, #5
 8006a60:	221f      	movs	r2, #31
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43da      	mvns	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	400a      	ands	r2, r1
 8006a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	3b05      	subs	r3, #5
 8006a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a96:	e04c      	b.n	8006b32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d824      	bhi.n	8006aea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	3b23      	subs	r3, #35	@ 0x23
 8006ab2:	221f      	movs	r2, #31
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43da      	mvns	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	400a      	ands	r2, r1
 8006ac0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4618      	mov	r0, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	3b23      	subs	r3, #35	@ 0x23
 8006adc:	fa00 f203 	lsl.w	r2, r0, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ae8:	e023      	b.n	8006b32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	3b41      	subs	r3, #65	@ 0x41
 8006afc:	221f      	movs	r2, #31
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43da      	mvns	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	400a      	ands	r2, r1
 8006b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4618      	mov	r0, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	3b41      	subs	r3, #65	@ 0x41
 8006b26:	fa00 f203 	lsl.w	r2, r0, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b32:	4b29      	ldr	r3, [pc, #164]	@ (8006bd8 <HAL_ADC_ConfigChannel+0x250>)
 8006b34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a28      	ldr	r2, [pc, #160]	@ (8006bdc <HAL_ADC_ConfigChannel+0x254>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10f      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x1d8>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b12      	cmp	r3, #18
 8006b46:	d10b      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1d      	ldr	r2, [pc, #116]	@ (8006bdc <HAL_ADC_ConfigChannel+0x254>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d12b      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x23a>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <HAL_ADC_ConfigChannel+0x258>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <HAL_ADC_ConfigChannel+0x1f4>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b11      	cmp	r3, #17
 8006b7a:	d122      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a11      	ldr	r2, [pc, #68]	@ (8006be0 <HAL_ADC_ConfigChannel+0x258>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b9e:	4b11      	ldr	r3, [pc, #68]	@ (8006be4 <HAL_ADC_ConfigChannel+0x25c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a11      	ldr	r2, [pc, #68]	@ (8006be8 <HAL_ADC_ConfigChannel+0x260>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	0c9a      	lsrs	r2, r3, #18
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006bb4:	e002      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f9      	bne.n	8006bb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	40012300 	.word	0x40012300
 8006bdc:	40012000 	.word	0x40012000
 8006be0:	10000012 	.word	0x10000012
 8006be4:	2000002c 	.word	0x2000002c
 8006be8:	431bde83 	.word	0x431bde83

08006bec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bf4:	4b79      	ldr	r3, [pc, #484]	@ (8006ddc <ADC_Init+0x1f0>)
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	021a      	lsls	r2, r3, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6899      	ldr	r1, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	4a58      	ldr	r2, [pc, #352]	@ (8006de0 <ADC_Init+0x1f4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d022      	beq.n	8006cca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6899      	ldr	r1, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6899      	ldr	r1, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]
 8006cc8:	e00f      	b.n	8006cea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006ce8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0202 	bic.w	r2, r2, #2
 8006cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6899      	ldr	r1, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7e1b      	ldrb	r3, [r3, #24]
 8006d04:	005a      	lsls	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01b      	beq.n	8006d50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006d36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d42:	3b01      	subs	r3, #1
 8006d44:	035a      	lsls	r2, r3, #13
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	e007      	b.n	8006d60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	051a      	lsls	r2, r3, #20
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6899      	ldr	r1, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006da2:	025a      	lsls	r2, r3, #9
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6899      	ldr	r1, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	029a      	lsls	r2, r3, #10
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	609a      	str	r2, [r3, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40012300 	.word	0x40012300
 8006de0:	0f000001 	.word	0x0f000001

08006de4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d13c      	bne.n	8006e78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d12b      	bne.n	8006e70 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d127      	bne.n	8006e70 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d006      	beq.n	8006e3c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d119      	bne.n	8006e70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0220 	bic.w	r2, r2, #32
 8006e4a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d105      	bne.n	8006e70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e68:	f043 0201 	orr.w	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7fd f88d 	bl	8003f90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e76:	e00e      	b.n	8006e96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff fd75 	bl	8006974 <HAL_ADC_ErrorCallback>
}
 8006e8a:	e004      	b.n	8006e96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fd4d 	bl	800694c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2240      	movs	r2, #64	@ 0x40
 8006ecc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed2:	f043 0204 	orr.w	r2, r3, #4
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fd4a 	bl	8006974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <__NVIC_SetPriorityGrouping+0x44>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f2e:	4a04      	ldr	r2, [pc, #16]	@ (8006f40 <__NVIC_SetPriorityGrouping+0x44>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	60d3      	str	r3, [r2, #12]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	e000ed00 	.word	0xe000ed00

08006f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f48:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <__NVIC_GetPriorityGrouping+0x18>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	f003 0307 	and.w	r3, r3, #7
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	e000ed00 	.word	0xe000ed00

08006f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db0b      	blt.n	8006f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	f003 021f 	and.w	r2, r3, #31
 8006f78:	4907      	ldr	r1, [pc, #28]	@ (8006f98 <__NVIC_EnableIRQ+0x38>)
 8006f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	2001      	movs	r0, #1
 8006f82:	fa00 f202 	lsl.w	r2, r0, r2
 8006f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	e000e100 	.word	0xe000e100

08006f9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	db12      	blt.n	8006fd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f003 021f 	and.w	r2, r3, #31
 8006fb4:	490a      	ldr	r1, [pc, #40]	@ (8006fe0 <__NVIC_DisableIRQ+0x44>)
 8006fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8006fc2:	3320      	adds	r3, #32
 8006fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006fc8:	f3bf 8f4f 	dsb	sy
}
 8006fcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006fce:	f3bf 8f6f 	isb	sy
}
 8006fd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	e000e100 	.word	0xe000e100

08006fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	db0a      	blt.n	800700e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	490c      	ldr	r1, [pc, #48]	@ (8007030 <__NVIC_SetPriority+0x4c>)
 8006ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007002:	0112      	lsls	r2, r2, #4
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	440b      	add	r3, r1
 8007008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800700c:	e00a      	b.n	8007024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	4908      	ldr	r1, [pc, #32]	@ (8007034 <__NVIC_SetPriority+0x50>)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	3b04      	subs	r3, #4
 800701c:	0112      	lsls	r2, r2, #4
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	440b      	add	r3, r1
 8007022:	761a      	strb	r2, [r3, #24]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	e000e100 	.word	0xe000e100
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	@ 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f1c3 0307 	rsb	r3, r3, #7
 8007052:	2b04      	cmp	r3, #4
 8007054:	bf28      	it	cs
 8007056:	2304      	movcs	r3, #4
 8007058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3304      	adds	r3, #4
 800705e:	2b06      	cmp	r3, #6
 8007060:	d902      	bls.n	8007068 <NVIC_EncodePriority+0x30>
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	3b03      	subs	r3, #3
 8007066:	e000      	b.n	800706a <NVIC_EncodePriority+0x32>
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	43da      	mvns	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	401a      	ands	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007080:	f04f 31ff 	mov.w	r1, #4294967295
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	43d9      	mvns	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007090:	4313      	orrs	r3, r2
         );
}
 8007092:	4618      	mov	r0, r3
 8007094:	3724      	adds	r7, #36	@ 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070b0:	d301      	bcc.n	80070b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070b2:	2301      	movs	r3, #1
 80070b4:	e00f      	b.n	80070d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070b6:	4a0a      	ldr	r2, [pc, #40]	@ (80070e0 <SysTick_Config+0x40>)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070be:	210f      	movs	r1, #15
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	f7ff ff8e 	bl	8006fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <SysTick_Config+0x40>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070ce:	4b04      	ldr	r3, [pc, #16]	@ (80070e0 <SysTick_Config+0x40>)
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000e010 	.word	0xe000e010

080070e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff05 	bl	8006efc <__NVIC_SetPriorityGrouping>
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800710c:	f7ff ff1a 	bl	8006f44 <__NVIC_GetPriorityGrouping>
 8007110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	6978      	ldr	r0, [r7, #20]
 8007118:	f7ff ff8e 	bl	8007038 <NVIC_EncodePriority>
 800711c:	4602      	mov	r2, r0
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff5d 	bl	8006fe4 <__NVIC_SetPriority>
}
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800713c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ff0d 	bl	8006f60 <__NVIC_EnableIRQ>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	4603      	mov	r3, r0
 8007156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff ff1d 	bl	8006f9c <__NVIC_DisableIRQ>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff ff94 	bl	80070a0 <SysTick_Config>
 8007178:	4603      	mov	r3, r0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007190:	f7ff f944 	bl	800641c <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e099      	b.n	80072d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071c0:	e00f      	b.n	80071e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071c2:	f7ff f92b 	bl	800641c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b05      	cmp	r3, #5
 80071ce:	d908      	bls.n	80071e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2203      	movs	r2, #3
 80071da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e078      	b.n	80072d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e8      	bne.n	80071c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4b38      	ldr	r3, [pc, #224]	@ (80072dc <HAL_DMA_Init+0x158>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800720e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800721a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	2b04      	cmp	r3, #4
 800723a:	d107      	bne.n	800724c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	4313      	orrs	r3, r2
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007272:	2b04      	cmp	r3, #4
 8007274:	d117      	bne.n	80072a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fb01 	bl	8007890 <DMA_CheckFifoParam>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	@ 0x40
 8007298:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80072a2:	2301      	movs	r3, #1
 80072a4:	e016      	b.n	80072d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fab8 	bl	8007824 <DMA_CalcBaseAndBitshift>
 80072b4:	4603      	mov	r3, r0
 80072b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	223f      	movs	r2, #63	@ 0x3f
 80072be:	409a      	lsls	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	f010803f 	.word	0xf010803f

080072e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_DMA_Start_IT+0x26>
 8007302:	2302      	movs	r3, #2
 8007304:	e040      	b.n	8007388 <HAL_DMA_Start_IT+0xa8>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	d12f      	bne.n	800737a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2202      	movs	r2, #2
 800731e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fa4a 	bl	80077c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007338:	223f      	movs	r2, #63	@ 0x3f
 800733a:	409a      	lsls	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0216 	orr.w	r2, r2, #22
 800734e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0208 	orr.w	r2, r2, #8
 8007366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e005      	b.n	8007386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007382:	2302      	movs	r3, #2
 8007384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800739e:	f7ff f83d 	bl	800641c <HAL_GetTick>
 80073a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d008      	beq.n	80073c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2280      	movs	r2, #128	@ 0x80
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e052      	b.n	8007468 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0216 	bic.w	r2, r2, #22
 80073d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695a      	ldr	r2, [r3, #20]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <HAL_DMA_Abort+0x62>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0208 	bic.w	r2, r2, #8
 8007400:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007412:	e013      	b.n	800743c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007414:	f7ff f802 	bl	800641c <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b05      	cmp	r3, #5
 8007420:	d90c      	bls.n	800743c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2203      	movs	r2, #3
 800742c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e015      	b.n	8007468 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e4      	bne.n	8007414 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800744e:	223f      	movs	r2, #63	@ 0x3f
 8007450:	409a      	lsls	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d004      	beq.n	800748e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2280      	movs	r2, #128	@ 0x80
 8007488:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e00c      	b.n	80074a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2205      	movs	r2, #5
 8007492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074c0:	4b8e      	ldr	r3, [pc, #568]	@ (80076fc <HAL_DMA_IRQHandler+0x248>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007700 <HAL_DMA_IRQHandler+0x24c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0a9b      	lsrs	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074de:	2208      	movs	r2, #8
 80074e0:	409a      	lsls	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01a      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0204 	bic.w	r2, r2, #4
 8007506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750c:	2208      	movs	r2, #8
 800750e:	409a      	lsls	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	f043 0201 	orr.w	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755a:	2204      	movs	r2, #4
 800755c:	409a      	lsls	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d012      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007578:	2204      	movs	r2, #4
 800757a:	409a      	lsls	r2, r3
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007584:	f043 0204 	orr.w	r2, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007590:	2210      	movs	r2, #16
 8007592:	409a      	lsls	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d043      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03c      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ae:	2210      	movs	r2, #16
 80075b0:	409a      	lsls	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d018      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d108      	bne.n	80075e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d024      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	e01f      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	e016      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d107      	bne.n	8007614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0208 	bic.w	r2, r2, #8
 8007612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007628:	2220      	movs	r2, #32
 800762a:	409a      	lsls	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 808f 	beq.w	8007754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8087 	beq.w	8007754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764a:	2220      	movs	r2, #32
 800764c:	409a      	lsls	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b05      	cmp	r3, #5
 800765c:	d136      	bne.n	80076cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0216 	bic.w	r2, r2, #22
 800766c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800767c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <HAL_DMA_IRQHandler+0x1da>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0208 	bic.w	r2, r2, #8
 800769c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a2:	223f      	movs	r2, #63	@ 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d07e      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
        }
        return;
 80076ca:	e079      	b.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01d      	beq.n	8007716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10d      	bne.n	8007704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d031      	beq.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	e02c      	b.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
 80076fa:	bf00      	nop
 80076fc:	2000002c 	.word	0x2000002c
 8007700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d023      	beq.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
 8007714:	e01e      	b.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10f      	bne.n	8007744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0210 	bic.w	r2, r2, #16
 8007732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007758:	2b00      	cmp	r3, #0
 800775a:	d032      	beq.n	80077c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d022      	beq.n	80077ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2205      	movs	r2, #5
 800776c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3301      	adds	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	429a      	cmp	r2, r3
 800778a:	d307      	bcc.n	800779c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f2      	bne.n	8007780 <HAL_DMA_IRQHandler+0x2cc>
 800779a:	e000      	b.n	800779e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800779c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	e000      	b.n	80077c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80077c0:	bf00      	nop
    }
  }
}
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b40      	cmp	r3, #64	@ 0x40
 80077f4:	d108      	bne.n	8007808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007806:	e007      	b.n	8007818 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	3b10      	subs	r3, #16
 8007834:	4a14      	ldr	r2, [pc, #80]	@ (8007888 <DMA_CalcBaseAndBitshift+0x64>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800783e:	4a13      	ldr	r2, [pc, #76]	@ (800788c <DMA_CalcBaseAndBitshift+0x68>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b03      	cmp	r3, #3
 8007850:	d909      	bls.n	8007866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	659a      	str	r2, [r3, #88]	@ 0x58
 8007864:	e007      	b.n	8007876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	aaaaaaab 	.word	0xaaaaaaab
 800788c:	08012374 	.word	0x08012374

08007890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d11f      	bne.n	80078ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d856      	bhi.n	800795e <DMA_CheckFifoParam+0xce>
 80078b0:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <DMA_CheckFifoParam+0x28>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078db 	.word	0x080078db
 80078c0:	080078c9 	.word	0x080078c9
 80078c4:	0800795f 	.word	0x0800795f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d046      	beq.n	8007962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d8:	e043      	b.n	8007962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078e2:	d140      	bne.n	8007966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078e8:	e03d      	b.n	8007966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078f2:	d121      	bne.n	8007938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d837      	bhi.n	800796a <DMA_CheckFifoParam+0xda>
 80078fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <DMA_CheckFifoParam+0x70>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007911 	.word	0x08007911
 8007904:	08007917 	.word	0x08007917
 8007908:	08007911 	.word	0x08007911
 800790c:	08007929 	.word	0x08007929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
      break;
 8007914:	e030      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d025      	beq.n	800796e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007926:	e022      	b.n	800796e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007930:	d11f      	bne.n	8007972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007936:	e01c      	b.n	8007972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d903      	bls.n	8007946 <DMA_CheckFifoParam+0xb6>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b03      	cmp	r3, #3
 8007942:	d003      	beq.n	800794c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007944:	e018      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
      break;
 800794a:	e015      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
      break;
 800795c:	e00b      	b.n	8007976 <DMA_CheckFifoParam+0xe6>
      break;
 800795e:	bf00      	nop
 8007960:	e00a      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 8007962:	bf00      	nop
 8007964:	e008      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 8007966:	bf00      	nop
 8007968:	e006      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 800796a:	bf00      	nop
 800796c:	e004      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;   
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
      break;
 8007976:	bf00      	nop
    }
  } 
  
  return status; 
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	@ 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800799e:	2300      	movs	r3, #0
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	e165      	b.n	8007c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079a4:	2201      	movs	r2, #1
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4013      	ands	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	429a      	cmp	r2, r3
 80079be:	f040 8154 	bne.w	8007c6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d005      	beq.n	80079da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d130      	bne.n	8007a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	2203      	movs	r2, #3
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43db      	mvns	r3, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	4013      	ands	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	fa02 f303 	lsl.w	r3, r2, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a10:	2201      	movs	r2, #1
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	091b      	lsrs	r3, r3, #4
 8007a26:	f003 0201 	and.w	r2, r3, #1
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d017      	beq.n	8007a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	2203      	movs	r2, #3
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d123      	bne.n	8007acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	08da      	lsrs	r2, r3, #3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3208      	adds	r2, #8
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	220f      	movs	r2, #15
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	08da      	lsrs	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3208      	adds	r2, #8
 8007ac6:	69b9      	ldr	r1, [r7, #24]
 8007ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	43db      	mvns	r3, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f003 0203 	and.w	r2, r3, #3
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 80ae 	beq.w	8007c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	4b5d      	ldr	r3, [pc, #372]	@ (8007c88 <HAL_GPIO_Init+0x300>)
 8007b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b16:	4a5c      	ldr	r2, [pc, #368]	@ (8007c88 <HAL_GPIO_Init+0x300>)
 8007b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8007c88 <HAL_GPIO_Init+0x300>)
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b2a:	4a58      	ldr	r2, [pc, #352]	@ (8007c8c <HAL_GPIO_Init+0x304>)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	089b      	lsrs	r3, r3, #2
 8007b30:	3302      	adds	r3, #2
 8007b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	220f      	movs	r2, #15
 8007b42:	fa02 f303 	lsl.w	r3, r2, r3
 8007b46:	43db      	mvns	r3, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a4f      	ldr	r2, [pc, #316]	@ (8007c90 <HAL_GPIO_Init+0x308>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d025      	beq.n	8007ba2 <HAL_GPIO_Init+0x21a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a4e      	ldr	r2, [pc, #312]	@ (8007c94 <HAL_GPIO_Init+0x30c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01f      	beq.n	8007b9e <HAL_GPIO_Init+0x216>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a4d      	ldr	r2, [pc, #308]	@ (8007c98 <HAL_GPIO_Init+0x310>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d019      	beq.n	8007b9a <HAL_GPIO_Init+0x212>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a4c      	ldr	r2, [pc, #304]	@ (8007c9c <HAL_GPIO_Init+0x314>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_GPIO_Init+0x20e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca0 <HAL_GPIO_Init+0x318>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00d      	beq.n	8007b92 <HAL_GPIO_Init+0x20a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a4a      	ldr	r2, [pc, #296]	@ (8007ca4 <HAL_GPIO_Init+0x31c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d007      	beq.n	8007b8e <HAL_GPIO_Init+0x206>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a49      	ldr	r2, [pc, #292]	@ (8007ca8 <HAL_GPIO_Init+0x320>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d101      	bne.n	8007b8a <HAL_GPIO_Init+0x202>
 8007b86:	2306      	movs	r3, #6
 8007b88:	e00c      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007b8a:	2307      	movs	r3, #7
 8007b8c:	e00a      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007b8e:	2305      	movs	r3, #5
 8007b90:	e008      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007b92:	2304      	movs	r3, #4
 8007b94:	e006      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007b96:	2303      	movs	r3, #3
 8007b98:	e004      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e002      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <HAL_GPIO_Init+0x21c>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	f002 0203 	and.w	r2, r2, #3
 8007baa:	0092      	lsls	r2, r2, #2
 8007bac:	4093      	lsls	r3, r2
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bb4:	4935      	ldr	r1, [pc, #212]	@ (8007c8c <HAL_GPIO_Init+0x304>)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	3302      	adds	r3, #2
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007be6:	4a31      	ldr	r2, [pc, #196]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bec:	4b2f      	ldr	r3, [pc, #188]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c10:	4a26      	ldr	r2, [pc, #152]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c16:	4b25      	ldr	r3, [pc, #148]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4013      	ands	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c40:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c64:	4a11      	ldr	r2, [pc, #68]	@ (8007cac <HAL_GPIO_Init+0x324>)
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b0f      	cmp	r3, #15
 8007c74:	f67f ae96 	bls.w	80079a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	3724      	adds	r7, #36	@ 0x24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	40013800 	.word	0x40013800
 8007c90:	40020000 	.word	0x40020000
 8007c94:	40020400 	.word	0x40020400
 8007c98:	40020800 	.word	0x40020800
 8007c9c:	40020c00 	.word	0x40020c00
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	40021400 	.word	0x40021400
 8007ca8:	40021800 	.word	0x40021800
 8007cac:	40013c00 	.word	0x40013c00

08007cb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e0c7      	b.n	8007e5c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ccc:	2201      	movs	r2, #1
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	f040 80b7 	bne.w	8007e56 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ce8:	4a62      	ldr	r2, [pc, #392]	@ (8007e74 <HAL_GPIO_DeInit+0x1c4>)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	089b      	lsrs	r3, r3, #2
 8007cee:	3302      	adds	r3, #2
 8007cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	220f      	movs	r2, #15
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8007e78 <HAL_GPIO_DeInit+0x1c8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d025      	beq.n	8007d5e <HAL_GPIO_DeInit+0xae>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a59      	ldr	r2, [pc, #356]	@ (8007e7c <HAL_GPIO_DeInit+0x1cc>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d01f      	beq.n	8007d5a <HAL_GPIO_DeInit+0xaa>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a58      	ldr	r2, [pc, #352]	@ (8007e80 <HAL_GPIO_DeInit+0x1d0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d019      	beq.n	8007d56 <HAL_GPIO_DeInit+0xa6>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a57      	ldr	r2, [pc, #348]	@ (8007e84 <HAL_GPIO_DeInit+0x1d4>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <HAL_GPIO_DeInit+0xa2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a56      	ldr	r2, [pc, #344]	@ (8007e88 <HAL_GPIO_DeInit+0x1d8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00d      	beq.n	8007d4e <HAL_GPIO_DeInit+0x9e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a55      	ldr	r2, [pc, #340]	@ (8007e8c <HAL_GPIO_DeInit+0x1dc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d007      	beq.n	8007d4a <HAL_GPIO_DeInit+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a54      	ldr	r2, [pc, #336]	@ (8007e90 <HAL_GPIO_DeInit+0x1e0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d101      	bne.n	8007d46 <HAL_GPIO_DeInit+0x96>
 8007d42:	2306      	movs	r3, #6
 8007d44:	e00c      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d46:	2307      	movs	r3, #7
 8007d48:	e00a      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d4a:	2305      	movs	r3, #5
 8007d4c:	e008      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d4e:	2304      	movs	r3, #4
 8007d50:	e006      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d52:	2303      	movs	r3, #3
 8007d54:	e004      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e002      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_GPIO_DeInit+0xb0>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	f002 0203 	and.w	r2, r2, #3
 8007d66:	0092      	lsls	r2, r2, #2
 8007d68:	4093      	lsls	r3, r2
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d132      	bne.n	8007dd6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d70:	4b48      	ldr	r3, [pc, #288]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	43db      	mvns	r3, r3
 8007d78:	4946      	ldr	r1, [pc, #280]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d7e:	4b45      	ldr	r3, [pc, #276]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	43db      	mvns	r3, r3
 8007d86:	4943      	ldr	r1, [pc, #268]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d88:	4013      	ands	r3, r2
 8007d8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d8c:	4b41      	ldr	r3, [pc, #260]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	493f      	ldr	r1, [pc, #252]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	493c      	ldr	r1, [pc, #240]	@ (8007e94 <HAL_GPIO_DeInit+0x1e4>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	220f      	movs	r2, #15
 8007db2:	fa02 f303 	lsl.w	r3, r2, r3
 8007db6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007db8:	4a2e      	ldr	r2, [pc, #184]	@ (8007e74 <HAL_GPIO_DeInit+0x1c4>)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	089b      	lsrs	r3, r3, #2
 8007dbe:	3302      	adds	r3, #2
 8007dc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	43da      	mvns	r2, r3
 8007dc8:	482a      	ldr	r0, [pc, #168]	@ (8007e74 <HAL_GPIO_DeInit+0x1c4>)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	089b      	lsrs	r3, r3, #2
 8007dce:	400a      	ands	r2, r1
 8007dd0:	3302      	adds	r3, #2
 8007dd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	2103      	movs	r1, #3
 8007de0:	fa01 f303 	lsl.w	r3, r1, r3
 8007de4:	43db      	mvns	r3, r3
 8007de6:	401a      	ands	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	08da      	lsrs	r2, r3, #3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3208      	adds	r2, #8
 8007df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	220f      	movs	r2, #15
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43db      	mvns	r3, r3
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	08d2      	lsrs	r2, r2, #3
 8007e0c:	4019      	ands	r1, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3208      	adds	r2, #8
 8007e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	2103      	movs	r1, #3
 8007e20:	fa01 f303 	lsl.w	r3, r1, r3
 8007e24:	43db      	mvns	r3, r3
 8007e26:	401a      	ands	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	2101      	movs	r1, #1
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	2103      	movs	r1, #3
 8007e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4e:	43db      	mvns	r3, r3
 8007e50:	401a      	ands	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b0f      	cmp	r3, #15
 8007e60:	f67f af34 	bls.w	8007ccc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40013800 	.word	0x40013800
 8007e78:	40020000 	.word	0x40020000
 8007e7c:	40020400 	.word	0x40020400
 8007e80:	40020800 	.word	0x40020800
 8007e84:	40020c00 	.word	0x40020c00
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	40021400 	.word	0x40021400
 8007e90:	40021800 	.word	0x40021800
 8007e94:	40013c00 	.word	0x40013c00

08007e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ea8:	787b      	ldrb	r3, [r7, #1]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eae:	887a      	ldrh	r2, [r7, #2]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007eb4:	e003      	b.n	8007ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	041a      	lsls	r2, r3, #16
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	619a      	str	r2, [r3, #24]
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007ed6:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ed8:	695a      	ldr	r2, [r3, #20]
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	4013      	ands	r3, r2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d006      	beq.n	8007ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ee2:	4a05      	ldr	r2, [pc, #20]	@ (8007ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc f816 	bl	8003f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	40013c00 	.word	0x40013c00

08007efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e12b      	b.n	8008166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fd feb0 	bl	8005c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2224      	movs	r2, #36	@ 0x24
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f60:	f001 f912 	bl	8009188 <HAL_RCC_GetPCLK1Freq>
 8007f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4a81      	ldr	r2, [pc, #516]	@ (8008170 <HAL_I2C_Init+0x274>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d807      	bhi.n	8007f80 <HAL_I2C_Init+0x84>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a80      	ldr	r2, [pc, #512]	@ (8008174 <HAL_I2C_Init+0x278>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	bf94      	ite	ls
 8007f78:	2301      	movls	r3, #1
 8007f7a:	2300      	movhi	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	e006      	b.n	8007f8e <HAL_I2C_Init+0x92>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a7d      	ldr	r2, [pc, #500]	@ (8008178 <HAL_I2C_Init+0x27c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	bf94      	ite	ls
 8007f88:	2301      	movls	r3, #1
 8007f8a:	2300      	movhi	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e0e7      	b.n	8008166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a78      	ldr	r2, [pc, #480]	@ (800817c <HAL_I2C_Init+0x280>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	0c9b      	lsrs	r3, r3, #18
 8007fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8008170 <HAL_I2C_Init+0x274>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d802      	bhi.n	8007fd0 <HAL_I2C_Init+0xd4>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	e009      	b.n	8007fe4 <HAL_I2C_Init+0xe8>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	4a69      	ldr	r2, [pc, #420]	@ (8008180 <HAL_I2C_Init+0x284>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	099b      	lsrs	r3, r3, #6
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007ff6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	495c      	ldr	r1, [pc, #368]	@ (8008170 <HAL_I2C_Init+0x274>)
 8008000:	428b      	cmp	r3, r1
 8008002:	d819      	bhi.n	8008038 <HAL_I2C_Init+0x13c>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	1e59      	subs	r1, r3, #1
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008012:	1c59      	adds	r1, r3, #1
 8008014:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008018:	400b      	ands	r3, r1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <HAL_I2C_Init+0x138>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1e59      	subs	r1, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	fbb1 f3f3 	udiv	r3, r1, r3
 800802c:	3301      	adds	r3, #1
 800802e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008032:	e051      	b.n	80080d8 <HAL_I2C_Init+0x1dc>
 8008034:	2304      	movs	r3, #4
 8008036:	e04f      	b.n	80080d8 <HAL_I2C_Init+0x1dc>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d111      	bne.n	8008064 <HAL_I2C_Init+0x168>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	1e58      	subs	r0, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6859      	ldr	r1, [r3, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	440b      	add	r3, r1
 800804e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008052:	3301      	adds	r3, #1
 8008054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008058:	2b00      	cmp	r3, #0
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	e012      	b.n	800808a <HAL_I2C_Init+0x18e>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	1e58      	subs	r0, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	0099      	lsls	r1, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	fbb0 f3f3 	udiv	r3, r0, r3
 800807a:	3301      	adds	r3, #1
 800807c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_I2C_Init+0x196>
 800808e:	2301      	movs	r3, #1
 8008090:	e022      	b.n	80080d8 <HAL_I2C_Init+0x1dc>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10e      	bne.n	80080b8 <HAL_I2C_Init+0x1bc>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1e58      	subs	r0, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6859      	ldr	r1, [r3, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	440b      	add	r3, r1
 80080a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80080ac:	3301      	adds	r3, #1
 80080ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080b6:	e00f      	b.n	80080d8 <HAL_I2C_Init+0x1dc>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	1e58      	subs	r0, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6859      	ldr	r1, [r3, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	0099      	lsls	r1, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80080ce:	3301      	adds	r3, #1
 80080d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	6809      	ldr	r1, [r1, #0]
 80080dc:	4313      	orrs	r3, r2
 80080de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69da      	ldr	r2, [r3, #28]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008106:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6911      	ldr	r1, [r2, #16]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68d2      	ldr	r2, [r2, #12]
 8008112:	4311      	orrs	r1, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	430b      	orrs	r3, r1
 800811a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695a      	ldr	r2, [r3, #20]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	000186a0 	.word	0x000186a0
 8008174:	001e847f 	.word	0x001e847f
 8008178:	003d08ff 	.word	0x003d08ff
 800817c:	431bde83 	.word	0x431bde83
 8008180:	10624dd3 	.word	0x10624dd3

08008184 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e021      	b.n	80081da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2224      	movs	r2, #36	@ 0x24
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fd fe0a 	bl	8005dc8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	461a      	mov	r2, r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	817b      	strh	r3, [r7, #10]
 80081f6:	460b      	mov	r3, r1
 80081f8:	813b      	strh	r3, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081fe:	f7fe f90d 	bl	800641c <HAL_GetTick>
 8008202:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b20      	cmp	r3, #32
 800820e:	f040 80d9 	bne.w	80083c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2319      	movs	r3, #25
 8008218:	2201      	movs	r2, #1
 800821a:	496d      	ldr	r1, [pc, #436]	@ (80083d0 <HAL_I2C_Mem_Write+0x1ec>)
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fc8b 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008228:	2302      	movs	r3, #2
 800822a:	e0cc      	b.n	80083c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_I2C_Mem_Write+0x56>
 8008236:	2302      	movs	r3, #2
 8008238:	e0c5      	b.n	80083c6 <HAL_I2C_Mem_Write+0x1e2>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b01      	cmp	r3, #1
 800824e:	d007      	beq.n	8008260 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800826e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2221      	movs	r2, #33	@ 0x21
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2240      	movs	r2, #64	@ 0x40
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008290:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4a4d      	ldr	r2, [pc, #308]	@ (80083d4 <HAL_I2C_Mem_Write+0x1f0>)
 80082a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082a2:	88f8      	ldrh	r0, [r7, #6]
 80082a4:	893a      	ldrh	r2, [r7, #8]
 80082a6:	8979      	ldrh	r1, [r7, #10]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4603      	mov	r3, r0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fac2 	bl	800883c <I2C_RequestMemoryWrite>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d052      	beq.n	8008364 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e081      	b.n	80083c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fd50 	bl	8008d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00d      	beq.n	80082ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d107      	bne.n	80082ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e06b      	b.n	80083c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b04      	cmp	r3, #4
 800832a:	d11b      	bne.n	8008364 <HAL_I2C_Mem_Write+0x180>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	d017      	beq.n	8008364 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800835a:	b29b      	uxth	r3, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1aa      	bne.n	80082c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fd43 	bl	8008dfc <I2C_WaitOnBTFFlagUntilTimeout>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00d      	beq.n	8008398 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008380:	2b04      	cmp	r3, #4
 8008382:	d107      	bne.n	8008394 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008392:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e016      	b.n	80083c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	e000      	b.n	80083c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80083c4:	2302      	movs	r3, #2
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	00100002 	.word	0x00100002
 80083d4:	ffff0000 	.word	0xffff0000

080083d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08c      	sub	sp, #48	@ 0x30
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	4608      	mov	r0, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	461a      	mov	r2, r3
 80083e6:	4603      	mov	r3, r0
 80083e8:	817b      	strh	r3, [r7, #10]
 80083ea:	460b      	mov	r3, r1
 80083ec:	813b      	strh	r3, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083f2:	f7fe f813 	bl	800641c <HAL_GetTick>
 80083f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b20      	cmp	r3, #32
 8008402:	f040 8214 	bne.w	800882e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	2319      	movs	r3, #25
 800840c:	2201      	movs	r2, #1
 800840e:	497b      	ldr	r1, [pc, #492]	@ (80085fc <HAL_I2C_Mem_Read+0x224>)
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fb91 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800841c:	2302      	movs	r3, #2
 800841e:	e207      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <HAL_I2C_Mem_Read+0x56>
 800842a:	2302      	movs	r3, #2
 800842c:	e200      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d007      	beq.n	8008454 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0201 	orr.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2222      	movs	r2, #34	@ 0x22
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2240      	movs	r2, #64	@ 0x40
 8008470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800847e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800848a:	b29a      	uxth	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a5b      	ldr	r2, [pc, #364]	@ (8008600 <HAL_I2C_Mem_Read+0x228>)
 8008494:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008496:	88f8      	ldrh	r0, [r7, #6]
 8008498:	893a      	ldrh	r2, [r7, #8]
 800849a:	8979      	ldrh	r1, [r7, #10]
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fa5e 	bl	8008968 <I2C_RequestMemoryRead>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e1bc      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d113      	bne.n	80084e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084be:	2300      	movs	r3, #0
 80084c0:	623b      	str	r3, [r7, #32]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	623b      	str	r3, [r7, #32]
 80084d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e190      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d11b      	bne.n	8008526 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084fe:	2300      	movs	r3, #0
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	e170      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800852a:	2b02      	cmp	r3, #2
 800852c:	d11b      	bne.n	8008566 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800853c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800854c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800854e:	2300      	movs	r3, #0
 8008550:	61bb      	str	r3, [r7, #24]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	e150      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	617b      	str	r3, [r7, #20]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800857c:	e144      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008582:	2b03      	cmp	r3, #3
 8008584:	f200 80f1 	bhi.w	800876a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800858c:	2b01      	cmp	r3, #1
 800858e:	d123      	bne.n	80085d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008592:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fc79 	bl	8008e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e145      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80085d6:	e117      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d14e      	bne.n	800867e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	2200      	movs	r2, #0
 80085e8:	4906      	ldr	r1, [pc, #24]	@ (8008604 <HAL_I2C_Mem_Read+0x22c>)
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 faa4 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e11a      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
 80085fa:	bf00      	nop
 80085fc:	00100002 	.word	0x00100002
 8008600:	ffff0000 	.word	0xffff0000
 8008604:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691a      	ldr	r2, [r3, #16]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862a:	1c5a      	adds	r2, r3, #1
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008634:	3b01      	subs	r3, #1
 8008636:	b29a      	uxth	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008640:	b29b      	uxth	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	b29a      	uxth	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800867c:	e0c4      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008684:	2200      	movs	r2, #0
 8008686:	496c      	ldr	r1, [pc, #432]	@ (8008838 <HAL_I2C_Mem_Read+0x460>)
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fa55 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e0cb      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3b01      	subs	r3, #1
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e0:	2200      	movs	r2, #0
 80086e2:	4955      	ldr	r1, [pc, #340]	@ (8008838 <HAL_I2C_Mem_Read+0x460>)
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 fa27 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e09d      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691a      	ldr	r2, [r3, #16]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008740:	b2d2      	uxtb	r2, r2
 8008742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008752:	3b01      	subs	r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008768:	e04e      	b.n	8008808 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800876a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800876c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fb8c 	bl	8008e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e058      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d124      	bne.n	8008808 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d107      	bne.n	80087d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800880c:	2b00      	cmp	r3, #0
 800880e:	f47f aeb6 	bne.w	800857e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800882e:	2302      	movs	r3, #2
  }
}
 8008830:	4618      	mov	r0, r3
 8008832:	3728      	adds	r7, #40	@ 0x28
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	00010004 	.word	0x00010004

0800883c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	461a      	mov	r2, r3
 800884a:	4603      	mov	r3, r0
 800884c:	817b      	strh	r3, [r7, #10]
 800884e:	460b      	mov	r3, r1
 8008850:	813b      	strh	r3, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2200      	movs	r2, #0
 800886e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f960 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00d      	beq.n	800889a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800888c:	d103      	bne.n	8008896 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008894:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e05f      	b.n	800895a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800889a:	897b      	ldrh	r3, [r7, #10]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80088a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	6a3a      	ldr	r2, [r7, #32]
 80088ae:	492d      	ldr	r1, [pc, #180]	@ (8008964 <I2C_RequestMemoryWrite+0x128>)
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f9bb 	bl	8008c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e04c      	b.n	800895a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c0:	2300      	movs	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d8:	6a39      	ldr	r1, [r7, #32]
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 fa46 	bl	8008d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00d      	beq.n	8008902 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d107      	bne.n	80088fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e02b      	b.n	800895a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d105      	bne.n	8008914 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008908:	893b      	ldrh	r3, [r7, #8]
 800890a:	b2da      	uxtb	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	611a      	str	r2, [r3, #16]
 8008912:	e021      	b.n	8008958 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008914:	893b      	ldrh	r3, [r7, #8]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b29b      	uxth	r3, r3
 800891a:	b2da      	uxtb	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008924:	6a39      	ldr	r1, [r7, #32]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fa20 	bl	8008d6c <I2C_WaitOnTXEFlagUntilTimeout>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	2b04      	cmp	r3, #4
 8008938:	d107      	bne.n	800894a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e005      	b.n	800895a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800894e:	893b      	ldrh	r3, [r7, #8]
 8008950:	b2da      	uxtb	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	00010002 	.word	0x00010002

08008968 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af02      	add	r7, sp, #8
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	4608      	mov	r0, r1
 8008972:	4611      	mov	r1, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4603      	mov	r3, r0
 8008978:	817b      	strh	r3, [r7, #10]
 800897a:	460b      	mov	r3, r1
 800897c:	813b      	strh	r3, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008990:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f8c2 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00d      	beq.n	80089d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c8:	d103      	bne.n	80089d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e0aa      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089d6:	897b      	ldrh	r3, [r7, #10]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80089e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	4952      	ldr	r1, [pc, #328]	@ (8008b34 <I2C_RequestMemoryRead+0x1cc>)
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 f91d 	bl	8008c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e097      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a14:	6a39      	ldr	r1, [r7, #32]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 f9a8 	bl	8008d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00d      	beq.n	8008a3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d107      	bne.n	8008a3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e076      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a3e:	88fb      	ldrh	r3, [r7, #6]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d105      	bne.n	8008a50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a44:	893b      	ldrh	r3, [r7, #8]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	611a      	str	r2, [r3, #16]
 8008a4e:	e021      	b.n	8008a94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a50:	893b      	ldrh	r3, [r7, #8]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a60:	6a39      	ldr	r1, [r7, #32]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f982 	bl	8008d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00d      	beq.n	8008a8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d107      	bne.n	8008a86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e050      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a96:	6a39      	ldr	r1, [r7, #32]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f967 	bl	8008d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00d      	beq.n	8008ac0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d107      	bne.n	8008abc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e035      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ace:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f82b 	bl	8008b38 <I2C_WaitOnFlagUntilTimeout>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00d      	beq.n	8008b04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008af6:	d103      	bne.n	8008b00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008afe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e013      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b04:	897b      	ldrh	r3, [r7, #10]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f043 0301 	orr.w	r3, r3, #1
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	6a3a      	ldr	r2, [r7, #32]
 8008b18:	4906      	ldr	r1, [pc, #24]	@ (8008b34 <I2C_RequestMemoryRead+0x1cc>)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f886 	bl	8008c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	00010002 	.word	0x00010002

08008b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b48:	e048      	b.n	8008bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d044      	beq.n	8008bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b52:	f7fd fc63 	bl	800641c <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d302      	bcc.n	8008b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d139      	bne.n	8008bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	0c1b      	lsrs	r3, r3, #16
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d10d      	bne.n	8008b8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	43da      	mvns	r2, r3
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	e00c      	b.n	8008ba8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	43da      	mvns	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d116      	bne.n	8008bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	f043 0220 	orr.w	r2, r3, #32
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e023      	b.n	8008c24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	0c1b      	lsrs	r3, r3, #16
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d10d      	bne.n	8008c02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	43da      	mvns	r2, r3
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	e00c      	b.n	8008c1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	43da      	mvns	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	bf0c      	ite	eq
 8008c14:	2301      	moveq	r3, #1
 8008c16:	2300      	movne	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d093      	beq.n	8008b4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c3a:	e071      	b.n	8008d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c4a:	d123      	bne.n	8008c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c80:	f043 0204 	orr.w	r2, r3, #4
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e067      	b.n	8008d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9a:	d041      	beq.n	8008d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c9c:	f7fd fbbe 	bl	800641c <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d302      	bcc.n	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d136      	bne.n	8008d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d10c      	bne.n	8008cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	43da      	mvns	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	bf14      	ite	ne
 8008cce:	2301      	movne	r3, #1
 8008cd0:	2300      	moveq	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e00b      	b.n	8008cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	43da      	mvns	r2, r3
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bf14      	ite	ne
 8008ce8:	2301      	movne	r3, #1
 8008cea:	2300      	moveq	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d016      	beq.n	8008d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	f043 0220 	orr.w	r2, r3, #32
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e021      	b.n	8008d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	0c1b      	lsrs	r3, r3, #16
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10c      	bne.n	8008d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	43da      	mvns	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	4013      	ands	r3, r2
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bf14      	ite	ne
 8008d3c:	2301      	movne	r3, #1
 8008d3e:	2300      	moveq	r3, #0
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	e00b      	b.n	8008d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	43da      	mvns	r2, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	bf14      	ite	ne
 8008d56:	2301      	movne	r3, #1
 8008d58:	2300      	moveq	r3, #0
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f47f af6d 	bne.w	8008c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d78:	e034      	b.n	8008de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f8e3 	bl	8008f46 <I2C_IsAcknowledgeFailed>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e034      	b.n	8008df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d90:	d028      	beq.n	8008de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d92:	f7fd fb43 	bl	800641c <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d302      	bcc.n	8008da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11d      	bne.n	8008de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008db2:	2b80      	cmp	r3, #128	@ 0x80
 8008db4:	d016      	beq.n	8008de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd0:	f043 0220 	orr.w	r2, r3, #32
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e007      	b.n	8008df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dee:	2b80      	cmp	r3, #128	@ 0x80
 8008df0:	d1c3      	bne.n	8008d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e08:	e034      	b.n	8008e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f89b 	bl	8008f46 <I2C_IsAcknowledgeFailed>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e034      	b.n	8008e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e20:	d028      	beq.n	8008e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e22:	f7fd fafb 	bl	800641c <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d302      	bcc.n	8008e38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11d      	bne.n	8008e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d016      	beq.n	8008e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e60:	f043 0220 	orr.w	r2, r3, #32
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e007      	b.n	8008e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d1c3      	bne.n	8008e0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e98:	e049      	b.n	8008f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b10      	cmp	r3, #16
 8008ea6:	d119      	bne.n	8008edc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0210 	mvn.w	r2, #16
 8008eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e030      	b.n	8008f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008edc:	f7fd fa9e 	bl	800641c <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d302      	bcc.n	8008ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11d      	bne.n	8008f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b40      	cmp	r3, #64	@ 0x40
 8008efe:	d016      	beq.n	8008f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1a:	f043 0220 	orr.w	r2, r3, #32
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e007      	b.n	8008f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f38:	2b40      	cmp	r3, #64	@ 0x40
 8008f3a:	d1ae      	bne.n	8008e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5c:	d11b      	bne.n	8008f96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	f043 0204 	orr.w	r2, r3, #4
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0cc      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb8:	4b68      	ldr	r3, [pc, #416]	@ (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d90c      	bls.n	8008fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc6:	4b65      	ldr	r3, [pc, #404]	@ (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	b2d2      	uxtb	r2, r2
 8008fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fce:	4b63      	ldr	r3, [pc, #396]	@ (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e0b8      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d020      	beq.n	800902e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff8:	4b59      	ldr	r3, [pc, #356]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	4a58      	ldr	r2, [pc, #352]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009010:	4b53      	ldr	r3, [pc, #332]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4a52      	ldr	r2, [pc, #328]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800901a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800901c:	4b50      	ldr	r3, [pc, #320]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	494d      	ldr	r1, [pc, #308]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 800902a:	4313      	orrs	r3, r2
 800902c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d044      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d107      	bne.n	8009052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009042:	4b47      	ldr	r3, [pc, #284]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d119      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e07f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d003      	beq.n	8009062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800905e:	2b03      	cmp	r3, #3
 8009060:	d107      	bne.n	8009072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009062:	4b3f      	ldr	r3, [pc, #252]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e06f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009072:	4b3b      	ldr	r3, [pc, #236]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e067      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009082:	4b37      	ldr	r3, [pc, #220]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 0203 	bic.w	r2, r3, #3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4934      	ldr	r1, [pc, #208]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009090:	4313      	orrs	r3, r2
 8009092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009094:	f7fd f9c2 	bl	800641c <HAL_GetTick>
 8009098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909a:	e00a      	b.n	80090b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800909c:	f7fd f9be 	bl	800641c <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e04f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b2:	4b2b      	ldr	r3, [pc, #172]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 020c 	and.w	r2, r3, #12
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d1eb      	bne.n	800909c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090c4:	4b25      	ldr	r3, [pc, #148]	@ (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d20c      	bcs.n	80090ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b22      	ldr	r3, [pc, #136]	@ (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090da:	4b20      	ldr	r3, [pc, #128]	@ (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d001      	beq.n	80090ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e032      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090f8:	4b19      	ldr	r3, [pc, #100]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	4916      	ldr	r1, [pc, #88]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009106:	4313      	orrs	r3, r2
 8009108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	490e      	ldr	r1, [pc, #56]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	4313      	orrs	r3, r2
 8009128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800912a:	f000 f855 	bl	80091d8 <HAL_RCC_GetSysClockFreq>
 800912e:	4602      	mov	r2, r0
 8009130:	4b0b      	ldr	r3, [pc, #44]	@ (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	490a      	ldr	r1, [pc, #40]	@ (8009164 <HAL_RCC_ClockConfig+0x1c0>)
 800913c:	5ccb      	ldrb	r3, [r1, r3]
 800913e:	fa22 f303 	lsr.w	r3, r2, r3
 8009142:	4a09      	ldr	r2, [pc, #36]	@ (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009146:	4b09      	ldr	r3, [pc, #36]	@ (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f7fd f922 	bl	8006394 <HAL_InitTick>

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	40023c00 	.word	0x40023c00
 8009160:	40023800 	.word	0x40023800
 8009164:	0801235c 	.word	0x0801235c
 8009168:	2000002c 	.word	0x2000002c
 800916c:	20000030 	.word	0x20000030

08009170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009174:	4b03      	ldr	r3, [pc, #12]	@ (8009184 <HAL_RCC_GetHCLKFreq+0x14>)
 8009176:	681b      	ldr	r3, [r3, #0]
}
 8009178:	4618      	mov	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	2000002c 	.word	0x2000002c

08009188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800918c:	f7ff fff0 	bl	8009170 <HAL_RCC_GetHCLKFreq>
 8009190:	4602      	mov	r2, r0
 8009192:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	0a9b      	lsrs	r3, r3, #10
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	4903      	ldr	r1, [pc, #12]	@ (80091ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800919e:	5ccb      	ldrb	r3, [r1, r3]
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40023800 	.word	0x40023800
 80091ac:	0801236c 	.word	0x0801236c

080091b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091b4:	f7ff ffdc 	bl	8009170 <HAL_RCC_GetHCLKFreq>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	0b5b      	lsrs	r3, r3, #13
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	4903      	ldr	r1, [pc, #12]	@ (80091d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091c6:	5ccb      	ldrb	r3, [r1, r3]
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40023800 	.word	0x40023800
 80091d4:	0801236c 	.word	0x0801236c

080091d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091dc:	b0ae      	sub	sp, #184	@ 0xb8
 80091de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091fe:	4bcb      	ldr	r3, [pc, #812]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 030c 	and.w	r3, r3, #12
 8009206:	2b0c      	cmp	r3, #12
 8009208:	f200 8206 	bhi.w	8009618 <HAL_RCC_GetSysClockFreq+0x440>
 800920c:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <HAL_RCC_GetSysClockFreq+0x3c>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009249 	.word	0x08009249
 8009218:	08009619 	.word	0x08009619
 800921c:	08009619 	.word	0x08009619
 8009220:	08009619 	.word	0x08009619
 8009224:	08009251 	.word	0x08009251
 8009228:	08009619 	.word	0x08009619
 800922c:	08009619 	.word	0x08009619
 8009230:	08009619 	.word	0x08009619
 8009234:	08009259 	.word	0x08009259
 8009238:	08009619 	.word	0x08009619
 800923c:	08009619 	.word	0x08009619
 8009240:	08009619 	.word	0x08009619
 8009244:	08009449 	.word	0x08009449
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009248:	4bb9      	ldr	r3, [pc, #740]	@ (8009530 <HAL_RCC_GetSysClockFreq+0x358>)
 800924a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800924e:	e1e7      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009250:	4bb8      	ldr	r3, [pc, #736]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009256:	e1e3      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009258:	4bb4      	ldr	r3, [pc, #720]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009264:	4bb1      	ldr	r3, [pc, #708]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d071      	beq.n	8009354 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009270:	4bae      	ldr	r3, [pc, #696]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	099b      	lsrs	r3, r3, #6
 8009276:	2200      	movs	r2, #0
 8009278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800927c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800928c:	2300      	movs	r3, #0
 800928e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	f04f 0000 	mov.w	r0, #0
 800929e:	f04f 0100 	mov.w	r1, #0
 80092a2:	0159      	lsls	r1, r3, #5
 80092a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092a8:	0150      	lsls	r0, r2, #5
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4621      	mov	r1, r4
 80092b0:	1a51      	subs	r1, r2, r1
 80092b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80092b4:	4629      	mov	r1, r5
 80092b6:	eb63 0301 	sbc.w	r3, r3, r1
 80092ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80092c8:	4649      	mov	r1, r9
 80092ca:	018b      	lsls	r3, r1, #6
 80092cc:	4641      	mov	r1, r8
 80092ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092d2:	4641      	mov	r1, r8
 80092d4:	018a      	lsls	r2, r1, #6
 80092d6:	4641      	mov	r1, r8
 80092d8:	1a51      	subs	r1, r2, r1
 80092da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80092dc:	4649      	mov	r1, r9
 80092de:	eb63 0301 	sbc.w	r3, r3, r1
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80092f0:	4649      	mov	r1, r9
 80092f2:	00cb      	lsls	r3, r1, #3
 80092f4:	4641      	mov	r1, r8
 80092f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092fa:	4641      	mov	r1, r8
 80092fc:	00ca      	lsls	r2, r1, #3
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	4603      	mov	r3, r0
 8009304:	4622      	mov	r2, r4
 8009306:	189b      	adds	r3, r3, r2
 8009308:	633b      	str	r3, [r7, #48]	@ 0x30
 800930a:	462b      	mov	r3, r5
 800930c:	460a      	mov	r2, r1
 800930e:	eb42 0303 	adc.w	r3, r2, r3
 8009312:	637b      	str	r3, [r7, #52]	@ 0x34
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009320:	4629      	mov	r1, r5
 8009322:	024b      	lsls	r3, r1, #9
 8009324:	4621      	mov	r1, r4
 8009326:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800932a:	4621      	mov	r1, r4
 800932c:	024a      	lsls	r2, r1, #9
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009336:	2200      	movs	r2, #0
 8009338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800933c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009340:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009344:	f7f7 fe1e 	bl	8000f84 <__aeabi_uldivmod>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4613      	mov	r3, r2
 800934e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009352:	e067      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009354:	4b75      	ldr	r3, [pc, #468]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	099b      	lsrs	r3, r3, #6
 800935a:	2200      	movs	r2, #0
 800935c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009360:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800936e:	2300      	movs	r3, #0
 8009370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009372:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009376:	4622      	mov	r2, r4
 8009378:	462b      	mov	r3, r5
 800937a:	f04f 0000 	mov.w	r0, #0
 800937e:	f04f 0100 	mov.w	r1, #0
 8009382:	0159      	lsls	r1, r3, #5
 8009384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009388:	0150      	lsls	r0, r2, #5
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4621      	mov	r1, r4
 8009390:	1a51      	subs	r1, r2, r1
 8009392:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009394:	4629      	mov	r1, r5
 8009396:	eb63 0301 	sbc.w	r3, r3, r1
 800939a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80093a8:	4649      	mov	r1, r9
 80093aa:	018b      	lsls	r3, r1, #6
 80093ac:	4641      	mov	r1, r8
 80093ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093b2:	4641      	mov	r1, r8
 80093b4:	018a      	lsls	r2, r1, #6
 80093b6:	4641      	mov	r1, r8
 80093b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80093bc:	4649      	mov	r1, r9
 80093be:	eb63 0b01 	sbc.w	fp, r3, r1
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	f04f 0300 	mov.w	r3, #0
 80093ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093d6:	4692      	mov	sl, r2
 80093d8:	469b      	mov	fp, r3
 80093da:	4623      	mov	r3, r4
 80093dc:	eb1a 0303 	adds.w	r3, sl, r3
 80093e0:	623b      	str	r3, [r7, #32]
 80093e2:	462b      	mov	r3, r5
 80093e4:	eb4b 0303 	adc.w	r3, fp, r3
 80093e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80093f6:	4629      	mov	r1, r5
 80093f8:	028b      	lsls	r3, r1, #10
 80093fa:	4621      	mov	r1, r4
 80093fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009400:	4621      	mov	r1, r4
 8009402:	028a      	lsls	r2, r1, #10
 8009404:	4610      	mov	r0, r2
 8009406:	4619      	mov	r1, r3
 8009408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940c:	2200      	movs	r2, #0
 800940e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009410:	677a      	str	r2, [r7, #116]	@ 0x74
 8009412:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009416:	f7f7 fdb5 	bl	8000f84 <__aeabi_uldivmod>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4613      	mov	r3, r2
 8009420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009424:	4b41      	ldr	r3, [pc, #260]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	0c1b      	lsrs	r3, r3, #16
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	3301      	adds	r3, #1
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800943a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800943e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009446:	e0eb      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009448:	4b38      	ldr	r3, [pc, #224]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009454:	4b35      	ldr	r3, [pc, #212]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d06b      	beq.n	8009538 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009460:	4b32      	ldr	r3, [pc, #200]	@ (800952c <HAL_RCC_GetSysClockFreq+0x354>)
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	099b      	lsrs	r3, r3, #6
 8009466:	2200      	movs	r2, #0
 8009468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800946a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800946c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800946e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009472:	663b      	str	r3, [r7, #96]	@ 0x60
 8009474:	2300      	movs	r3, #0
 8009476:	667b      	str	r3, [r7, #100]	@ 0x64
 8009478:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800947c:	4622      	mov	r2, r4
 800947e:	462b      	mov	r3, r5
 8009480:	f04f 0000 	mov.w	r0, #0
 8009484:	f04f 0100 	mov.w	r1, #0
 8009488:	0159      	lsls	r1, r3, #5
 800948a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800948e:	0150      	lsls	r0, r2, #5
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4621      	mov	r1, r4
 8009496:	1a51      	subs	r1, r2, r1
 8009498:	61b9      	str	r1, [r7, #24]
 800949a:	4629      	mov	r1, r5
 800949c:	eb63 0301 	sbc.w	r3, r3, r1
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	f04f 0300 	mov.w	r3, #0
 80094aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80094ae:	4659      	mov	r1, fp
 80094b0:	018b      	lsls	r3, r1, #6
 80094b2:	4651      	mov	r1, sl
 80094b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80094b8:	4651      	mov	r1, sl
 80094ba:	018a      	lsls	r2, r1, #6
 80094bc:	4651      	mov	r1, sl
 80094be:	ebb2 0801 	subs.w	r8, r2, r1
 80094c2:	4659      	mov	r1, fp
 80094c4:	eb63 0901 	sbc.w	r9, r3, r1
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094dc:	4690      	mov	r8, r2
 80094de:	4699      	mov	r9, r3
 80094e0:	4623      	mov	r3, r4
 80094e2:	eb18 0303 	adds.w	r3, r8, r3
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	462b      	mov	r3, r5
 80094ea:	eb49 0303 	adc.w	r3, r9, r3
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80094fc:	4629      	mov	r1, r5
 80094fe:	024b      	lsls	r3, r1, #9
 8009500:	4621      	mov	r1, r4
 8009502:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009506:	4621      	mov	r1, r4
 8009508:	024a      	lsls	r2, r1, #9
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009512:	2200      	movs	r2, #0
 8009514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009516:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009518:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800951c:	f7f7 fd32 	bl	8000f84 <__aeabi_uldivmod>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4613      	mov	r3, r2
 8009526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800952a:	e065      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x420>
 800952c:	40023800 	.word	0x40023800
 8009530:	00f42400 	.word	0x00f42400
 8009534:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009538:	4b3d      	ldr	r3, [pc, #244]	@ (8009630 <HAL_RCC_GetSysClockFreq+0x458>)
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	099b      	lsrs	r3, r3, #6
 800953e:	2200      	movs	r2, #0
 8009540:	4618      	mov	r0, r3
 8009542:	4611      	mov	r1, r2
 8009544:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009548:	653b      	str	r3, [r7, #80]	@ 0x50
 800954a:	2300      	movs	r3, #0
 800954c:	657b      	str	r3, [r7, #84]	@ 0x54
 800954e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009552:	4642      	mov	r2, r8
 8009554:	464b      	mov	r3, r9
 8009556:	f04f 0000 	mov.w	r0, #0
 800955a:	f04f 0100 	mov.w	r1, #0
 800955e:	0159      	lsls	r1, r3, #5
 8009560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009564:	0150      	lsls	r0, r2, #5
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	4641      	mov	r1, r8
 800956c:	1a51      	subs	r1, r2, r1
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	4649      	mov	r1, r9
 8009572:	eb63 0301 	sbc.w	r3, r3, r1
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009584:	4659      	mov	r1, fp
 8009586:	018b      	lsls	r3, r1, #6
 8009588:	4651      	mov	r1, sl
 800958a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800958e:	4651      	mov	r1, sl
 8009590:	018a      	lsls	r2, r1, #6
 8009592:	4651      	mov	r1, sl
 8009594:	1a54      	subs	r4, r2, r1
 8009596:	4659      	mov	r1, fp
 8009598:	eb63 0501 	sbc.w	r5, r3, r1
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	00eb      	lsls	r3, r5, #3
 80095a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095aa:	00e2      	lsls	r2, r4, #3
 80095ac:	4614      	mov	r4, r2
 80095ae:	461d      	mov	r5, r3
 80095b0:	4643      	mov	r3, r8
 80095b2:	18e3      	adds	r3, r4, r3
 80095b4:	603b      	str	r3, [r7, #0]
 80095b6:	464b      	mov	r3, r9
 80095b8:	eb45 0303 	adc.w	r3, r5, r3
 80095bc:	607b      	str	r3, [r7, #4]
 80095be:	f04f 0200 	mov.w	r2, #0
 80095c2:	f04f 0300 	mov.w	r3, #0
 80095c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80095ca:	4629      	mov	r1, r5
 80095cc:	028b      	lsls	r3, r1, #10
 80095ce:	4621      	mov	r1, r4
 80095d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095d4:	4621      	mov	r1, r4
 80095d6:	028a      	lsls	r2, r1, #10
 80095d8:	4610      	mov	r0, r2
 80095da:	4619      	mov	r1, r3
 80095dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e0:	2200      	movs	r2, #0
 80095e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80095e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095ea:	f7f7 fccb 	bl	8000f84 <__aeabi_uldivmod>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4613      	mov	r3, r2
 80095f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80095f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009630 <HAL_RCC_GetSysClockFreq+0x458>)
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	0f1b      	lsrs	r3, r3, #28
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800960a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800960e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009616:	e003      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009618:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <HAL_RCC_GetSysClockFreq+0x45c>)
 800961a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800961e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009624:	4618      	mov	r0, r3
 8009626:	37b8      	adds	r7, #184	@ 0xb8
 8009628:	46bd      	mov	sp, r7
 800962a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800962e:	bf00      	nop
 8009630:	40023800 	.word	0x40023800
 8009634:	00f42400 	.word	0x00f42400

08009638 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e28d      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8083 	beq.w	800975e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009658:	4b94      	ldr	r3, [pc, #592]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 030c 	and.w	r3, r3, #12
 8009660:	2b04      	cmp	r3, #4
 8009662:	d019      	beq.n	8009698 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009664:	4b91      	ldr	r3, [pc, #580]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f003 030c 	and.w	r3, r3, #12
        || \
 800966c:	2b08      	cmp	r3, #8
 800966e:	d106      	bne.n	800967e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009670:	4b8e      	ldr	r3, [pc, #568]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800967c:	d00c      	beq.n	8009698 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800967e:	4b8b      	ldr	r3, [pc, #556]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009686:	2b0c      	cmp	r3, #12
 8009688:	d112      	bne.n	80096b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800968a:	4b88      	ldr	r3, [pc, #544]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009696:	d10b      	bne.n	80096b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009698:	4b84      	ldr	r3, [pc, #528]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d05b      	beq.n	800975c <HAL_RCC_OscConfig+0x124>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d157      	bne.n	800975c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e25a      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b8:	d106      	bne.n	80096c8 <HAL_RCC_OscConfig+0x90>
 80096ba:	4b7c      	ldr	r3, [pc, #496]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a7b      	ldr	r2, [pc, #492]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	e01d      	b.n	8009704 <HAL_RCC_OscConfig+0xcc>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096d0:	d10c      	bne.n	80096ec <HAL_RCC_OscConfig+0xb4>
 80096d2:	4b76      	ldr	r3, [pc, #472]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a75      	ldr	r2, [pc, #468]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	4b73      	ldr	r3, [pc, #460]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a72      	ldr	r2, [pc, #456]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e00b      	b.n	8009704 <HAL_RCC_OscConfig+0xcc>
 80096ec:	4b6f      	ldr	r3, [pc, #444]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a6e      	ldr	r2, [pc, #440]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	4b6c      	ldr	r3, [pc, #432]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a6b      	ldr	r2, [pc, #428]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80096fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d013      	beq.n	8009734 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970c:	f7fc fe86 	bl	800641c <HAL_GetTick>
 8009710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009714:	f7fc fe82 	bl	800641c <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b64      	cmp	r3, #100	@ 0x64
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e21f      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009726:	4b61      	ldr	r3, [pc, #388]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0f0      	beq.n	8009714 <HAL_RCC_OscConfig+0xdc>
 8009732:	e014      	b.n	800975e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009734:	f7fc fe72 	bl	800641c <HAL_GetTick>
 8009738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800973a:	e008      	b.n	800974e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800973c:	f7fc fe6e 	bl	800641c <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	2b64      	cmp	r3, #100	@ 0x64
 8009748:	d901      	bls.n	800974e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e20b      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800974e:	4b57      	ldr	r3, [pc, #348]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1f0      	bne.n	800973c <HAL_RCC_OscConfig+0x104>
 800975a:	e000      	b.n	800975e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b00      	cmp	r3, #0
 8009768:	d06f      	beq.n	800984a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800976a:	4b50      	ldr	r3, [pc, #320]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 030c 	and.w	r3, r3, #12
 8009772:	2b00      	cmp	r3, #0
 8009774:	d017      	beq.n	80097a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009776:	4b4d      	ldr	r3, [pc, #308]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 030c 	and.w	r3, r3, #12
        || \
 800977e:	2b08      	cmp	r3, #8
 8009780:	d105      	bne.n	800978e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009782:	4b4a      	ldr	r3, [pc, #296]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800978e:	4b47      	ldr	r3, [pc, #284]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009796:	2b0c      	cmp	r3, #12
 8009798:	d11c      	bne.n	80097d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800979a:	4b44      	ldr	r3, [pc, #272]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d116      	bne.n	80097d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097a6:	4b41      	ldr	r3, [pc, #260]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <HAL_RCC_OscConfig+0x186>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d001      	beq.n	80097be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e1d3      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097be:	4b3b      	ldr	r3, [pc, #236]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	4937      	ldr	r1, [pc, #220]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097d2:	e03a      	b.n	800984a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d020      	beq.n	800981e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097dc:	4b34      	ldr	r3, [pc, #208]	@ (80098b0 <HAL_RCC_OscConfig+0x278>)
 80097de:	2201      	movs	r2, #1
 80097e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e2:	f7fc fe1b 	bl	800641c <HAL_GetTick>
 80097e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097ea:	f7fc fe17 	bl	800641c <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e1b4      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097fc:	4b2b      	ldr	r3, [pc, #172]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0f0      	beq.n	80097ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009808:	4b28      	ldr	r3, [pc, #160]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	4925      	ldr	r1, [pc, #148]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009818:	4313      	orrs	r3, r2
 800981a:	600b      	str	r3, [r1, #0]
 800981c:	e015      	b.n	800984a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800981e:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <HAL_RCC_OscConfig+0x278>)
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009824:	f7fc fdfa 	bl	800641c <HAL_GetTick>
 8009828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800982a:	e008      	b.n	800983e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800982c:	f7fc fdf6 	bl	800641c <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e193      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800983e:	4b1b      	ldr	r3, [pc, #108]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1f0      	bne.n	800982c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d036      	beq.n	80098c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d016      	beq.n	800988c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800985e:	4b15      	ldr	r3, [pc, #84]	@ (80098b4 <HAL_RCC_OscConfig+0x27c>)
 8009860:	2201      	movs	r2, #1
 8009862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009864:	f7fc fdda 	bl	800641c <HAL_GetTick>
 8009868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800986a:	e008      	b.n	800987e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800986c:	f7fc fdd6 	bl	800641c <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b02      	cmp	r3, #2
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e173      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800987e:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <HAL_RCC_OscConfig+0x274>)
 8009880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0f0      	beq.n	800986c <HAL_RCC_OscConfig+0x234>
 800988a:	e01b      	b.n	80098c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800988c:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <HAL_RCC_OscConfig+0x27c>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009892:	f7fc fdc3 	bl	800641c <HAL_GetTick>
 8009896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009898:	e00e      	b.n	80098b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800989a:	f7fc fdbf 	bl	800641c <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d907      	bls.n	80098b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e15c      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
 80098ac:	40023800 	.word	0x40023800
 80098b0:	42470000 	.word	0x42470000
 80098b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098b8:	4b8a      	ldr	r3, [pc, #552]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80098ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1ea      	bne.n	800989a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8097 	beq.w	8009a00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098d6:	4b83      	ldr	r3, [pc, #524]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80098d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10f      	bne.n	8009902 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098e2:	2300      	movs	r3, #0
 80098e4:	60bb      	str	r3, [r7, #8]
 80098e6:	4b7f      	ldr	r3, [pc, #508]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80098e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ea:	4a7e      	ldr	r2, [pc, #504]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80098ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80098f2:	4b7c      	ldr	r3, [pc, #496]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80098f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098fa:	60bb      	str	r3, [r7, #8]
 80098fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098fe:	2301      	movs	r3, #1
 8009900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009902:	4b79      	ldr	r3, [pc, #484]	@ (8009ae8 <HAL_RCC_OscConfig+0x4b0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800990a:	2b00      	cmp	r3, #0
 800990c:	d118      	bne.n	8009940 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800990e:	4b76      	ldr	r3, [pc, #472]	@ (8009ae8 <HAL_RCC_OscConfig+0x4b0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a75      	ldr	r2, [pc, #468]	@ (8009ae8 <HAL_RCC_OscConfig+0x4b0>)
 8009914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800991a:	f7fc fd7f 	bl	800641c <HAL_GetTick>
 800991e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009920:	e008      	b.n	8009934 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009922:	f7fc fd7b 	bl	800641c <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e118      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009934:	4b6c      	ldr	r3, [pc, #432]	@ (8009ae8 <HAL_RCC_OscConfig+0x4b0>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0f0      	beq.n	8009922 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d106      	bne.n	8009956 <HAL_RCC_OscConfig+0x31e>
 8009948:	4b66      	ldr	r3, [pc, #408]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 800994a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800994c:	4a65      	ldr	r2, [pc, #404]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	6713      	str	r3, [r2, #112]	@ 0x70
 8009954:	e01c      	b.n	8009990 <HAL_RCC_OscConfig+0x358>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b05      	cmp	r3, #5
 800995c:	d10c      	bne.n	8009978 <HAL_RCC_OscConfig+0x340>
 800995e:	4b61      	ldr	r3, [pc, #388]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009962:	4a60      	ldr	r2, [pc, #384]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009964:	f043 0304 	orr.w	r3, r3, #4
 8009968:	6713      	str	r3, [r2, #112]	@ 0x70
 800996a:	4b5e      	ldr	r3, [pc, #376]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 800996c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800996e:	4a5d      	ldr	r2, [pc, #372]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009970:	f043 0301 	orr.w	r3, r3, #1
 8009974:	6713      	str	r3, [r2, #112]	@ 0x70
 8009976:	e00b      	b.n	8009990 <HAL_RCC_OscConfig+0x358>
 8009978:	4b5a      	ldr	r3, [pc, #360]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 800997a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800997c:	4a59      	ldr	r2, [pc, #356]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 800997e:	f023 0301 	bic.w	r3, r3, #1
 8009982:	6713      	str	r3, [r2, #112]	@ 0x70
 8009984:	4b57      	ldr	r3, [pc, #348]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009988:	4a56      	ldr	r2, [pc, #344]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 800998a:	f023 0304 	bic.w	r3, r3, #4
 800998e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d015      	beq.n	80099c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009998:	f7fc fd40 	bl	800641c <HAL_GetTick>
 800999c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800999e:	e00a      	b.n	80099b6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099a0:	f7fc fd3c 	bl	800641c <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d901      	bls.n	80099b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e0d7      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099b6:	4b4b      	ldr	r3, [pc, #300]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80099b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0ee      	beq.n	80099a0 <HAL_RCC_OscConfig+0x368>
 80099c2:	e014      	b.n	80099ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c4:	f7fc fd2a 	bl	800641c <HAL_GetTick>
 80099c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099ca:	e00a      	b.n	80099e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099cc:	f7fc fd26 	bl	800641c <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099da:	4293      	cmp	r3, r2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e0c1      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099e2:	4b40      	ldr	r3, [pc, #256]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80099e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1ee      	bne.n	80099cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d105      	bne.n	8009a00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099f4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80099f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f8:	4a3a      	ldr	r2, [pc, #232]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 80099fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 80ad 	beq.w	8009b64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a0a:	4b36      	ldr	r3, [pc, #216]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 030c 	and.w	r3, r3, #12
 8009a12:	2b08      	cmp	r3, #8
 8009a14:	d060      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d145      	bne.n	8009aaa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a1e:	4b33      	ldr	r3, [pc, #204]	@ (8009aec <HAL_RCC_OscConfig+0x4b4>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a24:	f7fc fcfa 	bl	800641c <HAL_GetTick>
 8009a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a2c:	f7fc fcf6 	bl	800641c <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e093      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1f0      	bne.n	8009a2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	69da      	ldr	r2, [r3, #28]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	431a      	orrs	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	019b      	lsls	r3, r3, #6
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a60:	085b      	lsrs	r3, r3, #1
 8009a62:	3b01      	subs	r3, #1
 8009a64:	041b      	lsls	r3, r3, #16
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	061b      	lsls	r3, r3, #24
 8009a6e:	431a      	orrs	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a74:	071b      	lsls	r3, r3, #28
 8009a76:	491b      	ldr	r1, [pc, #108]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009aec <HAL_RCC_OscConfig+0x4b4>)
 8009a7e:	2201      	movs	r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a82:	f7fc fccb 	bl	800641c <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a8a:	f7fc fcc7 	bl	800641c <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e064      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0f0      	beq.n	8009a8a <HAL_RCC_OscConfig+0x452>
 8009aa8:	e05c      	b.n	8009b64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aaa:	4b10      	ldr	r3, [pc, #64]	@ (8009aec <HAL_RCC_OscConfig+0x4b4>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab0:	f7fc fcb4 	bl	800641c <HAL_GetTick>
 8009ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ab6:	e008      	b.n	8009aca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ab8:	f7fc fcb0 	bl	800641c <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e04d      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aca:	4b06      	ldr	r3, [pc, #24]	@ (8009ae4 <HAL_RCC_OscConfig+0x4ac>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1f0      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x480>
 8009ad6:	e045      	b.n	8009b64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d107      	bne.n	8009af0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e040      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	40007000 	.word	0x40007000
 8009aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009af0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b70 <HAL_RCC_OscConfig+0x538>)
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d030      	beq.n	8009b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d129      	bne.n	8009b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d122      	bne.n	8009b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009b20:	4013      	ands	r3, r2
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d119      	bne.n	8009b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d10f      	bne.n	8009b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d107      	bne.n	8009b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d001      	beq.n	8009b64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e000      	b.n	8009b66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	40023800 	.word	0x40023800

08009b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e041      	b.n	8009c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d106      	bne.n	8009ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7fc f954 	bl	8005e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f000 fa7e 	bl	800a0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d001      	beq.n	8009c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e04e      	b.n	8009cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 0201 	orr.w	r2, r2, #1
 8009c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a23      	ldr	r2, [pc, #140]	@ (8009cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d022      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c56:	d01d      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d018      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a1e      	ldr	r2, [pc, #120]	@ (8009ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d013      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a1c      	ldr	r2, [pc, #112]	@ (8009ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d00e      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d009      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a19      	ldr	r2, [pc, #100]	@ (8009cec <HAL_TIM_Base_Start_IT+0xd8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d004      	beq.n	8009c94 <HAL_TIM_Base_Start_IT+0x80>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a18      	ldr	r2, [pc, #96]	@ (8009cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d111      	bne.n	8009cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b06      	cmp	r3, #6
 8009ca4:	d010      	beq.n	8009cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f042 0201 	orr.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb6:	e007      	b.n	8009cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0201 	orr.w	r2, r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40010400 	.word	0x40010400
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40001800 	.word	0x40001800

08009cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d020      	beq.n	8009d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01b      	beq.n	8009d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0202 	mvn.w	r2, #2
 8009d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f999 	bl	800a076 <HAL_TIM_IC_CaptureCallback>
 8009d44:	e005      	b.n	8009d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f98b 	bl	800a062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f99c 	bl	800a08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d020      	beq.n	8009da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01b      	beq.n	8009da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0204 	mvn.w	r2, #4
 8009d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f973 	bl	800a076 <HAL_TIM_IC_CaptureCallback>
 8009d90:	e005      	b.n	8009d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f965 	bl	800a062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f976 	bl	800a08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 0308 	and.w	r3, r3, #8
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d020      	beq.n	8009df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01b      	beq.n	8009df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0208 	mvn.w	r2, #8
 8009dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2204      	movs	r2, #4
 8009dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f94d 	bl	800a076 <HAL_TIM_IC_CaptureCallback>
 8009ddc:	e005      	b.n	8009dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f93f 	bl	800a062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f950 	bl	800a08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d020      	beq.n	8009e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f003 0310 	and.w	r3, r3, #16
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01b      	beq.n	8009e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f06f 0210 	mvn.w	r2, #16
 8009e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2208      	movs	r2, #8
 8009e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f927 	bl	800a076 <HAL_TIM_IC_CaptureCallback>
 8009e28:	e005      	b.n	8009e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f919 	bl	800a062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f92a 	bl	800a08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00c      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d007      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0201 	mvn.w	r2, #1
 8009e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fa f876 	bl	8003f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fade 	bl	800a440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d007      	beq.n	8009ea8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f8fb 	bl	800a09e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f003 0320 	and.w	r3, r3, #32
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00c      	beq.n	8009ecc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f003 0320 	and.w	r3, r3, #32
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0220 	mvn.w	r2, #32
 8009ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fab0 	bl	800a42c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e0b4      	b.n	800a05a <HAL_TIM_ConfigClockSource+0x186>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f28:	d03e      	beq.n	8009fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8009f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f2e:	f200 8087 	bhi.w	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f36:	f000 8086 	beq.w	800a046 <HAL_TIM_ConfigClockSource+0x172>
 8009f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f3e:	d87f      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f40:	2b70      	cmp	r3, #112	@ 0x70
 8009f42:	d01a      	beq.n	8009f7a <HAL_TIM_ConfigClockSource+0xa6>
 8009f44:	2b70      	cmp	r3, #112	@ 0x70
 8009f46:	d87b      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f48:	2b60      	cmp	r3, #96	@ 0x60
 8009f4a:	d050      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0x11a>
 8009f4c:	2b60      	cmp	r3, #96	@ 0x60
 8009f4e:	d877      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f50:	2b50      	cmp	r3, #80	@ 0x50
 8009f52:	d03c      	beq.n	8009fce <HAL_TIM_ConfigClockSource+0xfa>
 8009f54:	2b50      	cmp	r3, #80	@ 0x50
 8009f56:	d873      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f58:	2b40      	cmp	r3, #64	@ 0x40
 8009f5a:	d058      	beq.n	800a00e <HAL_TIM_ConfigClockSource+0x13a>
 8009f5c:	2b40      	cmp	r3, #64	@ 0x40
 8009f5e:	d86f      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f60:	2b30      	cmp	r3, #48	@ 0x30
 8009f62:	d064      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x15a>
 8009f64:	2b30      	cmp	r3, #48	@ 0x30
 8009f66:	d86b      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d060      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x15a>
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d867      	bhi.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d05c      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x15a>
 8009f74:	2b10      	cmp	r3, #16
 8009f76:	d05a      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x15a>
 8009f78:	e062      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f8a:	f000 f9b3 	bl	800a2f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	609a      	str	r2, [r3, #8]
      break;
 8009fa6:	e04f      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fb8:	f000 f99c 	bl	800a2f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689a      	ldr	r2, [r3, #8]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fca:	609a      	str	r2, [r3, #8]
      break;
 8009fcc:	e03c      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f000 f910 	bl	800a200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2150      	movs	r1, #80	@ 0x50
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f969 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 8009fec:	e02c      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f000 f92f 	bl	800a25e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2160      	movs	r1, #96	@ 0x60
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f959 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 800a00c:	e01c      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01a:	461a      	mov	r2, r3
 800a01c:	f000 f8f0 	bl	800a200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2140      	movs	r1, #64	@ 0x40
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f949 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 800a02c:	e00c      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f000 f940 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 800a03e:	e003      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
      break;
 800a044:	e000      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0a6:	bf00      	nop
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
	...

0800a0b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a43      	ldr	r2, [pc, #268]	@ (800a1d4 <TIM_Base_SetConfig+0x120>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d013      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0d2:	d00f      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a40      	ldr	r2, [pc, #256]	@ (800a1d8 <TIM_Base_SetConfig+0x124>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00b      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a3f      	ldr	r2, [pc, #252]	@ (800a1dc <TIM_Base_SetConfig+0x128>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d007      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a3e      	ldr	r2, [pc, #248]	@ (800a1e0 <TIM_Base_SetConfig+0x12c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a3d      	ldr	r2, [pc, #244]	@ (800a1e4 <TIM_Base_SetConfig+0x130>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d108      	bne.n	800a106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a32      	ldr	r2, [pc, #200]	@ (800a1d4 <TIM_Base_SetConfig+0x120>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d02b      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a114:	d027      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a2f      	ldr	r2, [pc, #188]	@ (800a1d8 <TIM_Base_SetConfig+0x124>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d023      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a2e      	ldr	r2, [pc, #184]	@ (800a1dc <TIM_Base_SetConfig+0x128>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d01f      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a2d      	ldr	r2, [pc, #180]	@ (800a1e0 <TIM_Base_SetConfig+0x12c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01b      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a2c      	ldr	r2, [pc, #176]	@ (800a1e4 <TIM_Base_SetConfig+0x130>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d017      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a2b      	ldr	r2, [pc, #172]	@ (800a1e8 <TIM_Base_SetConfig+0x134>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d013      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a2a      	ldr	r2, [pc, #168]	@ (800a1ec <TIM_Base_SetConfig+0x138>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00f      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a29      	ldr	r2, [pc, #164]	@ (800a1f0 <TIM_Base_SetConfig+0x13c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00b      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a28      	ldr	r2, [pc, #160]	@ (800a1f4 <TIM_Base_SetConfig+0x140>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d007      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a27      	ldr	r2, [pc, #156]	@ (800a1f8 <TIM_Base_SetConfig+0x144>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d003      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a26      	ldr	r2, [pc, #152]	@ (800a1fc <TIM_Base_SetConfig+0x148>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d108      	bne.n	800a178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a0e      	ldr	r2, [pc, #56]	@ (800a1d4 <TIM_Base_SetConfig+0x120>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d003      	beq.n	800a1a6 <TIM_Base_SetConfig+0xf2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a10      	ldr	r2, [pc, #64]	@ (800a1e4 <TIM_Base_SetConfig+0x130>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d103      	bne.n	800a1ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	691a      	ldr	r2, [r3, #16]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f043 0204 	orr.w	r2, r3, #4
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	601a      	str	r2, [r3, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800
 800a1f4:	40001800 	.word	0x40001800
 800a1f8:	40001c00 	.word	0x40001c00
 800a1fc:	40002000 	.word	0x40002000

0800a200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	f023 0201 	bic.w	r2, r3, #1
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a22a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f023 030a 	bic.w	r3, r3, #10
 800a23c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	621a      	str	r2, [r3, #32]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25e:	b480      	push	{r7}
 800a260:	b087      	sub	sp, #28
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	f023 0210 	bic.w	r2, r3, #16
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	031b      	lsls	r3, r3, #12
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	4313      	orrs	r3, r2
 800a292:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a29a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	621a      	str	r2, [r3, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f043 0307 	orr.w	r3, r3, #7
 800a2e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	609a      	str	r2, [r3, #8]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a30e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	021a      	lsls	r2, r3, #8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	431a      	orrs	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	609a      	str	r2, [r3, #8]
}
 800a328:	bf00      	nop
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a344:	2b01      	cmp	r3, #1
 800a346:	d101      	bne.n	800a34c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a348:	2302      	movs	r3, #2
 800a34a:	e05a      	b.n	800a402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a21      	ldr	r2, [pc, #132]	@ (800a410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d022      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a398:	d01d      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a1d      	ldr	r2, [pc, #116]	@ (800a414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d018      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d013      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1a      	ldr	r2, [pc, #104]	@ (800a41c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a18      	ldr	r2, [pc, #96]	@ (800a420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d009      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a17      	ldr	r2, [pc, #92]	@ (800a424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d004      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a15      	ldr	r2, [pc, #84]	@ (800a428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d10c      	bne.n	800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40010000 	.word	0x40010000
 800a414:	40000400 	.word	0x40000400
 800a418:	40000800 	.word	0x40000800
 800a41c:	40000c00 	.word	0x40000c00
 800a420:	40010400 	.word	0x40010400
 800a424:	40014000 	.word	0x40014000
 800a428:	40001800 	.word	0x40001800

0800a42c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e042      	b.n	800a4ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7fb fd0a 	bl	8005e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2224      	movs	r2, #36	@ 0x24
 800a484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 ffe5 	bl	800b468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695a      	ldr	r2, [r3, #20]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a4cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	@ 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4613      	mov	r3, r2
 800a502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b20      	cmp	r3, #32
 800a512:	d175      	bne.n	800a600 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <HAL_UART_Transmit+0x2c>
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e06e      	b.n	800a602 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2221      	movs	r2, #33	@ 0x21
 800a52e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a532:	f7fb ff73 	bl	800641c <HAL_GetTick>
 800a536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	88fa      	ldrh	r2, [r7, #6]
 800a53c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	88fa      	ldrh	r2, [r7, #6]
 800a542:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a54c:	d108      	bne.n	800a560 <HAL_UART_Transmit+0x6c>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a556:	2300      	movs	r3, #0
 800a558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e003      	b.n	800a568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a564:	2300      	movs	r3, #0
 800a566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a568:	e02e      	b.n	800a5c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2200      	movs	r2, #0
 800a572:	2180      	movs	r1, #128	@ 0x80
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 fcb5 	bl	800aee4 <UART_WaitOnFlagUntilTimeout>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2220      	movs	r2, #32
 800a584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e03a      	b.n	800a602 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	61bb      	str	r3, [r7, #24]
 800a5a8:	e007      	b.n	800a5ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	781a      	ldrb	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1cb      	bne.n	800a56a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2140      	movs	r1, #64	@ 0x40
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f000 fc81 	bl	800aee4 <UART_WaitOnFlagUntilTimeout>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e006      	b.n	800a602 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e000      	b.n	800a602 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a600:	2302      	movs	r3, #2
  }
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	4613      	mov	r3, r2
 800a616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b20      	cmp	r3, #32
 800a622:	d112      	bne.n	800a64a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_UART_Receive_DMA+0x26>
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e00b      	b.n	800a64c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	461a      	mov	r2, r3
 800a63e:	68b9      	ldr	r1, [r7, #8]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fca9 	bl	800af98 <UART_Start_Receive_DMA>
 800a646:	4603      	mov	r3, r0
 800a648:	e000      	b.n	800a64c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a64a:	2302      	movs	r3, #2
  }
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b090      	sub	sp, #64	@ 0x40
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a66a:	2b80      	cmp	r3, #128	@ 0x80
 800a66c:	bf0c      	ite	eq
 800a66e:	2301      	moveq	r3, #1
 800a670:	2300      	movne	r3, #0
 800a672:	b2db      	uxtb	r3, r3
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b21      	cmp	r3, #33	@ 0x21
 800a680:	d128      	bne.n	800a6d4 <HAL_UART_DMAStop+0x80>
 800a682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d025      	beq.n	800a6d4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3314      	adds	r3, #20
 800a68e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	623b      	str	r3, [r7, #32]
   return(result);
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3314      	adds	r3, #20
 800a6a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e5      	bne.n	800a688 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fc fe61 	bl	8007390 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fd08 	bl	800b0e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6de:	2b40      	cmp	r3, #64	@ 0x40
 800a6e0:	bf0c      	ite	eq
 800a6e2:	2301      	moveq	r3, #1
 800a6e4:	2300      	movne	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b22      	cmp	r3, #34	@ 0x22
 800a6f4:	d128      	bne.n	800a748 <HAL_UART_DMAStop+0xf4>
 800a6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d025      	beq.n	800a748 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3314      	adds	r3, #20
 800a702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	e853 3f00 	ldrex	r3, [r3]
 800a70a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a712:	637b      	str	r3, [r7, #52]	@ 0x34
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3314      	adds	r3, #20
 800a71a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a71c:	61fa      	str	r2, [r7, #28]
 800a71e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a720:	69b9      	ldr	r1, [r7, #24]
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	e841 2300 	strex	r3, r2, [r1]
 800a728:	617b      	str	r3, [r7, #20]
   return(result);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1e5      	bne.n	800a6fc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fc fe27 	bl	8007390 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fcf6 	bl	800b134 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3740      	adds	r7, #64	@ 0x40
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b0ba      	sub	sp, #232	@ 0xe8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a780:	2300      	movs	r3, #0
 800a782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10f      	bne.n	800a7ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <HAL_UART_IRQHandler+0x66>
 800a7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fd9a 	bl	800b2ec <UART_Receive_IT>
      return;
 800a7b8:	e273      	b.n	800aca2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 80de 	beq.w	800a980 <HAL_UART_IRQHandler+0x22c>
 800a7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d106      	bne.n	800a7de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80d1 	beq.w	800a980 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <HAL_UART_IRQHandler+0xae>
 800a7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d005      	beq.n	800a802 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7fa:	f043 0201 	orr.w	r2, r3, #1
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a806:	f003 0304 	and.w	r3, r3, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <HAL_UART_IRQHandler+0xd2>
 800a80e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81e:	f043 0202 	orr.w	r2, r3, #2
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00b      	beq.n	800a84a <HAL_UART_IRQHandler+0xf6>
 800a832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d005      	beq.n	800a84a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a842:	f043 0204 	orr.w	r2, r3, #4
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	2b00      	cmp	r3, #0
 800a854:	d011      	beq.n	800a87a <HAL_UART_IRQHandler+0x126>
 800a856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d105      	bne.n	800a86e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a872:	f043 0208 	orr.w	r2, r3, #8
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 820a 	beq.w	800ac98 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a888:	f003 0320 	and.w	r3, r3, #32
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d008      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x14e>
 800a890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fd25 	bl	800b2ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ac:	2b40      	cmp	r3, #64	@ 0x40
 800a8ae:	bf0c      	ite	eq
 800a8b0:	2301      	moveq	r3, #1
 800a8b2:	2300      	movne	r3, #0
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8be:	f003 0308 	and.w	r3, r3, #8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <HAL_UART_IRQHandler+0x17a>
 800a8c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d04f      	beq.n	800a96e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fc30 	bl	800b134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8de:	2b40      	cmp	r3, #64	@ 0x40
 800a8e0:	d141      	bne.n	800a966 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3314      	adds	r3, #20
 800a8e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a8f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3314      	adds	r3, #20
 800a90a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a90e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a91a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1d9      	bne.n	800a8e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a932:	2b00      	cmp	r3, #0
 800a934:	d013      	beq.n	800a95e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93a:	4a8a      	ldr	r2, [pc, #552]	@ (800ab64 <HAL_UART_IRQHandler+0x410>)
 800a93c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a942:	4618      	mov	r0, r3
 800a944:	f7fc fd94 	bl	8007470 <HAL_DMA_Abort_IT>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d016      	beq.n	800a97c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a95c:	e00e      	b.n	800a97c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f9ac 	bl	800acbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a964:	e00a      	b.n	800a97c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f9a8 	bl	800acbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a96c:	e006      	b.n	800a97c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f9a4 	bl	800acbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a97a:	e18d      	b.n	800ac98 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a97c:	bf00      	nop
    return;
 800a97e:	e18b      	b.n	800ac98 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a984:	2b01      	cmp	r3, #1
 800a986:	f040 8167 	bne.w	800ac58 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a98e:	f003 0310 	and.w	r3, r3, #16
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 8160 	beq.w	800ac58 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a99c:	f003 0310 	and.w	r3, r3, #16
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 8159 	beq.w	800ac58 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60bb      	str	r3, [r7, #8]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60bb      	str	r3, [r7, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	60bb      	str	r3, [r7, #8]
 800a9ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c6:	2b40      	cmp	r3, #64	@ 0x40
 800a9c8:	f040 80ce 	bne.w	800ab68 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 80a9 	beq.w	800ab34 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	f080 80a2 	bcs.w	800ab34 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa02:	f000 8088 	beq.w	800ab16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aa32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1d9      	bne.n	800aa06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3314      	adds	r3, #20
 800aa58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa64:	f023 0301 	bic.w	r3, r3, #1
 800aa68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	3314      	adds	r3, #20
 800aa72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e1      	bne.n	800aa52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3314      	adds	r3, #20
 800aa94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa98:	e853 3f00 	ldrex	r3, [r3]
 800aa9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3314      	adds	r3, #20
 800aaae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aab2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aab4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aab8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e3      	bne.n	800aa8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2220      	movs	r2, #32
 800aaca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	330c      	adds	r3, #12
 800aada:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aae6:	f023 0310 	bic.w	r3, r3, #16
 800aaea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aaf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aafa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aafe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab00:	e841 2300 	strex	r3, r2, [r1]
 800ab04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e3      	bne.n	800aad4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fc fc3d 	bl	8007390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2202      	movs	r2, #2
 800ab1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f8cf 	bl	800acd0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ab32:	e0b3      	b.n	800ac9c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	f040 80ad 	bne.w	800ac9c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab4c:	f040 80a6 	bne.w	800ac9c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f8b7 	bl	800acd0 <HAL_UARTEx_RxEventCallback>
      return;
 800ab62:	e09b      	b.n	800ac9c <HAL_UART_IRQHandler+0x548>
 800ab64:	0800b1fb 	.word	0x0800b1fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 808e 	beq.w	800aca0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800ab84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 8089 	beq.w	800aca0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	330c      	adds	r3, #12
 800ab94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab98:	e853 3f00 	ldrex	r3, [r3]
 800ab9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aba4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	330c      	adds	r3, #12
 800abae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800abb2:	647a      	str	r2, [r7, #68]	@ 0x44
 800abb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abba:	e841 2300 	strex	r3, r2, [r1]
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e3      	bne.n	800ab8e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3314      	adds	r3, #20
 800abcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	e853 3f00 	ldrex	r3, [r3]
 800abd4:	623b      	str	r3, [r7, #32]
   return(result);
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	f023 0301 	bic.w	r3, r3, #1
 800abdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3314      	adds	r3, #20
 800abe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800abea:	633a      	str	r2, [r7, #48]	@ 0x30
 800abec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e3      	bne.n	800abc6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	330c      	adds	r3, #12
 800ac12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0310 	bic.w	r3, r3, #16
 800ac22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	330c      	adds	r3, #12
 800ac2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ac30:	61fa      	str	r2, [r7, #28]
 800ac32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	69b9      	ldr	r1, [r7, #24]
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e3      	bne.n	800ac0c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2202      	movs	r2, #2
 800ac48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f83d 	bl	800acd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac56:	e023      	b.n	800aca0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d009      	beq.n	800ac78 <HAL_UART_IRQHandler+0x524>
 800ac64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fad3 	bl	800b21c <UART_Transmit_IT>
    return;
 800ac76:	e014      	b.n	800aca2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00e      	beq.n	800aca2 <HAL_UART_IRQHandler+0x54e>
 800ac84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fb13 	bl	800b2bc <UART_EndTransmit_IT>
    return;
 800ac96:	e004      	b.n	800aca2 <HAL_UART_IRQHandler+0x54e>
    return;
 800ac98:	bf00      	nop
 800ac9a:	e002      	b.n	800aca2 <HAL_UART_IRQHandler+0x54e>
      return;
 800ac9c:	bf00      	nop
 800ac9e:	e000      	b.n	800aca2 <HAL_UART_IRQHandler+0x54e>
      return;
 800aca0:	bf00      	nop
  }
}
 800aca2:	37e8      	adds	r7, #232	@ 0xe8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b09c      	sub	sp, #112	@ 0x70
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d172      	bne.n	800adea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ad04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad06:	2200      	movs	r2, #0
 800ad08:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	330c      	adds	r3, #12
 800ad10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad14:	e853 3f00 	ldrex	r3, [r3]
 800ad18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad20:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	330c      	adds	r3, #12
 800ad28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ad2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e5      	bne.n	800ad0a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3314      	adds	r3, #20
 800ad44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad50:	f023 0301 	bic.w	r3, r3, #1
 800ad54:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3314      	adds	r3, #20
 800ad5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad5e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad66:	e841 2300 	strex	r3, r2, [r1]
 800ad6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e5      	bne.n	800ad3e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3314      	adds	r3, #20
 800ad78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	623b      	str	r3, [r7, #32]
   return(result);
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad88:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3314      	adds	r3, #20
 800ad90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad92:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e5      	bne.n	800ad72 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ada6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ada8:	2220      	movs	r2, #32
 800adaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d119      	bne.n	800adea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	330c      	adds	r3, #12
 800adbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f023 0310 	bic.w	r3, r3, #16
 800adcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800adce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	330c      	adds	r3, #12
 800add4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800add6:	61fa      	str	r2, [r7, #28]
 800add8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	69b9      	ldr	r1, [r7, #24]
 800addc:	69fa      	ldr	r2, [r7, #28]
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	617b      	str	r3, [r7, #20]
   return(result);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adec:	2200      	movs	r2, #0
 800adee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d106      	bne.n	800ae06 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adfa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800adfc:	4619      	mov	r1, r3
 800adfe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae00:	f7ff ff66 	bl	800acd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae04:	e002      	b.n	800ae0c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ae06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae08:	f7f8 f828 	bl	8002e5c <HAL_UART_RxCpltCallback>
}
 800ae0c:	bf00      	nop
 800ae0e:	3770      	adds	r7, #112	@ 0x70
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2201      	movs	r2, #1
 800ae26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d108      	bne.n	800ae42 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ae34:	085b      	lsrs	r3, r3, #1
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7ff ff48 	bl	800acd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae40:	e002      	b.n	800ae48 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7f7 fff4 	bl	8002e30 <HAL_UART_RxHalfCpltCallback>
}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae60:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae6c:	2b80      	cmp	r3, #128	@ 0x80
 800ae6e:	bf0c      	ite	eq
 800ae70:	2301      	moveq	r3, #1
 800ae72:	2300      	movne	r3, #0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b21      	cmp	r3, #33	@ 0x21
 800ae82:	d108      	bne.n	800ae96 <UART_DMAError+0x46>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d005      	beq.n	800ae96 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ae90:	68b8      	ldr	r0, [r7, #8]
 800ae92:	f000 f927 	bl	800b0e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aea0:	2b40      	cmp	r3, #64	@ 0x40
 800aea2:	bf0c      	ite	eq
 800aea4:	2301      	moveq	r3, #1
 800aea6:	2300      	movne	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b22      	cmp	r3, #34	@ 0x22
 800aeb6:	d108      	bne.n	800aeca <UART_DMAError+0x7a>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2200      	movs	r2, #0
 800aec2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800aec4:	68b8      	ldr	r0, [r7, #8]
 800aec6:	f000 f935 	bl	800b134 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aece:	f043 0210 	orr.w	r2, r3, #16
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aed6:	68b8      	ldr	r0, [r7, #8]
 800aed8:	f7ff fef0 	bl	800acbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	603b      	str	r3, [r7, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef4:	e03b      	b.n	800af6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefc:	d037      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aefe:	f7fb fa8d 	bl	800641c <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	6a3a      	ldr	r2, [r7, #32]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <UART_WaitOnFlagUntilTimeout+0x30>
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e03a      	b.n	800af8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	d023      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x8a>
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b80      	cmp	r3, #128	@ 0x80
 800af2a:	d020      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x8a>
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b40      	cmp	r3, #64	@ 0x40
 800af30:	d01d      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0308 	and.w	r3, r3, #8
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d116      	bne.n	800af6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f8ec 	bl	800b134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2208      	movs	r2, #8
 800af60:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e00f      	b.n	800af8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4013      	ands	r3, r2
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	bf0c      	ite	eq
 800af7e:	2301      	moveq	r3, #1
 800af80:	2300      	movne	r3, #0
 800af82:	b2db      	uxtb	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d0b4      	beq.n	800aef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b098      	sub	sp, #96	@ 0x60
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	4613      	mov	r3, r2
 800afa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	88fa      	ldrh	r2, [r7, #6]
 800afb0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2222      	movs	r2, #34	@ 0x22
 800afbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc4:	4a44      	ldr	r2, [pc, #272]	@ (800b0d8 <UART_Start_Receive_DMA+0x140>)
 800afc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afcc:	4a43      	ldr	r2, [pc, #268]	@ (800b0dc <UART_Start_Receive_DMA+0x144>)
 800afce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd4:	4a42      	ldr	r2, [pc, #264]	@ (800b0e0 <UART_Start_Receive_DMA+0x148>)
 800afd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afdc:	2200      	movs	r2, #0
 800afde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800afe0:	f107 0308 	add.w	r3, r7, #8
 800afe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	88fb      	ldrh	r3, [r7, #6]
 800aff8:	f7fc f972 	bl	80072e0 <HAL_DMA_Start_IT>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d008      	beq.n	800b014 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2210      	movs	r2, #16
 800b006:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e05d      	b.n	800b0d0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b014:	2300      	movs	r3, #0
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	613b      	str	r3, [r7, #16]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	613b      	str	r3, [r7, #16]
 800b028:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d019      	beq.n	800b066 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	330c      	adds	r3, #12
 800b038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	330c      	adds	r3, #12
 800b050:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b052:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b054:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b056:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1e5      	bne.n	800b032 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3314      	adds	r3, #20
 800b06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b078:	f043 0301 	orr.w	r3, r3, #1
 800b07c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3314      	adds	r3, #20
 800b084:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b086:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b08c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e5      	bne.n	800b066 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3314      	adds	r3, #20
 800b0a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3314      	adds	r3, #20
 800b0b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6a39      	ldr	r1, [r7, #32]
 800b0c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e5      	bne.n	800b09a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3760      	adds	r7, #96	@ 0x60
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	0800ace9 	.word	0x0800ace9
 800b0dc:	0800ae15 	.word	0x0800ae15
 800b0e0:	0800ae51 	.word	0x0800ae51

0800b0e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b089      	sub	sp, #36	@ 0x24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	330c      	adds	r3, #12
 800b0f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	e853 3f00 	ldrex	r3, [r3]
 800b0fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b102:	61fb      	str	r3, [r7, #28]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	61ba      	str	r2, [r7, #24]
 800b10e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b110:	6979      	ldr	r1, [r7, #20]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	e841 2300 	strex	r3, r2, [r1]
 800b118:	613b      	str	r3, [r7, #16]
   return(result);
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e5      	bne.n	800b0ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2220      	movs	r2, #32
 800b124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b128:	bf00      	nop
 800b12a:	3724      	adds	r7, #36	@ 0x24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b134:	b480      	push	{r7}
 800b136:	b095      	sub	sp, #84	@ 0x54
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	330c      	adds	r3, #12
 800b142:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b146:	e853 3f00 	ldrex	r3, [r3]
 800b14a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	330c      	adds	r3, #12
 800b15a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b15c:	643a      	str	r2, [r7, #64]	@ 0x40
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b164:	e841 2300 	strex	r3, r2, [r1]
 800b168:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e5      	bne.n	800b13c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3314      	adds	r3, #20
 800b176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	f023 0301 	bic.w	r3, r3, #1
 800b186:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3314      	adds	r3, #20
 800b18e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b190:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b192:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b198:	e841 2300 	strex	r3, r2, [r1]
 800b19c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e5      	bne.n	800b170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d119      	bne.n	800b1e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f023 0310 	bic.w	r3, r3, #16
 800b1c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1cc:	61ba      	str	r2, [r7, #24]
 800b1ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6979      	ldr	r1, [r7, #20]
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e5      	bne.n	800b1ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b1ee:	bf00      	nop
 800b1f0:	3754      	adds	r7, #84	@ 0x54
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fd54 	bl	800acbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b21      	cmp	r3, #33	@ 0x21
 800b22e:	d13e      	bne.n	800b2ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b238:	d114      	bne.n	800b264 <UART_Transmit_IT+0x48>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d110      	bne.n	800b264 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	461a      	mov	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b256:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	1c9a      	adds	r2, r3, #2
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	621a      	str	r2, [r3, #32]
 800b262:	e008      	b.n	800b276 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	1c59      	adds	r1, r3, #1
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6211      	str	r1, [r2, #32]
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	3b01      	subs	r3, #1
 800b27e:	b29b      	uxth	r3, r3
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	4619      	mov	r1, r3
 800b284:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10f      	bne.n	800b2aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68da      	ldr	r2, [r3, #12]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e000      	b.n	800b2b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b2ae:	2302      	movs	r3, #2
  }
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68da      	ldr	r2, [r3, #12]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fce3 	bl	800aca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08c      	sub	sp, #48	@ 0x30
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b22      	cmp	r3, #34	@ 0x22
 800b306:	f040 80aa 	bne.w	800b45e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b312:	d115      	bne.n	800b340 <UART_Receive_IT+0x54>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d111      	bne.n	800b340 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b320:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b32e:	b29a      	uxth	r2, r3
 800b330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	1c9a      	adds	r2, r3, #2
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b33e:	e024      	b.n	800b38a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b344:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b34e:	d007      	beq.n	800b360 <UART_Receive_IT+0x74>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <UART_Receive_IT+0x82>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	b2da      	uxtb	r2, r3
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	701a      	strb	r2, [r3, #0]
 800b36c:	e008      	b.n	800b380 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b38e:	b29b      	uxth	r3, r3
 800b390:	3b01      	subs	r3, #1
 800b392:	b29b      	uxth	r3, r3
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	4619      	mov	r1, r3
 800b398:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d15d      	bne.n	800b45a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0220 	bic.w	r2, r2, #32
 800b3ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b3bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	695a      	ldr	r2, [r3, #20]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f022 0201 	bic.w	r2, r2, #1
 800b3cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d135      	bne.n	800b450 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	330c      	adds	r3, #12
 800b3f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f023 0310 	bic.w	r3, r3, #16
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	330c      	adds	r3, #12
 800b408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b40a:	623a      	str	r2, [r7, #32]
 800b40c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	69f9      	ldr	r1, [r7, #28]
 800b410:	6a3a      	ldr	r2, [r7, #32]
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	61bb      	str	r3, [r7, #24]
   return(result);
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e5      	bne.n	800b3ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0310 	and.w	r3, r3, #16
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d10a      	bne.n	800b442 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b42c:	2300      	movs	r3, #0
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff fc41 	bl	800acd0 <HAL_UARTEx_RxEventCallback>
 800b44e:	e002      	b.n	800b456 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7f7 fd03 	bl	8002e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	e002      	b.n	800b460 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	e000      	b.n	800b460 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b45e:	2302      	movs	r3, #2
  }
}
 800b460:	4618      	mov	r0, r3
 800b462:	3730      	adds	r7, #48	@ 0x30
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b46c:	b0c0      	sub	sp, #256	@ 0x100
 800b46e:	af00      	add	r7, sp, #0
 800b470:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b484:	68d9      	ldr	r1, [r3, #12]
 800b486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	ea40 0301 	orr.w	r3, r0, r1
 800b490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b496:	689a      	ldr	r2, [r3, #8]
 800b498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	431a      	orrs	r2, r3
 800b4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	431a      	orrs	r2, r3
 800b4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b4c0:	f021 010c 	bic.w	r1, r1, #12
 800b4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b4de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4e2:	6999      	ldr	r1, [r3, #24]
 800b4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	ea40 0301 	orr.w	r3, r0, r1
 800b4ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	4b8f      	ldr	r3, [pc, #572]	@ (800b734 <UART_SetConfig+0x2cc>)
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d005      	beq.n	800b508 <UART_SetConfig+0xa0>
 800b4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	4b8d      	ldr	r3, [pc, #564]	@ (800b738 <UART_SetConfig+0x2d0>)
 800b504:	429a      	cmp	r2, r3
 800b506:	d104      	bne.n	800b512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b508:	f7fd fe52 	bl	80091b0 <HAL_RCC_GetPCLK2Freq>
 800b50c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b510:	e003      	b.n	800b51a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b512:	f7fd fe39 	bl	8009188 <HAL_RCC_GetPCLK1Freq>
 800b516:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b524:	f040 810c 	bne.w	800b740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b532:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b53a:	4622      	mov	r2, r4
 800b53c:	462b      	mov	r3, r5
 800b53e:	1891      	adds	r1, r2, r2
 800b540:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b542:	415b      	adcs	r3, r3
 800b544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b54a:	4621      	mov	r1, r4
 800b54c:	eb12 0801 	adds.w	r8, r2, r1
 800b550:	4629      	mov	r1, r5
 800b552:	eb43 0901 	adc.w	r9, r3, r1
 800b556:	f04f 0200 	mov.w	r2, #0
 800b55a:	f04f 0300 	mov.w	r3, #0
 800b55e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b56a:	4690      	mov	r8, r2
 800b56c:	4699      	mov	r9, r3
 800b56e:	4623      	mov	r3, r4
 800b570:	eb18 0303 	adds.w	r3, r8, r3
 800b574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b578:	462b      	mov	r3, r5
 800b57a:	eb49 0303 	adc.w	r3, r9, r3
 800b57e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b58e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b596:	460b      	mov	r3, r1
 800b598:	18db      	adds	r3, r3, r3
 800b59a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b59c:	4613      	mov	r3, r2
 800b59e:	eb42 0303 	adc.w	r3, r2, r3
 800b5a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b5a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b5ac:	f7f5 fcea 	bl	8000f84 <__aeabi_uldivmod>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4b61      	ldr	r3, [pc, #388]	@ (800b73c <UART_SetConfig+0x2d4>)
 800b5b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ba:	095b      	lsrs	r3, r3, #5
 800b5bc:	011c      	lsls	r4, r3, #4
 800b5be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b5cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b5d0:	4642      	mov	r2, r8
 800b5d2:	464b      	mov	r3, r9
 800b5d4:	1891      	adds	r1, r2, r2
 800b5d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b5d8:	415b      	adcs	r3, r3
 800b5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	eb12 0a01 	adds.w	sl, r2, r1
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	eb43 0b01 	adc.w	fp, r3, r1
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	f04f 0300 	mov.w	r3, #0
 800b5f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b5fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b600:	4692      	mov	sl, r2
 800b602:	469b      	mov	fp, r3
 800b604:	4643      	mov	r3, r8
 800b606:	eb1a 0303 	adds.w	r3, sl, r3
 800b60a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b60e:	464b      	mov	r3, r9
 800b610:	eb4b 0303 	adc.w	r3, fp, r3
 800b614:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b624:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b62c:	460b      	mov	r3, r1
 800b62e:	18db      	adds	r3, r3, r3
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40
 800b632:	4613      	mov	r3, r2
 800b634:	eb42 0303 	adc.w	r3, r2, r3
 800b638:	647b      	str	r3, [r7, #68]	@ 0x44
 800b63a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b63e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b642:	f7f5 fc9f 	bl	8000f84 <__aeabi_uldivmod>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4611      	mov	r1, r2
 800b64c:	4b3b      	ldr	r3, [pc, #236]	@ (800b73c <UART_SetConfig+0x2d4>)
 800b64e:	fba3 2301 	umull	r2, r3, r3, r1
 800b652:	095b      	lsrs	r3, r3, #5
 800b654:	2264      	movs	r2, #100	@ 0x64
 800b656:	fb02 f303 	mul.w	r3, r2, r3
 800b65a:	1acb      	subs	r3, r1, r3
 800b65c:	00db      	lsls	r3, r3, #3
 800b65e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b662:	4b36      	ldr	r3, [pc, #216]	@ (800b73c <UART_SetConfig+0x2d4>)
 800b664:	fba3 2302 	umull	r2, r3, r3, r2
 800b668:	095b      	lsrs	r3, r3, #5
 800b66a:	005b      	lsls	r3, r3, #1
 800b66c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b670:	441c      	add	r4, r3
 800b672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b676:	2200      	movs	r2, #0
 800b678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b67c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b684:	4642      	mov	r2, r8
 800b686:	464b      	mov	r3, r9
 800b688:	1891      	adds	r1, r2, r2
 800b68a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b68c:	415b      	adcs	r3, r3
 800b68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b694:	4641      	mov	r1, r8
 800b696:	1851      	adds	r1, r2, r1
 800b698:	6339      	str	r1, [r7, #48]	@ 0x30
 800b69a:	4649      	mov	r1, r9
 800b69c:	414b      	adcs	r3, r1
 800b69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a0:	f04f 0200 	mov.w	r2, #0
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	00cb      	lsls	r3, r1, #3
 800b6b0:	4651      	mov	r1, sl
 800b6b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6b6:	4651      	mov	r1, sl
 800b6b8:	00ca      	lsls	r2, r1, #3
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4642      	mov	r2, r8
 800b6c2:	189b      	adds	r3, r3, r2
 800b6c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6c8:	464b      	mov	r3, r9
 800b6ca:	460a      	mov	r2, r1
 800b6cc:	eb42 0303 	adc.w	r3, r2, r3
 800b6d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b6e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b6e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	18db      	adds	r3, r3, r3
 800b6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	eb42 0303 	adc.w	r3, r2, r3
 800b6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b6fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b6fe:	f7f5 fc41 	bl	8000f84 <__aeabi_uldivmod>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4b0d      	ldr	r3, [pc, #52]	@ (800b73c <UART_SetConfig+0x2d4>)
 800b708:	fba3 1302 	umull	r1, r3, r3, r2
 800b70c:	095b      	lsrs	r3, r3, #5
 800b70e:	2164      	movs	r1, #100	@ 0x64
 800b710:	fb01 f303 	mul.w	r3, r1, r3
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	00db      	lsls	r3, r3, #3
 800b718:	3332      	adds	r3, #50	@ 0x32
 800b71a:	4a08      	ldr	r2, [pc, #32]	@ (800b73c <UART_SetConfig+0x2d4>)
 800b71c:	fba2 2303 	umull	r2, r3, r2, r3
 800b720:	095b      	lsrs	r3, r3, #5
 800b722:	f003 0207 	and.w	r2, r3, #7
 800b726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4422      	add	r2, r4
 800b72e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b730:	e106      	b.n	800b940 <UART_SetConfig+0x4d8>
 800b732:	bf00      	nop
 800b734:	40011000 	.word	0x40011000
 800b738:	40011400 	.word	0x40011400
 800b73c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b744:	2200      	movs	r2, #0
 800b746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b74a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b74e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b752:	4642      	mov	r2, r8
 800b754:	464b      	mov	r3, r9
 800b756:	1891      	adds	r1, r2, r2
 800b758:	6239      	str	r1, [r7, #32]
 800b75a:	415b      	adcs	r3, r3
 800b75c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b75e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b762:	4641      	mov	r1, r8
 800b764:	1854      	adds	r4, r2, r1
 800b766:	4649      	mov	r1, r9
 800b768:	eb43 0501 	adc.w	r5, r3, r1
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	00eb      	lsls	r3, r5, #3
 800b776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b77a:	00e2      	lsls	r2, r4, #3
 800b77c:	4614      	mov	r4, r2
 800b77e:	461d      	mov	r5, r3
 800b780:	4643      	mov	r3, r8
 800b782:	18e3      	adds	r3, r4, r3
 800b784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b788:	464b      	mov	r3, r9
 800b78a:	eb45 0303 	adc.w	r3, r5, r3
 800b78e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b79e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b7a2:	f04f 0200 	mov.w	r2, #0
 800b7a6:	f04f 0300 	mov.w	r3, #0
 800b7aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	008b      	lsls	r3, r1, #2
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	008a      	lsls	r2, r1, #2
 800b7bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b7c0:	f7f5 fbe0 	bl	8000f84 <__aeabi_uldivmod>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4b60      	ldr	r3, [pc, #384]	@ (800b94c <UART_SetConfig+0x4e4>)
 800b7ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	011c      	lsls	r4, r3, #4
 800b7d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b7e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b7e4:	4642      	mov	r2, r8
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	1891      	adds	r1, r2, r2
 800b7ea:	61b9      	str	r1, [r7, #24]
 800b7ec:	415b      	adcs	r3, r3
 800b7ee:	61fb      	str	r3, [r7, #28]
 800b7f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7f4:	4641      	mov	r1, r8
 800b7f6:	1851      	adds	r1, r2, r1
 800b7f8:	6139      	str	r1, [r7, #16]
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	414b      	adcs	r3, r1
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	f04f 0200 	mov.w	r2, #0
 800b804:	f04f 0300 	mov.w	r3, #0
 800b808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b80c:	4659      	mov	r1, fp
 800b80e:	00cb      	lsls	r3, r1, #3
 800b810:	4651      	mov	r1, sl
 800b812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b816:	4651      	mov	r1, sl
 800b818:	00ca      	lsls	r2, r1, #3
 800b81a:	4610      	mov	r0, r2
 800b81c:	4619      	mov	r1, r3
 800b81e:	4603      	mov	r3, r0
 800b820:	4642      	mov	r2, r8
 800b822:	189b      	adds	r3, r3, r2
 800b824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b828:	464b      	mov	r3, r9
 800b82a:	460a      	mov	r2, r1
 800b82c:	eb42 0303 	adc.w	r3, r2, r3
 800b830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b83e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b840:	f04f 0200 	mov.w	r2, #0
 800b844:	f04f 0300 	mov.w	r3, #0
 800b848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b84c:	4649      	mov	r1, r9
 800b84e:	008b      	lsls	r3, r1, #2
 800b850:	4641      	mov	r1, r8
 800b852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b856:	4641      	mov	r1, r8
 800b858:	008a      	lsls	r2, r1, #2
 800b85a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b85e:	f7f5 fb91 	bl	8000f84 <__aeabi_uldivmod>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4611      	mov	r1, r2
 800b868:	4b38      	ldr	r3, [pc, #224]	@ (800b94c <UART_SetConfig+0x4e4>)
 800b86a:	fba3 2301 	umull	r2, r3, r3, r1
 800b86e:	095b      	lsrs	r3, r3, #5
 800b870:	2264      	movs	r2, #100	@ 0x64
 800b872:	fb02 f303 	mul.w	r3, r2, r3
 800b876:	1acb      	subs	r3, r1, r3
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	3332      	adds	r3, #50	@ 0x32
 800b87c:	4a33      	ldr	r2, [pc, #204]	@ (800b94c <UART_SetConfig+0x4e4>)
 800b87e:	fba2 2303 	umull	r2, r3, r2, r3
 800b882:	095b      	lsrs	r3, r3, #5
 800b884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b888:	441c      	add	r4, r3
 800b88a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b88e:	2200      	movs	r2, #0
 800b890:	673b      	str	r3, [r7, #112]	@ 0x70
 800b892:	677a      	str	r2, [r7, #116]	@ 0x74
 800b894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b898:	4642      	mov	r2, r8
 800b89a:	464b      	mov	r3, r9
 800b89c:	1891      	adds	r1, r2, r2
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	415b      	adcs	r3, r3
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	1851      	adds	r1, r2, r1
 800b8ac:	6039      	str	r1, [r7, #0]
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	414b      	adcs	r3, r1
 800b8b2:	607b      	str	r3, [r7, #4]
 800b8b4:	f04f 0200 	mov.w	r2, #0
 800b8b8:	f04f 0300 	mov.w	r3, #0
 800b8bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	00cb      	lsls	r3, r1, #3
 800b8c4:	4651      	mov	r1, sl
 800b8c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ca:	4651      	mov	r1, sl
 800b8cc:	00ca      	lsls	r2, r1, #3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4642      	mov	r2, r8
 800b8d6:	189b      	adds	r3, r3, r2
 800b8d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8da:	464b      	mov	r3, r9
 800b8dc:	460a      	mov	r2, r1
 800b8de:	eb42 0303 	adc.w	r3, r2, r3
 800b8e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8ee:	667a      	str	r2, [r7, #100]	@ 0x64
 800b8f0:	f04f 0200 	mov.w	r2, #0
 800b8f4:	f04f 0300 	mov.w	r3, #0
 800b8f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b8fc:	4649      	mov	r1, r9
 800b8fe:	008b      	lsls	r3, r1, #2
 800b900:	4641      	mov	r1, r8
 800b902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b906:	4641      	mov	r1, r8
 800b908:	008a      	lsls	r2, r1, #2
 800b90a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b90e:	f7f5 fb39 	bl	8000f84 <__aeabi_uldivmod>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4b0d      	ldr	r3, [pc, #52]	@ (800b94c <UART_SetConfig+0x4e4>)
 800b918:	fba3 1302 	umull	r1, r3, r3, r2
 800b91c:	095b      	lsrs	r3, r3, #5
 800b91e:	2164      	movs	r1, #100	@ 0x64
 800b920:	fb01 f303 	mul.w	r3, r1, r3
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	3332      	adds	r3, #50	@ 0x32
 800b92a:	4a08      	ldr	r2, [pc, #32]	@ (800b94c <UART_SetConfig+0x4e4>)
 800b92c:	fba2 2303 	umull	r2, r3, r2, r3
 800b930:	095b      	lsrs	r3, r3, #5
 800b932:	f003 020f 	and.w	r2, r3, #15
 800b936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4422      	add	r2, r4
 800b93e:	609a      	str	r2, [r3, #8]
}
 800b940:	bf00      	nop
 800b942:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b946:	46bd      	mov	sp, r7
 800b948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b94c:	51eb851f 	.word	0x51eb851f

0800b950 <calloc>:
 800b950:	4b02      	ldr	r3, [pc, #8]	@ (800b95c <calloc+0xc>)
 800b952:	460a      	mov	r2, r1
 800b954:	4601      	mov	r1, r0
 800b956:	6818      	ldr	r0, [r3, #0]
 800b958:	f000 b802 	b.w	800b960 <_calloc_r>
 800b95c:	20000044 	.word	0x20000044

0800b960 <_calloc_r>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	fba1 5402 	umull	r5, r4, r1, r2
 800b966:	b93c      	cbnz	r4, 800b978 <_calloc_r+0x18>
 800b968:	4629      	mov	r1, r5
 800b96a:	f000 f82f 	bl	800b9cc <_malloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	b928      	cbnz	r0, 800b97e <_calloc_r+0x1e>
 800b972:	2600      	movs	r6, #0
 800b974:	4630      	mov	r0, r6
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	220c      	movs	r2, #12
 800b97a:	6002      	str	r2, [r0, #0]
 800b97c:	e7f9      	b.n	800b972 <_calloc_r+0x12>
 800b97e:	462a      	mov	r2, r5
 800b980:	4621      	mov	r1, r4
 800b982:	f001 f8b0 	bl	800cae6 <memset>
 800b986:	e7f5      	b.n	800b974 <_calloc_r+0x14>

0800b988 <sbrk_aligned>:
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	4e0f      	ldr	r6, [pc, #60]	@ (800b9c8 <sbrk_aligned+0x40>)
 800b98c:	460c      	mov	r4, r1
 800b98e:	6831      	ldr	r1, [r6, #0]
 800b990:	4605      	mov	r5, r0
 800b992:	b911      	cbnz	r1, 800b99a <sbrk_aligned+0x12>
 800b994:	f001 f8fe 	bl	800cb94 <_sbrk_r>
 800b998:	6030      	str	r0, [r6, #0]
 800b99a:	4621      	mov	r1, r4
 800b99c:	4628      	mov	r0, r5
 800b99e:	f001 f8f9 	bl	800cb94 <_sbrk_r>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	d103      	bne.n	800b9ae <sbrk_aligned+0x26>
 800b9a6:	f04f 34ff 	mov.w	r4, #4294967295
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	bd70      	pop	{r4, r5, r6, pc}
 800b9ae:	1cc4      	adds	r4, r0, #3
 800b9b0:	f024 0403 	bic.w	r4, r4, #3
 800b9b4:	42a0      	cmp	r0, r4
 800b9b6:	d0f8      	beq.n	800b9aa <sbrk_aligned+0x22>
 800b9b8:	1a21      	subs	r1, r4, r0
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f001 f8ea 	bl	800cb94 <_sbrk_r>
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	d1f2      	bne.n	800b9aa <sbrk_aligned+0x22>
 800b9c4:	e7ef      	b.n	800b9a6 <sbrk_aligned+0x1e>
 800b9c6:	bf00      	nop
 800b9c8:	20001830 	.word	0x20001830

0800b9cc <_malloc_r>:
 800b9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9d0:	1ccd      	adds	r5, r1, #3
 800b9d2:	f025 0503 	bic.w	r5, r5, #3
 800b9d6:	3508      	adds	r5, #8
 800b9d8:	2d0c      	cmp	r5, #12
 800b9da:	bf38      	it	cc
 800b9dc:	250c      	movcc	r5, #12
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	db01      	blt.n	800b9e8 <_malloc_r+0x1c>
 800b9e4:	42a9      	cmp	r1, r5
 800b9e6:	d904      	bls.n	800b9f2 <_malloc_r+0x26>
 800b9e8:	230c      	movs	r3, #12
 800b9ea:	6033      	str	r3, [r6, #0]
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bac8 <_malloc_r+0xfc>
 800b9f6:	f000 f869 	bl	800bacc <__malloc_lock>
 800b9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b9fe:	461c      	mov	r4, r3
 800ba00:	bb44      	cbnz	r4, 800ba54 <_malloc_r+0x88>
 800ba02:	4629      	mov	r1, r5
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff ffbf 	bl	800b988 <sbrk_aligned>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	d158      	bne.n	800bac2 <_malloc_r+0xf6>
 800ba10:	f8d8 4000 	ldr.w	r4, [r8]
 800ba14:	4627      	mov	r7, r4
 800ba16:	2f00      	cmp	r7, #0
 800ba18:	d143      	bne.n	800baa2 <_malloc_r+0xd6>
 800ba1a:	2c00      	cmp	r4, #0
 800ba1c:	d04b      	beq.n	800bab6 <_malloc_r+0xea>
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	4639      	mov	r1, r7
 800ba22:	4630      	mov	r0, r6
 800ba24:	eb04 0903 	add.w	r9, r4, r3
 800ba28:	f001 f8b4 	bl	800cb94 <_sbrk_r>
 800ba2c:	4581      	cmp	r9, r0
 800ba2e:	d142      	bne.n	800bab6 <_malloc_r+0xea>
 800ba30:	6821      	ldr	r1, [r4, #0]
 800ba32:	1a6d      	subs	r5, r5, r1
 800ba34:	4629      	mov	r1, r5
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7ff ffa6 	bl	800b988 <sbrk_aligned>
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	d03a      	beq.n	800bab6 <_malloc_r+0xea>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	442b      	add	r3, r5
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	f8d8 3000 	ldr.w	r3, [r8]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	bb62      	cbnz	r2, 800baa8 <_malloc_r+0xdc>
 800ba4e:	f8c8 7000 	str.w	r7, [r8]
 800ba52:	e00f      	b.n	800ba74 <_malloc_r+0xa8>
 800ba54:	6822      	ldr	r2, [r4, #0]
 800ba56:	1b52      	subs	r2, r2, r5
 800ba58:	d420      	bmi.n	800ba9c <_malloc_r+0xd0>
 800ba5a:	2a0b      	cmp	r2, #11
 800ba5c:	d917      	bls.n	800ba8e <_malloc_r+0xc2>
 800ba5e:	1961      	adds	r1, r4, r5
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	6025      	str	r5, [r4, #0]
 800ba64:	bf18      	it	ne
 800ba66:	6059      	strne	r1, [r3, #4]
 800ba68:	6863      	ldr	r3, [r4, #4]
 800ba6a:	bf08      	it	eq
 800ba6c:	f8c8 1000 	streq.w	r1, [r8]
 800ba70:	5162      	str	r2, [r4, r5]
 800ba72:	604b      	str	r3, [r1, #4]
 800ba74:	4630      	mov	r0, r6
 800ba76:	f000 f82f 	bl	800bad8 <__malloc_unlock>
 800ba7a:	f104 000b 	add.w	r0, r4, #11
 800ba7e:	1d23      	adds	r3, r4, #4
 800ba80:	f020 0007 	bic.w	r0, r0, #7
 800ba84:	1ac2      	subs	r2, r0, r3
 800ba86:	bf1c      	itt	ne
 800ba88:	1a1b      	subne	r3, r3, r0
 800ba8a:	50a3      	strne	r3, [r4, r2]
 800ba8c:	e7af      	b.n	800b9ee <_malloc_r+0x22>
 800ba8e:	6862      	ldr	r2, [r4, #4]
 800ba90:	42a3      	cmp	r3, r4
 800ba92:	bf0c      	ite	eq
 800ba94:	f8c8 2000 	streq.w	r2, [r8]
 800ba98:	605a      	strne	r2, [r3, #4]
 800ba9a:	e7eb      	b.n	800ba74 <_malloc_r+0xa8>
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	6864      	ldr	r4, [r4, #4]
 800baa0:	e7ae      	b.n	800ba00 <_malloc_r+0x34>
 800baa2:	463c      	mov	r4, r7
 800baa4:	687f      	ldr	r7, [r7, #4]
 800baa6:	e7b6      	b.n	800ba16 <_malloc_r+0x4a>
 800baa8:	461a      	mov	r2, r3
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	42a3      	cmp	r3, r4
 800baae:	d1fb      	bne.n	800baa8 <_malloc_r+0xdc>
 800bab0:	2300      	movs	r3, #0
 800bab2:	6053      	str	r3, [r2, #4]
 800bab4:	e7de      	b.n	800ba74 <_malloc_r+0xa8>
 800bab6:	230c      	movs	r3, #12
 800bab8:	6033      	str	r3, [r6, #0]
 800baba:	4630      	mov	r0, r6
 800babc:	f000 f80c 	bl	800bad8 <__malloc_unlock>
 800bac0:	e794      	b.n	800b9ec <_malloc_r+0x20>
 800bac2:	6005      	str	r5, [r0, #0]
 800bac4:	e7d6      	b.n	800ba74 <_malloc_r+0xa8>
 800bac6:	bf00      	nop
 800bac8:	20001834 	.word	0x20001834

0800bacc <__malloc_lock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	@ (800bad4 <__malloc_lock+0x8>)
 800bace:	f001 b8ae 	b.w	800cc2e <__retarget_lock_acquire_recursive>
 800bad2:	bf00      	nop
 800bad4:	20001978 	.word	0x20001978

0800bad8 <__malloc_unlock>:
 800bad8:	4801      	ldr	r0, [pc, #4]	@ (800bae0 <__malloc_unlock+0x8>)
 800bada:	f001 b8a9 	b.w	800cc30 <__retarget_lock_release_recursive>
 800bade:	bf00      	nop
 800bae0:	20001978 	.word	0x20001978

0800bae4 <__cvt>:
 800bae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae8:	ec57 6b10 	vmov	r6, r7, d0
 800baec:	2f00      	cmp	r7, #0
 800baee:	460c      	mov	r4, r1
 800baf0:	4619      	mov	r1, r3
 800baf2:	463b      	mov	r3, r7
 800baf4:	bfbb      	ittet	lt
 800baf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bafa:	461f      	movlt	r7, r3
 800bafc:	2300      	movge	r3, #0
 800bafe:	232d      	movlt	r3, #45	@ 0x2d
 800bb00:	700b      	strb	r3, [r1, #0]
 800bb02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bb08:	4691      	mov	r9, r2
 800bb0a:	f023 0820 	bic.w	r8, r3, #32
 800bb0e:	bfbc      	itt	lt
 800bb10:	4632      	movlt	r2, r6
 800bb12:	4616      	movlt	r6, r2
 800bb14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb18:	d005      	beq.n	800bb26 <__cvt+0x42>
 800bb1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bb1e:	d100      	bne.n	800bb22 <__cvt+0x3e>
 800bb20:	3401      	adds	r4, #1
 800bb22:	2102      	movs	r1, #2
 800bb24:	e000      	b.n	800bb28 <__cvt+0x44>
 800bb26:	2103      	movs	r1, #3
 800bb28:	ab03      	add	r3, sp, #12
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	ab02      	add	r3, sp, #8
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	ec47 6b10 	vmov	d0, r6, r7
 800bb34:	4653      	mov	r3, sl
 800bb36:	4622      	mov	r2, r4
 800bb38:	f001 f91a 	bl	800cd70 <_dtoa_r>
 800bb3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bb40:	4605      	mov	r5, r0
 800bb42:	d119      	bne.n	800bb78 <__cvt+0x94>
 800bb44:	f019 0f01 	tst.w	r9, #1
 800bb48:	d00e      	beq.n	800bb68 <__cvt+0x84>
 800bb4a:	eb00 0904 	add.w	r9, r0, r4
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2300      	movs	r3, #0
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	f7f4 ffd7 	bl	8000b08 <__aeabi_dcmpeq>
 800bb5a:	b108      	cbz	r0, 800bb60 <__cvt+0x7c>
 800bb5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb60:	2230      	movs	r2, #48	@ 0x30
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	454b      	cmp	r3, r9
 800bb66:	d31e      	bcc.n	800bba6 <__cvt+0xc2>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb6c:	1b5b      	subs	r3, r3, r5
 800bb6e:	4628      	mov	r0, r5
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	b004      	add	sp, #16
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb7c:	eb00 0904 	add.w	r9, r0, r4
 800bb80:	d1e5      	bne.n	800bb4e <__cvt+0x6a>
 800bb82:	7803      	ldrb	r3, [r0, #0]
 800bb84:	2b30      	cmp	r3, #48	@ 0x30
 800bb86:	d10a      	bne.n	800bb9e <__cvt+0xba>
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	4639      	mov	r1, r7
 800bb90:	f7f4 ffba 	bl	8000b08 <__aeabi_dcmpeq>
 800bb94:	b918      	cbnz	r0, 800bb9e <__cvt+0xba>
 800bb96:	f1c4 0401 	rsb	r4, r4, #1
 800bb9a:	f8ca 4000 	str.w	r4, [sl]
 800bb9e:	f8da 3000 	ldr.w	r3, [sl]
 800bba2:	4499      	add	r9, r3
 800bba4:	e7d3      	b.n	800bb4e <__cvt+0x6a>
 800bba6:	1c59      	adds	r1, r3, #1
 800bba8:	9103      	str	r1, [sp, #12]
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	e7d9      	b.n	800bb62 <__cvt+0x7e>

0800bbae <__exponent>:
 800bbae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbb0:	2900      	cmp	r1, #0
 800bbb2:	bfba      	itte	lt
 800bbb4:	4249      	neglt	r1, r1
 800bbb6:	232d      	movlt	r3, #45	@ 0x2d
 800bbb8:	232b      	movge	r3, #43	@ 0x2b
 800bbba:	2909      	cmp	r1, #9
 800bbbc:	7002      	strb	r2, [r0, #0]
 800bbbe:	7043      	strb	r3, [r0, #1]
 800bbc0:	dd29      	ble.n	800bc16 <__exponent+0x68>
 800bbc2:	f10d 0307 	add.w	r3, sp, #7
 800bbc6:	461d      	mov	r5, r3
 800bbc8:	270a      	movs	r7, #10
 800bbca:	461a      	mov	r2, r3
 800bbcc:	fbb1 f6f7 	udiv	r6, r1, r7
 800bbd0:	fb07 1416 	mls	r4, r7, r6, r1
 800bbd4:	3430      	adds	r4, #48	@ 0x30
 800bbd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2c63      	cmp	r4, #99	@ 0x63
 800bbde:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	dcf1      	bgt.n	800bbca <__exponent+0x1c>
 800bbe6:	3130      	adds	r1, #48	@ 0x30
 800bbe8:	1e94      	subs	r4, r2, #2
 800bbea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bbee:	1c41      	adds	r1, r0, #1
 800bbf0:	4623      	mov	r3, r4
 800bbf2:	42ab      	cmp	r3, r5
 800bbf4:	d30a      	bcc.n	800bc0c <__exponent+0x5e>
 800bbf6:	f10d 0309 	add.w	r3, sp, #9
 800bbfa:	1a9b      	subs	r3, r3, r2
 800bbfc:	42ac      	cmp	r4, r5
 800bbfe:	bf88      	it	hi
 800bc00:	2300      	movhi	r3, #0
 800bc02:	3302      	adds	r3, #2
 800bc04:	4403      	add	r3, r0
 800bc06:	1a18      	subs	r0, r3, r0
 800bc08:	b003      	add	sp, #12
 800bc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc10:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc14:	e7ed      	b.n	800bbf2 <__exponent+0x44>
 800bc16:	2330      	movs	r3, #48	@ 0x30
 800bc18:	3130      	adds	r1, #48	@ 0x30
 800bc1a:	7083      	strb	r3, [r0, #2]
 800bc1c:	70c1      	strb	r1, [r0, #3]
 800bc1e:	1d03      	adds	r3, r0, #4
 800bc20:	e7f1      	b.n	800bc06 <__exponent+0x58>
	...

0800bc24 <_printf_float>:
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	b08d      	sub	sp, #52	@ 0x34
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc30:	4616      	mov	r6, r2
 800bc32:	461f      	mov	r7, r3
 800bc34:	4605      	mov	r5, r0
 800bc36:	f000 ff75 	bl	800cb24 <_localeconv_r>
 800bc3a:	6803      	ldr	r3, [r0, #0]
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7f4 fb36 	bl	80002b0 <strlen>
 800bc44:	2300      	movs	r3, #0
 800bc46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc48:	f8d8 3000 	ldr.w	r3, [r8]
 800bc4c:	9005      	str	r0, [sp, #20]
 800bc4e:	3307      	adds	r3, #7
 800bc50:	f023 0307 	bic.w	r3, r3, #7
 800bc54:	f103 0208 	add.w	r2, r3, #8
 800bc58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc5c:	f8d4 b000 	ldr.w	fp, [r4]
 800bc60:	f8c8 2000 	str.w	r2, [r8]
 800bc64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc6c:	9307      	str	r3, [sp, #28]
 800bc6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc7a:	4b9c      	ldr	r3, [pc, #624]	@ (800beec <_printf_float+0x2c8>)
 800bc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc80:	f7f4 ff74 	bl	8000b6c <__aeabi_dcmpun>
 800bc84:	bb70      	cbnz	r0, 800bce4 <_printf_float+0xc0>
 800bc86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc8a:	4b98      	ldr	r3, [pc, #608]	@ (800beec <_printf_float+0x2c8>)
 800bc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc90:	f7f4 ff4e 	bl	8000b30 <__aeabi_dcmple>
 800bc94:	bb30      	cbnz	r0, 800bce4 <_printf_float+0xc0>
 800bc96:	2200      	movs	r2, #0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 ff3d 	bl	8000b1c <__aeabi_dcmplt>
 800bca2:	b110      	cbz	r0, 800bcaa <_printf_float+0x86>
 800bca4:	232d      	movs	r3, #45	@ 0x2d
 800bca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcaa:	4a91      	ldr	r2, [pc, #580]	@ (800bef0 <_printf_float+0x2cc>)
 800bcac:	4b91      	ldr	r3, [pc, #580]	@ (800bef4 <_printf_float+0x2d0>)
 800bcae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bcb2:	bf94      	ite	ls
 800bcb4:	4690      	movls	r8, r2
 800bcb6:	4698      	movhi	r8, r3
 800bcb8:	2303      	movs	r3, #3
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	f02b 0304 	bic.w	r3, fp, #4
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	f04f 0900 	mov.w	r9, #0
 800bcc6:	9700      	str	r7, [sp, #0]
 800bcc8:	4633      	mov	r3, r6
 800bcca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bccc:	4621      	mov	r1, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f000 f9d2 	bl	800c078 <_printf_common>
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	f040 808d 	bne.w	800bdf4 <_printf_float+0x1d0>
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	b00d      	add	sp, #52	@ 0x34
 800bce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce4:	4642      	mov	r2, r8
 800bce6:	464b      	mov	r3, r9
 800bce8:	4640      	mov	r0, r8
 800bcea:	4649      	mov	r1, r9
 800bcec:	f7f4 ff3e 	bl	8000b6c <__aeabi_dcmpun>
 800bcf0:	b140      	cbz	r0, 800bd04 <_printf_float+0xe0>
 800bcf2:	464b      	mov	r3, r9
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bfbc      	itt	lt
 800bcf8:	232d      	movlt	r3, #45	@ 0x2d
 800bcfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bcfe:	4a7e      	ldr	r2, [pc, #504]	@ (800bef8 <_printf_float+0x2d4>)
 800bd00:	4b7e      	ldr	r3, [pc, #504]	@ (800befc <_printf_float+0x2d8>)
 800bd02:	e7d4      	b.n	800bcae <_printf_float+0x8a>
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bd0a:	9206      	str	r2, [sp, #24]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	d13b      	bne.n	800bd88 <_printf_float+0x164>
 800bd10:	2306      	movs	r3, #6
 800bd12:	6063      	str	r3, [r4, #4]
 800bd14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bd18:	2300      	movs	r3, #0
 800bd1a:	6022      	str	r2, [r4, #0]
 800bd1c:	9303      	str	r3, [sp, #12]
 800bd1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bd24:	ab09      	add	r3, sp, #36	@ 0x24
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	6861      	ldr	r1, [r4, #4]
 800bd2a:	ec49 8b10 	vmov	d0, r8, r9
 800bd2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7ff fed6 	bl	800bae4 <__cvt>
 800bd38:	9b06      	ldr	r3, [sp, #24]
 800bd3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd3c:	2b47      	cmp	r3, #71	@ 0x47
 800bd3e:	4680      	mov	r8, r0
 800bd40:	d129      	bne.n	800bd96 <_printf_float+0x172>
 800bd42:	1cc8      	adds	r0, r1, #3
 800bd44:	db02      	blt.n	800bd4c <_printf_float+0x128>
 800bd46:	6863      	ldr	r3, [r4, #4]
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	dd41      	ble.n	800bdd0 <_printf_float+0x1ac>
 800bd4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd50:	fa5f fa8a 	uxtb.w	sl, sl
 800bd54:	3901      	subs	r1, #1
 800bd56:	4652      	mov	r2, sl
 800bd58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd5e:	f7ff ff26 	bl	800bbae <__exponent>
 800bd62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd64:	1813      	adds	r3, r2, r0
 800bd66:	2a01      	cmp	r2, #1
 800bd68:	4681      	mov	r9, r0
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	dc02      	bgt.n	800bd74 <_printf_float+0x150>
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	07d2      	lsls	r2, r2, #31
 800bd72:	d501      	bpl.n	800bd78 <_printf_float+0x154>
 800bd74:	3301      	adds	r3, #1
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0a2      	beq.n	800bcc6 <_printf_float+0xa2>
 800bd80:	232d      	movs	r3, #45	@ 0x2d
 800bd82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd86:	e79e      	b.n	800bcc6 <_printf_float+0xa2>
 800bd88:	9a06      	ldr	r2, [sp, #24]
 800bd8a:	2a47      	cmp	r2, #71	@ 0x47
 800bd8c:	d1c2      	bne.n	800bd14 <_printf_float+0xf0>
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1c0      	bne.n	800bd14 <_printf_float+0xf0>
 800bd92:	2301      	movs	r3, #1
 800bd94:	e7bd      	b.n	800bd12 <_printf_float+0xee>
 800bd96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd9a:	d9db      	bls.n	800bd54 <_printf_float+0x130>
 800bd9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bda0:	d118      	bne.n	800bdd4 <_printf_float+0x1b0>
 800bda2:	2900      	cmp	r1, #0
 800bda4:	6863      	ldr	r3, [r4, #4]
 800bda6:	dd0b      	ble.n	800bdc0 <_printf_float+0x19c>
 800bda8:	6121      	str	r1, [r4, #16]
 800bdaa:	b913      	cbnz	r3, 800bdb2 <_printf_float+0x18e>
 800bdac:	6822      	ldr	r2, [r4, #0]
 800bdae:	07d0      	lsls	r0, r2, #31
 800bdb0:	d502      	bpl.n	800bdb8 <_printf_float+0x194>
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	440b      	add	r3, r1
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bdba:	f04f 0900 	mov.w	r9, #0
 800bdbe:	e7db      	b.n	800bd78 <_printf_float+0x154>
 800bdc0:	b913      	cbnz	r3, 800bdc8 <_printf_float+0x1a4>
 800bdc2:	6822      	ldr	r2, [r4, #0]
 800bdc4:	07d2      	lsls	r2, r2, #31
 800bdc6:	d501      	bpl.n	800bdcc <_printf_float+0x1a8>
 800bdc8:	3302      	adds	r3, #2
 800bdca:	e7f4      	b.n	800bdb6 <_printf_float+0x192>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e7f2      	b.n	800bdb6 <_printf_float+0x192>
 800bdd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bdd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdd6:	4299      	cmp	r1, r3
 800bdd8:	db05      	blt.n	800bde6 <_printf_float+0x1c2>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	6121      	str	r1, [r4, #16]
 800bdde:	07d8      	lsls	r0, r3, #31
 800bde0:	d5ea      	bpl.n	800bdb8 <_printf_float+0x194>
 800bde2:	1c4b      	adds	r3, r1, #1
 800bde4:	e7e7      	b.n	800bdb6 <_printf_float+0x192>
 800bde6:	2900      	cmp	r1, #0
 800bde8:	bfd4      	ite	le
 800bdea:	f1c1 0202 	rsble	r2, r1, #2
 800bdee:	2201      	movgt	r2, #1
 800bdf0:	4413      	add	r3, r2
 800bdf2:	e7e0      	b.n	800bdb6 <_printf_float+0x192>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	055a      	lsls	r2, r3, #21
 800bdf8:	d407      	bmi.n	800be0a <_printf_float+0x1e6>
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	4642      	mov	r2, r8
 800bdfe:	4631      	mov	r1, r6
 800be00:	4628      	mov	r0, r5
 800be02:	47b8      	blx	r7
 800be04:	3001      	adds	r0, #1
 800be06:	d12b      	bne.n	800be60 <_printf_float+0x23c>
 800be08:	e767      	b.n	800bcda <_printf_float+0xb6>
 800be0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be0e:	f240 80dd 	bls.w	800bfcc <_printf_float+0x3a8>
 800be12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be16:	2200      	movs	r2, #0
 800be18:	2300      	movs	r3, #0
 800be1a:	f7f4 fe75 	bl	8000b08 <__aeabi_dcmpeq>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d033      	beq.n	800be8a <_printf_float+0x266>
 800be22:	4a37      	ldr	r2, [pc, #220]	@ (800bf00 <_printf_float+0x2dc>)
 800be24:	2301      	movs	r3, #1
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f af54 	beq.w	800bcda <_printf_float+0xb6>
 800be32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be36:	4543      	cmp	r3, r8
 800be38:	db02      	blt.n	800be40 <_printf_float+0x21c>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	07d8      	lsls	r0, r3, #31
 800be3e:	d50f      	bpl.n	800be60 <_printf_float+0x23c>
 800be40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	f43f af45 	beq.w	800bcda <_printf_float+0xb6>
 800be50:	f04f 0900 	mov.w	r9, #0
 800be54:	f108 38ff 	add.w	r8, r8, #4294967295
 800be58:	f104 0a1a 	add.w	sl, r4, #26
 800be5c:	45c8      	cmp	r8, r9
 800be5e:	dc09      	bgt.n	800be74 <_printf_float+0x250>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	079b      	lsls	r3, r3, #30
 800be64:	f100 8103 	bmi.w	800c06e <_printf_float+0x44a>
 800be68:	68e0      	ldr	r0, [r4, #12]
 800be6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be6c:	4298      	cmp	r0, r3
 800be6e:	bfb8      	it	lt
 800be70:	4618      	movlt	r0, r3
 800be72:	e734      	b.n	800bcde <_printf_float+0xba>
 800be74:	2301      	movs	r3, #1
 800be76:	4652      	mov	r2, sl
 800be78:	4631      	mov	r1, r6
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b8      	blx	r7
 800be7e:	3001      	adds	r0, #1
 800be80:	f43f af2b 	beq.w	800bcda <_printf_float+0xb6>
 800be84:	f109 0901 	add.w	r9, r9, #1
 800be88:	e7e8      	b.n	800be5c <_printf_float+0x238>
 800be8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dc39      	bgt.n	800bf04 <_printf_float+0x2e0>
 800be90:	4a1b      	ldr	r2, [pc, #108]	@ (800bf00 <_printf_float+0x2dc>)
 800be92:	2301      	movs	r3, #1
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	f43f af1d 	beq.w	800bcda <_printf_float+0xb6>
 800bea0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bea4:	ea59 0303 	orrs.w	r3, r9, r3
 800bea8:	d102      	bne.n	800beb0 <_printf_float+0x28c>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	07d9      	lsls	r1, r3, #31
 800beae:	d5d7      	bpl.n	800be60 <_printf_float+0x23c>
 800beb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb4:	4631      	mov	r1, r6
 800beb6:	4628      	mov	r0, r5
 800beb8:	47b8      	blx	r7
 800beba:	3001      	adds	r0, #1
 800bebc:	f43f af0d 	beq.w	800bcda <_printf_float+0xb6>
 800bec0:	f04f 0a00 	mov.w	sl, #0
 800bec4:	f104 0b1a 	add.w	fp, r4, #26
 800bec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beca:	425b      	negs	r3, r3
 800becc:	4553      	cmp	r3, sl
 800bece:	dc01      	bgt.n	800bed4 <_printf_float+0x2b0>
 800bed0:	464b      	mov	r3, r9
 800bed2:	e793      	b.n	800bdfc <_printf_float+0x1d8>
 800bed4:	2301      	movs	r3, #1
 800bed6:	465a      	mov	r2, fp
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f aefb 	beq.w	800bcda <_printf_float+0xb6>
 800bee4:	f10a 0a01 	add.w	sl, sl, #1
 800bee8:	e7ee      	b.n	800bec8 <_printf_float+0x2a4>
 800beea:	bf00      	nop
 800beec:	7fefffff 	.word	0x7fefffff
 800bef0:	0801237c 	.word	0x0801237c
 800bef4:	08012380 	.word	0x08012380
 800bef8:	08012384 	.word	0x08012384
 800befc:	08012388 	.word	0x08012388
 800bf00:	08012718 	.word	0x08012718
 800bf04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf0a:	4553      	cmp	r3, sl
 800bf0c:	bfa8      	it	ge
 800bf0e:	4653      	movge	r3, sl
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	4699      	mov	r9, r3
 800bf14:	dc36      	bgt.n	800bf84 <_printf_float+0x360>
 800bf16:	f04f 0b00 	mov.w	fp, #0
 800bf1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf1e:	f104 021a 	add.w	r2, r4, #26
 800bf22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf24:	9306      	str	r3, [sp, #24]
 800bf26:	eba3 0309 	sub.w	r3, r3, r9
 800bf2a:	455b      	cmp	r3, fp
 800bf2c:	dc31      	bgt.n	800bf92 <_printf_float+0x36e>
 800bf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf30:	459a      	cmp	sl, r3
 800bf32:	dc3a      	bgt.n	800bfaa <_printf_float+0x386>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	07da      	lsls	r2, r3, #31
 800bf38:	d437      	bmi.n	800bfaa <_printf_float+0x386>
 800bf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3c:	ebaa 0903 	sub.w	r9, sl, r3
 800bf40:	9b06      	ldr	r3, [sp, #24]
 800bf42:	ebaa 0303 	sub.w	r3, sl, r3
 800bf46:	4599      	cmp	r9, r3
 800bf48:	bfa8      	it	ge
 800bf4a:	4699      	movge	r9, r3
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	dc33      	bgt.n	800bfba <_printf_float+0x396>
 800bf52:	f04f 0800 	mov.w	r8, #0
 800bf56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf5a:	f104 0b1a 	add.w	fp, r4, #26
 800bf5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf60:	ebaa 0303 	sub.w	r3, sl, r3
 800bf64:	eba3 0309 	sub.w	r3, r3, r9
 800bf68:	4543      	cmp	r3, r8
 800bf6a:	f77f af79 	ble.w	800be60 <_printf_float+0x23c>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	465a      	mov	r2, fp
 800bf72:	4631      	mov	r1, r6
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b8      	blx	r7
 800bf78:	3001      	adds	r0, #1
 800bf7a:	f43f aeae 	beq.w	800bcda <_printf_float+0xb6>
 800bf7e:	f108 0801 	add.w	r8, r8, #1
 800bf82:	e7ec      	b.n	800bf5e <_printf_float+0x33a>
 800bf84:	4642      	mov	r2, r8
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d1c2      	bne.n	800bf16 <_printf_float+0x2f2>
 800bf90:	e6a3      	b.n	800bcda <_printf_float+0xb6>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4631      	mov	r1, r6
 800bf96:	4628      	mov	r0, r5
 800bf98:	9206      	str	r2, [sp, #24]
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f43f ae9c 	beq.w	800bcda <_printf_float+0xb6>
 800bfa2:	9a06      	ldr	r2, [sp, #24]
 800bfa4:	f10b 0b01 	add.w	fp, fp, #1
 800bfa8:	e7bb      	b.n	800bf22 <_printf_float+0x2fe>
 800bfaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfae:	4631      	mov	r1, r6
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	47b8      	blx	r7
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	d1c0      	bne.n	800bf3a <_printf_float+0x316>
 800bfb8:	e68f      	b.n	800bcda <_printf_float+0xb6>
 800bfba:	9a06      	ldr	r2, [sp, #24]
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	4442      	add	r2, r8
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	47b8      	blx	r7
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d1c3      	bne.n	800bf52 <_printf_float+0x32e>
 800bfca:	e686      	b.n	800bcda <_printf_float+0xb6>
 800bfcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bfd0:	f1ba 0f01 	cmp.w	sl, #1
 800bfd4:	dc01      	bgt.n	800bfda <_printf_float+0x3b6>
 800bfd6:	07db      	lsls	r3, r3, #31
 800bfd8:	d536      	bpl.n	800c048 <_printf_float+0x424>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	4642      	mov	r2, r8
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b8      	blx	r7
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f43f ae78 	beq.w	800bcda <_printf_float+0xb6>
 800bfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfee:	4631      	mov	r1, r6
 800bff0:	4628      	mov	r0, r5
 800bff2:	47b8      	blx	r7
 800bff4:	3001      	adds	r0, #1
 800bff6:	f43f ae70 	beq.w	800bcda <_printf_float+0xb6>
 800bffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bffe:	2200      	movs	r2, #0
 800c000:	2300      	movs	r3, #0
 800c002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c006:	f7f4 fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 800c00a:	b9c0      	cbnz	r0, 800c03e <_printf_float+0x41a>
 800c00c:	4653      	mov	r3, sl
 800c00e:	f108 0201 	add.w	r2, r8, #1
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	d10c      	bne.n	800c036 <_printf_float+0x412>
 800c01c:	e65d      	b.n	800bcda <_printf_float+0xb6>
 800c01e:	2301      	movs	r3, #1
 800c020:	465a      	mov	r2, fp
 800c022:	4631      	mov	r1, r6
 800c024:	4628      	mov	r0, r5
 800c026:	47b8      	blx	r7
 800c028:	3001      	adds	r0, #1
 800c02a:	f43f ae56 	beq.w	800bcda <_printf_float+0xb6>
 800c02e:	f108 0801 	add.w	r8, r8, #1
 800c032:	45d0      	cmp	r8, sl
 800c034:	dbf3      	blt.n	800c01e <_printf_float+0x3fa>
 800c036:	464b      	mov	r3, r9
 800c038:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c03c:	e6df      	b.n	800bdfe <_printf_float+0x1da>
 800c03e:	f04f 0800 	mov.w	r8, #0
 800c042:	f104 0b1a 	add.w	fp, r4, #26
 800c046:	e7f4      	b.n	800c032 <_printf_float+0x40e>
 800c048:	2301      	movs	r3, #1
 800c04a:	4642      	mov	r2, r8
 800c04c:	e7e1      	b.n	800c012 <_printf_float+0x3ee>
 800c04e:	2301      	movs	r3, #1
 800c050:	464a      	mov	r2, r9
 800c052:	4631      	mov	r1, r6
 800c054:	4628      	mov	r0, r5
 800c056:	47b8      	blx	r7
 800c058:	3001      	adds	r0, #1
 800c05a:	f43f ae3e 	beq.w	800bcda <_printf_float+0xb6>
 800c05e:	f108 0801 	add.w	r8, r8, #1
 800c062:	68e3      	ldr	r3, [r4, #12]
 800c064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c066:	1a5b      	subs	r3, r3, r1
 800c068:	4543      	cmp	r3, r8
 800c06a:	dcf0      	bgt.n	800c04e <_printf_float+0x42a>
 800c06c:	e6fc      	b.n	800be68 <_printf_float+0x244>
 800c06e:	f04f 0800 	mov.w	r8, #0
 800c072:	f104 0919 	add.w	r9, r4, #25
 800c076:	e7f4      	b.n	800c062 <_printf_float+0x43e>

0800c078 <_printf_common>:
 800c078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	4616      	mov	r6, r2
 800c07e:	4698      	mov	r8, r3
 800c080:	688a      	ldr	r2, [r1, #8]
 800c082:	690b      	ldr	r3, [r1, #16]
 800c084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c088:	4293      	cmp	r3, r2
 800c08a:	bfb8      	it	lt
 800c08c:	4613      	movlt	r3, r2
 800c08e:	6033      	str	r3, [r6, #0]
 800c090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c094:	4607      	mov	r7, r0
 800c096:	460c      	mov	r4, r1
 800c098:	b10a      	cbz	r2, 800c09e <_printf_common+0x26>
 800c09a:	3301      	adds	r3, #1
 800c09c:	6033      	str	r3, [r6, #0]
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	0699      	lsls	r1, r3, #26
 800c0a2:	bf42      	ittt	mi
 800c0a4:	6833      	ldrmi	r3, [r6, #0]
 800c0a6:	3302      	addmi	r3, #2
 800c0a8:	6033      	strmi	r3, [r6, #0]
 800c0aa:	6825      	ldr	r5, [r4, #0]
 800c0ac:	f015 0506 	ands.w	r5, r5, #6
 800c0b0:	d106      	bne.n	800c0c0 <_printf_common+0x48>
 800c0b2:	f104 0a19 	add.w	sl, r4, #25
 800c0b6:	68e3      	ldr	r3, [r4, #12]
 800c0b8:	6832      	ldr	r2, [r6, #0]
 800c0ba:	1a9b      	subs	r3, r3, r2
 800c0bc:	42ab      	cmp	r3, r5
 800c0be:	dc26      	bgt.n	800c10e <_printf_common+0x96>
 800c0c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0c4:	6822      	ldr	r2, [r4, #0]
 800c0c6:	3b00      	subs	r3, #0
 800c0c8:	bf18      	it	ne
 800c0ca:	2301      	movne	r3, #1
 800c0cc:	0692      	lsls	r2, r2, #26
 800c0ce:	d42b      	bmi.n	800c128 <_printf_common+0xb0>
 800c0d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0d4:	4641      	mov	r1, r8
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	47c8      	blx	r9
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d01e      	beq.n	800c11c <_printf_common+0xa4>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	f003 0306 	and.w	r3, r3, #6
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	bf02      	ittt	eq
 800c0ea:	68e5      	ldreq	r5, [r4, #12]
 800c0ec:	6833      	ldreq	r3, [r6, #0]
 800c0ee:	1aed      	subeq	r5, r5, r3
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	bf0c      	ite	eq
 800c0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0f8:	2500      	movne	r5, #0
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	bfc4      	itt	gt
 800c0fe:	1a9b      	subgt	r3, r3, r2
 800c100:	18ed      	addgt	r5, r5, r3
 800c102:	2600      	movs	r6, #0
 800c104:	341a      	adds	r4, #26
 800c106:	42b5      	cmp	r5, r6
 800c108:	d11a      	bne.n	800c140 <_printf_common+0xc8>
 800c10a:	2000      	movs	r0, #0
 800c10c:	e008      	b.n	800c120 <_printf_common+0xa8>
 800c10e:	2301      	movs	r3, #1
 800c110:	4652      	mov	r2, sl
 800c112:	4641      	mov	r1, r8
 800c114:	4638      	mov	r0, r7
 800c116:	47c8      	blx	r9
 800c118:	3001      	adds	r0, #1
 800c11a:	d103      	bne.n	800c124 <_printf_common+0xac>
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	3501      	adds	r5, #1
 800c126:	e7c6      	b.n	800c0b6 <_printf_common+0x3e>
 800c128:	18e1      	adds	r1, r4, r3
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	2030      	movs	r0, #48	@ 0x30
 800c12e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c132:	4422      	add	r2, r4
 800c134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c13c:	3302      	adds	r3, #2
 800c13e:	e7c7      	b.n	800c0d0 <_printf_common+0x58>
 800c140:	2301      	movs	r3, #1
 800c142:	4622      	mov	r2, r4
 800c144:	4641      	mov	r1, r8
 800c146:	4638      	mov	r0, r7
 800c148:	47c8      	blx	r9
 800c14a:	3001      	adds	r0, #1
 800c14c:	d0e6      	beq.n	800c11c <_printf_common+0xa4>
 800c14e:	3601      	adds	r6, #1
 800c150:	e7d9      	b.n	800c106 <_printf_common+0x8e>
	...

0800c154 <_printf_i>:
 800c154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	7e0f      	ldrb	r7, [r1, #24]
 800c15a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c15c:	2f78      	cmp	r7, #120	@ 0x78
 800c15e:	4691      	mov	r9, r2
 800c160:	4680      	mov	r8, r0
 800c162:	460c      	mov	r4, r1
 800c164:	469a      	mov	sl, r3
 800c166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c16a:	d807      	bhi.n	800c17c <_printf_i+0x28>
 800c16c:	2f62      	cmp	r7, #98	@ 0x62
 800c16e:	d80a      	bhi.n	800c186 <_printf_i+0x32>
 800c170:	2f00      	cmp	r7, #0
 800c172:	f000 80d2 	beq.w	800c31a <_printf_i+0x1c6>
 800c176:	2f58      	cmp	r7, #88	@ 0x58
 800c178:	f000 80b9 	beq.w	800c2ee <_printf_i+0x19a>
 800c17c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c184:	e03a      	b.n	800c1fc <_printf_i+0xa8>
 800c186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c18a:	2b15      	cmp	r3, #21
 800c18c:	d8f6      	bhi.n	800c17c <_printf_i+0x28>
 800c18e:	a101      	add	r1, pc, #4	@ (adr r1, 800c194 <_printf_i+0x40>)
 800c190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c194:	0800c1ed 	.word	0x0800c1ed
 800c198:	0800c201 	.word	0x0800c201
 800c19c:	0800c17d 	.word	0x0800c17d
 800c1a0:	0800c17d 	.word	0x0800c17d
 800c1a4:	0800c17d 	.word	0x0800c17d
 800c1a8:	0800c17d 	.word	0x0800c17d
 800c1ac:	0800c201 	.word	0x0800c201
 800c1b0:	0800c17d 	.word	0x0800c17d
 800c1b4:	0800c17d 	.word	0x0800c17d
 800c1b8:	0800c17d 	.word	0x0800c17d
 800c1bc:	0800c17d 	.word	0x0800c17d
 800c1c0:	0800c301 	.word	0x0800c301
 800c1c4:	0800c22b 	.word	0x0800c22b
 800c1c8:	0800c2bb 	.word	0x0800c2bb
 800c1cc:	0800c17d 	.word	0x0800c17d
 800c1d0:	0800c17d 	.word	0x0800c17d
 800c1d4:	0800c323 	.word	0x0800c323
 800c1d8:	0800c17d 	.word	0x0800c17d
 800c1dc:	0800c22b 	.word	0x0800c22b
 800c1e0:	0800c17d 	.word	0x0800c17d
 800c1e4:	0800c17d 	.word	0x0800c17d
 800c1e8:	0800c2c3 	.word	0x0800c2c3
 800c1ec:	6833      	ldr	r3, [r6, #0]
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	6032      	str	r2, [r6, #0]
 800c1f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e09d      	b.n	800c33c <_printf_i+0x1e8>
 800c200:	6833      	ldr	r3, [r6, #0]
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	1d19      	adds	r1, r3, #4
 800c206:	6031      	str	r1, [r6, #0]
 800c208:	0606      	lsls	r6, r0, #24
 800c20a:	d501      	bpl.n	800c210 <_printf_i+0xbc>
 800c20c:	681d      	ldr	r5, [r3, #0]
 800c20e:	e003      	b.n	800c218 <_printf_i+0xc4>
 800c210:	0645      	lsls	r5, r0, #25
 800c212:	d5fb      	bpl.n	800c20c <_printf_i+0xb8>
 800c214:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c218:	2d00      	cmp	r5, #0
 800c21a:	da03      	bge.n	800c224 <_printf_i+0xd0>
 800c21c:	232d      	movs	r3, #45	@ 0x2d
 800c21e:	426d      	negs	r5, r5
 800c220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c224:	4859      	ldr	r0, [pc, #356]	@ (800c38c <_printf_i+0x238>)
 800c226:	230a      	movs	r3, #10
 800c228:	e011      	b.n	800c24e <_printf_i+0xfa>
 800c22a:	6821      	ldr	r1, [r4, #0]
 800c22c:	6833      	ldr	r3, [r6, #0]
 800c22e:	0608      	lsls	r0, r1, #24
 800c230:	f853 5b04 	ldr.w	r5, [r3], #4
 800c234:	d402      	bmi.n	800c23c <_printf_i+0xe8>
 800c236:	0649      	lsls	r1, r1, #25
 800c238:	bf48      	it	mi
 800c23a:	b2ad      	uxthmi	r5, r5
 800c23c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c23e:	4853      	ldr	r0, [pc, #332]	@ (800c38c <_printf_i+0x238>)
 800c240:	6033      	str	r3, [r6, #0]
 800c242:	bf14      	ite	ne
 800c244:	230a      	movne	r3, #10
 800c246:	2308      	moveq	r3, #8
 800c248:	2100      	movs	r1, #0
 800c24a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c24e:	6866      	ldr	r6, [r4, #4]
 800c250:	60a6      	str	r6, [r4, #8]
 800c252:	2e00      	cmp	r6, #0
 800c254:	bfa2      	ittt	ge
 800c256:	6821      	ldrge	r1, [r4, #0]
 800c258:	f021 0104 	bicge.w	r1, r1, #4
 800c25c:	6021      	strge	r1, [r4, #0]
 800c25e:	b90d      	cbnz	r5, 800c264 <_printf_i+0x110>
 800c260:	2e00      	cmp	r6, #0
 800c262:	d04b      	beq.n	800c2fc <_printf_i+0x1a8>
 800c264:	4616      	mov	r6, r2
 800c266:	fbb5 f1f3 	udiv	r1, r5, r3
 800c26a:	fb03 5711 	mls	r7, r3, r1, r5
 800c26e:	5dc7      	ldrb	r7, [r0, r7]
 800c270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c274:	462f      	mov	r7, r5
 800c276:	42bb      	cmp	r3, r7
 800c278:	460d      	mov	r5, r1
 800c27a:	d9f4      	bls.n	800c266 <_printf_i+0x112>
 800c27c:	2b08      	cmp	r3, #8
 800c27e:	d10b      	bne.n	800c298 <_printf_i+0x144>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	07df      	lsls	r7, r3, #31
 800c284:	d508      	bpl.n	800c298 <_printf_i+0x144>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	6861      	ldr	r1, [r4, #4]
 800c28a:	4299      	cmp	r1, r3
 800c28c:	bfde      	ittt	le
 800c28e:	2330      	movle	r3, #48	@ 0x30
 800c290:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c294:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c298:	1b92      	subs	r2, r2, r6
 800c29a:	6122      	str	r2, [r4, #16]
 800c29c:	f8cd a000 	str.w	sl, [sp]
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	aa03      	add	r2, sp, #12
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	f7ff fee6 	bl	800c078 <_printf_common>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d14a      	bne.n	800c346 <_printf_i+0x1f2>
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	b004      	add	sp, #16
 800c2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	f043 0320 	orr.w	r3, r3, #32
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	4833      	ldr	r0, [pc, #204]	@ (800c390 <_printf_i+0x23c>)
 800c2c4:	2778      	movs	r7, #120	@ 0x78
 800c2c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	6831      	ldr	r1, [r6, #0]
 800c2ce:	061f      	lsls	r7, r3, #24
 800c2d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2d4:	d402      	bmi.n	800c2dc <_printf_i+0x188>
 800c2d6:	065f      	lsls	r7, r3, #25
 800c2d8:	bf48      	it	mi
 800c2da:	b2ad      	uxthmi	r5, r5
 800c2dc:	6031      	str	r1, [r6, #0]
 800c2de:	07d9      	lsls	r1, r3, #31
 800c2e0:	bf44      	itt	mi
 800c2e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e6:	6023      	strmi	r3, [r4, #0]
 800c2e8:	b11d      	cbz	r5, 800c2f2 <_printf_i+0x19e>
 800c2ea:	2310      	movs	r3, #16
 800c2ec:	e7ac      	b.n	800c248 <_printf_i+0xf4>
 800c2ee:	4827      	ldr	r0, [pc, #156]	@ (800c38c <_printf_i+0x238>)
 800c2f0:	e7e9      	b.n	800c2c6 <_printf_i+0x172>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	f023 0320 	bic.w	r3, r3, #32
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	e7f6      	b.n	800c2ea <_printf_i+0x196>
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	e7bd      	b.n	800c27c <_printf_i+0x128>
 800c300:	6833      	ldr	r3, [r6, #0]
 800c302:	6825      	ldr	r5, [r4, #0]
 800c304:	6961      	ldr	r1, [r4, #20]
 800c306:	1d18      	adds	r0, r3, #4
 800c308:	6030      	str	r0, [r6, #0]
 800c30a:	062e      	lsls	r6, r5, #24
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	d501      	bpl.n	800c314 <_printf_i+0x1c0>
 800c310:	6019      	str	r1, [r3, #0]
 800c312:	e002      	b.n	800c31a <_printf_i+0x1c6>
 800c314:	0668      	lsls	r0, r5, #25
 800c316:	d5fb      	bpl.n	800c310 <_printf_i+0x1bc>
 800c318:	8019      	strh	r1, [r3, #0]
 800c31a:	2300      	movs	r3, #0
 800c31c:	6123      	str	r3, [r4, #16]
 800c31e:	4616      	mov	r6, r2
 800c320:	e7bc      	b.n	800c29c <_printf_i+0x148>
 800c322:	6833      	ldr	r3, [r6, #0]
 800c324:	1d1a      	adds	r2, r3, #4
 800c326:	6032      	str	r2, [r6, #0]
 800c328:	681e      	ldr	r6, [r3, #0]
 800c32a:	6862      	ldr	r2, [r4, #4]
 800c32c:	2100      	movs	r1, #0
 800c32e:	4630      	mov	r0, r6
 800c330:	f7f3 ff6e 	bl	8000210 <memchr>
 800c334:	b108      	cbz	r0, 800c33a <_printf_i+0x1e6>
 800c336:	1b80      	subs	r0, r0, r6
 800c338:	6060      	str	r0, [r4, #4]
 800c33a:	6863      	ldr	r3, [r4, #4]
 800c33c:	6123      	str	r3, [r4, #16]
 800c33e:	2300      	movs	r3, #0
 800c340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c344:	e7aa      	b.n	800c29c <_printf_i+0x148>
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	4632      	mov	r2, r6
 800c34a:	4649      	mov	r1, r9
 800c34c:	4640      	mov	r0, r8
 800c34e:	47d0      	blx	sl
 800c350:	3001      	adds	r0, #1
 800c352:	d0ad      	beq.n	800c2b0 <_printf_i+0x15c>
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	079b      	lsls	r3, r3, #30
 800c358:	d413      	bmi.n	800c382 <_printf_i+0x22e>
 800c35a:	68e0      	ldr	r0, [r4, #12]
 800c35c:	9b03      	ldr	r3, [sp, #12]
 800c35e:	4298      	cmp	r0, r3
 800c360:	bfb8      	it	lt
 800c362:	4618      	movlt	r0, r3
 800c364:	e7a6      	b.n	800c2b4 <_printf_i+0x160>
 800c366:	2301      	movs	r3, #1
 800c368:	4632      	mov	r2, r6
 800c36a:	4649      	mov	r1, r9
 800c36c:	4640      	mov	r0, r8
 800c36e:	47d0      	blx	sl
 800c370:	3001      	adds	r0, #1
 800c372:	d09d      	beq.n	800c2b0 <_printf_i+0x15c>
 800c374:	3501      	adds	r5, #1
 800c376:	68e3      	ldr	r3, [r4, #12]
 800c378:	9903      	ldr	r1, [sp, #12]
 800c37a:	1a5b      	subs	r3, r3, r1
 800c37c:	42ab      	cmp	r3, r5
 800c37e:	dcf2      	bgt.n	800c366 <_printf_i+0x212>
 800c380:	e7eb      	b.n	800c35a <_printf_i+0x206>
 800c382:	2500      	movs	r5, #0
 800c384:	f104 0619 	add.w	r6, r4, #25
 800c388:	e7f5      	b.n	800c376 <_printf_i+0x222>
 800c38a:	bf00      	nop
 800c38c:	0801238c 	.word	0x0801238c
 800c390:	0801239d 	.word	0x0801239d

0800c394 <_scanf_float>:
 800c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	b087      	sub	sp, #28
 800c39a:	4617      	mov	r7, r2
 800c39c:	9303      	str	r3, [sp, #12]
 800c39e:	688b      	ldr	r3, [r1, #8]
 800c3a0:	1e5a      	subs	r2, r3, #1
 800c3a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c3a6:	bf81      	itttt	hi
 800c3a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c3ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800c3b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c3b4:	608b      	strhi	r3, [r1, #8]
 800c3b6:	680b      	ldr	r3, [r1, #0]
 800c3b8:	460a      	mov	r2, r1
 800c3ba:	f04f 0500 	mov.w	r5, #0
 800c3be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c3c2:	f842 3b1c 	str.w	r3, [r2], #28
 800c3c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c3ca:	4680      	mov	r8, r0
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	bf98      	it	ls
 800c3d0:	f04f 0b00 	movls.w	fp, #0
 800c3d4:	9201      	str	r2, [sp, #4]
 800c3d6:	4616      	mov	r6, r2
 800c3d8:	46aa      	mov	sl, r5
 800c3da:	46a9      	mov	r9, r5
 800c3dc:	9502      	str	r5, [sp, #8]
 800c3de:	68a2      	ldr	r2, [r4, #8]
 800c3e0:	b152      	cbz	r2, 800c3f8 <_scanf_float+0x64>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b4e      	cmp	r3, #78	@ 0x4e
 800c3e8:	d864      	bhi.n	800c4b4 <_scanf_float+0x120>
 800c3ea:	2b40      	cmp	r3, #64	@ 0x40
 800c3ec:	d83c      	bhi.n	800c468 <_scanf_float+0xd4>
 800c3ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c3f2:	b2c8      	uxtb	r0, r1
 800c3f4:	280e      	cmp	r0, #14
 800c3f6:	d93a      	bls.n	800c46e <_scanf_float+0xda>
 800c3f8:	f1b9 0f00 	cmp.w	r9, #0
 800c3fc:	d003      	beq.n	800c406 <_scanf_float+0x72>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c40a:	f1ba 0f01 	cmp.w	sl, #1
 800c40e:	f200 8117 	bhi.w	800c640 <_scanf_float+0x2ac>
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	429e      	cmp	r6, r3
 800c416:	f200 8108 	bhi.w	800c62a <_scanf_float+0x296>
 800c41a:	2001      	movs	r0, #1
 800c41c:	b007      	add	sp, #28
 800c41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c422:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c426:	2a0d      	cmp	r2, #13
 800c428:	d8e6      	bhi.n	800c3f8 <_scanf_float+0x64>
 800c42a:	a101      	add	r1, pc, #4	@ (adr r1, 800c430 <_scanf_float+0x9c>)
 800c42c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c430:	0800c577 	.word	0x0800c577
 800c434:	0800c3f9 	.word	0x0800c3f9
 800c438:	0800c3f9 	.word	0x0800c3f9
 800c43c:	0800c3f9 	.word	0x0800c3f9
 800c440:	0800c5d7 	.word	0x0800c5d7
 800c444:	0800c5af 	.word	0x0800c5af
 800c448:	0800c3f9 	.word	0x0800c3f9
 800c44c:	0800c3f9 	.word	0x0800c3f9
 800c450:	0800c585 	.word	0x0800c585
 800c454:	0800c3f9 	.word	0x0800c3f9
 800c458:	0800c3f9 	.word	0x0800c3f9
 800c45c:	0800c3f9 	.word	0x0800c3f9
 800c460:	0800c3f9 	.word	0x0800c3f9
 800c464:	0800c53d 	.word	0x0800c53d
 800c468:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c46c:	e7db      	b.n	800c426 <_scanf_float+0x92>
 800c46e:	290e      	cmp	r1, #14
 800c470:	d8c2      	bhi.n	800c3f8 <_scanf_float+0x64>
 800c472:	a001      	add	r0, pc, #4	@ (adr r0, 800c478 <_scanf_float+0xe4>)
 800c474:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c478:	0800c52d 	.word	0x0800c52d
 800c47c:	0800c3f9 	.word	0x0800c3f9
 800c480:	0800c52d 	.word	0x0800c52d
 800c484:	0800c5c3 	.word	0x0800c5c3
 800c488:	0800c3f9 	.word	0x0800c3f9
 800c48c:	0800c4d5 	.word	0x0800c4d5
 800c490:	0800c513 	.word	0x0800c513
 800c494:	0800c513 	.word	0x0800c513
 800c498:	0800c513 	.word	0x0800c513
 800c49c:	0800c513 	.word	0x0800c513
 800c4a0:	0800c513 	.word	0x0800c513
 800c4a4:	0800c513 	.word	0x0800c513
 800c4a8:	0800c513 	.word	0x0800c513
 800c4ac:	0800c513 	.word	0x0800c513
 800c4b0:	0800c513 	.word	0x0800c513
 800c4b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c4b6:	d809      	bhi.n	800c4cc <_scanf_float+0x138>
 800c4b8:	2b60      	cmp	r3, #96	@ 0x60
 800c4ba:	d8b2      	bhi.n	800c422 <_scanf_float+0x8e>
 800c4bc:	2b54      	cmp	r3, #84	@ 0x54
 800c4be:	d07b      	beq.n	800c5b8 <_scanf_float+0x224>
 800c4c0:	2b59      	cmp	r3, #89	@ 0x59
 800c4c2:	d199      	bne.n	800c3f8 <_scanf_float+0x64>
 800c4c4:	2d07      	cmp	r5, #7
 800c4c6:	d197      	bne.n	800c3f8 <_scanf_float+0x64>
 800c4c8:	2508      	movs	r5, #8
 800c4ca:	e02c      	b.n	800c526 <_scanf_float+0x192>
 800c4cc:	2b74      	cmp	r3, #116	@ 0x74
 800c4ce:	d073      	beq.n	800c5b8 <_scanf_float+0x224>
 800c4d0:	2b79      	cmp	r3, #121	@ 0x79
 800c4d2:	e7f6      	b.n	800c4c2 <_scanf_float+0x12e>
 800c4d4:	6821      	ldr	r1, [r4, #0]
 800c4d6:	05c8      	lsls	r0, r1, #23
 800c4d8:	d51b      	bpl.n	800c512 <_scanf_float+0x17e>
 800c4da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c4de:	6021      	str	r1, [r4, #0]
 800c4e0:	f109 0901 	add.w	r9, r9, #1
 800c4e4:	f1bb 0f00 	cmp.w	fp, #0
 800c4e8:	d003      	beq.n	800c4f2 <_scanf_float+0x15e>
 800c4ea:	3201      	adds	r2, #1
 800c4ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4f0:	60a2      	str	r2, [r4, #8]
 800c4f2:	68a3      	ldr	r3, [r4, #8]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	60a3      	str	r3, [r4, #8]
 800c4f8:	6923      	ldr	r3, [r4, #16]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	6123      	str	r3, [r4, #16]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3b01      	subs	r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	607b      	str	r3, [r7, #4]
 800c506:	f340 8087 	ble.w	800c618 <_scanf_float+0x284>
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	3301      	adds	r3, #1
 800c50e:	603b      	str	r3, [r7, #0]
 800c510:	e765      	b.n	800c3de <_scanf_float+0x4a>
 800c512:	eb1a 0105 	adds.w	r1, sl, r5
 800c516:	f47f af6f 	bne.w	800c3f8 <_scanf_float+0x64>
 800c51a:	6822      	ldr	r2, [r4, #0]
 800c51c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c520:	6022      	str	r2, [r4, #0]
 800c522:	460d      	mov	r5, r1
 800c524:	468a      	mov	sl, r1
 800c526:	f806 3b01 	strb.w	r3, [r6], #1
 800c52a:	e7e2      	b.n	800c4f2 <_scanf_float+0x15e>
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	0610      	lsls	r0, r2, #24
 800c530:	f57f af62 	bpl.w	800c3f8 <_scanf_float+0x64>
 800c534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c538:	6022      	str	r2, [r4, #0]
 800c53a:	e7f4      	b.n	800c526 <_scanf_float+0x192>
 800c53c:	f1ba 0f00 	cmp.w	sl, #0
 800c540:	d10e      	bne.n	800c560 <_scanf_float+0x1cc>
 800c542:	f1b9 0f00 	cmp.w	r9, #0
 800c546:	d10e      	bne.n	800c566 <_scanf_float+0x1d2>
 800c548:	6822      	ldr	r2, [r4, #0]
 800c54a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c54e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c552:	d108      	bne.n	800c566 <_scanf_float+0x1d2>
 800c554:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c558:	6022      	str	r2, [r4, #0]
 800c55a:	f04f 0a01 	mov.w	sl, #1
 800c55e:	e7e2      	b.n	800c526 <_scanf_float+0x192>
 800c560:	f1ba 0f02 	cmp.w	sl, #2
 800c564:	d055      	beq.n	800c612 <_scanf_float+0x27e>
 800c566:	2d01      	cmp	r5, #1
 800c568:	d002      	beq.n	800c570 <_scanf_float+0x1dc>
 800c56a:	2d04      	cmp	r5, #4
 800c56c:	f47f af44 	bne.w	800c3f8 <_scanf_float+0x64>
 800c570:	3501      	adds	r5, #1
 800c572:	b2ed      	uxtb	r5, r5
 800c574:	e7d7      	b.n	800c526 <_scanf_float+0x192>
 800c576:	f1ba 0f01 	cmp.w	sl, #1
 800c57a:	f47f af3d 	bne.w	800c3f8 <_scanf_float+0x64>
 800c57e:	f04f 0a02 	mov.w	sl, #2
 800c582:	e7d0      	b.n	800c526 <_scanf_float+0x192>
 800c584:	b97d      	cbnz	r5, 800c5a6 <_scanf_float+0x212>
 800c586:	f1b9 0f00 	cmp.w	r9, #0
 800c58a:	f47f af38 	bne.w	800c3fe <_scanf_float+0x6a>
 800c58e:	6822      	ldr	r2, [r4, #0]
 800c590:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c594:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c598:	f040 8108 	bne.w	800c7ac <_scanf_float+0x418>
 800c59c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5a0:	6022      	str	r2, [r4, #0]
 800c5a2:	2501      	movs	r5, #1
 800c5a4:	e7bf      	b.n	800c526 <_scanf_float+0x192>
 800c5a6:	2d03      	cmp	r5, #3
 800c5a8:	d0e2      	beq.n	800c570 <_scanf_float+0x1dc>
 800c5aa:	2d05      	cmp	r5, #5
 800c5ac:	e7de      	b.n	800c56c <_scanf_float+0x1d8>
 800c5ae:	2d02      	cmp	r5, #2
 800c5b0:	f47f af22 	bne.w	800c3f8 <_scanf_float+0x64>
 800c5b4:	2503      	movs	r5, #3
 800c5b6:	e7b6      	b.n	800c526 <_scanf_float+0x192>
 800c5b8:	2d06      	cmp	r5, #6
 800c5ba:	f47f af1d 	bne.w	800c3f8 <_scanf_float+0x64>
 800c5be:	2507      	movs	r5, #7
 800c5c0:	e7b1      	b.n	800c526 <_scanf_float+0x192>
 800c5c2:	6822      	ldr	r2, [r4, #0]
 800c5c4:	0591      	lsls	r1, r2, #22
 800c5c6:	f57f af17 	bpl.w	800c3f8 <_scanf_float+0x64>
 800c5ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c5ce:	6022      	str	r2, [r4, #0]
 800c5d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5d4:	e7a7      	b.n	800c526 <_scanf_float+0x192>
 800c5d6:	6822      	ldr	r2, [r4, #0]
 800c5d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c5dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c5e0:	d006      	beq.n	800c5f0 <_scanf_float+0x25c>
 800c5e2:	0550      	lsls	r0, r2, #21
 800c5e4:	f57f af08 	bpl.w	800c3f8 <_scanf_float+0x64>
 800c5e8:	f1b9 0f00 	cmp.w	r9, #0
 800c5ec:	f000 80de 	beq.w	800c7ac <_scanf_float+0x418>
 800c5f0:	0591      	lsls	r1, r2, #22
 800c5f2:	bf58      	it	pl
 800c5f4:	9902      	ldrpl	r1, [sp, #8]
 800c5f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5fa:	bf58      	it	pl
 800c5fc:	eba9 0101 	subpl.w	r1, r9, r1
 800c600:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c604:	bf58      	it	pl
 800c606:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c60a:	6022      	str	r2, [r4, #0]
 800c60c:	f04f 0900 	mov.w	r9, #0
 800c610:	e789      	b.n	800c526 <_scanf_float+0x192>
 800c612:	f04f 0a03 	mov.w	sl, #3
 800c616:	e786      	b.n	800c526 <_scanf_float+0x192>
 800c618:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c61c:	4639      	mov	r1, r7
 800c61e:	4640      	mov	r0, r8
 800c620:	4798      	blx	r3
 800c622:	2800      	cmp	r0, #0
 800c624:	f43f aedb 	beq.w	800c3de <_scanf_float+0x4a>
 800c628:	e6e6      	b.n	800c3f8 <_scanf_float+0x64>
 800c62a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c62e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c632:	463a      	mov	r2, r7
 800c634:	4640      	mov	r0, r8
 800c636:	4798      	blx	r3
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	6123      	str	r3, [r4, #16]
 800c63e:	e6e8      	b.n	800c412 <_scanf_float+0x7e>
 800c640:	1e6b      	subs	r3, r5, #1
 800c642:	2b06      	cmp	r3, #6
 800c644:	d824      	bhi.n	800c690 <_scanf_float+0x2fc>
 800c646:	2d02      	cmp	r5, #2
 800c648:	d836      	bhi.n	800c6b8 <_scanf_float+0x324>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	429e      	cmp	r6, r3
 800c64e:	f67f aee4 	bls.w	800c41a <_scanf_float+0x86>
 800c652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c65a:	463a      	mov	r2, r7
 800c65c:	4640      	mov	r0, r8
 800c65e:	4798      	blx	r3
 800c660:	6923      	ldr	r3, [r4, #16]
 800c662:	3b01      	subs	r3, #1
 800c664:	6123      	str	r3, [r4, #16]
 800c666:	e7f0      	b.n	800c64a <_scanf_float+0x2b6>
 800c668:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c66c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c670:	463a      	mov	r2, r7
 800c672:	4640      	mov	r0, r8
 800c674:	4798      	blx	r3
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	3b01      	subs	r3, #1
 800c67a:	6123      	str	r3, [r4, #16]
 800c67c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c680:	fa5f fa8a 	uxtb.w	sl, sl
 800c684:	f1ba 0f02 	cmp.w	sl, #2
 800c688:	d1ee      	bne.n	800c668 <_scanf_float+0x2d4>
 800c68a:	3d03      	subs	r5, #3
 800c68c:	b2ed      	uxtb	r5, r5
 800c68e:	1b76      	subs	r6, r6, r5
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	05da      	lsls	r2, r3, #23
 800c694:	d530      	bpl.n	800c6f8 <_scanf_float+0x364>
 800c696:	055b      	lsls	r3, r3, #21
 800c698:	d511      	bpl.n	800c6be <_scanf_float+0x32a>
 800c69a:	9b01      	ldr	r3, [sp, #4]
 800c69c:	429e      	cmp	r6, r3
 800c69e:	f67f aebc 	bls.w	800c41a <_scanf_float+0x86>
 800c6a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6aa:	463a      	mov	r2, r7
 800c6ac:	4640      	mov	r0, r8
 800c6ae:	4798      	blx	r3
 800c6b0:	6923      	ldr	r3, [r4, #16]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	e7f0      	b.n	800c69a <_scanf_float+0x306>
 800c6b8:	46aa      	mov	sl, r5
 800c6ba:	46b3      	mov	fp, r6
 800c6bc:	e7de      	b.n	800c67c <_scanf_float+0x2e8>
 800c6be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c6c2:	6923      	ldr	r3, [r4, #16]
 800c6c4:	2965      	cmp	r1, #101	@ 0x65
 800c6c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800c6ce:	6123      	str	r3, [r4, #16]
 800c6d0:	d00c      	beq.n	800c6ec <_scanf_float+0x358>
 800c6d2:	2945      	cmp	r1, #69	@ 0x45
 800c6d4:	d00a      	beq.n	800c6ec <_scanf_float+0x358>
 800c6d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6da:	463a      	mov	r2, r7
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4798      	blx	r3
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	1eb5      	subs	r5, r6, #2
 800c6ea:	6123      	str	r3, [r4, #16]
 800c6ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6f0:	463a      	mov	r2, r7
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	4798      	blx	r3
 800c6f6:	462e      	mov	r6, r5
 800c6f8:	6822      	ldr	r2, [r4, #0]
 800c6fa:	f012 0210 	ands.w	r2, r2, #16
 800c6fe:	d001      	beq.n	800c704 <_scanf_float+0x370>
 800c700:	2000      	movs	r0, #0
 800c702:	e68b      	b.n	800c41c <_scanf_float+0x88>
 800c704:	7032      	strb	r2, [r6, #0]
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c70c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c710:	d11c      	bne.n	800c74c <_scanf_float+0x3b8>
 800c712:	9b02      	ldr	r3, [sp, #8]
 800c714:	454b      	cmp	r3, r9
 800c716:	eba3 0209 	sub.w	r2, r3, r9
 800c71a:	d123      	bne.n	800c764 <_scanf_float+0x3d0>
 800c71c:	9901      	ldr	r1, [sp, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	4640      	mov	r0, r8
 800c722:	f002 fbf1 	bl	800ef08 <_strtod_r>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	6821      	ldr	r1, [r4, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f011 0f02 	tst.w	r1, #2
 800c730:	ec57 6b10 	vmov	r6, r7, d0
 800c734:	f103 0204 	add.w	r2, r3, #4
 800c738:	d01f      	beq.n	800c77a <_scanf_float+0x3e6>
 800c73a:	9903      	ldr	r1, [sp, #12]
 800c73c:	600a      	str	r2, [r1, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	e9c3 6700 	strd	r6, r7, [r3]
 800c744:	68e3      	ldr	r3, [r4, #12]
 800c746:	3301      	adds	r3, #1
 800c748:	60e3      	str	r3, [r4, #12]
 800c74a:	e7d9      	b.n	800c700 <_scanf_float+0x36c>
 800c74c:	9b04      	ldr	r3, [sp, #16]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0e4      	beq.n	800c71c <_scanf_float+0x388>
 800c752:	9905      	ldr	r1, [sp, #20]
 800c754:	230a      	movs	r3, #10
 800c756:	3101      	adds	r1, #1
 800c758:	4640      	mov	r0, r8
 800c75a:	f002 fc55 	bl	800f008 <_strtol_r>
 800c75e:	9b04      	ldr	r3, [sp, #16]
 800c760:	9e05      	ldr	r6, [sp, #20]
 800c762:	1ac2      	subs	r2, r0, r3
 800c764:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c768:	429e      	cmp	r6, r3
 800c76a:	bf28      	it	cs
 800c76c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c770:	4910      	ldr	r1, [pc, #64]	@ (800c7b4 <_scanf_float+0x420>)
 800c772:	4630      	mov	r0, r6
 800c774:	f000 f918 	bl	800c9a8 <siprintf>
 800c778:	e7d0      	b.n	800c71c <_scanf_float+0x388>
 800c77a:	f011 0f04 	tst.w	r1, #4
 800c77e:	9903      	ldr	r1, [sp, #12]
 800c780:	600a      	str	r2, [r1, #0]
 800c782:	d1dc      	bne.n	800c73e <_scanf_float+0x3aa>
 800c784:	681d      	ldr	r5, [r3, #0]
 800c786:	4632      	mov	r2, r6
 800c788:	463b      	mov	r3, r7
 800c78a:	4630      	mov	r0, r6
 800c78c:	4639      	mov	r1, r7
 800c78e:	f7f4 f9ed 	bl	8000b6c <__aeabi_dcmpun>
 800c792:	b128      	cbz	r0, 800c7a0 <_scanf_float+0x40c>
 800c794:	4808      	ldr	r0, [pc, #32]	@ (800c7b8 <_scanf_float+0x424>)
 800c796:	f000 fa5b 	bl	800cc50 <nanf>
 800c79a:	ed85 0a00 	vstr	s0, [r5]
 800c79e:	e7d1      	b.n	800c744 <_scanf_float+0x3b0>
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	f7f4 fa40 	bl	8000c28 <__aeabi_d2f>
 800c7a8:	6028      	str	r0, [r5, #0]
 800c7aa:	e7cb      	b.n	800c744 <_scanf_float+0x3b0>
 800c7ac:	f04f 0900 	mov.w	r9, #0
 800c7b0:	e629      	b.n	800c406 <_scanf_float+0x72>
 800c7b2:	bf00      	nop
 800c7b4:	080123ae 	.word	0x080123ae
 800c7b8:	08012760 	.word	0x08012760

0800c7bc <std>:
 800c7bc:	2300      	movs	r3, #0
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c7c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7ca:	6083      	str	r3, [r0, #8]
 800c7cc:	8181      	strh	r1, [r0, #12]
 800c7ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800c7d0:	81c2      	strh	r2, [r0, #14]
 800c7d2:	6183      	str	r3, [r0, #24]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	2208      	movs	r2, #8
 800c7d8:	305c      	adds	r0, #92	@ 0x5c
 800c7da:	f000 f984 	bl	800cae6 <memset>
 800c7de:	4b0d      	ldr	r3, [pc, #52]	@ (800c814 <std+0x58>)
 800c7e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c818 <std+0x5c>)
 800c7e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c81c <std+0x60>)
 800c7e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c820 <std+0x64>)
 800c7ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c824 <std+0x68>)
 800c7f0:	6224      	str	r4, [r4, #32]
 800c7f2:	429c      	cmp	r4, r3
 800c7f4:	d006      	beq.n	800c804 <std+0x48>
 800c7f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c7fa:	4294      	cmp	r4, r2
 800c7fc:	d002      	beq.n	800c804 <std+0x48>
 800c7fe:	33d0      	adds	r3, #208	@ 0xd0
 800c800:	429c      	cmp	r4, r3
 800c802:	d105      	bne.n	800c810 <std+0x54>
 800c804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c80c:	f000 ba0e 	b.w	800cc2c <__retarget_lock_init_recursive>
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop
 800c814:	0800ca3d 	.word	0x0800ca3d
 800c818:	0800ca63 	.word	0x0800ca63
 800c81c:	0800ca9b 	.word	0x0800ca9b
 800c820:	0800cabf 	.word	0x0800cabf
 800c824:	20001838 	.word	0x20001838

0800c828 <stdio_exit_handler>:
 800c828:	4a02      	ldr	r2, [pc, #8]	@ (800c834 <stdio_exit_handler+0xc>)
 800c82a:	4903      	ldr	r1, [pc, #12]	@ (800c838 <stdio_exit_handler+0x10>)
 800c82c:	4803      	ldr	r0, [pc, #12]	@ (800c83c <stdio_exit_handler+0x14>)
 800c82e:	f000 b869 	b.w	800c904 <_fwalk_sglue>
 800c832:	bf00      	nop
 800c834:	20000038 	.word	0x20000038
 800c838:	0800f9f9 	.word	0x0800f9f9
 800c83c:	20000048 	.word	0x20000048

0800c840 <cleanup_stdio>:
 800c840:	6841      	ldr	r1, [r0, #4]
 800c842:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <cleanup_stdio+0x34>)
 800c844:	4299      	cmp	r1, r3
 800c846:	b510      	push	{r4, lr}
 800c848:	4604      	mov	r4, r0
 800c84a:	d001      	beq.n	800c850 <cleanup_stdio+0x10>
 800c84c:	f003 f8d4 	bl	800f9f8 <_fflush_r>
 800c850:	68a1      	ldr	r1, [r4, #8]
 800c852:	4b09      	ldr	r3, [pc, #36]	@ (800c878 <cleanup_stdio+0x38>)
 800c854:	4299      	cmp	r1, r3
 800c856:	d002      	beq.n	800c85e <cleanup_stdio+0x1e>
 800c858:	4620      	mov	r0, r4
 800c85a:	f003 f8cd 	bl	800f9f8 <_fflush_r>
 800c85e:	68e1      	ldr	r1, [r4, #12]
 800c860:	4b06      	ldr	r3, [pc, #24]	@ (800c87c <cleanup_stdio+0x3c>)
 800c862:	4299      	cmp	r1, r3
 800c864:	d004      	beq.n	800c870 <cleanup_stdio+0x30>
 800c866:	4620      	mov	r0, r4
 800c868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c86c:	f003 b8c4 	b.w	800f9f8 <_fflush_r>
 800c870:	bd10      	pop	{r4, pc}
 800c872:	bf00      	nop
 800c874:	20001838 	.word	0x20001838
 800c878:	200018a0 	.word	0x200018a0
 800c87c:	20001908 	.word	0x20001908

0800c880 <global_stdio_init.part.0>:
 800c880:	b510      	push	{r4, lr}
 800c882:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b0 <global_stdio_init.part.0+0x30>)
 800c884:	4c0b      	ldr	r4, [pc, #44]	@ (800c8b4 <global_stdio_init.part.0+0x34>)
 800c886:	4a0c      	ldr	r2, [pc, #48]	@ (800c8b8 <global_stdio_init.part.0+0x38>)
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	4620      	mov	r0, r4
 800c88c:	2200      	movs	r2, #0
 800c88e:	2104      	movs	r1, #4
 800c890:	f7ff ff94 	bl	800c7bc <std>
 800c894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c898:	2201      	movs	r2, #1
 800c89a:	2109      	movs	r1, #9
 800c89c:	f7ff ff8e 	bl	800c7bc <std>
 800c8a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8aa:	2112      	movs	r1, #18
 800c8ac:	f7ff bf86 	b.w	800c7bc <std>
 800c8b0:	20001970 	.word	0x20001970
 800c8b4:	20001838 	.word	0x20001838
 800c8b8:	0800c829 	.word	0x0800c829

0800c8bc <__sfp_lock_acquire>:
 800c8bc:	4801      	ldr	r0, [pc, #4]	@ (800c8c4 <__sfp_lock_acquire+0x8>)
 800c8be:	f000 b9b6 	b.w	800cc2e <__retarget_lock_acquire_recursive>
 800c8c2:	bf00      	nop
 800c8c4:	20001979 	.word	0x20001979

0800c8c8 <__sfp_lock_release>:
 800c8c8:	4801      	ldr	r0, [pc, #4]	@ (800c8d0 <__sfp_lock_release+0x8>)
 800c8ca:	f000 b9b1 	b.w	800cc30 <__retarget_lock_release_recursive>
 800c8ce:	bf00      	nop
 800c8d0:	20001979 	.word	0x20001979

0800c8d4 <__sinit>:
 800c8d4:	b510      	push	{r4, lr}
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	f7ff fff0 	bl	800c8bc <__sfp_lock_acquire>
 800c8dc:	6a23      	ldr	r3, [r4, #32]
 800c8de:	b11b      	cbz	r3, 800c8e8 <__sinit+0x14>
 800c8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e4:	f7ff bff0 	b.w	800c8c8 <__sfp_lock_release>
 800c8e8:	4b04      	ldr	r3, [pc, #16]	@ (800c8fc <__sinit+0x28>)
 800c8ea:	6223      	str	r3, [r4, #32]
 800c8ec:	4b04      	ldr	r3, [pc, #16]	@ (800c900 <__sinit+0x2c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f5      	bne.n	800c8e0 <__sinit+0xc>
 800c8f4:	f7ff ffc4 	bl	800c880 <global_stdio_init.part.0>
 800c8f8:	e7f2      	b.n	800c8e0 <__sinit+0xc>
 800c8fa:	bf00      	nop
 800c8fc:	0800c841 	.word	0x0800c841
 800c900:	20001970 	.word	0x20001970

0800c904 <_fwalk_sglue>:
 800c904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c908:	4607      	mov	r7, r0
 800c90a:	4688      	mov	r8, r1
 800c90c:	4614      	mov	r4, r2
 800c90e:	2600      	movs	r6, #0
 800c910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c914:	f1b9 0901 	subs.w	r9, r9, #1
 800c918:	d505      	bpl.n	800c926 <_fwalk_sglue+0x22>
 800c91a:	6824      	ldr	r4, [r4, #0]
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	d1f7      	bne.n	800c910 <_fwalk_sglue+0xc>
 800c920:	4630      	mov	r0, r6
 800c922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c926:	89ab      	ldrh	r3, [r5, #12]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d907      	bls.n	800c93c <_fwalk_sglue+0x38>
 800c92c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c930:	3301      	adds	r3, #1
 800c932:	d003      	beq.n	800c93c <_fwalk_sglue+0x38>
 800c934:	4629      	mov	r1, r5
 800c936:	4638      	mov	r0, r7
 800c938:	47c0      	blx	r8
 800c93a:	4306      	orrs	r6, r0
 800c93c:	3568      	adds	r5, #104	@ 0x68
 800c93e:	e7e9      	b.n	800c914 <_fwalk_sglue+0x10>

0800c940 <sniprintf>:
 800c940:	b40c      	push	{r2, r3}
 800c942:	b530      	push	{r4, r5, lr}
 800c944:	4b17      	ldr	r3, [pc, #92]	@ (800c9a4 <sniprintf+0x64>)
 800c946:	1e0c      	subs	r4, r1, #0
 800c948:	681d      	ldr	r5, [r3, #0]
 800c94a:	b09d      	sub	sp, #116	@ 0x74
 800c94c:	da08      	bge.n	800c960 <sniprintf+0x20>
 800c94e:	238b      	movs	r3, #139	@ 0x8b
 800c950:	602b      	str	r3, [r5, #0]
 800c952:	f04f 30ff 	mov.w	r0, #4294967295
 800c956:	b01d      	add	sp, #116	@ 0x74
 800c958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c95c:	b002      	add	sp, #8
 800c95e:	4770      	bx	lr
 800c960:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c964:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c968:	bf14      	ite	ne
 800c96a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c96e:	4623      	moveq	r3, r4
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	9307      	str	r3, [sp, #28]
 800c974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c978:	9002      	str	r0, [sp, #8]
 800c97a:	9006      	str	r0, [sp, #24]
 800c97c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c980:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c982:	ab21      	add	r3, sp, #132	@ 0x84
 800c984:	a902      	add	r1, sp, #8
 800c986:	4628      	mov	r0, r5
 800c988:	9301      	str	r3, [sp, #4]
 800c98a:	f002 fb9b 	bl	800f0c4 <_svfiprintf_r>
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	bfbc      	itt	lt
 800c992:	238b      	movlt	r3, #139	@ 0x8b
 800c994:	602b      	strlt	r3, [r5, #0]
 800c996:	2c00      	cmp	r4, #0
 800c998:	d0dd      	beq.n	800c956 <sniprintf+0x16>
 800c99a:	9b02      	ldr	r3, [sp, #8]
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
 800c9a0:	e7d9      	b.n	800c956 <sniprintf+0x16>
 800c9a2:	bf00      	nop
 800c9a4:	20000044 	.word	0x20000044

0800c9a8 <siprintf>:
 800c9a8:	b40e      	push	{r1, r2, r3}
 800c9aa:	b500      	push	{lr}
 800c9ac:	b09c      	sub	sp, #112	@ 0x70
 800c9ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800c9b0:	9002      	str	r0, [sp, #8]
 800c9b2:	9006      	str	r0, [sp, #24]
 800c9b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c9b8:	4809      	ldr	r0, [pc, #36]	@ (800c9e0 <siprintf+0x38>)
 800c9ba:	9107      	str	r1, [sp, #28]
 800c9bc:	9104      	str	r1, [sp, #16]
 800c9be:	4909      	ldr	r1, [pc, #36]	@ (800c9e4 <siprintf+0x3c>)
 800c9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c4:	9105      	str	r1, [sp, #20]
 800c9c6:	6800      	ldr	r0, [r0, #0]
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	a902      	add	r1, sp, #8
 800c9cc:	f002 fb7a 	bl	800f0c4 <_svfiprintf_r>
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	701a      	strb	r2, [r3, #0]
 800c9d6:	b01c      	add	sp, #112	@ 0x70
 800c9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9dc:	b003      	add	sp, #12
 800c9de:	4770      	bx	lr
 800c9e0:	20000044 	.word	0x20000044
 800c9e4:	ffff0208 	.word	0xffff0208

0800c9e8 <siscanf>:
 800c9e8:	b40e      	push	{r1, r2, r3}
 800c9ea:	b530      	push	{r4, r5, lr}
 800c9ec:	b09c      	sub	sp, #112	@ 0x70
 800c9ee:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c9f0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c9f4:	f854 5b04 	ldr.w	r5, [r4], #4
 800c9f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c9fc:	9002      	str	r0, [sp, #8]
 800c9fe:	9006      	str	r0, [sp, #24]
 800ca00:	f7f3 fc56 	bl	80002b0 <strlen>
 800ca04:	4b0b      	ldr	r3, [pc, #44]	@ (800ca34 <siscanf+0x4c>)
 800ca06:	9003      	str	r0, [sp, #12]
 800ca08:	9007      	str	r0, [sp, #28]
 800ca0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca0c:	480a      	ldr	r0, [pc, #40]	@ (800ca38 <siscanf+0x50>)
 800ca0e:	9401      	str	r4, [sp, #4]
 800ca10:	2300      	movs	r3, #0
 800ca12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca14:	9314      	str	r3, [sp, #80]	@ 0x50
 800ca16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca1e:	462a      	mov	r2, r5
 800ca20:	4623      	mov	r3, r4
 800ca22:	a902      	add	r1, sp, #8
 800ca24:	6800      	ldr	r0, [r0, #0]
 800ca26:	f002 fca1 	bl	800f36c <__ssvfiscanf_r>
 800ca2a:	b01c      	add	sp, #112	@ 0x70
 800ca2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca30:	b003      	add	sp, #12
 800ca32:	4770      	bx	lr
 800ca34:	0800ca5f 	.word	0x0800ca5f
 800ca38:	20000044 	.word	0x20000044

0800ca3c <__sread>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	460c      	mov	r4, r1
 800ca40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca44:	f000 f894 	bl	800cb70 <_read_r>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	bfab      	itete	ge
 800ca4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ca50:	181b      	addge	r3, r3, r0
 800ca52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca56:	bfac      	ite	ge
 800ca58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca5a:	81a3      	strhlt	r3, [r4, #12]
 800ca5c:	bd10      	pop	{r4, pc}

0800ca5e <__seofread>:
 800ca5e:	2000      	movs	r0, #0
 800ca60:	4770      	bx	lr

0800ca62 <__swrite>:
 800ca62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	461f      	mov	r7, r3
 800ca68:	898b      	ldrh	r3, [r1, #12]
 800ca6a:	05db      	lsls	r3, r3, #23
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	4616      	mov	r6, r2
 800ca72:	d505      	bpl.n	800ca80 <__swrite+0x1e>
 800ca74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca78:	2302      	movs	r3, #2
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f000 f866 	bl	800cb4c <_lseek_r>
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca8a:	81a3      	strh	r3, [r4, #12]
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	463b      	mov	r3, r7
 800ca90:	4628      	mov	r0, r5
 800ca92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca96:	f000 b88d 	b.w	800cbb4 <_write_r>

0800ca9a <__sseek>:
 800ca9a:	b510      	push	{r4, lr}
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa2:	f000 f853 	bl	800cb4c <_lseek_r>
 800caa6:	1c43      	adds	r3, r0, #1
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	bf15      	itete	ne
 800caac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800caae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cab6:	81a3      	strheq	r3, [r4, #12]
 800cab8:	bf18      	it	ne
 800caba:	81a3      	strhne	r3, [r4, #12]
 800cabc:	bd10      	pop	{r4, pc}

0800cabe <__sclose>:
 800cabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac2:	f000 b833 	b.w	800cb2c <_close_r>

0800cac6 <memcmp>:
 800cac6:	b510      	push	{r4, lr}
 800cac8:	3901      	subs	r1, #1
 800caca:	4402      	add	r2, r0
 800cacc:	4290      	cmp	r0, r2
 800cace:	d101      	bne.n	800cad4 <memcmp+0xe>
 800cad0:	2000      	movs	r0, #0
 800cad2:	e005      	b.n	800cae0 <memcmp+0x1a>
 800cad4:	7803      	ldrb	r3, [r0, #0]
 800cad6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cada:	42a3      	cmp	r3, r4
 800cadc:	d001      	beq.n	800cae2 <memcmp+0x1c>
 800cade:	1b18      	subs	r0, r3, r4
 800cae0:	bd10      	pop	{r4, pc}
 800cae2:	3001      	adds	r0, #1
 800cae4:	e7f2      	b.n	800cacc <memcmp+0x6>

0800cae6 <memset>:
 800cae6:	4402      	add	r2, r0
 800cae8:	4603      	mov	r3, r0
 800caea:	4293      	cmp	r3, r2
 800caec:	d100      	bne.n	800caf0 <memset+0xa>
 800caee:	4770      	bx	lr
 800caf0:	f803 1b01 	strb.w	r1, [r3], #1
 800caf4:	e7f9      	b.n	800caea <memset+0x4>

0800caf6 <strstr>:
 800caf6:	780a      	ldrb	r2, [r1, #0]
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	b96a      	cbnz	r2, 800cb18 <strstr+0x22>
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d109      	bne.n	800cb16 <strstr+0x20>
 800cb02:	460c      	mov	r4, r1
 800cb04:	4605      	mov	r5, r0
 800cb06:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0f6      	beq.n	800cafc <strstr+0x6>
 800cb0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cb12:	429e      	cmp	r6, r3
 800cb14:	d0f7      	beq.n	800cb06 <strstr+0x10>
 800cb16:	3001      	adds	r0, #1
 800cb18:	7803      	ldrb	r3, [r0, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1ef      	bne.n	800cafe <strstr+0x8>
 800cb1e:	4618      	mov	r0, r3
 800cb20:	e7ec      	b.n	800cafc <strstr+0x6>
	...

0800cb24 <_localeconv_r>:
 800cb24:	4800      	ldr	r0, [pc, #0]	@ (800cb28 <_localeconv_r+0x4>)
 800cb26:	4770      	bx	lr
 800cb28:	20000184 	.word	0x20000184

0800cb2c <_close_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d06      	ldr	r5, [pc, #24]	@ (800cb48 <_close_r+0x1c>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	602b      	str	r3, [r5, #0]
 800cb38:	f7f9 fb64 	bl	8006204 <_close>
 800cb3c:	1c43      	adds	r3, r0, #1
 800cb3e:	d102      	bne.n	800cb46 <_close_r+0x1a>
 800cb40:	682b      	ldr	r3, [r5, #0]
 800cb42:	b103      	cbz	r3, 800cb46 <_close_r+0x1a>
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	bd38      	pop	{r3, r4, r5, pc}
 800cb48:	20001974 	.word	0x20001974

0800cb4c <_lseek_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4d07      	ldr	r5, [pc, #28]	@ (800cb6c <_lseek_r+0x20>)
 800cb50:	4604      	mov	r4, r0
 800cb52:	4608      	mov	r0, r1
 800cb54:	4611      	mov	r1, r2
 800cb56:	2200      	movs	r2, #0
 800cb58:	602a      	str	r2, [r5, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f7f9 fb79 	bl	8006252 <_lseek>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d102      	bne.n	800cb6a <_lseek_r+0x1e>
 800cb64:	682b      	ldr	r3, [r5, #0]
 800cb66:	b103      	cbz	r3, 800cb6a <_lseek_r+0x1e>
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	20001974 	.word	0x20001974

0800cb70 <_read_r>:
 800cb70:	b538      	push	{r3, r4, r5, lr}
 800cb72:	4d07      	ldr	r5, [pc, #28]	@ (800cb90 <_read_r+0x20>)
 800cb74:	4604      	mov	r4, r0
 800cb76:	4608      	mov	r0, r1
 800cb78:	4611      	mov	r1, r2
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	602a      	str	r2, [r5, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f7f9 fb07 	bl	8006192 <_read>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_read_r+0x1e>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_read_r+0x1e>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	20001974 	.word	0x20001974

0800cb94 <_sbrk_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d06      	ldr	r5, [pc, #24]	@ (800cbb0 <_sbrk_r+0x1c>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	f7f9 fb64 	bl	800626c <_sbrk>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d102      	bne.n	800cbae <_sbrk_r+0x1a>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	b103      	cbz	r3, 800cbae <_sbrk_r+0x1a>
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	20001974 	.word	0x20001974

0800cbb4 <_write_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d07      	ldr	r5, [pc, #28]	@ (800cbd4 <_write_r+0x20>)
 800cbb8:	4604      	mov	r4, r0
 800cbba:	4608      	mov	r0, r1
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	602a      	str	r2, [r5, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	f7f9 fb02 	bl	80061cc <_write>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	d102      	bne.n	800cbd2 <_write_r+0x1e>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b103      	cbz	r3, 800cbd2 <_write_r+0x1e>
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	20001974 	.word	0x20001974

0800cbd8 <__errno>:
 800cbd8:	4b01      	ldr	r3, [pc, #4]	@ (800cbe0 <__errno+0x8>)
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	20000044 	.word	0x20000044

0800cbe4 <__libc_init_array>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	4d0d      	ldr	r5, [pc, #52]	@ (800cc1c <__libc_init_array+0x38>)
 800cbe8:	4c0d      	ldr	r4, [pc, #52]	@ (800cc20 <__libc_init_array+0x3c>)
 800cbea:	1b64      	subs	r4, r4, r5
 800cbec:	10a4      	asrs	r4, r4, #2
 800cbee:	2600      	movs	r6, #0
 800cbf0:	42a6      	cmp	r6, r4
 800cbf2:	d109      	bne.n	800cc08 <__libc_init_array+0x24>
 800cbf4:	4d0b      	ldr	r5, [pc, #44]	@ (800cc24 <__libc_init_array+0x40>)
 800cbf6:	4c0c      	ldr	r4, [pc, #48]	@ (800cc28 <__libc_init_array+0x44>)
 800cbf8:	f005 fad6 	bl	80121a8 <_init>
 800cbfc:	1b64      	subs	r4, r4, r5
 800cbfe:	10a4      	asrs	r4, r4, #2
 800cc00:	2600      	movs	r6, #0
 800cc02:	42a6      	cmp	r6, r4
 800cc04:	d105      	bne.n	800cc12 <__libc_init_array+0x2e>
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc0c:	4798      	blx	r3
 800cc0e:	3601      	adds	r6, #1
 800cc10:	e7ee      	b.n	800cbf0 <__libc_init_array+0xc>
 800cc12:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc16:	4798      	blx	r3
 800cc18:	3601      	adds	r6, #1
 800cc1a:	e7f2      	b.n	800cc02 <__libc_init_array+0x1e>
 800cc1c:	08012838 	.word	0x08012838
 800cc20:	08012838 	.word	0x08012838
 800cc24:	08012838 	.word	0x08012838
 800cc28:	0801283c 	.word	0x0801283c

0800cc2c <__retarget_lock_init_recursive>:
 800cc2c:	4770      	bx	lr

0800cc2e <__retarget_lock_acquire_recursive>:
 800cc2e:	4770      	bx	lr

0800cc30 <__retarget_lock_release_recursive>:
 800cc30:	4770      	bx	lr

0800cc32 <memcpy>:
 800cc32:	440a      	add	r2, r1
 800cc34:	4291      	cmp	r1, r2
 800cc36:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc3a:	d100      	bne.n	800cc3e <memcpy+0xc>
 800cc3c:	4770      	bx	lr
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc48:	4291      	cmp	r1, r2
 800cc4a:	d1f9      	bne.n	800cc40 <memcpy+0xe>
 800cc4c:	bd10      	pop	{r4, pc}
	...

0800cc50 <nanf>:
 800cc50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cc58 <nanf+0x8>
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	7fc00000 	.word	0x7fc00000

0800cc5c <quorem>:
 800cc5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc60:	6903      	ldr	r3, [r0, #16]
 800cc62:	690c      	ldr	r4, [r1, #16]
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	4607      	mov	r7, r0
 800cc68:	db7e      	blt.n	800cd68 <quorem+0x10c>
 800cc6a:	3c01      	subs	r4, #1
 800cc6c:	f101 0814 	add.w	r8, r1, #20
 800cc70:	00a3      	lsls	r3, r4, #2
 800cc72:	f100 0514 	add.w	r5, r0, #20
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc7c:	9301      	str	r3, [sp, #4]
 800cc7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc86:	3301      	adds	r3, #1
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc8e:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc92:	d32e      	bcc.n	800ccf2 <quorem+0x96>
 800cc94:	f04f 0a00 	mov.w	sl, #0
 800cc98:	46c4      	mov	ip, r8
 800cc9a:	46ae      	mov	lr, r5
 800cc9c:	46d3      	mov	fp, sl
 800cc9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cca2:	b298      	uxth	r0, r3
 800cca4:	fb06 a000 	mla	r0, r6, r0, sl
 800cca8:	0c02      	lsrs	r2, r0, #16
 800ccaa:	0c1b      	lsrs	r3, r3, #16
 800ccac:	fb06 2303 	mla	r3, r6, r3, r2
 800ccb0:	f8de 2000 	ldr.w	r2, [lr]
 800ccb4:	b280      	uxth	r0, r0
 800ccb6:	b292      	uxth	r2, r2
 800ccb8:	1a12      	subs	r2, r2, r0
 800ccba:	445a      	add	r2, fp
 800ccbc:	f8de 0000 	ldr.w	r0, [lr]
 800ccc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ccca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ccce:	b292      	uxth	r2, r2
 800ccd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ccd4:	45e1      	cmp	r9, ip
 800ccd6:	f84e 2b04 	str.w	r2, [lr], #4
 800ccda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ccde:	d2de      	bcs.n	800cc9e <quorem+0x42>
 800cce0:	9b00      	ldr	r3, [sp, #0]
 800cce2:	58eb      	ldr	r3, [r5, r3]
 800cce4:	b92b      	cbnz	r3, 800ccf2 <quorem+0x96>
 800cce6:	9b01      	ldr	r3, [sp, #4]
 800cce8:	3b04      	subs	r3, #4
 800ccea:	429d      	cmp	r5, r3
 800ccec:	461a      	mov	r2, r3
 800ccee:	d32f      	bcc.n	800cd50 <quorem+0xf4>
 800ccf0:	613c      	str	r4, [r7, #16]
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	f001 f916 	bl	800df24 <__mcmp>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	db25      	blt.n	800cd48 <quorem+0xec>
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	2000      	movs	r0, #0
 800cd00:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd04:	f8d1 c000 	ldr.w	ip, [r1]
 800cd08:	fa1f fe82 	uxth.w	lr, r2
 800cd0c:	fa1f f38c 	uxth.w	r3, ip
 800cd10:	eba3 030e 	sub.w	r3, r3, lr
 800cd14:	4403      	add	r3, r0
 800cd16:	0c12      	lsrs	r2, r2, #16
 800cd18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cd1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd26:	45c1      	cmp	r9, r8
 800cd28:	f841 3b04 	str.w	r3, [r1], #4
 800cd2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cd30:	d2e6      	bcs.n	800cd00 <quorem+0xa4>
 800cd32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd3a:	b922      	cbnz	r2, 800cd46 <quorem+0xea>
 800cd3c:	3b04      	subs	r3, #4
 800cd3e:	429d      	cmp	r5, r3
 800cd40:	461a      	mov	r2, r3
 800cd42:	d30b      	bcc.n	800cd5c <quorem+0x100>
 800cd44:	613c      	str	r4, [r7, #16]
 800cd46:	3601      	adds	r6, #1
 800cd48:	4630      	mov	r0, r6
 800cd4a:	b003      	add	sp, #12
 800cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd50:	6812      	ldr	r2, [r2, #0]
 800cd52:	3b04      	subs	r3, #4
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	d1cb      	bne.n	800ccf0 <quorem+0x94>
 800cd58:	3c01      	subs	r4, #1
 800cd5a:	e7c6      	b.n	800ccea <quorem+0x8e>
 800cd5c:	6812      	ldr	r2, [r2, #0]
 800cd5e:	3b04      	subs	r3, #4
 800cd60:	2a00      	cmp	r2, #0
 800cd62:	d1ef      	bne.n	800cd44 <quorem+0xe8>
 800cd64:	3c01      	subs	r4, #1
 800cd66:	e7ea      	b.n	800cd3e <quorem+0xe2>
 800cd68:	2000      	movs	r0, #0
 800cd6a:	e7ee      	b.n	800cd4a <quorem+0xee>
 800cd6c:	0000      	movs	r0, r0
	...

0800cd70 <_dtoa_r>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	69c7      	ldr	r7, [r0, #28]
 800cd76:	b099      	sub	sp, #100	@ 0x64
 800cd78:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd7c:	ec55 4b10 	vmov	r4, r5, d0
 800cd80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cd82:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd84:	4683      	mov	fp, r0
 800cd86:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd8a:	b97f      	cbnz	r7, 800cdac <_dtoa_r+0x3c>
 800cd8c:	2010      	movs	r0, #16
 800cd8e:	f000 fdfd 	bl	800d98c <malloc>
 800cd92:	4602      	mov	r2, r0
 800cd94:	f8cb 001c 	str.w	r0, [fp, #28]
 800cd98:	b920      	cbnz	r0, 800cda4 <_dtoa_r+0x34>
 800cd9a:	4ba7      	ldr	r3, [pc, #668]	@ (800d038 <_dtoa_r+0x2c8>)
 800cd9c:	21ef      	movs	r1, #239	@ 0xef
 800cd9e:	48a7      	ldr	r0, [pc, #668]	@ (800d03c <_dtoa_r+0x2cc>)
 800cda0:	f002 fefa 	bl	800fb98 <__assert_func>
 800cda4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cda8:	6007      	str	r7, [r0, #0]
 800cdaa:	60c7      	str	r7, [r0, #12]
 800cdac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cdb0:	6819      	ldr	r1, [r3, #0]
 800cdb2:	b159      	cbz	r1, 800cdcc <_dtoa_r+0x5c>
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	604a      	str	r2, [r1, #4]
 800cdb8:	2301      	movs	r3, #1
 800cdba:	4093      	lsls	r3, r2
 800cdbc:	608b      	str	r3, [r1, #8]
 800cdbe:	4658      	mov	r0, fp
 800cdc0:	f000 fe2c 	bl	800da1c <_Bfree>
 800cdc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	1e2b      	subs	r3, r5, #0
 800cdce:	bfb9      	ittee	lt
 800cdd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cdd4:	9303      	strlt	r3, [sp, #12]
 800cdd6:	2300      	movge	r3, #0
 800cdd8:	6033      	strge	r3, [r6, #0]
 800cdda:	9f03      	ldr	r7, [sp, #12]
 800cddc:	4b98      	ldr	r3, [pc, #608]	@ (800d040 <_dtoa_r+0x2d0>)
 800cdde:	bfbc      	itt	lt
 800cde0:	2201      	movlt	r2, #1
 800cde2:	6032      	strlt	r2, [r6, #0]
 800cde4:	43bb      	bics	r3, r7
 800cde6:	d112      	bne.n	800ce0e <_dtoa_r+0x9e>
 800cde8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cdea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cdf4:	4323      	orrs	r3, r4
 800cdf6:	f000 854d 	beq.w	800d894 <_dtoa_r+0xb24>
 800cdfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d054 <_dtoa_r+0x2e4>
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 854f 	beq.w	800d8a4 <_dtoa_r+0xb34>
 800ce06:	f10a 0303 	add.w	r3, sl, #3
 800ce0a:	f000 bd49 	b.w	800d8a0 <_dtoa_r+0xb30>
 800ce0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce12:	2200      	movs	r2, #0
 800ce14:	ec51 0b17 	vmov	r0, r1, d7
 800ce18:	2300      	movs	r3, #0
 800ce1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ce1e:	f7f3 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 800ce22:	4680      	mov	r8, r0
 800ce24:	b158      	cbz	r0, 800ce3e <_dtoa_r+0xce>
 800ce26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce28:	2301      	movs	r3, #1
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce2e:	b113      	cbz	r3, 800ce36 <_dtoa_r+0xc6>
 800ce30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ce32:	4b84      	ldr	r3, [pc, #528]	@ (800d044 <_dtoa_r+0x2d4>)
 800ce34:	6013      	str	r3, [r2, #0]
 800ce36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d058 <_dtoa_r+0x2e8>
 800ce3a:	f000 bd33 	b.w	800d8a4 <_dtoa_r+0xb34>
 800ce3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ce42:	aa16      	add	r2, sp, #88	@ 0x58
 800ce44:	a917      	add	r1, sp, #92	@ 0x5c
 800ce46:	4658      	mov	r0, fp
 800ce48:	f001 f98c 	bl	800e164 <__d2b>
 800ce4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ce50:	4681      	mov	r9, r0
 800ce52:	2e00      	cmp	r6, #0
 800ce54:	d077      	beq.n	800cf46 <_dtoa_r+0x1d6>
 800ce56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ce5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ce68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ce6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ce70:	4619      	mov	r1, r3
 800ce72:	2200      	movs	r2, #0
 800ce74:	4b74      	ldr	r3, [pc, #464]	@ (800d048 <_dtoa_r+0x2d8>)
 800ce76:	f7f3 fa27 	bl	80002c8 <__aeabi_dsub>
 800ce7a:	a369      	add	r3, pc, #420	@ (adr r3, 800d020 <_dtoa_r+0x2b0>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	f7f3 fbda 	bl	8000638 <__aeabi_dmul>
 800ce84:	a368      	add	r3, pc, #416	@ (adr r3, 800d028 <_dtoa_r+0x2b8>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f7f3 fa1f 	bl	80002cc <__adddf3>
 800ce8e:	4604      	mov	r4, r0
 800ce90:	4630      	mov	r0, r6
 800ce92:	460d      	mov	r5, r1
 800ce94:	f7f3 fb66 	bl	8000564 <__aeabi_i2d>
 800ce98:	a365      	add	r3, pc, #404	@ (adr r3, 800d030 <_dtoa_r+0x2c0>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	f7f3 fbcb 	bl	8000638 <__aeabi_dmul>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 fa0f 	bl	80002cc <__adddf3>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	f7f3 fe71 	bl	8000b98 <__aeabi_d2iz>
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	4607      	mov	r7, r0
 800ceba:	2300      	movs	r3, #0
 800cebc:	4620      	mov	r0, r4
 800cebe:	4629      	mov	r1, r5
 800cec0:	f7f3 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 800cec4:	b140      	cbz	r0, 800ced8 <_dtoa_r+0x168>
 800cec6:	4638      	mov	r0, r7
 800cec8:	f7f3 fb4c 	bl	8000564 <__aeabi_i2d>
 800cecc:	4622      	mov	r2, r4
 800cece:	462b      	mov	r3, r5
 800ced0:	f7f3 fe1a 	bl	8000b08 <__aeabi_dcmpeq>
 800ced4:	b900      	cbnz	r0, 800ced8 <_dtoa_r+0x168>
 800ced6:	3f01      	subs	r7, #1
 800ced8:	2f16      	cmp	r7, #22
 800ceda:	d851      	bhi.n	800cf80 <_dtoa_r+0x210>
 800cedc:	4b5b      	ldr	r3, [pc, #364]	@ (800d04c <_dtoa_r+0x2dc>)
 800cede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ceea:	f7f3 fe17 	bl	8000b1c <__aeabi_dcmplt>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d048      	beq.n	800cf84 <_dtoa_r+0x214>
 800cef2:	3f01      	subs	r7, #1
 800cef4:	2300      	movs	r3, #0
 800cef6:	9312      	str	r3, [sp, #72]	@ 0x48
 800cef8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cefa:	1b9b      	subs	r3, r3, r6
 800cefc:	1e5a      	subs	r2, r3, #1
 800cefe:	bf44      	itt	mi
 800cf00:	f1c3 0801 	rsbmi	r8, r3, #1
 800cf04:	2300      	movmi	r3, #0
 800cf06:	9208      	str	r2, [sp, #32]
 800cf08:	bf54      	ite	pl
 800cf0a:	f04f 0800 	movpl.w	r8, #0
 800cf0e:	9308      	strmi	r3, [sp, #32]
 800cf10:	2f00      	cmp	r7, #0
 800cf12:	db39      	blt.n	800cf88 <_dtoa_r+0x218>
 800cf14:	9b08      	ldr	r3, [sp, #32]
 800cf16:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cf18:	443b      	add	r3, r7
 800cf1a:	9308      	str	r3, [sp, #32]
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf22:	2b09      	cmp	r3, #9
 800cf24:	d864      	bhi.n	800cff0 <_dtoa_r+0x280>
 800cf26:	2b05      	cmp	r3, #5
 800cf28:	bfc4      	itt	gt
 800cf2a:	3b04      	subgt	r3, #4
 800cf2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf30:	f1a3 0302 	sub.w	r3, r3, #2
 800cf34:	bfcc      	ite	gt
 800cf36:	2400      	movgt	r4, #0
 800cf38:	2401      	movle	r4, #1
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d863      	bhi.n	800d006 <_dtoa_r+0x296>
 800cf3e:	e8df f003 	tbb	[pc, r3]
 800cf42:	372a      	.short	0x372a
 800cf44:	5535      	.short	0x5535
 800cf46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cf4a:	441e      	add	r6, r3
 800cf4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cf50:	2b20      	cmp	r3, #32
 800cf52:	bfc1      	itttt	gt
 800cf54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cf58:	409f      	lslgt	r7, r3
 800cf5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cf5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cf62:	bfd6      	itet	le
 800cf64:	f1c3 0320 	rsble	r3, r3, #32
 800cf68:	ea47 0003 	orrgt.w	r0, r7, r3
 800cf6c:	fa04 f003 	lslle.w	r0, r4, r3
 800cf70:	f7f3 fae8 	bl	8000544 <__aeabi_ui2d>
 800cf74:	2201      	movs	r2, #1
 800cf76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cf7a:	3e01      	subs	r6, #1
 800cf7c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cf7e:	e777      	b.n	800ce70 <_dtoa_r+0x100>
 800cf80:	2301      	movs	r3, #1
 800cf82:	e7b8      	b.n	800cef6 <_dtoa_r+0x186>
 800cf84:	9012      	str	r0, [sp, #72]	@ 0x48
 800cf86:	e7b7      	b.n	800cef8 <_dtoa_r+0x188>
 800cf88:	427b      	negs	r3, r7
 800cf8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	eba8 0807 	sub.w	r8, r8, r7
 800cf92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf94:	e7c4      	b.n	800cf20 <_dtoa_r+0x1b0>
 800cf96:	2300      	movs	r3, #0
 800cf98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	dc35      	bgt.n	800d00c <_dtoa_r+0x29c>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	9307      	str	r3, [sp, #28]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfaa:	e00b      	b.n	800cfc4 <_dtoa_r+0x254>
 800cfac:	2301      	movs	r3, #1
 800cfae:	e7f3      	b.n	800cf98 <_dtoa_r+0x228>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfb6:	18fb      	adds	r3, r7, r3
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	9307      	str	r3, [sp, #28]
 800cfc0:	bfb8      	it	lt
 800cfc2:	2301      	movlt	r3, #1
 800cfc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cfc8:	2100      	movs	r1, #0
 800cfca:	2204      	movs	r2, #4
 800cfcc:	f102 0514 	add.w	r5, r2, #20
 800cfd0:	429d      	cmp	r5, r3
 800cfd2:	d91f      	bls.n	800d014 <_dtoa_r+0x2a4>
 800cfd4:	6041      	str	r1, [r0, #4]
 800cfd6:	4658      	mov	r0, fp
 800cfd8:	f000 fce0 	bl	800d99c <_Balloc>
 800cfdc:	4682      	mov	sl, r0
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d13c      	bne.n	800d05c <_dtoa_r+0x2ec>
 800cfe2:	4b1b      	ldr	r3, [pc, #108]	@ (800d050 <_dtoa_r+0x2e0>)
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	f240 11af 	movw	r1, #431	@ 0x1af
 800cfea:	e6d8      	b.n	800cd9e <_dtoa_r+0x2e>
 800cfec:	2301      	movs	r3, #1
 800cfee:	e7e0      	b.n	800cfb2 <_dtoa_r+0x242>
 800cff0:	2401      	movs	r4, #1
 800cff2:	2300      	movs	r3, #0
 800cff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cff6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	9307      	str	r3, [sp, #28]
 800d000:	2200      	movs	r2, #0
 800d002:	2312      	movs	r3, #18
 800d004:	e7d0      	b.n	800cfa8 <_dtoa_r+0x238>
 800d006:	2301      	movs	r3, #1
 800d008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d00a:	e7f5      	b.n	800cff8 <_dtoa_r+0x288>
 800d00c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	9307      	str	r3, [sp, #28]
 800d012:	e7d7      	b.n	800cfc4 <_dtoa_r+0x254>
 800d014:	3101      	adds	r1, #1
 800d016:	0052      	lsls	r2, r2, #1
 800d018:	e7d8      	b.n	800cfcc <_dtoa_r+0x25c>
 800d01a:	bf00      	nop
 800d01c:	f3af 8000 	nop.w
 800d020:	636f4361 	.word	0x636f4361
 800d024:	3fd287a7 	.word	0x3fd287a7
 800d028:	8b60c8b3 	.word	0x8b60c8b3
 800d02c:	3fc68a28 	.word	0x3fc68a28
 800d030:	509f79fb 	.word	0x509f79fb
 800d034:	3fd34413 	.word	0x3fd34413
 800d038:	080123c0 	.word	0x080123c0
 800d03c:	080123d7 	.word	0x080123d7
 800d040:	7ff00000 	.word	0x7ff00000
 800d044:	08012719 	.word	0x08012719
 800d048:	3ff80000 	.word	0x3ff80000
 800d04c:	080124d0 	.word	0x080124d0
 800d050:	0801242f 	.word	0x0801242f
 800d054:	080123bc 	.word	0x080123bc
 800d058:	08012718 	.word	0x08012718
 800d05c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d060:	6018      	str	r0, [r3, #0]
 800d062:	9b07      	ldr	r3, [sp, #28]
 800d064:	2b0e      	cmp	r3, #14
 800d066:	f200 80a4 	bhi.w	800d1b2 <_dtoa_r+0x442>
 800d06a:	2c00      	cmp	r4, #0
 800d06c:	f000 80a1 	beq.w	800d1b2 <_dtoa_r+0x442>
 800d070:	2f00      	cmp	r7, #0
 800d072:	dd33      	ble.n	800d0dc <_dtoa_r+0x36c>
 800d074:	4bad      	ldr	r3, [pc, #692]	@ (800d32c <_dtoa_r+0x5bc>)
 800d076:	f007 020f 	and.w	r2, r7, #15
 800d07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d07e:	ed93 7b00 	vldr	d7, [r3]
 800d082:	05f8      	lsls	r0, r7, #23
 800d084:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d08c:	d516      	bpl.n	800d0bc <_dtoa_r+0x34c>
 800d08e:	4ba8      	ldr	r3, [pc, #672]	@ (800d330 <_dtoa_r+0x5c0>)
 800d090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d098:	f7f3 fbf8 	bl	800088c <__aeabi_ddiv>
 800d09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a0:	f004 040f 	and.w	r4, r4, #15
 800d0a4:	2603      	movs	r6, #3
 800d0a6:	4da2      	ldr	r5, [pc, #648]	@ (800d330 <_dtoa_r+0x5c0>)
 800d0a8:	b954      	cbnz	r4, 800d0c0 <_dtoa_r+0x350>
 800d0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0b2:	f7f3 fbeb 	bl	800088c <__aeabi_ddiv>
 800d0b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ba:	e028      	b.n	800d10e <_dtoa_r+0x39e>
 800d0bc:	2602      	movs	r6, #2
 800d0be:	e7f2      	b.n	800d0a6 <_dtoa_r+0x336>
 800d0c0:	07e1      	lsls	r1, r4, #31
 800d0c2:	d508      	bpl.n	800d0d6 <_dtoa_r+0x366>
 800d0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0cc:	f7f3 fab4 	bl	8000638 <__aeabi_dmul>
 800d0d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0d4:	3601      	adds	r6, #1
 800d0d6:	1064      	asrs	r4, r4, #1
 800d0d8:	3508      	adds	r5, #8
 800d0da:	e7e5      	b.n	800d0a8 <_dtoa_r+0x338>
 800d0dc:	f000 80d2 	beq.w	800d284 <_dtoa_r+0x514>
 800d0e0:	427c      	negs	r4, r7
 800d0e2:	4b92      	ldr	r3, [pc, #584]	@ (800d32c <_dtoa_r+0x5bc>)
 800d0e4:	4d92      	ldr	r5, [pc, #584]	@ (800d330 <_dtoa_r+0x5c0>)
 800d0e6:	f004 020f 	and.w	r2, r4, #15
 800d0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0f6:	f7f3 fa9f 	bl	8000638 <__aeabi_dmul>
 800d0fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0fe:	1124      	asrs	r4, r4, #4
 800d100:	2300      	movs	r3, #0
 800d102:	2602      	movs	r6, #2
 800d104:	2c00      	cmp	r4, #0
 800d106:	f040 80b2 	bne.w	800d26e <_dtoa_r+0x4fe>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1d3      	bne.n	800d0b6 <_dtoa_r+0x346>
 800d10e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d110:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 80b7 	beq.w	800d288 <_dtoa_r+0x518>
 800d11a:	4b86      	ldr	r3, [pc, #536]	@ (800d334 <_dtoa_r+0x5c4>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	4620      	mov	r0, r4
 800d120:	4629      	mov	r1, r5
 800d122:	f7f3 fcfb 	bl	8000b1c <__aeabi_dcmplt>
 800d126:	2800      	cmp	r0, #0
 800d128:	f000 80ae 	beq.w	800d288 <_dtoa_r+0x518>
 800d12c:	9b07      	ldr	r3, [sp, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 80aa 	beq.w	800d288 <_dtoa_r+0x518>
 800d134:	9b00      	ldr	r3, [sp, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	dd37      	ble.n	800d1aa <_dtoa_r+0x43a>
 800d13a:	1e7b      	subs	r3, r7, #1
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	4620      	mov	r0, r4
 800d140:	4b7d      	ldr	r3, [pc, #500]	@ (800d338 <_dtoa_r+0x5c8>)
 800d142:	2200      	movs	r2, #0
 800d144:	4629      	mov	r1, r5
 800d146:	f7f3 fa77 	bl	8000638 <__aeabi_dmul>
 800d14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d14e:	9c00      	ldr	r4, [sp, #0]
 800d150:	3601      	adds	r6, #1
 800d152:	4630      	mov	r0, r6
 800d154:	f7f3 fa06 	bl	8000564 <__aeabi_i2d>
 800d158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d15c:	f7f3 fa6c 	bl	8000638 <__aeabi_dmul>
 800d160:	4b76      	ldr	r3, [pc, #472]	@ (800d33c <_dtoa_r+0x5cc>)
 800d162:	2200      	movs	r2, #0
 800d164:	f7f3 f8b2 	bl	80002cc <__adddf3>
 800d168:	4605      	mov	r5, r0
 800d16a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d16e:	2c00      	cmp	r4, #0
 800d170:	f040 808d 	bne.w	800d28e <_dtoa_r+0x51e>
 800d174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d178:	4b71      	ldr	r3, [pc, #452]	@ (800d340 <_dtoa_r+0x5d0>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	f7f3 f8a4 	bl	80002c8 <__aeabi_dsub>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d188:	462a      	mov	r2, r5
 800d18a:	4633      	mov	r3, r6
 800d18c:	f7f3 fce4 	bl	8000b58 <__aeabi_dcmpgt>
 800d190:	2800      	cmp	r0, #0
 800d192:	f040 828b 	bne.w	800d6ac <_dtoa_r+0x93c>
 800d196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d19a:	462a      	mov	r2, r5
 800d19c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d1a0:	f7f3 fcbc 	bl	8000b1c <__aeabi_dcmplt>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f040 8128 	bne.w	800d3fa <_dtoa_r+0x68a>
 800d1aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d1ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d1b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f2c0 815a 	blt.w	800d46e <_dtoa_r+0x6fe>
 800d1ba:	2f0e      	cmp	r7, #14
 800d1bc:	f300 8157 	bgt.w	800d46e <_dtoa_r+0x6fe>
 800d1c0:	4b5a      	ldr	r3, [pc, #360]	@ (800d32c <_dtoa_r+0x5bc>)
 800d1c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1c6:	ed93 7b00 	vldr	d7, [r3]
 800d1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	ed8d 7b00 	vstr	d7, [sp]
 800d1d2:	da03      	bge.n	800d1dc <_dtoa_r+0x46c>
 800d1d4:	9b07      	ldr	r3, [sp, #28]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f340 8101 	ble.w	800d3de <_dtoa_r+0x66e>
 800d1dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d1e0:	4656      	mov	r6, sl
 800d1e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	f7f3 fb4f 	bl	800088c <__aeabi_ddiv>
 800d1ee:	f7f3 fcd3 	bl	8000b98 <__aeabi_d2iz>
 800d1f2:	4680      	mov	r8, r0
 800d1f4:	f7f3 f9b6 	bl	8000564 <__aeabi_i2d>
 800d1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1fc:	f7f3 fa1c 	bl	8000638 <__aeabi_dmul>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4620      	mov	r0, r4
 800d206:	4629      	mov	r1, r5
 800d208:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d20c:	f7f3 f85c 	bl	80002c8 <__aeabi_dsub>
 800d210:	f806 4b01 	strb.w	r4, [r6], #1
 800d214:	9d07      	ldr	r5, [sp, #28]
 800d216:	eba6 040a 	sub.w	r4, r6, sl
 800d21a:	42a5      	cmp	r5, r4
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	f040 8117 	bne.w	800d452 <_dtoa_r+0x6e2>
 800d224:	f7f3 f852 	bl	80002cc <__adddf3>
 800d228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d22c:	4604      	mov	r4, r0
 800d22e:	460d      	mov	r5, r1
 800d230:	f7f3 fc92 	bl	8000b58 <__aeabi_dcmpgt>
 800d234:	2800      	cmp	r0, #0
 800d236:	f040 80f9 	bne.w	800d42c <_dtoa_r+0x6bc>
 800d23a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d23e:	4620      	mov	r0, r4
 800d240:	4629      	mov	r1, r5
 800d242:	f7f3 fc61 	bl	8000b08 <__aeabi_dcmpeq>
 800d246:	b118      	cbz	r0, 800d250 <_dtoa_r+0x4e0>
 800d248:	f018 0f01 	tst.w	r8, #1
 800d24c:	f040 80ee 	bne.w	800d42c <_dtoa_r+0x6bc>
 800d250:	4649      	mov	r1, r9
 800d252:	4658      	mov	r0, fp
 800d254:	f000 fbe2 	bl	800da1c <_Bfree>
 800d258:	2300      	movs	r3, #0
 800d25a:	7033      	strb	r3, [r6, #0]
 800d25c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d25e:	3701      	adds	r7, #1
 800d260:	601f      	str	r7, [r3, #0]
 800d262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 831d 	beq.w	800d8a4 <_dtoa_r+0xb34>
 800d26a:	601e      	str	r6, [r3, #0]
 800d26c:	e31a      	b.n	800d8a4 <_dtoa_r+0xb34>
 800d26e:	07e2      	lsls	r2, r4, #31
 800d270:	d505      	bpl.n	800d27e <_dtoa_r+0x50e>
 800d272:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d276:	f7f3 f9df 	bl	8000638 <__aeabi_dmul>
 800d27a:	3601      	adds	r6, #1
 800d27c:	2301      	movs	r3, #1
 800d27e:	1064      	asrs	r4, r4, #1
 800d280:	3508      	adds	r5, #8
 800d282:	e73f      	b.n	800d104 <_dtoa_r+0x394>
 800d284:	2602      	movs	r6, #2
 800d286:	e742      	b.n	800d10e <_dtoa_r+0x39e>
 800d288:	9c07      	ldr	r4, [sp, #28]
 800d28a:	9704      	str	r7, [sp, #16]
 800d28c:	e761      	b.n	800d152 <_dtoa_r+0x3e2>
 800d28e:	4b27      	ldr	r3, [pc, #156]	@ (800d32c <_dtoa_r+0x5bc>)
 800d290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d296:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d29a:	4454      	add	r4, sl
 800d29c:	2900      	cmp	r1, #0
 800d29e:	d053      	beq.n	800d348 <_dtoa_r+0x5d8>
 800d2a0:	4928      	ldr	r1, [pc, #160]	@ (800d344 <_dtoa_r+0x5d4>)
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	f7f3 faf2 	bl	800088c <__aeabi_ddiv>
 800d2a8:	4633      	mov	r3, r6
 800d2aa:	462a      	mov	r2, r5
 800d2ac:	f7f3 f80c 	bl	80002c8 <__aeabi_dsub>
 800d2b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2b4:	4656      	mov	r6, sl
 800d2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ba:	f7f3 fc6d 	bl	8000b98 <__aeabi_d2iz>
 800d2be:	4605      	mov	r5, r0
 800d2c0:	f7f3 f950 	bl	8000564 <__aeabi_i2d>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2cc:	f7f2 fffc 	bl	80002c8 <__aeabi_dsub>
 800d2d0:	3530      	adds	r5, #48	@ 0x30
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2da:	f806 5b01 	strb.w	r5, [r6], #1
 800d2de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d2e2:	f7f3 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d171      	bne.n	800d3ce <_dtoa_r+0x65e>
 800d2ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2ee:	4911      	ldr	r1, [pc, #68]	@ (800d334 <_dtoa_r+0x5c4>)
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	f7f2 ffe9 	bl	80002c8 <__aeabi_dsub>
 800d2f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d2fa:	f7f3 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f040 8095 	bne.w	800d42e <_dtoa_r+0x6be>
 800d304:	42a6      	cmp	r6, r4
 800d306:	f43f af50 	beq.w	800d1aa <_dtoa_r+0x43a>
 800d30a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d30e:	4b0a      	ldr	r3, [pc, #40]	@ (800d338 <_dtoa_r+0x5c8>)
 800d310:	2200      	movs	r2, #0
 800d312:	f7f3 f991 	bl	8000638 <__aeabi_dmul>
 800d316:	4b08      	ldr	r3, [pc, #32]	@ (800d338 <_dtoa_r+0x5c8>)
 800d318:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d31c:	2200      	movs	r2, #0
 800d31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d322:	f7f3 f989 	bl	8000638 <__aeabi_dmul>
 800d326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d32a:	e7c4      	b.n	800d2b6 <_dtoa_r+0x546>
 800d32c:	080124d0 	.word	0x080124d0
 800d330:	080124a8 	.word	0x080124a8
 800d334:	3ff00000 	.word	0x3ff00000
 800d338:	40240000 	.word	0x40240000
 800d33c:	401c0000 	.word	0x401c0000
 800d340:	40140000 	.word	0x40140000
 800d344:	3fe00000 	.word	0x3fe00000
 800d348:	4631      	mov	r1, r6
 800d34a:	4628      	mov	r0, r5
 800d34c:	f7f3 f974 	bl	8000638 <__aeabi_dmul>
 800d350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d354:	9415      	str	r4, [sp, #84]	@ 0x54
 800d356:	4656      	mov	r6, sl
 800d358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d35c:	f7f3 fc1c 	bl	8000b98 <__aeabi_d2iz>
 800d360:	4605      	mov	r5, r0
 800d362:	f7f3 f8ff 	bl	8000564 <__aeabi_i2d>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d36e:	f7f2 ffab 	bl	80002c8 <__aeabi_dsub>
 800d372:	3530      	adds	r5, #48	@ 0x30
 800d374:	f806 5b01 	strb.w	r5, [r6], #1
 800d378:	4602      	mov	r2, r0
 800d37a:	460b      	mov	r3, r1
 800d37c:	42a6      	cmp	r6, r4
 800d37e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d382:	f04f 0200 	mov.w	r2, #0
 800d386:	d124      	bne.n	800d3d2 <_dtoa_r+0x662>
 800d388:	4bac      	ldr	r3, [pc, #688]	@ (800d63c <_dtoa_r+0x8cc>)
 800d38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d38e:	f7f2 ff9d 	bl	80002cc <__adddf3>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d39a:	f7f3 fbdd 	bl	8000b58 <__aeabi_dcmpgt>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d145      	bne.n	800d42e <_dtoa_r+0x6be>
 800d3a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d3a6:	49a5      	ldr	r1, [pc, #660]	@ (800d63c <_dtoa_r+0x8cc>)
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	f7f2 ff8d 	bl	80002c8 <__aeabi_dsub>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b6:	f7f3 fbb1 	bl	8000b1c <__aeabi_dcmplt>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	f43f aef5 	beq.w	800d1aa <_dtoa_r+0x43a>
 800d3c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d3c2:	1e73      	subs	r3, r6, #1
 800d3c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d3ca:	2b30      	cmp	r3, #48	@ 0x30
 800d3cc:	d0f8      	beq.n	800d3c0 <_dtoa_r+0x650>
 800d3ce:	9f04      	ldr	r7, [sp, #16]
 800d3d0:	e73e      	b.n	800d250 <_dtoa_r+0x4e0>
 800d3d2:	4b9b      	ldr	r3, [pc, #620]	@ (800d640 <_dtoa_r+0x8d0>)
 800d3d4:	f7f3 f930 	bl	8000638 <__aeabi_dmul>
 800d3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3dc:	e7bc      	b.n	800d358 <_dtoa_r+0x5e8>
 800d3de:	d10c      	bne.n	800d3fa <_dtoa_r+0x68a>
 800d3e0:	4b98      	ldr	r3, [pc, #608]	@ (800d644 <_dtoa_r+0x8d4>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3e8:	f7f3 f926 	bl	8000638 <__aeabi_dmul>
 800d3ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3f0:	f7f3 fba8 	bl	8000b44 <__aeabi_dcmpge>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	f000 8157 	beq.w	800d6a8 <_dtoa_r+0x938>
 800d3fa:	2400      	movs	r4, #0
 800d3fc:	4625      	mov	r5, r4
 800d3fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d400:	43db      	mvns	r3, r3
 800d402:	9304      	str	r3, [sp, #16]
 800d404:	4656      	mov	r6, sl
 800d406:	2700      	movs	r7, #0
 800d408:	4621      	mov	r1, r4
 800d40a:	4658      	mov	r0, fp
 800d40c:	f000 fb06 	bl	800da1c <_Bfree>
 800d410:	2d00      	cmp	r5, #0
 800d412:	d0dc      	beq.n	800d3ce <_dtoa_r+0x65e>
 800d414:	b12f      	cbz	r7, 800d422 <_dtoa_r+0x6b2>
 800d416:	42af      	cmp	r7, r5
 800d418:	d003      	beq.n	800d422 <_dtoa_r+0x6b2>
 800d41a:	4639      	mov	r1, r7
 800d41c:	4658      	mov	r0, fp
 800d41e:	f000 fafd 	bl	800da1c <_Bfree>
 800d422:	4629      	mov	r1, r5
 800d424:	4658      	mov	r0, fp
 800d426:	f000 faf9 	bl	800da1c <_Bfree>
 800d42a:	e7d0      	b.n	800d3ce <_dtoa_r+0x65e>
 800d42c:	9704      	str	r7, [sp, #16]
 800d42e:	4633      	mov	r3, r6
 800d430:	461e      	mov	r6, r3
 800d432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d436:	2a39      	cmp	r2, #57	@ 0x39
 800d438:	d107      	bne.n	800d44a <_dtoa_r+0x6da>
 800d43a:	459a      	cmp	sl, r3
 800d43c:	d1f8      	bne.n	800d430 <_dtoa_r+0x6c0>
 800d43e:	9a04      	ldr	r2, [sp, #16]
 800d440:	3201      	adds	r2, #1
 800d442:	9204      	str	r2, [sp, #16]
 800d444:	2230      	movs	r2, #48	@ 0x30
 800d446:	f88a 2000 	strb.w	r2, [sl]
 800d44a:	781a      	ldrb	r2, [r3, #0]
 800d44c:	3201      	adds	r2, #1
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	e7bd      	b.n	800d3ce <_dtoa_r+0x65e>
 800d452:	4b7b      	ldr	r3, [pc, #492]	@ (800d640 <_dtoa_r+0x8d0>)
 800d454:	2200      	movs	r2, #0
 800d456:	f7f3 f8ef 	bl	8000638 <__aeabi_dmul>
 800d45a:	2200      	movs	r2, #0
 800d45c:	2300      	movs	r3, #0
 800d45e:	4604      	mov	r4, r0
 800d460:	460d      	mov	r5, r1
 800d462:	f7f3 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 800d466:	2800      	cmp	r0, #0
 800d468:	f43f aebb 	beq.w	800d1e2 <_dtoa_r+0x472>
 800d46c:	e6f0      	b.n	800d250 <_dtoa_r+0x4e0>
 800d46e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d470:	2a00      	cmp	r2, #0
 800d472:	f000 80db 	beq.w	800d62c <_dtoa_r+0x8bc>
 800d476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d478:	2a01      	cmp	r2, #1
 800d47a:	f300 80bf 	bgt.w	800d5fc <_dtoa_r+0x88c>
 800d47e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d480:	2a00      	cmp	r2, #0
 800d482:	f000 80b7 	beq.w	800d5f4 <_dtoa_r+0x884>
 800d486:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d48a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d48c:	4646      	mov	r6, r8
 800d48e:	9a08      	ldr	r2, [sp, #32]
 800d490:	2101      	movs	r1, #1
 800d492:	441a      	add	r2, r3
 800d494:	4658      	mov	r0, fp
 800d496:	4498      	add	r8, r3
 800d498:	9208      	str	r2, [sp, #32]
 800d49a:	f000 fbbd 	bl	800dc18 <__i2b>
 800d49e:	4605      	mov	r5, r0
 800d4a0:	b15e      	cbz	r6, 800d4ba <_dtoa_r+0x74a>
 800d4a2:	9b08      	ldr	r3, [sp, #32]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	dd08      	ble.n	800d4ba <_dtoa_r+0x74a>
 800d4a8:	42b3      	cmp	r3, r6
 800d4aa:	9a08      	ldr	r2, [sp, #32]
 800d4ac:	bfa8      	it	ge
 800d4ae:	4633      	movge	r3, r6
 800d4b0:	eba8 0803 	sub.w	r8, r8, r3
 800d4b4:	1af6      	subs	r6, r6, r3
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	9308      	str	r3, [sp, #32]
 800d4ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4bc:	b1f3      	cbz	r3, 800d4fc <_dtoa_r+0x78c>
 800d4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 80b7 	beq.w	800d634 <_dtoa_r+0x8c4>
 800d4c6:	b18c      	cbz	r4, 800d4ec <_dtoa_r+0x77c>
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4658      	mov	r0, fp
 800d4ce:	f000 fc63 	bl	800dd98 <__pow5mult>
 800d4d2:	464a      	mov	r2, r9
 800d4d4:	4601      	mov	r1, r0
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	4658      	mov	r0, fp
 800d4da:	f000 fbb3 	bl	800dc44 <__multiply>
 800d4de:	4649      	mov	r1, r9
 800d4e0:	9004      	str	r0, [sp, #16]
 800d4e2:	4658      	mov	r0, fp
 800d4e4:	f000 fa9a 	bl	800da1c <_Bfree>
 800d4e8:	9b04      	ldr	r3, [sp, #16]
 800d4ea:	4699      	mov	r9, r3
 800d4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ee:	1b1a      	subs	r2, r3, r4
 800d4f0:	d004      	beq.n	800d4fc <_dtoa_r+0x78c>
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	4658      	mov	r0, fp
 800d4f6:	f000 fc4f 	bl	800dd98 <__pow5mult>
 800d4fa:	4681      	mov	r9, r0
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	4658      	mov	r0, fp
 800d500:	f000 fb8a 	bl	800dc18 <__i2b>
 800d504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d506:	4604      	mov	r4, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 81cf 	beq.w	800d8ac <_dtoa_r+0xb3c>
 800d50e:	461a      	mov	r2, r3
 800d510:	4601      	mov	r1, r0
 800d512:	4658      	mov	r0, fp
 800d514:	f000 fc40 	bl	800dd98 <__pow5mult>
 800d518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	4604      	mov	r4, r0
 800d51e:	f300 8095 	bgt.w	800d64c <_dtoa_r+0x8dc>
 800d522:	9b02      	ldr	r3, [sp, #8]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f040 8087 	bne.w	800d638 <_dtoa_r+0x8c8>
 800d52a:	9b03      	ldr	r3, [sp, #12]
 800d52c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d530:	2b00      	cmp	r3, #0
 800d532:	f040 8089 	bne.w	800d648 <_dtoa_r+0x8d8>
 800d536:	9b03      	ldr	r3, [sp, #12]
 800d538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d53c:	0d1b      	lsrs	r3, r3, #20
 800d53e:	051b      	lsls	r3, r3, #20
 800d540:	b12b      	cbz	r3, 800d54e <_dtoa_r+0x7de>
 800d542:	9b08      	ldr	r3, [sp, #32]
 800d544:	3301      	adds	r3, #1
 800d546:	9308      	str	r3, [sp, #32]
 800d548:	f108 0801 	add.w	r8, r8, #1
 800d54c:	2301      	movs	r3, #1
 800d54e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d552:	2b00      	cmp	r3, #0
 800d554:	f000 81b0 	beq.w	800d8b8 <_dtoa_r+0xb48>
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d55e:	6918      	ldr	r0, [r3, #16]
 800d560:	f000 fb0e 	bl	800db80 <__hi0bits>
 800d564:	f1c0 0020 	rsb	r0, r0, #32
 800d568:	9b08      	ldr	r3, [sp, #32]
 800d56a:	4418      	add	r0, r3
 800d56c:	f010 001f 	ands.w	r0, r0, #31
 800d570:	d077      	beq.n	800d662 <_dtoa_r+0x8f2>
 800d572:	f1c0 0320 	rsb	r3, r0, #32
 800d576:	2b04      	cmp	r3, #4
 800d578:	dd6b      	ble.n	800d652 <_dtoa_r+0x8e2>
 800d57a:	9b08      	ldr	r3, [sp, #32]
 800d57c:	f1c0 001c 	rsb	r0, r0, #28
 800d580:	4403      	add	r3, r0
 800d582:	4480      	add	r8, r0
 800d584:	4406      	add	r6, r0
 800d586:	9308      	str	r3, [sp, #32]
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	dd05      	ble.n	800d59a <_dtoa_r+0x82a>
 800d58e:	4649      	mov	r1, r9
 800d590:	4642      	mov	r2, r8
 800d592:	4658      	mov	r0, fp
 800d594:	f000 fc5a 	bl	800de4c <__lshift>
 800d598:	4681      	mov	r9, r0
 800d59a:	9b08      	ldr	r3, [sp, #32]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	dd05      	ble.n	800d5ac <_dtoa_r+0x83c>
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	4658      	mov	r0, fp
 800d5a6:	f000 fc51 	bl	800de4c <__lshift>
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d059      	beq.n	800d666 <_dtoa_r+0x8f6>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4648      	mov	r0, r9
 800d5b6:	f000 fcb5 	bl	800df24 <__mcmp>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	da53      	bge.n	800d666 <_dtoa_r+0x8f6>
 800d5be:	1e7b      	subs	r3, r7, #1
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	4649      	mov	r1, r9
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	220a      	movs	r2, #10
 800d5c8:	4658      	mov	r0, fp
 800d5ca:	f000 fa49 	bl	800da60 <__multadd>
 800d5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5d0:	4681      	mov	r9, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f000 8172 	beq.w	800d8bc <_dtoa_r+0xb4c>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4629      	mov	r1, r5
 800d5dc:	220a      	movs	r2, #10
 800d5de:	4658      	mov	r0, fp
 800d5e0:	f000 fa3e 	bl	800da60 <__multadd>
 800d5e4:	9b00      	ldr	r3, [sp, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	dc67      	bgt.n	800d6bc <_dtoa_r+0x94c>
 800d5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	dc41      	bgt.n	800d676 <_dtoa_r+0x906>
 800d5f2:	e063      	b.n	800d6bc <_dtoa_r+0x94c>
 800d5f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d5f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d5fa:	e746      	b.n	800d48a <_dtoa_r+0x71a>
 800d5fc:	9b07      	ldr	r3, [sp, #28]
 800d5fe:	1e5c      	subs	r4, r3, #1
 800d600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d602:	42a3      	cmp	r3, r4
 800d604:	bfbf      	itttt	lt
 800d606:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d608:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d60a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d60c:	1ae3      	sublt	r3, r4, r3
 800d60e:	bfb4      	ite	lt
 800d610:	18d2      	addlt	r2, r2, r3
 800d612:	1b1c      	subge	r4, r3, r4
 800d614:	9b07      	ldr	r3, [sp, #28]
 800d616:	bfbc      	itt	lt
 800d618:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d61a:	2400      	movlt	r4, #0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bfb5      	itete	lt
 800d620:	eba8 0603 	sublt.w	r6, r8, r3
 800d624:	9b07      	ldrge	r3, [sp, #28]
 800d626:	2300      	movlt	r3, #0
 800d628:	4646      	movge	r6, r8
 800d62a:	e730      	b.n	800d48e <_dtoa_r+0x71e>
 800d62c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d62e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d630:	4646      	mov	r6, r8
 800d632:	e735      	b.n	800d4a0 <_dtoa_r+0x730>
 800d634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d636:	e75c      	b.n	800d4f2 <_dtoa_r+0x782>
 800d638:	2300      	movs	r3, #0
 800d63a:	e788      	b.n	800d54e <_dtoa_r+0x7de>
 800d63c:	3fe00000 	.word	0x3fe00000
 800d640:	40240000 	.word	0x40240000
 800d644:	40140000 	.word	0x40140000
 800d648:	9b02      	ldr	r3, [sp, #8]
 800d64a:	e780      	b.n	800d54e <_dtoa_r+0x7de>
 800d64c:	2300      	movs	r3, #0
 800d64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d650:	e782      	b.n	800d558 <_dtoa_r+0x7e8>
 800d652:	d099      	beq.n	800d588 <_dtoa_r+0x818>
 800d654:	9a08      	ldr	r2, [sp, #32]
 800d656:	331c      	adds	r3, #28
 800d658:	441a      	add	r2, r3
 800d65a:	4498      	add	r8, r3
 800d65c:	441e      	add	r6, r3
 800d65e:	9208      	str	r2, [sp, #32]
 800d660:	e792      	b.n	800d588 <_dtoa_r+0x818>
 800d662:	4603      	mov	r3, r0
 800d664:	e7f6      	b.n	800d654 <_dtoa_r+0x8e4>
 800d666:	9b07      	ldr	r3, [sp, #28]
 800d668:	9704      	str	r7, [sp, #16]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dc20      	bgt.n	800d6b0 <_dtoa_r+0x940>
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d672:	2b02      	cmp	r3, #2
 800d674:	dd1e      	ble.n	800d6b4 <_dtoa_r+0x944>
 800d676:	9b00      	ldr	r3, [sp, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f47f aec0 	bne.w	800d3fe <_dtoa_r+0x68e>
 800d67e:	4621      	mov	r1, r4
 800d680:	2205      	movs	r2, #5
 800d682:	4658      	mov	r0, fp
 800d684:	f000 f9ec 	bl	800da60 <__multadd>
 800d688:	4601      	mov	r1, r0
 800d68a:	4604      	mov	r4, r0
 800d68c:	4648      	mov	r0, r9
 800d68e:	f000 fc49 	bl	800df24 <__mcmp>
 800d692:	2800      	cmp	r0, #0
 800d694:	f77f aeb3 	ble.w	800d3fe <_dtoa_r+0x68e>
 800d698:	4656      	mov	r6, sl
 800d69a:	2331      	movs	r3, #49	@ 0x31
 800d69c:	f806 3b01 	strb.w	r3, [r6], #1
 800d6a0:	9b04      	ldr	r3, [sp, #16]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	9304      	str	r3, [sp, #16]
 800d6a6:	e6ae      	b.n	800d406 <_dtoa_r+0x696>
 800d6a8:	9c07      	ldr	r4, [sp, #28]
 800d6aa:	9704      	str	r7, [sp, #16]
 800d6ac:	4625      	mov	r5, r4
 800d6ae:	e7f3      	b.n	800d698 <_dtoa_r+0x928>
 800d6b0:	9b07      	ldr	r3, [sp, #28]
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 8104 	beq.w	800d8c4 <_dtoa_r+0xb54>
 800d6bc:	2e00      	cmp	r6, #0
 800d6be:	dd05      	ble.n	800d6cc <_dtoa_r+0x95c>
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4632      	mov	r2, r6
 800d6c4:	4658      	mov	r0, fp
 800d6c6:	f000 fbc1 	bl	800de4c <__lshift>
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d05a      	beq.n	800d788 <_dtoa_r+0xa18>
 800d6d2:	6869      	ldr	r1, [r5, #4]
 800d6d4:	4658      	mov	r0, fp
 800d6d6:	f000 f961 	bl	800d99c <_Balloc>
 800d6da:	4606      	mov	r6, r0
 800d6dc:	b928      	cbnz	r0, 800d6ea <_dtoa_r+0x97a>
 800d6de:	4b84      	ldr	r3, [pc, #528]	@ (800d8f0 <_dtoa_r+0xb80>)
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d6e6:	f7ff bb5a 	b.w	800cd9e <_dtoa_r+0x2e>
 800d6ea:	692a      	ldr	r2, [r5, #16]
 800d6ec:	3202      	adds	r2, #2
 800d6ee:	0092      	lsls	r2, r2, #2
 800d6f0:	f105 010c 	add.w	r1, r5, #12
 800d6f4:	300c      	adds	r0, #12
 800d6f6:	f7ff fa9c 	bl	800cc32 <memcpy>
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	4631      	mov	r1, r6
 800d6fe:	4658      	mov	r0, fp
 800d700:	f000 fba4 	bl	800de4c <__lshift>
 800d704:	f10a 0301 	add.w	r3, sl, #1
 800d708:	9307      	str	r3, [sp, #28]
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	4453      	add	r3, sl
 800d70e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d710:	9b02      	ldr	r3, [sp, #8]
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	462f      	mov	r7, r5
 800d718:	930a      	str	r3, [sp, #40]	@ 0x28
 800d71a:	4605      	mov	r5, r0
 800d71c:	9b07      	ldr	r3, [sp, #28]
 800d71e:	4621      	mov	r1, r4
 800d720:	3b01      	subs	r3, #1
 800d722:	4648      	mov	r0, r9
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	f7ff fa99 	bl	800cc5c <quorem>
 800d72a:	4639      	mov	r1, r7
 800d72c:	9002      	str	r0, [sp, #8]
 800d72e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d732:	4648      	mov	r0, r9
 800d734:	f000 fbf6 	bl	800df24 <__mcmp>
 800d738:	462a      	mov	r2, r5
 800d73a:	9008      	str	r0, [sp, #32]
 800d73c:	4621      	mov	r1, r4
 800d73e:	4658      	mov	r0, fp
 800d740:	f000 fc0c 	bl	800df5c <__mdiff>
 800d744:	68c2      	ldr	r2, [r0, #12]
 800d746:	4606      	mov	r6, r0
 800d748:	bb02      	cbnz	r2, 800d78c <_dtoa_r+0xa1c>
 800d74a:	4601      	mov	r1, r0
 800d74c:	4648      	mov	r0, r9
 800d74e:	f000 fbe9 	bl	800df24 <__mcmp>
 800d752:	4602      	mov	r2, r0
 800d754:	4631      	mov	r1, r6
 800d756:	4658      	mov	r0, fp
 800d758:	920e      	str	r2, [sp, #56]	@ 0x38
 800d75a:	f000 f95f 	bl	800da1c <_Bfree>
 800d75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d760:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d762:	9e07      	ldr	r6, [sp, #28]
 800d764:	ea43 0102 	orr.w	r1, r3, r2
 800d768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d76a:	4319      	orrs	r1, r3
 800d76c:	d110      	bne.n	800d790 <_dtoa_r+0xa20>
 800d76e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d772:	d029      	beq.n	800d7c8 <_dtoa_r+0xa58>
 800d774:	9b08      	ldr	r3, [sp, #32]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dd02      	ble.n	800d780 <_dtoa_r+0xa10>
 800d77a:	9b02      	ldr	r3, [sp, #8]
 800d77c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d780:	9b00      	ldr	r3, [sp, #0]
 800d782:	f883 8000 	strb.w	r8, [r3]
 800d786:	e63f      	b.n	800d408 <_dtoa_r+0x698>
 800d788:	4628      	mov	r0, r5
 800d78a:	e7bb      	b.n	800d704 <_dtoa_r+0x994>
 800d78c:	2201      	movs	r2, #1
 800d78e:	e7e1      	b.n	800d754 <_dtoa_r+0x9e4>
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	2b00      	cmp	r3, #0
 800d794:	db04      	blt.n	800d7a0 <_dtoa_r+0xa30>
 800d796:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d798:	430b      	orrs	r3, r1
 800d79a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d79c:	430b      	orrs	r3, r1
 800d79e:	d120      	bne.n	800d7e2 <_dtoa_r+0xa72>
 800d7a0:	2a00      	cmp	r2, #0
 800d7a2:	dded      	ble.n	800d780 <_dtoa_r+0xa10>
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	4658      	mov	r0, fp
 800d7aa:	f000 fb4f 	bl	800de4c <__lshift>
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4681      	mov	r9, r0
 800d7b2:	f000 fbb7 	bl	800df24 <__mcmp>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	dc03      	bgt.n	800d7c2 <_dtoa_r+0xa52>
 800d7ba:	d1e1      	bne.n	800d780 <_dtoa_r+0xa10>
 800d7bc:	f018 0f01 	tst.w	r8, #1
 800d7c0:	d0de      	beq.n	800d780 <_dtoa_r+0xa10>
 800d7c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d7c6:	d1d8      	bne.n	800d77a <_dtoa_r+0xa0a>
 800d7c8:	9a00      	ldr	r2, [sp, #0]
 800d7ca:	2339      	movs	r3, #57	@ 0x39
 800d7cc:	7013      	strb	r3, [r2, #0]
 800d7ce:	4633      	mov	r3, r6
 800d7d0:	461e      	mov	r6, r3
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d7d8:	2a39      	cmp	r2, #57	@ 0x39
 800d7da:	d052      	beq.n	800d882 <_dtoa_r+0xb12>
 800d7dc:	3201      	adds	r2, #1
 800d7de:	701a      	strb	r2, [r3, #0]
 800d7e0:	e612      	b.n	800d408 <_dtoa_r+0x698>
 800d7e2:	2a00      	cmp	r2, #0
 800d7e4:	dd07      	ble.n	800d7f6 <_dtoa_r+0xa86>
 800d7e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d7ea:	d0ed      	beq.n	800d7c8 <_dtoa_r+0xa58>
 800d7ec:	9a00      	ldr	r2, [sp, #0]
 800d7ee:	f108 0301 	add.w	r3, r8, #1
 800d7f2:	7013      	strb	r3, [r2, #0]
 800d7f4:	e608      	b.n	800d408 <_dtoa_r+0x698>
 800d7f6:	9b07      	ldr	r3, [sp, #28]
 800d7f8:	9a07      	ldr	r2, [sp, #28]
 800d7fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d800:	4293      	cmp	r3, r2
 800d802:	d028      	beq.n	800d856 <_dtoa_r+0xae6>
 800d804:	4649      	mov	r1, r9
 800d806:	2300      	movs	r3, #0
 800d808:	220a      	movs	r2, #10
 800d80a:	4658      	mov	r0, fp
 800d80c:	f000 f928 	bl	800da60 <__multadd>
 800d810:	42af      	cmp	r7, r5
 800d812:	4681      	mov	r9, r0
 800d814:	f04f 0300 	mov.w	r3, #0
 800d818:	f04f 020a 	mov.w	r2, #10
 800d81c:	4639      	mov	r1, r7
 800d81e:	4658      	mov	r0, fp
 800d820:	d107      	bne.n	800d832 <_dtoa_r+0xac2>
 800d822:	f000 f91d 	bl	800da60 <__multadd>
 800d826:	4607      	mov	r7, r0
 800d828:	4605      	mov	r5, r0
 800d82a:	9b07      	ldr	r3, [sp, #28]
 800d82c:	3301      	adds	r3, #1
 800d82e:	9307      	str	r3, [sp, #28]
 800d830:	e774      	b.n	800d71c <_dtoa_r+0x9ac>
 800d832:	f000 f915 	bl	800da60 <__multadd>
 800d836:	4629      	mov	r1, r5
 800d838:	4607      	mov	r7, r0
 800d83a:	2300      	movs	r3, #0
 800d83c:	220a      	movs	r2, #10
 800d83e:	4658      	mov	r0, fp
 800d840:	f000 f90e 	bl	800da60 <__multadd>
 800d844:	4605      	mov	r5, r0
 800d846:	e7f0      	b.n	800d82a <_dtoa_r+0xaba>
 800d848:	9b00      	ldr	r3, [sp, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	bfcc      	ite	gt
 800d84e:	461e      	movgt	r6, r3
 800d850:	2601      	movle	r6, #1
 800d852:	4456      	add	r6, sl
 800d854:	2700      	movs	r7, #0
 800d856:	4649      	mov	r1, r9
 800d858:	2201      	movs	r2, #1
 800d85a:	4658      	mov	r0, fp
 800d85c:	f000 faf6 	bl	800de4c <__lshift>
 800d860:	4621      	mov	r1, r4
 800d862:	4681      	mov	r9, r0
 800d864:	f000 fb5e 	bl	800df24 <__mcmp>
 800d868:	2800      	cmp	r0, #0
 800d86a:	dcb0      	bgt.n	800d7ce <_dtoa_r+0xa5e>
 800d86c:	d102      	bne.n	800d874 <_dtoa_r+0xb04>
 800d86e:	f018 0f01 	tst.w	r8, #1
 800d872:	d1ac      	bne.n	800d7ce <_dtoa_r+0xa5e>
 800d874:	4633      	mov	r3, r6
 800d876:	461e      	mov	r6, r3
 800d878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d87c:	2a30      	cmp	r2, #48	@ 0x30
 800d87e:	d0fa      	beq.n	800d876 <_dtoa_r+0xb06>
 800d880:	e5c2      	b.n	800d408 <_dtoa_r+0x698>
 800d882:	459a      	cmp	sl, r3
 800d884:	d1a4      	bne.n	800d7d0 <_dtoa_r+0xa60>
 800d886:	9b04      	ldr	r3, [sp, #16]
 800d888:	3301      	adds	r3, #1
 800d88a:	9304      	str	r3, [sp, #16]
 800d88c:	2331      	movs	r3, #49	@ 0x31
 800d88e:	f88a 3000 	strb.w	r3, [sl]
 800d892:	e5b9      	b.n	800d408 <_dtoa_r+0x698>
 800d894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d896:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d8f4 <_dtoa_r+0xb84>
 800d89a:	b11b      	cbz	r3, 800d8a4 <_dtoa_r+0xb34>
 800d89c:	f10a 0308 	add.w	r3, sl, #8
 800d8a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d8a2:	6013      	str	r3, [r2, #0]
 800d8a4:	4650      	mov	r0, sl
 800d8a6:	b019      	add	sp, #100	@ 0x64
 800d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	f77f ae37 	ble.w	800d522 <_dtoa_r+0x7b2>
 800d8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8b8:	2001      	movs	r0, #1
 800d8ba:	e655      	b.n	800d568 <_dtoa_r+0x7f8>
 800d8bc:	9b00      	ldr	r3, [sp, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f77f aed6 	ble.w	800d670 <_dtoa_r+0x900>
 800d8c4:	4656      	mov	r6, sl
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	4648      	mov	r0, r9
 800d8ca:	f7ff f9c7 	bl	800cc5c <quorem>
 800d8ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d8d2:	f806 8b01 	strb.w	r8, [r6], #1
 800d8d6:	9b00      	ldr	r3, [sp, #0]
 800d8d8:	eba6 020a 	sub.w	r2, r6, sl
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	ddb3      	ble.n	800d848 <_dtoa_r+0xad8>
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	220a      	movs	r2, #10
 800d8e6:	4658      	mov	r0, fp
 800d8e8:	f000 f8ba 	bl	800da60 <__multadd>
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	e7ea      	b.n	800d8c6 <_dtoa_r+0xb56>
 800d8f0:	0801242f 	.word	0x0801242f
 800d8f4:	080123b3 	.word	0x080123b3

0800d8f8 <_free_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	2900      	cmp	r1, #0
 800d8fe:	d041      	beq.n	800d984 <_free_r+0x8c>
 800d900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d904:	1f0c      	subs	r4, r1, #4
 800d906:	2b00      	cmp	r3, #0
 800d908:	bfb8      	it	lt
 800d90a:	18e4      	addlt	r4, r4, r3
 800d90c:	f7fe f8de 	bl	800bacc <__malloc_lock>
 800d910:	4a1d      	ldr	r2, [pc, #116]	@ (800d988 <_free_r+0x90>)
 800d912:	6813      	ldr	r3, [r2, #0]
 800d914:	b933      	cbnz	r3, 800d924 <_free_r+0x2c>
 800d916:	6063      	str	r3, [r4, #4]
 800d918:	6014      	str	r4, [r2, #0]
 800d91a:	4628      	mov	r0, r5
 800d91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d920:	f7fe b8da 	b.w	800bad8 <__malloc_unlock>
 800d924:	42a3      	cmp	r3, r4
 800d926:	d908      	bls.n	800d93a <_free_r+0x42>
 800d928:	6820      	ldr	r0, [r4, #0]
 800d92a:	1821      	adds	r1, r4, r0
 800d92c:	428b      	cmp	r3, r1
 800d92e:	bf01      	itttt	eq
 800d930:	6819      	ldreq	r1, [r3, #0]
 800d932:	685b      	ldreq	r3, [r3, #4]
 800d934:	1809      	addeq	r1, r1, r0
 800d936:	6021      	streq	r1, [r4, #0]
 800d938:	e7ed      	b.n	800d916 <_free_r+0x1e>
 800d93a:	461a      	mov	r2, r3
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	b10b      	cbz	r3, 800d944 <_free_r+0x4c>
 800d940:	42a3      	cmp	r3, r4
 800d942:	d9fa      	bls.n	800d93a <_free_r+0x42>
 800d944:	6811      	ldr	r1, [r2, #0]
 800d946:	1850      	adds	r0, r2, r1
 800d948:	42a0      	cmp	r0, r4
 800d94a:	d10b      	bne.n	800d964 <_free_r+0x6c>
 800d94c:	6820      	ldr	r0, [r4, #0]
 800d94e:	4401      	add	r1, r0
 800d950:	1850      	adds	r0, r2, r1
 800d952:	4283      	cmp	r3, r0
 800d954:	6011      	str	r1, [r2, #0]
 800d956:	d1e0      	bne.n	800d91a <_free_r+0x22>
 800d958:	6818      	ldr	r0, [r3, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	6053      	str	r3, [r2, #4]
 800d95e:	4408      	add	r0, r1
 800d960:	6010      	str	r0, [r2, #0]
 800d962:	e7da      	b.n	800d91a <_free_r+0x22>
 800d964:	d902      	bls.n	800d96c <_free_r+0x74>
 800d966:	230c      	movs	r3, #12
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	e7d6      	b.n	800d91a <_free_r+0x22>
 800d96c:	6820      	ldr	r0, [r4, #0]
 800d96e:	1821      	adds	r1, r4, r0
 800d970:	428b      	cmp	r3, r1
 800d972:	bf04      	itt	eq
 800d974:	6819      	ldreq	r1, [r3, #0]
 800d976:	685b      	ldreq	r3, [r3, #4]
 800d978:	6063      	str	r3, [r4, #4]
 800d97a:	bf04      	itt	eq
 800d97c:	1809      	addeq	r1, r1, r0
 800d97e:	6021      	streq	r1, [r4, #0]
 800d980:	6054      	str	r4, [r2, #4]
 800d982:	e7ca      	b.n	800d91a <_free_r+0x22>
 800d984:	bd38      	pop	{r3, r4, r5, pc}
 800d986:	bf00      	nop
 800d988:	20001834 	.word	0x20001834

0800d98c <malloc>:
 800d98c:	4b02      	ldr	r3, [pc, #8]	@ (800d998 <malloc+0xc>)
 800d98e:	4601      	mov	r1, r0
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	f7fe b81b 	b.w	800b9cc <_malloc_r>
 800d996:	bf00      	nop
 800d998:	20000044 	.word	0x20000044

0800d99c <_Balloc>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	69c6      	ldr	r6, [r0, #28]
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	460d      	mov	r5, r1
 800d9a4:	b976      	cbnz	r6, 800d9c4 <_Balloc+0x28>
 800d9a6:	2010      	movs	r0, #16
 800d9a8:	f7ff fff0 	bl	800d98c <malloc>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	61e0      	str	r0, [r4, #28]
 800d9b0:	b920      	cbnz	r0, 800d9bc <_Balloc+0x20>
 800d9b2:	4b18      	ldr	r3, [pc, #96]	@ (800da14 <_Balloc+0x78>)
 800d9b4:	4818      	ldr	r0, [pc, #96]	@ (800da18 <_Balloc+0x7c>)
 800d9b6:	216b      	movs	r1, #107	@ 0x6b
 800d9b8:	f002 f8ee 	bl	800fb98 <__assert_func>
 800d9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9c0:	6006      	str	r6, [r0, #0]
 800d9c2:	60c6      	str	r6, [r0, #12]
 800d9c4:	69e6      	ldr	r6, [r4, #28]
 800d9c6:	68f3      	ldr	r3, [r6, #12]
 800d9c8:	b183      	cbz	r3, 800d9ec <_Balloc+0x50>
 800d9ca:	69e3      	ldr	r3, [r4, #28]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9d2:	b9b8      	cbnz	r0, 800da04 <_Balloc+0x68>
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d9da:	1d72      	adds	r2, r6, #5
 800d9dc:	0092      	lsls	r2, r2, #2
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f7fd ffbe 	bl	800b960 <_calloc_r>
 800d9e4:	b160      	cbz	r0, 800da00 <_Balloc+0x64>
 800d9e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9ea:	e00e      	b.n	800da0a <_Balloc+0x6e>
 800d9ec:	2221      	movs	r2, #33	@ 0x21
 800d9ee:	2104      	movs	r1, #4
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f7fd ffb5 	bl	800b960 <_calloc_r>
 800d9f6:	69e3      	ldr	r3, [r4, #28]
 800d9f8:	60f0      	str	r0, [r6, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e4      	bne.n	800d9ca <_Balloc+0x2e>
 800da00:	2000      	movs	r0, #0
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	6802      	ldr	r2, [r0, #0]
 800da06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da0a:	2300      	movs	r3, #0
 800da0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da10:	e7f7      	b.n	800da02 <_Balloc+0x66>
 800da12:	bf00      	nop
 800da14:	080123c0 	.word	0x080123c0
 800da18:	08012440 	.word	0x08012440

0800da1c <_Bfree>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	69c6      	ldr	r6, [r0, #28]
 800da20:	4605      	mov	r5, r0
 800da22:	460c      	mov	r4, r1
 800da24:	b976      	cbnz	r6, 800da44 <_Bfree+0x28>
 800da26:	2010      	movs	r0, #16
 800da28:	f7ff ffb0 	bl	800d98c <malloc>
 800da2c:	4602      	mov	r2, r0
 800da2e:	61e8      	str	r0, [r5, #28]
 800da30:	b920      	cbnz	r0, 800da3c <_Bfree+0x20>
 800da32:	4b09      	ldr	r3, [pc, #36]	@ (800da58 <_Bfree+0x3c>)
 800da34:	4809      	ldr	r0, [pc, #36]	@ (800da5c <_Bfree+0x40>)
 800da36:	218f      	movs	r1, #143	@ 0x8f
 800da38:	f002 f8ae 	bl	800fb98 <__assert_func>
 800da3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da40:	6006      	str	r6, [r0, #0]
 800da42:	60c6      	str	r6, [r0, #12]
 800da44:	b13c      	cbz	r4, 800da56 <_Bfree+0x3a>
 800da46:	69eb      	ldr	r3, [r5, #28]
 800da48:	6862      	ldr	r2, [r4, #4]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da50:	6021      	str	r1, [r4, #0]
 800da52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da56:	bd70      	pop	{r4, r5, r6, pc}
 800da58:	080123c0 	.word	0x080123c0
 800da5c:	08012440 	.word	0x08012440

0800da60 <__multadd>:
 800da60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da64:	690d      	ldr	r5, [r1, #16]
 800da66:	4607      	mov	r7, r0
 800da68:	460c      	mov	r4, r1
 800da6a:	461e      	mov	r6, r3
 800da6c:	f101 0c14 	add.w	ip, r1, #20
 800da70:	2000      	movs	r0, #0
 800da72:	f8dc 3000 	ldr.w	r3, [ip]
 800da76:	b299      	uxth	r1, r3
 800da78:	fb02 6101 	mla	r1, r2, r1, r6
 800da7c:	0c1e      	lsrs	r6, r3, #16
 800da7e:	0c0b      	lsrs	r3, r1, #16
 800da80:	fb02 3306 	mla	r3, r2, r6, r3
 800da84:	b289      	uxth	r1, r1
 800da86:	3001      	adds	r0, #1
 800da88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da8c:	4285      	cmp	r5, r0
 800da8e:	f84c 1b04 	str.w	r1, [ip], #4
 800da92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da96:	dcec      	bgt.n	800da72 <__multadd+0x12>
 800da98:	b30e      	cbz	r6, 800dade <__multadd+0x7e>
 800da9a:	68a3      	ldr	r3, [r4, #8]
 800da9c:	42ab      	cmp	r3, r5
 800da9e:	dc19      	bgt.n	800dad4 <__multadd+0x74>
 800daa0:	6861      	ldr	r1, [r4, #4]
 800daa2:	4638      	mov	r0, r7
 800daa4:	3101      	adds	r1, #1
 800daa6:	f7ff ff79 	bl	800d99c <_Balloc>
 800daaa:	4680      	mov	r8, r0
 800daac:	b928      	cbnz	r0, 800daba <__multadd+0x5a>
 800daae:	4602      	mov	r2, r0
 800dab0:	4b0c      	ldr	r3, [pc, #48]	@ (800dae4 <__multadd+0x84>)
 800dab2:	480d      	ldr	r0, [pc, #52]	@ (800dae8 <__multadd+0x88>)
 800dab4:	21ba      	movs	r1, #186	@ 0xba
 800dab6:	f002 f86f 	bl	800fb98 <__assert_func>
 800daba:	6922      	ldr	r2, [r4, #16]
 800dabc:	3202      	adds	r2, #2
 800dabe:	f104 010c 	add.w	r1, r4, #12
 800dac2:	0092      	lsls	r2, r2, #2
 800dac4:	300c      	adds	r0, #12
 800dac6:	f7ff f8b4 	bl	800cc32 <memcpy>
 800daca:	4621      	mov	r1, r4
 800dacc:	4638      	mov	r0, r7
 800dace:	f7ff ffa5 	bl	800da1c <_Bfree>
 800dad2:	4644      	mov	r4, r8
 800dad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dad8:	3501      	adds	r5, #1
 800dada:	615e      	str	r6, [r3, #20]
 800dadc:	6125      	str	r5, [r4, #16]
 800dade:	4620      	mov	r0, r4
 800dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae4:	0801242f 	.word	0x0801242f
 800dae8:	08012440 	.word	0x08012440

0800daec <__s2b>:
 800daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	460c      	mov	r4, r1
 800daf2:	4615      	mov	r5, r2
 800daf4:	461f      	mov	r7, r3
 800daf6:	2209      	movs	r2, #9
 800daf8:	3308      	adds	r3, #8
 800dafa:	4606      	mov	r6, r0
 800dafc:	fb93 f3f2 	sdiv	r3, r3, r2
 800db00:	2100      	movs	r1, #0
 800db02:	2201      	movs	r2, #1
 800db04:	429a      	cmp	r2, r3
 800db06:	db09      	blt.n	800db1c <__s2b+0x30>
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff ff47 	bl	800d99c <_Balloc>
 800db0e:	b940      	cbnz	r0, 800db22 <__s2b+0x36>
 800db10:	4602      	mov	r2, r0
 800db12:	4b19      	ldr	r3, [pc, #100]	@ (800db78 <__s2b+0x8c>)
 800db14:	4819      	ldr	r0, [pc, #100]	@ (800db7c <__s2b+0x90>)
 800db16:	21d3      	movs	r1, #211	@ 0xd3
 800db18:	f002 f83e 	bl	800fb98 <__assert_func>
 800db1c:	0052      	lsls	r2, r2, #1
 800db1e:	3101      	adds	r1, #1
 800db20:	e7f0      	b.n	800db04 <__s2b+0x18>
 800db22:	9b08      	ldr	r3, [sp, #32]
 800db24:	6143      	str	r3, [r0, #20]
 800db26:	2d09      	cmp	r5, #9
 800db28:	f04f 0301 	mov.w	r3, #1
 800db2c:	6103      	str	r3, [r0, #16]
 800db2e:	dd16      	ble.n	800db5e <__s2b+0x72>
 800db30:	f104 0909 	add.w	r9, r4, #9
 800db34:	46c8      	mov	r8, r9
 800db36:	442c      	add	r4, r5
 800db38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db3c:	4601      	mov	r1, r0
 800db3e:	3b30      	subs	r3, #48	@ 0x30
 800db40:	220a      	movs	r2, #10
 800db42:	4630      	mov	r0, r6
 800db44:	f7ff ff8c 	bl	800da60 <__multadd>
 800db48:	45a0      	cmp	r8, r4
 800db4a:	d1f5      	bne.n	800db38 <__s2b+0x4c>
 800db4c:	f1a5 0408 	sub.w	r4, r5, #8
 800db50:	444c      	add	r4, r9
 800db52:	1b2d      	subs	r5, r5, r4
 800db54:	1963      	adds	r3, r4, r5
 800db56:	42bb      	cmp	r3, r7
 800db58:	db04      	blt.n	800db64 <__s2b+0x78>
 800db5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5e:	340a      	adds	r4, #10
 800db60:	2509      	movs	r5, #9
 800db62:	e7f6      	b.n	800db52 <__s2b+0x66>
 800db64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db68:	4601      	mov	r1, r0
 800db6a:	3b30      	subs	r3, #48	@ 0x30
 800db6c:	220a      	movs	r2, #10
 800db6e:	4630      	mov	r0, r6
 800db70:	f7ff ff76 	bl	800da60 <__multadd>
 800db74:	e7ee      	b.n	800db54 <__s2b+0x68>
 800db76:	bf00      	nop
 800db78:	0801242f 	.word	0x0801242f
 800db7c:	08012440 	.word	0x08012440

0800db80 <__hi0bits>:
 800db80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db84:	4603      	mov	r3, r0
 800db86:	bf36      	itet	cc
 800db88:	0403      	lslcc	r3, r0, #16
 800db8a:	2000      	movcs	r0, #0
 800db8c:	2010      	movcc	r0, #16
 800db8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db92:	bf3c      	itt	cc
 800db94:	021b      	lslcc	r3, r3, #8
 800db96:	3008      	addcc	r0, #8
 800db98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db9c:	bf3c      	itt	cc
 800db9e:	011b      	lslcc	r3, r3, #4
 800dba0:	3004      	addcc	r0, #4
 800dba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dba6:	bf3c      	itt	cc
 800dba8:	009b      	lslcc	r3, r3, #2
 800dbaa:	3002      	addcc	r0, #2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	db05      	blt.n	800dbbc <__hi0bits+0x3c>
 800dbb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dbb4:	f100 0001 	add.w	r0, r0, #1
 800dbb8:	bf08      	it	eq
 800dbba:	2020      	moveq	r0, #32
 800dbbc:	4770      	bx	lr

0800dbbe <__lo0bits>:
 800dbbe:	6803      	ldr	r3, [r0, #0]
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	f013 0007 	ands.w	r0, r3, #7
 800dbc6:	d00b      	beq.n	800dbe0 <__lo0bits+0x22>
 800dbc8:	07d9      	lsls	r1, r3, #31
 800dbca:	d421      	bmi.n	800dc10 <__lo0bits+0x52>
 800dbcc:	0798      	lsls	r0, r3, #30
 800dbce:	bf49      	itett	mi
 800dbd0:	085b      	lsrmi	r3, r3, #1
 800dbd2:	089b      	lsrpl	r3, r3, #2
 800dbd4:	2001      	movmi	r0, #1
 800dbd6:	6013      	strmi	r3, [r2, #0]
 800dbd8:	bf5c      	itt	pl
 800dbda:	6013      	strpl	r3, [r2, #0]
 800dbdc:	2002      	movpl	r0, #2
 800dbde:	4770      	bx	lr
 800dbe0:	b299      	uxth	r1, r3
 800dbe2:	b909      	cbnz	r1, 800dbe8 <__lo0bits+0x2a>
 800dbe4:	0c1b      	lsrs	r3, r3, #16
 800dbe6:	2010      	movs	r0, #16
 800dbe8:	b2d9      	uxtb	r1, r3
 800dbea:	b909      	cbnz	r1, 800dbf0 <__lo0bits+0x32>
 800dbec:	3008      	adds	r0, #8
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	0719      	lsls	r1, r3, #28
 800dbf2:	bf04      	itt	eq
 800dbf4:	091b      	lsreq	r3, r3, #4
 800dbf6:	3004      	addeq	r0, #4
 800dbf8:	0799      	lsls	r1, r3, #30
 800dbfa:	bf04      	itt	eq
 800dbfc:	089b      	lsreq	r3, r3, #2
 800dbfe:	3002      	addeq	r0, #2
 800dc00:	07d9      	lsls	r1, r3, #31
 800dc02:	d403      	bmi.n	800dc0c <__lo0bits+0x4e>
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	f100 0001 	add.w	r0, r0, #1
 800dc0a:	d003      	beq.n	800dc14 <__lo0bits+0x56>
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	4770      	bx	lr
 800dc10:	2000      	movs	r0, #0
 800dc12:	4770      	bx	lr
 800dc14:	2020      	movs	r0, #32
 800dc16:	4770      	bx	lr

0800dc18 <__i2b>:
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	f7ff febd 	bl	800d99c <_Balloc>
 800dc22:	4602      	mov	r2, r0
 800dc24:	b928      	cbnz	r0, 800dc32 <__i2b+0x1a>
 800dc26:	4b05      	ldr	r3, [pc, #20]	@ (800dc3c <__i2b+0x24>)
 800dc28:	4805      	ldr	r0, [pc, #20]	@ (800dc40 <__i2b+0x28>)
 800dc2a:	f240 1145 	movw	r1, #325	@ 0x145
 800dc2e:	f001 ffb3 	bl	800fb98 <__assert_func>
 800dc32:	2301      	movs	r3, #1
 800dc34:	6144      	str	r4, [r0, #20]
 800dc36:	6103      	str	r3, [r0, #16]
 800dc38:	bd10      	pop	{r4, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0801242f 	.word	0x0801242f
 800dc40:	08012440 	.word	0x08012440

0800dc44 <__multiply>:
 800dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc48:	4614      	mov	r4, r2
 800dc4a:	690a      	ldr	r2, [r1, #16]
 800dc4c:	6923      	ldr	r3, [r4, #16]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	bfa8      	it	ge
 800dc52:	4623      	movge	r3, r4
 800dc54:	460f      	mov	r7, r1
 800dc56:	bfa4      	itt	ge
 800dc58:	460c      	movge	r4, r1
 800dc5a:	461f      	movge	r7, r3
 800dc5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc64:	68a3      	ldr	r3, [r4, #8]
 800dc66:	6861      	ldr	r1, [r4, #4]
 800dc68:	eb0a 0609 	add.w	r6, sl, r9
 800dc6c:	42b3      	cmp	r3, r6
 800dc6e:	b085      	sub	sp, #20
 800dc70:	bfb8      	it	lt
 800dc72:	3101      	addlt	r1, #1
 800dc74:	f7ff fe92 	bl	800d99c <_Balloc>
 800dc78:	b930      	cbnz	r0, 800dc88 <__multiply+0x44>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	4b44      	ldr	r3, [pc, #272]	@ (800dd90 <__multiply+0x14c>)
 800dc7e:	4845      	ldr	r0, [pc, #276]	@ (800dd94 <__multiply+0x150>)
 800dc80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc84:	f001 ff88 	bl	800fb98 <__assert_func>
 800dc88:	f100 0514 	add.w	r5, r0, #20
 800dc8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc90:	462b      	mov	r3, r5
 800dc92:	2200      	movs	r2, #0
 800dc94:	4543      	cmp	r3, r8
 800dc96:	d321      	bcc.n	800dcdc <__multiply+0x98>
 800dc98:	f107 0114 	add.w	r1, r7, #20
 800dc9c:	f104 0214 	add.w	r2, r4, #20
 800dca0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dca4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	1b13      	subs	r3, r2, r4
 800dcac:	3b15      	subs	r3, #21
 800dcae:	f023 0303 	bic.w	r3, r3, #3
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	f104 0715 	add.w	r7, r4, #21
 800dcb8:	42ba      	cmp	r2, r7
 800dcba:	bf38      	it	cc
 800dcbc:	2304      	movcc	r3, #4
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	9b02      	ldr	r3, [sp, #8]
 800dcc2:	9103      	str	r1, [sp, #12]
 800dcc4:	428b      	cmp	r3, r1
 800dcc6:	d80c      	bhi.n	800dce2 <__multiply+0x9e>
 800dcc8:	2e00      	cmp	r6, #0
 800dcca:	dd03      	ble.n	800dcd4 <__multiply+0x90>
 800dccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d05b      	beq.n	800dd8c <__multiply+0x148>
 800dcd4:	6106      	str	r6, [r0, #16]
 800dcd6:	b005      	add	sp, #20
 800dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcdc:	f843 2b04 	str.w	r2, [r3], #4
 800dce0:	e7d8      	b.n	800dc94 <__multiply+0x50>
 800dce2:	f8b1 a000 	ldrh.w	sl, [r1]
 800dce6:	f1ba 0f00 	cmp.w	sl, #0
 800dcea:	d024      	beq.n	800dd36 <__multiply+0xf2>
 800dcec:	f104 0e14 	add.w	lr, r4, #20
 800dcf0:	46a9      	mov	r9, r5
 800dcf2:	f04f 0c00 	mov.w	ip, #0
 800dcf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcfa:	f8d9 3000 	ldr.w	r3, [r9]
 800dcfe:	fa1f fb87 	uxth.w	fp, r7
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	fb0a 330b 	mla	r3, sl, fp, r3
 800dd08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dd0c:	f8d9 7000 	ldr.w	r7, [r9]
 800dd10:	4463      	add	r3, ip
 800dd12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd16:	fb0a c70b 	mla	r7, sl, fp, ip
 800dd1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd24:	4572      	cmp	r2, lr
 800dd26:	f849 3b04 	str.w	r3, [r9], #4
 800dd2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd2e:	d8e2      	bhi.n	800dcf6 <__multiply+0xb2>
 800dd30:	9b01      	ldr	r3, [sp, #4]
 800dd32:	f845 c003 	str.w	ip, [r5, r3]
 800dd36:	9b03      	ldr	r3, [sp, #12]
 800dd38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd3c:	3104      	adds	r1, #4
 800dd3e:	f1b9 0f00 	cmp.w	r9, #0
 800dd42:	d021      	beq.n	800dd88 <__multiply+0x144>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	f104 0c14 	add.w	ip, r4, #20
 800dd4a:	46ae      	mov	lr, r5
 800dd4c:	f04f 0a00 	mov.w	sl, #0
 800dd50:	f8bc b000 	ldrh.w	fp, [ip]
 800dd54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd58:	fb09 770b 	mla	r7, r9, fp, r7
 800dd5c:	4457      	add	r7, sl
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd64:	f84e 3b04 	str.w	r3, [lr], #4
 800dd68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd70:	f8be 3000 	ldrh.w	r3, [lr]
 800dd74:	fb09 330a 	mla	r3, r9, sl, r3
 800dd78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd7c:	4562      	cmp	r2, ip
 800dd7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd82:	d8e5      	bhi.n	800dd50 <__multiply+0x10c>
 800dd84:	9f01      	ldr	r7, [sp, #4]
 800dd86:	51eb      	str	r3, [r5, r7]
 800dd88:	3504      	adds	r5, #4
 800dd8a:	e799      	b.n	800dcc0 <__multiply+0x7c>
 800dd8c:	3e01      	subs	r6, #1
 800dd8e:	e79b      	b.n	800dcc8 <__multiply+0x84>
 800dd90:	0801242f 	.word	0x0801242f
 800dd94:	08012440 	.word	0x08012440

0800dd98 <__pow5mult>:
 800dd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd9c:	4615      	mov	r5, r2
 800dd9e:	f012 0203 	ands.w	r2, r2, #3
 800dda2:	4607      	mov	r7, r0
 800dda4:	460e      	mov	r6, r1
 800dda6:	d007      	beq.n	800ddb8 <__pow5mult+0x20>
 800dda8:	4c25      	ldr	r4, [pc, #148]	@ (800de40 <__pow5mult+0xa8>)
 800ddaa:	3a01      	subs	r2, #1
 800ddac:	2300      	movs	r3, #0
 800ddae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddb2:	f7ff fe55 	bl	800da60 <__multadd>
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	10ad      	asrs	r5, r5, #2
 800ddba:	d03d      	beq.n	800de38 <__pow5mult+0xa0>
 800ddbc:	69fc      	ldr	r4, [r7, #28]
 800ddbe:	b97c      	cbnz	r4, 800dde0 <__pow5mult+0x48>
 800ddc0:	2010      	movs	r0, #16
 800ddc2:	f7ff fde3 	bl	800d98c <malloc>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	61f8      	str	r0, [r7, #28]
 800ddca:	b928      	cbnz	r0, 800ddd8 <__pow5mult+0x40>
 800ddcc:	4b1d      	ldr	r3, [pc, #116]	@ (800de44 <__pow5mult+0xac>)
 800ddce:	481e      	ldr	r0, [pc, #120]	@ (800de48 <__pow5mult+0xb0>)
 800ddd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ddd4:	f001 fee0 	bl	800fb98 <__assert_func>
 800ddd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dddc:	6004      	str	r4, [r0, #0]
 800ddde:	60c4      	str	r4, [r0, #12]
 800dde0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dde4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dde8:	b94c      	cbnz	r4, 800ddfe <__pow5mult+0x66>
 800ddea:	f240 2171 	movw	r1, #625	@ 0x271
 800ddee:	4638      	mov	r0, r7
 800ddf0:	f7ff ff12 	bl	800dc18 <__i2b>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	6003      	str	r3, [r0, #0]
 800ddfe:	f04f 0900 	mov.w	r9, #0
 800de02:	07eb      	lsls	r3, r5, #31
 800de04:	d50a      	bpl.n	800de1c <__pow5mult+0x84>
 800de06:	4631      	mov	r1, r6
 800de08:	4622      	mov	r2, r4
 800de0a:	4638      	mov	r0, r7
 800de0c:	f7ff ff1a 	bl	800dc44 <__multiply>
 800de10:	4631      	mov	r1, r6
 800de12:	4680      	mov	r8, r0
 800de14:	4638      	mov	r0, r7
 800de16:	f7ff fe01 	bl	800da1c <_Bfree>
 800de1a:	4646      	mov	r6, r8
 800de1c:	106d      	asrs	r5, r5, #1
 800de1e:	d00b      	beq.n	800de38 <__pow5mult+0xa0>
 800de20:	6820      	ldr	r0, [r4, #0]
 800de22:	b938      	cbnz	r0, 800de34 <__pow5mult+0x9c>
 800de24:	4622      	mov	r2, r4
 800de26:	4621      	mov	r1, r4
 800de28:	4638      	mov	r0, r7
 800de2a:	f7ff ff0b 	bl	800dc44 <__multiply>
 800de2e:	6020      	str	r0, [r4, #0]
 800de30:	f8c0 9000 	str.w	r9, [r0]
 800de34:	4604      	mov	r4, r0
 800de36:	e7e4      	b.n	800de02 <__pow5mult+0x6a>
 800de38:	4630      	mov	r0, r6
 800de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3e:	bf00      	nop
 800de40:	0801249c 	.word	0x0801249c
 800de44:	080123c0 	.word	0x080123c0
 800de48:	08012440 	.word	0x08012440

0800de4c <__lshift>:
 800de4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de50:	460c      	mov	r4, r1
 800de52:	6849      	ldr	r1, [r1, #4]
 800de54:	6923      	ldr	r3, [r4, #16]
 800de56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de5a:	68a3      	ldr	r3, [r4, #8]
 800de5c:	4607      	mov	r7, r0
 800de5e:	4691      	mov	r9, r2
 800de60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de64:	f108 0601 	add.w	r6, r8, #1
 800de68:	42b3      	cmp	r3, r6
 800de6a:	db0b      	blt.n	800de84 <__lshift+0x38>
 800de6c:	4638      	mov	r0, r7
 800de6e:	f7ff fd95 	bl	800d99c <_Balloc>
 800de72:	4605      	mov	r5, r0
 800de74:	b948      	cbnz	r0, 800de8a <__lshift+0x3e>
 800de76:	4602      	mov	r2, r0
 800de78:	4b28      	ldr	r3, [pc, #160]	@ (800df1c <__lshift+0xd0>)
 800de7a:	4829      	ldr	r0, [pc, #164]	@ (800df20 <__lshift+0xd4>)
 800de7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de80:	f001 fe8a 	bl	800fb98 <__assert_func>
 800de84:	3101      	adds	r1, #1
 800de86:	005b      	lsls	r3, r3, #1
 800de88:	e7ee      	b.n	800de68 <__lshift+0x1c>
 800de8a:	2300      	movs	r3, #0
 800de8c:	f100 0114 	add.w	r1, r0, #20
 800de90:	f100 0210 	add.w	r2, r0, #16
 800de94:	4618      	mov	r0, r3
 800de96:	4553      	cmp	r3, sl
 800de98:	db33      	blt.n	800df02 <__lshift+0xb6>
 800de9a:	6920      	ldr	r0, [r4, #16]
 800de9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dea0:	f104 0314 	add.w	r3, r4, #20
 800dea4:	f019 091f 	ands.w	r9, r9, #31
 800dea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800deac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800deb0:	d02b      	beq.n	800df0a <__lshift+0xbe>
 800deb2:	f1c9 0e20 	rsb	lr, r9, #32
 800deb6:	468a      	mov	sl, r1
 800deb8:	2200      	movs	r2, #0
 800deba:	6818      	ldr	r0, [r3, #0]
 800debc:	fa00 f009 	lsl.w	r0, r0, r9
 800dec0:	4310      	orrs	r0, r2
 800dec2:	f84a 0b04 	str.w	r0, [sl], #4
 800dec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deca:	459c      	cmp	ip, r3
 800decc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ded0:	d8f3      	bhi.n	800deba <__lshift+0x6e>
 800ded2:	ebac 0304 	sub.w	r3, ip, r4
 800ded6:	3b15      	subs	r3, #21
 800ded8:	f023 0303 	bic.w	r3, r3, #3
 800dedc:	3304      	adds	r3, #4
 800dede:	f104 0015 	add.w	r0, r4, #21
 800dee2:	4584      	cmp	ip, r0
 800dee4:	bf38      	it	cc
 800dee6:	2304      	movcc	r3, #4
 800dee8:	50ca      	str	r2, [r1, r3]
 800deea:	b10a      	cbz	r2, 800def0 <__lshift+0xa4>
 800deec:	f108 0602 	add.w	r6, r8, #2
 800def0:	3e01      	subs	r6, #1
 800def2:	4638      	mov	r0, r7
 800def4:	612e      	str	r6, [r5, #16]
 800def6:	4621      	mov	r1, r4
 800def8:	f7ff fd90 	bl	800da1c <_Bfree>
 800defc:	4628      	mov	r0, r5
 800defe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df02:	f842 0f04 	str.w	r0, [r2, #4]!
 800df06:	3301      	adds	r3, #1
 800df08:	e7c5      	b.n	800de96 <__lshift+0x4a>
 800df0a:	3904      	subs	r1, #4
 800df0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df10:	f841 2f04 	str.w	r2, [r1, #4]!
 800df14:	459c      	cmp	ip, r3
 800df16:	d8f9      	bhi.n	800df0c <__lshift+0xc0>
 800df18:	e7ea      	b.n	800def0 <__lshift+0xa4>
 800df1a:	bf00      	nop
 800df1c:	0801242f 	.word	0x0801242f
 800df20:	08012440 	.word	0x08012440

0800df24 <__mcmp>:
 800df24:	690a      	ldr	r2, [r1, #16]
 800df26:	4603      	mov	r3, r0
 800df28:	6900      	ldr	r0, [r0, #16]
 800df2a:	1a80      	subs	r0, r0, r2
 800df2c:	b530      	push	{r4, r5, lr}
 800df2e:	d10e      	bne.n	800df4e <__mcmp+0x2a>
 800df30:	3314      	adds	r3, #20
 800df32:	3114      	adds	r1, #20
 800df34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df44:	4295      	cmp	r5, r2
 800df46:	d003      	beq.n	800df50 <__mcmp+0x2c>
 800df48:	d205      	bcs.n	800df56 <__mcmp+0x32>
 800df4a:	f04f 30ff 	mov.w	r0, #4294967295
 800df4e:	bd30      	pop	{r4, r5, pc}
 800df50:	42a3      	cmp	r3, r4
 800df52:	d3f3      	bcc.n	800df3c <__mcmp+0x18>
 800df54:	e7fb      	b.n	800df4e <__mcmp+0x2a>
 800df56:	2001      	movs	r0, #1
 800df58:	e7f9      	b.n	800df4e <__mcmp+0x2a>
	...

0800df5c <__mdiff>:
 800df5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	4689      	mov	r9, r1
 800df62:	4606      	mov	r6, r0
 800df64:	4611      	mov	r1, r2
 800df66:	4648      	mov	r0, r9
 800df68:	4614      	mov	r4, r2
 800df6a:	f7ff ffdb 	bl	800df24 <__mcmp>
 800df6e:	1e05      	subs	r5, r0, #0
 800df70:	d112      	bne.n	800df98 <__mdiff+0x3c>
 800df72:	4629      	mov	r1, r5
 800df74:	4630      	mov	r0, r6
 800df76:	f7ff fd11 	bl	800d99c <_Balloc>
 800df7a:	4602      	mov	r2, r0
 800df7c:	b928      	cbnz	r0, 800df8a <__mdiff+0x2e>
 800df7e:	4b3f      	ldr	r3, [pc, #252]	@ (800e07c <__mdiff+0x120>)
 800df80:	f240 2137 	movw	r1, #567	@ 0x237
 800df84:	483e      	ldr	r0, [pc, #248]	@ (800e080 <__mdiff+0x124>)
 800df86:	f001 fe07 	bl	800fb98 <__assert_func>
 800df8a:	2301      	movs	r3, #1
 800df8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df90:	4610      	mov	r0, r2
 800df92:	b003      	add	sp, #12
 800df94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df98:	bfbc      	itt	lt
 800df9a:	464b      	movlt	r3, r9
 800df9c:	46a1      	movlt	r9, r4
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dfa4:	bfba      	itte	lt
 800dfa6:	461c      	movlt	r4, r3
 800dfa8:	2501      	movlt	r5, #1
 800dfaa:	2500      	movge	r5, #0
 800dfac:	f7ff fcf6 	bl	800d99c <_Balloc>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	b918      	cbnz	r0, 800dfbc <__mdiff+0x60>
 800dfb4:	4b31      	ldr	r3, [pc, #196]	@ (800e07c <__mdiff+0x120>)
 800dfb6:	f240 2145 	movw	r1, #581	@ 0x245
 800dfba:	e7e3      	b.n	800df84 <__mdiff+0x28>
 800dfbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dfc0:	6926      	ldr	r6, [r4, #16]
 800dfc2:	60c5      	str	r5, [r0, #12]
 800dfc4:	f109 0310 	add.w	r3, r9, #16
 800dfc8:	f109 0514 	add.w	r5, r9, #20
 800dfcc:	f104 0e14 	add.w	lr, r4, #20
 800dfd0:	f100 0b14 	add.w	fp, r0, #20
 800dfd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfdc:	9301      	str	r3, [sp, #4]
 800dfde:	46d9      	mov	r9, fp
 800dfe0:	f04f 0c00 	mov.w	ip, #0
 800dfe4:	9b01      	ldr	r3, [sp, #4]
 800dfe6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	fa1f f38a 	uxth.w	r3, sl
 800dff4:	4619      	mov	r1, r3
 800dff6:	b283      	uxth	r3, r0
 800dff8:	1acb      	subs	r3, r1, r3
 800dffa:	0c00      	lsrs	r0, r0, #16
 800dffc:	4463      	add	r3, ip
 800dffe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e002:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e006:	b29b      	uxth	r3, r3
 800e008:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e00c:	4576      	cmp	r6, lr
 800e00e:	f849 3b04 	str.w	r3, [r9], #4
 800e012:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e016:	d8e5      	bhi.n	800dfe4 <__mdiff+0x88>
 800e018:	1b33      	subs	r3, r6, r4
 800e01a:	3b15      	subs	r3, #21
 800e01c:	f023 0303 	bic.w	r3, r3, #3
 800e020:	3415      	adds	r4, #21
 800e022:	3304      	adds	r3, #4
 800e024:	42a6      	cmp	r6, r4
 800e026:	bf38      	it	cc
 800e028:	2304      	movcc	r3, #4
 800e02a:	441d      	add	r5, r3
 800e02c:	445b      	add	r3, fp
 800e02e:	461e      	mov	r6, r3
 800e030:	462c      	mov	r4, r5
 800e032:	4544      	cmp	r4, r8
 800e034:	d30e      	bcc.n	800e054 <__mdiff+0xf8>
 800e036:	f108 0103 	add.w	r1, r8, #3
 800e03a:	1b49      	subs	r1, r1, r5
 800e03c:	f021 0103 	bic.w	r1, r1, #3
 800e040:	3d03      	subs	r5, #3
 800e042:	45a8      	cmp	r8, r5
 800e044:	bf38      	it	cc
 800e046:	2100      	movcc	r1, #0
 800e048:	440b      	add	r3, r1
 800e04a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e04e:	b191      	cbz	r1, 800e076 <__mdiff+0x11a>
 800e050:	6117      	str	r7, [r2, #16]
 800e052:	e79d      	b.n	800df90 <__mdiff+0x34>
 800e054:	f854 1b04 	ldr.w	r1, [r4], #4
 800e058:	46e6      	mov	lr, ip
 800e05a:	0c08      	lsrs	r0, r1, #16
 800e05c:	fa1c fc81 	uxtah	ip, ip, r1
 800e060:	4471      	add	r1, lr
 800e062:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e066:	b289      	uxth	r1, r1
 800e068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e06c:	f846 1b04 	str.w	r1, [r6], #4
 800e070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e074:	e7dd      	b.n	800e032 <__mdiff+0xd6>
 800e076:	3f01      	subs	r7, #1
 800e078:	e7e7      	b.n	800e04a <__mdiff+0xee>
 800e07a:	bf00      	nop
 800e07c:	0801242f 	.word	0x0801242f
 800e080:	08012440 	.word	0x08012440

0800e084 <__ulp>:
 800e084:	b082      	sub	sp, #8
 800e086:	ed8d 0b00 	vstr	d0, [sp]
 800e08a:	9a01      	ldr	r2, [sp, #4]
 800e08c:	4b0f      	ldr	r3, [pc, #60]	@ (800e0cc <__ulp+0x48>)
 800e08e:	4013      	ands	r3, r2
 800e090:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e094:	2b00      	cmp	r3, #0
 800e096:	dc08      	bgt.n	800e0aa <__ulp+0x26>
 800e098:	425b      	negs	r3, r3
 800e09a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e09e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e0a2:	da04      	bge.n	800e0ae <__ulp+0x2a>
 800e0a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e0a8:	4113      	asrs	r3, r2
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	e008      	b.n	800e0c0 <__ulp+0x3c>
 800e0ae:	f1a2 0314 	sub.w	r3, r2, #20
 800e0b2:	2b1e      	cmp	r3, #30
 800e0b4:	bfda      	itte	le
 800e0b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e0ba:	40da      	lsrle	r2, r3
 800e0bc:	2201      	movgt	r2, #1
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	ec41 0b10 	vmov	d0, r0, r1
 800e0c8:	b002      	add	sp, #8
 800e0ca:	4770      	bx	lr
 800e0cc:	7ff00000 	.word	0x7ff00000

0800e0d0 <__b2d>:
 800e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d4:	6906      	ldr	r6, [r0, #16]
 800e0d6:	f100 0814 	add.w	r8, r0, #20
 800e0da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e0de:	1f37      	subs	r7, r6, #4
 800e0e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	f7ff fd4b 	bl	800db80 <__hi0bits>
 800e0ea:	f1c0 0320 	rsb	r3, r0, #32
 800e0ee:	280a      	cmp	r0, #10
 800e0f0:	600b      	str	r3, [r1, #0]
 800e0f2:	491b      	ldr	r1, [pc, #108]	@ (800e160 <__b2d+0x90>)
 800e0f4:	dc15      	bgt.n	800e122 <__b2d+0x52>
 800e0f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e0fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800e0fe:	45b8      	cmp	r8, r7
 800e100:	ea43 0501 	orr.w	r5, r3, r1
 800e104:	bf34      	ite	cc
 800e106:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e10a:	2300      	movcs	r3, #0
 800e10c:	3015      	adds	r0, #21
 800e10e:	fa02 f000 	lsl.w	r0, r2, r0
 800e112:	fa23 f30c 	lsr.w	r3, r3, ip
 800e116:	4303      	orrs	r3, r0
 800e118:	461c      	mov	r4, r3
 800e11a:	ec45 4b10 	vmov	d0, r4, r5
 800e11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e122:	45b8      	cmp	r8, r7
 800e124:	bf3a      	itte	cc
 800e126:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e12a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e12e:	2300      	movcs	r3, #0
 800e130:	380b      	subs	r0, #11
 800e132:	d012      	beq.n	800e15a <__b2d+0x8a>
 800e134:	f1c0 0120 	rsb	r1, r0, #32
 800e138:	fa23 f401 	lsr.w	r4, r3, r1
 800e13c:	4082      	lsls	r2, r0
 800e13e:	4322      	orrs	r2, r4
 800e140:	4547      	cmp	r7, r8
 800e142:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e146:	bf8c      	ite	hi
 800e148:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e14c:	2200      	movls	r2, #0
 800e14e:	4083      	lsls	r3, r0
 800e150:	40ca      	lsrs	r2, r1
 800e152:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e156:	4313      	orrs	r3, r2
 800e158:	e7de      	b.n	800e118 <__b2d+0x48>
 800e15a:	ea42 0501 	orr.w	r5, r2, r1
 800e15e:	e7db      	b.n	800e118 <__b2d+0x48>
 800e160:	3ff00000 	.word	0x3ff00000

0800e164 <__d2b>:
 800e164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e168:	460f      	mov	r7, r1
 800e16a:	2101      	movs	r1, #1
 800e16c:	ec59 8b10 	vmov	r8, r9, d0
 800e170:	4616      	mov	r6, r2
 800e172:	f7ff fc13 	bl	800d99c <_Balloc>
 800e176:	4604      	mov	r4, r0
 800e178:	b930      	cbnz	r0, 800e188 <__d2b+0x24>
 800e17a:	4602      	mov	r2, r0
 800e17c:	4b23      	ldr	r3, [pc, #140]	@ (800e20c <__d2b+0xa8>)
 800e17e:	4824      	ldr	r0, [pc, #144]	@ (800e210 <__d2b+0xac>)
 800e180:	f240 310f 	movw	r1, #783	@ 0x30f
 800e184:	f001 fd08 	bl	800fb98 <__assert_func>
 800e188:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e18c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e190:	b10d      	cbz	r5, 800e196 <__d2b+0x32>
 800e192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	f1b8 0300 	subs.w	r3, r8, #0
 800e19c:	d023      	beq.n	800e1e6 <__d2b+0x82>
 800e19e:	4668      	mov	r0, sp
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	f7ff fd0c 	bl	800dbbe <__lo0bits>
 800e1a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e1aa:	b1d0      	cbz	r0, 800e1e2 <__d2b+0x7e>
 800e1ac:	f1c0 0320 	rsb	r3, r0, #32
 800e1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b4:	430b      	orrs	r3, r1
 800e1b6:	40c2      	lsrs	r2, r0
 800e1b8:	6163      	str	r3, [r4, #20]
 800e1ba:	9201      	str	r2, [sp, #4]
 800e1bc:	9b01      	ldr	r3, [sp, #4]
 800e1be:	61a3      	str	r3, [r4, #24]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	bf0c      	ite	eq
 800e1c4:	2201      	moveq	r2, #1
 800e1c6:	2202      	movne	r2, #2
 800e1c8:	6122      	str	r2, [r4, #16]
 800e1ca:	b1a5      	cbz	r5, 800e1f6 <__d2b+0x92>
 800e1cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1d0:	4405      	add	r5, r0
 800e1d2:	603d      	str	r5, [r7, #0]
 800e1d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1d8:	6030      	str	r0, [r6, #0]
 800e1da:	4620      	mov	r0, r4
 800e1dc:	b003      	add	sp, #12
 800e1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1e2:	6161      	str	r1, [r4, #20]
 800e1e4:	e7ea      	b.n	800e1bc <__d2b+0x58>
 800e1e6:	a801      	add	r0, sp, #4
 800e1e8:	f7ff fce9 	bl	800dbbe <__lo0bits>
 800e1ec:	9b01      	ldr	r3, [sp, #4]
 800e1ee:	6163      	str	r3, [r4, #20]
 800e1f0:	3020      	adds	r0, #32
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	e7e8      	b.n	800e1c8 <__d2b+0x64>
 800e1f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1fe:	6038      	str	r0, [r7, #0]
 800e200:	6918      	ldr	r0, [r3, #16]
 800e202:	f7ff fcbd 	bl	800db80 <__hi0bits>
 800e206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e20a:	e7e5      	b.n	800e1d8 <__d2b+0x74>
 800e20c:	0801242f 	.word	0x0801242f
 800e210:	08012440 	.word	0x08012440

0800e214 <__ratio>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	b085      	sub	sp, #20
 800e21a:	e9cd 1000 	strd	r1, r0, [sp]
 800e21e:	a902      	add	r1, sp, #8
 800e220:	f7ff ff56 	bl	800e0d0 <__b2d>
 800e224:	9800      	ldr	r0, [sp, #0]
 800e226:	a903      	add	r1, sp, #12
 800e228:	ec55 4b10 	vmov	r4, r5, d0
 800e22c:	f7ff ff50 	bl	800e0d0 <__b2d>
 800e230:	9b01      	ldr	r3, [sp, #4]
 800e232:	6919      	ldr	r1, [r3, #16]
 800e234:	9b00      	ldr	r3, [sp, #0]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	1ac9      	subs	r1, r1, r3
 800e23a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e23e:	1a9b      	subs	r3, r3, r2
 800e240:	ec5b ab10 	vmov	sl, fp, d0
 800e244:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e248:	2b00      	cmp	r3, #0
 800e24a:	bfce      	itee	gt
 800e24c:	462a      	movgt	r2, r5
 800e24e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e252:	465a      	movle	r2, fp
 800e254:	462f      	mov	r7, r5
 800e256:	46d9      	mov	r9, fp
 800e258:	bfcc      	ite	gt
 800e25a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e25e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e262:	464b      	mov	r3, r9
 800e264:	4652      	mov	r2, sl
 800e266:	4620      	mov	r0, r4
 800e268:	4639      	mov	r1, r7
 800e26a:	f7f2 fb0f 	bl	800088c <__aeabi_ddiv>
 800e26e:	ec41 0b10 	vmov	d0, r0, r1
 800e272:	b005      	add	sp, #20
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e278 <__copybits>:
 800e278:	3901      	subs	r1, #1
 800e27a:	b570      	push	{r4, r5, r6, lr}
 800e27c:	1149      	asrs	r1, r1, #5
 800e27e:	6914      	ldr	r4, [r2, #16]
 800e280:	3101      	adds	r1, #1
 800e282:	f102 0314 	add.w	r3, r2, #20
 800e286:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e28a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e28e:	1f05      	subs	r5, r0, #4
 800e290:	42a3      	cmp	r3, r4
 800e292:	d30c      	bcc.n	800e2ae <__copybits+0x36>
 800e294:	1aa3      	subs	r3, r4, r2
 800e296:	3b11      	subs	r3, #17
 800e298:	f023 0303 	bic.w	r3, r3, #3
 800e29c:	3211      	adds	r2, #17
 800e29e:	42a2      	cmp	r2, r4
 800e2a0:	bf88      	it	hi
 800e2a2:	2300      	movhi	r3, #0
 800e2a4:	4418      	add	r0, r3
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	4288      	cmp	r0, r1
 800e2aa:	d305      	bcc.n	800e2b8 <__copybits+0x40>
 800e2ac:	bd70      	pop	{r4, r5, r6, pc}
 800e2ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2b6:	e7eb      	b.n	800e290 <__copybits+0x18>
 800e2b8:	f840 3b04 	str.w	r3, [r0], #4
 800e2bc:	e7f4      	b.n	800e2a8 <__copybits+0x30>

0800e2be <__any_on>:
 800e2be:	f100 0214 	add.w	r2, r0, #20
 800e2c2:	6900      	ldr	r0, [r0, #16]
 800e2c4:	114b      	asrs	r3, r1, #5
 800e2c6:	4298      	cmp	r0, r3
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	db11      	blt.n	800e2f0 <__any_on+0x32>
 800e2cc:	dd0a      	ble.n	800e2e4 <__any_on+0x26>
 800e2ce:	f011 011f 	ands.w	r1, r1, #31
 800e2d2:	d007      	beq.n	800e2e4 <__any_on+0x26>
 800e2d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2d8:	fa24 f001 	lsr.w	r0, r4, r1
 800e2dc:	fa00 f101 	lsl.w	r1, r0, r1
 800e2e0:	428c      	cmp	r4, r1
 800e2e2:	d10b      	bne.n	800e2fc <__any_on+0x3e>
 800e2e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d803      	bhi.n	800e2f4 <__any_on+0x36>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	bd10      	pop	{r4, pc}
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	e7f7      	b.n	800e2e4 <__any_on+0x26>
 800e2f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	d0f5      	beq.n	800e2e8 <__any_on+0x2a>
 800e2fc:	2001      	movs	r0, #1
 800e2fe:	e7f6      	b.n	800e2ee <__any_on+0x30>

0800e300 <sulp>:
 800e300:	b570      	push	{r4, r5, r6, lr}
 800e302:	4604      	mov	r4, r0
 800e304:	460d      	mov	r5, r1
 800e306:	ec45 4b10 	vmov	d0, r4, r5
 800e30a:	4616      	mov	r6, r2
 800e30c:	f7ff feba 	bl	800e084 <__ulp>
 800e310:	ec51 0b10 	vmov	r0, r1, d0
 800e314:	b17e      	cbz	r6, 800e336 <sulp+0x36>
 800e316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e31a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e31e:	2b00      	cmp	r3, #0
 800e320:	dd09      	ble.n	800e336 <sulp+0x36>
 800e322:	051b      	lsls	r3, r3, #20
 800e324:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e328:	2400      	movs	r4, #0
 800e32a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e32e:	4622      	mov	r2, r4
 800e330:	462b      	mov	r3, r5
 800e332:	f7f2 f981 	bl	8000638 <__aeabi_dmul>
 800e336:	ec41 0b10 	vmov	d0, r0, r1
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	0000      	movs	r0, r0
	...

0800e340 <_strtod_l>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	b09f      	sub	sp, #124	@ 0x7c
 800e346:	460c      	mov	r4, r1
 800e348:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e34a:	2200      	movs	r2, #0
 800e34c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e34e:	9005      	str	r0, [sp, #20]
 800e350:	f04f 0a00 	mov.w	sl, #0
 800e354:	f04f 0b00 	mov.w	fp, #0
 800e358:	460a      	mov	r2, r1
 800e35a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e35c:	7811      	ldrb	r1, [r2, #0]
 800e35e:	292b      	cmp	r1, #43	@ 0x2b
 800e360:	d04a      	beq.n	800e3f8 <_strtod_l+0xb8>
 800e362:	d838      	bhi.n	800e3d6 <_strtod_l+0x96>
 800e364:	290d      	cmp	r1, #13
 800e366:	d832      	bhi.n	800e3ce <_strtod_l+0x8e>
 800e368:	2908      	cmp	r1, #8
 800e36a:	d832      	bhi.n	800e3d2 <_strtod_l+0x92>
 800e36c:	2900      	cmp	r1, #0
 800e36e:	d03b      	beq.n	800e3e8 <_strtod_l+0xa8>
 800e370:	2200      	movs	r2, #0
 800e372:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e374:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e376:	782a      	ldrb	r2, [r5, #0]
 800e378:	2a30      	cmp	r2, #48	@ 0x30
 800e37a:	f040 80b3 	bne.w	800e4e4 <_strtod_l+0x1a4>
 800e37e:	786a      	ldrb	r2, [r5, #1]
 800e380:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e384:	2a58      	cmp	r2, #88	@ 0x58
 800e386:	d16e      	bne.n	800e466 <_strtod_l+0x126>
 800e388:	9302      	str	r3, [sp, #8]
 800e38a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	4a8e      	ldr	r2, [pc, #568]	@ (800e5cc <_strtod_l+0x28c>)
 800e394:	9805      	ldr	r0, [sp, #20]
 800e396:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e398:	a919      	add	r1, sp, #100	@ 0x64
 800e39a:	f001 fc83 	bl	800fca4 <__gethex>
 800e39e:	f010 060f 	ands.w	r6, r0, #15
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	d005      	beq.n	800e3b2 <_strtod_l+0x72>
 800e3a6:	2e06      	cmp	r6, #6
 800e3a8:	d128      	bne.n	800e3fc <_strtod_l+0xbc>
 800e3aa:	3501      	adds	r5, #1
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800e3b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f040 858e 	bne.w	800eed6 <_strtod_l+0xb96>
 800e3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3bc:	b1cb      	cbz	r3, 800e3f2 <_strtod_l+0xb2>
 800e3be:	4652      	mov	r2, sl
 800e3c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e3c4:	ec43 2b10 	vmov	d0, r2, r3
 800e3c8:	b01f      	add	sp, #124	@ 0x7c
 800e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ce:	2920      	cmp	r1, #32
 800e3d0:	d1ce      	bne.n	800e370 <_strtod_l+0x30>
 800e3d2:	3201      	adds	r2, #1
 800e3d4:	e7c1      	b.n	800e35a <_strtod_l+0x1a>
 800e3d6:	292d      	cmp	r1, #45	@ 0x2d
 800e3d8:	d1ca      	bne.n	800e370 <_strtod_l+0x30>
 800e3da:	2101      	movs	r1, #1
 800e3dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3de:	1c51      	adds	r1, r2, #1
 800e3e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800e3e2:	7852      	ldrb	r2, [r2, #1]
 800e3e4:	2a00      	cmp	r2, #0
 800e3e6:	d1c5      	bne.n	800e374 <_strtod_l+0x34>
 800e3e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e3ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f040 8570 	bne.w	800eed2 <_strtod_l+0xb92>
 800e3f2:	4652      	mov	r2, sl
 800e3f4:	465b      	mov	r3, fp
 800e3f6:	e7e5      	b.n	800e3c4 <_strtod_l+0x84>
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	e7ef      	b.n	800e3dc <_strtod_l+0x9c>
 800e3fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e3fe:	b13a      	cbz	r2, 800e410 <_strtod_l+0xd0>
 800e400:	2135      	movs	r1, #53	@ 0x35
 800e402:	a81c      	add	r0, sp, #112	@ 0x70
 800e404:	f7ff ff38 	bl	800e278 <__copybits>
 800e408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e40a:	9805      	ldr	r0, [sp, #20]
 800e40c:	f7ff fb06 	bl	800da1c <_Bfree>
 800e410:	3e01      	subs	r6, #1
 800e412:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e414:	2e04      	cmp	r6, #4
 800e416:	d806      	bhi.n	800e426 <_strtod_l+0xe6>
 800e418:	e8df f006 	tbb	[pc, r6]
 800e41c:	201d0314 	.word	0x201d0314
 800e420:	14          	.byte	0x14
 800e421:	00          	.byte	0x00
 800e422:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e426:	05e1      	lsls	r1, r4, #23
 800e428:	bf48      	it	mi
 800e42a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e42e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e432:	0d1b      	lsrs	r3, r3, #20
 800e434:	051b      	lsls	r3, r3, #20
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1bb      	bne.n	800e3b2 <_strtod_l+0x72>
 800e43a:	f7fe fbcd 	bl	800cbd8 <__errno>
 800e43e:	2322      	movs	r3, #34	@ 0x22
 800e440:	6003      	str	r3, [r0, #0]
 800e442:	e7b6      	b.n	800e3b2 <_strtod_l+0x72>
 800e444:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e448:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e44c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e450:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e454:	e7e7      	b.n	800e426 <_strtod_l+0xe6>
 800e456:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e5d4 <_strtod_l+0x294>
 800e45a:	e7e4      	b.n	800e426 <_strtod_l+0xe6>
 800e45c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e460:	f04f 3aff 	mov.w	sl, #4294967295
 800e464:	e7df      	b.n	800e426 <_strtod_l+0xe6>
 800e466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	2b30      	cmp	r3, #48	@ 0x30
 800e470:	d0f9      	beq.n	800e466 <_strtod_l+0x126>
 800e472:	2b00      	cmp	r3, #0
 800e474:	d09d      	beq.n	800e3b2 <_strtod_l+0x72>
 800e476:	2301      	movs	r3, #1
 800e478:	9309      	str	r3, [sp, #36]	@ 0x24
 800e47a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e47c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e47e:	2300      	movs	r3, #0
 800e480:	9308      	str	r3, [sp, #32]
 800e482:	930a      	str	r3, [sp, #40]	@ 0x28
 800e484:	461f      	mov	r7, r3
 800e486:	220a      	movs	r2, #10
 800e488:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e48a:	7805      	ldrb	r5, [r0, #0]
 800e48c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e490:	b2d9      	uxtb	r1, r3
 800e492:	2909      	cmp	r1, #9
 800e494:	d928      	bls.n	800e4e8 <_strtod_l+0x1a8>
 800e496:	494e      	ldr	r1, [pc, #312]	@ (800e5d0 <_strtod_l+0x290>)
 800e498:	2201      	movs	r2, #1
 800e49a:	f001 fb62 	bl	800fb62 <strncmp>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d032      	beq.n	800e508 <_strtod_l+0x1c8>
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	462a      	mov	r2, r5
 800e4a6:	4681      	mov	r9, r0
 800e4a8:	463d      	mov	r5, r7
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2a65      	cmp	r2, #101	@ 0x65
 800e4ae:	d001      	beq.n	800e4b4 <_strtod_l+0x174>
 800e4b0:	2a45      	cmp	r2, #69	@ 0x45
 800e4b2:	d114      	bne.n	800e4de <_strtod_l+0x19e>
 800e4b4:	b91d      	cbnz	r5, 800e4be <_strtod_l+0x17e>
 800e4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4b8:	4302      	orrs	r2, r0
 800e4ba:	d095      	beq.n	800e3e8 <_strtod_l+0xa8>
 800e4bc:	2500      	movs	r5, #0
 800e4be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e4c0:	1c62      	adds	r2, r4, #1
 800e4c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4c4:	7862      	ldrb	r2, [r4, #1]
 800e4c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e4c8:	d077      	beq.n	800e5ba <_strtod_l+0x27a>
 800e4ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800e4cc:	d07b      	beq.n	800e5c6 <_strtod_l+0x286>
 800e4ce:	f04f 0c00 	mov.w	ip, #0
 800e4d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e4d6:	2909      	cmp	r1, #9
 800e4d8:	f240 8082 	bls.w	800e5e0 <_strtod_l+0x2a0>
 800e4dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800e4de:	f04f 0800 	mov.w	r8, #0
 800e4e2:	e0a2      	b.n	800e62a <_strtod_l+0x2ea>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	e7c7      	b.n	800e478 <_strtod_l+0x138>
 800e4e8:	2f08      	cmp	r7, #8
 800e4ea:	bfd5      	itete	le
 800e4ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e4ee:	9908      	ldrgt	r1, [sp, #32]
 800e4f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e4f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e4f8:	f100 0001 	add.w	r0, r0, #1
 800e4fc:	bfd4      	ite	le
 800e4fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e500:	9308      	strgt	r3, [sp, #32]
 800e502:	3701      	adds	r7, #1
 800e504:	9019      	str	r0, [sp, #100]	@ 0x64
 800e506:	e7bf      	b.n	800e488 <_strtod_l+0x148>
 800e508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e50e:	785a      	ldrb	r2, [r3, #1]
 800e510:	b37f      	cbz	r7, 800e572 <_strtod_l+0x232>
 800e512:	4681      	mov	r9, r0
 800e514:	463d      	mov	r5, r7
 800e516:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e51a:	2b09      	cmp	r3, #9
 800e51c:	d912      	bls.n	800e544 <_strtod_l+0x204>
 800e51e:	2301      	movs	r3, #1
 800e520:	e7c4      	b.n	800e4ac <_strtod_l+0x16c>
 800e522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e524:	1c5a      	adds	r2, r3, #1
 800e526:	9219      	str	r2, [sp, #100]	@ 0x64
 800e528:	785a      	ldrb	r2, [r3, #1]
 800e52a:	3001      	adds	r0, #1
 800e52c:	2a30      	cmp	r2, #48	@ 0x30
 800e52e:	d0f8      	beq.n	800e522 <_strtod_l+0x1e2>
 800e530:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e534:	2b08      	cmp	r3, #8
 800e536:	f200 84d3 	bhi.w	800eee0 <_strtod_l+0xba0>
 800e53a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e53c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e53e:	4681      	mov	r9, r0
 800e540:	2000      	movs	r0, #0
 800e542:	4605      	mov	r5, r0
 800e544:	3a30      	subs	r2, #48	@ 0x30
 800e546:	f100 0301 	add.w	r3, r0, #1
 800e54a:	d02a      	beq.n	800e5a2 <_strtod_l+0x262>
 800e54c:	4499      	add	r9, r3
 800e54e:	eb00 0c05 	add.w	ip, r0, r5
 800e552:	462b      	mov	r3, r5
 800e554:	210a      	movs	r1, #10
 800e556:	4563      	cmp	r3, ip
 800e558:	d10d      	bne.n	800e576 <_strtod_l+0x236>
 800e55a:	1c69      	adds	r1, r5, #1
 800e55c:	4401      	add	r1, r0
 800e55e:	4428      	add	r0, r5
 800e560:	2808      	cmp	r0, #8
 800e562:	dc16      	bgt.n	800e592 <_strtod_l+0x252>
 800e564:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e566:	230a      	movs	r3, #10
 800e568:	fb03 2300 	mla	r3, r3, r0, r2
 800e56c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e56e:	2300      	movs	r3, #0
 800e570:	e018      	b.n	800e5a4 <_strtod_l+0x264>
 800e572:	4638      	mov	r0, r7
 800e574:	e7da      	b.n	800e52c <_strtod_l+0x1ec>
 800e576:	2b08      	cmp	r3, #8
 800e578:	f103 0301 	add.w	r3, r3, #1
 800e57c:	dc03      	bgt.n	800e586 <_strtod_l+0x246>
 800e57e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e580:	434e      	muls	r6, r1
 800e582:	960a      	str	r6, [sp, #40]	@ 0x28
 800e584:	e7e7      	b.n	800e556 <_strtod_l+0x216>
 800e586:	2b10      	cmp	r3, #16
 800e588:	bfde      	ittt	le
 800e58a:	9e08      	ldrle	r6, [sp, #32]
 800e58c:	434e      	mulle	r6, r1
 800e58e:	9608      	strle	r6, [sp, #32]
 800e590:	e7e1      	b.n	800e556 <_strtod_l+0x216>
 800e592:	280f      	cmp	r0, #15
 800e594:	dceb      	bgt.n	800e56e <_strtod_l+0x22e>
 800e596:	9808      	ldr	r0, [sp, #32]
 800e598:	230a      	movs	r3, #10
 800e59a:	fb03 2300 	mla	r3, r3, r0, r2
 800e59e:	9308      	str	r3, [sp, #32]
 800e5a0:	e7e5      	b.n	800e56e <_strtod_l+0x22e>
 800e5a2:	4629      	mov	r1, r5
 800e5a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5a6:	1c50      	adds	r0, r2, #1
 800e5a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800e5aa:	7852      	ldrb	r2, [r2, #1]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	e7b1      	b.n	800e516 <_strtod_l+0x1d6>
 800e5b2:	f04f 0900 	mov.w	r9, #0
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e77d      	b.n	800e4b6 <_strtod_l+0x176>
 800e5ba:	f04f 0c00 	mov.w	ip, #0
 800e5be:	1ca2      	adds	r2, r4, #2
 800e5c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5c2:	78a2      	ldrb	r2, [r4, #2]
 800e5c4:	e785      	b.n	800e4d2 <_strtod_l+0x192>
 800e5c6:	f04f 0c01 	mov.w	ip, #1
 800e5ca:	e7f8      	b.n	800e5be <_strtod_l+0x27e>
 800e5cc:	080125b0 	.word	0x080125b0
 800e5d0:	08012598 	.word	0x08012598
 800e5d4:	7ff00000 	.word	0x7ff00000
 800e5d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5da:	1c51      	adds	r1, r2, #1
 800e5dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e5de:	7852      	ldrb	r2, [r2, #1]
 800e5e0:	2a30      	cmp	r2, #48	@ 0x30
 800e5e2:	d0f9      	beq.n	800e5d8 <_strtod_l+0x298>
 800e5e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e5e8:	2908      	cmp	r1, #8
 800e5ea:	f63f af78 	bhi.w	800e4de <_strtod_l+0x19e>
 800e5ee:	3a30      	subs	r2, #48	@ 0x30
 800e5f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e5f6:	f04f 080a 	mov.w	r8, #10
 800e5fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5fc:	1c56      	adds	r6, r2, #1
 800e5fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800e600:	7852      	ldrb	r2, [r2, #1]
 800e602:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e606:	f1be 0f09 	cmp.w	lr, #9
 800e60a:	d939      	bls.n	800e680 <_strtod_l+0x340>
 800e60c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e60e:	1a76      	subs	r6, r6, r1
 800e610:	2e08      	cmp	r6, #8
 800e612:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e616:	dc03      	bgt.n	800e620 <_strtod_l+0x2e0>
 800e618:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e61a:	4588      	cmp	r8, r1
 800e61c:	bfa8      	it	ge
 800e61e:	4688      	movge	r8, r1
 800e620:	f1bc 0f00 	cmp.w	ip, #0
 800e624:	d001      	beq.n	800e62a <_strtod_l+0x2ea>
 800e626:	f1c8 0800 	rsb	r8, r8, #0
 800e62a:	2d00      	cmp	r5, #0
 800e62c:	d14e      	bne.n	800e6cc <_strtod_l+0x38c>
 800e62e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e630:	4308      	orrs	r0, r1
 800e632:	f47f aebe 	bne.w	800e3b2 <_strtod_l+0x72>
 800e636:	2b00      	cmp	r3, #0
 800e638:	f47f aed6 	bne.w	800e3e8 <_strtod_l+0xa8>
 800e63c:	2a69      	cmp	r2, #105	@ 0x69
 800e63e:	d028      	beq.n	800e692 <_strtod_l+0x352>
 800e640:	dc25      	bgt.n	800e68e <_strtod_l+0x34e>
 800e642:	2a49      	cmp	r2, #73	@ 0x49
 800e644:	d025      	beq.n	800e692 <_strtod_l+0x352>
 800e646:	2a4e      	cmp	r2, #78	@ 0x4e
 800e648:	f47f aece 	bne.w	800e3e8 <_strtod_l+0xa8>
 800e64c:	499b      	ldr	r1, [pc, #620]	@ (800e8bc <_strtod_l+0x57c>)
 800e64e:	a819      	add	r0, sp, #100	@ 0x64
 800e650:	f001 fd4a 	bl	80100e8 <__match>
 800e654:	2800      	cmp	r0, #0
 800e656:	f43f aec7 	beq.w	800e3e8 <_strtod_l+0xa8>
 800e65a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	2b28      	cmp	r3, #40	@ 0x28
 800e660:	d12e      	bne.n	800e6c0 <_strtod_l+0x380>
 800e662:	4997      	ldr	r1, [pc, #604]	@ (800e8c0 <_strtod_l+0x580>)
 800e664:	aa1c      	add	r2, sp, #112	@ 0x70
 800e666:	a819      	add	r0, sp, #100	@ 0x64
 800e668:	f001 fd52 	bl	8010110 <__hexnan>
 800e66c:	2805      	cmp	r0, #5
 800e66e:	d127      	bne.n	800e6c0 <_strtod_l+0x380>
 800e670:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e672:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e676:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e67a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e67e:	e698      	b.n	800e3b2 <_strtod_l+0x72>
 800e680:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e682:	fb08 2101 	mla	r1, r8, r1, r2
 800e686:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e68a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e68c:	e7b5      	b.n	800e5fa <_strtod_l+0x2ba>
 800e68e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e690:	e7da      	b.n	800e648 <_strtod_l+0x308>
 800e692:	498c      	ldr	r1, [pc, #560]	@ (800e8c4 <_strtod_l+0x584>)
 800e694:	a819      	add	r0, sp, #100	@ 0x64
 800e696:	f001 fd27 	bl	80100e8 <__match>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f43f aea4 	beq.w	800e3e8 <_strtod_l+0xa8>
 800e6a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6a2:	4989      	ldr	r1, [pc, #548]	@ (800e8c8 <_strtod_l+0x588>)
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	a819      	add	r0, sp, #100	@ 0x64
 800e6a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e6aa:	f001 fd1d 	bl	80100e8 <__match>
 800e6ae:	b910      	cbnz	r0, 800e6b6 <_strtod_l+0x376>
 800e6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e6b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e8d8 <_strtod_l+0x598>
 800e6ba:	f04f 0a00 	mov.w	sl, #0
 800e6be:	e678      	b.n	800e3b2 <_strtod_l+0x72>
 800e6c0:	4882      	ldr	r0, [pc, #520]	@ (800e8cc <_strtod_l+0x58c>)
 800e6c2:	f001 fa61 	bl	800fb88 <nan>
 800e6c6:	ec5b ab10 	vmov	sl, fp, d0
 800e6ca:	e672      	b.n	800e3b2 <_strtod_l+0x72>
 800e6cc:	eba8 0309 	sub.w	r3, r8, r9
 800e6d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6d4:	2f00      	cmp	r7, #0
 800e6d6:	bf08      	it	eq
 800e6d8:	462f      	moveq	r7, r5
 800e6da:	2d10      	cmp	r5, #16
 800e6dc:	462c      	mov	r4, r5
 800e6de:	bfa8      	it	ge
 800e6e0:	2410      	movge	r4, #16
 800e6e2:	f7f1 ff2f 	bl	8000544 <__aeabi_ui2d>
 800e6e6:	2d09      	cmp	r5, #9
 800e6e8:	4682      	mov	sl, r0
 800e6ea:	468b      	mov	fp, r1
 800e6ec:	dc13      	bgt.n	800e716 <_strtod_l+0x3d6>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f43f ae5e 	beq.w	800e3b2 <_strtod_l+0x72>
 800e6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f8:	dd78      	ble.n	800e7ec <_strtod_l+0x4ac>
 800e6fa:	2b16      	cmp	r3, #22
 800e6fc:	dc5f      	bgt.n	800e7be <_strtod_l+0x47e>
 800e6fe:	4974      	ldr	r1, [pc, #464]	@ (800e8d0 <_strtod_l+0x590>)
 800e700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e708:	4652      	mov	r2, sl
 800e70a:	465b      	mov	r3, fp
 800e70c:	f7f1 ff94 	bl	8000638 <__aeabi_dmul>
 800e710:	4682      	mov	sl, r0
 800e712:	468b      	mov	fp, r1
 800e714:	e64d      	b.n	800e3b2 <_strtod_l+0x72>
 800e716:	4b6e      	ldr	r3, [pc, #440]	@ (800e8d0 <_strtod_l+0x590>)
 800e718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e71c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e720:	f7f1 ff8a 	bl	8000638 <__aeabi_dmul>
 800e724:	4682      	mov	sl, r0
 800e726:	9808      	ldr	r0, [sp, #32]
 800e728:	468b      	mov	fp, r1
 800e72a:	f7f1 ff0b 	bl	8000544 <__aeabi_ui2d>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4650      	mov	r0, sl
 800e734:	4659      	mov	r1, fp
 800e736:	f7f1 fdc9 	bl	80002cc <__adddf3>
 800e73a:	2d0f      	cmp	r5, #15
 800e73c:	4682      	mov	sl, r0
 800e73e:	468b      	mov	fp, r1
 800e740:	ddd5      	ble.n	800e6ee <_strtod_l+0x3ae>
 800e742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e744:	1b2c      	subs	r4, r5, r4
 800e746:	441c      	add	r4, r3
 800e748:	2c00      	cmp	r4, #0
 800e74a:	f340 8096 	ble.w	800e87a <_strtod_l+0x53a>
 800e74e:	f014 030f 	ands.w	r3, r4, #15
 800e752:	d00a      	beq.n	800e76a <_strtod_l+0x42a>
 800e754:	495e      	ldr	r1, [pc, #376]	@ (800e8d0 <_strtod_l+0x590>)
 800e756:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e75a:	4652      	mov	r2, sl
 800e75c:	465b      	mov	r3, fp
 800e75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e762:	f7f1 ff69 	bl	8000638 <__aeabi_dmul>
 800e766:	4682      	mov	sl, r0
 800e768:	468b      	mov	fp, r1
 800e76a:	f034 040f 	bics.w	r4, r4, #15
 800e76e:	d073      	beq.n	800e858 <_strtod_l+0x518>
 800e770:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e774:	dd48      	ble.n	800e808 <_strtod_l+0x4c8>
 800e776:	2400      	movs	r4, #0
 800e778:	46a0      	mov	r8, r4
 800e77a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e77c:	46a1      	mov	r9, r4
 800e77e:	9a05      	ldr	r2, [sp, #20]
 800e780:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e8d8 <_strtod_l+0x598>
 800e784:	2322      	movs	r3, #34	@ 0x22
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	f04f 0a00 	mov.w	sl, #0
 800e78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f43f ae0f 	beq.w	800e3b2 <_strtod_l+0x72>
 800e794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e796:	9805      	ldr	r0, [sp, #20]
 800e798:	f7ff f940 	bl	800da1c <_Bfree>
 800e79c:	9805      	ldr	r0, [sp, #20]
 800e79e:	4649      	mov	r1, r9
 800e7a0:	f7ff f93c 	bl	800da1c <_Bfree>
 800e7a4:	9805      	ldr	r0, [sp, #20]
 800e7a6:	4641      	mov	r1, r8
 800e7a8:	f7ff f938 	bl	800da1c <_Bfree>
 800e7ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e7ae:	9805      	ldr	r0, [sp, #20]
 800e7b0:	f7ff f934 	bl	800da1c <_Bfree>
 800e7b4:	9805      	ldr	r0, [sp, #20]
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	f7ff f930 	bl	800da1c <_Bfree>
 800e7bc:	e5f9      	b.n	800e3b2 <_strtod_l+0x72>
 800e7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	dbbc      	blt.n	800e742 <_strtod_l+0x402>
 800e7c8:	4c41      	ldr	r4, [pc, #260]	@ (800e8d0 <_strtod_l+0x590>)
 800e7ca:	f1c5 050f 	rsb	r5, r5, #15
 800e7ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e7d2:	4652      	mov	r2, sl
 800e7d4:	465b      	mov	r3, fp
 800e7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7da:	f7f1 ff2d 	bl	8000638 <__aeabi_dmul>
 800e7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e0:	1b5d      	subs	r5, r3, r5
 800e7e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e7e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e7ea:	e78f      	b.n	800e70c <_strtod_l+0x3cc>
 800e7ec:	3316      	adds	r3, #22
 800e7ee:	dba8      	blt.n	800e742 <_strtod_l+0x402>
 800e7f0:	4b37      	ldr	r3, [pc, #220]	@ (800e8d0 <_strtod_l+0x590>)
 800e7f2:	eba9 0808 	sub.w	r8, r9, r8
 800e7f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e7fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e7fe:	4650      	mov	r0, sl
 800e800:	4659      	mov	r1, fp
 800e802:	f7f2 f843 	bl	800088c <__aeabi_ddiv>
 800e806:	e783      	b.n	800e710 <_strtod_l+0x3d0>
 800e808:	4b32      	ldr	r3, [pc, #200]	@ (800e8d4 <_strtod_l+0x594>)
 800e80a:	9308      	str	r3, [sp, #32]
 800e80c:	2300      	movs	r3, #0
 800e80e:	1124      	asrs	r4, r4, #4
 800e810:	4650      	mov	r0, sl
 800e812:	4659      	mov	r1, fp
 800e814:	461e      	mov	r6, r3
 800e816:	2c01      	cmp	r4, #1
 800e818:	dc21      	bgt.n	800e85e <_strtod_l+0x51e>
 800e81a:	b10b      	cbz	r3, 800e820 <_strtod_l+0x4e0>
 800e81c:	4682      	mov	sl, r0
 800e81e:	468b      	mov	fp, r1
 800e820:	492c      	ldr	r1, [pc, #176]	@ (800e8d4 <_strtod_l+0x594>)
 800e822:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e826:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e82a:	4652      	mov	r2, sl
 800e82c:	465b      	mov	r3, fp
 800e82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e832:	f7f1 ff01 	bl	8000638 <__aeabi_dmul>
 800e836:	4b28      	ldr	r3, [pc, #160]	@ (800e8d8 <_strtod_l+0x598>)
 800e838:	460a      	mov	r2, r1
 800e83a:	400b      	ands	r3, r1
 800e83c:	4927      	ldr	r1, [pc, #156]	@ (800e8dc <_strtod_l+0x59c>)
 800e83e:	428b      	cmp	r3, r1
 800e840:	4682      	mov	sl, r0
 800e842:	d898      	bhi.n	800e776 <_strtod_l+0x436>
 800e844:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e848:	428b      	cmp	r3, r1
 800e84a:	bf86      	itte	hi
 800e84c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e8e0 <_strtod_l+0x5a0>
 800e850:	f04f 3aff 	movhi.w	sl, #4294967295
 800e854:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e858:	2300      	movs	r3, #0
 800e85a:	9308      	str	r3, [sp, #32]
 800e85c:	e07a      	b.n	800e954 <_strtod_l+0x614>
 800e85e:	07e2      	lsls	r2, r4, #31
 800e860:	d505      	bpl.n	800e86e <_strtod_l+0x52e>
 800e862:	9b08      	ldr	r3, [sp, #32]
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	f7f1 fee6 	bl	8000638 <__aeabi_dmul>
 800e86c:	2301      	movs	r3, #1
 800e86e:	9a08      	ldr	r2, [sp, #32]
 800e870:	3208      	adds	r2, #8
 800e872:	3601      	adds	r6, #1
 800e874:	1064      	asrs	r4, r4, #1
 800e876:	9208      	str	r2, [sp, #32]
 800e878:	e7cd      	b.n	800e816 <_strtod_l+0x4d6>
 800e87a:	d0ed      	beq.n	800e858 <_strtod_l+0x518>
 800e87c:	4264      	negs	r4, r4
 800e87e:	f014 020f 	ands.w	r2, r4, #15
 800e882:	d00a      	beq.n	800e89a <_strtod_l+0x55a>
 800e884:	4b12      	ldr	r3, [pc, #72]	@ (800e8d0 <_strtod_l+0x590>)
 800e886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e88a:	4650      	mov	r0, sl
 800e88c:	4659      	mov	r1, fp
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fffb 	bl	800088c <__aeabi_ddiv>
 800e896:	4682      	mov	sl, r0
 800e898:	468b      	mov	fp, r1
 800e89a:	1124      	asrs	r4, r4, #4
 800e89c:	d0dc      	beq.n	800e858 <_strtod_l+0x518>
 800e89e:	2c1f      	cmp	r4, #31
 800e8a0:	dd20      	ble.n	800e8e4 <_strtod_l+0x5a4>
 800e8a2:	2400      	movs	r4, #0
 800e8a4:	46a0      	mov	r8, r4
 800e8a6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e8a8:	46a1      	mov	r9, r4
 800e8aa:	9a05      	ldr	r2, [sp, #20]
 800e8ac:	2322      	movs	r3, #34	@ 0x22
 800e8ae:	f04f 0a00 	mov.w	sl, #0
 800e8b2:	f04f 0b00 	mov.w	fp, #0
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	e768      	b.n	800e78c <_strtod_l+0x44c>
 800e8ba:	bf00      	nop
 800e8bc:	08012389 	.word	0x08012389
 800e8c0:	0801259c 	.word	0x0801259c
 800e8c4:	08012381 	.word	0x08012381
 800e8c8:	080123b6 	.word	0x080123b6
 800e8cc:	08012760 	.word	0x08012760
 800e8d0:	080124d0 	.word	0x080124d0
 800e8d4:	080124a8 	.word	0x080124a8
 800e8d8:	7ff00000 	.word	0x7ff00000
 800e8dc:	7ca00000 	.word	0x7ca00000
 800e8e0:	7fefffff 	.word	0x7fefffff
 800e8e4:	f014 0310 	ands.w	r3, r4, #16
 800e8e8:	bf18      	it	ne
 800e8ea:	236a      	movne	r3, #106	@ 0x6a
 800e8ec:	4ea9      	ldr	r6, [pc, #676]	@ (800eb94 <_strtod_l+0x854>)
 800e8ee:	9308      	str	r3, [sp, #32]
 800e8f0:	4650      	mov	r0, sl
 800e8f2:	4659      	mov	r1, fp
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	07e2      	lsls	r2, r4, #31
 800e8f8:	d504      	bpl.n	800e904 <_strtod_l+0x5c4>
 800e8fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8fe:	f7f1 fe9b 	bl	8000638 <__aeabi_dmul>
 800e902:	2301      	movs	r3, #1
 800e904:	1064      	asrs	r4, r4, #1
 800e906:	f106 0608 	add.w	r6, r6, #8
 800e90a:	d1f4      	bne.n	800e8f6 <_strtod_l+0x5b6>
 800e90c:	b10b      	cbz	r3, 800e912 <_strtod_l+0x5d2>
 800e90e:	4682      	mov	sl, r0
 800e910:	468b      	mov	fp, r1
 800e912:	9b08      	ldr	r3, [sp, #32]
 800e914:	b1b3      	cbz	r3, 800e944 <_strtod_l+0x604>
 800e916:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e91a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e91e:	2b00      	cmp	r3, #0
 800e920:	4659      	mov	r1, fp
 800e922:	dd0f      	ble.n	800e944 <_strtod_l+0x604>
 800e924:	2b1f      	cmp	r3, #31
 800e926:	dd55      	ble.n	800e9d4 <_strtod_l+0x694>
 800e928:	2b34      	cmp	r3, #52	@ 0x34
 800e92a:	bfde      	ittt	le
 800e92c:	f04f 33ff 	movle.w	r3, #4294967295
 800e930:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e934:	4093      	lslle	r3, r2
 800e936:	f04f 0a00 	mov.w	sl, #0
 800e93a:	bfcc      	ite	gt
 800e93c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e940:	ea03 0b01 	andle.w	fp, r3, r1
 800e944:	2200      	movs	r2, #0
 800e946:	2300      	movs	r3, #0
 800e948:	4650      	mov	r0, sl
 800e94a:	4659      	mov	r1, fp
 800e94c:	f7f2 f8dc 	bl	8000b08 <__aeabi_dcmpeq>
 800e950:	2800      	cmp	r0, #0
 800e952:	d1a6      	bne.n	800e8a2 <_strtod_l+0x562>
 800e954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e95a:	9805      	ldr	r0, [sp, #20]
 800e95c:	462b      	mov	r3, r5
 800e95e:	463a      	mov	r2, r7
 800e960:	f7ff f8c4 	bl	800daec <__s2b>
 800e964:	900a      	str	r0, [sp, #40]	@ 0x28
 800e966:	2800      	cmp	r0, #0
 800e968:	f43f af05 	beq.w	800e776 <_strtod_l+0x436>
 800e96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e96e:	2a00      	cmp	r2, #0
 800e970:	eba9 0308 	sub.w	r3, r9, r8
 800e974:	bfa8      	it	ge
 800e976:	2300      	movge	r3, #0
 800e978:	9312      	str	r3, [sp, #72]	@ 0x48
 800e97a:	2400      	movs	r4, #0
 800e97c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e980:	9316      	str	r3, [sp, #88]	@ 0x58
 800e982:	46a0      	mov	r8, r4
 800e984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e986:	9805      	ldr	r0, [sp, #20]
 800e988:	6859      	ldr	r1, [r3, #4]
 800e98a:	f7ff f807 	bl	800d99c <_Balloc>
 800e98e:	4681      	mov	r9, r0
 800e990:	2800      	cmp	r0, #0
 800e992:	f43f aef4 	beq.w	800e77e <_strtod_l+0x43e>
 800e996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e998:	691a      	ldr	r2, [r3, #16]
 800e99a:	3202      	adds	r2, #2
 800e99c:	f103 010c 	add.w	r1, r3, #12
 800e9a0:	0092      	lsls	r2, r2, #2
 800e9a2:	300c      	adds	r0, #12
 800e9a4:	f7fe f945 	bl	800cc32 <memcpy>
 800e9a8:	ec4b ab10 	vmov	d0, sl, fp
 800e9ac:	9805      	ldr	r0, [sp, #20]
 800e9ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800e9b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e9b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e9b6:	f7ff fbd5 	bl	800e164 <__d2b>
 800e9ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	f43f aede 	beq.w	800e77e <_strtod_l+0x43e>
 800e9c2:	9805      	ldr	r0, [sp, #20]
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	f7ff f927 	bl	800dc18 <__i2b>
 800e9ca:	4680      	mov	r8, r0
 800e9cc:	b948      	cbnz	r0, 800e9e2 <_strtod_l+0x6a2>
 800e9ce:	f04f 0800 	mov.w	r8, #0
 800e9d2:	e6d4      	b.n	800e77e <_strtod_l+0x43e>
 800e9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9dc:	ea03 0a0a 	and.w	sl, r3, sl
 800e9e0:	e7b0      	b.n	800e944 <_strtod_l+0x604>
 800e9e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e9e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	bfab      	itete	ge
 800e9ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e9ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e9ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e9f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e9f2:	bfac      	ite	ge
 800e9f4:	18ef      	addge	r7, r5, r3
 800e9f6:	1b5e      	sublt	r6, r3, r5
 800e9f8:	9b08      	ldr	r3, [sp, #32]
 800e9fa:	1aed      	subs	r5, r5, r3
 800e9fc:	4415      	add	r5, r2
 800e9fe:	4b66      	ldr	r3, [pc, #408]	@ (800eb98 <_strtod_l+0x858>)
 800ea00:	3d01      	subs	r5, #1
 800ea02:	429d      	cmp	r5, r3
 800ea04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ea08:	da50      	bge.n	800eaac <_strtod_l+0x76c>
 800ea0a:	1b5b      	subs	r3, r3, r5
 800ea0c:	2b1f      	cmp	r3, #31
 800ea0e:	eba2 0203 	sub.w	r2, r2, r3
 800ea12:	f04f 0101 	mov.w	r1, #1
 800ea16:	dc3d      	bgt.n	800ea94 <_strtod_l+0x754>
 800ea18:	fa01 f303 	lsl.w	r3, r1, r3
 800ea1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea1e:	2300      	movs	r3, #0
 800ea20:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea22:	18bd      	adds	r5, r7, r2
 800ea24:	9b08      	ldr	r3, [sp, #32]
 800ea26:	42af      	cmp	r7, r5
 800ea28:	4416      	add	r6, r2
 800ea2a:	441e      	add	r6, r3
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	bfa8      	it	ge
 800ea30:	462b      	movge	r3, r5
 800ea32:	42b3      	cmp	r3, r6
 800ea34:	bfa8      	it	ge
 800ea36:	4633      	movge	r3, r6
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfc2      	ittt	gt
 800ea3c:	1aed      	subgt	r5, r5, r3
 800ea3e:	1af6      	subgt	r6, r6, r3
 800ea40:	1aff      	subgt	r7, r7, r3
 800ea42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	dd16      	ble.n	800ea76 <_strtod_l+0x736>
 800ea48:	4641      	mov	r1, r8
 800ea4a:	9805      	ldr	r0, [sp, #20]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	f7ff f9a3 	bl	800dd98 <__pow5mult>
 800ea52:	4680      	mov	r8, r0
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d0ba      	beq.n	800e9ce <_strtod_l+0x68e>
 800ea58:	4601      	mov	r1, r0
 800ea5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea5c:	9805      	ldr	r0, [sp, #20]
 800ea5e:	f7ff f8f1 	bl	800dc44 <__multiply>
 800ea62:	900e      	str	r0, [sp, #56]	@ 0x38
 800ea64:	2800      	cmp	r0, #0
 800ea66:	f43f ae8a 	beq.w	800e77e <_strtod_l+0x43e>
 800ea6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea6c:	9805      	ldr	r0, [sp, #20]
 800ea6e:	f7fe ffd5 	bl	800da1c <_Bfree>
 800ea72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea74:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea76:	2d00      	cmp	r5, #0
 800ea78:	dc1d      	bgt.n	800eab6 <_strtod_l+0x776>
 800ea7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd23      	ble.n	800eac8 <_strtod_l+0x788>
 800ea80:	4649      	mov	r1, r9
 800ea82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ea84:	9805      	ldr	r0, [sp, #20]
 800ea86:	f7ff f987 	bl	800dd98 <__pow5mult>
 800ea8a:	4681      	mov	r9, r0
 800ea8c:	b9e0      	cbnz	r0, 800eac8 <_strtod_l+0x788>
 800ea8e:	f04f 0900 	mov.w	r9, #0
 800ea92:	e674      	b.n	800e77e <_strtod_l+0x43e>
 800ea94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ea98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ea9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eaa0:	35e2      	adds	r5, #226	@ 0xe2
 800eaa2:	fa01 f305 	lsl.w	r3, r1, r5
 800eaa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eaa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eaaa:	e7ba      	b.n	800ea22 <_strtod_l+0x6e2>
 800eaac:	2300      	movs	r3, #0
 800eaae:	9310      	str	r3, [sp, #64]	@ 0x40
 800eab0:	2301      	movs	r3, #1
 800eab2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eab4:	e7b5      	b.n	800ea22 <_strtod_l+0x6e2>
 800eab6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eab8:	9805      	ldr	r0, [sp, #20]
 800eaba:	462a      	mov	r2, r5
 800eabc:	f7ff f9c6 	bl	800de4c <__lshift>
 800eac0:	901a      	str	r0, [sp, #104]	@ 0x68
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d1d9      	bne.n	800ea7a <_strtod_l+0x73a>
 800eac6:	e65a      	b.n	800e77e <_strtod_l+0x43e>
 800eac8:	2e00      	cmp	r6, #0
 800eaca:	dd07      	ble.n	800eadc <_strtod_l+0x79c>
 800eacc:	4649      	mov	r1, r9
 800eace:	9805      	ldr	r0, [sp, #20]
 800ead0:	4632      	mov	r2, r6
 800ead2:	f7ff f9bb 	bl	800de4c <__lshift>
 800ead6:	4681      	mov	r9, r0
 800ead8:	2800      	cmp	r0, #0
 800eada:	d0d8      	beq.n	800ea8e <_strtod_l+0x74e>
 800eadc:	2f00      	cmp	r7, #0
 800eade:	dd08      	ble.n	800eaf2 <_strtod_l+0x7b2>
 800eae0:	4641      	mov	r1, r8
 800eae2:	9805      	ldr	r0, [sp, #20]
 800eae4:	463a      	mov	r2, r7
 800eae6:	f7ff f9b1 	bl	800de4c <__lshift>
 800eaea:	4680      	mov	r8, r0
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f43f ae46 	beq.w	800e77e <_strtod_l+0x43e>
 800eaf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eaf4:	9805      	ldr	r0, [sp, #20]
 800eaf6:	464a      	mov	r2, r9
 800eaf8:	f7ff fa30 	bl	800df5c <__mdiff>
 800eafc:	4604      	mov	r4, r0
 800eafe:	2800      	cmp	r0, #0
 800eb00:	f43f ae3d 	beq.w	800e77e <_strtod_l+0x43e>
 800eb04:	68c3      	ldr	r3, [r0, #12]
 800eb06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb08:	2300      	movs	r3, #0
 800eb0a:	60c3      	str	r3, [r0, #12]
 800eb0c:	4641      	mov	r1, r8
 800eb0e:	f7ff fa09 	bl	800df24 <__mcmp>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	da46      	bge.n	800eba4 <_strtod_l+0x864>
 800eb16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb18:	ea53 030a 	orrs.w	r3, r3, sl
 800eb1c:	d16c      	bne.n	800ebf8 <_strtod_l+0x8b8>
 800eb1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d168      	bne.n	800ebf8 <_strtod_l+0x8b8>
 800eb26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb2a:	0d1b      	lsrs	r3, r3, #20
 800eb2c:	051b      	lsls	r3, r3, #20
 800eb2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb32:	d961      	bls.n	800ebf8 <_strtod_l+0x8b8>
 800eb34:	6963      	ldr	r3, [r4, #20]
 800eb36:	b913      	cbnz	r3, 800eb3e <_strtod_l+0x7fe>
 800eb38:	6923      	ldr	r3, [r4, #16]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	dd5c      	ble.n	800ebf8 <_strtod_l+0x8b8>
 800eb3e:	4621      	mov	r1, r4
 800eb40:	2201      	movs	r2, #1
 800eb42:	9805      	ldr	r0, [sp, #20]
 800eb44:	f7ff f982 	bl	800de4c <__lshift>
 800eb48:	4641      	mov	r1, r8
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	f7ff f9ea 	bl	800df24 <__mcmp>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	dd51      	ble.n	800ebf8 <_strtod_l+0x8b8>
 800eb54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb58:	9a08      	ldr	r2, [sp, #32]
 800eb5a:	0d1b      	lsrs	r3, r3, #20
 800eb5c:	051b      	lsls	r3, r3, #20
 800eb5e:	2a00      	cmp	r2, #0
 800eb60:	d06b      	beq.n	800ec3a <_strtod_l+0x8fa>
 800eb62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb66:	d868      	bhi.n	800ec3a <_strtod_l+0x8fa>
 800eb68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eb6c:	f67f ae9d 	bls.w	800e8aa <_strtod_l+0x56a>
 800eb70:	4b0a      	ldr	r3, [pc, #40]	@ (800eb9c <_strtod_l+0x85c>)
 800eb72:	4650      	mov	r0, sl
 800eb74:	4659      	mov	r1, fp
 800eb76:	2200      	movs	r2, #0
 800eb78:	f7f1 fd5e 	bl	8000638 <__aeabi_dmul>
 800eb7c:	4b08      	ldr	r3, [pc, #32]	@ (800eba0 <_strtod_l+0x860>)
 800eb7e:	400b      	ands	r3, r1
 800eb80:	4682      	mov	sl, r0
 800eb82:	468b      	mov	fp, r1
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f47f ae05 	bne.w	800e794 <_strtod_l+0x454>
 800eb8a:	9a05      	ldr	r2, [sp, #20]
 800eb8c:	2322      	movs	r3, #34	@ 0x22
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	e600      	b.n	800e794 <_strtod_l+0x454>
 800eb92:	bf00      	nop
 800eb94:	080125c8 	.word	0x080125c8
 800eb98:	fffffc02 	.word	0xfffffc02
 800eb9c:	39500000 	.word	0x39500000
 800eba0:	7ff00000 	.word	0x7ff00000
 800eba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eba8:	d165      	bne.n	800ec76 <_strtod_l+0x936>
 800ebaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ebac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebb0:	b35a      	cbz	r2, 800ec0a <_strtod_l+0x8ca>
 800ebb2:	4a9f      	ldr	r2, [pc, #636]	@ (800ee30 <_strtod_l+0xaf0>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d12b      	bne.n	800ec10 <_strtod_l+0x8d0>
 800ebb8:	9b08      	ldr	r3, [sp, #32]
 800ebba:	4651      	mov	r1, sl
 800ebbc:	b303      	cbz	r3, 800ec00 <_strtod_l+0x8c0>
 800ebbe:	4b9d      	ldr	r3, [pc, #628]	@ (800ee34 <_strtod_l+0xaf4>)
 800ebc0:	465a      	mov	r2, fp
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ebc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebcc:	d81b      	bhi.n	800ec06 <_strtod_l+0x8c6>
 800ebce:	0d1b      	lsrs	r3, r3, #20
 800ebd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ebd4:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd8:	4299      	cmp	r1, r3
 800ebda:	d119      	bne.n	800ec10 <_strtod_l+0x8d0>
 800ebdc:	4b96      	ldr	r3, [pc, #600]	@ (800ee38 <_strtod_l+0xaf8>)
 800ebde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d102      	bne.n	800ebea <_strtod_l+0x8aa>
 800ebe4:	3101      	adds	r1, #1
 800ebe6:	f43f adca 	beq.w	800e77e <_strtod_l+0x43e>
 800ebea:	4b92      	ldr	r3, [pc, #584]	@ (800ee34 <_strtod_l+0xaf4>)
 800ebec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebee:	401a      	ands	r2, r3
 800ebf0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ebf4:	f04f 0a00 	mov.w	sl, #0
 800ebf8:	9b08      	ldr	r3, [sp, #32]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1b8      	bne.n	800eb70 <_strtod_l+0x830>
 800ebfe:	e5c9      	b.n	800e794 <_strtod_l+0x454>
 800ec00:	f04f 33ff 	mov.w	r3, #4294967295
 800ec04:	e7e8      	b.n	800ebd8 <_strtod_l+0x898>
 800ec06:	4613      	mov	r3, r2
 800ec08:	e7e6      	b.n	800ebd8 <_strtod_l+0x898>
 800ec0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ec0e:	d0a1      	beq.n	800eb54 <_strtod_l+0x814>
 800ec10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec12:	b1db      	cbz	r3, 800ec4c <_strtod_l+0x90c>
 800ec14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec16:	4213      	tst	r3, r2
 800ec18:	d0ee      	beq.n	800ebf8 <_strtod_l+0x8b8>
 800ec1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec1c:	9a08      	ldr	r2, [sp, #32]
 800ec1e:	4650      	mov	r0, sl
 800ec20:	4659      	mov	r1, fp
 800ec22:	b1bb      	cbz	r3, 800ec54 <_strtod_l+0x914>
 800ec24:	f7ff fb6c 	bl	800e300 <sulp>
 800ec28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec2c:	ec53 2b10 	vmov	r2, r3, d0
 800ec30:	f7f1 fb4c 	bl	80002cc <__adddf3>
 800ec34:	4682      	mov	sl, r0
 800ec36:	468b      	mov	fp, r1
 800ec38:	e7de      	b.n	800ebf8 <_strtod_l+0x8b8>
 800ec3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ec3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ec42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ec46:	f04f 3aff 	mov.w	sl, #4294967295
 800ec4a:	e7d5      	b.n	800ebf8 <_strtod_l+0x8b8>
 800ec4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec4e:	ea13 0f0a 	tst.w	r3, sl
 800ec52:	e7e1      	b.n	800ec18 <_strtod_l+0x8d8>
 800ec54:	f7ff fb54 	bl	800e300 <sulp>
 800ec58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec5c:	ec53 2b10 	vmov	r2, r3, d0
 800ec60:	f7f1 fb32 	bl	80002c8 <__aeabi_dsub>
 800ec64:	2200      	movs	r2, #0
 800ec66:	2300      	movs	r3, #0
 800ec68:	4682      	mov	sl, r0
 800ec6a:	468b      	mov	fp, r1
 800ec6c:	f7f1 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d0c1      	beq.n	800ebf8 <_strtod_l+0x8b8>
 800ec74:	e619      	b.n	800e8aa <_strtod_l+0x56a>
 800ec76:	4641      	mov	r1, r8
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f7ff facb 	bl	800e214 <__ratio>
 800ec7e:	ec57 6b10 	vmov	r6, r7, d0
 800ec82:	2200      	movs	r2, #0
 800ec84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ec88:	4630      	mov	r0, r6
 800ec8a:	4639      	mov	r1, r7
 800ec8c:	f7f1 ff50 	bl	8000b30 <__aeabi_dcmple>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d06f      	beq.n	800ed74 <_strtod_l+0xa34>
 800ec94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d17a      	bne.n	800ed90 <_strtod_l+0xa50>
 800ec9a:	f1ba 0f00 	cmp.w	sl, #0
 800ec9e:	d158      	bne.n	800ed52 <_strtod_l+0xa12>
 800eca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d15a      	bne.n	800ed60 <_strtod_l+0xa20>
 800ecaa:	4b64      	ldr	r3, [pc, #400]	@ (800ee3c <_strtod_l+0xafc>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	4630      	mov	r0, r6
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	f7f1 ff33 	bl	8000b1c <__aeabi_dcmplt>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d159      	bne.n	800ed6e <_strtod_l+0xa2e>
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	4b60      	ldr	r3, [pc, #384]	@ (800ee40 <_strtod_l+0xb00>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f7f1 fcb9 	bl	8000638 <__aeabi_dmul>
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	460f      	mov	r7, r1
 800ecca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ecce:	9606      	str	r6, [sp, #24]
 800ecd0:	9307      	str	r3, [sp, #28]
 800ecd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecd6:	4d57      	ldr	r5, [pc, #348]	@ (800ee34 <_strtod_l+0xaf4>)
 800ecd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ecdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecde:	401d      	ands	r5, r3
 800ece0:	4b58      	ldr	r3, [pc, #352]	@ (800ee44 <_strtod_l+0xb04>)
 800ece2:	429d      	cmp	r5, r3
 800ece4:	f040 80b2 	bne.w	800ee4c <_strtod_l+0xb0c>
 800ece8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ecee:	ec4b ab10 	vmov	d0, sl, fp
 800ecf2:	f7ff f9c7 	bl	800e084 <__ulp>
 800ecf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecfa:	ec51 0b10 	vmov	r0, r1, d0
 800ecfe:	f7f1 fc9b 	bl	8000638 <__aeabi_dmul>
 800ed02:	4652      	mov	r2, sl
 800ed04:	465b      	mov	r3, fp
 800ed06:	f7f1 fae1 	bl	80002cc <__adddf3>
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4949      	ldr	r1, [pc, #292]	@ (800ee34 <_strtod_l+0xaf4>)
 800ed0e:	4a4e      	ldr	r2, [pc, #312]	@ (800ee48 <_strtod_l+0xb08>)
 800ed10:	4019      	ands	r1, r3
 800ed12:	4291      	cmp	r1, r2
 800ed14:	4682      	mov	sl, r0
 800ed16:	d942      	bls.n	800ed9e <_strtod_l+0xa5e>
 800ed18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed1a:	4b47      	ldr	r3, [pc, #284]	@ (800ee38 <_strtod_l+0xaf8>)
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d103      	bne.n	800ed28 <_strtod_l+0x9e8>
 800ed20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed22:	3301      	adds	r3, #1
 800ed24:	f43f ad2b 	beq.w	800e77e <_strtod_l+0x43e>
 800ed28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ee38 <_strtod_l+0xaf8>
 800ed2c:	f04f 3aff 	mov.w	sl, #4294967295
 800ed30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed32:	9805      	ldr	r0, [sp, #20]
 800ed34:	f7fe fe72 	bl	800da1c <_Bfree>
 800ed38:	9805      	ldr	r0, [sp, #20]
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	f7fe fe6e 	bl	800da1c <_Bfree>
 800ed40:	9805      	ldr	r0, [sp, #20]
 800ed42:	4641      	mov	r1, r8
 800ed44:	f7fe fe6a 	bl	800da1c <_Bfree>
 800ed48:	9805      	ldr	r0, [sp, #20]
 800ed4a:	4621      	mov	r1, r4
 800ed4c:	f7fe fe66 	bl	800da1c <_Bfree>
 800ed50:	e618      	b.n	800e984 <_strtod_l+0x644>
 800ed52:	f1ba 0f01 	cmp.w	sl, #1
 800ed56:	d103      	bne.n	800ed60 <_strtod_l+0xa20>
 800ed58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f43f ada5 	beq.w	800e8aa <_strtod_l+0x56a>
 800ed60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ee10 <_strtod_l+0xad0>
 800ed64:	4f35      	ldr	r7, [pc, #212]	@ (800ee3c <_strtod_l+0xafc>)
 800ed66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed6a:	2600      	movs	r6, #0
 800ed6c:	e7b1      	b.n	800ecd2 <_strtod_l+0x992>
 800ed6e:	4f34      	ldr	r7, [pc, #208]	@ (800ee40 <_strtod_l+0xb00>)
 800ed70:	2600      	movs	r6, #0
 800ed72:	e7aa      	b.n	800ecca <_strtod_l+0x98a>
 800ed74:	4b32      	ldr	r3, [pc, #200]	@ (800ee40 <_strtod_l+0xb00>)
 800ed76:	4630      	mov	r0, r6
 800ed78:	4639      	mov	r1, r7
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f7f1 fc5c 	bl	8000638 <__aeabi_dmul>
 800ed80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed82:	4606      	mov	r6, r0
 800ed84:	460f      	mov	r7, r1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d09f      	beq.n	800ecca <_strtod_l+0x98a>
 800ed8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ed8e:	e7a0      	b.n	800ecd2 <_strtod_l+0x992>
 800ed90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ee18 <_strtod_l+0xad8>
 800ed94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed98:	ec57 6b17 	vmov	r6, r7, d7
 800ed9c:	e799      	b.n	800ecd2 <_strtod_l+0x992>
 800ed9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eda2:	9b08      	ldr	r3, [sp, #32]
 800eda4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1c1      	bne.n	800ed30 <_strtod_l+0x9f0>
 800edac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edb0:	0d1b      	lsrs	r3, r3, #20
 800edb2:	051b      	lsls	r3, r3, #20
 800edb4:	429d      	cmp	r5, r3
 800edb6:	d1bb      	bne.n	800ed30 <_strtod_l+0x9f0>
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f2 f8fa 	bl	8000fb4 <__aeabi_d2lz>
 800edc0:	f7f1 fc0c 	bl	80005dc <__aeabi_l2d>
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	4630      	mov	r0, r6
 800edca:	4639      	mov	r1, r7
 800edcc:	f7f1 fa7c 	bl	80002c8 <__aeabi_dsub>
 800edd0:	460b      	mov	r3, r1
 800edd2:	4602      	mov	r2, r0
 800edd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800edd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edde:	ea46 060a 	orr.w	r6, r6, sl
 800ede2:	431e      	orrs	r6, r3
 800ede4:	d06f      	beq.n	800eec6 <_strtod_l+0xb86>
 800ede6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ee20 <_strtod_l+0xae0>)
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	f7f1 fe96 	bl	8000b1c <__aeabi_dcmplt>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	f47f accf 	bne.w	800e794 <_strtod_l+0x454>
 800edf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ee28 <_strtod_l+0xae8>)
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee00:	f7f1 feaa 	bl	8000b58 <__aeabi_dcmpgt>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d093      	beq.n	800ed30 <_strtod_l+0x9f0>
 800ee08:	e4c4      	b.n	800e794 <_strtod_l+0x454>
 800ee0a:	bf00      	nop
 800ee0c:	f3af 8000 	nop.w
 800ee10:	00000000 	.word	0x00000000
 800ee14:	bff00000 	.word	0xbff00000
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	3ff00000 	.word	0x3ff00000
 800ee20:	94a03595 	.word	0x94a03595
 800ee24:	3fdfffff 	.word	0x3fdfffff
 800ee28:	35afe535 	.word	0x35afe535
 800ee2c:	3fe00000 	.word	0x3fe00000
 800ee30:	000fffff 	.word	0x000fffff
 800ee34:	7ff00000 	.word	0x7ff00000
 800ee38:	7fefffff 	.word	0x7fefffff
 800ee3c:	3ff00000 	.word	0x3ff00000
 800ee40:	3fe00000 	.word	0x3fe00000
 800ee44:	7fe00000 	.word	0x7fe00000
 800ee48:	7c9fffff 	.word	0x7c9fffff
 800ee4c:	9b08      	ldr	r3, [sp, #32]
 800ee4e:	b323      	cbz	r3, 800ee9a <_strtod_l+0xb5a>
 800ee50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ee54:	d821      	bhi.n	800ee9a <_strtod_l+0xb5a>
 800ee56:	a328      	add	r3, pc, #160	@ (adr r3, 800eef8 <_strtod_l+0xbb8>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	4639      	mov	r1, r7
 800ee60:	f7f1 fe66 	bl	8000b30 <__aeabi_dcmple>
 800ee64:	b1a0      	cbz	r0, 800ee90 <_strtod_l+0xb50>
 800ee66:	4639      	mov	r1, r7
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f7f1 febd 	bl	8000be8 <__aeabi_d2uiz>
 800ee6e:	2801      	cmp	r0, #1
 800ee70:	bf38      	it	cc
 800ee72:	2001      	movcc	r0, #1
 800ee74:	f7f1 fb66 	bl	8000544 <__aeabi_ui2d>
 800ee78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460f      	mov	r7, r1
 800ee7e:	b9fb      	cbnz	r3, 800eec0 <_strtod_l+0xb80>
 800ee80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ee84:	9014      	str	r0, [sp, #80]	@ 0x50
 800ee86:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ee8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ee90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ee96:	1b5b      	subs	r3, r3, r5
 800ee98:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ee9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800eea2:	f7ff f8ef 	bl	800e084 <__ulp>
 800eea6:	4650      	mov	r0, sl
 800eea8:	ec53 2b10 	vmov	r2, r3, d0
 800eeac:	4659      	mov	r1, fp
 800eeae:	f7f1 fbc3 	bl	8000638 <__aeabi_dmul>
 800eeb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eeb6:	f7f1 fa09 	bl	80002cc <__adddf3>
 800eeba:	4682      	mov	sl, r0
 800eebc:	468b      	mov	fp, r1
 800eebe:	e770      	b.n	800eda2 <_strtod_l+0xa62>
 800eec0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800eec4:	e7e0      	b.n	800ee88 <_strtod_l+0xb48>
 800eec6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ef00 <_strtod_l+0xbc0>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	f7f1 fe26 	bl	8000b1c <__aeabi_dcmplt>
 800eed0:	e798      	b.n	800ee04 <_strtod_l+0xac4>
 800eed2:	2300      	movs	r3, #0
 800eed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eed6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800eed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eeda:	6013      	str	r3, [r2, #0]
 800eedc:	f7ff ba6d 	b.w	800e3ba <_strtod_l+0x7a>
 800eee0:	2a65      	cmp	r2, #101	@ 0x65
 800eee2:	f43f ab66 	beq.w	800e5b2 <_strtod_l+0x272>
 800eee6:	2a45      	cmp	r2, #69	@ 0x45
 800eee8:	f43f ab63 	beq.w	800e5b2 <_strtod_l+0x272>
 800eeec:	2301      	movs	r3, #1
 800eeee:	f7ff bb9e 	b.w	800e62e <_strtod_l+0x2ee>
 800eef2:	bf00      	nop
 800eef4:	f3af 8000 	nop.w
 800eef8:	ffc00000 	.word	0xffc00000
 800eefc:	41dfffff 	.word	0x41dfffff
 800ef00:	94a03595 	.word	0x94a03595
 800ef04:	3fcfffff 	.word	0x3fcfffff

0800ef08 <_strtod_r>:
 800ef08:	4b01      	ldr	r3, [pc, #4]	@ (800ef10 <_strtod_r+0x8>)
 800ef0a:	f7ff ba19 	b.w	800e340 <_strtod_l>
 800ef0e:	bf00      	nop
 800ef10:	20000094 	.word	0x20000094

0800ef14 <_strtol_l.constprop.0>:
 800ef14:	2b24      	cmp	r3, #36	@ 0x24
 800ef16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1a:	4686      	mov	lr, r0
 800ef1c:	4690      	mov	r8, r2
 800ef1e:	d801      	bhi.n	800ef24 <_strtol_l.constprop.0+0x10>
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d106      	bne.n	800ef32 <_strtol_l.constprop.0+0x1e>
 800ef24:	f7fd fe58 	bl	800cbd8 <__errno>
 800ef28:	2316      	movs	r3, #22
 800ef2a:	6003      	str	r3, [r0, #0]
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef32:	4834      	ldr	r0, [pc, #208]	@ (800f004 <_strtol_l.constprop.0+0xf0>)
 800ef34:	460d      	mov	r5, r1
 800ef36:	462a      	mov	r2, r5
 800ef38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef3c:	5d06      	ldrb	r6, [r0, r4]
 800ef3e:	f016 0608 	ands.w	r6, r6, #8
 800ef42:	d1f8      	bne.n	800ef36 <_strtol_l.constprop.0+0x22>
 800ef44:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef46:	d12d      	bne.n	800efa4 <_strtol_l.constprop.0+0x90>
 800ef48:	782c      	ldrb	r4, [r5, #0]
 800ef4a:	2601      	movs	r6, #1
 800ef4c:	1c95      	adds	r5, r2, #2
 800ef4e:	f033 0210 	bics.w	r2, r3, #16
 800ef52:	d109      	bne.n	800ef68 <_strtol_l.constprop.0+0x54>
 800ef54:	2c30      	cmp	r4, #48	@ 0x30
 800ef56:	d12a      	bne.n	800efae <_strtol_l.constprop.0+0x9a>
 800ef58:	782a      	ldrb	r2, [r5, #0]
 800ef5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef5e:	2a58      	cmp	r2, #88	@ 0x58
 800ef60:	d125      	bne.n	800efae <_strtol_l.constprop.0+0x9a>
 800ef62:	786c      	ldrb	r4, [r5, #1]
 800ef64:	2310      	movs	r3, #16
 800ef66:	3502      	adds	r5, #2
 800ef68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ef6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef70:	2200      	movs	r2, #0
 800ef72:	fbbc f9f3 	udiv	r9, ip, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef80:	2f09      	cmp	r7, #9
 800ef82:	d81b      	bhi.n	800efbc <_strtol_l.constprop.0+0xa8>
 800ef84:	463c      	mov	r4, r7
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	dd27      	ble.n	800efda <_strtol_l.constprop.0+0xc6>
 800ef8a:	1c57      	adds	r7, r2, #1
 800ef8c:	d007      	beq.n	800ef9e <_strtol_l.constprop.0+0x8a>
 800ef8e:	4581      	cmp	r9, r0
 800ef90:	d320      	bcc.n	800efd4 <_strtol_l.constprop.0+0xc0>
 800ef92:	d101      	bne.n	800ef98 <_strtol_l.constprop.0+0x84>
 800ef94:	45a2      	cmp	sl, r4
 800ef96:	db1d      	blt.n	800efd4 <_strtol_l.constprop.0+0xc0>
 800ef98:	fb00 4003 	mla	r0, r0, r3, r4
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efa2:	e7eb      	b.n	800ef7c <_strtol_l.constprop.0+0x68>
 800efa4:	2c2b      	cmp	r4, #43	@ 0x2b
 800efa6:	bf04      	itt	eq
 800efa8:	782c      	ldrbeq	r4, [r5, #0]
 800efaa:	1c95      	addeq	r5, r2, #2
 800efac:	e7cf      	b.n	800ef4e <_strtol_l.constprop.0+0x3a>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1da      	bne.n	800ef68 <_strtol_l.constprop.0+0x54>
 800efb2:	2c30      	cmp	r4, #48	@ 0x30
 800efb4:	bf0c      	ite	eq
 800efb6:	2308      	moveq	r3, #8
 800efb8:	230a      	movne	r3, #10
 800efba:	e7d5      	b.n	800ef68 <_strtol_l.constprop.0+0x54>
 800efbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800efc0:	2f19      	cmp	r7, #25
 800efc2:	d801      	bhi.n	800efc8 <_strtol_l.constprop.0+0xb4>
 800efc4:	3c37      	subs	r4, #55	@ 0x37
 800efc6:	e7de      	b.n	800ef86 <_strtol_l.constprop.0+0x72>
 800efc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800efcc:	2f19      	cmp	r7, #25
 800efce:	d804      	bhi.n	800efda <_strtol_l.constprop.0+0xc6>
 800efd0:	3c57      	subs	r4, #87	@ 0x57
 800efd2:	e7d8      	b.n	800ef86 <_strtol_l.constprop.0+0x72>
 800efd4:	f04f 32ff 	mov.w	r2, #4294967295
 800efd8:	e7e1      	b.n	800ef9e <_strtol_l.constprop.0+0x8a>
 800efda:	1c53      	adds	r3, r2, #1
 800efdc:	d108      	bne.n	800eff0 <_strtol_l.constprop.0+0xdc>
 800efde:	2322      	movs	r3, #34	@ 0x22
 800efe0:	f8ce 3000 	str.w	r3, [lr]
 800efe4:	4660      	mov	r0, ip
 800efe6:	f1b8 0f00 	cmp.w	r8, #0
 800efea:	d0a0      	beq.n	800ef2e <_strtol_l.constprop.0+0x1a>
 800efec:	1e69      	subs	r1, r5, #1
 800efee:	e006      	b.n	800effe <_strtol_l.constprop.0+0xea>
 800eff0:	b106      	cbz	r6, 800eff4 <_strtol_l.constprop.0+0xe0>
 800eff2:	4240      	negs	r0, r0
 800eff4:	f1b8 0f00 	cmp.w	r8, #0
 800eff8:	d099      	beq.n	800ef2e <_strtol_l.constprop.0+0x1a>
 800effa:	2a00      	cmp	r2, #0
 800effc:	d1f6      	bne.n	800efec <_strtol_l.constprop.0+0xd8>
 800effe:	f8c8 1000 	str.w	r1, [r8]
 800f002:	e794      	b.n	800ef2e <_strtol_l.constprop.0+0x1a>
 800f004:	080125f1 	.word	0x080125f1

0800f008 <_strtol_r>:
 800f008:	f7ff bf84 	b.w	800ef14 <_strtol_l.constprop.0>

0800f00c <__ssputs_r>:
 800f00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	688e      	ldr	r6, [r1, #8]
 800f012:	461f      	mov	r7, r3
 800f014:	42be      	cmp	r6, r7
 800f016:	680b      	ldr	r3, [r1, #0]
 800f018:	4682      	mov	sl, r0
 800f01a:	460c      	mov	r4, r1
 800f01c:	4690      	mov	r8, r2
 800f01e:	d82d      	bhi.n	800f07c <__ssputs_r+0x70>
 800f020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f024:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f028:	d026      	beq.n	800f078 <__ssputs_r+0x6c>
 800f02a:	6965      	ldr	r5, [r4, #20]
 800f02c:	6909      	ldr	r1, [r1, #16]
 800f02e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f032:	eba3 0901 	sub.w	r9, r3, r1
 800f036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f03a:	1c7b      	adds	r3, r7, #1
 800f03c:	444b      	add	r3, r9
 800f03e:	106d      	asrs	r5, r5, #1
 800f040:	429d      	cmp	r5, r3
 800f042:	bf38      	it	cc
 800f044:	461d      	movcc	r5, r3
 800f046:	0553      	lsls	r3, r2, #21
 800f048:	d527      	bpl.n	800f09a <__ssputs_r+0x8e>
 800f04a:	4629      	mov	r1, r5
 800f04c:	f7fc fcbe 	bl	800b9cc <_malloc_r>
 800f050:	4606      	mov	r6, r0
 800f052:	b360      	cbz	r0, 800f0ae <__ssputs_r+0xa2>
 800f054:	6921      	ldr	r1, [r4, #16]
 800f056:	464a      	mov	r2, r9
 800f058:	f7fd fdeb 	bl	800cc32 <memcpy>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f066:	81a3      	strh	r3, [r4, #12]
 800f068:	6126      	str	r6, [r4, #16]
 800f06a:	6165      	str	r5, [r4, #20]
 800f06c:	444e      	add	r6, r9
 800f06e:	eba5 0509 	sub.w	r5, r5, r9
 800f072:	6026      	str	r6, [r4, #0]
 800f074:	60a5      	str	r5, [r4, #8]
 800f076:	463e      	mov	r6, r7
 800f078:	42be      	cmp	r6, r7
 800f07a:	d900      	bls.n	800f07e <__ssputs_r+0x72>
 800f07c:	463e      	mov	r6, r7
 800f07e:	6820      	ldr	r0, [r4, #0]
 800f080:	4632      	mov	r2, r6
 800f082:	4641      	mov	r1, r8
 800f084:	f000 fd53 	bl	800fb2e <memmove>
 800f088:	68a3      	ldr	r3, [r4, #8]
 800f08a:	1b9b      	subs	r3, r3, r6
 800f08c:	60a3      	str	r3, [r4, #8]
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	4433      	add	r3, r6
 800f092:	6023      	str	r3, [r4, #0]
 800f094:	2000      	movs	r0, #0
 800f096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09a:	462a      	mov	r2, r5
 800f09c:	f001 f8e5 	bl	801026a <_realloc_r>
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d1e0      	bne.n	800f068 <__ssputs_r+0x5c>
 800f0a6:	6921      	ldr	r1, [r4, #16]
 800f0a8:	4650      	mov	r0, sl
 800f0aa:	f7fe fc25 	bl	800d8f8 <_free_r>
 800f0ae:	230c      	movs	r3, #12
 800f0b0:	f8ca 3000 	str.w	r3, [sl]
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0ba:	81a3      	strh	r3, [r4, #12]
 800f0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c0:	e7e9      	b.n	800f096 <__ssputs_r+0x8a>
	...

0800f0c4 <_svfiprintf_r>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	4698      	mov	r8, r3
 800f0ca:	898b      	ldrh	r3, [r1, #12]
 800f0cc:	061b      	lsls	r3, r3, #24
 800f0ce:	b09d      	sub	sp, #116	@ 0x74
 800f0d0:	4607      	mov	r7, r0
 800f0d2:	460d      	mov	r5, r1
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	d510      	bpl.n	800f0fa <_svfiprintf_r+0x36>
 800f0d8:	690b      	ldr	r3, [r1, #16]
 800f0da:	b973      	cbnz	r3, 800f0fa <_svfiprintf_r+0x36>
 800f0dc:	2140      	movs	r1, #64	@ 0x40
 800f0de:	f7fc fc75 	bl	800b9cc <_malloc_r>
 800f0e2:	6028      	str	r0, [r5, #0]
 800f0e4:	6128      	str	r0, [r5, #16]
 800f0e6:	b930      	cbnz	r0, 800f0f6 <_svfiprintf_r+0x32>
 800f0e8:	230c      	movs	r3, #12
 800f0ea:	603b      	str	r3, [r7, #0]
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f0:	b01d      	add	sp, #116	@ 0x74
 800f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f6:	2340      	movs	r3, #64	@ 0x40
 800f0f8:	616b      	str	r3, [r5, #20]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0fe:	2320      	movs	r3, #32
 800f100:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f104:	f8cd 800c 	str.w	r8, [sp, #12]
 800f108:	2330      	movs	r3, #48	@ 0x30
 800f10a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f2a8 <_svfiprintf_r+0x1e4>
 800f10e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f112:	f04f 0901 	mov.w	r9, #1
 800f116:	4623      	mov	r3, r4
 800f118:	469a      	mov	sl, r3
 800f11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f11e:	b10a      	cbz	r2, 800f124 <_svfiprintf_r+0x60>
 800f120:	2a25      	cmp	r2, #37	@ 0x25
 800f122:	d1f9      	bne.n	800f118 <_svfiprintf_r+0x54>
 800f124:	ebba 0b04 	subs.w	fp, sl, r4
 800f128:	d00b      	beq.n	800f142 <_svfiprintf_r+0x7e>
 800f12a:	465b      	mov	r3, fp
 800f12c:	4622      	mov	r2, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	4638      	mov	r0, r7
 800f132:	f7ff ff6b 	bl	800f00c <__ssputs_r>
 800f136:	3001      	adds	r0, #1
 800f138:	f000 80a7 	beq.w	800f28a <_svfiprintf_r+0x1c6>
 800f13c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f13e:	445a      	add	r2, fp
 800f140:	9209      	str	r2, [sp, #36]	@ 0x24
 800f142:	f89a 3000 	ldrb.w	r3, [sl]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 809f 	beq.w	800f28a <_svfiprintf_r+0x1c6>
 800f14c:	2300      	movs	r3, #0
 800f14e:	f04f 32ff 	mov.w	r2, #4294967295
 800f152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f156:	f10a 0a01 	add.w	sl, sl, #1
 800f15a:	9304      	str	r3, [sp, #16]
 800f15c:	9307      	str	r3, [sp, #28]
 800f15e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f162:	931a      	str	r3, [sp, #104]	@ 0x68
 800f164:	4654      	mov	r4, sl
 800f166:	2205      	movs	r2, #5
 800f168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f16c:	484e      	ldr	r0, [pc, #312]	@ (800f2a8 <_svfiprintf_r+0x1e4>)
 800f16e:	f7f1 f84f 	bl	8000210 <memchr>
 800f172:	9a04      	ldr	r2, [sp, #16]
 800f174:	b9d8      	cbnz	r0, 800f1ae <_svfiprintf_r+0xea>
 800f176:	06d0      	lsls	r0, r2, #27
 800f178:	bf44      	itt	mi
 800f17a:	2320      	movmi	r3, #32
 800f17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f180:	0711      	lsls	r1, r2, #28
 800f182:	bf44      	itt	mi
 800f184:	232b      	movmi	r3, #43	@ 0x2b
 800f186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f18a:	f89a 3000 	ldrb.w	r3, [sl]
 800f18e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f190:	d015      	beq.n	800f1be <_svfiprintf_r+0xfa>
 800f192:	9a07      	ldr	r2, [sp, #28]
 800f194:	4654      	mov	r4, sl
 800f196:	2000      	movs	r0, #0
 800f198:	f04f 0c0a 	mov.w	ip, #10
 800f19c:	4621      	mov	r1, r4
 800f19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a2:	3b30      	subs	r3, #48	@ 0x30
 800f1a4:	2b09      	cmp	r3, #9
 800f1a6:	d94b      	bls.n	800f240 <_svfiprintf_r+0x17c>
 800f1a8:	b1b0      	cbz	r0, 800f1d8 <_svfiprintf_r+0x114>
 800f1aa:	9207      	str	r2, [sp, #28]
 800f1ac:	e014      	b.n	800f1d8 <_svfiprintf_r+0x114>
 800f1ae:	eba0 0308 	sub.w	r3, r0, r8
 800f1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	46a2      	mov	sl, r4
 800f1bc:	e7d2      	b.n	800f164 <_svfiprintf_r+0xa0>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	1d19      	adds	r1, r3, #4
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	9103      	str	r1, [sp, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bfbb      	ittet	lt
 800f1ca:	425b      	neglt	r3, r3
 800f1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d0:	9307      	strge	r3, [sp, #28]
 800f1d2:	9307      	strlt	r3, [sp, #28]
 800f1d4:	bfb8      	it	lt
 800f1d6:	9204      	strlt	r2, [sp, #16]
 800f1d8:	7823      	ldrb	r3, [r4, #0]
 800f1da:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1dc:	d10a      	bne.n	800f1f4 <_svfiprintf_r+0x130>
 800f1de:	7863      	ldrb	r3, [r4, #1]
 800f1e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1e2:	d132      	bne.n	800f24a <_svfiprintf_r+0x186>
 800f1e4:	9b03      	ldr	r3, [sp, #12]
 800f1e6:	1d1a      	adds	r2, r3, #4
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	9203      	str	r2, [sp, #12]
 800f1ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1f0:	3402      	adds	r4, #2
 800f1f2:	9305      	str	r3, [sp, #20]
 800f1f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f2b8 <_svfiprintf_r+0x1f4>
 800f1f8:	7821      	ldrb	r1, [r4, #0]
 800f1fa:	2203      	movs	r2, #3
 800f1fc:	4650      	mov	r0, sl
 800f1fe:	f7f1 f807 	bl	8000210 <memchr>
 800f202:	b138      	cbz	r0, 800f214 <_svfiprintf_r+0x150>
 800f204:	9b04      	ldr	r3, [sp, #16]
 800f206:	eba0 000a 	sub.w	r0, r0, sl
 800f20a:	2240      	movs	r2, #64	@ 0x40
 800f20c:	4082      	lsls	r2, r0
 800f20e:	4313      	orrs	r3, r2
 800f210:	3401      	adds	r4, #1
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f218:	4824      	ldr	r0, [pc, #144]	@ (800f2ac <_svfiprintf_r+0x1e8>)
 800f21a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f21e:	2206      	movs	r2, #6
 800f220:	f7f0 fff6 	bl	8000210 <memchr>
 800f224:	2800      	cmp	r0, #0
 800f226:	d036      	beq.n	800f296 <_svfiprintf_r+0x1d2>
 800f228:	4b21      	ldr	r3, [pc, #132]	@ (800f2b0 <_svfiprintf_r+0x1ec>)
 800f22a:	bb1b      	cbnz	r3, 800f274 <_svfiprintf_r+0x1b0>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	3307      	adds	r3, #7
 800f230:	f023 0307 	bic.w	r3, r3, #7
 800f234:	3308      	adds	r3, #8
 800f236:	9303      	str	r3, [sp, #12]
 800f238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f23a:	4433      	add	r3, r6
 800f23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f23e:	e76a      	b.n	800f116 <_svfiprintf_r+0x52>
 800f240:	fb0c 3202 	mla	r2, ip, r2, r3
 800f244:	460c      	mov	r4, r1
 800f246:	2001      	movs	r0, #1
 800f248:	e7a8      	b.n	800f19c <_svfiprintf_r+0xd8>
 800f24a:	2300      	movs	r3, #0
 800f24c:	3401      	adds	r4, #1
 800f24e:	9305      	str	r3, [sp, #20]
 800f250:	4619      	mov	r1, r3
 800f252:	f04f 0c0a 	mov.w	ip, #10
 800f256:	4620      	mov	r0, r4
 800f258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f25c:	3a30      	subs	r2, #48	@ 0x30
 800f25e:	2a09      	cmp	r2, #9
 800f260:	d903      	bls.n	800f26a <_svfiprintf_r+0x1a6>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0c6      	beq.n	800f1f4 <_svfiprintf_r+0x130>
 800f266:	9105      	str	r1, [sp, #20]
 800f268:	e7c4      	b.n	800f1f4 <_svfiprintf_r+0x130>
 800f26a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f26e:	4604      	mov	r4, r0
 800f270:	2301      	movs	r3, #1
 800f272:	e7f0      	b.n	800f256 <_svfiprintf_r+0x192>
 800f274:	ab03      	add	r3, sp, #12
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	462a      	mov	r2, r5
 800f27a:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b4 <_svfiprintf_r+0x1f0>)
 800f27c:	a904      	add	r1, sp, #16
 800f27e:	4638      	mov	r0, r7
 800f280:	f7fc fcd0 	bl	800bc24 <_printf_float>
 800f284:	1c42      	adds	r2, r0, #1
 800f286:	4606      	mov	r6, r0
 800f288:	d1d6      	bne.n	800f238 <_svfiprintf_r+0x174>
 800f28a:	89ab      	ldrh	r3, [r5, #12]
 800f28c:	065b      	lsls	r3, r3, #25
 800f28e:	f53f af2d 	bmi.w	800f0ec <_svfiprintf_r+0x28>
 800f292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f294:	e72c      	b.n	800f0f0 <_svfiprintf_r+0x2c>
 800f296:	ab03      	add	r3, sp, #12
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	462a      	mov	r2, r5
 800f29c:	4b05      	ldr	r3, [pc, #20]	@ (800f2b4 <_svfiprintf_r+0x1f0>)
 800f29e:	a904      	add	r1, sp, #16
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f7fc ff57 	bl	800c154 <_printf_i>
 800f2a6:	e7ed      	b.n	800f284 <_svfiprintf_r+0x1c0>
 800f2a8:	080126f1 	.word	0x080126f1
 800f2ac:	080126fb 	.word	0x080126fb
 800f2b0:	0800bc25 	.word	0x0800bc25
 800f2b4:	0800f00d 	.word	0x0800f00d
 800f2b8:	080126f7 	.word	0x080126f7

0800f2bc <_sungetc_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	1c4b      	adds	r3, r1, #1
 800f2c0:	4614      	mov	r4, r2
 800f2c2:	d103      	bne.n	800f2cc <_sungetc_r+0x10>
 800f2c4:	f04f 35ff 	mov.w	r5, #4294967295
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	bd38      	pop	{r3, r4, r5, pc}
 800f2cc:	8993      	ldrh	r3, [r2, #12]
 800f2ce:	f023 0320 	bic.w	r3, r3, #32
 800f2d2:	8193      	strh	r3, [r2, #12]
 800f2d4:	6853      	ldr	r3, [r2, #4]
 800f2d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f2d8:	b2cd      	uxtb	r5, r1
 800f2da:	b18a      	cbz	r2, 800f300 <_sungetc_r+0x44>
 800f2dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	dd08      	ble.n	800f2f4 <_sungetc_r+0x38>
 800f2e2:	6823      	ldr	r3, [r4, #0]
 800f2e4:	1e5a      	subs	r2, r3, #1
 800f2e6:	6022      	str	r2, [r4, #0]
 800f2e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f2ec:	6863      	ldr	r3, [r4, #4]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	6063      	str	r3, [r4, #4]
 800f2f2:	e7e9      	b.n	800f2c8 <_sungetc_r+0xc>
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	f000 fbe0 	bl	800faba <__submore>
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d0f1      	beq.n	800f2e2 <_sungetc_r+0x26>
 800f2fe:	e7e1      	b.n	800f2c4 <_sungetc_r+0x8>
 800f300:	6921      	ldr	r1, [r4, #16]
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	b141      	cbz	r1, 800f318 <_sungetc_r+0x5c>
 800f306:	4291      	cmp	r1, r2
 800f308:	d206      	bcs.n	800f318 <_sungetc_r+0x5c>
 800f30a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f30e:	42a9      	cmp	r1, r5
 800f310:	d102      	bne.n	800f318 <_sungetc_r+0x5c>
 800f312:	3a01      	subs	r2, #1
 800f314:	6022      	str	r2, [r4, #0]
 800f316:	e7ea      	b.n	800f2ee <_sungetc_r+0x32>
 800f318:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800f31c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f320:	6363      	str	r3, [r4, #52]	@ 0x34
 800f322:	2303      	movs	r3, #3
 800f324:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f326:	4623      	mov	r3, r4
 800f328:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	2301      	movs	r3, #1
 800f330:	e7de      	b.n	800f2f0 <_sungetc_r+0x34>

0800f332 <__ssrefill_r>:
 800f332:	b510      	push	{r4, lr}
 800f334:	460c      	mov	r4, r1
 800f336:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f338:	b169      	cbz	r1, 800f356 <__ssrefill_r+0x24>
 800f33a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f33e:	4299      	cmp	r1, r3
 800f340:	d001      	beq.n	800f346 <__ssrefill_r+0x14>
 800f342:	f7fe fad9 	bl	800d8f8 <_free_r>
 800f346:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f348:	6063      	str	r3, [r4, #4]
 800f34a:	2000      	movs	r0, #0
 800f34c:	6360      	str	r0, [r4, #52]	@ 0x34
 800f34e:	b113      	cbz	r3, 800f356 <__ssrefill_r+0x24>
 800f350:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f352:	6023      	str	r3, [r4, #0]
 800f354:	bd10      	pop	{r4, pc}
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	2300      	movs	r3, #0
 800f35c:	6063      	str	r3, [r4, #4]
 800f35e:	89a3      	ldrh	r3, [r4, #12]
 800f360:	f043 0320 	orr.w	r3, r3, #32
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	f04f 30ff 	mov.w	r0, #4294967295
 800f36a:	e7f3      	b.n	800f354 <__ssrefill_r+0x22>

0800f36c <__ssvfiscanf_r>:
 800f36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f370:	460c      	mov	r4, r1
 800f372:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f376:	2100      	movs	r1, #0
 800f378:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f37c:	49a5      	ldr	r1, [pc, #660]	@ (800f614 <__ssvfiscanf_r+0x2a8>)
 800f37e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f380:	f10d 0804 	add.w	r8, sp, #4
 800f384:	49a4      	ldr	r1, [pc, #656]	@ (800f618 <__ssvfiscanf_r+0x2ac>)
 800f386:	4fa5      	ldr	r7, [pc, #660]	@ (800f61c <__ssvfiscanf_r+0x2b0>)
 800f388:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f38c:	4606      	mov	r6, r0
 800f38e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	7813      	ldrb	r3, [r2, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 8158 	beq.w	800f64a <__ssvfiscanf_r+0x2de>
 800f39a:	5cf9      	ldrb	r1, [r7, r3]
 800f39c:	f011 0108 	ands.w	r1, r1, #8
 800f3a0:	f102 0501 	add.w	r5, r2, #1
 800f3a4:	d019      	beq.n	800f3da <__ssvfiscanf_r+0x6e>
 800f3a6:	6863      	ldr	r3, [r4, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	dd0f      	ble.n	800f3cc <__ssvfiscanf_r+0x60>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	781a      	ldrb	r2, [r3, #0]
 800f3b0:	5cba      	ldrb	r2, [r7, r2]
 800f3b2:	0712      	lsls	r2, r2, #28
 800f3b4:	d401      	bmi.n	800f3ba <__ssvfiscanf_r+0x4e>
 800f3b6:	462a      	mov	r2, r5
 800f3b8:	e7eb      	b.n	800f392 <__ssvfiscanf_r+0x26>
 800f3ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f3bc:	3201      	adds	r2, #1
 800f3be:	9245      	str	r2, [sp, #276]	@ 0x114
 800f3c0:	6862      	ldr	r2, [r4, #4]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	3a01      	subs	r2, #1
 800f3c6:	6062      	str	r2, [r4, #4]
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	e7ec      	b.n	800f3a6 <__ssvfiscanf_r+0x3a>
 800f3cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	4798      	blx	r3
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d0e9      	beq.n	800f3ac <__ssvfiscanf_r+0x40>
 800f3d8:	e7ed      	b.n	800f3b6 <__ssvfiscanf_r+0x4a>
 800f3da:	2b25      	cmp	r3, #37	@ 0x25
 800f3dc:	d012      	beq.n	800f404 <__ssvfiscanf_r+0x98>
 800f3de:	4699      	mov	r9, r3
 800f3e0:	6863      	ldr	r3, [r4, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f340 8093 	ble.w	800f50e <__ssvfiscanf_r+0x1a2>
 800f3e8:	6822      	ldr	r2, [r4, #0]
 800f3ea:	7813      	ldrb	r3, [r2, #0]
 800f3ec:	454b      	cmp	r3, r9
 800f3ee:	f040 812c 	bne.w	800f64a <__ssvfiscanf_r+0x2de>
 800f3f2:	6863      	ldr	r3, [r4, #4]
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	6063      	str	r3, [r4, #4]
 800f3f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	6022      	str	r2, [r4, #0]
 800f400:	9345      	str	r3, [sp, #276]	@ 0x114
 800f402:	e7d8      	b.n	800f3b6 <__ssvfiscanf_r+0x4a>
 800f404:	9141      	str	r1, [sp, #260]	@ 0x104
 800f406:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f408:	7853      	ldrb	r3, [r2, #1]
 800f40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f40c:	bf02      	ittt	eq
 800f40e:	2310      	moveq	r3, #16
 800f410:	1c95      	addeq	r5, r2, #2
 800f412:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f414:	220a      	movs	r2, #10
 800f416:	46a9      	mov	r9, r5
 800f418:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f41c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f420:	2b09      	cmp	r3, #9
 800f422:	d91e      	bls.n	800f462 <__ssvfiscanf_r+0xf6>
 800f424:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f620 <__ssvfiscanf_r+0x2b4>
 800f428:	2203      	movs	r2, #3
 800f42a:	4650      	mov	r0, sl
 800f42c:	f7f0 fef0 	bl	8000210 <memchr>
 800f430:	b138      	cbz	r0, 800f442 <__ssvfiscanf_r+0xd6>
 800f432:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f434:	eba0 000a 	sub.w	r0, r0, sl
 800f438:	2301      	movs	r3, #1
 800f43a:	4083      	lsls	r3, r0
 800f43c:	4313      	orrs	r3, r2
 800f43e:	9341      	str	r3, [sp, #260]	@ 0x104
 800f440:	464d      	mov	r5, r9
 800f442:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f446:	2b78      	cmp	r3, #120	@ 0x78
 800f448:	d806      	bhi.n	800f458 <__ssvfiscanf_r+0xec>
 800f44a:	2b57      	cmp	r3, #87	@ 0x57
 800f44c:	d810      	bhi.n	800f470 <__ssvfiscanf_r+0x104>
 800f44e:	2b25      	cmp	r3, #37	@ 0x25
 800f450:	d0c5      	beq.n	800f3de <__ssvfiscanf_r+0x72>
 800f452:	d857      	bhi.n	800f504 <__ssvfiscanf_r+0x198>
 800f454:	2b00      	cmp	r3, #0
 800f456:	d065      	beq.n	800f524 <__ssvfiscanf_r+0x1b8>
 800f458:	2303      	movs	r3, #3
 800f45a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f45c:	230a      	movs	r3, #10
 800f45e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f460:	e078      	b.n	800f554 <__ssvfiscanf_r+0x1e8>
 800f462:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f464:	fb02 1103 	mla	r1, r2, r3, r1
 800f468:	3930      	subs	r1, #48	@ 0x30
 800f46a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f46c:	464d      	mov	r5, r9
 800f46e:	e7d2      	b.n	800f416 <__ssvfiscanf_r+0xaa>
 800f470:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f474:	2a20      	cmp	r2, #32
 800f476:	d8ef      	bhi.n	800f458 <__ssvfiscanf_r+0xec>
 800f478:	a101      	add	r1, pc, #4	@ (adr r1, 800f480 <__ssvfiscanf_r+0x114>)
 800f47a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f47e:	bf00      	nop
 800f480:	0800f533 	.word	0x0800f533
 800f484:	0800f459 	.word	0x0800f459
 800f488:	0800f459 	.word	0x0800f459
 800f48c:	0800f58d 	.word	0x0800f58d
 800f490:	0800f459 	.word	0x0800f459
 800f494:	0800f459 	.word	0x0800f459
 800f498:	0800f459 	.word	0x0800f459
 800f49c:	0800f459 	.word	0x0800f459
 800f4a0:	0800f459 	.word	0x0800f459
 800f4a4:	0800f459 	.word	0x0800f459
 800f4a8:	0800f459 	.word	0x0800f459
 800f4ac:	0800f5a3 	.word	0x0800f5a3
 800f4b0:	0800f589 	.word	0x0800f589
 800f4b4:	0800f50b 	.word	0x0800f50b
 800f4b8:	0800f50b 	.word	0x0800f50b
 800f4bc:	0800f50b 	.word	0x0800f50b
 800f4c0:	0800f459 	.word	0x0800f459
 800f4c4:	0800f545 	.word	0x0800f545
 800f4c8:	0800f459 	.word	0x0800f459
 800f4cc:	0800f459 	.word	0x0800f459
 800f4d0:	0800f459 	.word	0x0800f459
 800f4d4:	0800f459 	.word	0x0800f459
 800f4d8:	0800f5b3 	.word	0x0800f5b3
 800f4dc:	0800f54d 	.word	0x0800f54d
 800f4e0:	0800f52b 	.word	0x0800f52b
 800f4e4:	0800f459 	.word	0x0800f459
 800f4e8:	0800f459 	.word	0x0800f459
 800f4ec:	0800f5af 	.word	0x0800f5af
 800f4f0:	0800f459 	.word	0x0800f459
 800f4f4:	0800f589 	.word	0x0800f589
 800f4f8:	0800f459 	.word	0x0800f459
 800f4fc:	0800f459 	.word	0x0800f459
 800f500:	0800f533 	.word	0x0800f533
 800f504:	3b45      	subs	r3, #69	@ 0x45
 800f506:	2b02      	cmp	r3, #2
 800f508:	d8a6      	bhi.n	800f458 <__ssvfiscanf_r+0xec>
 800f50a:	2305      	movs	r3, #5
 800f50c:	e021      	b.n	800f552 <__ssvfiscanf_r+0x1e6>
 800f50e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f510:	4621      	mov	r1, r4
 800f512:	4630      	mov	r0, r6
 800f514:	4798      	blx	r3
 800f516:	2800      	cmp	r0, #0
 800f518:	f43f af66 	beq.w	800f3e8 <__ssvfiscanf_r+0x7c>
 800f51c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f51e:	2800      	cmp	r0, #0
 800f520:	f040 808b 	bne.w	800f63a <__ssvfiscanf_r+0x2ce>
 800f524:	f04f 30ff 	mov.w	r0, #4294967295
 800f528:	e08b      	b.n	800f642 <__ssvfiscanf_r+0x2d6>
 800f52a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f52c:	f042 0220 	orr.w	r2, r2, #32
 800f530:	9241      	str	r2, [sp, #260]	@ 0x104
 800f532:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f538:	9241      	str	r2, [sp, #260]	@ 0x104
 800f53a:	2210      	movs	r2, #16
 800f53c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f53e:	9242      	str	r2, [sp, #264]	@ 0x108
 800f540:	d902      	bls.n	800f548 <__ssvfiscanf_r+0x1dc>
 800f542:	e005      	b.n	800f550 <__ssvfiscanf_r+0x1e4>
 800f544:	2300      	movs	r3, #0
 800f546:	9342      	str	r3, [sp, #264]	@ 0x108
 800f548:	2303      	movs	r3, #3
 800f54a:	e002      	b.n	800f552 <__ssvfiscanf_r+0x1e6>
 800f54c:	2308      	movs	r3, #8
 800f54e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f550:	2304      	movs	r3, #4
 800f552:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f554:	6863      	ldr	r3, [r4, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	dd39      	ble.n	800f5ce <__ssvfiscanf_r+0x262>
 800f55a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f55c:	0659      	lsls	r1, r3, #25
 800f55e:	d404      	bmi.n	800f56a <__ssvfiscanf_r+0x1fe>
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	781a      	ldrb	r2, [r3, #0]
 800f564:	5cba      	ldrb	r2, [r7, r2]
 800f566:	0712      	lsls	r2, r2, #28
 800f568:	d438      	bmi.n	800f5dc <__ssvfiscanf_r+0x270>
 800f56a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	dc47      	bgt.n	800f600 <__ssvfiscanf_r+0x294>
 800f570:	466b      	mov	r3, sp
 800f572:	4622      	mov	r2, r4
 800f574:	a941      	add	r1, sp, #260	@ 0x104
 800f576:	4630      	mov	r0, r6
 800f578:	f000 f86c 	bl	800f654 <_scanf_chars>
 800f57c:	2801      	cmp	r0, #1
 800f57e:	d064      	beq.n	800f64a <__ssvfiscanf_r+0x2de>
 800f580:	2802      	cmp	r0, #2
 800f582:	f47f af18 	bne.w	800f3b6 <__ssvfiscanf_r+0x4a>
 800f586:	e7c9      	b.n	800f51c <__ssvfiscanf_r+0x1b0>
 800f588:	220a      	movs	r2, #10
 800f58a:	e7d7      	b.n	800f53c <__ssvfiscanf_r+0x1d0>
 800f58c:	4629      	mov	r1, r5
 800f58e:	4640      	mov	r0, r8
 800f590:	f000 fa5a 	bl	800fa48 <__sccl>
 800f594:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f59a:	9341      	str	r3, [sp, #260]	@ 0x104
 800f59c:	4605      	mov	r5, r0
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e7d7      	b.n	800f552 <__ssvfiscanf_r+0x1e6>
 800f5a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f5a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5a8:	9341      	str	r3, [sp, #260]	@ 0x104
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e7d1      	b.n	800f552 <__ssvfiscanf_r+0x1e6>
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e7cf      	b.n	800f552 <__ssvfiscanf_r+0x1e6>
 800f5b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f5b4:	06c3      	lsls	r3, r0, #27
 800f5b6:	f53f aefe 	bmi.w	800f3b6 <__ssvfiscanf_r+0x4a>
 800f5ba:	9b00      	ldr	r3, [sp, #0]
 800f5bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f5be:	1d19      	adds	r1, r3, #4
 800f5c0:	9100      	str	r1, [sp, #0]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	07c0      	lsls	r0, r0, #31
 800f5c6:	bf4c      	ite	mi
 800f5c8:	801a      	strhmi	r2, [r3, #0]
 800f5ca:	601a      	strpl	r2, [r3, #0]
 800f5cc:	e6f3      	b.n	800f3b6 <__ssvfiscanf_r+0x4a>
 800f5ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f5d0:	4621      	mov	r1, r4
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	4798      	blx	r3
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d0bf      	beq.n	800f55a <__ssvfiscanf_r+0x1ee>
 800f5da:	e79f      	b.n	800f51c <__ssvfiscanf_r+0x1b0>
 800f5dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f5de:	3201      	adds	r2, #1
 800f5e0:	9245      	str	r2, [sp, #276]	@ 0x114
 800f5e2:	6862      	ldr	r2, [r4, #4]
 800f5e4:	3a01      	subs	r2, #1
 800f5e6:	2a00      	cmp	r2, #0
 800f5e8:	6062      	str	r2, [r4, #4]
 800f5ea:	dd02      	ble.n	800f5f2 <__ssvfiscanf_r+0x286>
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	6023      	str	r3, [r4, #0]
 800f5f0:	e7b6      	b.n	800f560 <__ssvfiscanf_r+0x1f4>
 800f5f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f5f4:	4621      	mov	r1, r4
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	4798      	blx	r3
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d0b0      	beq.n	800f560 <__ssvfiscanf_r+0x1f4>
 800f5fe:	e78d      	b.n	800f51c <__ssvfiscanf_r+0x1b0>
 800f600:	2b04      	cmp	r3, #4
 800f602:	dc0f      	bgt.n	800f624 <__ssvfiscanf_r+0x2b8>
 800f604:	466b      	mov	r3, sp
 800f606:	4622      	mov	r2, r4
 800f608:	a941      	add	r1, sp, #260	@ 0x104
 800f60a:	4630      	mov	r0, r6
 800f60c:	f000 f87c 	bl	800f708 <_scanf_i>
 800f610:	e7b4      	b.n	800f57c <__ssvfiscanf_r+0x210>
 800f612:	bf00      	nop
 800f614:	0800f2bd 	.word	0x0800f2bd
 800f618:	0800f333 	.word	0x0800f333
 800f61c:	080125f1 	.word	0x080125f1
 800f620:	080126f7 	.word	0x080126f7
 800f624:	4b0a      	ldr	r3, [pc, #40]	@ (800f650 <__ssvfiscanf_r+0x2e4>)
 800f626:	2b00      	cmp	r3, #0
 800f628:	f43f aec5 	beq.w	800f3b6 <__ssvfiscanf_r+0x4a>
 800f62c:	466b      	mov	r3, sp
 800f62e:	4622      	mov	r2, r4
 800f630:	a941      	add	r1, sp, #260	@ 0x104
 800f632:	4630      	mov	r0, r6
 800f634:	f7fc feae 	bl	800c394 <_scanf_float>
 800f638:	e7a0      	b.n	800f57c <__ssvfiscanf_r+0x210>
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	065b      	lsls	r3, r3, #25
 800f63e:	f53f af71 	bmi.w	800f524 <__ssvfiscanf_r+0x1b8>
 800f642:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f64c:	e7f9      	b.n	800f642 <__ssvfiscanf_r+0x2d6>
 800f64e:	bf00      	nop
 800f650:	0800c395 	.word	0x0800c395

0800f654 <_scanf_chars>:
 800f654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f658:	4615      	mov	r5, r2
 800f65a:	688a      	ldr	r2, [r1, #8]
 800f65c:	4680      	mov	r8, r0
 800f65e:	460c      	mov	r4, r1
 800f660:	b932      	cbnz	r2, 800f670 <_scanf_chars+0x1c>
 800f662:	698a      	ldr	r2, [r1, #24]
 800f664:	2a00      	cmp	r2, #0
 800f666:	bf14      	ite	ne
 800f668:	f04f 32ff 	movne.w	r2, #4294967295
 800f66c:	2201      	moveq	r2, #1
 800f66e:	608a      	str	r2, [r1, #8]
 800f670:	6822      	ldr	r2, [r4, #0]
 800f672:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f704 <_scanf_chars+0xb0>
 800f676:	06d1      	lsls	r1, r2, #27
 800f678:	bf5f      	itttt	pl
 800f67a:	681a      	ldrpl	r2, [r3, #0]
 800f67c:	1d11      	addpl	r1, r2, #4
 800f67e:	6019      	strpl	r1, [r3, #0]
 800f680:	6816      	ldrpl	r6, [r2, #0]
 800f682:	2700      	movs	r7, #0
 800f684:	69a0      	ldr	r0, [r4, #24]
 800f686:	b188      	cbz	r0, 800f6ac <_scanf_chars+0x58>
 800f688:	2801      	cmp	r0, #1
 800f68a:	d107      	bne.n	800f69c <_scanf_chars+0x48>
 800f68c:	682b      	ldr	r3, [r5, #0]
 800f68e:	781a      	ldrb	r2, [r3, #0]
 800f690:	6963      	ldr	r3, [r4, #20]
 800f692:	5c9b      	ldrb	r3, [r3, r2]
 800f694:	b953      	cbnz	r3, 800f6ac <_scanf_chars+0x58>
 800f696:	2f00      	cmp	r7, #0
 800f698:	d031      	beq.n	800f6fe <_scanf_chars+0xaa>
 800f69a:	e022      	b.n	800f6e2 <_scanf_chars+0x8e>
 800f69c:	2802      	cmp	r0, #2
 800f69e:	d120      	bne.n	800f6e2 <_scanf_chars+0x8e>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f6a8:	071b      	lsls	r3, r3, #28
 800f6aa:	d41a      	bmi.n	800f6e2 <_scanf_chars+0x8e>
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	06da      	lsls	r2, r3, #27
 800f6b0:	bf5e      	ittt	pl
 800f6b2:	682b      	ldrpl	r3, [r5, #0]
 800f6b4:	781b      	ldrbpl	r3, [r3, #0]
 800f6b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f6ba:	682a      	ldr	r2, [r5, #0]
 800f6bc:	686b      	ldr	r3, [r5, #4]
 800f6be:	3201      	adds	r2, #1
 800f6c0:	602a      	str	r2, [r5, #0]
 800f6c2:	68a2      	ldr	r2, [r4, #8]
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	3a01      	subs	r2, #1
 800f6c8:	606b      	str	r3, [r5, #4]
 800f6ca:	3701      	adds	r7, #1
 800f6cc:	60a2      	str	r2, [r4, #8]
 800f6ce:	b142      	cbz	r2, 800f6e2 <_scanf_chars+0x8e>
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	dcd7      	bgt.n	800f684 <_scanf_chars+0x30>
 800f6d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f6d8:	4629      	mov	r1, r5
 800f6da:	4640      	mov	r0, r8
 800f6dc:	4798      	blx	r3
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d0d0      	beq.n	800f684 <_scanf_chars+0x30>
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	f013 0310 	ands.w	r3, r3, #16
 800f6e8:	d105      	bne.n	800f6f6 <_scanf_chars+0xa2>
 800f6ea:	68e2      	ldr	r2, [r4, #12]
 800f6ec:	3201      	adds	r2, #1
 800f6ee:	60e2      	str	r2, [r4, #12]
 800f6f0:	69a2      	ldr	r2, [r4, #24]
 800f6f2:	b102      	cbz	r2, 800f6f6 <_scanf_chars+0xa2>
 800f6f4:	7033      	strb	r3, [r6, #0]
 800f6f6:	6923      	ldr	r3, [r4, #16]
 800f6f8:	443b      	add	r3, r7
 800f6fa:	6123      	str	r3, [r4, #16]
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f702:	bf00      	nop
 800f704:	080125f1 	.word	0x080125f1

0800f708 <_scanf_i>:
 800f708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f70c:	4698      	mov	r8, r3
 800f70e:	4b74      	ldr	r3, [pc, #464]	@ (800f8e0 <_scanf_i+0x1d8>)
 800f710:	460c      	mov	r4, r1
 800f712:	4682      	mov	sl, r0
 800f714:	4616      	mov	r6, r2
 800f716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f71a:	b087      	sub	sp, #28
 800f71c:	ab03      	add	r3, sp, #12
 800f71e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f722:	4b70      	ldr	r3, [pc, #448]	@ (800f8e4 <_scanf_i+0x1dc>)
 800f724:	69a1      	ldr	r1, [r4, #24]
 800f726:	4a70      	ldr	r2, [pc, #448]	@ (800f8e8 <_scanf_i+0x1e0>)
 800f728:	2903      	cmp	r1, #3
 800f72a:	bf08      	it	eq
 800f72c:	461a      	moveq	r2, r3
 800f72e:	68a3      	ldr	r3, [r4, #8]
 800f730:	9201      	str	r2, [sp, #4]
 800f732:	1e5a      	subs	r2, r3, #1
 800f734:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f738:	bf88      	it	hi
 800f73a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f73e:	4627      	mov	r7, r4
 800f740:	bf82      	ittt	hi
 800f742:	eb03 0905 	addhi.w	r9, r3, r5
 800f746:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f74a:	60a3      	strhi	r3, [r4, #8]
 800f74c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f750:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f754:	bf98      	it	ls
 800f756:	f04f 0900 	movls.w	r9, #0
 800f75a:	6023      	str	r3, [r4, #0]
 800f75c:	463d      	mov	r5, r7
 800f75e:	f04f 0b00 	mov.w	fp, #0
 800f762:	6831      	ldr	r1, [r6, #0]
 800f764:	ab03      	add	r3, sp, #12
 800f766:	7809      	ldrb	r1, [r1, #0]
 800f768:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f76c:	2202      	movs	r2, #2
 800f76e:	f7f0 fd4f 	bl	8000210 <memchr>
 800f772:	b328      	cbz	r0, 800f7c0 <_scanf_i+0xb8>
 800f774:	f1bb 0f01 	cmp.w	fp, #1
 800f778:	d159      	bne.n	800f82e <_scanf_i+0x126>
 800f77a:	6862      	ldr	r2, [r4, #4]
 800f77c:	b92a      	cbnz	r2, 800f78a <_scanf_i+0x82>
 800f77e:	6822      	ldr	r2, [r4, #0]
 800f780:	2108      	movs	r1, #8
 800f782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f786:	6061      	str	r1, [r4, #4]
 800f788:	6022      	str	r2, [r4, #0]
 800f78a:	6822      	ldr	r2, [r4, #0]
 800f78c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f790:	6022      	str	r2, [r4, #0]
 800f792:	68a2      	ldr	r2, [r4, #8]
 800f794:	1e51      	subs	r1, r2, #1
 800f796:	60a1      	str	r1, [r4, #8]
 800f798:	b192      	cbz	r2, 800f7c0 <_scanf_i+0xb8>
 800f79a:	6832      	ldr	r2, [r6, #0]
 800f79c:	1c51      	adds	r1, r2, #1
 800f79e:	6031      	str	r1, [r6, #0]
 800f7a0:	7812      	ldrb	r2, [r2, #0]
 800f7a2:	f805 2b01 	strb.w	r2, [r5], #1
 800f7a6:	6872      	ldr	r2, [r6, #4]
 800f7a8:	3a01      	subs	r2, #1
 800f7aa:	2a00      	cmp	r2, #0
 800f7ac:	6072      	str	r2, [r6, #4]
 800f7ae:	dc07      	bgt.n	800f7c0 <_scanf_i+0xb8>
 800f7b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4650      	mov	r0, sl
 800f7b8:	4790      	blx	r2
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	f040 8085 	bne.w	800f8ca <_scanf_i+0x1c2>
 800f7c0:	f10b 0b01 	add.w	fp, fp, #1
 800f7c4:	f1bb 0f03 	cmp.w	fp, #3
 800f7c8:	d1cb      	bne.n	800f762 <_scanf_i+0x5a>
 800f7ca:	6863      	ldr	r3, [r4, #4]
 800f7cc:	b90b      	cbnz	r3, 800f7d2 <_scanf_i+0xca>
 800f7ce:	230a      	movs	r3, #10
 800f7d0:	6063      	str	r3, [r4, #4]
 800f7d2:	6863      	ldr	r3, [r4, #4]
 800f7d4:	4945      	ldr	r1, [pc, #276]	@ (800f8ec <_scanf_i+0x1e4>)
 800f7d6:	6960      	ldr	r0, [r4, #20]
 800f7d8:	1ac9      	subs	r1, r1, r3
 800f7da:	f000 f935 	bl	800fa48 <__sccl>
 800f7de:	f04f 0b00 	mov.w	fp, #0
 800f7e2:	68a3      	ldr	r3, [r4, #8]
 800f7e4:	6822      	ldr	r2, [r4, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d03d      	beq.n	800f866 <_scanf_i+0x15e>
 800f7ea:	6831      	ldr	r1, [r6, #0]
 800f7ec:	6960      	ldr	r0, [r4, #20]
 800f7ee:	f891 c000 	ldrb.w	ip, [r1]
 800f7f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d035      	beq.n	800f866 <_scanf_i+0x15e>
 800f7fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f7fe:	d124      	bne.n	800f84a <_scanf_i+0x142>
 800f800:	0510      	lsls	r0, r2, #20
 800f802:	d522      	bpl.n	800f84a <_scanf_i+0x142>
 800f804:	f10b 0b01 	add.w	fp, fp, #1
 800f808:	f1b9 0f00 	cmp.w	r9, #0
 800f80c:	d003      	beq.n	800f816 <_scanf_i+0x10e>
 800f80e:	3301      	adds	r3, #1
 800f810:	f109 39ff 	add.w	r9, r9, #4294967295
 800f814:	60a3      	str	r3, [r4, #8]
 800f816:	6873      	ldr	r3, [r6, #4]
 800f818:	3b01      	subs	r3, #1
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	6073      	str	r3, [r6, #4]
 800f81e:	dd1b      	ble.n	800f858 <_scanf_i+0x150>
 800f820:	6833      	ldr	r3, [r6, #0]
 800f822:	3301      	adds	r3, #1
 800f824:	6033      	str	r3, [r6, #0]
 800f826:	68a3      	ldr	r3, [r4, #8]
 800f828:	3b01      	subs	r3, #1
 800f82a:	60a3      	str	r3, [r4, #8]
 800f82c:	e7d9      	b.n	800f7e2 <_scanf_i+0xda>
 800f82e:	f1bb 0f02 	cmp.w	fp, #2
 800f832:	d1ae      	bne.n	800f792 <_scanf_i+0x8a>
 800f834:	6822      	ldr	r2, [r4, #0]
 800f836:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f83a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f83e:	d1bf      	bne.n	800f7c0 <_scanf_i+0xb8>
 800f840:	2110      	movs	r1, #16
 800f842:	6061      	str	r1, [r4, #4]
 800f844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f848:	e7a2      	b.n	800f790 <_scanf_i+0x88>
 800f84a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f84e:	6022      	str	r2, [r4, #0]
 800f850:	780b      	ldrb	r3, [r1, #0]
 800f852:	f805 3b01 	strb.w	r3, [r5], #1
 800f856:	e7de      	b.n	800f816 <_scanf_i+0x10e>
 800f858:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f85c:	4631      	mov	r1, r6
 800f85e:	4650      	mov	r0, sl
 800f860:	4798      	blx	r3
 800f862:	2800      	cmp	r0, #0
 800f864:	d0df      	beq.n	800f826 <_scanf_i+0x11e>
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	05d9      	lsls	r1, r3, #23
 800f86a:	d50d      	bpl.n	800f888 <_scanf_i+0x180>
 800f86c:	42bd      	cmp	r5, r7
 800f86e:	d909      	bls.n	800f884 <_scanf_i+0x17c>
 800f870:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f874:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f878:	4632      	mov	r2, r6
 800f87a:	4650      	mov	r0, sl
 800f87c:	4798      	blx	r3
 800f87e:	f105 39ff 	add.w	r9, r5, #4294967295
 800f882:	464d      	mov	r5, r9
 800f884:	42bd      	cmp	r5, r7
 800f886:	d028      	beq.n	800f8da <_scanf_i+0x1d2>
 800f888:	6822      	ldr	r2, [r4, #0]
 800f88a:	f012 0210 	ands.w	r2, r2, #16
 800f88e:	d113      	bne.n	800f8b8 <_scanf_i+0x1b0>
 800f890:	702a      	strb	r2, [r5, #0]
 800f892:	6863      	ldr	r3, [r4, #4]
 800f894:	9e01      	ldr	r6, [sp, #4]
 800f896:	4639      	mov	r1, r7
 800f898:	4650      	mov	r0, sl
 800f89a:	47b0      	blx	r6
 800f89c:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a0:	6821      	ldr	r1, [r4, #0]
 800f8a2:	1d1a      	adds	r2, r3, #4
 800f8a4:	f8c8 2000 	str.w	r2, [r8]
 800f8a8:	f011 0f20 	tst.w	r1, #32
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	d00f      	beq.n	800f8d0 <_scanf_i+0x1c8>
 800f8b0:	6018      	str	r0, [r3, #0]
 800f8b2:	68e3      	ldr	r3, [r4, #12]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	60e3      	str	r3, [r4, #12]
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	1bed      	subs	r5, r5, r7
 800f8bc:	445d      	add	r5, fp
 800f8be:	442b      	add	r3, r5
 800f8c0:	6123      	str	r3, [r4, #16]
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	b007      	add	sp, #28
 800f8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ca:	f04f 0b00 	mov.w	fp, #0
 800f8ce:	e7ca      	b.n	800f866 <_scanf_i+0x15e>
 800f8d0:	07ca      	lsls	r2, r1, #31
 800f8d2:	bf4c      	ite	mi
 800f8d4:	8018      	strhmi	r0, [r3, #0]
 800f8d6:	6018      	strpl	r0, [r3, #0]
 800f8d8:	e7eb      	b.n	800f8b2 <_scanf_i+0x1aa>
 800f8da:	2001      	movs	r0, #1
 800f8dc:	e7f2      	b.n	800f8c4 <_scanf_i+0x1bc>
 800f8de:	bf00      	nop
 800f8e0:	08012350 	.word	0x08012350
 800f8e4:	0800f009 	.word	0x0800f009
 800f8e8:	080103a5 	.word	0x080103a5
 800f8ec:	08012712 	.word	0x08012712

0800f8f0 <__sflush_r>:
 800f8f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f8:	0716      	lsls	r6, r2, #28
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	460c      	mov	r4, r1
 800f8fe:	d454      	bmi.n	800f9aa <__sflush_r+0xba>
 800f900:	684b      	ldr	r3, [r1, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	dc02      	bgt.n	800f90c <__sflush_r+0x1c>
 800f906:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f908:	2b00      	cmp	r3, #0
 800f90a:	dd48      	ble.n	800f99e <__sflush_r+0xae>
 800f90c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f90e:	2e00      	cmp	r6, #0
 800f910:	d045      	beq.n	800f99e <__sflush_r+0xae>
 800f912:	2300      	movs	r3, #0
 800f914:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f918:	682f      	ldr	r7, [r5, #0]
 800f91a:	6a21      	ldr	r1, [r4, #32]
 800f91c:	602b      	str	r3, [r5, #0]
 800f91e:	d030      	beq.n	800f982 <__sflush_r+0x92>
 800f920:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f922:	89a3      	ldrh	r3, [r4, #12]
 800f924:	0759      	lsls	r1, r3, #29
 800f926:	d505      	bpl.n	800f934 <__sflush_r+0x44>
 800f928:	6863      	ldr	r3, [r4, #4]
 800f92a:	1ad2      	subs	r2, r2, r3
 800f92c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f92e:	b10b      	cbz	r3, 800f934 <__sflush_r+0x44>
 800f930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f932:	1ad2      	subs	r2, r2, r3
 800f934:	2300      	movs	r3, #0
 800f936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f938:	6a21      	ldr	r1, [r4, #32]
 800f93a:	4628      	mov	r0, r5
 800f93c:	47b0      	blx	r6
 800f93e:	1c43      	adds	r3, r0, #1
 800f940:	89a3      	ldrh	r3, [r4, #12]
 800f942:	d106      	bne.n	800f952 <__sflush_r+0x62>
 800f944:	6829      	ldr	r1, [r5, #0]
 800f946:	291d      	cmp	r1, #29
 800f948:	d82b      	bhi.n	800f9a2 <__sflush_r+0xb2>
 800f94a:	4a2a      	ldr	r2, [pc, #168]	@ (800f9f4 <__sflush_r+0x104>)
 800f94c:	410a      	asrs	r2, r1
 800f94e:	07d6      	lsls	r6, r2, #31
 800f950:	d427      	bmi.n	800f9a2 <__sflush_r+0xb2>
 800f952:	2200      	movs	r2, #0
 800f954:	6062      	str	r2, [r4, #4]
 800f956:	04d9      	lsls	r1, r3, #19
 800f958:	6922      	ldr	r2, [r4, #16]
 800f95a:	6022      	str	r2, [r4, #0]
 800f95c:	d504      	bpl.n	800f968 <__sflush_r+0x78>
 800f95e:	1c42      	adds	r2, r0, #1
 800f960:	d101      	bne.n	800f966 <__sflush_r+0x76>
 800f962:	682b      	ldr	r3, [r5, #0]
 800f964:	b903      	cbnz	r3, 800f968 <__sflush_r+0x78>
 800f966:	6560      	str	r0, [r4, #84]	@ 0x54
 800f968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f96a:	602f      	str	r7, [r5, #0]
 800f96c:	b1b9      	cbz	r1, 800f99e <__sflush_r+0xae>
 800f96e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f972:	4299      	cmp	r1, r3
 800f974:	d002      	beq.n	800f97c <__sflush_r+0x8c>
 800f976:	4628      	mov	r0, r5
 800f978:	f7fd ffbe 	bl	800d8f8 <_free_r>
 800f97c:	2300      	movs	r3, #0
 800f97e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f980:	e00d      	b.n	800f99e <__sflush_r+0xae>
 800f982:	2301      	movs	r3, #1
 800f984:	4628      	mov	r0, r5
 800f986:	47b0      	blx	r6
 800f988:	4602      	mov	r2, r0
 800f98a:	1c50      	adds	r0, r2, #1
 800f98c:	d1c9      	bne.n	800f922 <__sflush_r+0x32>
 800f98e:	682b      	ldr	r3, [r5, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0c6      	beq.n	800f922 <__sflush_r+0x32>
 800f994:	2b1d      	cmp	r3, #29
 800f996:	d001      	beq.n	800f99c <__sflush_r+0xac>
 800f998:	2b16      	cmp	r3, #22
 800f99a:	d11e      	bne.n	800f9da <__sflush_r+0xea>
 800f99c:	602f      	str	r7, [r5, #0]
 800f99e:	2000      	movs	r0, #0
 800f9a0:	e022      	b.n	800f9e8 <__sflush_r+0xf8>
 800f9a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9a6:	b21b      	sxth	r3, r3
 800f9a8:	e01b      	b.n	800f9e2 <__sflush_r+0xf2>
 800f9aa:	690f      	ldr	r7, [r1, #16]
 800f9ac:	2f00      	cmp	r7, #0
 800f9ae:	d0f6      	beq.n	800f99e <__sflush_r+0xae>
 800f9b0:	0793      	lsls	r3, r2, #30
 800f9b2:	680e      	ldr	r6, [r1, #0]
 800f9b4:	bf08      	it	eq
 800f9b6:	694b      	ldreq	r3, [r1, #20]
 800f9b8:	600f      	str	r7, [r1, #0]
 800f9ba:	bf18      	it	ne
 800f9bc:	2300      	movne	r3, #0
 800f9be:	eba6 0807 	sub.w	r8, r6, r7
 800f9c2:	608b      	str	r3, [r1, #8]
 800f9c4:	f1b8 0f00 	cmp.w	r8, #0
 800f9c8:	dde9      	ble.n	800f99e <__sflush_r+0xae>
 800f9ca:	6a21      	ldr	r1, [r4, #32]
 800f9cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9ce:	4643      	mov	r3, r8
 800f9d0:	463a      	mov	r2, r7
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	47b0      	blx	r6
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	dc08      	bgt.n	800f9ec <__sflush_r+0xfc>
 800f9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9e2:	81a3      	strh	r3, [r4, #12]
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ec:	4407      	add	r7, r0
 800f9ee:	eba8 0800 	sub.w	r8, r8, r0
 800f9f2:	e7e7      	b.n	800f9c4 <__sflush_r+0xd4>
 800f9f4:	dfbffffe 	.word	0xdfbffffe

0800f9f8 <_fflush_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	690b      	ldr	r3, [r1, #16]
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	460c      	mov	r4, r1
 800fa00:	b913      	cbnz	r3, 800fa08 <_fflush_r+0x10>
 800fa02:	2500      	movs	r5, #0
 800fa04:	4628      	mov	r0, r5
 800fa06:	bd38      	pop	{r3, r4, r5, pc}
 800fa08:	b118      	cbz	r0, 800fa12 <_fflush_r+0x1a>
 800fa0a:	6a03      	ldr	r3, [r0, #32]
 800fa0c:	b90b      	cbnz	r3, 800fa12 <_fflush_r+0x1a>
 800fa0e:	f7fc ff61 	bl	800c8d4 <__sinit>
 800fa12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d0f3      	beq.n	800fa02 <_fflush_r+0xa>
 800fa1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa1c:	07d0      	lsls	r0, r2, #31
 800fa1e:	d404      	bmi.n	800fa2a <_fflush_r+0x32>
 800fa20:	0599      	lsls	r1, r3, #22
 800fa22:	d402      	bmi.n	800fa2a <_fflush_r+0x32>
 800fa24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa26:	f7fd f902 	bl	800cc2e <__retarget_lock_acquire_recursive>
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	f7ff ff5f 	bl	800f8f0 <__sflush_r>
 800fa32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa34:	07da      	lsls	r2, r3, #31
 800fa36:	4605      	mov	r5, r0
 800fa38:	d4e4      	bmi.n	800fa04 <_fflush_r+0xc>
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	059b      	lsls	r3, r3, #22
 800fa3e:	d4e1      	bmi.n	800fa04 <_fflush_r+0xc>
 800fa40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa42:	f7fd f8f5 	bl	800cc30 <__retarget_lock_release_recursive>
 800fa46:	e7dd      	b.n	800fa04 <_fflush_r+0xc>

0800fa48 <__sccl>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	780b      	ldrb	r3, [r1, #0]
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	2b5e      	cmp	r3, #94	@ 0x5e
 800fa50:	bf0b      	itete	eq
 800fa52:	784b      	ldrbeq	r3, [r1, #1]
 800fa54:	1c4a      	addne	r2, r1, #1
 800fa56:	1c8a      	addeq	r2, r1, #2
 800fa58:	2100      	movne	r1, #0
 800fa5a:	bf08      	it	eq
 800fa5c:	2101      	moveq	r1, #1
 800fa5e:	3801      	subs	r0, #1
 800fa60:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800fa64:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fa68:	42a8      	cmp	r0, r5
 800fa6a:	d1fb      	bne.n	800fa64 <__sccl+0x1c>
 800fa6c:	b90b      	cbnz	r3, 800fa72 <__sccl+0x2a>
 800fa6e:	1e50      	subs	r0, r2, #1
 800fa70:	bd70      	pop	{r4, r5, r6, pc}
 800fa72:	f081 0101 	eor.w	r1, r1, #1
 800fa76:	54e1      	strb	r1, [r4, r3]
 800fa78:	4610      	mov	r0, r2
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fa80:	2d2d      	cmp	r5, #45	@ 0x2d
 800fa82:	d005      	beq.n	800fa90 <__sccl+0x48>
 800fa84:	2d5d      	cmp	r5, #93	@ 0x5d
 800fa86:	d016      	beq.n	800fab6 <__sccl+0x6e>
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	d0f1      	beq.n	800fa70 <__sccl+0x28>
 800fa8c:	462b      	mov	r3, r5
 800fa8e:	e7f2      	b.n	800fa76 <__sccl+0x2e>
 800fa90:	7846      	ldrb	r6, [r0, #1]
 800fa92:	2e5d      	cmp	r6, #93	@ 0x5d
 800fa94:	d0fa      	beq.n	800fa8c <__sccl+0x44>
 800fa96:	42b3      	cmp	r3, r6
 800fa98:	dcf8      	bgt.n	800fa8c <__sccl+0x44>
 800fa9a:	3002      	adds	r0, #2
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	3201      	adds	r2, #1
 800faa0:	4296      	cmp	r6, r2
 800faa2:	54a1      	strb	r1, [r4, r2]
 800faa4:	dcfb      	bgt.n	800fa9e <__sccl+0x56>
 800faa6:	1af2      	subs	r2, r6, r3
 800faa8:	3a01      	subs	r2, #1
 800faaa:	1c5d      	adds	r5, r3, #1
 800faac:	42b3      	cmp	r3, r6
 800faae:	bfa8      	it	ge
 800fab0:	2200      	movge	r2, #0
 800fab2:	18ab      	adds	r3, r5, r2
 800fab4:	e7e1      	b.n	800fa7a <__sccl+0x32>
 800fab6:	4610      	mov	r0, r2
 800fab8:	e7da      	b.n	800fa70 <__sccl+0x28>

0800faba <__submore>:
 800faba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fabe:	460c      	mov	r4, r1
 800fac0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fac6:	4299      	cmp	r1, r3
 800fac8:	d11d      	bne.n	800fb06 <__submore+0x4c>
 800faca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800face:	f7fb ff7d 	bl	800b9cc <_malloc_r>
 800fad2:	b918      	cbnz	r0, 800fadc <__submore+0x22>
 800fad4:	f04f 30ff 	mov.w	r0, #4294967295
 800fad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fadc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fae0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fae2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800fae6:	6360      	str	r0, [r4, #52]	@ 0x34
 800fae8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800faec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800faf0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800faf4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800faf8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800fafc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800fb00:	6020      	str	r0, [r4, #0]
 800fb02:	2000      	movs	r0, #0
 800fb04:	e7e8      	b.n	800fad8 <__submore+0x1e>
 800fb06:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800fb08:	0077      	lsls	r7, r6, #1
 800fb0a:	463a      	mov	r2, r7
 800fb0c:	f000 fbad 	bl	801026a <_realloc_r>
 800fb10:	4605      	mov	r5, r0
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d0de      	beq.n	800fad4 <__submore+0x1a>
 800fb16:	eb00 0806 	add.w	r8, r0, r6
 800fb1a:	4601      	mov	r1, r0
 800fb1c:	4632      	mov	r2, r6
 800fb1e:	4640      	mov	r0, r8
 800fb20:	f7fd f887 	bl	800cc32 <memcpy>
 800fb24:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800fb28:	f8c4 8000 	str.w	r8, [r4]
 800fb2c:	e7e9      	b.n	800fb02 <__submore+0x48>

0800fb2e <memmove>:
 800fb2e:	4288      	cmp	r0, r1
 800fb30:	b510      	push	{r4, lr}
 800fb32:	eb01 0402 	add.w	r4, r1, r2
 800fb36:	d902      	bls.n	800fb3e <memmove+0x10>
 800fb38:	4284      	cmp	r4, r0
 800fb3a:	4623      	mov	r3, r4
 800fb3c:	d807      	bhi.n	800fb4e <memmove+0x20>
 800fb3e:	1e43      	subs	r3, r0, #1
 800fb40:	42a1      	cmp	r1, r4
 800fb42:	d008      	beq.n	800fb56 <memmove+0x28>
 800fb44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb4c:	e7f8      	b.n	800fb40 <memmove+0x12>
 800fb4e:	4402      	add	r2, r0
 800fb50:	4601      	mov	r1, r0
 800fb52:	428a      	cmp	r2, r1
 800fb54:	d100      	bne.n	800fb58 <memmove+0x2a>
 800fb56:	bd10      	pop	{r4, pc}
 800fb58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb60:	e7f7      	b.n	800fb52 <memmove+0x24>

0800fb62 <strncmp>:
 800fb62:	b510      	push	{r4, lr}
 800fb64:	b16a      	cbz	r2, 800fb82 <strncmp+0x20>
 800fb66:	3901      	subs	r1, #1
 800fb68:	1884      	adds	r4, r0, r2
 800fb6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d103      	bne.n	800fb7e <strncmp+0x1c>
 800fb76:	42a0      	cmp	r0, r4
 800fb78:	d001      	beq.n	800fb7e <strncmp+0x1c>
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	d1f5      	bne.n	800fb6a <strncmp+0x8>
 800fb7e:	1ad0      	subs	r0, r2, r3
 800fb80:	bd10      	pop	{r4, pc}
 800fb82:	4610      	mov	r0, r2
 800fb84:	e7fc      	b.n	800fb80 <strncmp+0x1e>
	...

0800fb88 <nan>:
 800fb88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb90 <nan+0x8>
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	00000000 	.word	0x00000000
 800fb94:	7ff80000 	.word	0x7ff80000

0800fb98 <__assert_func>:
 800fb98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb9a:	4614      	mov	r4, r2
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4b09      	ldr	r3, [pc, #36]	@ (800fbc4 <__assert_func+0x2c>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4605      	mov	r5, r0
 800fba4:	68d8      	ldr	r0, [r3, #12]
 800fba6:	b954      	cbnz	r4, 800fbbe <__assert_func+0x26>
 800fba8:	4b07      	ldr	r3, [pc, #28]	@ (800fbc8 <__assert_func+0x30>)
 800fbaa:	461c      	mov	r4, r3
 800fbac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fbb0:	9100      	str	r1, [sp, #0]
 800fbb2:	462b      	mov	r3, r5
 800fbb4:	4905      	ldr	r1, [pc, #20]	@ (800fbcc <__assert_func+0x34>)
 800fbb6:	f000 fc05 	bl	80103c4 <fiprintf>
 800fbba:	f000 fc15 	bl	80103e8 <abort>
 800fbbe:	4b04      	ldr	r3, [pc, #16]	@ (800fbd0 <__assert_func+0x38>)
 800fbc0:	e7f4      	b.n	800fbac <__assert_func+0x14>
 800fbc2:	bf00      	nop
 800fbc4:	20000044 	.word	0x20000044
 800fbc8:	08012760 	.word	0x08012760
 800fbcc:	08012732 	.word	0x08012732
 800fbd0:	08012725 	.word	0x08012725

0800fbd4 <rshift>:
 800fbd4:	6903      	ldr	r3, [r0, #16]
 800fbd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fbda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fbe2:	f100 0414 	add.w	r4, r0, #20
 800fbe6:	dd45      	ble.n	800fc74 <rshift+0xa0>
 800fbe8:	f011 011f 	ands.w	r1, r1, #31
 800fbec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fbf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fbf4:	d10c      	bne.n	800fc10 <rshift+0x3c>
 800fbf6:	f100 0710 	add.w	r7, r0, #16
 800fbfa:	4629      	mov	r1, r5
 800fbfc:	42b1      	cmp	r1, r6
 800fbfe:	d334      	bcc.n	800fc6a <rshift+0x96>
 800fc00:	1a9b      	subs	r3, r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	1eea      	subs	r2, r5, #3
 800fc06:	4296      	cmp	r6, r2
 800fc08:	bf38      	it	cc
 800fc0a:	2300      	movcc	r3, #0
 800fc0c:	4423      	add	r3, r4
 800fc0e:	e015      	b.n	800fc3c <rshift+0x68>
 800fc10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc14:	f1c1 0820 	rsb	r8, r1, #32
 800fc18:	40cf      	lsrs	r7, r1
 800fc1a:	f105 0e04 	add.w	lr, r5, #4
 800fc1e:	46a1      	mov	r9, r4
 800fc20:	4576      	cmp	r6, lr
 800fc22:	46f4      	mov	ip, lr
 800fc24:	d815      	bhi.n	800fc52 <rshift+0x7e>
 800fc26:	1a9a      	subs	r2, r3, r2
 800fc28:	0092      	lsls	r2, r2, #2
 800fc2a:	3a04      	subs	r2, #4
 800fc2c:	3501      	adds	r5, #1
 800fc2e:	42ae      	cmp	r6, r5
 800fc30:	bf38      	it	cc
 800fc32:	2200      	movcc	r2, #0
 800fc34:	18a3      	adds	r3, r4, r2
 800fc36:	50a7      	str	r7, [r4, r2]
 800fc38:	b107      	cbz	r7, 800fc3c <rshift+0x68>
 800fc3a:	3304      	adds	r3, #4
 800fc3c:	1b1a      	subs	r2, r3, r4
 800fc3e:	42a3      	cmp	r3, r4
 800fc40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc44:	bf08      	it	eq
 800fc46:	2300      	moveq	r3, #0
 800fc48:	6102      	str	r2, [r0, #16]
 800fc4a:	bf08      	it	eq
 800fc4c:	6143      	streq	r3, [r0, #20]
 800fc4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc52:	f8dc c000 	ldr.w	ip, [ip]
 800fc56:	fa0c fc08 	lsl.w	ip, ip, r8
 800fc5a:	ea4c 0707 	orr.w	r7, ip, r7
 800fc5e:	f849 7b04 	str.w	r7, [r9], #4
 800fc62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc66:	40cf      	lsrs	r7, r1
 800fc68:	e7da      	b.n	800fc20 <rshift+0x4c>
 800fc6a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fc6e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fc72:	e7c3      	b.n	800fbfc <rshift+0x28>
 800fc74:	4623      	mov	r3, r4
 800fc76:	e7e1      	b.n	800fc3c <rshift+0x68>

0800fc78 <__hexdig_fun>:
 800fc78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fc7c:	2b09      	cmp	r3, #9
 800fc7e:	d802      	bhi.n	800fc86 <__hexdig_fun+0xe>
 800fc80:	3820      	subs	r0, #32
 800fc82:	b2c0      	uxtb	r0, r0
 800fc84:	4770      	bx	lr
 800fc86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fc8a:	2b05      	cmp	r3, #5
 800fc8c:	d801      	bhi.n	800fc92 <__hexdig_fun+0x1a>
 800fc8e:	3847      	subs	r0, #71	@ 0x47
 800fc90:	e7f7      	b.n	800fc82 <__hexdig_fun+0xa>
 800fc92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fc96:	2b05      	cmp	r3, #5
 800fc98:	d801      	bhi.n	800fc9e <__hexdig_fun+0x26>
 800fc9a:	3827      	subs	r0, #39	@ 0x27
 800fc9c:	e7f1      	b.n	800fc82 <__hexdig_fun+0xa>
 800fc9e:	2000      	movs	r0, #0
 800fca0:	4770      	bx	lr
	...

0800fca4 <__gethex>:
 800fca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca8:	b085      	sub	sp, #20
 800fcaa:	468a      	mov	sl, r1
 800fcac:	9302      	str	r3, [sp, #8]
 800fcae:	680b      	ldr	r3, [r1, #0]
 800fcb0:	9001      	str	r0, [sp, #4]
 800fcb2:	4690      	mov	r8, r2
 800fcb4:	1c9c      	adds	r4, r3, #2
 800fcb6:	46a1      	mov	r9, r4
 800fcb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fcbc:	2830      	cmp	r0, #48	@ 0x30
 800fcbe:	d0fa      	beq.n	800fcb6 <__gethex+0x12>
 800fcc0:	eba9 0303 	sub.w	r3, r9, r3
 800fcc4:	f1a3 0b02 	sub.w	fp, r3, #2
 800fcc8:	f7ff ffd6 	bl	800fc78 <__hexdig_fun>
 800fccc:	4605      	mov	r5, r0
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d168      	bne.n	800fda4 <__gethex+0x100>
 800fcd2:	49a0      	ldr	r1, [pc, #640]	@ (800ff54 <__gethex+0x2b0>)
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	4648      	mov	r0, r9
 800fcd8:	f7ff ff43 	bl	800fb62 <strncmp>
 800fcdc:	4607      	mov	r7, r0
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d167      	bne.n	800fdb2 <__gethex+0x10e>
 800fce2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fce6:	4626      	mov	r6, r4
 800fce8:	f7ff ffc6 	bl	800fc78 <__hexdig_fun>
 800fcec:	2800      	cmp	r0, #0
 800fcee:	d062      	beq.n	800fdb6 <__gethex+0x112>
 800fcf0:	4623      	mov	r3, r4
 800fcf2:	7818      	ldrb	r0, [r3, #0]
 800fcf4:	2830      	cmp	r0, #48	@ 0x30
 800fcf6:	4699      	mov	r9, r3
 800fcf8:	f103 0301 	add.w	r3, r3, #1
 800fcfc:	d0f9      	beq.n	800fcf2 <__gethex+0x4e>
 800fcfe:	f7ff ffbb 	bl	800fc78 <__hexdig_fun>
 800fd02:	fab0 f580 	clz	r5, r0
 800fd06:	096d      	lsrs	r5, r5, #5
 800fd08:	f04f 0b01 	mov.w	fp, #1
 800fd0c:	464a      	mov	r2, r9
 800fd0e:	4616      	mov	r6, r2
 800fd10:	3201      	adds	r2, #1
 800fd12:	7830      	ldrb	r0, [r6, #0]
 800fd14:	f7ff ffb0 	bl	800fc78 <__hexdig_fun>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d1f8      	bne.n	800fd0e <__gethex+0x6a>
 800fd1c:	498d      	ldr	r1, [pc, #564]	@ (800ff54 <__gethex+0x2b0>)
 800fd1e:	2201      	movs	r2, #1
 800fd20:	4630      	mov	r0, r6
 800fd22:	f7ff ff1e 	bl	800fb62 <strncmp>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d13f      	bne.n	800fdaa <__gethex+0x106>
 800fd2a:	b944      	cbnz	r4, 800fd3e <__gethex+0x9a>
 800fd2c:	1c74      	adds	r4, r6, #1
 800fd2e:	4622      	mov	r2, r4
 800fd30:	4616      	mov	r6, r2
 800fd32:	3201      	adds	r2, #1
 800fd34:	7830      	ldrb	r0, [r6, #0]
 800fd36:	f7ff ff9f 	bl	800fc78 <__hexdig_fun>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d1f8      	bne.n	800fd30 <__gethex+0x8c>
 800fd3e:	1ba4      	subs	r4, r4, r6
 800fd40:	00a7      	lsls	r7, r4, #2
 800fd42:	7833      	ldrb	r3, [r6, #0]
 800fd44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fd48:	2b50      	cmp	r3, #80	@ 0x50
 800fd4a:	d13e      	bne.n	800fdca <__gethex+0x126>
 800fd4c:	7873      	ldrb	r3, [r6, #1]
 800fd4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd50:	d033      	beq.n	800fdba <__gethex+0x116>
 800fd52:	2b2d      	cmp	r3, #45	@ 0x2d
 800fd54:	d034      	beq.n	800fdc0 <__gethex+0x11c>
 800fd56:	1c71      	adds	r1, r6, #1
 800fd58:	2400      	movs	r4, #0
 800fd5a:	7808      	ldrb	r0, [r1, #0]
 800fd5c:	f7ff ff8c 	bl	800fc78 <__hexdig_fun>
 800fd60:	1e43      	subs	r3, r0, #1
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	2b18      	cmp	r3, #24
 800fd66:	d830      	bhi.n	800fdca <__gethex+0x126>
 800fd68:	f1a0 0210 	sub.w	r2, r0, #16
 800fd6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fd70:	f7ff ff82 	bl	800fc78 <__hexdig_fun>
 800fd74:	f100 3cff 	add.w	ip, r0, #4294967295
 800fd78:	fa5f fc8c 	uxtb.w	ip, ip
 800fd7c:	f1bc 0f18 	cmp.w	ip, #24
 800fd80:	f04f 030a 	mov.w	r3, #10
 800fd84:	d91e      	bls.n	800fdc4 <__gethex+0x120>
 800fd86:	b104      	cbz	r4, 800fd8a <__gethex+0xe6>
 800fd88:	4252      	negs	r2, r2
 800fd8a:	4417      	add	r7, r2
 800fd8c:	f8ca 1000 	str.w	r1, [sl]
 800fd90:	b1ed      	cbz	r5, 800fdce <__gethex+0x12a>
 800fd92:	f1bb 0f00 	cmp.w	fp, #0
 800fd96:	bf0c      	ite	eq
 800fd98:	2506      	moveq	r5, #6
 800fd9a:	2500      	movne	r5, #0
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	b005      	add	sp, #20
 800fda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda4:	2500      	movs	r5, #0
 800fda6:	462c      	mov	r4, r5
 800fda8:	e7b0      	b.n	800fd0c <__gethex+0x68>
 800fdaa:	2c00      	cmp	r4, #0
 800fdac:	d1c7      	bne.n	800fd3e <__gethex+0x9a>
 800fdae:	4627      	mov	r7, r4
 800fdb0:	e7c7      	b.n	800fd42 <__gethex+0x9e>
 800fdb2:	464e      	mov	r6, r9
 800fdb4:	462f      	mov	r7, r5
 800fdb6:	2501      	movs	r5, #1
 800fdb8:	e7c3      	b.n	800fd42 <__gethex+0x9e>
 800fdba:	2400      	movs	r4, #0
 800fdbc:	1cb1      	adds	r1, r6, #2
 800fdbe:	e7cc      	b.n	800fd5a <__gethex+0xb6>
 800fdc0:	2401      	movs	r4, #1
 800fdc2:	e7fb      	b.n	800fdbc <__gethex+0x118>
 800fdc4:	fb03 0002 	mla	r0, r3, r2, r0
 800fdc8:	e7ce      	b.n	800fd68 <__gethex+0xc4>
 800fdca:	4631      	mov	r1, r6
 800fdcc:	e7de      	b.n	800fd8c <__gethex+0xe8>
 800fdce:	eba6 0309 	sub.w	r3, r6, r9
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	2b07      	cmp	r3, #7
 800fdd8:	dc0a      	bgt.n	800fdf0 <__gethex+0x14c>
 800fdda:	9801      	ldr	r0, [sp, #4]
 800fddc:	f7fd fdde 	bl	800d99c <_Balloc>
 800fde0:	4604      	mov	r4, r0
 800fde2:	b940      	cbnz	r0, 800fdf6 <__gethex+0x152>
 800fde4:	4b5c      	ldr	r3, [pc, #368]	@ (800ff58 <__gethex+0x2b4>)
 800fde6:	4602      	mov	r2, r0
 800fde8:	21e4      	movs	r1, #228	@ 0xe4
 800fdea:	485c      	ldr	r0, [pc, #368]	@ (800ff5c <__gethex+0x2b8>)
 800fdec:	f7ff fed4 	bl	800fb98 <__assert_func>
 800fdf0:	3101      	adds	r1, #1
 800fdf2:	105b      	asrs	r3, r3, #1
 800fdf4:	e7ef      	b.n	800fdd6 <__gethex+0x132>
 800fdf6:	f100 0a14 	add.w	sl, r0, #20
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4655      	mov	r5, sl
 800fdfe:	469b      	mov	fp, r3
 800fe00:	45b1      	cmp	r9, r6
 800fe02:	d337      	bcc.n	800fe74 <__gethex+0x1d0>
 800fe04:	f845 bb04 	str.w	fp, [r5], #4
 800fe08:	eba5 050a 	sub.w	r5, r5, sl
 800fe0c:	10ad      	asrs	r5, r5, #2
 800fe0e:	6125      	str	r5, [r4, #16]
 800fe10:	4658      	mov	r0, fp
 800fe12:	f7fd feb5 	bl	800db80 <__hi0bits>
 800fe16:	016d      	lsls	r5, r5, #5
 800fe18:	f8d8 6000 	ldr.w	r6, [r8]
 800fe1c:	1a2d      	subs	r5, r5, r0
 800fe1e:	42b5      	cmp	r5, r6
 800fe20:	dd54      	ble.n	800fecc <__gethex+0x228>
 800fe22:	1bad      	subs	r5, r5, r6
 800fe24:	4629      	mov	r1, r5
 800fe26:	4620      	mov	r0, r4
 800fe28:	f7fe fa49 	bl	800e2be <__any_on>
 800fe2c:	4681      	mov	r9, r0
 800fe2e:	b178      	cbz	r0, 800fe50 <__gethex+0x1ac>
 800fe30:	1e6b      	subs	r3, r5, #1
 800fe32:	1159      	asrs	r1, r3, #5
 800fe34:	f003 021f 	and.w	r2, r3, #31
 800fe38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fe3c:	f04f 0901 	mov.w	r9, #1
 800fe40:	fa09 f202 	lsl.w	r2, r9, r2
 800fe44:	420a      	tst	r2, r1
 800fe46:	d003      	beq.n	800fe50 <__gethex+0x1ac>
 800fe48:	454b      	cmp	r3, r9
 800fe4a:	dc36      	bgt.n	800feba <__gethex+0x216>
 800fe4c:	f04f 0902 	mov.w	r9, #2
 800fe50:	4629      	mov	r1, r5
 800fe52:	4620      	mov	r0, r4
 800fe54:	f7ff febe 	bl	800fbd4 <rshift>
 800fe58:	442f      	add	r7, r5
 800fe5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe5e:	42bb      	cmp	r3, r7
 800fe60:	da42      	bge.n	800fee8 <__gethex+0x244>
 800fe62:	9801      	ldr	r0, [sp, #4]
 800fe64:	4621      	mov	r1, r4
 800fe66:	f7fd fdd9 	bl	800da1c <_Bfree>
 800fe6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	25a3      	movs	r5, #163	@ 0xa3
 800fe72:	e793      	b.n	800fd9c <__gethex+0xf8>
 800fe74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fe78:	2a2e      	cmp	r2, #46	@ 0x2e
 800fe7a:	d012      	beq.n	800fea2 <__gethex+0x1fe>
 800fe7c:	2b20      	cmp	r3, #32
 800fe7e:	d104      	bne.n	800fe8a <__gethex+0x1e6>
 800fe80:	f845 bb04 	str.w	fp, [r5], #4
 800fe84:	f04f 0b00 	mov.w	fp, #0
 800fe88:	465b      	mov	r3, fp
 800fe8a:	7830      	ldrb	r0, [r6, #0]
 800fe8c:	9303      	str	r3, [sp, #12]
 800fe8e:	f7ff fef3 	bl	800fc78 <__hexdig_fun>
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	f000 000f 	and.w	r0, r0, #15
 800fe98:	4098      	lsls	r0, r3
 800fe9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800fe9e:	3304      	adds	r3, #4
 800fea0:	e7ae      	b.n	800fe00 <__gethex+0x15c>
 800fea2:	45b1      	cmp	r9, r6
 800fea4:	d8ea      	bhi.n	800fe7c <__gethex+0x1d8>
 800fea6:	492b      	ldr	r1, [pc, #172]	@ (800ff54 <__gethex+0x2b0>)
 800fea8:	9303      	str	r3, [sp, #12]
 800feaa:	2201      	movs	r2, #1
 800feac:	4630      	mov	r0, r6
 800feae:	f7ff fe58 	bl	800fb62 <strncmp>
 800feb2:	9b03      	ldr	r3, [sp, #12]
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d1e1      	bne.n	800fe7c <__gethex+0x1d8>
 800feb8:	e7a2      	b.n	800fe00 <__gethex+0x15c>
 800feba:	1ea9      	subs	r1, r5, #2
 800febc:	4620      	mov	r0, r4
 800febe:	f7fe f9fe 	bl	800e2be <__any_on>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d0c2      	beq.n	800fe4c <__gethex+0x1a8>
 800fec6:	f04f 0903 	mov.w	r9, #3
 800feca:	e7c1      	b.n	800fe50 <__gethex+0x1ac>
 800fecc:	da09      	bge.n	800fee2 <__gethex+0x23e>
 800fece:	1b75      	subs	r5, r6, r5
 800fed0:	4621      	mov	r1, r4
 800fed2:	9801      	ldr	r0, [sp, #4]
 800fed4:	462a      	mov	r2, r5
 800fed6:	f7fd ffb9 	bl	800de4c <__lshift>
 800feda:	1b7f      	subs	r7, r7, r5
 800fedc:	4604      	mov	r4, r0
 800fede:	f100 0a14 	add.w	sl, r0, #20
 800fee2:	f04f 0900 	mov.w	r9, #0
 800fee6:	e7b8      	b.n	800fe5a <__gethex+0x1b6>
 800fee8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800feec:	42bd      	cmp	r5, r7
 800feee:	dd6f      	ble.n	800ffd0 <__gethex+0x32c>
 800fef0:	1bed      	subs	r5, r5, r7
 800fef2:	42ae      	cmp	r6, r5
 800fef4:	dc34      	bgt.n	800ff60 <__gethex+0x2bc>
 800fef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fefa:	2b02      	cmp	r3, #2
 800fefc:	d022      	beq.n	800ff44 <__gethex+0x2a0>
 800fefe:	2b03      	cmp	r3, #3
 800ff00:	d024      	beq.n	800ff4c <__gethex+0x2a8>
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d115      	bne.n	800ff32 <__gethex+0x28e>
 800ff06:	42ae      	cmp	r6, r5
 800ff08:	d113      	bne.n	800ff32 <__gethex+0x28e>
 800ff0a:	2e01      	cmp	r6, #1
 800ff0c:	d10b      	bne.n	800ff26 <__gethex+0x282>
 800ff0e:	9a02      	ldr	r2, [sp, #8]
 800ff10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff14:	6013      	str	r3, [r2, #0]
 800ff16:	2301      	movs	r3, #1
 800ff18:	6123      	str	r3, [r4, #16]
 800ff1a:	f8ca 3000 	str.w	r3, [sl]
 800ff1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff20:	2562      	movs	r5, #98	@ 0x62
 800ff22:	601c      	str	r4, [r3, #0]
 800ff24:	e73a      	b.n	800fd9c <__gethex+0xf8>
 800ff26:	1e71      	subs	r1, r6, #1
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f7fe f9c8 	bl	800e2be <__any_on>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d1ed      	bne.n	800ff0e <__gethex+0x26a>
 800ff32:	9801      	ldr	r0, [sp, #4]
 800ff34:	4621      	mov	r1, r4
 800ff36:	f7fd fd71 	bl	800da1c <_Bfree>
 800ff3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	6013      	str	r3, [r2, #0]
 800ff40:	2550      	movs	r5, #80	@ 0x50
 800ff42:	e72b      	b.n	800fd9c <__gethex+0xf8>
 800ff44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1f3      	bne.n	800ff32 <__gethex+0x28e>
 800ff4a:	e7e0      	b.n	800ff0e <__gethex+0x26a>
 800ff4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1dd      	bne.n	800ff0e <__gethex+0x26a>
 800ff52:	e7ee      	b.n	800ff32 <__gethex+0x28e>
 800ff54:	08012598 	.word	0x08012598
 800ff58:	0801242f 	.word	0x0801242f
 800ff5c:	08012761 	.word	0x08012761
 800ff60:	1e6f      	subs	r7, r5, #1
 800ff62:	f1b9 0f00 	cmp.w	r9, #0
 800ff66:	d130      	bne.n	800ffca <__gethex+0x326>
 800ff68:	b127      	cbz	r7, 800ff74 <__gethex+0x2d0>
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7fe f9a6 	bl	800e2be <__any_on>
 800ff72:	4681      	mov	r9, r0
 800ff74:	117a      	asrs	r2, r7, #5
 800ff76:	2301      	movs	r3, #1
 800ff78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ff7c:	f007 071f 	and.w	r7, r7, #31
 800ff80:	40bb      	lsls	r3, r7
 800ff82:	4213      	tst	r3, r2
 800ff84:	4629      	mov	r1, r5
 800ff86:	4620      	mov	r0, r4
 800ff88:	bf18      	it	ne
 800ff8a:	f049 0902 	orrne.w	r9, r9, #2
 800ff8e:	f7ff fe21 	bl	800fbd4 <rshift>
 800ff92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ff96:	1b76      	subs	r6, r6, r5
 800ff98:	2502      	movs	r5, #2
 800ff9a:	f1b9 0f00 	cmp.w	r9, #0
 800ff9e:	d047      	beq.n	8010030 <__gethex+0x38c>
 800ffa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d015      	beq.n	800ffd4 <__gethex+0x330>
 800ffa8:	2b03      	cmp	r3, #3
 800ffaa:	d017      	beq.n	800ffdc <__gethex+0x338>
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d109      	bne.n	800ffc4 <__gethex+0x320>
 800ffb0:	f019 0f02 	tst.w	r9, #2
 800ffb4:	d006      	beq.n	800ffc4 <__gethex+0x320>
 800ffb6:	f8da 3000 	ldr.w	r3, [sl]
 800ffba:	ea49 0903 	orr.w	r9, r9, r3
 800ffbe:	f019 0f01 	tst.w	r9, #1
 800ffc2:	d10e      	bne.n	800ffe2 <__gethex+0x33e>
 800ffc4:	f045 0510 	orr.w	r5, r5, #16
 800ffc8:	e032      	b.n	8010030 <__gethex+0x38c>
 800ffca:	f04f 0901 	mov.w	r9, #1
 800ffce:	e7d1      	b.n	800ff74 <__gethex+0x2d0>
 800ffd0:	2501      	movs	r5, #1
 800ffd2:	e7e2      	b.n	800ff9a <__gethex+0x2f6>
 800ffd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffd6:	f1c3 0301 	rsb	r3, r3, #1
 800ffda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ffdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d0f0      	beq.n	800ffc4 <__gethex+0x320>
 800ffe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ffe6:	f104 0314 	add.w	r3, r4, #20
 800ffea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ffee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fff2:	f04f 0c00 	mov.w	ip, #0
 800fff6:	4618      	mov	r0, r3
 800fff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fffc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010000:	d01b      	beq.n	801003a <__gethex+0x396>
 8010002:	3201      	adds	r2, #1
 8010004:	6002      	str	r2, [r0, #0]
 8010006:	2d02      	cmp	r5, #2
 8010008:	f104 0314 	add.w	r3, r4, #20
 801000c:	d13c      	bne.n	8010088 <__gethex+0x3e4>
 801000e:	f8d8 2000 	ldr.w	r2, [r8]
 8010012:	3a01      	subs	r2, #1
 8010014:	42b2      	cmp	r2, r6
 8010016:	d109      	bne.n	801002c <__gethex+0x388>
 8010018:	1171      	asrs	r1, r6, #5
 801001a:	2201      	movs	r2, #1
 801001c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010020:	f006 061f 	and.w	r6, r6, #31
 8010024:	fa02 f606 	lsl.w	r6, r2, r6
 8010028:	421e      	tst	r6, r3
 801002a:	d13a      	bne.n	80100a2 <__gethex+0x3fe>
 801002c:	f045 0520 	orr.w	r5, r5, #32
 8010030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010032:	601c      	str	r4, [r3, #0]
 8010034:	9b02      	ldr	r3, [sp, #8]
 8010036:	601f      	str	r7, [r3, #0]
 8010038:	e6b0      	b.n	800fd9c <__gethex+0xf8>
 801003a:	4299      	cmp	r1, r3
 801003c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010040:	d8d9      	bhi.n	800fff6 <__gethex+0x352>
 8010042:	68a3      	ldr	r3, [r4, #8]
 8010044:	459b      	cmp	fp, r3
 8010046:	db17      	blt.n	8010078 <__gethex+0x3d4>
 8010048:	6861      	ldr	r1, [r4, #4]
 801004a:	9801      	ldr	r0, [sp, #4]
 801004c:	3101      	adds	r1, #1
 801004e:	f7fd fca5 	bl	800d99c <_Balloc>
 8010052:	4681      	mov	r9, r0
 8010054:	b918      	cbnz	r0, 801005e <__gethex+0x3ba>
 8010056:	4b1a      	ldr	r3, [pc, #104]	@ (80100c0 <__gethex+0x41c>)
 8010058:	4602      	mov	r2, r0
 801005a:	2184      	movs	r1, #132	@ 0x84
 801005c:	e6c5      	b.n	800fdea <__gethex+0x146>
 801005e:	6922      	ldr	r2, [r4, #16]
 8010060:	3202      	adds	r2, #2
 8010062:	f104 010c 	add.w	r1, r4, #12
 8010066:	0092      	lsls	r2, r2, #2
 8010068:	300c      	adds	r0, #12
 801006a:	f7fc fde2 	bl	800cc32 <memcpy>
 801006e:	4621      	mov	r1, r4
 8010070:	9801      	ldr	r0, [sp, #4]
 8010072:	f7fd fcd3 	bl	800da1c <_Bfree>
 8010076:	464c      	mov	r4, r9
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	1c5a      	adds	r2, r3, #1
 801007c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010080:	6122      	str	r2, [r4, #16]
 8010082:	2201      	movs	r2, #1
 8010084:	615a      	str	r2, [r3, #20]
 8010086:	e7be      	b.n	8010006 <__gethex+0x362>
 8010088:	6922      	ldr	r2, [r4, #16]
 801008a:	455a      	cmp	r2, fp
 801008c:	dd0b      	ble.n	80100a6 <__gethex+0x402>
 801008e:	2101      	movs	r1, #1
 8010090:	4620      	mov	r0, r4
 8010092:	f7ff fd9f 	bl	800fbd4 <rshift>
 8010096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801009a:	3701      	adds	r7, #1
 801009c:	42bb      	cmp	r3, r7
 801009e:	f6ff aee0 	blt.w	800fe62 <__gethex+0x1be>
 80100a2:	2501      	movs	r5, #1
 80100a4:	e7c2      	b.n	801002c <__gethex+0x388>
 80100a6:	f016 061f 	ands.w	r6, r6, #31
 80100aa:	d0fa      	beq.n	80100a2 <__gethex+0x3fe>
 80100ac:	4453      	add	r3, sl
 80100ae:	f1c6 0620 	rsb	r6, r6, #32
 80100b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80100b6:	f7fd fd63 	bl	800db80 <__hi0bits>
 80100ba:	42b0      	cmp	r0, r6
 80100bc:	dbe7      	blt.n	801008e <__gethex+0x3ea>
 80100be:	e7f0      	b.n	80100a2 <__gethex+0x3fe>
 80100c0:	0801242f 	.word	0x0801242f

080100c4 <L_shift>:
 80100c4:	f1c2 0208 	rsb	r2, r2, #8
 80100c8:	0092      	lsls	r2, r2, #2
 80100ca:	b570      	push	{r4, r5, r6, lr}
 80100cc:	f1c2 0620 	rsb	r6, r2, #32
 80100d0:	6843      	ldr	r3, [r0, #4]
 80100d2:	6804      	ldr	r4, [r0, #0]
 80100d4:	fa03 f506 	lsl.w	r5, r3, r6
 80100d8:	432c      	orrs	r4, r5
 80100da:	40d3      	lsrs	r3, r2
 80100dc:	6004      	str	r4, [r0, #0]
 80100de:	f840 3f04 	str.w	r3, [r0, #4]!
 80100e2:	4288      	cmp	r0, r1
 80100e4:	d3f4      	bcc.n	80100d0 <L_shift+0xc>
 80100e6:	bd70      	pop	{r4, r5, r6, pc}

080100e8 <__match>:
 80100e8:	b530      	push	{r4, r5, lr}
 80100ea:	6803      	ldr	r3, [r0, #0]
 80100ec:	3301      	adds	r3, #1
 80100ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100f2:	b914      	cbnz	r4, 80100fa <__match+0x12>
 80100f4:	6003      	str	r3, [r0, #0]
 80100f6:	2001      	movs	r0, #1
 80100f8:	bd30      	pop	{r4, r5, pc}
 80100fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010102:	2d19      	cmp	r5, #25
 8010104:	bf98      	it	ls
 8010106:	3220      	addls	r2, #32
 8010108:	42a2      	cmp	r2, r4
 801010a:	d0f0      	beq.n	80100ee <__match+0x6>
 801010c:	2000      	movs	r0, #0
 801010e:	e7f3      	b.n	80100f8 <__match+0x10>

08010110 <__hexnan>:
 8010110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	680b      	ldr	r3, [r1, #0]
 8010116:	6801      	ldr	r1, [r0, #0]
 8010118:	115e      	asrs	r6, r3, #5
 801011a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801011e:	f013 031f 	ands.w	r3, r3, #31
 8010122:	b087      	sub	sp, #28
 8010124:	bf18      	it	ne
 8010126:	3604      	addne	r6, #4
 8010128:	2500      	movs	r5, #0
 801012a:	1f37      	subs	r7, r6, #4
 801012c:	4682      	mov	sl, r0
 801012e:	4690      	mov	r8, r2
 8010130:	9301      	str	r3, [sp, #4]
 8010132:	f846 5c04 	str.w	r5, [r6, #-4]
 8010136:	46b9      	mov	r9, r7
 8010138:	463c      	mov	r4, r7
 801013a:	9502      	str	r5, [sp, #8]
 801013c:	46ab      	mov	fp, r5
 801013e:	784a      	ldrb	r2, [r1, #1]
 8010140:	1c4b      	adds	r3, r1, #1
 8010142:	9303      	str	r3, [sp, #12]
 8010144:	b342      	cbz	r2, 8010198 <__hexnan+0x88>
 8010146:	4610      	mov	r0, r2
 8010148:	9105      	str	r1, [sp, #20]
 801014a:	9204      	str	r2, [sp, #16]
 801014c:	f7ff fd94 	bl	800fc78 <__hexdig_fun>
 8010150:	2800      	cmp	r0, #0
 8010152:	d151      	bne.n	80101f8 <__hexnan+0xe8>
 8010154:	9a04      	ldr	r2, [sp, #16]
 8010156:	9905      	ldr	r1, [sp, #20]
 8010158:	2a20      	cmp	r2, #32
 801015a:	d818      	bhi.n	801018e <__hexnan+0x7e>
 801015c:	9b02      	ldr	r3, [sp, #8]
 801015e:	459b      	cmp	fp, r3
 8010160:	dd13      	ble.n	801018a <__hexnan+0x7a>
 8010162:	454c      	cmp	r4, r9
 8010164:	d206      	bcs.n	8010174 <__hexnan+0x64>
 8010166:	2d07      	cmp	r5, #7
 8010168:	dc04      	bgt.n	8010174 <__hexnan+0x64>
 801016a:	462a      	mov	r2, r5
 801016c:	4649      	mov	r1, r9
 801016e:	4620      	mov	r0, r4
 8010170:	f7ff ffa8 	bl	80100c4 <L_shift>
 8010174:	4544      	cmp	r4, r8
 8010176:	d952      	bls.n	801021e <__hexnan+0x10e>
 8010178:	2300      	movs	r3, #0
 801017a:	f1a4 0904 	sub.w	r9, r4, #4
 801017e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010182:	f8cd b008 	str.w	fp, [sp, #8]
 8010186:	464c      	mov	r4, r9
 8010188:	461d      	mov	r5, r3
 801018a:	9903      	ldr	r1, [sp, #12]
 801018c:	e7d7      	b.n	801013e <__hexnan+0x2e>
 801018e:	2a29      	cmp	r2, #41	@ 0x29
 8010190:	d157      	bne.n	8010242 <__hexnan+0x132>
 8010192:	3102      	adds	r1, #2
 8010194:	f8ca 1000 	str.w	r1, [sl]
 8010198:	f1bb 0f00 	cmp.w	fp, #0
 801019c:	d051      	beq.n	8010242 <__hexnan+0x132>
 801019e:	454c      	cmp	r4, r9
 80101a0:	d206      	bcs.n	80101b0 <__hexnan+0xa0>
 80101a2:	2d07      	cmp	r5, #7
 80101a4:	dc04      	bgt.n	80101b0 <__hexnan+0xa0>
 80101a6:	462a      	mov	r2, r5
 80101a8:	4649      	mov	r1, r9
 80101aa:	4620      	mov	r0, r4
 80101ac:	f7ff ff8a 	bl	80100c4 <L_shift>
 80101b0:	4544      	cmp	r4, r8
 80101b2:	d936      	bls.n	8010222 <__hexnan+0x112>
 80101b4:	f1a8 0204 	sub.w	r2, r8, #4
 80101b8:	4623      	mov	r3, r4
 80101ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80101be:	f842 1f04 	str.w	r1, [r2, #4]!
 80101c2:	429f      	cmp	r7, r3
 80101c4:	d2f9      	bcs.n	80101ba <__hexnan+0xaa>
 80101c6:	1b3b      	subs	r3, r7, r4
 80101c8:	f023 0303 	bic.w	r3, r3, #3
 80101cc:	3304      	adds	r3, #4
 80101ce:	3401      	adds	r4, #1
 80101d0:	3e03      	subs	r6, #3
 80101d2:	42b4      	cmp	r4, r6
 80101d4:	bf88      	it	hi
 80101d6:	2304      	movhi	r3, #4
 80101d8:	4443      	add	r3, r8
 80101da:	2200      	movs	r2, #0
 80101dc:	f843 2b04 	str.w	r2, [r3], #4
 80101e0:	429f      	cmp	r7, r3
 80101e2:	d2fb      	bcs.n	80101dc <__hexnan+0xcc>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	b91b      	cbnz	r3, 80101f0 <__hexnan+0xe0>
 80101e8:	4547      	cmp	r7, r8
 80101ea:	d128      	bne.n	801023e <__hexnan+0x12e>
 80101ec:	2301      	movs	r3, #1
 80101ee:	603b      	str	r3, [r7, #0]
 80101f0:	2005      	movs	r0, #5
 80101f2:	b007      	add	sp, #28
 80101f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f8:	3501      	adds	r5, #1
 80101fa:	2d08      	cmp	r5, #8
 80101fc:	f10b 0b01 	add.w	fp, fp, #1
 8010200:	dd06      	ble.n	8010210 <__hexnan+0x100>
 8010202:	4544      	cmp	r4, r8
 8010204:	d9c1      	bls.n	801018a <__hexnan+0x7a>
 8010206:	2300      	movs	r3, #0
 8010208:	f844 3c04 	str.w	r3, [r4, #-4]
 801020c:	2501      	movs	r5, #1
 801020e:	3c04      	subs	r4, #4
 8010210:	6822      	ldr	r2, [r4, #0]
 8010212:	f000 000f 	and.w	r0, r0, #15
 8010216:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801021a:	6020      	str	r0, [r4, #0]
 801021c:	e7b5      	b.n	801018a <__hexnan+0x7a>
 801021e:	2508      	movs	r5, #8
 8010220:	e7b3      	b.n	801018a <__hexnan+0x7a>
 8010222:	9b01      	ldr	r3, [sp, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d0dd      	beq.n	80101e4 <__hexnan+0xd4>
 8010228:	f1c3 0320 	rsb	r3, r3, #32
 801022c:	f04f 32ff 	mov.w	r2, #4294967295
 8010230:	40da      	lsrs	r2, r3
 8010232:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010236:	4013      	ands	r3, r2
 8010238:	f846 3c04 	str.w	r3, [r6, #-4]
 801023c:	e7d2      	b.n	80101e4 <__hexnan+0xd4>
 801023e:	3f04      	subs	r7, #4
 8010240:	e7d0      	b.n	80101e4 <__hexnan+0xd4>
 8010242:	2004      	movs	r0, #4
 8010244:	e7d5      	b.n	80101f2 <__hexnan+0xe2>

08010246 <__ascii_mbtowc>:
 8010246:	b082      	sub	sp, #8
 8010248:	b901      	cbnz	r1, 801024c <__ascii_mbtowc+0x6>
 801024a:	a901      	add	r1, sp, #4
 801024c:	b142      	cbz	r2, 8010260 <__ascii_mbtowc+0x1a>
 801024e:	b14b      	cbz	r3, 8010264 <__ascii_mbtowc+0x1e>
 8010250:	7813      	ldrb	r3, [r2, #0]
 8010252:	600b      	str	r3, [r1, #0]
 8010254:	7812      	ldrb	r2, [r2, #0]
 8010256:	1e10      	subs	r0, r2, #0
 8010258:	bf18      	it	ne
 801025a:	2001      	movne	r0, #1
 801025c:	b002      	add	sp, #8
 801025e:	4770      	bx	lr
 8010260:	4610      	mov	r0, r2
 8010262:	e7fb      	b.n	801025c <__ascii_mbtowc+0x16>
 8010264:	f06f 0001 	mvn.w	r0, #1
 8010268:	e7f8      	b.n	801025c <__ascii_mbtowc+0x16>

0801026a <_realloc_r>:
 801026a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026e:	4680      	mov	r8, r0
 8010270:	4615      	mov	r5, r2
 8010272:	460c      	mov	r4, r1
 8010274:	b921      	cbnz	r1, 8010280 <_realloc_r+0x16>
 8010276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801027a:	4611      	mov	r1, r2
 801027c:	f7fb bba6 	b.w	800b9cc <_malloc_r>
 8010280:	b92a      	cbnz	r2, 801028e <_realloc_r+0x24>
 8010282:	f7fd fb39 	bl	800d8f8 <_free_r>
 8010286:	2400      	movs	r4, #0
 8010288:	4620      	mov	r0, r4
 801028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801028e:	f000 f8b2 	bl	80103f6 <_malloc_usable_size_r>
 8010292:	4285      	cmp	r5, r0
 8010294:	4606      	mov	r6, r0
 8010296:	d802      	bhi.n	801029e <_realloc_r+0x34>
 8010298:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801029c:	d8f4      	bhi.n	8010288 <_realloc_r+0x1e>
 801029e:	4629      	mov	r1, r5
 80102a0:	4640      	mov	r0, r8
 80102a2:	f7fb fb93 	bl	800b9cc <_malloc_r>
 80102a6:	4607      	mov	r7, r0
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d0ec      	beq.n	8010286 <_realloc_r+0x1c>
 80102ac:	42b5      	cmp	r5, r6
 80102ae:	462a      	mov	r2, r5
 80102b0:	4621      	mov	r1, r4
 80102b2:	bf28      	it	cs
 80102b4:	4632      	movcs	r2, r6
 80102b6:	f7fc fcbc 	bl	800cc32 <memcpy>
 80102ba:	4621      	mov	r1, r4
 80102bc:	4640      	mov	r0, r8
 80102be:	f7fd fb1b 	bl	800d8f8 <_free_r>
 80102c2:	463c      	mov	r4, r7
 80102c4:	e7e0      	b.n	8010288 <_realloc_r+0x1e>
	...

080102c8 <_strtoul_l.constprop.0>:
 80102c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102cc:	4e34      	ldr	r6, [pc, #208]	@ (80103a0 <_strtoul_l.constprop.0+0xd8>)
 80102ce:	4686      	mov	lr, r0
 80102d0:	460d      	mov	r5, r1
 80102d2:	4628      	mov	r0, r5
 80102d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102d8:	5d37      	ldrb	r7, [r6, r4]
 80102da:	f017 0708 	ands.w	r7, r7, #8
 80102de:	d1f8      	bne.n	80102d2 <_strtoul_l.constprop.0+0xa>
 80102e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80102e2:	d12f      	bne.n	8010344 <_strtoul_l.constprop.0+0x7c>
 80102e4:	782c      	ldrb	r4, [r5, #0]
 80102e6:	2701      	movs	r7, #1
 80102e8:	1c85      	adds	r5, r0, #2
 80102ea:	f033 0010 	bics.w	r0, r3, #16
 80102ee:	d109      	bne.n	8010304 <_strtoul_l.constprop.0+0x3c>
 80102f0:	2c30      	cmp	r4, #48	@ 0x30
 80102f2:	d12c      	bne.n	801034e <_strtoul_l.constprop.0+0x86>
 80102f4:	7828      	ldrb	r0, [r5, #0]
 80102f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80102fa:	2858      	cmp	r0, #88	@ 0x58
 80102fc:	d127      	bne.n	801034e <_strtoul_l.constprop.0+0x86>
 80102fe:	786c      	ldrb	r4, [r5, #1]
 8010300:	2310      	movs	r3, #16
 8010302:	3502      	adds	r5, #2
 8010304:	f04f 38ff 	mov.w	r8, #4294967295
 8010308:	2600      	movs	r6, #0
 801030a:	fbb8 f8f3 	udiv	r8, r8, r3
 801030e:	fb03 f908 	mul.w	r9, r3, r8
 8010312:	ea6f 0909 	mvn.w	r9, r9
 8010316:	4630      	mov	r0, r6
 8010318:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801031c:	f1bc 0f09 	cmp.w	ip, #9
 8010320:	d81c      	bhi.n	801035c <_strtoul_l.constprop.0+0x94>
 8010322:	4664      	mov	r4, ip
 8010324:	42a3      	cmp	r3, r4
 8010326:	dd2a      	ble.n	801037e <_strtoul_l.constprop.0+0xb6>
 8010328:	f1b6 3fff 	cmp.w	r6, #4294967295
 801032c:	d007      	beq.n	801033e <_strtoul_l.constprop.0+0x76>
 801032e:	4580      	cmp	r8, r0
 8010330:	d322      	bcc.n	8010378 <_strtoul_l.constprop.0+0xb0>
 8010332:	d101      	bne.n	8010338 <_strtoul_l.constprop.0+0x70>
 8010334:	45a1      	cmp	r9, r4
 8010336:	db1f      	blt.n	8010378 <_strtoul_l.constprop.0+0xb0>
 8010338:	fb00 4003 	mla	r0, r0, r3, r4
 801033c:	2601      	movs	r6, #1
 801033e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010342:	e7e9      	b.n	8010318 <_strtoul_l.constprop.0+0x50>
 8010344:	2c2b      	cmp	r4, #43	@ 0x2b
 8010346:	bf04      	itt	eq
 8010348:	782c      	ldrbeq	r4, [r5, #0]
 801034a:	1c85      	addeq	r5, r0, #2
 801034c:	e7cd      	b.n	80102ea <_strtoul_l.constprop.0+0x22>
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1d8      	bne.n	8010304 <_strtoul_l.constprop.0+0x3c>
 8010352:	2c30      	cmp	r4, #48	@ 0x30
 8010354:	bf0c      	ite	eq
 8010356:	2308      	moveq	r3, #8
 8010358:	230a      	movne	r3, #10
 801035a:	e7d3      	b.n	8010304 <_strtoul_l.constprop.0+0x3c>
 801035c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010360:	f1bc 0f19 	cmp.w	ip, #25
 8010364:	d801      	bhi.n	801036a <_strtoul_l.constprop.0+0xa2>
 8010366:	3c37      	subs	r4, #55	@ 0x37
 8010368:	e7dc      	b.n	8010324 <_strtoul_l.constprop.0+0x5c>
 801036a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801036e:	f1bc 0f19 	cmp.w	ip, #25
 8010372:	d804      	bhi.n	801037e <_strtoul_l.constprop.0+0xb6>
 8010374:	3c57      	subs	r4, #87	@ 0x57
 8010376:	e7d5      	b.n	8010324 <_strtoul_l.constprop.0+0x5c>
 8010378:	f04f 36ff 	mov.w	r6, #4294967295
 801037c:	e7df      	b.n	801033e <_strtoul_l.constprop.0+0x76>
 801037e:	1c73      	adds	r3, r6, #1
 8010380:	d106      	bne.n	8010390 <_strtoul_l.constprop.0+0xc8>
 8010382:	2322      	movs	r3, #34	@ 0x22
 8010384:	f8ce 3000 	str.w	r3, [lr]
 8010388:	4630      	mov	r0, r6
 801038a:	b932      	cbnz	r2, 801039a <_strtoul_l.constprop.0+0xd2>
 801038c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010390:	b107      	cbz	r7, 8010394 <_strtoul_l.constprop.0+0xcc>
 8010392:	4240      	negs	r0, r0
 8010394:	2a00      	cmp	r2, #0
 8010396:	d0f9      	beq.n	801038c <_strtoul_l.constprop.0+0xc4>
 8010398:	b106      	cbz	r6, 801039c <_strtoul_l.constprop.0+0xd4>
 801039a:	1e69      	subs	r1, r5, #1
 801039c:	6011      	str	r1, [r2, #0]
 801039e:	e7f5      	b.n	801038c <_strtoul_l.constprop.0+0xc4>
 80103a0:	080125f1 	.word	0x080125f1

080103a4 <_strtoul_r>:
 80103a4:	f7ff bf90 	b.w	80102c8 <_strtoul_l.constprop.0>

080103a8 <__ascii_wctomb>:
 80103a8:	4603      	mov	r3, r0
 80103aa:	4608      	mov	r0, r1
 80103ac:	b141      	cbz	r1, 80103c0 <__ascii_wctomb+0x18>
 80103ae:	2aff      	cmp	r2, #255	@ 0xff
 80103b0:	d904      	bls.n	80103bc <__ascii_wctomb+0x14>
 80103b2:	228a      	movs	r2, #138	@ 0x8a
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ba:	4770      	bx	lr
 80103bc:	700a      	strb	r2, [r1, #0]
 80103be:	2001      	movs	r0, #1
 80103c0:	4770      	bx	lr
	...

080103c4 <fiprintf>:
 80103c4:	b40e      	push	{r1, r2, r3}
 80103c6:	b503      	push	{r0, r1, lr}
 80103c8:	4601      	mov	r1, r0
 80103ca:	ab03      	add	r3, sp, #12
 80103cc:	4805      	ldr	r0, [pc, #20]	@ (80103e4 <fiprintf+0x20>)
 80103ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80103d2:	6800      	ldr	r0, [r0, #0]
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	f000 f83f 	bl	8010458 <_vfiprintf_r>
 80103da:	b002      	add	sp, #8
 80103dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80103e0:	b003      	add	sp, #12
 80103e2:	4770      	bx	lr
 80103e4:	20000044 	.word	0x20000044

080103e8 <abort>:
 80103e8:	b508      	push	{r3, lr}
 80103ea:	2006      	movs	r0, #6
 80103ec:	f000 fa08 	bl	8010800 <raise>
 80103f0:	2001      	movs	r0, #1
 80103f2:	f7f5 fec3 	bl	800617c <_exit>

080103f6 <_malloc_usable_size_r>:
 80103f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103fa:	1f18      	subs	r0, r3, #4
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	bfbc      	itt	lt
 8010400:	580b      	ldrlt	r3, [r1, r0]
 8010402:	18c0      	addlt	r0, r0, r3
 8010404:	4770      	bx	lr

08010406 <__sfputc_r>:
 8010406:	6893      	ldr	r3, [r2, #8]
 8010408:	3b01      	subs	r3, #1
 801040a:	2b00      	cmp	r3, #0
 801040c:	b410      	push	{r4}
 801040e:	6093      	str	r3, [r2, #8]
 8010410:	da08      	bge.n	8010424 <__sfputc_r+0x1e>
 8010412:	6994      	ldr	r4, [r2, #24]
 8010414:	42a3      	cmp	r3, r4
 8010416:	db01      	blt.n	801041c <__sfputc_r+0x16>
 8010418:	290a      	cmp	r1, #10
 801041a:	d103      	bne.n	8010424 <__sfputc_r+0x1e>
 801041c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010420:	f000 b932 	b.w	8010688 <__swbuf_r>
 8010424:	6813      	ldr	r3, [r2, #0]
 8010426:	1c58      	adds	r0, r3, #1
 8010428:	6010      	str	r0, [r2, #0]
 801042a:	7019      	strb	r1, [r3, #0]
 801042c:	4608      	mov	r0, r1
 801042e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010432:	4770      	bx	lr

08010434 <__sfputs_r>:
 8010434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010436:	4606      	mov	r6, r0
 8010438:	460f      	mov	r7, r1
 801043a:	4614      	mov	r4, r2
 801043c:	18d5      	adds	r5, r2, r3
 801043e:	42ac      	cmp	r4, r5
 8010440:	d101      	bne.n	8010446 <__sfputs_r+0x12>
 8010442:	2000      	movs	r0, #0
 8010444:	e007      	b.n	8010456 <__sfputs_r+0x22>
 8010446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801044a:	463a      	mov	r2, r7
 801044c:	4630      	mov	r0, r6
 801044e:	f7ff ffda 	bl	8010406 <__sfputc_r>
 8010452:	1c43      	adds	r3, r0, #1
 8010454:	d1f3      	bne.n	801043e <__sfputs_r+0xa>
 8010456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010458 <_vfiprintf_r>:
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	460d      	mov	r5, r1
 801045e:	b09d      	sub	sp, #116	@ 0x74
 8010460:	4614      	mov	r4, r2
 8010462:	4698      	mov	r8, r3
 8010464:	4606      	mov	r6, r0
 8010466:	b118      	cbz	r0, 8010470 <_vfiprintf_r+0x18>
 8010468:	6a03      	ldr	r3, [r0, #32]
 801046a:	b90b      	cbnz	r3, 8010470 <_vfiprintf_r+0x18>
 801046c:	f7fc fa32 	bl	800c8d4 <__sinit>
 8010470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010472:	07d9      	lsls	r1, r3, #31
 8010474:	d405      	bmi.n	8010482 <_vfiprintf_r+0x2a>
 8010476:	89ab      	ldrh	r3, [r5, #12]
 8010478:	059a      	lsls	r2, r3, #22
 801047a:	d402      	bmi.n	8010482 <_vfiprintf_r+0x2a>
 801047c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801047e:	f7fc fbd6 	bl	800cc2e <__retarget_lock_acquire_recursive>
 8010482:	89ab      	ldrh	r3, [r5, #12]
 8010484:	071b      	lsls	r3, r3, #28
 8010486:	d501      	bpl.n	801048c <_vfiprintf_r+0x34>
 8010488:	692b      	ldr	r3, [r5, #16]
 801048a:	b99b      	cbnz	r3, 80104b4 <_vfiprintf_r+0x5c>
 801048c:	4629      	mov	r1, r5
 801048e:	4630      	mov	r0, r6
 8010490:	f000 f938 	bl	8010704 <__swsetup_r>
 8010494:	b170      	cbz	r0, 80104b4 <_vfiprintf_r+0x5c>
 8010496:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010498:	07dc      	lsls	r4, r3, #31
 801049a:	d504      	bpl.n	80104a6 <_vfiprintf_r+0x4e>
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
 80104a0:	b01d      	add	sp, #116	@ 0x74
 80104a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a6:	89ab      	ldrh	r3, [r5, #12]
 80104a8:	0598      	lsls	r0, r3, #22
 80104aa:	d4f7      	bmi.n	801049c <_vfiprintf_r+0x44>
 80104ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ae:	f7fc fbbf 	bl	800cc30 <__retarget_lock_release_recursive>
 80104b2:	e7f3      	b.n	801049c <_vfiprintf_r+0x44>
 80104b4:	2300      	movs	r3, #0
 80104b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80104b8:	2320      	movs	r3, #32
 80104ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104be:	f8cd 800c 	str.w	r8, [sp, #12]
 80104c2:	2330      	movs	r3, #48	@ 0x30
 80104c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010674 <_vfiprintf_r+0x21c>
 80104c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104cc:	f04f 0901 	mov.w	r9, #1
 80104d0:	4623      	mov	r3, r4
 80104d2:	469a      	mov	sl, r3
 80104d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d8:	b10a      	cbz	r2, 80104de <_vfiprintf_r+0x86>
 80104da:	2a25      	cmp	r2, #37	@ 0x25
 80104dc:	d1f9      	bne.n	80104d2 <_vfiprintf_r+0x7a>
 80104de:	ebba 0b04 	subs.w	fp, sl, r4
 80104e2:	d00b      	beq.n	80104fc <_vfiprintf_r+0xa4>
 80104e4:	465b      	mov	r3, fp
 80104e6:	4622      	mov	r2, r4
 80104e8:	4629      	mov	r1, r5
 80104ea:	4630      	mov	r0, r6
 80104ec:	f7ff ffa2 	bl	8010434 <__sfputs_r>
 80104f0:	3001      	adds	r0, #1
 80104f2:	f000 80a7 	beq.w	8010644 <_vfiprintf_r+0x1ec>
 80104f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104f8:	445a      	add	r2, fp
 80104fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80104fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 809f 	beq.w	8010644 <_vfiprintf_r+0x1ec>
 8010506:	2300      	movs	r3, #0
 8010508:	f04f 32ff 	mov.w	r2, #4294967295
 801050c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010510:	f10a 0a01 	add.w	sl, sl, #1
 8010514:	9304      	str	r3, [sp, #16]
 8010516:	9307      	str	r3, [sp, #28]
 8010518:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801051c:	931a      	str	r3, [sp, #104]	@ 0x68
 801051e:	4654      	mov	r4, sl
 8010520:	2205      	movs	r2, #5
 8010522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010526:	4853      	ldr	r0, [pc, #332]	@ (8010674 <_vfiprintf_r+0x21c>)
 8010528:	f7ef fe72 	bl	8000210 <memchr>
 801052c:	9a04      	ldr	r2, [sp, #16]
 801052e:	b9d8      	cbnz	r0, 8010568 <_vfiprintf_r+0x110>
 8010530:	06d1      	lsls	r1, r2, #27
 8010532:	bf44      	itt	mi
 8010534:	2320      	movmi	r3, #32
 8010536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801053a:	0713      	lsls	r3, r2, #28
 801053c:	bf44      	itt	mi
 801053e:	232b      	movmi	r3, #43	@ 0x2b
 8010540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010544:	f89a 3000 	ldrb.w	r3, [sl]
 8010548:	2b2a      	cmp	r3, #42	@ 0x2a
 801054a:	d015      	beq.n	8010578 <_vfiprintf_r+0x120>
 801054c:	9a07      	ldr	r2, [sp, #28]
 801054e:	4654      	mov	r4, sl
 8010550:	2000      	movs	r0, #0
 8010552:	f04f 0c0a 	mov.w	ip, #10
 8010556:	4621      	mov	r1, r4
 8010558:	f811 3b01 	ldrb.w	r3, [r1], #1
 801055c:	3b30      	subs	r3, #48	@ 0x30
 801055e:	2b09      	cmp	r3, #9
 8010560:	d94b      	bls.n	80105fa <_vfiprintf_r+0x1a2>
 8010562:	b1b0      	cbz	r0, 8010592 <_vfiprintf_r+0x13a>
 8010564:	9207      	str	r2, [sp, #28]
 8010566:	e014      	b.n	8010592 <_vfiprintf_r+0x13a>
 8010568:	eba0 0308 	sub.w	r3, r0, r8
 801056c:	fa09 f303 	lsl.w	r3, r9, r3
 8010570:	4313      	orrs	r3, r2
 8010572:	9304      	str	r3, [sp, #16]
 8010574:	46a2      	mov	sl, r4
 8010576:	e7d2      	b.n	801051e <_vfiprintf_r+0xc6>
 8010578:	9b03      	ldr	r3, [sp, #12]
 801057a:	1d19      	adds	r1, r3, #4
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	9103      	str	r1, [sp, #12]
 8010580:	2b00      	cmp	r3, #0
 8010582:	bfbb      	ittet	lt
 8010584:	425b      	neglt	r3, r3
 8010586:	f042 0202 	orrlt.w	r2, r2, #2
 801058a:	9307      	strge	r3, [sp, #28]
 801058c:	9307      	strlt	r3, [sp, #28]
 801058e:	bfb8      	it	lt
 8010590:	9204      	strlt	r2, [sp, #16]
 8010592:	7823      	ldrb	r3, [r4, #0]
 8010594:	2b2e      	cmp	r3, #46	@ 0x2e
 8010596:	d10a      	bne.n	80105ae <_vfiprintf_r+0x156>
 8010598:	7863      	ldrb	r3, [r4, #1]
 801059a:	2b2a      	cmp	r3, #42	@ 0x2a
 801059c:	d132      	bne.n	8010604 <_vfiprintf_r+0x1ac>
 801059e:	9b03      	ldr	r3, [sp, #12]
 80105a0:	1d1a      	adds	r2, r3, #4
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	9203      	str	r2, [sp, #12]
 80105a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105aa:	3402      	adds	r4, #2
 80105ac:	9305      	str	r3, [sp, #20]
 80105ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010684 <_vfiprintf_r+0x22c>
 80105b2:	7821      	ldrb	r1, [r4, #0]
 80105b4:	2203      	movs	r2, #3
 80105b6:	4650      	mov	r0, sl
 80105b8:	f7ef fe2a 	bl	8000210 <memchr>
 80105bc:	b138      	cbz	r0, 80105ce <_vfiprintf_r+0x176>
 80105be:	9b04      	ldr	r3, [sp, #16]
 80105c0:	eba0 000a 	sub.w	r0, r0, sl
 80105c4:	2240      	movs	r2, #64	@ 0x40
 80105c6:	4082      	lsls	r2, r0
 80105c8:	4313      	orrs	r3, r2
 80105ca:	3401      	adds	r4, #1
 80105cc:	9304      	str	r3, [sp, #16]
 80105ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105d2:	4829      	ldr	r0, [pc, #164]	@ (8010678 <_vfiprintf_r+0x220>)
 80105d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105d8:	2206      	movs	r2, #6
 80105da:	f7ef fe19 	bl	8000210 <memchr>
 80105de:	2800      	cmp	r0, #0
 80105e0:	d03f      	beq.n	8010662 <_vfiprintf_r+0x20a>
 80105e2:	4b26      	ldr	r3, [pc, #152]	@ (801067c <_vfiprintf_r+0x224>)
 80105e4:	bb1b      	cbnz	r3, 801062e <_vfiprintf_r+0x1d6>
 80105e6:	9b03      	ldr	r3, [sp, #12]
 80105e8:	3307      	adds	r3, #7
 80105ea:	f023 0307 	bic.w	r3, r3, #7
 80105ee:	3308      	adds	r3, #8
 80105f0:	9303      	str	r3, [sp, #12]
 80105f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105f4:	443b      	add	r3, r7
 80105f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105f8:	e76a      	b.n	80104d0 <_vfiprintf_r+0x78>
 80105fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80105fe:	460c      	mov	r4, r1
 8010600:	2001      	movs	r0, #1
 8010602:	e7a8      	b.n	8010556 <_vfiprintf_r+0xfe>
 8010604:	2300      	movs	r3, #0
 8010606:	3401      	adds	r4, #1
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	4619      	mov	r1, r3
 801060c:	f04f 0c0a 	mov.w	ip, #10
 8010610:	4620      	mov	r0, r4
 8010612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010616:	3a30      	subs	r2, #48	@ 0x30
 8010618:	2a09      	cmp	r2, #9
 801061a:	d903      	bls.n	8010624 <_vfiprintf_r+0x1cc>
 801061c:	2b00      	cmp	r3, #0
 801061e:	d0c6      	beq.n	80105ae <_vfiprintf_r+0x156>
 8010620:	9105      	str	r1, [sp, #20]
 8010622:	e7c4      	b.n	80105ae <_vfiprintf_r+0x156>
 8010624:	fb0c 2101 	mla	r1, ip, r1, r2
 8010628:	4604      	mov	r4, r0
 801062a:	2301      	movs	r3, #1
 801062c:	e7f0      	b.n	8010610 <_vfiprintf_r+0x1b8>
 801062e:	ab03      	add	r3, sp, #12
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	462a      	mov	r2, r5
 8010634:	4b12      	ldr	r3, [pc, #72]	@ (8010680 <_vfiprintf_r+0x228>)
 8010636:	a904      	add	r1, sp, #16
 8010638:	4630      	mov	r0, r6
 801063a:	f7fb faf3 	bl	800bc24 <_printf_float>
 801063e:	4607      	mov	r7, r0
 8010640:	1c78      	adds	r0, r7, #1
 8010642:	d1d6      	bne.n	80105f2 <_vfiprintf_r+0x19a>
 8010644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010646:	07d9      	lsls	r1, r3, #31
 8010648:	d405      	bmi.n	8010656 <_vfiprintf_r+0x1fe>
 801064a:	89ab      	ldrh	r3, [r5, #12]
 801064c:	059a      	lsls	r2, r3, #22
 801064e:	d402      	bmi.n	8010656 <_vfiprintf_r+0x1fe>
 8010650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010652:	f7fc faed 	bl	800cc30 <__retarget_lock_release_recursive>
 8010656:	89ab      	ldrh	r3, [r5, #12]
 8010658:	065b      	lsls	r3, r3, #25
 801065a:	f53f af1f 	bmi.w	801049c <_vfiprintf_r+0x44>
 801065e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010660:	e71e      	b.n	80104a0 <_vfiprintf_r+0x48>
 8010662:	ab03      	add	r3, sp, #12
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	462a      	mov	r2, r5
 8010668:	4b05      	ldr	r3, [pc, #20]	@ (8010680 <_vfiprintf_r+0x228>)
 801066a:	a904      	add	r1, sp, #16
 801066c:	4630      	mov	r0, r6
 801066e:	f7fb fd71 	bl	800c154 <_printf_i>
 8010672:	e7e4      	b.n	801063e <_vfiprintf_r+0x1e6>
 8010674:	080126f1 	.word	0x080126f1
 8010678:	080126fb 	.word	0x080126fb
 801067c:	0800bc25 	.word	0x0800bc25
 8010680:	08010435 	.word	0x08010435
 8010684:	080126f7 	.word	0x080126f7

08010688 <__swbuf_r>:
 8010688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068a:	460e      	mov	r6, r1
 801068c:	4614      	mov	r4, r2
 801068e:	4605      	mov	r5, r0
 8010690:	b118      	cbz	r0, 801069a <__swbuf_r+0x12>
 8010692:	6a03      	ldr	r3, [r0, #32]
 8010694:	b90b      	cbnz	r3, 801069a <__swbuf_r+0x12>
 8010696:	f7fc f91d 	bl	800c8d4 <__sinit>
 801069a:	69a3      	ldr	r3, [r4, #24]
 801069c:	60a3      	str	r3, [r4, #8]
 801069e:	89a3      	ldrh	r3, [r4, #12]
 80106a0:	071a      	lsls	r2, r3, #28
 80106a2:	d501      	bpl.n	80106a8 <__swbuf_r+0x20>
 80106a4:	6923      	ldr	r3, [r4, #16]
 80106a6:	b943      	cbnz	r3, 80106ba <__swbuf_r+0x32>
 80106a8:	4621      	mov	r1, r4
 80106aa:	4628      	mov	r0, r5
 80106ac:	f000 f82a 	bl	8010704 <__swsetup_r>
 80106b0:	b118      	cbz	r0, 80106ba <__swbuf_r+0x32>
 80106b2:	f04f 37ff 	mov.w	r7, #4294967295
 80106b6:	4638      	mov	r0, r7
 80106b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	6922      	ldr	r2, [r4, #16]
 80106be:	1a98      	subs	r0, r3, r2
 80106c0:	6963      	ldr	r3, [r4, #20]
 80106c2:	b2f6      	uxtb	r6, r6
 80106c4:	4283      	cmp	r3, r0
 80106c6:	4637      	mov	r7, r6
 80106c8:	dc05      	bgt.n	80106d6 <__swbuf_r+0x4e>
 80106ca:	4621      	mov	r1, r4
 80106cc:	4628      	mov	r0, r5
 80106ce:	f7ff f993 	bl	800f9f8 <_fflush_r>
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d1ed      	bne.n	80106b2 <__swbuf_r+0x2a>
 80106d6:	68a3      	ldr	r3, [r4, #8]
 80106d8:	3b01      	subs	r3, #1
 80106da:	60a3      	str	r3, [r4, #8]
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	6022      	str	r2, [r4, #0]
 80106e2:	701e      	strb	r6, [r3, #0]
 80106e4:	6962      	ldr	r2, [r4, #20]
 80106e6:	1c43      	adds	r3, r0, #1
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d004      	beq.n	80106f6 <__swbuf_r+0x6e>
 80106ec:	89a3      	ldrh	r3, [r4, #12]
 80106ee:	07db      	lsls	r3, r3, #31
 80106f0:	d5e1      	bpl.n	80106b6 <__swbuf_r+0x2e>
 80106f2:	2e0a      	cmp	r6, #10
 80106f4:	d1df      	bne.n	80106b6 <__swbuf_r+0x2e>
 80106f6:	4621      	mov	r1, r4
 80106f8:	4628      	mov	r0, r5
 80106fa:	f7ff f97d 	bl	800f9f8 <_fflush_r>
 80106fe:	2800      	cmp	r0, #0
 8010700:	d0d9      	beq.n	80106b6 <__swbuf_r+0x2e>
 8010702:	e7d6      	b.n	80106b2 <__swbuf_r+0x2a>

08010704 <__swsetup_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4b29      	ldr	r3, [pc, #164]	@ (80107ac <__swsetup_r+0xa8>)
 8010708:	4605      	mov	r5, r0
 801070a:	6818      	ldr	r0, [r3, #0]
 801070c:	460c      	mov	r4, r1
 801070e:	b118      	cbz	r0, 8010718 <__swsetup_r+0x14>
 8010710:	6a03      	ldr	r3, [r0, #32]
 8010712:	b90b      	cbnz	r3, 8010718 <__swsetup_r+0x14>
 8010714:	f7fc f8de 	bl	800c8d4 <__sinit>
 8010718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071c:	0719      	lsls	r1, r3, #28
 801071e:	d422      	bmi.n	8010766 <__swsetup_r+0x62>
 8010720:	06da      	lsls	r2, r3, #27
 8010722:	d407      	bmi.n	8010734 <__swsetup_r+0x30>
 8010724:	2209      	movs	r2, #9
 8010726:	602a      	str	r2, [r5, #0]
 8010728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801072c:	81a3      	strh	r3, [r4, #12]
 801072e:	f04f 30ff 	mov.w	r0, #4294967295
 8010732:	e033      	b.n	801079c <__swsetup_r+0x98>
 8010734:	0758      	lsls	r0, r3, #29
 8010736:	d512      	bpl.n	801075e <__swsetup_r+0x5a>
 8010738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801073a:	b141      	cbz	r1, 801074e <__swsetup_r+0x4a>
 801073c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010740:	4299      	cmp	r1, r3
 8010742:	d002      	beq.n	801074a <__swsetup_r+0x46>
 8010744:	4628      	mov	r0, r5
 8010746:	f7fd f8d7 	bl	800d8f8 <_free_r>
 801074a:	2300      	movs	r3, #0
 801074c:	6363      	str	r3, [r4, #52]	@ 0x34
 801074e:	89a3      	ldrh	r3, [r4, #12]
 8010750:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010754:	81a3      	strh	r3, [r4, #12]
 8010756:	2300      	movs	r3, #0
 8010758:	6063      	str	r3, [r4, #4]
 801075a:	6923      	ldr	r3, [r4, #16]
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	89a3      	ldrh	r3, [r4, #12]
 8010760:	f043 0308 	orr.w	r3, r3, #8
 8010764:	81a3      	strh	r3, [r4, #12]
 8010766:	6923      	ldr	r3, [r4, #16]
 8010768:	b94b      	cbnz	r3, 801077e <__swsetup_r+0x7a>
 801076a:	89a3      	ldrh	r3, [r4, #12]
 801076c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010774:	d003      	beq.n	801077e <__swsetup_r+0x7a>
 8010776:	4621      	mov	r1, r4
 8010778:	4628      	mov	r0, r5
 801077a:	f000 f883 	bl	8010884 <__smakebuf_r>
 801077e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010782:	f013 0201 	ands.w	r2, r3, #1
 8010786:	d00a      	beq.n	801079e <__swsetup_r+0x9a>
 8010788:	2200      	movs	r2, #0
 801078a:	60a2      	str	r2, [r4, #8]
 801078c:	6962      	ldr	r2, [r4, #20]
 801078e:	4252      	negs	r2, r2
 8010790:	61a2      	str	r2, [r4, #24]
 8010792:	6922      	ldr	r2, [r4, #16]
 8010794:	b942      	cbnz	r2, 80107a8 <__swsetup_r+0xa4>
 8010796:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801079a:	d1c5      	bne.n	8010728 <__swsetup_r+0x24>
 801079c:	bd38      	pop	{r3, r4, r5, pc}
 801079e:	0799      	lsls	r1, r3, #30
 80107a0:	bf58      	it	pl
 80107a2:	6962      	ldrpl	r2, [r4, #20]
 80107a4:	60a2      	str	r2, [r4, #8]
 80107a6:	e7f4      	b.n	8010792 <__swsetup_r+0x8e>
 80107a8:	2000      	movs	r0, #0
 80107aa:	e7f7      	b.n	801079c <__swsetup_r+0x98>
 80107ac:	20000044 	.word	0x20000044

080107b0 <_raise_r>:
 80107b0:	291f      	cmp	r1, #31
 80107b2:	b538      	push	{r3, r4, r5, lr}
 80107b4:	4605      	mov	r5, r0
 80107b6:	460c      	mov	r4, r1
 80107b8:	d904      	bls.n	80107c4 <_raise_r+0x14>
 80107ba:	2316      	movs	r3, #22
 80107bc:	6003      	str	r3, [r0, #0]
 80107be:	f04f 30ff 	mov.w	r0, #4294967295
 80107c2:	bd38      	pop	{r3, r4, r5, pc}
 80107c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80107c6:	b112      	cbz	r2, 80107ce <_raise_r+0x1e>
 80107c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107cc:	b94b      	cbnz	r3, 80107e2 <_raise_r+0x32>
 80107ce:	4628      	mov	r0, r5
 80107d0:	f000 f830 	bl	8010834 <_getpid_r>
 80107d4:	4622      	mov	r2, r4
 80107d6:	4601      	mov	r1, r0
 80107d8:	4628      	mov	r0, r5
 80107da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107de:	f000 b817 	b.w	8010810 <_kill_r>
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d00a      	beq.n	80107fc <_raise_r+0x4c>
 80107e6:	1c59      	adds	r1, r3, #1
 80107e8:	d103      	bne.n	80107f2 <_raise_r+0x42>
 80107ea:	2316      	movs	r3, #22
 80107ec:	6003      	str	r3, [r0, #0]
 80107ee:	2001      	movs	r0, #1
 80107f0:	e7e7      	b.n	80107c2 <_raise_r+0x12>
 80107f2:	2100      	movs	r1, #0
 80107f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80107f8:	4620      	mov	r0, r4
 80107fa:	4798      	blx	r3
 80107fc:	2000      	movs	r0, #0
 80107fe:	e7e0      	b.n	80107c2 <_raise_r+0x12>

08010800 <raise>:
 8010800:	4b02      	ldr	r3, [pc, #8]	@ (801080c <raise+0xc>)
 8010802:	4601      	mov	r1, r0
 8010804:	6818      	ldr	r0, [r3, #0]
 8010806:	f7ff bfd3 	b.w	80107b0 <_raise_r>
 801080a:	bf00      	nop
 801080c:	20000044 	.word	0x20000044

08010810 <_kill_r>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4d07      	ldr	r5, [pc, #28]	@ (8010830 <_kill_r+0x20>)
 8010814:	2300      	movs	r3, #0
 8010816:	4604      	mov	r4, r0
 8010818:	4608      	mov	r0, r1
 801081a:	4611      	mov	r1, r2
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	f7f5 fc9d 	bl	800615c <_kill>
 8010822:	1c43      	adds	r3, r0, #1
 8010824:	d102      	bne.n	801082c <_kill_r+0x1c>
 8010826:	682b      	ldr	r3, [r5, #0]
 8010828:	b103      	cbz	r3, 801082c <_kill_r+0x1c>
 801082a:	6023      	str	r3, [r4, #0]
 801082c:	bd38      	pop	{r3, r4, r5, pc}
 801082e:	bf00      	nop
 8010830:	20001974 	.word	0x20001974

08010834 <_getpid_r>:
 8010834:	f7f5 bc8a 	b.w	800614c <_getpid>

08010838 <__swhatbuf_r>:
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	460c      	mov	r4, r1
 801083c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010840:	2900      	cmp	r1, #0
 8010842:	b096      	sub	sp, #88	@ 0x58
 8010844:	4615      	mov	r5, r2
 8010846:	461e      	mov	r6, r3
 8010848:	da0d      	bge.n	8010866 <__swhatbuf_r+0x2e>
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010850:	f04f 0100 	mov.w	r1, #0
 8010854:	bf14      	ite	ne
 8010856:	2340      	movne	r3, #64	@ 0x40
 8010858:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801085c:	2000      	movs	r0, #0
 801085e:	6031      	str	r1, [r6, #0]
 8010860:	602b      	str	r3, [r5, #0]
 8010862:	b016      	add	sp, #88	@ 0x58
 8010864:	bd70      	pop	{r4, r5, r6, pc}
 8010866:	466a      	mov	r2, sp
 8010868:	f000 f848 	bl	80108fc <_fstat_r>
 801086c:	2800      	cmp	r0, #0
 801086e:	dbec      	blt.n	801084a <__swhatbuf_r+0x12>
 8010870:	9901      	ldr	r1, [sp, #4]
 8010872:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010876:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801087a:	4259      	negs	r1, r3
 801087c:	4159      	adcs	r1, r3
 801087e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010882:	e7eb      	b.n	801085c <__swhatbuf_r+0x24>

08010884 <__smakebuf_r>:
 8010884:	898b      	ldrh	r3, [r1, #12]
 8010886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010888:	079d      	lsls	r5, r3, #30
 801088a:	4606      	mov	r6, r0
 801088c:	460c      	mov	r4, r1
 801088e:	d507      	bpl.n	80108a0 <__smakebuf_r+0x1c>
 8010890:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	6123      	str	r3, [r4, #16]
 8010898:	2301      	movs	r3, #1
 801089a:	6163      	str	r3, [r4, #20]
 801089c:	b003      	add	sp, #12
 801089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108a0:	ab01      	add	r3, sp, #4
 80108a2:	466a      	mov	r2, sp
 80108a4:	f7ff ffc8 	bl	8010838 <__swhatbuf_r>
 80108a8:	9f00      	ldr	r7, [sp, #0]
 80108aa:	4605      	mov	r5, r0
 80108ac:	4639      	mov	r1, r7
 80108ae:	4630      	mov	r0, r6
 80108b0:	f7fb f88c 	bl	800b9cc <_malloc_r>
 80108b4:	b948      	cbnz	r0, 80108ca <__smakebuf_r+0x46>
 80108b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ba:	059a      	lsls	r2, r3, #22
 80108bc:	d4ee      	bmi.n	801089c <__smakebuf_r+0x18>
 80108be:	f023 0303 	bic.w	r3, r3, #3
 80108c2:	f043 0302 	orr.w	r3, r3, #2
 80108c6:	81a3      	strh	r3, [r4, #12]
 80108c8:	e7e2      	b.n	8010890 <__smakebuf_r+0xc>
 80108ca:	89a3      	ldrh	r3, [r4, #12]
 80108cc:	6020      	str	r0, [r4, #0]
 80108ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108d2:	81a3      	strh	r3, [r4, #12]
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80108da:	b15b      	cbz	r3, 80108f4 <__smakebuf_r+0x70>
 80108dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108e0:	4630      	mov	r0, r6
 80108e2:	f000 f81d 	bl	8010920 <_isatty_r>
 80108e6:	b128      	cbz	r0, 80108f4 <__smakebuf_r+0x70>
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	f023 0303 	bic.w	r3, r3, #3
 80108ee:	f043 0301 	orr.w	r3, r3, #1
 80108f2:	81a3      	strh	r3, [r4, #12]
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	431d      	orrs	r5, r3
 80108f8:	81a5      	strh	r5, [r4, #12]
 80108fa:	e7cf      	b.n	801089c <__smakebuf_r+0x18>

080108fc <_fstat_r>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	4d07      	ldr	r5, [pc, #28]	@ (801091c <_fstat_r+0x20>)
 8010900:	2300      	movs	r3, #0
 8010902:	4604      	mov	r4, r0
 8010904:	4608      	mov	r0, r1
 8010906:	4611      	mov	r1, r2
 8010908:	602b      	str	r3, [r5, #0]
 801090a:	f7f5 fc87 	bl	800621c <_fstat>
 801090e:	1c43      	adds	r3, r0, #1
 8010910:	d102      	bne.n	8010918 <_fstat_r+0x1c>
 8010912:	682b      	ldr	r3, [r5, #0]
 8010914:	b103      	cbz	r3, 8010918 <_fstat_r+0x1c>
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	bd38      	pop	{r3, r4, r5, pc}
 801091a:	bf00      	nop
 801091c:	20001974 	.word	0x20001974

08010920 <_isatty_r>:
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4d06      	ldr	r5, [pc, #24]	@ (801093c <_isatty_r+0x1c>)
 8010924:	2300      	movs	r3, #0
 8010926:	4604      	mov	r4, r0
 8010928:	4608      	mov	r0, r1
 801092a:	602b      	str	r3, [r5, #0]
 801092c:	f7f5 fc86 	bl	800623c <_isatty>
 8010930:	1c43      	adds	r3, r0, #1
 8010932:	d102      	bne.n	801093a <_isatty_r+0x1a>
 8010934:	682b      	ldr	r3, [r5, #0]
 8010936:	b103      	cbz	r3, 801093a <_isatty_r+0x1a>
 8010938:	6023      	str	r3, [r4, #0]
 801093a:	bd38      	pop	{r3, r4, r5, pc}
 801093c:	20001974 	.word	0x20001974

08010940 <pow>:
 8010940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010942:	ed2d 8b02 	vpush	{d8}
 8010946:	eeb0 8a40 	vmov.f32	s16, s0
 801094a:	eef0 8a60 	vmov.f32	s17, s1
 801094e:	ec55 4b11 	vmov	r4, r5, d1
 8010952:	f000 facd 	bl	8010ef0 <__ieee754_pow>
 8010956:	4622      	mov	r2, r4
 8010958:	462b      	mov	r3, r5
 801095a:	4620      	mov	r0, r4
 801095c:	4629      	mov	r1, r5
 801095e:	ec57 6b10 	vmov	r6, r7, d0
 8010962:	f7f0 f903 	bl	8000b6c <__aeabi_dcmpun>
 8010966:	2800      	cmp	r0, #0
 8010968:	d13b      	bne.n	80109e2 <pow+0xa2>
 801096a:	ec51 0b18 	vmov	r0, r1, d8
 801096e:	2200      	movs	r2, #0
 8010970:	2300      	movs	r3, #0
 8010972:	f7f0 f8c9 	bl	8000b08 <__aeabi_dcmpeq>
 8010976:	b1b8      	cbz	r0, 80109a8 <pow+0x68>
 8010978:	2200      	movs	r2, #0
 801097a:	2300      	movs	r3, #0
 801097c:	4620      	mov	r0, r4
 801097e:	4629      	mov	r1, r5
 8010980:	f7f0 f8c2 	bl	8000b08 <__aeabi_dcmpeq>
 8010984:	2800      	cmp	r0, #0
 8010986:	d146      	bne.n	8010a16 <pow+0xd6>
 8010988:	ec45 4b10 	vmov	d0, r4, r5
 801098c:	f000 f8f3 	bl	8010b76 <finite>
 8010990:	b338      	cbz	r0, 80109e2 <pow+0xa2>
 8010992:	2200      	movs	r2, #0
 8010994:	2300      	movs	r3, #0
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	f7f0 f8bf 	bl	8000b1c <__aeabi_dcmplt>
 801099e:	b300      	cbz	r0, 80109e2 <pow+0xa2>
 80109a0:	f7fc f91a 	bl	800cbd8 <__errno>
 80109a4:	2322      	movs	r3, #34	@ 0x22
 80109a6:	e01b      	b.n	80109e0 <pow+0xa0>
 80109a8:	ec47 6b10 	vmov	d0, r6, r7
 80109ac:	f000 f8e3 	bl	8010b76 <finite>
 80109b0:	b9e0      	cbnz	r0, 80109ec <pow+0xac>
 80109b2:	eeb0 0a48 	vmov.f32	s0, s16
 80109b6:	eef0 0a68 	vmov.f32	s1, s17
 80109ba:	f000 f8dc 	bl	8010b76 <finite>
 80109be:	b1a8      	cbz	r0, 80109ec <pow+0xac>
 80109c0:	ec45 4b10 	vmov	d0, r4, r5
 80109c4:	f000 f8d7 	bl	8010b76 <finite>
 80109c8:	b180      	cbz	r0, 80109ec <pow+0xac>
 80109ca:	4632      	mov	r2, r6
 80109cc:	463b      	mov	r3, r7
 80109ce:	4630      	mov	r0, r6
 80109d0:	4639      	mov	r1, r7
 80109d2:	f7f0 f8cb 	bl	8000b6c <__aeabi_dcmpun>
 80109d6:	2800      	cmp	r0, #0
 80109d8:	d0e2      	beq.n	80109a0 <pow+0x60>
 80109da:	f7fc f8fd 	bl	800cbd8 <__errno>
 80109de:	2321      	movs	r3, #33	@ 0x21
 80109e0:	6003      	str	r3, [r0, #0]
 80109e2:	ecbd 8b02 	vpop	{d8}
 80109e6:	ec47 6b10 	vmov	d0, r6, r7
 80109ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ec:	2200      	movs	r2, #0
 80109ee:	2300      	movs	r3, #0
 80109f0:	4630      	mov	r0, r6
 80109f2:	4639      	mov	r1, r7
 80109f4:	f7f0 f888 	bl	8000b08 <__aeabi_dcmpeq>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d0f2      	beq.n	80109e2 <pow+0xa2>
 80109fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010a00:	eef0 0a68 	vmov.f32	s1, s17
 8010a04:	f000 f8b7 	bl	8010b76 <finite>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d0ea      	beq.n	80109e2 <pow+0xa2>
 8010a0c:	ec45 4b10 	vmov	d0, r4, r5
 8010a10:	f000 f8b1 	bl	8010b76 <finite>
 8010a14:	e7c3      	b.n	801099e <pow+0x5e>
 8010a16:	4f01      	ldr	r7, [pc, #4]	@ (8010a1c <pow+0xdc>)
 8010a18:	2600      	movs	r6, #0
 8010a1a:	e7e2      	b.n	80109e2 <pow+0xa2>
 8010a1c:	3ff00000 	.word	0x3ff00000

08010a20 <sqrt>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	ed2d 8b02 	vpush	{d8}
 8010a26:	ec55 4b10 	vmov	r4, r5, d0
 8010a2a:	f000 f905 	bl	8010c38 <__ieee754_sqrt>
 8010a2e:	4622      	mov	r2, r4
 8010a30:	462b      	mov	r3, r5
 8010a32:	4620      	mov	r0, r4
 8010a34:	4629      	mov	r1, r5
 8010a36:	eeb0 8a40 	vmov.f32	s16, s0
 8010a3a:	eef0 8a60 	vmov.f32	s17, s1
 8010a3e:	f7f0 f895 	bl	8000b6c <__aeabi_dcmpun>
 8010a42:	b990      	cbnz	r0, 8010a6a <sqrt+0x4a>
 8010a44:	2200      	movs	r2, #0
 8010a46:	2300      	movs	r3, #0
 8010a48:	4620      	mov	r0, r4
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	f7f0 f866 	bl	8000b1c <__aeabi_dcmplt>
 8010a50:	b158      	cbz	r0, 8010a6a <sqrt+0x4a>
 8010a52:	f7fc f8c1 	bl	800cbd8 <__errno>
 8010a56:	2321      	movs	r3, #33	@ 0x21
 8010a58:	6003      	str	r3, [r0, #0]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	4610      	mov	r0, r2
 8010a60:	4619      	mov	r1, r3
 8010a62:	f7ef ff13 	bl	800088c <__aeabi_ddiv>
 8010a66:	ec41 0b18 	vmov	d8, r0, r1
 8010a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8010a6e:	eef0 0a68 	vmov.f32	s1, s17
 8010a72:	ecbd 8b02 	vpop	{d8}
 8010a76:	bd38      	pop	{r3, r4, r5, pc}

08010a78 <acosf>:
 8010a78:	b508      	push	{r3, lr}
 8010a7a:	ed2d 8b02 	vpush	{d8}
 8010a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8010a82:	f000 ff81 	bl	8011988 <__ieee754_acosf>
 8010a86:	eeb4 8a48 	vcmp.f32	s16, s16
 8010a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8e:	eef0 8a40 	vmov.f32	s17, s0
 8010a92:	d615      	bvs.n	8010ac0 <acosf+0x48>
 8010a94:	eeb0 0a48 	vmov.f32	s0, s16
 8010a98:	f000 f866 	bl	8010b68 <fabsf>
 8010a9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010aa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa8:	dd0a      	ble.n	8010ac0 <acosf+0x48>
 8010aaa:	f7fc f895 	bl	800cbd8 <__errno>
 8010aae:	ecbd 8b02 	vpop	{d8}
 8010ab2:	2321      	movs	r3, #33	@ 0x21
 8010ab4:	6003      	str	r3, [r0, #0]
 8010ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010aba:	4804      	ldr	r0, [pc, #16]	@ (8010acc <acosf+0x54>)
 8010abc:	f7fc b8c8 	b.w	800cc50 <nanf>
 8010ac0:	eeb0 0a68 	vmov.f32	s0, s17
 8010ac4:	ecbd 8b02 	vpop	{d8}
 8010ac8:	bd08      	pop	{r3, pc}
 8010aca:	bf00      	nop
 8010acc:	08012760 	.word	0x08012760

08010ad0 <asinf>:
 8010ad0:	b508      	push	{r3, lr}
 8010ad2:	ed2d 8b02 	vpush	{d8}
 8010ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8010ada:	f001 f84d 	bl	8011b78 <__ieee754_asinf>
 8010ade:	eeb4 8a48 	vcmp.f32	s16, s16
 8010ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae6:	eef0 8a40 	vmov.f32	s17, s0
 8010aea:	d615      	bvs.n	8010b18 <asinf+0x48>
 8010aec:	eeb0 0a48 	vmov.f32	s0, s16
 8010af0:	f000 f83a 	bl	8010b68 <fabsf>
 8010af4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010af8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b00:	dd0a      	ble.n	8010b18 <asinf+0x48>
 8010b02:	f7fc f869 	bl	800cbd8 <__errno>
 8010b06:	ecbd 8b02 	vpop	{d8}
 8010b0a:	2321      	movs	r3, #33	@ 0x21
 8010b0c:	6003      	str	r3, [r0, #0]
 8010b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b12:	4804      	ldr	r0, [pc, #16]	@ (8010b24 <asinf+0x54>)
 8010b14:	f7fc b89c 	b.w	800cc50 <nanf>
 8010b18:	eeb0 0a68 	vmov.f32	s0, s17
 8010b1c:	ecbd 8b02 	vpop	{d8}
 8010b20:	bd08      	pop	{r3, pc}
 8010b22:	bf00      	nop
 8010b24:	08012760 	.word	0x08012760

08010b28 <atan2f>:
 8010b28:	f001 b90c 	b.w	8011d44 <__ieee754_atan2f>

08010b2c <sqrtf>:
 8010b2c:	b508      	push	{r3, lr}
 8010b2e:	ed2d 8b02 	vpush	{d8}
 8010b32:	eeb0 8a40 	vmov.f32	s16, s0
 8010b36:	f000 f959 	bl	8010dec <__ieee754_sqrtf>
 8010b3a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b42:	d60c      	bvs.n	8010b5e <sqrtf+0x32>
 8010b44:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010b64 <sqrtf+0x38>
 8010b48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b50:	d505      	bpl.n	8010b5e <sqrtf+0x32>
 8010b52:	f7fc f841 	bl	800cbd8 <__errno>
 8010b56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b5a:	2321      	movs	r3, #33	@ 0x21
 8010b5c:	6003      	str	r3, [r0, #0]
 8010b5e:	ecbd 8b02 	vpop	{d8}
 8010b62:	bd08      	pop	{r3, pc}
 8010b64:	00000000 	.word	0x00000000

08010b68 <fabsf>:
 8010b68:	ee10 3a10 	vmov	r3, s0
 8010b6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010b70:	ee00 3a10 	vmov	s0, r3
 8010b74:	4770      	bx	lr

08010b76 <finite>:
 8010b76:	b082      	sub	sp, #8
 8010b78:	ed8d 0b00 	vstr	d0, [sp]
 8010b7c:	9801      	ldr	r0, [sp, #4]
 8010b7e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8010b82:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010b86:	0fc0      	lsrs	r0, r0, #31
 8010b88:	b002      	add	sp, #8
 8010b8a:	4770      	bx	lr

08010b8c <fmaxf>:
 8010b8c:	b508      	push	{r3, lr}
 8010b8e:	ed2d 8b02 	vpush	{d8}
 8010b92:	eeb0 8a40 	vmov.f32	s16, s0
 8010b96:	eef0 8a60 	vmov.f32	s17, s1
 8010b9a:	f000 f831 	bl	8010c00 <__fpclassifyf>
 8010b9e:	b930      	cbnz	r0, 8010bae <fmaxf+0x22>
 8010ba0:	eeb0 8a68 	vmov.f32	s16, s17
 8010ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8010ba8:	ecbd 8b02 	vpop	{d8}
 8010bac:	bd08      	pop	{r3, pc}
 8010bae:	eeb0 0a68 	vmov.f32	s0, s17
 8010bb2:	f000 f825 	bl	8010c00 <__fpclassifyf>
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d0f4      	beq.n	8010ba4 <fmaxf+0x18>
 8010bba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc2:	dded      	ble.n	8010ba0 <fmaxf+0x14>
 8010bc4:	e7ee      	b.n	8010ba4 <fmaxf+0x18>

08010bc6 <fminf>:
 8010bc6:	b508      	push	{r3, lr}
 8010bc8:	ed2d 8b02 	vpush	{d8}
 8010bcc:	eeb0 8a40 	vmov.f32	s16, s0
 8010bd0:	eef0 8a60 	vmov.f32	s17, s1
 8010bd4:	f000 f814 	bl	8010c00 <__fpclassifyf>
 8010bd8:	b930      	cbnz	r0, 8010be8 <fminf+0x22>
 8010bda:	eeb0 8a68 	vmov.f32	s16, s17
 8010bde:	eeb0 0a48 	vmov.f32	s0, s16
 8010be2:	ecbd 8b02 	vpop	{d8}
 8010be6:	bd08      	pop	{r3, pc}
 8010be8:	eeb0 0a68 	vmov.f32	s0, s17
 8010bec:	f000 f808 	bl	8010c00 <__fpclassifyf>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d0f4      	beq.n	8010bde <fminf+0x18>
 8010bf4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	d5ed      	bpl.n	8010bda <fminf+0x14>
 8010bfe:	e7ee      	b.n	8010bde <fminf+0x18>

08010c00 <__fpclassifyf>:
 8010c00:	ee10 3a10 	vmov	r3, s0
 8010c04:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010c08:	d00d      	beq.n	8010c26 <__fpclassifyf+0x26>
 8010c0a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010c0e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010c12:	d30a      	bcc.n	8010c2a <__fpclassifyf+0x2a>
 8010c14:	4b07      	ldr	r3, [pc, #28]	@ (8010c34 <__fpclassifyf+0x34>)
 8010c16:	1e42      	subs	r2, r0, #1
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d908      	bls.n	8010c2e <__fpclassifyf+0x2e>
 8010c1c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010c20:	4258      	negs	r0, r3
 8010c22:	4158      	adcs	r0, r3
 8010c24:	4770      	bx	lr
 8010c26:	2002      	movs	r0, #2
 8010c28:	4770      	bx	lr
 8010c2a:	2004      	movs	r0, #4
 8010c2c:	4770      	bx	lr
 8010c2e:	2003      	movs	r0, #3
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	007ffffe 	.word	0x007ffffe

08010c38 <__ieee754_sqrt>:
 8010c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	4a68      	ldr	r2, [pc, #416]	@ (8010de0 <__ieee754_sqrt+0x1a8>)
 8010c3e:	ec55 4b10 	vmov	r4, r5, d0
 8010c42:	43aa      	bics	r2, r5
 8010c44:	462b      	mov	r3, r5
 8010c46:	4621      	mov	r1, r4
 8010c48:	d110      	bne.n	8010c6c <__ieee754_sqrt+0x34>
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	4629      	mov	r1, r5
 8010c50:	f7ef fcf2 	bl	8000638 <__aeabi_dmul>
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	4620      	mov	r0, r4
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f7ef fb36 	bl	80002cc <__adddf3>
 8010c60:	4604      	mov	r4, r0
 8010c62:	460d      	mov	r5, r1
 8010c64:	ec45 4b10 	vmov	d0, r4, r5
 8010c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6c:	2d00      	cmp	r5, #0
 8010c6e:	dc0e      	bgt.n	8010c8e <__ieee754_sqrt+0x56>
 8010c70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010c74:	4322      	orrs	r2, r4
 8010c76:	d0f5      	beq.n	8010c64 <__ieee754_sqrt+0x2c>
 8010c78:	b19d      	cbz	r5, 8010ca2 <__ieee754_sqrt+0x6a>
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	4629      	mov	r1, r5
 8010c80:	f7ef fb22 	bl	80002c8 <__aeabi_dsub>
 8010c84:	4602      	mov	r2, r0
 8010c86:	460b      	mov	r3, r1
 8010c88:	f7ef fe00 	bl	800088c <__aeabi_ddiv>
 8010c8c:	e7e8      	b.n	8010c60 <__ieee754_sqrt+0x28>
 8010c8e:	152a      	asrs	r2, r5, #20
 8010c90:	d115      	bne.n	8010cbe <__ieee754_sqrt+0x86>
 8010c92:	2000      	movs	r0, #0
 8010c94:	e009      	b.n	8010caa <__ieee754_sqrt+0x72>
 8010c96:	0acb      	lsrs	r3, r1, #11
 8010c98:	3a15      	subs	r2, #21
 8010c9a:	0549      	lsls	r1, r1, #21
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d0fa      	beq.n	8010c96 <__ieee754_sqrt+0x5e>
 8010ca0:	e7f7      	b.n	8010c92 <__ieee754_sqrt+0x5a>
 8010ca2:	462a      	mov	r2, r5
 8010ca4:	e7fa      	b.n	8010c9c <__ieee754_sqrt+0x64>
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	3001      	adds	r0, #1
 8010caa:	02dc      	lsls	r4, r3, #11
 8010cac:	d5fb      	bpl.n	8010ca6 <__ieee754_sqrt+0x6e>
 8010cae:	1e44      	subs	r4, r0, #1
 8010cb0:	1b12      	subs	r2, r2, r4
 8010cb2:	f1c0 0420 	rsb	r4, r0, #32
 8010cb6:	fa21 f404 	lsr.w	r4, r1, r4
 8010cba:	4323      	orrs	r3, r4
 8010cbc:	4081      	lsls	r1, r0
 8010cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cc2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010cca:	07d2      	lsls	r2, r2, #31
 8010ccc:	bf5c      	itt	pl
 8010cce:	005b      	lslpl	r3, r3, #1
 8010cd0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010cd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010cd8:	bf58      	it	pl
 8010cda:	0049      	lslpl	r1, r1, #1
 8010cdc:	2600      	movs	r6, #0
 8010cde:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010ce2:	106d      	asrs	r5, r5, #1
 8010ce4:	0049      	lsls	r1, r1, #1
 8010ce6:	2016      	movs	r0, #22
 8010ce8:	4632      	mov	r2, r6
 8010cea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010cee:	1917      	adds	r7, r2, r4
 8010cf0:	429f      	cmp	r7, r3
 8010cf2:	bfde      	ittt	le
 8010cf4:	193a      	addle	r2, r7, r4
 8010cf6:	1bdb      	suble	r3, r3, r7
 8010cf8:	1936      	addle	r6, r6, r4
 8010cfa:	0fcf      	lsrs	r7, r1, #31
 8010cfc:	3801      	subs	r0, #1
 8010cfe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010d02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010d06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010d0a:	d1f0      	bne.n	8010cee <__ieee754_sqrt+0xb6>
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	2720      	movs	r7, #32
 8010d10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010d14:	429a      	cmp	r2, r3
 8010d16:	eb00 0e0c 	add.w	lr, r0, ip
 8010d1a:	db02      	blt.n	8010d22 <__ieee754_sqrt+0xea>
 8010d1c:	d113      	bne.n	8010d46 <__ieee754_sqrt+0x10e>
 8010d1e:	458e      	cmp	lr, r1
 8010d20:	d811      	bhi.n	8010d46 <__ieee754_sqrt+0x10e>
 8010d22:	f1be 0f00 	cmp.w	lr, #0
 8010d26:	eb0e 000c 	add.w	r0, lr, ip
 8010d2a:	da42      	bge.n	8010db2 <__ieee754_sqrt+0x17a>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	db40      	blt.n	8010db2 <__ieee754_sqrt+0x17a>
 8010d30:	f102 0801 	add.w	r8, r2, #1
 8010d34:	1a9b      	subs	r3, r3, r2
 8010d36:	458e      	cmp	lr, r1
 8010d38:	bf88      	it	hi
 8010d3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010d3e:	eba1 010e 	sub.w	r1, r1, lr
 8010d42:	4464      	add	r4, ip
 8010d44:	4642      	mov	r2, r8
 8010d46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010d4a:	3f01      	subs	r7, #1
 8010d4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010d50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010d54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010d58:	d1dc      	bne.n	8010d14 <__ieee754_sqrt+0xdc>
 8010d5a:	4319      	orrs	r1, r3
 8010d5c:	d01b      	beq.n	8010d96 <__ieee754_sqrt+0x15e>
 8010d5e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010de4 <__ieee754_sqrt+0x1ac>
 8010d62:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010de8 <__ieee754_sqrt+0x1b0>
 8010d66:	e9da 0100 	ldrd	r0, r1, [sl]
 8010d6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8010d6e:	f7ef faab 	bl	80002c8 <__aeabi_dsub>
 8010d72:	e9da 8900 	ldrd	r8, r9, [sl]
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef fed7 	bl	8000b30 <__aeabi_dcmple>
 8010d82:	b140      	cbz	r0, 8010d96 <__ieee754_sqrt+0x15e>
 8010d84:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010d88:	e9da 0100 	ldrd	r0, r1, [sl]
 8010d8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010d90:	d111      	bne.n	8010db6 <__ieee754_sqrt+0x17e>
 8010d92:	3601      	adds	r6, #1
 8010d94:	463c      	mov	r4, r7
 8010d96:	1072      	asrs	r2, r6, #1
 8010d98:	0863      	lsrs	r3, r4, #1
 8010d9a:	07f1      	lsls	r1, r6, #31
 8010d9c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010da0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010da4:	bf48      	it	mi
 8010da6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010daa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010dae:	4618      	mov	r0, r3
 8010db0:	e756      	b.n	8010c60 <__ieee754_sqrt+0x28>
 8010db2:	4690      	mov	r8, r2
 8010db4:	e7be      	b.n	8010d34 <__ieee754_sqrt+0xfc>
 8010db6:	f7ef fa89 	bl	80002cc <__adddf3>
 8010dba:	e9da 8900 	ldrd	r8, r9, [sl]
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	4649      	mov	r1, r9
 8010dc6:	f7ef fea9 	bl	8000b1c <__aeabi_dcmplt>
 8010dca:	b120      	cbz	r0, 8010dd6 <__ieee754_sqrt+0x19e>
 8010dcc:	1ca0      	adds	r0, r4, #2
 8010dce:	bf08      	it	eq
 8010dd0:	3601      	addeq	r6, #1
 8010dd2:	3402      	adds	r4, #2
 8010dd4:	e7df      	b.n	8010d96 <__ieee754_sqrt+0x15e>
 8010dd6:	1c63      	adds	r3, r4, #1
 8010dd8:	f023 0401 	bic.w	r4, r3, #1
 8010ddc:	e7db      	b.n	8010d96 <__ieee754_sqrt+0x15e>
 8010dde:	bf00      	nop
 8010de0:	7ff00000 	.word	0x7ff00000
 8010de4:	20000208 	.word	0x20000208
 8010de8:	20000200 	.word	0x20000200

08010dec <__ieee754_sqrtf>:
 8010dec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010df0:	4770      	bx	lr
 8010df2:	0000      	movs	r0, r0
 8010df4:	0000      	movs	r0, r0
	...

08010df8 <floor>:
 8010df8:	ec51 0b10 	vmov	r0, r1, d0
 8010dfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010e08:	2e13      	cmp	r6, #19
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	4605      	mov	r5, r0
 8010e0e:	4680      	mov	r8, r0
 8010e10:	dc34      	bgt.n	8010e7c <floor+0x84>
 8010e12:	2e00      	cmp	r6, #0
 8010e14:	da17      	bge.n	8010e46 <floor+0x4e>
 8010e16:	a332      	add	r3, pc, #200	@ (adr r3, 8010ee0 <floor+0xe8>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f7ef fa56 	bl	80002cc <__adddf3>
 8010e20:	2200      	movs	r2, #0
 8010e22:	2300      	movs	r3, #0
 8010e24:	f7ef fe98 	bl	8000b58 <__aeabi_dcmpgt>
 8010e28:	b150      	cbz	r0, 8010e40 <floor+0x48>
 8010e2a:	2c00      	cmp	r4, #0
 8010e2c:	da55      	bge.n	8010eda <floor+0xe2>
 8010e2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010e32:	432c      	orrs	r4, r5
 8010e34:	2500      	movs	r5, #0
 8010e36:	42ac      	cmp	r4, r5
 8010e38:	4c2b      	ldr	r4, [pc, #172]	@ (8010ee8 <floor+0xf0>)
 8010e3a:	bf08      	it	eq
 8010e3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010e40:	4621      	mov	r1, r4
 8010e42:	4628      	mov	r0, r5
 8010e44:	e023      	b.n	8010e8e <floor+0x96>
 8010e46:	4f29      	ldr	r7, [pc, #164]	@ (8010eec <floor+0xf4>)
 8010e48:	4137      	asrs	r7, r6
 8010e4a:	ea01 0307 	and.w	r3, r1, r7
 8010e4e:	4303      	orrs	r3, r0
 8010e50:	d01d      	beq.n	8010e8e <floor+0x96>
 8010e52:	a323      	add	r3, pc, #140	@ (adr r3, 8010ee0 <floor+0xe8>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f7ef fa38 	bl	80002cc <__adddf3>
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	2300      	movs	r3, #0
 8010e60:	f7ef fe7a 	bl	8000b58 <__aeabi_dcmpgt>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d0eb      	beq.n	8010e40 <floor+0x48>
 8010e68:	2c00      	cmp	r4, #0
 8010e6a:	bfbe      	ittt	lt
 8010e6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010e70:	4133      	asrlt	r3, r6
 8010e72:	18e4      	addlt	r4, r4, r3
 8010e74:	ea24 0407 	bic.w	r4, r4, r7
 8010e78:	2500      	movs	r5, #0
 8010e7a:	e7e1      	b.n	8010e40 <floor+0x48>
 8010e7c:	2e33      	cmp	r6, #51	@ 0x33
 8010e7e:	dd0a      	ble.n	8010e96 <floor+0x9e>
 8010e80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010e84:	d103      	bne.n	8010e8e <floor+0x96>
 8010e86:	4602      	mov	r2, r0
 8010e88:	460b      	mov	r3, r1
 8010e8a:	f7ef fa1f 	bl	80002cc <__adddf3>
 8010e8e:	ec41 0b10 	vmov	d0, r0, r1
 8010e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8010e9e:	40df      	lsrs	r7, r3
 8010ea0:	4207      	tst	r7, r0
 8010ea2:	d0f4      	beq.n	8010e8e <floor+0x96>
 8010ea4:	a30e      	add	r3, pc, #56	@ (adr r3, 8010ee0 <floor+0xe8>)
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	f7ef fa0f 	bl	80002cc <__adddf3>
 8010eae:	2200      	movs	r2, #0
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	f7ef fe51 	bl	8000b58 <__aeabi_dcmpgt>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d0c2      	beq.n	8010e40 <floor+0x48>
 8010eba:	2c00      	cmp	r4, #0
 8010ebc:	da0a      	bge.n	8010ed4 <floor+0xdc>
 8010ebe:	2e14      	cmp	r6, #20
 8010ec0:	d101      	bne.n	8010ec6 <floor+0xce>
 8010ec2:	3401      	adds	r4, #1
 8010ec4:	e006      	b.n	8010ed4 <floor+0xdc>
 8010ec6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010eca:	2301      	movs	r3, #1
 8010ecc:	40b3      	lsls	r3, r6
 8010ece:	441d      	add	r5, r3
 8010ed0:	4545      	cmp	r5, r8
 8010ed2:	d3f6      	bcc.n	8010ec2 <floor+0xca>
 8010ed4:	ea25 0507 	bic.w	r5, r5, r7
 8010ed8:	e7b2      	b.n	8010e40 <floor+0x48>
 8010eda:	2500      	movs	r5, #0
 8010edc:	462c      	mov	r4, r5
 8010ede:	e7af      	b.n	8010e40 <floor+0x48>
 8010ee0:	8800759c 	.word	0x8800759c
 8010ee4:	7e37e43c 	.word	0x7e37e43c
 8010ee8:	bff00000 	.word	0xbff00000
 8010eec:	000fffff 	.word	0x000fffff

08010ef0 <__ieee754_pow>:
 8010ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef4:	b091      	sub	sp, #68	@ 0x44
 8010ef6:	ed8d 1b00 	vstr	d1, [sp]
 8010efa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010efe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010f02:	ea5a 0001 	orrs.w	r0, sl, r1
 8010f06:	ec57 6b10 	vmov	r6, r7, d0
 8010f0a:	d113      	bne.n	8010f34 <__ieee754_pow+0x44>
 8010f0c:	19b3      	adds	r3, r6, r6
 8010f0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010f12:	4152      	adcs	r2, r2
 8010f14:	4298      	cmp	r0, r3
 8010f16:	4b98      	ldr	r3, [pc, #608]	@ (8011178 <__ieee754_pow+0x288>)
 8010f18:	4193      	sbcs	r3, r2
 8010f1a:	f080 84ea 	bcs.w	80118f2 <__ieee754_pow+0xa02>
 8010f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f22:	4630      	mov	r0, r6
 8010f24:	4639      	mov	r1, r7
 8010f26:	f7ef f9d1 	bl	80002cc <__adddf3>
 8010f2a:	ec41 0b10 	vmov	d0, r0, r1
 8010f2e:	b011      	add	sp, #68	@ 0x44
 8010f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f34:	4a91      	ldr	r2, [pc, #580]	@ (801117c <__ieee754_pow+0x28c>)
 8010f36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010f3a:	4590      	cmp	r8, r2
 8010f3c:	463d      	mov	r5, r7
 8010f3e:	4633      	mov	r3, r6
 8010f40:	d806      	bhi.n	8010f50 <__ieee754_pow+0x60>
 8010f42:	d101      	bne.n	8010f48 <__ieee754_pow+0x58>
 8010f44:	2e00      	cmp	r6, #0
 8010f46:	d1ea      	bne.n	8010f1e <__ieee754_pow+0x2e>
 8010f48:	4592      	cmp	sl, r2
 8010f4a:	d801      	bhi.n	8010f50 <__ieee754_pow+0x60>
 8010f4c:	d10e      	bne.n	8010f6c <__ieee754_pow+0x7c>
 8010f4e:	b169      	cbz	r1, 8010f6c <__ieee754_pow+0x7c>
 8010f50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010f54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010f58:	431d      	orrs	r5, r3
 8010f5a:	d1e0      	bne.n	8010f1e <__ieee754_pow+0x2e>
 8010f5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f60:	18db      	adds	r3, r3, r3
 8010f62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010f66:	4152      	adcs	r2, r2
 8010f68:	429d      	cmp	r5, r3
 8010f6a:	e7d4      	b.n	8010f16 <__ieee754_pow+0x26>
 8010f6c:	2d00      	cmp	r5, #0
 8010f6e:	46c3      	mov	fp, r8
 8010f70:	da3a      	bge.n	8010fe8 <__ieee754_pow+0xf8>
 8010f72:	4a83      	ldr	r2, [pc, #524]	@ (8011180 <__ieee754_pow+0x290>)
 8010f74:	4592      	cmp	sl, r2
 8010f76:	d84d      	bhi.n	8011014 <__ieee754_pow+0x124>
 8010f78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010f7c:	4592      	cmp	sl, r2
 8010f7e:	f240 84c7 	bls.w	8011910 <__ieee754_pow+0xa20>
 8010f82:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010f86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010f8a:	2a14      	cmp	r2, #20
 8010f8c:	dd0f      	ble.n	8010fae <__ieee754_pow+0xbe>
 8010f8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010f92:	fa21 f402 	lsr.w	r4, r1, r2
 8010f96:	fa04 f202 	lsl.w	r2, r4, r2
 8010f9a:	428a      	cmp	r2, r1
 8010f9c:	f040 84b8 	bne.w	8011910 <__ieee754_pow+0xa20>
 8010fa0:	f004 0401 	and.w	r4, r4, #1
 8010fa4:	f1c4 0402 	rsb	r4, r4, #2
 8010fa8:	2900      	cmp	r1, #0
 8010faa:	d158      	bne.n	801105e <__ieee754_pow+0x16e>
 8010fac:	e00e      	b.n	8010fcc <__ieee754_pow+0xdc>
 8010fae:	2900      	cmp	r1, #0
 8010fb0:	d154      	bne.n	801105c <__ieee754_pow+0x16c>
 8010fb2:	f1c2 0214 	rsb	r2, r2, #20
 8010fb6:	fa4a f402 	asr.w	r4, sl, r2
 8010fba:	fa04 f202 	lsl.w	r2, r4, r2
 8010fbe:	4552      	cmp	r2, sl
 8010fc0:	f040 84a3 	bne.w	801190a <__ieee754_pow+0xa1a>
 8010fc4:	f004 0401 	and.w	r4, r4, #1
 8010fc8:	f1c4 0402 	rsb	r4, r4, #2
 8010fcc:	4a6d      	ldr	r2, [pc, #436]	@ (8011184 <__ieee754_pow+0x294>)
 8010fce:	4592      	cmp	sl, r2
 8010fd0:	d12e      	bne.n	8011030 <__ieee754_pow+0x140>
 8010fd2:	f1b9 0f00 	cmp.w	r9, #0
 8010fd6:	f280 8494 	bge.w	8011902 <__ieee754_pow+0xa12>
 8010fda:	496a      	ldr	r1, [pc, #424]	@ (8011184 <__ieee754_pow+0x294>)
 8010fdc:	4632      	mov	r2, r6
 8010fde:	463b      	mov	r3, r7
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	f7ef fc53 	bl	800088c <__aeabi_ddiv>
 8010fe6:	e7a0      	b.n	8010f2a <__ieee754_pow+0x3a>
 8010fe8:	2400      	movs	r4, #0
 8010fea:	bbc1      	cbnz	r1, 801105e <__ieee754_pow+0x16e>
 8010fec:	4a63      	ldr	r2, [pc, #396]	@ (801117c <__ieee754_pow+0x28c>)
 8010fee:	4592      	cmp	sl, r2
 8010ff0:	d1ec      	bne.n	8010fcc <__ieee754_pow+0xdc>
 8010ff2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8010ff6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010ffa:	431a      	orrs	r2, r3
 8010ffc:	f000 8479 	beq.w	80118f2 <__ieee754_pow+0xa02>
 8011000:	4b61      	ldr	r3, [pc, #388]	@ (8011188 <__ieee754_pow+0x298>)
 8011002:	4598      	cmp	r8, r3
 8011004:	d908      	bls.n	8011018 <__ieee754_pow+0x128>
 8011006:	f1b9 0f00 	cmp.w	r9, #0
 801100a:	f2c0 8476 	blt.w	80118fa <__ieee754_pow+0xa0a>
 801100e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011012:	e78a      	b.n	8010f2a <__ieee754_pow+0x3a>
 8011014:	2402      	movs	r4, #2
 8011016:	e7e8      	b.n	8010fea <__ieee754_pow+0xfa>
 8011018:	f1b9 0f00 	cmp.w	r9, #0
 801101c:	f04f 0000 	mov.w	r0, #0
 8011020:	f04f 0100 	mov.w	r1, #0
 8011024:	da81      	bge.n	8010f2a <__ieee754_pow+0x3a>
 8011026:	e9dd 0300 	ldrd	r0, r3, [sp]
 801102a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801102e:	e77c      	b.n	8010f2a <__ieee754_pow+0x3a>
 8011030:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8011034:	d106      	bne.n	8011044 <__ieee754_pow+0x154>
 8011036:	4632      	mov	r2, r6
 8011038:	463b      	mov	r3, r7
 801103a:	4630      	mov	r0, r6
 801103c:	4639      	mov	r1, r7
 801103e:	f7ef fafb 	bl	8000638 <__aeabi_dmul>
 8011042:	e772      	b.n	8010f2a <__ieee754_pow+0x3a>
 8011044:	4a51      	ldr	r2, [pc, #324]	@ (801118c <__ieee754_pow+0x29c>)
 8011046:	4591      	cmp	r9, r2
 8011048:	d109      	bne.n	801105e <__ieee754_pow+0x16e>
 801104a:	2d00      	cmp	r5, #0
 801104c:	db07      	blt.n	801105e <__ieee754_pow+0x16e>
 801104e:	ec47 6b10 	vmov	d0, r6, r7
 8011052:	b011      	add	sp, #68	@ 0x44
 8011054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	f7ff bdee 	b.w	8010c38 <__ieee754_sqrt>
 801105c:	2400      	movs	r4, #0
 801105e:	ec47 6b10 	vmov	d0, r6, r7
 8011062:	9302      	str	r3, [sp, #8]
 8011064:	f000 fc88 	bl	8011978 <fabs>
 8011068:	9b02      	ldr	r3, [sp, #8]
 801106a:	ec51 0b10 	vmov	r0, r1, d0
 801106e:	bb53      	cbnz	r3, 80110c6 <__ieee754_pow+0x1d6>
 8011070:	4b44      	ldr	r3, [pc, #272]	@ (8011184 <__ieee754_pow+0x294>)
 8011072:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8011076:	429a      	cmp	r2, r3
 8011078:	d002      	beq.n	8011080 <__ieee754_pow+0x190>
 801107a:	f1b8 0f00 	cmp.w	r8, #0
 801107e:	d122      	bne.n	80110c6 <__ieee754_pow+0x1d6>
 8011080:	f1b9 0f00 	cmp.w	r9, #0
 8011084:	da05      	bge.n	8011092 <__ieee754_pow+0x1a2>
 8011086:	4602      	mov	r2, r0
 8011088:	460b      	mov	r3, r1
 801108a:	2000      	movs	r0, #0
 801108c:	493d      	ldr	r1, [pc, #244]	@ (8011184 <__ieee754_pow+0x294>)
 801108e:	f7ef fbfd 	bl	800088c <__aeabi_ddiv>
 8011092:	2d00      	cmp	r5, #0
 8011094:	f6bf af49 	bge.w	8010f2a <__ieee754_pow+0x3a>
 8011098:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801109c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80110a0:	ea58 0804 	orrs.w	r8, r8, r4
 80110a4:	d108      	bne.n	80110b8 <__ieee754_pow+0x1c8>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4610      	mov	r0, r2
 80110ac:	4619      	mov	r1, r3
 80110ae:	f7ef f90b 	bl	80002c8 <__aeabi_dsub>
 80110b2:	4602      	mov	r2, r0
 80110b4:	460b      	mov	r3, r1
 80110b6:	e794      	b.n	8010fe2 <__ieee754_pow+0xf2>
 80110b8:	2c01      	cmp	r4, #1
 80110ba:	f47f af36 	bne.w	8010f2a <__ieee754_pow+0x3a>
 80110be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80110c2:	4619      	mov	r1, r3
 80110c4:	e731      	b.n	8010f2a <__ieee754_pow+0x3a>
 80110c6:	0feb      	lsrs	r3, r5, #31
 80110c8:	3b01      	subs	r3, #1
 80110ca:	ea53 0204 	orrs.w	r2, r3, r4
 80110ce:	d102      	bne.n	80110d6 <__ieee754_pow+0x1e6>
 80110d0:	4632      	mov	r2, r6
 80110d2:	463b      	mov	r3, r7
 80110d4:	e7e9      	b.n	80110aa <__ieee754_pow+0x1ba>
 80110d6:	3c01      	subs	r4, #1
 80110d8:	431c      	orrs	r4, r3
 80110da:	d016      	beq.n	801110a <__ieee754_pow+0x21a>
 80110dc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011168 <__ieee754_pow+0x278>
 80110e0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80110e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110e8:	f240 8112 	bls.w	8011310 <__ieee754_pow+0x420>
 80110ec:	4b28      	ldr	r3, [pc, #160]	@ (8011190 <__ieee754_pow+0x2a0>)
 80110ee:	459a      	cmp	sl, r3
 80110f0:	4b25      	ldr	r3, [pc, #148]	@ (8011188 <__ieee754_pow+0x298>)
 80110f2:	d916      	bls.n	8011122 <__ieee754_pow+0x232>
 80110f4:	4598      	cmp	r8, r3
 80110f6:	d80b      	bhi.n	8011110 <__ieee754_pow+0x220>
 80110f8:	f1b9 0f00 	cmp.w	r9, #0
 80110fc:	da0b      	bge.n	8011116 <__ieee754_pow+0x226>
 80110fe:	2000      	movs	r0, #0
 8011100:	b011      	add	sp, #68	@ 0x44
 8011102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011106:	f001 b847 	b.w	8012198 <__math_oflow>
 801110a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8011170 <__ieee754_pow+0x280>
 801110e:	e7e7      	b.n	80110e0 <__ieee754_pow+0x1f0>
 8011110:	f1b9 0f00 	cmp.w	r9, #0
 8011114:	dcf3      	bgt.n	80110fe <__ieee754_pow+0x20e>
 8011116:	2000      	movs	r0, #0
 8011118:	b011      	add	sp, #68	@ 0x44
 801111a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111e:	f001 b833 	b.w	8012188 <__math_uflow>
 8011122:	4598      	cmp	r8, r3
 8011124:	d20c      	bcs.n	8011140 <__ieee754_pow+0x250>
 8011126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801112a:	2200      	movs	r2, #0
 801112c:	2300      	movs	r3, #0
 801112e:	f7ef fcf5 	bl	8000b1c <__aeabi_dcmplt>
 8011132:	3800      	subs	r0, #0
 8011134:	bf18      	it	ne
 8011136:	2001      	movne	r0, #1
 8011138:	f1b9 0f00 	cmp.w	r9, #0
 801113c:	daec      	bge.n	8011118 <__ieee754_pow+0x228>
 801113e:	e7df      	b.n	8011100 <__ieee754_pow+0x210>
 8011140:	4b10      	ldr	r3, [pc, #64]	@ (8011184 <__ieee754_pow+0x294>)
 8011142:	4598      	cmp	r8, r3
 8011144:	f04f 0200 	mov.w	r2, #0
 8011148:	d924      	bls.n	8011194 <__ieee754_pow+0x2a4>
 801114a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801114e:	2300      	movs	r3, #0
 8011150:	f7ef fce4 	bl	8000b1c <__aeabi_dcmplt>
 8011154:	3800      	subs	r0, #0
 8011156:	bf18      	it	ne
 8011158:	2001      	movne	r0, #1
 801115a:	f1b9 0f00 	cmp.w	r9, #0
 801115e:	dccf      	bgt.n	8011100 <__ieee754_pow+0x210>
 8011160:	e7da      	b.n	8011118 <__ieee754_pow+0x228>
 8011162:	bf00      	nop
 8011164:	f3af 8000 	nop.w
 8011168:	00000000 	.word	0x00000000
 801116c:	3ff00000 	.word	0x3ff00000
 8011170:	00000000 	.word	0x00000000
 8011174:	bff00000 	.word	0xbff00000
 8011178:	fff00000 	.word	0xfff00000
 801117c:	7ff00000 	.word	0x7ff00000
 8011180:	433fffff 	.word	0x433fffff
 8011184:	3ff00000 	.word	0x3ff00000
 8011188:	3fefffff 	.word	0x3fefffff
 801118c:	3fe00000 	.word	0x3fe00000
 8011190:	43f00000 	.word	0x43f00000
 8011194:	4b5a      	ldr	r3, [pc, #360]	@ (8011300 <__ieee754_pow+0x410>)
 8011196:	f7ef f897 	bl	80002c8 <__aeabi_dsub>
 801119a:	a351      	add	r3, pc, #324	@ (adr r3, 80112e0 <__ieee754_pow+0x3f0>)
 801119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a0:	4604      	mov	r4, r0
 80111a2:	460d      	mov	r5, r1
 80111a4:	f7ef fa48 	bl	8000638 <__aeabi_dmul>
 80111a8:	a34f      	add	r3, pc, #316	@ (adr r3, 80112e8 <__ieee754_pow+0x3f8>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	4606      	mov	r6, r0
 80111b0:	460f      	mov	r7, r1
 80111b2:	4620      	mov	r0, r4
 80111b4:	4629      	mov	r1, r5
 80111b6:	f7ef fa3f 	bl	8000638 <__aeabi_dmul>
 80111ba:	4b52      	ldr	r3, [pc, #328]	@ (8011304 <__ieee754_pow+0x414>)
 80111bc:	4682      	mov	sl, r0
 80111be:	468b      	mov	fp, r1
 80111c0:	2200      	movs	r2, #0
 80111c2:	4620      	mov	r0, r4
 80111c4:	4629      	mov	r1, r5
 80111c6:	f7ef fa37 	bl	8000638 <__aeabi_dmul>
 80111ca:	4602      	mov	r2, r0
 80111cc:	460b      	mov	r3, r1
 80111ce:	a148      	add	r1, pc, #288	@ (adr r1, 80112f0 <__ieee754_pow+0x400>)
 80111d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111d4:	f7ef f878 	bl	80002c8 <__aeabi_dsub>
 80111d8:	4622      	mov	r2, r4
 80111da:	462b      	mov	r3, r5
 80111dc:	f7ef fa2c 	bl	8000638 <__aeabi_dmul>
 80111e0:	4602      	mov	r2, r0
 80111e2:	460b      	mov	r3, r1
 80111e4:	2000      	movs	r0, #0
 80111e6:	4948      	ldr	r1, [pc, #288]	@ (8011308 <__ieee754_pow+0x418>)
 80111e8:	f7ef f86e 	bl	80002c8 <__aeabi_dsub>
 80111ec:	4622      	mov	r2, r4
 80111ee:	4680      	mov	r8, r0
 80111f0:	4689      	mov	r9, r1
 80111f2:	462b      	mov	r3, r5
 80111f4:	4620      	mov	r0, r4
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7ef fa1e 	bl	8000638 <__aeabi_dmul>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	4640      	mov	r0, r8
 8011202:	4649      	mov	r1, r9
 8011204:	f7ef fa18 	bl	8000638 <__aeabi_dmul>
 8011208:	a33b      	add	r3, pc, #236	@ (adr r3, 80112f8 <__ieee754_pow+0x408>)
 801120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120e:	f7ef fa13 	bl	8000638 <__aeabi_dmul>
 8011212:	4602      	mov	r2, r0
 8011214:	460b      	mov	r3, r1
 8011216:	4650      	mov	r0, sl
 8011218:	4659      	mov	r1, fp
 801121a:	f7ef f855 	bl	80002c8 <__aeabi_dsub>
 801121e:	4602      	mov	r2, r0
 8011220:	460b      	mov	r3, r1
 8011222:	4680      	mov	r8, r0
 8011224:	4689      	mov	r9, r1
 8011226:	4630      	mov	r0, r6
 8011228:	4639      	mov	r1, r7
 801122a:	f7ef f84f 	bl	80002cc <__adddf3>
 801122e:	2400      	movs	r4, #0
 8011230:	4632      	mov	r2, r6
 8011232:	463b      	mov	r3, r7
 8011234:	4620      	mov	r0, r4
 8011236:	460d      	mov	r5, r1
 8011238:	f7ef f846 	bl	80002c8 <__aeabi_dsub>
 801123c:	4602      	mov	r2, r0
 801123e:	460b      	mov	r3, r1
 8011240:	4640      	mov	r0, r8
 8011242:	4649      	mov	r1, r9
 8011244:	f7ef f840 	bl	80002c8 <__aeabi_dsub>
 8011248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801124c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011250:	2300      	movs	r3, #0
 8011252:	9304      	str	r3, [sp, #16]
 8011254:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011258:	4606      	mov	r6, r0
 801125a:	460f      	mov	r7, r1
 801125c:	4652      	mov	r2, sl
 801125e:	465b      	mov	r3, fp
 8011260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011264:	f7ef f830 	bl	80002c8 <__aeabi_dsub>
 8011268:	4622      	mov	r2, r4
 801126a:	462b      	mov	r3, r5
 801126c:	f7ef f9e4 	bl	8000638 <__aeabi_dmul>
 8011270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011274:	4680      	mov	r8, r0
 8011276:	4689      	mov	r9, r1
 8011278:	4630      	mov	r0, r6
 801127a:	4639      	mov	r1, r7
 801127c:	f7ef f9dc 	bl	8000638 <__aeabi_dmul>
 8011280:	4602      	mov	r2, r0
 8011282:	460b      	mov	r3, r1
 8011284:	4640      	mov	r0, r8
 8011286:	4649      	mov	r1, r9
 8011288:	f7ef f820 	bl	80002cc <__adddf3>
 801128c:	4652      	mov	r2, sl
 801128e:	465b      	mov	r3, fp
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	f7ef f9ce 	bl	8000638 <__aeabi_dmul>
 801129c:	460b      	mov	r3, r1
 801129e:	4602      	mov	r2, r0
 80112a0:	4680      	mov	r8, r0
 80112a2:	4689      	mov	r9, r1
 80112a4:	4630      	mov	r0, r6
 80112a6:	4639      	mov	r1, r7
 80112a8:	f7ef f810 	bl	80002cc <__adddf3>
 80112ac:	4b17      	ldr	r3, [pc, #92]	@ (801130c <__ieee754_pow+0x41c>)
 80112ae:	4299      	cmp	r1, r3
 80112b0:	4604      	mov	r4, r0
 80112b2:	460d      	mov	r5, r1
 80112b4:	468a      	mov	sl, r1
 80112b6:	468b      	mov	fp, r1
 80112b8:	f340 82ef 	ble.w	801189a <__ieee754_pow+0x9aa>
 80112bc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80112c0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80112c4:	4303      	orrs	r3, r0
 80112c6:	f000 81e8 	beq.w	801169a <__ieee754_pow+0x7aa>
 80112ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ce:	2200      	movs	r2, #0
 80112d0:	2300      	movs	r3, #0
 80112d2:	f7ef fc23 	bl	8000b1c <__aeabi_dcmplt>
 80112d6:	3800      	subs	r0, #0
 80112d8:	bf18      	it	ne
 80112da:	2001      	movne	r0, #1
 80112dc:	e710      	b.n	8011100 <__ieee754_pow+0x210>
 80112de:	bf00      	nop
 80112e0:	60000000 	.word	0x60000000
 80112e4:	3ff71547 	.word	0x3ff71547
 80112e8:	f85ddf44 	.word	0xf85ddf44
 80112ec:	3e54ae0b 	.word	0x3e54ae0b
 80112f0:	55555555 	.word	0x55555555
 80112f4:	3fd55555 	.word	0x3fd55555
 80112f8:	652b82fe 	.word	0x652b82fe
 80112fc:	3ff71547 	.word	0x3ff71547
 8011300:	3ff00000 	.word	0x3ff00000
 8011304:	3fd00000 	.word	0x3fd00000
 8011308:	3fe00000 	.word	0x3fe00000
 801130c:	408fffff 	.word	0x408fffff
 8011310:	4bd5      	ldr	r3, [pc, #852]	@ (8011668 <__ieee754_pow+0x778>)
 8011312:	402b      	ands	r3, r5
 8011314:	2200      	movs	r2, #0
 8011316:	b92b      	cbnz	r3, 8011324 <__ieee754_pow+0x434>
 8011318:	4bd4      	ldr	r3, [pc, #848]	@ (801166c <__ieee754_pow+0x77c>)
 801131a:	f7ef f98d 	bl	8000638 <__aeabi_dmul>
 801131e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8011322:	468b      	mov	fp, r1
 8011324:	ea4f 532b 	mov.w	r3, fp, asr #20
 8011328:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801132c:	4413      	add	r3, r2
 801132e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011330:	4bcf      	ldr	r3, [pc, #828]	@ (8011670 <__ieee754_pow+0x780>)
 8011332:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8011336:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801133a:	459b      	cmp	fp, r3
 801133c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011340:	dd08      	ble.n	8011354 <__ieee754_pow+0x464>
 8011342:	4bcc      	ldr	r3, [pc, #816]	@ (8011674 <__ieee754_pow+0x784>)
 8011344:	459b      	cmp	fp, r3
 8011346:	f340 81a5 	ble.w	8011694 <__ieee754_pow+0x7a4>
 801134a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801134c:	3301      	adds	r3, #1
 801134e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011350:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8011354:	f04f 0a00 	mov.w	sl, #0
 8011358:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801135c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801135e:	4bc6      	ldr	r3, [pc, #792]	@ (8011678 <__ieee754_pow+0x788>)
 8011360:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011364:	ed93 7b00 	vldr	d7, [r3]
 8011368:	4629      	mov	r1, r5
 801136a:	ec53 2b17 	vmov	r2, r3, d7
 801136e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011372:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011376:	f7ee ffa7 	bl	80002c8 <__aeabi_dsub>
 801137a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801137e:	4606      	mov	r6, r0
 8011380:	460f      	mov	r7, r1
 8011382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011386:	f7ee ffa1 	bl	80002cc <__adddf3>
 801138a:	4602      	mov	r2, r0
 801138c:	460b      	mov	r3, r1
 801138e:	2000      	movs	r0, #0
 8011390:	49ba      	ldr	r1, [pc, #744]	@ (801167c <__ieee754_pow+0x78c>)
 8011392:	f7ef fa7b 	bl	800088c <__aeabi_ddiv>
 8011396:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	4630      	mov	r0, r6
 80113a0:	4639      	mov	r1, r7
 80113a2:	f7ef f949 	bl	8000638 <__aeabi_dmul>
 80113a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80113ae:	106d      	asrs	r5, r5, #1
 80113b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80113b4:	f04f 0b00 	mov.w	fp, #0
 80113b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80113bc:	4661      	mov	r1, ip
 80113be:	2200      	movs	r2, #0
 80113c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80113c4:	4658      	mov	r0, fp
 80113c6:	46e1      	mov	r9, ip
 80113c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80113cc:	4614      	mov	r4, r2
 80113ce:	461d      	mov	r5, r3
 80113d0:	f7ef f932 	bl	8000638 <__aeabi_dmul>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4630      	mov	r0, r6
 80113da:	4639      	mov	r1, r7
 80113dc:	f7ee ff74 	bl	80002c8 <__aeabi_dsub>
 80113e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80113e4:	4606      	mov	r6, r0
 80113e6:	460f      	mov	r7, r1
 80113e8:	4620      	mov	r0, r4
 80113ea:	4629      	mov	r1, r5
 80113ec:	f7ee ff6c 	bl	80002c8 <__aeabi_dsub>
 80113f0:	4602      	mov	r2, r0
 80113f2:	460b      	mov	r3, r1
 80113f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80113f8:	f7ee ff66 	bl	80002c8 <__aeabi_dsub>
 80113fc:	465a      	mov	r2, fp
 80113fe:	464b      	mov	r3, r9
 8011400:	f7ef f91a 	bl	8000638 <__aeabi_dmul>
 8011404:	4602      	mov	r2, r0
 8011406:	460b      	mov	r3, r1
 8011408:	4630      	mov	r0, r6
 801140a:	4639      	mov	r1, r7
 801140c:	f7ee ff5c 	bl	80002c8 <__aeabi_dsub>
 8011410:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011414:	f7ef f910 	bl	8000638 <__aeabi_dmul>
 8011418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801141c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011420:	4610      	mov	r0, r2
 8011422:	4619      	mov	r1, r3
 8011424:	f7ef f908 	bl	8000638 <__aeabi_dmul>
 8011428:	a37d      	add	r3, pc, #500	@ (adr r3, 8011620 <__ieee754_pow+0x730>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	4604      	mov	r4, r0
 8011430:	460d      	mov	r5, r1
 8011432:	f7ef f901 	bl	8000638 <__aeabi_dmul>
 8011436:	a37c      	add	r3, pc, #496	@ (adr r3, 8011628 <__ieee754_pow+0x738>)
 8011438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143c:	f7ee ff46 	bl	80002cc <__adddf3>
 8011440:	4622      	mov	r2, r4
 8011442:	462b      	mov	r3, r5
 8011444:	f7ef f8f8 	bl	8000638 <__aeabi_dmul>
 8011448:	a379      	add	r3, pc, #484	@ (adr r3, 8011630 <__ieee754_pow+0x740>)
 801144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144e:	f7ee ff3d 	bl	80002cc <__adddf3>
 8011452:	4622      	mov	r2, r4
 8011454:	462b      	mov	r3, r5
 8011456:	f7ef f8ef 	bl	8000638 <__aeabi_dmul>
 801145a:	a377      	add	r3, pc, #476	@ (adr r3, 8011638 <__ieee754_pow+0x748>)
 801145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011460:	f7ee ff34 	bl	80002cc <__adddf3>
 8011464:	4622      	mov	r2, r4
 8011466:	462b      	mov	r3, r5
 8011468:	f7ef f8e6 	bl	8000638 <__aeabi_dmul>
 801146c:	a374      	add	r3, pc, #464	@ (adr r3, 8011640 <__ieee754_pow+0x750>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	f7ee ff2b 	bl	80002cc <__adddf3>
 8011476:	4622      	mov	r2, r4
 8011478:	462b      	mov	r3, r5
 801147a:	f7ef f8dd 	bl	8000638 <__aeabi_dmul>
 801147e:	a372      	add	r3, pc, #456	@ (adr r3, 8011648 <__ieee754_pow+0x758>)
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	f7ee ff22 	bl	80002cc <__adddf3>
 8011488:	4622      	mov	r2, r4
 801148a:	4606      	mov	r6, r0
 801148c:	460f      	mov	r7, r1
 801148e:	462b      	mov	r3, r5
 8011490:	4620      	mov	r0, r4
 8011492:	4629      	mov	r1, r5
 8011494:	f7ef f8d0 	bl	8000638 <__aeabi_dmul>
 8011498:	4602      	mov	r2, r0
 801149a:	460b      	mov	r3, r1
 801149c:	4630      	mov	r0, r6
 801149e:	4639      	mov	r1, r7
 80114a0:	f7ef f8ca 	bl	8000638 <__aeabi_dmul>
 80114a4:	465a      	mov	r2, fp
 80114a6:	4604      	mov	r4, r0
 80114a8:	460d      	mov	r5, r1
 80114aa:	464b      	mov	r3, r9
 80114ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80114b0:	f7ee ff0c 	bl	80002cc <__adddf3>
 80114b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80114b8:	f7ef f8be 	bl	8000638 <__aeabi_dmul>
 80114bc:	4622      	mov	r2, r4
 80114be:	462b      	mov	r3, r5
 80114c0:	f7ee ff04 	bl	80002cc <__adddf3>
 80114c4:	465a      	mov	r2, fp
 80114c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80114ca:	464b      	mov	r3, r9
 80114cc:	4658      	mov	r0, fp
 80114ce:	4649      	mov	r1, r9
 80114d0:	f7ef f8b2 	bl	8000638 <__aeabi_dmul>
 80114d4:	4b6a      	ldr	r3, [pc, #424]	@ (8011680 <__ieee754_pow+0x790>)
 80114d6:	2200      	movs	r2, #0
 80114d8:	4606      	mov	r6, r0
 80114da:	460f      	mov	r7, r1
 80114dc:	f7ee fef6 	bl	80002cc <__adddf3>
 80114e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80114e4:	f7ee fef2 	bl	80002cc <__adddf3>
 80114e8:	46d8      	mov	r8, fp
 80114ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80114ee:	460d      	mov	r5, r1
 80114f0:	465a      	mov	r2, fp
 80114f2:	460b      	mov	r3, r1
 80114f4:	4640      	mov	r0, r8
 80114f6:	4649      	mov	r1, r9
 80114f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80114fc:	f7ef f89c 	bl	8000638 <__aeabi_dmul>
 8011500:	465c      	mov	r4, fp
 8011502:	4680      	mov	r8, r0
 8011504:	4689      	mov	r9, r1
 8011506:	4b5e      	ldr	r3, [pc, #376]	@ (8011680 <__ieee754_pow+0x790>)
 8011508:	2200      	movs	r2, #0
 801150a:	4620      	mov	r0, r4
 801150c:	4629      	mov	r1, r5
 801150e:	f7ee fedb 	bl	80002c8 <__aeabi_dsub>
 8011512:	4632      	mov	r2, r6
 8011514:	463b      	mov	r3, r7
 8011516:	f7ee fed7 	bl	80002c8 <__aeabi_dsub>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011522:	f7ee fed1 	bl	80002c8 <__aeabi_dsub>
 8011526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801152a:	f7ef f885 	bl	8000638 <__aeabi_dmul>
 801152e:	4622      	mov	r2, r4
 8011530:	4606      	mov	r6, r0
 8011532:	460f      	mov	r7, r1
 8011534:	462b      	mov	r3, r5
 8011536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801153a:	f7ef f87d 	bl	8000638 <__aeabi_dmul>
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	4630      	mov	r0, r6
 8011544:	4639      	mov	r1, r7
 8011546:	f7ee fec1 	bl	80002cc <__adddf3>
 801154a:	4606      	mov	r6, r0
 801154c:	460f      	mov	r7, r1
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ee feb9 	bl	80002cc <__adddf3>
 801155a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801155e:	a33c      	add	r3, pc, #240	@ (adr r3, 8011650 <__ieee754_pow+0x760>)
 8011560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011564:	4658      	mov	r0, fp
 8011566:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801156a:	460d      	mov	r5, r1
 801156c:	f7ef f864 	bl	8000638 <__aeabi_dmul>
 8011570:	465c      	mov	r4, fp
 8011572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011576:	4642      	mov	r2, r8
 8011578:	464b      	mov	r3, r9
 801157a:	4620      	mov	r0, r4
 801157c:	4629      	mov	r1, r5
 801157e:	f7ee fea3 	bl	80002c8 <__aeabi_dsub>
 8011582:	4602      	mov	r2, r0
 8011584:	460b      	mov	r3, r1
 8011586:	4630      	mov	r0, r6
 8011588:	4639      	mov	r1, r7
 801158a:	f7ee fe9d 	bl	80002c8 <__aeabi_dsub>
 801158e:	a332      	add	r3, pc, #200	@ (adr r3, 8011658 <__ieee754_pow+0x768>)
 8011590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011594:	f7ef f850 	bl	8000638 <__aeabi_dmul>
 8011598:	a331      	add	r3, pc, #196	@ (adr r3, 8011660 <__ieee754_pow+0x770>)
 801159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159e:	4606      	mov	r6, r0
 80115a0:	460f      	mov	r7, r1
 80115a2:	4620      	mov	r0, r4
 80115a4:	4629      	mov	r1, r5
 80115a6:	f7ef f847 	bl	8000638 <__aeabi_dmul>
 80115aa:	4602      	mov	r2, r0
 80115ac:	460b      	mov	r3, r1
 80115ae:	4630      	mov	r0, r6
 80115b0:	4639      	mov	r1, r7
 80115b2:	f7ee fe8b 	bl	80002cc <__adddf3>
 80115b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115b8:	4b32      	ldr	r3, [pc, #200]	@ (8011684 <__ieee754_pow+0x794>)
 80115ba:	4413      	add	r3, r2
 80115bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c0:	f7ee fe84 	bl	80002cc <__adddf3>
 80115c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80115c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80115ca:	f7ee ffcb 	bl	8000564 <__aeabi_i2d>
 80115ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115d0:	4b2d      	ldr	r3, [pc, #180]	@ (8011688 <__ieee754_pow+0x798>)
 80115d2:	4413      	add	r3, r2
 80115d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115d8:	4606      	mov	r6, r0
 80115da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115de:	460f      	mov	r7, r1
 80115e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115e4:	f7ee fe72 	bl	80002cc <__adddf3>
 80115e8:	4642      	mov	r2, r8
 80115ea:	464b      	mov	r3, r9
 80115ec:	f7ee fe6e 	bl	80002cc <__adddf3>
 80115f0:	4632      	mov	r2, r6
 80115f2:	463b      	mov	r3, r7
 80115f4:	f7ee fe6a 	bl	80002cc <__adddf3>
 80115f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80115fc:	4632      	mov	r2, r6
 80115fe:	463b      	mov	r3, r7
 8011600:	4658      	mov	r0, fp
 8011602:	460d      	mov	r5, r1
 8011604:	f7ee fe60 	bl	80002c8 <__aeabi_dsub>
 8011608:	4642      	mov	r2, r8
 801160a:	464b      	mov	r3, r9
 801160c:	f7ee fe5c 	bl	80002c8 <__aeabi_dsub>
 8011610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011614:	f7ee fe58 	bl	80002c8 <__aeabi_dsub>
 8011618:	465c      	mov	r4, fp
 801161a:	4602      	mov	r2, r0
 801161c:	e036      	b.n	801168c <__ieee754_pow+0x79c>
 801161e:	bf00      	nop
 8011620:	4a454eef 	.word	0x4a454eef
 8011624:	3fca7e28 	.word	0x3fca7e28
 8011628:	93c9db65 	.word	0x93c9db65
 801162c:	3fcd864a 	.word	0x3fcd864a
 8011630:	a91d4101 	.word	0xa91d4101
 8011634:	3fd17460 	.word	0x3fd17460
 8011638:	518f264d 	.word	0x518f264d
 801163c:	3fd55555 	.word	0x3fd55555
 8011640:	db6fabff 	.word	0xdb6fabff
 8011644:	3fdb6db6 	.word	0x3fdb6db6
 8011648:	33333303 	.word	0x33333303
 801164c:	3fe33333 	.word	0x3fe33333
 8011650:	e0000000 	.word	0xe0000000
 8011654:	3feec709 	.word	0x3feec709
 8011658:	dc3a03fd 	.word	0xdc3a03fd
 801165c:	3feec709 	.word	0x3feec709
 8011660:	145b01f5 	.word	0x145b01f5
 8011664:	be3e2fe0 	.word	0xbe3e2fe0
 8011668:	7ff00000 	.word	0x7ff00000
 801166c:	43400000 	.word	0x43400000
 8011670:	0003988e 	.word	0x0003988e
 8011674:	000bb679 	.word	0x000bb679
 8011678:	080127e8 	.word	0x080127e8
 801167c:	3ff00000 	.word	0x3ff00000
 8011680:	40080000 	.word	0x40080000
 8011684:	080127c8 	.word	0x080127c8
 8011688:	080127d8 	.word	0x080127d8
 801168c:	460b      	mov	r3, r1
 801168e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011692:	e5d7      	b.n	8011244 <__ieee754_pow+0x354>
 8011694:	f04f 0a01 	mov.w	sl, #1
 8011698:	e65e      	b.n	8011358 <__ieee754_pow+0x468>
 801169a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801196c <__ieee754_pow+0xa7c>)
 801169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a0:	4630      	mov	r0, r6
 80116a2:	4639      	mov	r1, r7
 80116a4:	f7ee fe12 	bl	80002cc <__adddf3>
 80116a8:	4642      	mov	r2, r8
 80116aa:	e9cd 0100 	strd	r0, r1, [sp]
 80116ae:	464b      	mov	r3, r9
 80116b0:	4620      	mov	r0, r4
 80116b2:	4629      	mov	r1, r5
 80116b4:	f7ee fe08 	bl	80002c8 <__aeabi_dsub>
 80116b8:	4602      	mov	r2, r0
 80116ba:	460b      	mov	r3, r1
 80116bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116c0:	f7ef fa4a 	bl	8000b58 <__aeabi_dcmpgt>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	f47f ae00 	bne.w	80112ca <__ieee754_pow+0x3da>
 80116ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80116ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80116d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80116d6:	fa43 fa0a 	asr.w	sl, r3, sl
 80116da:	44da      	add	sl, fp
 80116dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80116e0:	489d      	ldr	r0, [pc, #628]	@ (8011958 <__ieee754_pow+0xa68>)
 80116e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80116e6:	4108      	asrs	r0, r1
 80116e8:	ea00 030a 	and.w	r3, r0, sl
 80116ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80116f0:	f1c1 0114 	rsb	r1, r1, #20
 80116f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80116f8:	fa4a fa01 	asr.w	sl, sl, r1
 80116fc:	f1bb 0f00 	cmp.w	fp, #0
 8011700:	4640      	mov	r0, r8
 8011702:	4649      	mov	r1, r9
 8011704:	f04f 0200 	mov.w	r2, #0
 8011708:	bfb8      	it	lt
 801170a:	f1ca 0a00 	rsblt	sl, sl, #0
 801170e:	f7ee fddb 	bl	80002c8 <__aeabi_dsub>
 8011712:	4680      	mov	r8, r0
 8011714:	4689      	mov	r9, r1
 8011716:	4632      	mov	r2, r6
 8011718:	463b      	mov	r3, r7
 801171a:	4640      	mov	r0, r8
 801171c:	4649      	mov	r1, r9
 801171e:	f7ee fdd5 	bl	80002cc <__adddf3>
 8011722:	2400      	movs	r4, #0
 8011724:	a37c      	add	r3, pc, #496	@ (adr r3, 8011918 <__ieee754_pow+0xa28>)
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	4620      	mov	r0, r4
 801172c:	460d      	mov	r5, r1
 801172e:	f7ee ff83 	bl	8000638 <__aeabi_dmul>
 8011732:	4642      	mov	r2, r8
 8011734:	e9cd 0100 	strd	r0, r1, [sp]
 8011738:	464b      	mov	r3, r9
 801173a:	4620      	mov	r0, r4
 801173c:	4629      	mov	r1, r5
 801173e:	f7ee fdc3 	bl	80002c8 <__aeabi_dsub>
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	4630      	mov	r0, r6
 8011748:	4639      	mov	r1, r7
 801174a:	f7ee fdbd 	bl	80002c8 <__aeabi_dsub>
 801174e:	a374      	add	r3, pc, #464	@ (adr r3, 8011920 <__ieee754_pow+0xa30>)
 8011750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011754:	f7ee ff70 	bl	8000638 <__aeabi_dmul>
 8011758:	a373      	add	r3, pc, #460	@ (adr r3, 8011928 <__ieee754_pow+0xa38>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	4680      	mov	r8, r0
 8011760:	4689      	mov	r9, r1
 8011762:	4620      	mov	r0, r4
 8011764:	4629      	mov	r1, r5
 8011766:	f7ee ff67 	bl	8000638 <__aeabi_dmul>
 801176a:	4602      	mov	r2, r0
 801176c:	460b      	mov	r3, r1
 801176e:	4640      	mov	r0, r8
 8011770:	4649      	mov	r1, r9
 8011772:	f7ee fdab 	bl	80002cc <__adddf3>
 8011776:	4604      	mov	r4, r0
 8011778:	460d      	mov	r5, r1
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011782:	f7ee fda3 	bl	80002cc <__adddf3>
 8011786:	e9dd 2300 	ldrd	r2, r3, [sp]
 801178a:	4680      	mov	r8, r0
 801178c:	4689      	mov	r9, r1
 801178e:	f7ee fd9b 	bl	80002c8 <__aeabi_dsub>
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	4620      	mov	r0, r4
 8011798:	4629      	mov	r1, r5
 801179a:	f7ee fd95 	bl	80002c8 <__aeabi_dsub>
 801179e:	4642      	mov	r2, r8
 80117a0:	4606      	mov	r6, r0
 80117a2:	460f      	mov	r7, r1
 80117a4:	464b      	mov	r3, r9
 80117a6:	4640      	mov	r0, r8
 80117a8:	4649      	mov	r1, r9
 80117aa:	f7ee ff45 	bl	8000638 <__aeabi_dmul>
 80117ae:	a360      	add	r3, pc, #384	@ (adr r3, 8011930 <__ieee754_pow+0xa40>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	4604      	mov	r4, r0
 80117b6:	460d      	mov	r5, r1
 80117b8:	f7ee ff3e 	bl	8000638 <__aeabi_dmul>
 80117bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8011938 <__ieee754_pow+0xa48>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	f7ee fd81 	bl	80002c8 <__aeabi_dsub>
 80117c6:	4622      	mov	r2, r4
 80117c8:	462b      	mov	r3, r5
 80117ca:	f7ee ff35 	bl	8000638 <__aeabi_dmul>
 80117ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8011940 <__ieee754_pow+0xa50>)
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f7ee fd7a 	bl	80002cc <__adddf3>
 80117d8:	4622      	mov	r2, r4
 80117da:	462b      	mov	r3, r5
 80117dc:	f7ee ff2c 	bl	8000638 <__aeabi_dmul>
 80117e0:	a359      	add	r3, pc, #356	@ (adr r3, 8011948 <__ieee754_pow+0xa58>)
 80117e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e6:	f7ee fd6f 	bl	80002c8 <__aeabi_dsub>
 80117ea:	4622      	mov	r2, r4
 80117ec:	462b      	mov	r3, r5
 80117ee:	f7ee ff23 	bl	8000638 <__aeabi_dmul>
 80117f2:	a357      	add	r3, pc, #348	@ (adr r3, 8011950 <__ieee754_pow+0xa60>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	f7ee fd68 	bl	80002cc <__adddf3>
 80117fc:	4622      	mov	r2, r4
 80117fe:	462b      	mov	r3, r5
 8011800:	f7ee ff1a 	bl	8000638 <__aeabi_dmul>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	4640      	mov	r0, r8
 801180a:	4649      	mov	r1, r9
 801180c:	f7ee fd5c 	bl	80002c8 <__aeabi_dsub>
 8011810:	4604      	mov	r4, r0
 8011812:	460d      	mov	r5, r1
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	4640      	mov	r0, r8
 801181a:	4649      	mov	r1, r9
 801181c:	f7ee ff0c 	bl	8000638 <__aeabi_dmul>
 8011820:	2200      	movs	r2, #0
 8011822:	e9cd 0100 	strd	r0, r1, [sp]
 8011826:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801182a:	4620      	mov	r0, r4
 801182c:	4629      	mov	r1, r5
 801182e:	f7ee fd4b 	bl	80002c8 <__aeabi_dsub>
 8011832:	4602      	mov	r2, r0
 8011834:	460b      	mov	r3, r1
 8011836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801183a:	f7ef f827 	bl	800088c <__aeabi_ddiv>
 801183e:	4632      	mov	r2, r6
 8011840:	4604      	mov	r4, r0
 8011842:	460d      	mov	r5, r1
 8011844:	463b      	mov	r3, r7
 8011846:	4640      	mov	r0, r8
 8011848:	4649      	mov	r1, r9
 801184a:	f7ee fef5 	bl	8000638 <__aeabi_dmul>
 801184e:	4632      	mov	r2, r6
 8011850:	463b      	mov	r3, r7
 8011852:	f7ee fd3b 	bl	80002cc <__adddf3>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	4620      	mov	r0, r4
 801185c:	4629      	mov	r1, r5
 801185e:	f7ee fd33 	bl	80002c8 <__aeabi_dsub>
 8011862:	4642      	mov	r2, r8
 8011864:	464b      	mov	r3, r9
 8011866:	f7ee fd2f 	bl	80002c8 <__aeabi_dsub>
 801186a:	460b      	mov	r3, r1
 801186c:	4602      	mov	r2, r0
 801186e:	493b      	ldr	r1, [pc, #236]	@ (801195c <__ieee754_pow+0xa6c>)
 8011870:	2000      	movs	r0, #0
 8011872:	f7ee fd29 	bl	80002c8 <__aeabi_dsub>
 8011876:	ec41 0b10 	vmov	d0, r0, r1
 801187a:	ee10 3a90 	vmov	r3, s1
 801187e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011886:	da30      	bge.n	80118ea <__ieee754_pow+0x9fa>
 8011888:	4650      	mov	r0, sl
 801188a:	f000 fbd1 	bl	8012030 <scalbn>
 801188e:	ec51 0b10 	vmov	r0, r1, d0
 8011892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011896:	f7ff bbd2 	b.w	801103e <__ieee754_pow+0x14e>
 801189a:	4c31      	ldr	r4, [pc, #196]	@ (8011960 <__ieee754_pow+0xa70>)
 801189c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d91a      	bls.n	80118da <__ieee754_pow+0x9ea>
 80118a4:	4b2f      	ldr	r3, [pc, #188]	@ (8011964 <__ieee754_pow+0xa74>)
 80118a6:	440b      	add	r3, r1
 80118a8:	4303      	orrs	r3, r0
 80118aa:	d009      	beq.n	80118c0 <__ieee754_pow+0x9d0>
 80118ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118b0:	2200      	movs	r2, #0
 80118b2:	2300      	movs	r3, #0
 80118b4:	f7ef f932 	bl	8000b1c <__aeabi_dcmplt>
 80118b8:	3800      	subs	r0, #0
 80118ba:	bf18      	it	ne
 80118bc:	2001      	movne	r0, #1
 80118be:	e42b      	b.n	8011118 <__ieee754_pow+0x228>
 80118c0:	4642      	mov	r2, r8
 80118c2:	464b      	mov	r3, r9
 80118c4:	f7ee fd00 	bl	80002c8 <__aeabi_dsub>
 80118c8:	4632      	mov	r2, r6
 80118ca:	463b      	mov	r3, r7
 80118cc:	f7ef f93a 	bl	8000b44 <__aeabi_dcmpge>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d1eb      	bne.n	80118ac <__ieee754_pow+0x9bc>
 80118d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8011974 <__ieee754_pow+0xa84>
 80118d8:	e6f7      	b.n	80116ca <__ieee754_pow+0x7da>
 80118da:	469a      	mov	sl, r3
 80118dc:	4b22      	ldr	r3, [pc, #136]	@ (8011968 <__ieee754_pow+0xa78>)
 80118de:	459a      	cmp	sl, r3
 80118e0:	f63f aef3 	bhi.w	80116ca <__ieee754_pow+0x7da>
 80118e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80118e8:	e715      	b.n	8011716 <__ieee754_pow+0x826>
 80118ea:	ec51 0b10 	vmov	r0, r1, d0
 80118ee:	4619      	mov	r1, r3
 80118f0:	e7cf      	b.n	8011892 <__ieee754_pow+0x9a2>
 80118f2:	491a      	ldr	r1, [pc, #104]	@ (801195c <__ieee754_pow+0xa6c>)
 80118f4:	2000      	movs	r0, #0
 80118f6:	f7ff bb18 	b.w	8010f2a <__ieee754_pow+0x3a>
 80118fa:	2000      	movs	r0, #0
 80118fc:	2100      	movs	r1, #0
 80118fe:	f7ff bb14 	b.w	8010f2a <__ieee754_pow+0x3a>
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ff bb10 	b.w	8010f2a <__ieee754_pow+0x3a>
 801190a:	460c      	mov	r4, r1
 801190c:	f7ff bb5e 	b.w	8010fcc <__ieee754_pow+0xdc>
 8011910:	2400      	movs	r4, #0
 8011912:	f7ff bb49 	b.w	8010fa8 <__ieee754_pow+0xb8>
 8011916:	bf00      	nop
 8011918:	00000000 	.word	0x00000000
 801191c:	3fe62e43 	.word	0x3fe62e43
 8011920:	fefa39ef 	.word	0xfefa39ef
 8011924:	3fe62e42 	.word	0x3fe62e42
 8011928:	0ca86c39 	.word	0x0ca86c39
 801192c:	be205c61 	.word	0xbe205c61
 8011930:	72bea4d0 	.word	0x72bea4d0
 8011934:	3e663769 	.word	0x3e663769
 8011938:	c5d26bf1 	.word	0xc5d26bf1
 801193c:	3ebbbd41 	.word	0x3ebbbd41
 8011940:	af25de2c 	.word	0xaf25de2c
 8011944:	3f11566a 	.word	0x3f11566a
 8011948:	16bebd93 	.word	0x16bebd93
 801194c:	3f66c16c 	.word	0x3f66c16c
 8011950:	5555553e 	.word	0x5555553e
 8011954:	3fc55555 	.word	0x3fc55555
 8011958:	fff00000 	.word	0xfff00000
 801195c:	3ff00000 	.word	0x3ff00000
 8011960:	4090cbff 	.word	0x4090cbff
 8011964:	3f6f3400 	.word	0x3f6f3400
 8011968:	3fe00000 	.word	0x3fe00000
 801196c:	652b82fe 	.word	0x652b82fe
 8011970:	3c971547 	.word	0x3c971547
 8011974:	4090cc00 	.word	0x4090cc00

08011978 <fabs>:
 8011978:	ec51 0b10 	vmov	r0, r1, d0
 801197c:	4602      	mov	r2, r0
 801197e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011982:	ec43 2b10 	vmov	d0, r2, r3
 8011986:	4770      	bx	lr

08011988 <__ieee754_acosf>:
 8011988:	b508      	push	{r3, lr}
 801198a:	ee10 3a10 	vmov	r3, s0
 801198e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011992:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011996:	ed2d 8b0c 	vpush	{d8-d13}
 801199a:	d10a      	bne.n	80119b2 <__ieee754_acosf+0x2a>
 801199c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8011b34 <__ieee754_acosf+0x1ac>
 80119a0:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8011b38 <__ieee754_acosf+0x1b0>
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	bfc8      	it	gt
 80119a8:	eeb0 0a67 	vmovgt.f32	s0, s15
 80119ac:	ecbd 8b0c 	vpop	{d8-d13}
 80119b0:	bd08      	pop	{r3, pc}
 80119b2:	d904      	bls.n	80119be <__ieee754_acosf+0x36>
 80119b4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80119b8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80119bc:	e7f6      	b.n	80119ac <__ieee754_acosf+0x24>
 80119be:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80119c2:	d23c      	bcs.n	8011a3e <__ieee754_acosf+0xb6>
 80119c4:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80119c8:	f240 80b1 	bls.w	8011b2e <__ieee754_acosf+0x1a6>
 80119cc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80119d0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8011b3c <__ieee754_acosf+0x1b4>
 80119d4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8011b40 <__ieee754_acosf+0x1b8>
 80119d8:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8011b44 <__ieee754_acosf+0x1bc>
 80119dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80119e0:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8011b48 <__ieee754_acosf+0x1c0>
 80119e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119e8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011b4c <__ieee754_acosf+0x1c4>
 80119ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119f0:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8011b50 <__ieee754_acosf+0x1c8>
 80119f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119f8:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8011b54 <__ieee754_acosf+0x1cc>
 80119fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a00:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8011b58 <__ieee754_acosf+0x1d0>
 8011a04:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011a08:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8011b5c <__ieee754_acosf+0x1d4>
 8011a0c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011a10:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8011b60 <__ieee754_acosf+0x1d8>
 8011a14:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a1c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a24:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8011b64 <__ieee754_acosf+0x1dc>
 8011a28:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8011a2c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8011a30:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011a34:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8011b68 <__ieee754_acosf+0x1e0>
 8011a38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a3c:	e7b6      	b.n	80119ac <__ieee754_acosf+0x24>
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	eddf da3e 	vldr	s27, [pc, #248]	@ 8011b3c <__ieee754_acosf+0x1b4>
 8011a44:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8011b40 <__ieee754_acosf+0x1b8>
 8011a48:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8011b48 <__ieee754_acosf+0x1c0>
 8011a4c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8011b4c <__ieee754_acosf+0x1c4>
 8011a50:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8011b50 <__ieee754_acosf+0x1c8>
 8011a54:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8011b54 <__ieee754_acosf+0x1cc>
 8011a58:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8011b58 <__ieee754_acosf+0x1d0>
 8011a5c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8011b44 <__ieee754_acosf+0x1bc>
 8011a60:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8011b5c <__ieee754_acosf+0x1d4>
 8011a64:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8011b60 <__ieee754_acosf+0x1d8>
 8011a68:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8011a6c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011a70:	da28      	bge.n	8011ac4 <__ieee754_acosf+0x13c>
 8011a72:	ee30 8a09 	vadd.f32	s16, s0, s18
 8011a76:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011a7a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011a7e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8011a82:	eeac ca80 	vfma.f32	s24, s25, s0
 8011a86:	eeaa aa80 	vfma.f32	s20, s21, s0
 8011a8a:	eeec ba00 	vfma.f32	s23, s24, s0
 8011a8e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8011a92:	eeab ba80 	vfma.f32	s22, s23, s0
 8011a96:	eea9 9a80 	vfma.f32	s18, s19, s0
 8011a9a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011a9e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011aa2:	f7ff f9a3 	bl	8010dec <__ieee754_sqrtf>
 8011aa6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8011aaa:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8011b6c <__ieee754_acosf+0x1e4>
 8011aae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011ab2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8011ab6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011aba:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8011b70 <__ieee754_acosf+0x1e8>
 8011abe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011ac2:	e773      	b.n	80119ac <__ieee754_acosf+0x24>
 8011ac4:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011ac8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011acc:	eeb0 0a48 	vmov.f32	s0, s16
 8011ad0:	f7ff f98c 	bl	8010dec <__ieee754_sqrtf>
 8011ad4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8011ad8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8011adc:	eeac ca88 	vfma.f32	s24, s25, s16
 8011ae0:	eeaa aa88 	vfma.f32	s20, s21, s16
 8011ae4:	eeec ba08 	vfma.f32	s23, s24, s16
 8011ae8:	ee10 3a10 	vmov	r3, s0
 8011aec:	eeab ba88 	vfma.f32	s22, s23, s16
 8011af0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011af4:	f023 030f 	bic.w	r3, r3, #15
 8011af8:	eeea 9a08 	vfma.f32	s19, s20, s16
 8011afc:	ee07 3a90 	vmov	s15, r3
 8011b00:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011b04:	eeb0 6a48 	vmov.f32	s12, s16
 8011b08:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8011b0c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011b10:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011b14:	ee68 8a88 	vmul.f32	s17, s17, s16
 8011b18:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011b1c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011b20:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011b24:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011b28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b2c:	e73e      	b.n	80119ac <__ieee754_acosf+0x24>
 8011b2e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8011b74 <__ieee754_acosf+0x1ec>
 8011b32:	e73b      	b.n	80119ac <__ieee754_acosf+0x24>
 8011b34:	40490fdb 	.word	0x40490fdb
 8011b38:	00000000 	.word	0x00000000
 8011b3c:	3811ef08 	.word	0x3811ef08
 8011b40:	3a4f7f04 	.word	0x3a4f7f04
 8011b44:	bf303361 	.word	0xbf303361
 8011b48:	bd241146 	.word	0xbd241146
 8011b4c:	3e4e0aa8 	.word	0x3e4e0aa8
 8011b50:	bea6b090 	.word	0xbea6b090
 8011b54:	3e2aaaab 	.word	0x3e2aaaab
 8011b58:	3d9dc62e 	.word	0x3d9dc62e
 8011b5c:	4001572d 	.word	0x4001572d
 8011b60:	c019d139 	.word	0xc019d139
 8011b64:	33a22168 	.word	0x33a22168
 8011b68:	3fc90fda 	.word	0x3fc90fda
 8011b6c:	b3a22168 	.word	0xb3a22168
 8011b70:	40490fda 	.word	0x40490fda
 8011b74:	3fc90fdb 	.word	0x3fc90fdb

08011b78 <__ieee754_asinf>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	ee10 5a10 	vmov	r5, s0
 8011b7e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011b82:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8011b86:	ed2d 8b04 	vpush	{d8-d9}
 8011b8a:	d10c      	bne.n	8011ba6 <__ieee754_asinf+0x2e>
 8011b8c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011d04 <__ieee754_asinf+0x18c>
 8011b90:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011d08 <__ieee754_asinf+0x190>
 8011b94:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011b98:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8011ba0:	ecbd 8b04 	vpop	{d8-d9}
 8011ba4:	bd38      	pop	{r3, r4, r5, pc}
 8011ba6:	d904      	bls.n	8011bb2 <__ieee754_asinf+0x3a>
 8011ba8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011bac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011bb0:	e7f6      	b.n	8011ba0 <__ieee754_asinf+0x28>
 8011bb2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011bb6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011bba:	d20b      	bcs.n	8011bd4 <__ieee754_asinf+0x5c>
 8011bbc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011bc0:	d252      	bcs.n	8011c68 <__ieee754_asinf+0xf0>
 8011bc2:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011d0c <__ieee754_asinf+0x194>
 8011bc6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011bca:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd2:	dce5      	bgt.n	8011ba0 <__ieee754_asinf+0x28>
 8011bd4:	f7fe ffc8 	bl	8010b68 <fabsf>
 8011bd8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8011bdc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011be0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011be4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011d10 <__ieee754_asinf+0x198>
 8011be8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011d14 <__ieee754_asinf+0x19c>
 8011bec:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011d18 <__ieee754_asinf+0x1a0>
 8011bf0:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011bf4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011d1c <__ieee754_asinf+0x1a4>
 8011bf8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011bfc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011d20 <__ieee754_asinf+0x1a8>
 8011c00:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011c04:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011d24 <__ieee754_asinf+0x1ac>
 8011c08:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011c0c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011d28 <__ieee754_asinf+0x1b0>
 8011c10:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011c14:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011d2c <__ieee754_asinf+0x1b4>
 8011c18:	eee8 7a07 	vfma.f32	s15, s16, s14
 8011c1c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011d30 <__ieee754_asinf+0x1b8>
 8011c20:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011c24:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011d34 <__ieee754_asinf+0x1bc>
 8011c28:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8011c30:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011c34:	f7ff f8da 	bl	8010dec <__ieee754_sqrtf>
 8011c38:	4b3f      	ldr	r3, [pc, #252]	@ (8011d38 <__ieee754_asinf+0x1c0>)
 8011c3a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8011c3e:	429c      	cmp	r4, r3
 8011c40:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011c44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011c48:	d93d      	bls.n	8011cc6 <__ieee754_asinf+0x14e>
 8011c4a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011c4e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011d3c <__ieee754_asinf+0x1c4>
 8011c52:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011c56:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011d08 <__ieee754_asinf+0x190>
 8011c5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011c5e:	2d00      	cmp	r5, #0
 8011c60:	bfd8      	it	le
 8011c62:	eeb1 0a40 	vnegle.f32	s0, s0
 8011c66:	e79b      	b.n	8011ba0 <__ieee754_asinf+0x28>
 8011c68:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011c6c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011d14 <__ieee754_asinf+0x19c>
 8011c70:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011d10 <__ieee754_asinf+0x198>
 8011c74:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011d28 <__ieee754_asinf+0x1b0>
 8011c78:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011c7c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011d1c <__ieee754_asinf+0x1a4>
 8011c80:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011c84:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011d20 <__ieee754_asinf+0x1a8>
 8011c88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011c8c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011d24 <__ieee754_asinf+0x1ac>
 8011c90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011c94:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011d18 <__ieee754_asinf+0x1a0>
 8011c98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011c9c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011d2c <__ieee754_asinf+0x1b4>
 8011ca0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011ca4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011d30 <__ieee754_asinf+0x1b8>
 8011ca8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011cac:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011d34 <__ieee754_asinf+0x1bc>
 8011cb0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011cb8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011cbc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011cc0:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011cc4:	e76c      	b.n	8011ba0 <__ieee754_asinf+0x28>
 8011cc6:	ee10 3a10 	vmov	r3, s0
 8011cca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011cce:	f023 030f 	bic.w	r3, r3, #15
 8011cd2:	ee07 3a10 	vmov	s14, r3
 8011cd6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011cda:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011cde:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011ce2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011d04 <__ieee754_asinf+0x18c>
 8011ce6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011cea:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011d40 <__ieee754_asinf+0x1c8>
 8011cee:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011cf2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011cf6:	eeb0 6a40 	vmov.f32	s12, s0
 8011cfa:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011cfe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011d02:	e7aa      	b.n	8011c5a <__ieee754_asinf+0xe2>
 8011d04:	b33bbd2e 	.word	0xb33bbd2e
 8011d08:	3fc90fdb 	.word	0x3fc90fdb
 8011d0c:	7149f2ca 	.word	0x7149f2ca
 8011d10:	3a4f7f04 	.word	0x3a4f7f04
 8011d14:	3811ef08 	.word	0x3811ef08
 8011d18:	3e2aaaab 	.word	0x3e2aaaab
 8011d1c:	bd241146 	.word	0xbd241146
 8011d20:	3e4e0aa8 	.word	0x3e4e0aa8
 8011d24:	bea6b090 	.word	0xbea6b090
 8011d28:	3d9dc62e 	.word	0x3d9dc62e
 8011d2c:	bf303361 	.word	0xbf303361
 8011d30:	4001572d 	.word	0x4001572d
 8011d34:	c019d139 	.word	0xc019d139
 8011d38:	3f799999 	.word	0x3f799999
 8011d3c:	333bbd2e 	.word	0x333bbd2e
 8011d40:	3f490fdb 	.word	0x3f490fdb

08011d44 <__ieee754_atan2f>:
 8011d44:	ee10 2a90 	vmov	r2, s1
 8011d48:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011d4c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011d50:	b510      	push	{r4, lr}
 8011d52:	eef0 7a40 	vmov.f32	s15, s0
 8011d56:	d806      	bhi.n	8011d66 <__ieee754_atan2f+0x22>
 8011d58:	ee10 0a10 	vmov	r0, s0
 8011d5c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011d60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011d64:	d904      	bls.n	8011d70 <__ieee754_atan2f+0x2c>
 8011d66:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8011d6e:	bd10      	pop	{r4, pc}
 8011d70:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011d74:	d103      	bne.n	8011d7e <__ieee754_atan2f+0x3a>
 8011d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d7a:	f000 b883 	b.w	8011e84 <atanf>
 8011d7e:	1794      	asrs	r4, r2, #30
 8011d80:	f004 0402 	and.w	r4, r4, #2
 8011d84:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011d88:	b943      	cbnz	r3, 8011d9c <__ieee754_atan2f+0x58>
 8011d8a:	2c02      	cmp	r4, #2
 8011d8c:	d05e      	beq.n	8011e4c <__ieee754_atan2f+0x108>
 8011d8e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011e60 <__ieee754_atan2f+0x11c>
 8011d92:	2c03      	cmp	r4, #3
 8011d94:	bf08      	it	eq
 8011d96:	eef0 7a47 	vmoveq.f32	s15, s14
 8011d9a:	e7e6      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011d9c:	b941      	cbnz	r1, 8011db0 <__ieee754_atan2f+0x6c>
 8011d9e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011e64 <__ieee754_atan2f+0x120>
 8011da2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011e68 <__ieee754_atan2f+0x124>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	bfb8      	it	lt
 8011daa:	eef0 7a47 	vmovlt.f32	s15, s14
 8011dae:	e7dc      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011db0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011db4:	d110      	bne.n	8011dd8 <__ieee754_atan2f+0x94>
 8011db6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011dba:	f104 34ff 	add.w	r4, r4, #4294967295
 8011dbe:	d107      	bne.n	8011dd0 <__ieee754_atan2f+0x8c>
 8011dc0:	2c02      	cmp	r4, #2
 8011dc2:	d846      	bhi.n	8011e52 <__ieee754_atan2f+0x10e>
 8011dc4:	4b29      	ldr	r3, [pc, #164]	@ (8011e6c <__ieee754_atan2f+0x128>)
 8011dc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011dca:	edd3 7a00 	vldr	s15, [r3]
 8011dce:	e7cc      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011dd0:	2c02      	cmp	r4, #2
 8011dd2:	d841      	bhi.n	8011e58 <__ieee754_atan2f+0x114>
 8011dd4:	4b26      	ldr	r3, [pc, #152]	@ (8011e70 <__ieee754_atan2f+0x12c>)
 8011dd6:	e7f6      	b.n	8011dc6 <__ieee754_atan2f+0x82>
 8011dd8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ddc:	d0df      	beq.n	8011d9e <__ieee754_atan2f+0x5a>
 8011dde:	1a5b      	subs	r3, r3, r1
 8011de0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011de4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011de8:	da1a      	bge.n	8011e20 <__ieee754_atan2f+0xdc>
 8011dea:	2a00      	cmp	r2, #0
 8011dec:	da01      	bge.n	8011df2 <__ieee754_atan2f+0xae>
 8011dee:	313c      	adds	r1, #60	@ 0x3c
 8011df0:	db19      	blt.n	8011e26 <__ieee754_atan2f+0xe2>
 8011df2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011df6:	f7fe feb7 	bl	8010b68 <fabsf>
 8011dfa:	f000 f843 	bl	8011e84 <atanf>
 8011dfe:	eef0 7a40 	vmov.f32	s15, s0
 8011e02:	2c01      	cmp	r4, #1
 8011e04:	d012      	beq.n	8011e2c <__ieee754_atan2f+0xe8>
 8011e06:	2c02      	cmp	r4, #2
 8011e08:	d017      	beq.n	8011e3a <__ieee754_atan2f+0xf6>
 8011e0a:	2c00      	cmp	r4, #0
 8011e0c:	d0ad      	beq.n	8011d6a <__ieee754_atan2f+0x26>
 8011e0e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011e74 <__ieee754_atan2f+0x130>
 8011e12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e16:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011e78 <__ieee754_atan2f+0x134>
 8011e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e1e:	e7a4      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011e20:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011e64 <__ieee754_atan2f+0x120>
 8011e24:	e7ed      	b.n	8011e02 <__ieee754_atan2f+0xbe>
 8011e26:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011e7c <__ieee754_atan2f+0x138>
 8011e2a:	e7ea      	b.n	8011e02 <__ieee754_atan2f+0xbe>
 8011e2c:	ee17 3a90 	vmov	r3, s15
 8011e30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011e34:	ee07 3a90 	vmov	s15, r3
 8011e38:	e797      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011e3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011e74 <__ieee754_atan2f+0x130>
 8011e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e42:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011e78 <__ieee754_atan2f+0x134>
 8011e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e4a:	e78e      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011e4c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011e78 <__ieee754_atan2f+0x134>
 8011e50:	e78b      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011e52:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011e80 <__ieee754_atan2f+0x13c>
 8011e56:	e788      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011e58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011e7c <__ieee754_atan2f+0x138>
 8011e5c:	e785      	b.n	8011d6a <__ieee754_atan2f+0x26>
 8011e5e:	bf00      	nop
 8011e60:	c0490fdb 	.word	0xc0490fdb
 8011e64:	3fc90fdb 	.word	0x3fc90fdb
 8011e68:	bfc90fdb 	.word	0xbfc90fdb
 8011e6c:	08012804 	.word	0x08012804
 8011e70:	080127f8 	.word	0x080127f8
 8011e74:	33bbbd2e 	.word	0x33bbbd2e
 8011e78:	40490fdb 	.word	0x40490fdb
 8011e7c:	00000000 	.word	0x00000000
 8011e80:	3f490fdb 	.word	0x3f490fdb

08011e84 <atanf>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	ee10 5a10 	vmov	r5, s0
 8011e8a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011e8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011e92:	eef0 7a40 	vmov.f32	s15, s0
 8011e96:	d310      	bcc.n	8011eba <atanf+0x36>
 8011e98:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011e9c:	d904      	bls.n	8011ea8 <atanf+0x24>
 8011e9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8011ea6:	bd38      	pop	{r3, r4, r5, pc}
 8011ea8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011fe0 <atanf+0x15c>
 8011eac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011fe4 <atanf+0x160>
 8011eb0:	2d00      	cmp	r5, #0
 8011eb2:	bfc8      	it	gt
 8011eb4:	eef0 7a47 	vmovgt.f32	s15, s14
 8011eb8:	e7f3      	b.n	8011ea2 <atanf+0x1e>
 8011eba:	4b4b      	ldr	r3, [pc, #300]	@ (8011fe8 <atanf+0x164>)
 8011ebc:	429c      	cmp	r4, r3
 8011ebe:	d810      	bhi.n	8011ee2 <atanf+0x5e>
 8011ec0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011ec4:	d20a      	bcs.n	8011edc <atanf+0x58>
 8011ec6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011fec <atanf+0x168>
 8011eca:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ed2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	dce2      	bgt.n	8011ea2 <atanf+0x1e>
 8011edc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ee0:	e013      	b.n	8011f0a <atanf+0x86>
 8011ee2:	f7fe fe41 	bl	8010b68 <fabsf>
 8011ee6:	4b42      	ldr	r3, [pc, #264]	@ (8011ff0 <atanf+0x16c>)
 8011ee8:	429c      	cmp	r4, r3
 8011eea:	d84f      	bhi.n	8011f8c <atanf+0x108>
 8011eec:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011ef0:	429c      	cmp	r4, r3
 8011ef2:	d841      	bhi.n	8011f78 <atanf+0xf4>
 8011ef4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011ef8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011efc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011f00:	2300      	movs	r3, #0
 8011f02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f0a:	1c5a      	adds	r2, r3, #1
 8011f0c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011f10:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011ff4 <atanf+0x170>
 8011f14:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011ff8 <atanf+0x174>
 8011f18:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011ffc <atanf+0x178>
 8011f1c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011f20:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011f24:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012000 <atanf+0x17c>
 8011f28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011f2c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012004 <atanf+0x180>
 8011f30:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f34:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012008 <atanf+0x184>
 8011f38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011f3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801200c <atanf+0x188>
 8011f40:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f44:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012010 <atanf+0x18c>
 8011f48:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011f4c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012014 <atanf+0x190>
 8011f50:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f54:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012018 <atanf+0x194>
 8011f58:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011f5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801201c <atanf+0x198>
 8011f60:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f64:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f68:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011f6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011f70:	d121      	bne.n	8011fb6 <atanf+0x132>
 8011f72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f76:	e794      	b.n	8011ea2 <atanf+0x1e>
 8011f78:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011f7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011f80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f84:	2301      	movs	r3, #1
 8011f86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f8a:	e7be      	b.n	8011f0a <atanf+0x86>
 8011f8c:	4b24      	ldr	r3, [pc, #144]	@ (8012020 <atanf+0x19c>)
 8011f8e:	429c      	cmp	r4, r3
 8011f90:	d80b      	bhi.n	8011faa <atanf+0x126>
 8011f92:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011f9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011f9e:	2302      	movs	r3, #2
 8011fa0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fa8:	e7af      	b.n	8011f0a <atanf+0x86>
 8011faa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011fae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011fb2:	2303      	movs	r3, #3
 8011fb4:	e7a9      	b.n	8011f0a <atanf+0x86>
 8011fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8012024 <atanf+0x1a0>)
 8011fb8:	491b      	ldr	r1, [pc, #108]	@ (8012028 <atanf+0x1a4>)
 8011fba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011fbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011fc2:	edd3 6a00 	vldr	s13, [r3]
 8011fc6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011fca:	2d00      	cmp	r5, #0
 8011fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011fd0:	edd2 7a00 	vldr	s15, [r2]
 8011fd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011fd8:	bfb8      	it	lt
 8011fda:	eef1 7a67 	vneglt.f32	s15, s15
 8011fde:	e760      	b.n	8011ea2 <atanf+0x1e>
 8011fe0:	bfc90fdb 	.word	0xbfc90fdb
 8011fe4:	3fc90fdb 	.word	0x3fc90fdb
 8011fe8:	3edfffff 	.word	0x3edfffff
 8011fec:	7149f2ca 	.word	0x7149f2ca
 8011ff0:	3f97ffff 	.word	0x3f97ffff
 8011ff4:	3c8569d7 	.word	0x3c8569d7
 8011ff8:	3d4bda59 	.word	0x3d4bda59
 8011ffc:	bd6ef16b 	.word	0xbd6ef16b
 8012000:	3d886b35 	.word	0x3d886b35
 8012004:	3dba2e6e 	.word	0x3dba2e6e
 8012008:	3e124925 	.word	0x3e124925
 801200c:	3eaaaaab 	.word	0x3eaaaaab
 8012010:	bd15a221 	.word	0xbd15a221
 8012014:	bd9d8795 	.word	0xbd9d8795
 8012018:	bde38e38 	.word	0xbde38e38
 801201c:	be4ccccd 	.word	0xbe4ccccd
 8012020:	401bffff 	.word	0x401bffff
 8012024:	08012820 	.word	0x08012820
 8012028:	08012810 	.word	0x08012810
 801202c:	00000000 	.word	0x00000000

08012030 <scalbn>:
 8012030:	b570      	push	{r4, r5, r6, lr}
 8012032:	ec55 4b10 	vmov	r4, r5, d0
 8012036:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801203a:	4606      	mov	r6, r0
 801203c:	462b      	mov	r3, r5
 801203e:	b991      	cbnz	r1, 8012066 <scalbn+0x36>
 8012040:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012044:	4323      	orrs	r3, r4
 8012046:	d03d      	beq.n	80120c4 <scalbn+0x94>
 8012048:	4b35      	ldr	r3, [pc, #212]	@ (8012120 <scalbn+0xf0>)
 801204a:	4620      	mov	r0, r4
 801204c:	4629      	mov	r1, r5
 801204e:	2200      	movs	r2, #0
 8012050:	f7ee faf2 	bl	8000638 <__aeabi_dmul>
 8012054:	4b33      	ldr	r3, [pc, #204]	@ (8012124 <scalbn+0xf4>)
 8012056:	429e      	cmp	r6, r3
 8012058:	4604      	mov	r4, r0
 801205a:	460d      	mov	r5, r1
 801205c:	da0f      	bge.n	801207e <scalbn+0x4e>
 801205e:	a328      	add	r3, pc, #160	@ (adr r3, 8012100 <scalbn+0xd0>)
 8012060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012064:	e01e      	b.n	80120a4 <scalbn+0x74>
 8012066:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801206a:	4291      	cmp	r1, r2
 801206c:	d10b      	bne.n	8012086 <scalbn+0x56>
 801206e:	4622      	mov	r2, r4
 8012070:	4620      	mov	r0, r4
 8012072:	4629      	mov	r1, r5
 8012074:	f7ee f92a 	bl	80002cc <__adddf3>
 8012078:	4604      	mov	r4, r0
 801207a:	460d      	mov	r5, r1
 801207c:	e022      	b.n	80120c4 <scalbn+0x94>
 801207e:	460b      	mov	r3, r1
 8012080:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012084:	3936      	subs	r1, #54	@ 0x36
 8012086:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801208a:	4296      	cmp	r6, r2
 801208c:	dd0d      	ble.n	80120aa <scalbn+0x7a>
 801208e:	2d00      	cmp	r5, #0
 8012090:	a11d      	add	r1, pc, #116	@ (adr r1, 8012108 <scalbn+0xd8>)
 8012092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012096:	da02      	bge.n	801209e <scalbn+0x6e>
 8012098:	a11d      	add	r1, pc, #116	@ (adr r1, 8012110 <scalbn+0xe0>)
 801209a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801209e:	a31a      	add	r3, pc, #104	@ (adr r3, 8012108 <scalbn+0xd8>)
 80120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a4:	f7ee fac8 	bl	8000638 <__aeabi_dmul>
 80120a8:	e7e6      	b.n	8012078 <scalbn+0x48>
 80120aa:	1872      	adds	r2, r6, r1
 80120ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80120b0:	428a      	cmp	r2, r1
 80120b2:	dcec      	bgt.n	801208e <scalbn+0x5e>
 80120b4:	2a00      	cmp	r2, #0
 80120b6:	dd08      	ble.n	80120ca <scalbn+0x9a>
 80120b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80120bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80120c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80120c4:	ec45 4b10 	vmov	d0, r4, r5
 80120c8:	bd70      	pop	{r4, r5, r6, pc}
 80120ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80120ce:	da08      	bge.n	80120e2 <scalbn+0xb2>
 80120d0:	2d00      	cmp	r5, #0
 80120d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8012100 <scalbn+0xd0>)
 80120d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120d8:	dac1      	bge.n	801205e <scalbn+0x2e>
 80120da:	a10f      	add	r1, pc, #60	@ (adr r1, 8012118 <scalbn+0xe8>)
 80120dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120e0:	e7bd      	b.n	801205e <scalbn+0x2e>
 80120e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80120e6:	3236      	adds	r2, #54	@ 0x36
 80120e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80120ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80120f0:	4620      	mov	r0, r4
 80120f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012128 <scalbn+0xf8>)
 80120f4:	4629      	mov	r1, r5
 80120f6:	2200      	movs	r2, #0
 80120f8:	e7d4      	b.n	80120a4 <scalbn+0x74>
 80120fa:	bf00      	nop
 80120fc:	f3af 8000 	nop.w
 8012100:	c2f8f359 	.word	0xc2f8f359
 8012104:	01a56e1f 	.word	0x01a56e1f
 8012108:	8800759c 	.word	0x8800759c
 801210c:	7e37e43c 	.word	0x7e37e43c
 8012110:	8800759c 	.word	0x8800759c
 8012114:	fe37e43c 	.word	0xfe37e43c
 8012118:	c2f8f359 	.word	0xc2f8f359
 801211c:	81a56e1f 	.word	0x81a56e1f
 8012120:	43500000 	.word	0x43500000
 8012124:	ffff3cb0 	.word	0xffff3cb0
 8012128:	3c900000 	.word	0x3c900000

0801212c <with_errno>:
 801212c:	b510      	push	{r4, lr}
 801212e:	ed2d 8b02 	vpush	{d8}
 8012132:	eeb0 8a40 	vmov.f32	s16, s0
 8012136:	eef0 8a60 	vmov.f32	s17, s1
 801213a:	4604      	mov	r4, r0
 801213c:	f7fa fd4c 	bl	800cbd8 <__errno>
 8012140:	eeb0 0a48 	vmov.f32	s0, s16
 8012144:	eef0 0a68 	vmov.f32	s1, s17
 8012148:	ecbd 8b02 	vpop	{d8}
 801214c:	6004      	str	r4, [r0, #0]
 801214e:	bd10      	pop	{r4, pc}

08012150 <xflow>:
 8012150:	4603      	mov	r3, r0
 8012152:	b507      	push	{r0, r1, r2, lr}
 8012154:	ec51 0b10 	vmov	r0, r1, d0
 8012158:	b183      	cbz	r3, 801217c <xflow+0x2c>
 801215a:	4602      	mov	r2, r0
 801215c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012160:	e9cd 2300 	strd	r2, r3, [sp]
 8012164:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012168:	f7ee fa66 	bl	8000638 <__aeabi_dmul>
 801216c:	ec41 0b10 	vmov	d0, r0, r1
 8012170:	2022      	movs	r0, #34	@ 0x22
 8012172:	b003      	add	sp, #12
 8012174:	f85d eb04 	ldr.w	lr, [sp], #4
 8012178:	f7ff bfd8 	b.w	801212c <with_errno>
 801217c:	4602      	mov	r2, r0
 801217e:	460b      	mov	r3, r1
 8012180:	e7ee      	b.n	8012160 <xflow+0x10>
 8012182:	0000      	movs	r0, r0
 8012184:	0000      	movs	r0, r0
	...

08012188 <__math_uflow>:
 8012188:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012190 <__math_uflow+0x8>
 801218c:	f7ff bfe0 	b.w	8012150 <xflow>
 8012190:	00000000 	.word	0x00000000
 8012194:	10000000 	.word	0x10000000

08012198 <__math_oflow>:
 8012198:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80121a0 <__math_oflow+0x8>
 801219c:	f7ff bfd8 	b.w	8012150 <xflow>
 80121a0:	00000000 	.word	0x00000000
 80121a4:	70000000 	.word	0x70000000

080121a8 <_init>:
 80121a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121aa:	bf00      	nop
 80121ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ae:	bc08      	pop	{r3}
 80121b0:	469e      	mov	lr, r3
 80121b2:	4770      	bx	lr

080121b4 <_fini>:
 80121b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b6:	bf00      	nop
 80121b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ba:	bc08      	pop	{r3}
 80121bc:	469e      	mov	lr, r3
 80121be:	4770      	bx	lr
