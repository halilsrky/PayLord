
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013120  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080132f0  080132f0  000142f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013910  08013910  00015218  2**0
                  CONTENTS
  4 .ARM          00000008  08013910  08013910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013918  08013918  00015218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013918  08013918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801391c  0801391c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08013920  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000160c  20000218  08013b38  00015218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001824  08013b38  00015824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abe0  00000000  00000000  00015248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003877  00000000  00000000  0002fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000336a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102b  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026914  00000000  00000000  00035b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cae0  00000000  00000000  0005c47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4d2d  00000000  00000000  00078f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dc8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073ac  00000000  00000000  0015dcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080132d8 	.word	0x080132d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	080132d8 	.word	0x080132d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f006 fcd9 	bl	8007cb4 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f006 fcb5 	bl	8007cb4 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00c fed4 	bl	800e10e <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000234 	.word	0x20000234
 80013dc:	20000238 	.word	0x20000238
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f010 fdb7 	bl	8011f88 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000238 	.word	0x20000238
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fac9 	bl	8007a38 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f004 fcd6 	bl	8005e58 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 f97d 	bl	80077b0 <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f004 fcce 	bl	8005e58 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f006 fbef 	bl	8007cb4 <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f006 fb56 	bl	8007cb4 <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f006 fa15 	bl	8007ac0 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f006 f9f0 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000238 	.word	0x20000238
 80016fc:	20000234 	.word	0x20000234
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f006 f9cc 	bl	8007ac0 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f004 fb90 	bl	8005e58 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f004 fb7e 	bl	8005e58 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000234 	.word	0x20000234
 800178c:	20000238 	.word	0x20000238
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f006 fa70 	bl	8007cb4 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000238 	.word	0x20000238
 80017f4:	20000234 	.word	0x20000234
 80017f8:	200014e4 	.word	0x200014e4
 80017fc:	2000023c 	.word	0x2000023c
 8001800:	20001608 	.word	0x20001608

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f004 fb08 	bl	8005e40 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f004 faf8 	bl	8005e40 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000238 	.word	0x20000238
 8001890:	2000023c 	.word	0x2000023c
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000238 	.word	0x20000238
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000238 	.word	0x20000238
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	BMI->flags.isAccelDmaComplete = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	709a      	strb	r2, [r3, #2]
	BMI->flags.isGyroDmaComplete = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	711a      	strb	r2, [r3, #4]
	is_time_updated = 0;
 800207e:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <bmi088_init+0xbc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <bmi088_init+0xc0>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <bmi088_init+0x52>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002096:	2101      	movs	r1, #1
 8002098:	2018      	movs	r0, #24
 800209a:	f00a ffb1 	bl	800d000 <calloc>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6918      	ldr	r0, [r3, #16]
 80020aa:	2332      	movs	r3, #50	@ 0x32
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	2200      	movs	r2, #0
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f005 fdf9 	bl	8007cb4 <HAL_I2C_Mem_Read>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6918      	ldr	r0, [r3, #16]
 80020ca:	2332      	movs	r3, #50	@ 0x32
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	3301      	adds	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	2200      	movs	r2, #0
 80020de:	21d0      	movs	r1, #208	@ 0xd0
 80020e0:	f005 fde8 	bl	8007cb4 <HAL_I2C_Mem_Read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	2b1e      	cmp	r3, #30
 80020ec:	d003      	beq.n	80020f6 <bmi088_init+0xa2>
	{
		ret_val = ret_val | 0x01;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d003      	beq.n	8002104 <bmi088_init+0xb0>
	{
		ret_val = ret_val | 0x02;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000023d 	.word	0x2000023d
 8002114:	2000023e 	.word	0x2000023e

08002118 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fbf3 	bl	8006912 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fbed 	bl	8006912 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800213c:	2301      	movs	r3, #1
 800213e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6918      	ldr	r0, [r3, #16]
 8002144:	2364      	movs	r3, #100	@ 0x64
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2301      	movs	r3, #1
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	227c      	movs	r2, #124	@ 0x7c
 8002156:	2130      	movs	r1, #48	@ 0x30
 8002158:	f005 fcb2 	bl	8007ac0 <HAL_I2C_Mem_Write>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4313      	orrs	r3, r2
 8002164:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6918      	ldr	r0, [r3, #16]
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	227d      	movs	r2, #125	@ 0x7d
 8002180:	2130      	movs	r1, #48	@ 0x30
 8002182:	f005 fc9d 	bl	8007ac0 <HAL_I2C_Mem_Write>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4313      	orrs	r3, r2
 800218e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002190:	2014      	movs	r0, #20
 8002192:	f003 fe61 	bl	8005e58 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002196:	23b6      	movs	r3, #182	@ 0xb6
 8002198:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6918      	ldr	r0, [r3, #16]
 800219e:	2364      	movs	r3, #100	@ 0x64
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	227e      	movs	r2, #126	@ 0x7e
 80021b0:	2130      	movs	r1, #48	@ 0x30
 80021b2:	f005 fc85 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4313      	orrs	r3, r2
 80021be:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <bmi088_config+0xb4>
 80021c6:	4bb4      	ldr	r3, [pc, #720]	@ (8002498 <bmi088_config+0x380>)
 80021c8:	22a4      	movs	r2, #164	@ 0xa4
 80021ca:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f003 fe43 	bl	8005e58 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021d2:	23b0      	movs	r3, #176	@ 0xb0
 80021d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6918      	ldr	r0, [r3, #16]
 80021da:	2364      	movs	r3, #100	@ 0x64
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	227e      	movs	r2, #126	@ 0x7e
 80021ec:	2130      	movs	r1, #48	@ 0x30
 80021ee:	f005 fc67 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <bmi088_config+0xf0>
 8002202:	4ba5      	ldr	r3, [pc, #660]	@ (8002498 <bmi088_config+0x380>)
 8002204:	22a9      	movs	r2, #169	@ 0xa9
 8002206:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f003 fe25 	bl	8005e58 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800220e:	23b6      	movs	r3, #182	@ 0xb6
 8002210:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6918      	ldr	r0, [r3, #16]
 8002216:	2364      	movs	r3, #100	@ 0x64
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2301      	movs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	2214      	movs	r2, #20
 8002228:	21d0      	movs	r1, #208	@ 0xd0
 800222a:	f005 fc49 	bl	8007ac0 <HAL_I2C_Mem_Write>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4313      	orrs	r3, r2
 8002236:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <bmi088_config+0x12c>
 800223e:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <bmi088_config+0x380>)
 8002240:	22ae      	movs	r2, #174	@ 0xae
 8002242:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f003 fe07 	bl	8005e58 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b9b      	ldrb	r3, [r3, #14]
 800224e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6918      	ldr	r0, [r3, #16]
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	220f      	movs	r2, #15
 8002266:	21d0      	movs	r1, #208	@ 0xd0
 8002268:	f005 fc2a 	bl	8007ac0 <HAL_I2C_Mem_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <bmi088_config+0x16a>
 800227c:	4b86      	ldr	r3, [pc, #536]	@ (8002498 <bmi088_config+0x380>)
 800227e:	22b4      	movs	r2, #180	@ 0xb4
 8002280:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6918      	ldr	r0, [r3, #16]
 800228c:	2314      	movs	r3, #20
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2301      	movs	r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	2210      	movs	r2, #16
 800229e:	21d0      	movs	r1, #208	@ 0xd0
 80022a0:	f005 fc0e 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <bmi088_config+0x1a2>
 80022b4:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <bmi088_config+0x380>)
 80022b6:	22b8      	movs	r2, #184	@ 0xb8
 80022b8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7b1b      	ldrb	r3, [r3, #12]
 80022be:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6918      	ldr	r0, [r3, #16]
 80022c4:	2314      	movs	r3, #20
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2301      	movs	r3, #1
 80022d4:	2211      	movs	r2, #17
 80022d6:	21d0      	movs	r1, #208	@ 0xd0
 80022d8:	f005 fbf2 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <bmi088_config+0x1da>
 80022ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <bmi088_config+0x380>)
 80022ee:	22bc      	movs	r2, #188	@ 0xbc
 80022f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022f2:	2014      	movs	r0, #20
 80022f4:	f003 fdb0 	bl	8005e58 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6918      	ldr	r0, [r3, #16]
 8002300:	2314      	movs	r3, #20
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2215      	movs	r2, #21
 8002312:	21d0      	movs	r1, #208	@ 0xd0
 8002314:	f005 fbd4 	bl	8007ac0 <HAL_I2C_Mem_Write>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4313      	orrs	r3, r2
 8002320:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <bmi088_config+0x216>
 8002328:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <bmi088_config+0x380>)
 800232a:	22c2      	movs	r2, #194	@ 0xc2
 800232c:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800232e:	2305      	movs	r3, #5
 8002330:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6918      	ldr	r0, [r3, #16]
 8002336:	2314      	movs	r3, #20
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	2301      	movs	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	2216      	movs	r2, #22
 8002348:	21d0      	movs	r1, #208	@ 0xd0
 800234a:	f005 fbb9 	bl	8007ac0 <HAL_I2C_Mem_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	4313      	orrs	r3, r2
 8002356:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <bmi088_config+0x24c>
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <bmi088_config+0x380>)
 8002360:	22c6      	movs	r2, #198	@ 0xc6
 8002362:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002364:	2381      	movs	r3, #129	@ 0x81
 8002366:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6918      	ldr	r0, [r3, #16]
 800236c:	2314      	movs	r3, #20
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2301      	movs	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2218      	movs	r2, #24
 800237e:	21d0      	movs	r1, #208	@ 0xd0
 8002380:	f005 fb9e 	bl	8007ac0 <HAL_I2C_Mem_Write>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4313      	orrs	r3, r2
 800238c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <bmi088_config+0x282>
 8002394:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <bmi088_config+0x380>)
 8002396:	22ca      	movs	r2, #202	@ 0xca
 8002398:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800239a:	2304      	movs	r3, #4
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6918      	ldr	r0, [r3, #16]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	227d      	movs	r2, #125	@ 0x7d
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f005 fb83 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <bmi088_config+0x2b8>
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <bmi088_config+0x380>)
 80023cc:	22cf      	movs	r2, #207	@ 0xcf
 80023ce:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023d0:	2008      	movs	r0, #8
 80023d2:	f003 fd41 	bl	8005e58 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7a1b      	ldrb	r3, [r3, #8]
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6918      	ldr	r0, [r3, #16]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	227c      	movs	r2, #124	@ 0x7c
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f005 fb64 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <bmi088_config+0x2f6>
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <bmi088_config+0x380>)
 800240a:	22d4      	movs	r2, #212	@ 0xd4
 800240c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800240e:	2008      	movs	r0, #8
 8002410:	f003 fd22 	bl	8005e58 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a9b      	ldrb	r3, [r3, #10]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	b25a      	sxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7adb      	ldrb	r3, [r3, #11]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b25b      	sxtb	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6918      	ldr	r0, [r3, #16]
 800242e:	2314      	movs	r3, #20
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2130      	movs	r1, #48	@ 0x30
 8002442:	f005 fb3d 	bl	8007ac0 <HAL_I2C_Mem_Write>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4313      	orrs	r3, r2
 800244e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <bmi088_config+0x344>
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <bmi088_config+0x380>)
 8002458:	22d9      	movs	r2, #217	@ 0xd9
 800245a:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7a5b      	ldrb	r3, [r3, #9]
 8002460:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6918      	ldr	r0, [r3, #16]
 8002466:	2314      	movs	r3, #20
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2301      	movs	r3, #1
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	2241      	movs	r2, #65	@ 0x41
 8002478:	2130      	movs	r1, #48	@ 0x30
 800247a:	f005 fb21 	bl	8007ac0 <HAL_I2C_Mem_Write>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	4313      	orrs	r3, r2
 8002486:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <bmi088_config+0x384>
 800248e:	4b02      	ldr	r3, [pc, #8]	@ (8002498 <bmi088_config+0x380>)
 8002490:	22dd      	movs	r2, #221	@ 0xdd
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e002      	b.n	800249c <bmi088_config+0x384>
 8002496:	bf00      	nop
 8002498:	20000240 	.word	0x20000240

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800249c:	230a      	movs	r3, #10
 800249e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6918      	ldr	r0, [r3, #16]
 80024a4:	2314      	movs	r3, #20
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2253      	movs	r2, #83	@ 0x53
 80024b6:	2130      	movs	r1, #48	@ 0x30
 80024b8:	f005 fb02 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024c6:	2304      	movs	r3, #4
 80024c8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6918      	ldr	r0, [r3, #16]
 80024ce:	2314      	movs	r3, #20
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	2301      	movs	r3, #1
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	2258      	movs	r2, #88	@ 0x58
 80024e0:	2130      	movs	r1, #48	@ 0x30
 80024e2:	f005 faed 	bl	8007ac0 <HAL_I2C_Mem_Write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 f9fd 	bl	80068f6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002502:	4618      	mov	r0, r3
 8002504:	f004 f9f7 	bl	80068f6 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002508:	2046      	movs	r0, #70	@ 0x46
 800250a:	f003 fca5 	bl	8005e58 <HAL_Delay>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop

08002518 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
	if(BMI->flags.isAccelUpdated && !BMI->flags.isDmaTransferActive)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01d      	beq.n	8002564 <bmi088_update+0x4c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <bmi088_update+0x4c>
	{
		// Start DMA transfer for accelerometer data (X,Y,Z + sensor time)
		BMI->flags.isDmaTransferActive = 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	711a      	strb	r2, [r3, #4]
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_accel_data, 9);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6918      	ldr	r0, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3384      	adds	r3, #132	@ 0x84
 800253e:	2209      	movs	r2, #9
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2212      	movs	r2, #18
 8002548:	2130      	movs	r1, #48	@ 0x30
 800254a:	f005 fde5 	bl	8008118 <HAL_I2C_Mem_Read_DMA>
 800254e:	4603      	mov	r3, r0
 8002550:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <bmi088_update+0x4c>
		{
			BMI->flags.isDmaTransferActive = 0;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	711a      	strb	r2, [r3, #4]
			BMI->flags.isAccelUpdated = 0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	705a      	strb	r2, [r3, #1]
		}
	}

	if(BMI->flags.isGyroUpdated && !BMI->flags.isDmaTransferActive && is_time_updated)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02e      	beq.n	80025ca <bmi088_update+0xb2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12a      	bne.n	80025ca <bmi088_update+0xb2>
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <bmi088_update+0xa4>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d026      	beq.n	80025ca <bmi088_update+0xb2>
	{
		if(is_starded){
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <bmi088_update+0xa8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <bmi088_update+0xac>
			// Start DMA transfer for gyroscope data
			BMI->flags.isDmaTransferActive = 1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	711a      	strb	r2, [r3, #4]
			HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_gyro_data, 6);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6918      	ldr	r0, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	338d      	adds	r3, #141	@ 0x8d
 8002592:	2206      	movs	r2, #6
 8002594:	9201      	str	r2, [sp, #4]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2301      	movs	r3, #1
 800259a:	2202      	movs	r2, #2
 800259c:	21d0      	movs	r1, #208	@ 0xd0
 800259e:	f005 fdbb 	bl	8008118 <HAL_I2C_Mem_Read_DMA>
 80025a2:	4603      	mov	r3, r0
 80025a4:	77bb      	strb	r3, [r7, #30]
			if(ret != HAL_OK)
 80025a6:	7fbb      	ldrb	r3, [r7, #30]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <bmi088_update+0xb2>
			{
				BMI->flags.isDmaTransferActive = 0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	711a      	strb	r2, [r3, #4]
				BMI->flags.isGyroUpdated = 0;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e007      	b.n	80025ca <bmi088_update+0xb2>
 80025ba:	bf00      	nop
 80025bc:	2000023d 	.word	0x2000023d
 80025c0:	2000023e 	.word	0x2000023e
			}
		}
		else
		{
			BMI->flags.isGyroUpdated = 0;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
		}
	}

	// Process accelerometer data if DMA transfer is complete
	if(BMI->flags.isAccelDmaComplete)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	789b      	ldrb	r3, [r3, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 81cd 	beq.w	800296e <bmi088_update+0x456>
	{
		uint32_t sensorTime = (BMI->datas.raw_accel_data[8] << 16) | (BMI->datas.raw_accel_data[7] << 8) | BMI->datas.raw_accel_data[6];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	f892 208a 	ldrb.w	r2, [r2, #138]	@ 0x8a
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
		BMI->datas.current_time = (float)sensorTime * 39.0625 / 1000000.0;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	a3ca      	add	r3, pc, #808	@ (adr r3, 800292c <bmi088_update+0x414>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe f816 	bl	8000638 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	a3c7      	add	r3, pc, #796	@ (adr r3, 8002934 <bmi088_update+0x41c>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fe f937 	bl	800088c <__aeabi_ddiv>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f7fe faff 	bl	8000c28 <__aeabi_d2f>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	66da      	str	r2, [r3, #108]	@ 0x6c

		int16_t acc_x_16 = (BMI->datas.raw_accel_data[1] << 8) | BMI->datas.raw_accel_data[0];
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b21a      	sxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002640:	b21b      	sxth	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	82fb      	strh	r3, [r7, #22]
		int16_t acc_y_16 = (BMI->datas.raw_accel_data[3] << 8) | BMI->datas.raw_accel_data[2];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b21a      	sxth	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002656:	b21b      	sxth	r3, r3
 8002658:	4313      	orrs	r3, r2
 800265a:	82bb      	strh	r3, [r7, #20]
		int16_t acc_z_16 = (BMI->datas.raw_accel_data[5] << 8) | BMI->datas.raw_accel_data[4];
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b21a      	sxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800266c:	b21b      	sxth	r3, r3
 800266e:	4313      	orrs	r3, r2
 8002670:	827b      	strh	r3, [r7, #18]

		BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 8002672:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff81 	bl	8000588 <__aeabi_f2d>
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4ba1      	ldr	r3, [pc, #644]	@ (8002910 <bmi088_update+0x3f8>)
 800268c:	f7fe f8fe 	bl	800088c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b9d      	ldr	r3, [pc, #628]	@ (8002914 <bmi088_update+0x3fc>)
 800269e:	f7fd ffcb 	bl	8000638 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b9a      	ldr	r3, [pc, #616]	@ (8002918 <bmi088_update+0x400>)
 80026b0:	f7fd ffc2 	bl	8000638 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7a5b      	ldrb	r3, [r3, #9]
 80026c0:	3301      	adds	r3, #1
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ca:	ee17 0a90 	vmov	r0, s15
 80026ce:	f7fd ff5b 	bl	8000588 <__aeabi_f2d>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	ec43 2b11 	vmov	d1, r2, r3
 80026da:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 8002900 <bmi088_update+0x3e8>
 80026de:	f00f fc53 	bl	8011f88 <pow>
 80026e2:	ec53 2b10 	vmov	r2, r3, d0
 80026e6:	4620      	mov	r0, r4
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7fd ffa5 	bl	8000638 <__aeabi_dmul>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	4b88      	ldr	r3, [pc, #544]	@ (800291c <bmi088_update+0x404>)
 80026fc:	f7fd fde6 	bl	80002cc <__adddf3>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	a37f      	add	r3, pc, #508	@ (adr r3, 8002908 <bmi088_update+0x3f0>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd ff93 	bl	8000638 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	4b7d      	ldr	r3, [pc, #500]	@ (8002914 <bmi088_update+0x3fc>)
 8002720:	f7fe f8b4 	bl	800088c <__aeabi_ddiv>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe fa7c 	bl	8000c28 <__aeabi_d2f>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	65da      	str	r2, [r3, #92]	@ 0x5c
		BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002736:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002742:	ee17 0a90 	vmov	r0, s15
 8002746:	f7fd ff1f 	bl	8000588 <__aeabi_f2d>
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	4b70      	ldr	r3, [pc, #448]	@ (8002910 <bmi088_update+0x3f8>)
 8002750:	f7fe f89c 	bl	800088c <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <bmi088_update+0x3fc>)
 8002762:	f7fd ff69 	bl	8000638 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	4b69      	ldr	r3, [pc, #420]	@ (8002918 <bmi088_update+0x400>)
 8002774:	f7fd ff60 	bl	8000638 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7a5b      	ldrb	r3, [r3, #9]
 8002784:	3301      	adds	r3, #1
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278e:	ee17 0a90 	vmov	r0, s15
 8002792:	f7fd fef9 	bl	8000588 <__aeabi_f2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	ec43 2b11 	vmov	d1, r2, r3
 800279e:	ed9f 0b58 	vldr	d0, [pc, #352]	@ 8002900 <bmi088_update+0x3e8>
 80027a2:	f00f fbf1 	bl	8011f88 <pow>
 80027a6:	ec53 2b10 	vmov	r2, r3, d0
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd ff43 	bl	8000638 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	4b58      	ldr	r3, [pc, #352]	@ (8002920 <bmi088_update+0x408>)
 80027c0:	f7fd fd84 	bl	80002cc <__adddf3>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	a34e      	add	r3, pc, #312	@ (adr r3, 8002908 <bmi088_update+0x3f0>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f7fd ff31 	bl	8000638 <__aeabi_dmul>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002914 <bmi088_update+0x3fc>)
 80027e4:	f7fe f852 	bl	800088c <__aeabi_ddiv>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe fa1a 	bl	8000c28 <__aeabi_d2f>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	@ 0x60
		BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80027fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002806:	ee17 0a90 	vmov	r0, s15
 800280a:	f7fd febd 	bl	8000588 <__aeabi_f2d>
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b3f      	ldr	r3, [pc, #252]	@ (8002910 <bmi088_update+0x3f8>)
 8002814:	f7fe f83a 	bl	800088c <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <bmi088_update+0x3fc>)
 8002826:	f7fd ff07 	bl	8000638 <__aeabi_dmul>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <bmi088_update+0x400>)
 8002838:	f7fd fefe 	bl	8000638 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7a5b      	ldrb	r3, [r3, #9]
 8002848:	3301      	adds	r3, #1
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002852:	ee17 0a90 	vmov	r0, s15
 8002856:	f7fd fe97 	bl	8000588 <__aeabi_f2d>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	ec43 2b11 	vmov	d1, r2, r3
 8002862:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 8002900 <bmi088_update+0x3e8>
 8002866:	f00f fb8f 	bl	8011f88 <pow>
 800286a:	ec53 2b10 	vmov	r2, r3, d0
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fee1 	bl	8000638 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4b26      	ldr	r3, [pc, #152]	@ (800291c <bmi088_update+0x404>)
 8002884:	f7fd fd20 	bl	80002c8 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	a31d      	add	r3, pc, #116	@ (adr r3, 8002908 <bmi088_update+0x3f0>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd fecf 	bl	8000638 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <bmi088_update+0x3fc>)
 80028a8:	f7fd fff0 	bl	800088c <__aeabi_ddiv>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f9b8 	bl	8000c28 <__aeabi_d2f>
 80028b8:	4602      	mov	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	665a      	str	r2, [r3, #100]	@ 0x64

		if(is_starded)
 80028be:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <bmi088_update+0x40c>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d03a      	beq.n	800293c <bmi088_update+0x424>
		{
			BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	d502      	bpl.n	80028e6 <bmi088_update+0x3ce>
 80028e0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8002928 <bmi088_update+0x410>
 80028e4:	e007      	b.n	80028f6 <bmi088_update+0x3de>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
 80028fc:	e021      	b.n	8002942 <bmi088_update+0x42a>
 80028fe:	bf00      	nop
 8002900:	00000000 	.word	0x00000000
 8002904:	40000000 	.word	0x40000000
 8002908:	51eb851f 	.word	0x51eb851f
 800290c:	40239eb8 	.word	0x40239eb8
 8002910:	40e00000 	.word	0x40e00000
 8002914:	408f4000 	.word	0x408f4000
 8002918:	3ff80000 	.word	0x3ff80000
 800291c:	40100000 	.word	0x40100000
 8002920:	402e0000 	.word	0x402e0000
 8002924:	2000023e 	.word	0x2000023e
	...
 8002930:	40438800 	.word	0x40438800
 8002934:	00000000 	.word	0x00000000
 8002938:	412e8480 	.word	0x412e8480
		}
		else
		{
			is_starded = 1;
 800293c:	4bb2      	ldr	r3, [pc, #712]	@ (8002c08 <bmi088_update+0x6f0>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
		}

		BMI->datas.last_time = BMI->datas.current_time;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	671a      	str	r2, [r3, #112]	@ 0x70
		BMI->flags.isAccelDmaComplete = 0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	709a      	strb	r2, [r3, #2]
		is_time_updated = 1;
 8002950:	4bae      	ldr	r3, [pc, #696]	@ (8002c0c <bmi088_update+0x6f4>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]

		// Start temperature DMA transfer
		HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_temp_data, 2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6918      	ldr	r0, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3393      	adds	r3, #147	@ 0x93
 800295e:	2202      	movs	r2, #2
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	2222      	movs	r2, #34	@ 0x22
 8002968:	2130      	movs	r1, #48	@ 0x30
 800296a:	f005 fbd5 	bl	8008118 <HAL_I2C_Mem_Read_DMA>
	}

	// Process gyroscope data if DMA transfer is complete
	if(BMI->flags.isGyroDmaComplete && is_time_updated)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 813a 	beq.w	8002bec <bmi088_update+0x6d4>
 8002978:	4ba4      	ldr	r3, [pc, #656]	@ (8002c0c <bmi088_update+0x6f4>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8135 	beq.w	8002bec <bmi088_update+0x6d4>
	{
		int16_t gyro_x_16 = (BMI->datas.raw_gyro_data[1] << 8) | BMI->datas.raw_gyro_data[0];
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	b21a      	sxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002992:	b21b      	sxth	r3, r3
 8002994:	4313      	orrs	r3, r2
 8002996:	823b      	strh	r3, [r7, #16]
		int16_t gyro_y_16 = (BMI->datas.raw_gyro_data[3] << 8) | BMI->datas.raw_gyro_data[2];
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	81fb      	strh	r3, [r7, #14]
		int16_t gyro_z_16 = (BMI->datas.raw_gyro_data[5] << 8) | BMI->datas.raw_gyro_data[4];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	81bb      	strh	r3, [r7, #12]

		BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d0:	ee17 0a90 	vmov	r0, s15
 80029d4:	f7fd fdd8 	bl	8000588 <__aeabi_f2d>
 80029d8:	a387      	add	r3, pc, #540	@ (adr r3, 8002bf8 <bmi088_update+0x6e0>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fd ff55 	bl	800088c <__aeabi_ddiv>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7b9b      	ldrb	r3, [r3, #14]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029f4:	4113      	asrs	r3, r2
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fe:	ee17 0a90 	vmov	r0, s15
 8002a02:	f7fd fdc1 	bl	8000588 <__aeabi_f2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	f7fd fe13 	bl	8000638 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4614      	mov	r4, r2
 8002a18:	461d      	mov	r5, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fdb1 	bl	8000588 <__aeabi_f2d>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fc4b 	bl	80002c8 <__aeabi_dsub>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	a371      	add	r3, pc, #452	@ (adr r3, 8002c00 <bmi088_update+0x6e8>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fdfa 	bl	8000638 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fe f8ec 	bl	8000c28 <__aeabi_d2f>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	61da      	str	r2, [r3, #28]
		BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a62:	ee17 0a90 	vmov	r0, s15
 8002a66:	f7fd fd8f 	bl	8000588 <__aeabi_f2d>
 8002a6a:	a363      	add	r3, pc, #396	@ (adr r3, 8002bf8 <bmi088_update+0x6e0>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd ff0c 	bl	800088c <__aeabi_ddiv>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7b9b      	ldrb	r3, [r3, #14]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a86:	4113      	asrs	r3, r2
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a90:	ee17 0a90 	vmov	r0, s15
 8002a94:	f7fd fd78 	bl	8000588 <__aeabi_f2d>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	f7fd fdca 	bl	8000638 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	461d      	mov	r5, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fd68 	bl	8000588 <__aeabi_f2d>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc02 	bl	80002c8 <__aeabi_dsub>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	a34c      	add	r3, pc, #304	@ (adr r3, 8002c00 <bmi088_update+0x6e8>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd fdb1 	bl	8000638 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f7fe f8a3 	bl	8000c28 <__aeabi_d2f>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	621a      	str	r2, [r3, #32]
		BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd46 	bl	8000588 <__aeabi_f2d>
 8002afc:	a33e      	add	r3, pc, #248	@ (adr r3, 8002bf8 <bmi088_update+0x6e0>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fec3 	bl	800088c <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	461d      	mov	r5, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7b9b      	ldrb	r3, [r3, #14]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b18:	4113      	asrs	r3, r2
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b22:	ee17 0a90 	vmov	r0, s15
 8002b26:	f7fd fd2f 	bl	8000588 <__aeabi_f2d>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd fd81 	bl	8000638 <__aeabi_dmul>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	461d      	mov	r5, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fd1f 	bl	8000588 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fbb9 	bl	80002c8 <__aeabi_dsub>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	a328      	add	r3, pc, #160	@ (adr r3, 8002c00 <bmi088_update+0x6e8>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fd68 	bl	8000638 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7fe f85a 	bl	8000c28 <__aeabi_d2f>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24

		Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z, BMI->datas.acc_y, -BMI->datas.acc_x, BMI->datas.acc_z, BMI->datas.delta_time);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b86:	eef1 6a67 	vneg.f32	s13, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 5a18 	vldr	s11, [r3, #96]	@ 0x60
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002b9c:	eef1 7a67 	vneg.f32	s15, s15
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	ed93 5a19 	vldr	s10, [r3, #100]	@ 0x64
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	edd3 4a1d 	vldr	s9, [r3, #116]	@ 0x74
 8002bac:	eeb0 3a64 	vmov.f32	s6, s9
 8002bb0:	eef0 2a45 	vmov.f32	s5, s10
 8002bb4:	eeb0 2a67 	vmov.f32	s4, s15
 8002bb8:	eef0 1a65 	vmov.f32	s3, s11
 8002bbc:	eeb0 1a46 	vmov.f32	s2, s12
 8002bc0:	eef0 0a66 	vmov.f32	s1, s13
 8002bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc8:	f001 fcee 	bl	80045a8 <Orientation_Update>
		BMI->datas.theta = quaternionToThetaZ();
 8002bcc:	f002 f960 	bl	8004e90 <quaternionToThetaZ>
 8002bd0:	eef0 7a40 	vmov.f32	s15, s0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		is_gyro_renewed = 1;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <bmi088_update+0x6f8>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]

		BMI->flags.isGyroDmaComplete = 0;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	70da      	strb	r2, [r3, #3]
		is_time_updated = 0;
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <bmi088_update+0x6f4>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
	}
}
 8002bec:	bf00      	nop
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	40dfffc0 	.word	0x40dfffc0
 8002c00:	a0000000 	.word	0xa0000000
 8002c04:	3f91df46 	.word	0x3f91df46
 8002c08:	2000023e 	.word	0x2000023e
 8002c0c:	2000023d 	.word	0x2000023d
 8002c10:	2000023f 	.word	0x2000023f

08002c14 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	705a      	strb	r2, [r3, #1]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <bmi088_accel_dma_complete_callback>:
/**
 * @brief Accelerometer DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_accel_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelDmaComplete = 1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	709a      	strb	r2, [r3, #2]
	BMI->flags.isDmaTransferActive = 0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	711a      	strb	r2, [r3, #4]
	BMI->flags.isAccelUpdated = 0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	705a      	strb	r2, [r3, #1]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <bmi088_gyro_dma_complete_callback>:
/**
 * @brief Gyroscope DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_gyro_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroDmaComplete = 1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	711a      	strb	r2, [r3, #4]
	BMI->flags.isGyroUpdated = 0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <bmi088_temp_dma_complete_callback>:
/**
 * @brief Temperature DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_temp_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	uint16_t Temp_uint11 = (BMI->datas.raw_temp_data[0] << 3) | (BMI->datas.raw_temp_data[1] >> 5);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	b21b      	sxth	r3, r3
 8002cb6:	81bb      	strh	r3, [r7, #12]
	int16_t Temp_int11 = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	81fb      	strh	r3, [r7, #14]
	if (Temp_uint11 > 1023){
 8002cbc:	89bb      	ldrh	r3, [r7, #12]
 8002cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc2:	d305      	bcc.n	8002cd0 <bmi088_temp_dma_complete_callback+0x3c>
		Temp_int11 = Temp_uint11 - 2048;
 8002cc4:	89bb      	ldrh	r3, [r7, #12]
 8002cc6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	81fb      	strh	r3, [r7, #14]
 8002cce:	e001      	b.n	8002cd4 <bmi088_temp_dma_complete_callback+0x40>
	}
	else{
		Temp_int11 = Temp_uint11;
 8002cd0:	89bb      	ldrh	r3, [r7, #12]
 8002cd2:	81fb      	strh	r3, [r7, #14]
	}
	BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8002cd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce0:	ee17 0a90 	vmov	r0, s15
 8002ce4:	f7fd fc50 	bl	8000588 <__aeabi_f2d>
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002cf0:	f7fd fca2 	bl	8000638 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <bmi088_temp_dma_complete_callback+0x8c>)
 8002d02:	f7fd fae3 	bl	80002cc <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff8b 	bl	8000c28 <__aeabi_d2f>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40370000 	.word	0x40370000

08002d24 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f000 f909 	bl	8002f48 <calculate_total_acceleration>
 8002d36:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002d3a:	4b71      	ldr	r3, [pc, #452]	@ (8002f00 <flight_algorithm_update+0x1dc>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	f200 80d6 	bhi.w	8002ef0 <flight_algorithm_update+0x1cc>
 8002d44:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <flight_algorithm_update+0x28>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d61 	.word	0x08002d61
 8002d50:	08002d95 	.word	0x08002d95
 8002d54:	08002dbf 	.word	0x08002dbf
 8002d58:	08002ef1 	.word	0x08002ef1
 8002d5c:	08002ef1 	.word	0x08002ef1
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002d60:	4b68      	ldr	r3, [pc, #416]	@ (8002f04 <flight_algorithm_update+0x1e0>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	dc00      	bgt.n	8002d76 <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                durum_verisi = 2;
            }
            break;
 8002d74:	e0bc      	b.n	8002ef0 <flight_algorithm_update+0x1cc>
                current_phase = PHASE_BOOST;
 8002d76:	4b62      	ldr	r3, [pc, #392]	@ (8002f00 <flight_algorithm_update+0x1dc>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002d7c:	4b62      	ldr	r3, [pc, #392]	@ (8002f08 <flight_algorithm_update+0x1e4>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002d82:	f003 f85d 	bl	8005e40 <HAL_GetTick>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4a60      	ldr	r2, [pc, #384]	@ (8002f0c <flight_algorithm_update+0x1e8>)
 8002d8a:	6013      	str	r3, [r2, #0]
                durum_verisi = 2;
 8002d8c:	4b60      	ldr	r3, [pc, #384]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]
            break;
 8002d92:	e0ad      	b.n	8002ef0 <flight_algorithm_update+0x1cc>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002d94:	f003 f854 	bl	8005e40 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f0c <flight_algorithm_update+0x1e8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002da4:	4293      	cmp	r3, r2
 8002da6:	f240 80a0 	bls.w	8002eea <flight_algorithm_update+0x1c6>
                current_phase = PHASE_COAST;
 8002daa:	4b55      	ldr	r3, [pc, #340]	@ (8002f00 <flight_algorithm_update+0x1dc>)
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002db0:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <flight_algorithm_update+0x1f0>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
                durum_verisi = 3;
 8002db6:	4b56      	ldr	r3, [pc, #344]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002db8:	2203      	movs	r2, #3
 8002dba:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002dbc:	e095      	b.n	8002eea <flight_algorithm_update+0x1c6>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	ed93 7a08 	vldr	s14, [r3, #32]
 8002dc4:	4b54      	ldr	r3, [pc, #336]	@ (8002f18 <flight_algorithm_update+0x1f4>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	dd05      	ble.n	8002de0 <flight_algorithm_update+0xbc>
                is_armed = 1;
 8002dd4:	4b51      	ldr	r3, [pc, #324]	@ (8002f1c <flight_algorithm_update+0x1f8>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
                durum_verisi = 4;
 8002dda:	4b4d      	ldr	r3, [pc, #308]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002ddc:	2204      	movs	r2, #4
 8002dde:	701a      	strb	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002de0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <flight_algorithm_update+0x1f8>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d019      	beq.n	8002e1c <flight_algorithm_update+0xf8>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002dee:	eeb0 7ae7 	vabs.f32	s14, s15
 8002df2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <flight_algorithm_update+0x1fc>)
 8002df4:	edd3 7a00 	vldr	s15, [r3]
 8002df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	dd0c      	ble.n	8002e1c <flight_algorithm_update+0xf8>
 8002e02:	4b48      	ldr	r3, [pc, #288]	@ (8002f24 <flight_algorithm_update+0x200>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <flight_algorithm_update+0xf8>
                drogue_deployed = 1;
 8002e0a:	4b47      	ldr	r3, [pc, #284]	@ (8002f28 <flight_algorithm_update+0x204>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8002e10:	4b44      	ldr	r3, [pc, #272]	@ (8002f24 <flight_algorithm_update+0x200>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
                durum_verisi = 5;
 8002e16:	4b3e      	ldr	r3, [pc, #248]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002e18:	2205      	movs	r2, #5
 8002e1a:	701a      	strb	r2, [r3, #0]
            }

                 // Detect magnetic field decrease (apogee)
            if (is_armed && sensor_fusion->apogeeDetect == 1 && deployed_magnetic) {
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <flight_algorithm_update+0x1f8>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <flight_algorithm_update+0x122>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7e1b      	ldrb	r3, [r3, #24]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10c      	bne.n	8002e46 <flight_algorithm_update+0x122>
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <flight_algorithm_update+0x208>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <flight_algorithm_update+0x122>
                drogue_deployed = 1;
 8002e34:	4b3c      	ldr	r3, [pc, #240]	@ (8002f28 <flight_algorithm_update+0x204>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
                deployed_magnetic = 0;
 8002e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f2c <flight_algorithm_update+0x208>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
                durum_verisi = 6;
 8002e40:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002e42:	2206      	movs	r2, #6
 8002e44:	701a      	strb	r2, [r3, #0]
            }

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002e46:	4b35      	ldr	r3, [pc, #212]	@ (8002f1c <flight_algorithm_update+0x1f8>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d029      	beq.n	8002ea2 <flight_algorithm_update+0x17e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	d521      	bpl.n	8002ea2 <flight_algorithm_update+0x17e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e64:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <flight_algorithm_update+0x20c>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d516      	bpl.n	8002ea2 <flight_algorithm_update+0x17e>
 8002e74:	4b2f      	ldr	r3, [pc, #188]	@ (8002f34 <flight_algorithm_update+0x210>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <flight_algorithm_update+0x17e>
                apogee_counter++;
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f38 <flight_algorithm_update+0x214>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a2d      	ldr	r2, [pc, #180]	@ (8002f38 <flight_algorithm_update+0x214>)
 8002e84:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 10) {  // Confirm apogee after 5 consecutive samples
 8002e86:	4b2c      	ldr	r3, [pc, #176]	@ (8002f38 <flight_algorithm_update+0x214>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b09      	cmp	r3, #9
 8002e8c:	dd0c      	ble.n	8002ea8 <flight_algorithm_update+0x184>
                    drogue_deployed = 1;
 8002e8e:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <flight_algorithm_update+0x204>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8002e94:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <flight_algorithm_update+0x210>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
                    durum_verisi = 7;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	701a      	strb	r2, [r3, #0]
                if (apogee_counter >= 10) {  // Confirm apogee after 5 consecutive samples
 8002ea0:	e002      	b.n	8002ea8 <flight_algorithm_update+0x184>
                }
            } else {
                apogee_counter = 0;
 8002ea2:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <flight_algorithm_update+0x214>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a20      	ldr	r2, [pc, #128]	@ (8002f30 <flight_algorithm_update+0x20c>)
 8002eae:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <flight_algorithm_update+0x204>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01a      	beq.n	8002eee <flight_algorithm_update+0x1ca>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <flight_algorithm_update+0x218>)
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d400      	bmi.n	8002ed0 <flight_algorithm_update+0x1ac>
                current_phase = PHASE_MAIN_DESCENT;
                main_deployed = 1;
                drogue_deployed = 0;
                durum_verisi = 8;
            }
            break;
 8002ece:	e00e      	b.n	8002eee <flight_algorithm_update+0x1ca>
                current_phase = PHASE_MAIN_DESCENT;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <flight_algorithm_update+0x1dc>)
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	701a      	strb	r2, [r3, #0]
                main_deployed = 1;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <flight_algorithm_update+0x21c>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <flight_algorithm_update+0x204>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
                durum_verisi = 8;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <flight_algorithm_update+0x1ec>)
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	701a      	strb	r2, [r3, #0]
            break;
 8002ee8:	e001      	b.n	8002eee <flight_algorithm_update+0x1ca>
            break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <flight_algorithm_update+0x1cc>
            break;
 8002eee:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    prev_altitude = bme->altitude;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <flight_algorithm_update+0x220>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000244 	.word	0x20000244
 8002f04:	20000004 	.word	0x20000004
 8002f08:	20000245 	.word	0x20000245
 8002f0c:	20000254 	.word	0x20000254
 8002f10:	20000018 	.word	0x20000018
 8002f14:	20000014 	.word	0x20000014
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	20000246 	.word	0x20000246
 8002f20:	20000010 	.word	0x20000010
 8002f24:	20000015 	.word	0x20000015
 8002f28:	20000247 	.word	0x20000247
 8002f2c:	20000017 	.word	0x20000017
 8002f30:	20000250 	.word	0x20000250
 8002f34:	20000016 	.word	0x20000016
 8002f38:	2000024c 	.word	0x2000024c
 8002f3c:	2000000c 	.word	0x2000000c
 8002f40:	20000248 	.word	0x20000248
 8002f44:	20000258 	.word	0x20000258

08002f48 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8002f70:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	f00f f8c4 	bl	8012118 <sqrtf>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
}
 8002f94:	eeb0 0a67 	vmov.f32	s0, s15
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e01f      	b.n	8003006 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	e016      	b.n	8002ffa <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d101      	bne.n	8002fd8 <KalmanFilter_Init+0x38>
 8002fd4:	491b      	ldr	r1, [pc, #108]	@ (8003044 <KalmanFilter_Init+0xa4>)
 8002fd6:	e001      	b.n	8002fdc <KalmanFilter_Init+0x3c>
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3302      	adds	r3, #2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4403      	add	r3, r0
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	dde5      	ble.n	8002fcc <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b02      	cmp	r3, #2
 800300a:	dddc      	ble.n	8002fc6 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0e      	ldr	r2, [pc, #56]	@ (8003048 <KalmanFilter_Init+0xa8>)
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <KalmanFilter_Init+0xac>)
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <KalmanFilter_Init+0xb0>)
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	42c80000 	.word	0x42c80000
 8003048:	3c23d70a 	.word	0x3c23d70a
 800304c:	3ba3d70a 	.word	0x3ba3d70a
 8003050:	40a00000 	.word	0x40a00000

08003054 <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 800305c:	4a07      	ldr	r2, [pc, #28]	@ (800307c <L86_GNSS_Init+0x28>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <L86_GNSS_Init+0x28>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800306a:	4905      	ldr	r1, [pc, #20]	@ (8003080 <L86_GNSS_Init+0x2c>)
 800306c:	4618      	mov	r0, r3
 800306e:	f008 fe49 	bl	800bd04 <HAL_UART_Receive_DMA>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000025c 	.word	0x2000025c
 8003080:	20000260 	.word	0x20000260

08003084 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_UART_RxHalfCpltCallback+0x38>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10e      	bne.n	80030b4 <HAL_UART_RxHalfCpltCallback+0x30>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003096:	b672      	cpsid	i
}
 8003098:	bf00      	nop
	{
		// Disable interrupts briefly to prevent race condition
		__disable_irq();
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 800309a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800309e:	4808      	ldr	r0, [pc, #32]	@ (80030c0 <HAL_UART_RxHalfCpltCallback+0x3c>)
 80030a0:	f000 f858 	bl	8003154 <process_data>
		active_buffer = 0;
 80030a4:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <HAL_UART_RxHalfCpltCallback+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
		buffer_ready_flag = 1;
 80030aa:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <HAL_UART_RxHalfCpltCallback+0x44>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030b0:	b662      	cpsie	i
}
 80030b2:	bf00      	nop
		__enable_irq();
	}
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000025c 	.word	0x2000025c
 80030c0:	20000260 	.word	0x20000260
 80030c4:	20001071 	.word	0x20001071
 80030c8:	20001070 	.word	0x20001070

080030cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_UART_RxCpltCallback+0x38>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10e      	bne.n	80030fc <HAL_UART_RxCpltCallback+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 80030de:	b672      	cpsid	i
}
 80030e0:	bf00      	nop
	{
		// Disable interrupts briefly to prevent race condition
		__disable_irq();
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 80030e2:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80030e6:	4808      	ldr	r0, [pc, #32]	@ (8003108 <HAL_UART_RxCpltCallback+0x3c>)
 80030e8:	f000 f834 	bl	8003154 <process_data>
		active_buffer = 1;
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <HAL_UART_RxCpltCallback+0x40>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
		buffer_ready_flag = 1;
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <HAL_UART_RxCpltCallback+0x44>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030f8:	b662      	cpsie	i
}
 80030fa:	bf00      	nop
		__enable_irq();
	}
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000025c 	.word	0x2000025c
 8003108:	20000710 	.word	0x20000710
 800310c:	20001071 	.word	0x20001071
 8003110:	20001070 	.word	0x20001070

08003114 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	// Only process if new data is available
	if (buffer_ready_flag)
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <L86_GNSS_Update+0x3c>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00f      	beq.n	8003146 <L86_GNSS_Update+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 8003126:	b672      	cpsid	i
}
 8003128:	bf00      	nop
	{
		__disable_irq();
		buffer_ready_flag = 0;
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <L86_GNSS_Update+0x3c>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003130:	b662      	cpsie	i
}
 8003132:	bf00      	nop
		__enable_irq();
		
		get_GNRMC_data(gps_data_);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f82d 	bl	8003194 <get_GNRMC_data>
		get_GPGGA_data(gps_data_);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8cc 	bl	80032d8 <get_GPGGA_data>
		format_data(gps_data_);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f951 	bl	80033e8 <format_data>
	}
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20001070 	.word	0x20001070

08003154 <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
	// Ensure null termination for string functions
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	461a      	mov	r2, r3
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	480a      	ldr	r0, [pc, #40]	@ (8003190 <process_data+0x3c>)
 8003168:	f00b f887 	bl	800e27a <memcpy>
	
	// Add null termination at the end to prevent buffer overflow
	if (buffer_size < BUFFER_SIZE) {
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003172:	d204      	bcs.n	800317e <process_data+0x2a>
		gps_buffer[buffer_size] = '\0';
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4a06      	ldr	r2, [pc, #24]	@ (8003190 <process_data+0x3c>)
 8003178:	2100      	movs	r1, #0
 800317a:	54d1      	strb	r1, [r2, r3]
	} else {
		gps_buffer[BUFFER_SIZE - 1] = '\0';
	}
}
 800317c:	e003      	b.n	8003186 <process_data+0x32>
		gps_buffer[BUFFER_SIZE - 1] = '\0';
 800317e:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <process_data+0x3c>)
 8003180:	2200      	movs	r2, #0
 8003182:	f883 24af 	strb.w	r2, [r3, #1199]	@ 0x4af
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000bc0 	.word	0x20000bc0

08003194 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	b08d      	sub	sp, #52	@ 0x34
 8003198:	af08      	add	r7, sp, #32
 800319a:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 800319c:	4945      	ldr	r1, [pc, #276]	@ (80032b4 <get_GNRMC_data+0x120>)
 800319e:	4846      	ldr	r0, [pc, #280]	@ (80032b8 <get_GNRMC_data+0x124>)
 80031a0:	f00a ffcd 	bl	800e13e <strstr>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4a45      	ldr	r2, [pc, #276]	@ (80032bc <get_GNRMC_data+0x128>)
 80031a8:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && (gps_GNRMC_start_point + 17) < (gps_buffer + BUFFER_SIZE))
 80031aa:	4b44      	ldr	r3, [pc, #272]	@ (80032bc <get_GNRMC_data+0x128>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <get_GNRMC_data+0x4c>
 80031b2:	4b42      	ldr	r3, [pc, #264]	@ (80032bc <get_GNRMC_data+0x128>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3311      	adds	r3, #17
 80031b8:	4a41      	ldr	r2, [pc, #260]	@ (80032c0 <get_GNRMC_data+0x12c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d210      	bcs.n	80031e0 <get_GNRMC_data+0x4c>
	{
		if (*(gps_GNRMC_start_point + 17) == VALID)
 80031be:	4b3f      	ldr	r3, [pc, #252]	@ (80032bc <get_GNRMC_data+0x128>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3311      	adds	r3, #17
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b41      	cmp	r3, #65	@ 0x41
 80031c8:	d103      	bne.n	80031d2 <get_GNRMC_data+0x3e>
		{
			is_data_valid = 1;
 80031ca:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <get_GNRMC_data+0x130>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
		if (*(gps_GNRMC_start_point + 17) == VALID)
 80031d0:	e00c      	b.n	80031ec <get_GNRMC_data+0x58>
		}
		else
		{
			is_data_valid = 0;
 80031d2:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <get_GNRMC_data+0x130>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
			gps_data_->is_valid = INVALID;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2256      	movs	r2, #86	@ 0x56
 80031dc:	711a      	strb	r2, [r3, #4]
		if (*(gps_GNRMC_start_point + 17) == VALID)
 80031de:	e005      	b.n	80031ec <get_GNRMC_data+0x58>
		}
	}
	else
	{
		is_data_valid = 0;
 80031e0:	4b38      	ldr	r3, [pc, #224]	@ (80032c4 <get_GNRMC_data+0x130>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2256      	movs	r2, #86	@ 0x56
 80031ea:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 80031ec:	4b35      	ldr	r3, [pc, #212]	@ (80032c4 <get_GNRMC_data+0x130>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d157      	bne.n	80032a4 <get_GNRMC_data+0x110>
	{
		memset(current_data, 0, DATA_SIZE);
 80031f4:	2278      	movs	r2, #120	@ 0x78
 80031f6:	2100      	movs	r1, #0
 80031f8:	4833      	ldr	r0, [pc, #204]	@ (80032c8 <get_GNRMC_data+0x134>)
 80031fa:	f00a ff98 	bl	800e12e <memset>
		counter = 0;
 80031fe:	4b33      	ldr	r3, [pc, #204]	@ (80032cc <get_GNRMC_data+0x138>)
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8003204:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <get_GNRMC_data+0x128>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a31      	ldr	r2, [pc, #196]	@ (80032d0 <get_GNRMC_data+0x13c>)
 800320a:	6013      	str	r3, [r2, #0]
		
		// Improved bounds checking
		while(*current_char != '*' && counter < (DATA_SIZE - 1) && 
 800320c:	e011      	b.n	8003232 <get_GNRMC_data+0x9e>
			  current_char < (gps_buffer + BUFFER_SIZE))
		{
			current_data[counter] = *current_char;
 800320e:	4b30      	ldr	r3, [pc, #192]	@ (80032d0 <get_GNRMC_data+0x13c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2e      	ldr	r2, [pc, #184]	@ (80032cc <get_GNRMC_data+0x138>)
 8003214:	7812      	ldrb	r2, [r2, #0]
 8003216:	7819      	ldrb	r1, [r3, #0]
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <get_GNRMC_data+0x134>)
 800321a:	5499      	strb	r1, [r3, r2]
			counter++;
 800321c:	4b2b      	ldr	r3, [pc, #172]	@ (80032cc <get_GNRMC_data+0x138>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <get_GNRMC_data+0x138>)
 8003226:	701a      	strb	r2, [r3, #0]
			current_char++;
 8003228:	4b29      	ldr	r3, [pc, #164]	@ (80032d0 <get_GNRMC_data+0x13c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	4a28      	ldr	r2, [pc, #160]	@ (80032d0 <get_GNRMC_data+0x13c>)
 8003230:	6013      	str	r3, [r2, #0]
		while(*current_char != '*' && counter < (DATA_SIZE - 1) && 
 8003232:	4b27      	ldr	r3, [pc, #156]	@ (80032d0 <get_GNRMC_data+0x13c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b2a      	cmp	r3, #42	@ 0x2a
 800323a:	d008      	beq.n	800324e <get_GNRMC_data+0xba>
 800323c:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <get_GNRMC_data+0x138>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b76      	cmp	r3, #118	@ 0x76
 8003242:	d804      	bhi.n	800324e <get_GNRMC_data+0xba>
			  current_char < (gps_buffer + BUFFER_SIZE))
 8003244:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <get_GNRMC_data+0x13c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <get_GNRMC_data+0x12c>)
		while(*current_char != '*' && counter < (DATA_SIZE - 1) && 
 800324a:	4293      	cmp	r3, r2
 800324c:	d3df      	bcc.n	800320e <get_GNRMC_data+0x7a>
		}
		current_data[counter] = '\0'; // Ensure null termination
 800324e:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <get_GNRMC_data+0x138>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	4b1c      	ldr	r3, [pc, #112]	@ (80032c8 <get_GNRMC_data+0x134>)
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f103 0c04 	add.w	ip, r3, #4
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3308      	adds	r3, #8
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	320c      	adds	r2, #12
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	3110      	adds	r1, #16
 8003270:	6079      	str	r1, [r7, #4]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	3014      	adds	r0, #20
 8003276:	68fc      	ldr	r4, [r7, #12]
 8003278:	3418      	adds	r4, #24
 800327a:	68fd      	ldr	r5, [r7, #12]
 800327c:	351c      	adds	r5, #28
 800327e:	68fe      	ldr	r6, [r7, #12]
 8003280:	3620      	adds	r6, #32
 8003282:	68f9      	ldr	r1, [r7, #12]
 8003284:	3124      	adds	r1, #36	@ 0x24
 8003286:	9107      	str	r1, [sp, #28]
 8003288:	9606      	str	r6, [sp, #24]
 800328a:	9505      	str	r5, [sp, #20]
 800328c:	9404      	str	r4, [sp, #16]
 800328e:	9003      	str	r0, [sp, #12]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	9102      	str	r1, [sp, #8]
 8003294:	9201      	str	r2, [sp, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	4663      	mov	r3, ip
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	490d      	ldr	r1, [pc, #52]	@ (80032d4 <get_GNRMC_data+0x140>)
 800329e:	480a      	ldr	r0, [pc, #40]	@ (80032c8 <get_GNRMC_data+0x134>)
 80032a0:	f00a fec6 	bl	800e030 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <get_GNRMC_data+0x128>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	080133b4 	.word	0x080133b4
 80032b8:	20000bc0 	.word	0x20000bc0
 80032bc:	20001074 	.word	0x20001074
 80032c0:	20001070 	.word	0x20001070
 80032c4:	2000107c 	.word	0x2000107c
 80032c8:	20001084 	.word	0x20001084
 80032cc:	200010fc 	.word	0x200010fc
 80032d0:	20001080 	.word	0x20001080
 80032d4:	080133bc 	.word	0x080133bc

080032d8 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 80032d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032da:	b08d      	sub	sp, #52	@ 0x34
 80032dc:	af08      	add	r7, sp, #32
 80032de:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 80032e0:	4939      	ldr	r1, [pc, #228]	@ (80033c8 <get_GPGGA_data+0xf0>)
 80032e2:	483a      	ldr	r0, [pc, #232]	@ (80033cc <get_GPGGA_data+0xf4>)
 80032e4:	f00a ff2b 	bl	800e13e <strstr>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a39      	ldr	r2, [pc, #228]	@ (80033d0 <get_GPGGA_data+0xf8>)
 80032ec:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL && gps_GPGGA_start_point < (gps_buffer + BUFFER_SIZE))
 80032ee:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <get_GPGGA_data+0xf8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <get_GPGGA_data+0xe6>
 80032f6:	4b36      	ldr	r3, [pc, #216]	@ (80033d0 <get_GPGGA_data+0xf8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a36      	ldr	r2, [pc, #216]	@ (80033d4 <get_GPGGA_data+0xfc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d25e      	bcs.n	80033be <get_GPGGA_data+0xe6>
	{
		if(gps_data_->is_valid == VALID)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	2b41      	cmp	r3, #65	@ 0x41
 8003306:	d157      	bne.n	80033b8 <get_GPGGA_data+0xe0>
		{
			memset(current_data, 0, DATA_SIZE);
 8003308:	2278      	movs	r2, #120	@ 0x78
 800330a:	2100      	movs	r1, #0
 800330c:	4832      	ldr	r0, [pc, #200]	@ (80033d8 <get_GPGGA_data+0x100>)
 800330e:	f00a ff0e 	bl	800e12e <memset>
			counter = 0;
 8003312:	4b32      	ldr	r3, [pc, #200]	@ (80033dc <get_GPGGA_data+0x104>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <get_GPGGA_data+0xf8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <get_GPGGA_data+0x108>)
 800331e:	6013      	str	r3, [r2, #0]
			
			// Improved bounds checking
			while(*(current_char) != '*' && counter < (DATA_SIZE - 1) && 
 8003320:	e011      	b.n	8003346 <get_GPGGA_data+0x6e>
				  current_char < (gps_buffer + BUFFER_SIZE))
			{
				current_data[counter] = *current_char;
 8003322:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <get_GPGGA_data+0x108>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <get_GPGGA_data+0x104>)
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	7819      	ldrb	r1, [r3, #0]
 800332c:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <get_GPGGA_data+0x100>)
 800332e:	5499      	strb	r1, [r3, r2]
				counter++;
 8003330:	4b2a      	ldr	r3, [pc, #168]	@ (80033dc <get_GPGGA_data+0x104>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b28      	ldr	r3, [pc, #160]	@ (80033dc <get_GPGGA_data+0x104>)
 800333a:	701a      	strb	r2, [r3, #0]
				current_char++;
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <get_GPGGA_data+0x108>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	4a27      	ldr	r2, [pc, #156]	@ (80033e0 <get_GPGGA_data+0x108>)
 8003344:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*' && counter < (DATA_SIZE - 1) && 
 8003346:	4b26      	ldr	r3, [pc, #152]	@ (80033e0 <get_GPGGA_data+0x108>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b2a      	cmp	r3, #42	@ 0x2a
 800334e:	d008      	beq.n	8003362 <get_GPGGA_data+0x8a>
 8003350:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <get_GPGGA_data+0x104>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b76      	cmp	r3, #118	@ 0x76
 8003356:	d804      	bhi.n	8003362 <get_GPGGA_data+0x8a>
				  current_char < (gps_buffer + BUFFER_SIZE))
 8003358:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <get_GPGGA_data+0x108>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <get_GPGGA_data+0xfc>)
			while(*(current_char) != '*' && counter < (DATA_SIZE - 1) && 
 800335e:	4293      	cmp	r3, r2
 8003360:	d3df      	bcc.n	8003322 <get_GPGGA_data+0x4a>
			}
			current_data[counter] = '\0'; // Ensure null termination
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <get_GPGGA_data+0x104>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <get_GPGGA_data+0x100>)
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f103 0c08 	add.w	ip, r3, #8
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	330c      	adds	r3, #12
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	3210      	adds	r2, #16
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	3114      	adds	r1, #20
 8003384:	6079      	str	r1, [r7, #4]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	3025      	adds	r0, #37	@ 0x25
 800338a:	68fc      	ldr	r4, [r7, #12]
 800338c:	3426      	adds	r4, #38	@ 0x26
 800338e:	68fd      	ldr	r5, [r7, #12]
 8003390:	3528      	adds	r5, #40	@ 0x28
 8003392:	68fe      	ldr	r6, [r7, #12]
 8003394:	362c      	adds	r6, #44	@ 0x2c
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	3130      	adds	r1, #48	@ 0x30
 800339a:	9107      	str	r1, [sp, #28]
 800339c:	9606      	str	r6, [sp, #24]
 800339e:	9505      	str	r5, [sp, #20]
 80033a0:	9404      	str	r4, [sp, #16]
 80033a2:	9003      	str	r0, [sp, #12]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	9102      	str	r1, [sp, #8]
 80033a8:	9201      	str	r2, [sp, #4]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4663      	mov	r3, ip
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	490c      	ldr	r1, [pc, #48]	@ (80033e4 <get_GPGGA_data+0x10c>)
 80033b2:	4809      	ldr	r0, [pc, #36]	@ (80033d8 <get_GPGGA_data+0x100>)
 80033b4:	f00a fe3c 	bl	800e030 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <get_GPGGA_data+0xf8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
	}
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c6:	bf00      	nop
 80033c8:	080133e4 	.word	0x080133e4
 80033cc:	20000bc0 	.word	0x20000bc0
 80033d0:	20001078 	.word	0x20001078
 80033d4:	20001070 	.word	0x20001070
 80033d8:	20001084 	.word	0x20001084
 80033dc:	200010fc 	.word	0x200010fc
 80033e0:	20001080 	.word	0x20001080
 80033e4:	080133ec 	.word	0x080133ec

080033e8 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	791b      	ldrb	r3, [r3, #4]
 80033f4:	2b41      	cmp	r3, #65	@ 0x41
 80033f6:	f040 8154 	bne.w	80036a2 <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4aab      	ldr	r2, [pc, #684]	@ (80036ac <format_data+0x2c4>)
 8003400:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8003402:	4baa      	ldr	r3, [pc, #680]	@ (80036ac <format_data+0x2c4>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80036b0 <format_data+0x2c8>
 800340c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003410:	ee16 0a90 	vmov	r0, s13
 8003414:	f7fd f8b8 	bl	8000588 <__aeabi_f2d>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	ec43 2b10 	vmov	d0, r2, r3
 8003420:	f00e ffde 	bl	80123e0 <floor>
 8003424:	ec53 2b10 	vmov	r2, r3, d0
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f7fd fbfc 	bl	8000c28 <__aeabi_d2f>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8003436:	4b9d      	ldr	r3, [pc, #628]	@ (80036ac <format_data+0x2c4>)
 8003438:	ed93 7a00 	vldr	s14, [r3]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003442:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80036b0 <format_data+0x2c8>
 8003446:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800344a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344e:	4b97      	ldr	r3, [pc, #604]	@ (80036ac <format_data+0x2c4>)
 8003450:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8003454:	4b95      	ldr	r3, [pc, #596]	@ (80036ac <format_data+0x2c4>)
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80036b4 <format_data+0x2cc>
 800345e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003462:	4b92      	ldr	r3, [pc, #584]	@ (80036ac <format_data+0x2c4>)
 8003464:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800346e:	4b8f      	ldr	r3, [pc, #572]	@ (80036ac <format_data+0x2c4>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4a8d      	ldr	r2, [pc, #564]	@ (80036b8 <format_data+0x2d0>)
 8003484:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8003486:	4b8c      	ldr	r3, [pc, #560]	@ (80036b8 <format_data+0x2d0>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80036b0 <format_data+0x2c8>
 8003490:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003494:	ee16 0a90 	vmov	r0, s13
 8003498:	f7fd f876 	bl	8000588 <__aeabi_f2d>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	ec43 2b10 	vmov	d0, r2, r3
 80034a4:	f00e ff9c 	bl	80123e0 <floor>
 80034a8:	ec53 2b10 	vmov	r2, r3, d0
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd fbba 	bl	8000c28 <__aeabi_d2f>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 80034ba:	4b7f      	ldr	r3, [pc, #508]	@ (80036b8 <format_data+0x2d0>)
 80034bc:	ed93 7a00 	vldr	s14, [r3]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034c6:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80036b0 <format_data+0x2c8>
 80034ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d2:	4b79      	ldr	r3, [pc, #484]	@ (80036b8 <format_data+0x2d0>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 80034d8:	4b77      	ldr	r3, [pc, #476]	@ (80036b8 <format_data+0x2d0>)
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80036b4 <format_data+0x2cc>
 80034e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e6:	4b74      	ldr	r3, [pc, #464]	@ (80036b8 <format_data+0x2d0>)
 80034e8:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80034f2:	4b71      	ldr	r3, [pc, #452]	@ (80036b8 <format_data+0x2d0>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6d      	ldr	r2, [pc, #436]	@ (80036bc <format_data+0x2d4>)
 8003508:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 800350a:	4b6c      	ldr	r3, [pc, #432]	@ (80036bc <format_data+0x2d4>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80036c0 <format_data+0x2d8>
 8003514:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003518:	ee16 0a90 	vmov	r0, s13
 800351c:	f7fd f834 	bl	8000588 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	ec43 2b10 	vmov	d0, r2, r3
 8003528:	f00e ff5a 	bl	80123e0 <floor>
 800352c:	ec53 2b10 	vmov	r2, r3, d0
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb58 	bl	8000be8 <__aeabi_d2uiz>
 8003538:	4603      	mov	r3, r0
 800353a:	b2da      	uxtb	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8003542:	4b5e      	ldr	r3, [pc, #376]	@ (80036bc <format_data+0x2d4>)
 8003544:	ed93 7a00 	vldr	s14, [r3]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354e:	461a      	mov	r2, r3
 8003550:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003564:	4b55      	ldr	r3, [pc, #340]	@ (80036bc <format_data+0x2d4>)
 8003566:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003570:	3303      	adds	r3, #3
 8003572:	b2da      	uxtb	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003580:	2b17      	cmp	r3, #23
 8003582:	d907      	bls.n	8003594 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800358a:	3b18      	subs	r3, #24
 800358c:	b2da      	uxtb	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8003594:	4b49      	ldr	r3, [pc, #292]	@ (80036bc <format_data+0x2d4>)
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80036b0 <format_data+0x2c8>
 800359e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035a2:	ee16 0a90 	vmov	r0, s13
 80035a6:	f7fc ffef 	bl	8000588 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	ec43 2b10 	vmov	d0, r2, r3
 80035b2:	f00e ff15 	bl	80123e0 <floor>
 80035b6:	ec53 2b10 	vmov	r2, r3, d0
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f7fd fb13 	bl	8000be8 <__aeabi_d2uiz>
 80035c2:	4603      	mov	r3, r0
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 80035cc:	4b3b      	ldr	r3, [pc, #236]	@ (80036bc <format_data+0x2d4>)
 80035ce:	ed93 7a00 	vldr	s14, [r3]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d8:	461a      	mov	r2, r3
 80035da:	2364      	movs	r3, #100	@ 0x64
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ec:	4b33      	ldr	r3, [pc, #204]	@ (80036bc <format_data+0x2d4>)
 80035ee:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 80035f2:	4b32      	ldr	r3, [pc, #200]	@ (80036bc <format_data+0x2d4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ffc6 	bl	8000588 <__aeabi_f2d>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	ec43 2b10 	vmov	d0, r2, r3
 8003604:	f00e feec 	bl	80123e0 <floor>
 8003608:	ec53 2b10 	vmov	r2, r3, d0
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	f7fd faea 	bl	8000be8 <__aeabi_d2uiz>
 8003614:	4603      	mov	r3, r0
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a28      	ldr	r2, [pc, #160]	@ (80036c4 <format_data+0x2dc>)
 8003624:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8003626:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <format_data+0x2dc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a27      	ldr	r2, [pc, #156]	@ (80036c8 <format_data+0x2e0>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0b5b      	lsrs	r3, r3, #13
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 800363a:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <format_data+0x2dc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8003644:	4611      	mov	r1, r2
 8003646:	f242 7210 	movw	r2, #10000	@ 0x2710
 800364a:	fb01 f202 	mul.w	r2, r1, r2
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	4a1c      	ldr	r2, [pc, #112]	@ (80036c4 <format_data+0x2dc>)
 8003652:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <format_data+0x2dc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1c      	ldr	r2, [pc, #112]	@ (80036cc <format_data+0x2e4>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	b2da      	uxtb	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8003668:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <format_data+0x2dc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8003672:	4611      	mov	r1, r2
 8003674:	2264      	movs	r2, #100	@ 0x64
 8003676:	fb01 f202 	mul.w	r2, r1, r2
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	4a11      	ldr	r2, [pc, #68]	@ (80036c4 <format_data+0x2dc>)
 800367e:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <format_data+0x2dc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20001100 	.word	0x20001100
 80036b0:	42c80000 	.word	0x42c80000
 80036b4:	42700000 	.word	0x42700000
 80036b8:	20001104 	.word	0x20001104
 80036bc:	20001108 	.word	0x20001108
 80036c0:	461c4000 	.word	0x461c4000
 80036c4:	2000110c 	.word	0x2000110c
 80036c8:	d1b71759 	.word	0xd1b71759
 80036cc:	51eb851f 	.word	0x51eb851f

080036d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036d4:	f002 fb4e 	bl	8005d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036d8:	f000 f8a8 	bl	800382c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036dc:	f000 fad2 	bl	8003c84 <MX_GPIO_Init>
  MX_DMA_Init();
 80036e0:	f000 fa8a 	bl	8003bf8 <MX_DMA_Init>
  MX_I2C1_Init();
 80036e4:	f000 f960 	bl	80039a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80036e8:	f000 f98c 	bl	8003a04 <MX_I2C3_Init>
  MX_TIM2_Init();
 80036ec:	f000 f9b8 	bl	8003a60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80036f0:	f000 fa2e 	bl	8003b50 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80036f4:	f000 f906 	bl	8003904 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80036f8:	f000 fa54 	bl	8003ba4 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80036fc:	f000 f9fe 	bl	8003afc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8003700:	f000 f9ae 	bl	8003a60 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8003704:	483d      	ldr	r0, [pc, #244]	@ (80037fc <main+0x12c>)
 8003706:	f007 fd53 	bl	800b1b0 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800370a:	2200      	movs	r2, #0
 800370c:	2101      	movs	r1, #1
 800370e:	201c      	movs	r0, #28
 8003710:	f003 f8d5 	bl	80068be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003714:	201c      	movs	r0, #28
 8003716:	f003 f8ee 	bl	80068f6 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 800371a:	2201      	movs	r2, #1
 800371c:	2100      	movs	r1, #0
 800371e:	2009      	movs	r0, #9
 8003720:	f003 f8cd 	bl	80068be <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8003724:	2201      	movs	r2, #1
 8003726:	2100      	movs	r1, #0
 8003728:	200a      	movs	r0, #10
 800372a:	f003 f8c8 	bl	80068be <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800372e:	200a      	movs	r0, #10
 8003730:	f003 f8e1 	bl	80068f6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003734:	2009      	movs	r0, #9
 8003736:	f003 f8de 	bl	80068f6 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 800373a:	f000 fb35 	bl	8003da8 <bme280_begin>
	HAL_Delay(1000);
 800373e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003742:	f002 fb89 	bl	8005e58 <HAL_Delay>
	bme280_config();
 8003746:	f7fd fea1 	bl	800148c <bme280_config>
	bme280_update();
 800374a:	f7fe f85b 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 800374e:	f000 fb43 	bl	8003dd8 <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 8003752:	482b      	ldr	r0, [pc, #172]	@ (8003800 <main+0x130>)
 8003754:	f7fe fce0 	bl	8002118 <bmi088_config>
	//get_offset(&BMI_sensor);


	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 8003758:	f001 fc2a 	bl	8004fb0 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 800375c:	4829      	ldr	r0, [pc, #164]	@ (8003804 <main+0x134>)
 800375e:	f001 fd9f 	bl	80052a0 <sensor_fusion_init>
	//loraBegin();
	//lora_activate();

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	HAL_UART_Transmit(&huart6, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8003762:	2364      	movs	r3, #100	@ 0x64
 8003764:	2213      	movs	r2, #19
 8003766:	4928      	ldr	r1, [pc, #160]	@ (8003808 <main+0x138>)
 8003768:	4828      	ldr	r0, [pc, #160]	@ (800380c <main+0x13c>)
 800376a:	f008 f9c3 	bl	800baf4 <HAL_UART_Transmit>
    HAL_UART_DeInit(&huart6);
 800376e:	4827      	ldr	r0, [pc, #156]	@ (800380c <main+0x13c>)
 8003770:	f008 f98e 	bl	800ba90 <HAL_UART_DeInit>
    huart6.Init.BaudRate = 57600;
 8003774:	4b25      	ldr	r3, [pc, #148]	@ (800380c <main+0x13c>)
 8003776:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800377a:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&huart6);
 800377c:	4823      	ldr	r0, [pc, #140]	@ (800380c <main+0x13c>)
 800377e:	f008 f937 	bl	800b9f0 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 8003782:	4823      	ldr	r0, [pc, #140]	@ (8003810 <main+0x140>)
 8003784:	f003 f8e0 	bl	8006948 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6);
 8003788:	4820      	ldr	r0, [pc, #128]	@ (800380c <main+0x13c>)
 800378a:	f7ff fc63 	bl	8003054 <L86_GNSS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 800378e:	481c      	ldr	r0, [pc, #112]	@ (8003800 <main+0x130>)
 8003790:	f7fe fec2 	bl	8002518 <bmi088_update>
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 8003794:	f7fe f836 	bl	8001804 <bme280_update>
		//read_value();	// Transmit current sensor readings


		/*PERIODIC OPERATIONS (100ms)*/
		// Execute operations every 100ms
		if (tx_timer_flag_100ms >= 1) {
 8003798:	4b1e      	ldr	r3, [pc, #120]	@ (8003814 <main+0x144>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d022      	beq.n	80037e8 <main+0x118>
		  tx_timer_flag_100ms = 0;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003814 <main+0x144>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  read_ADC();
 80037a8:	f000 fb44 	bl	8003e34 <read_ADC>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80037ac:	491a      	ldr	r1, [pc, #104]	@ (8003818 <main+0x148>)
 80037ae:	4814      	ldr	r0, [pc, #80]	@ (8003800 <main+0x130>)
 80037b0:	f001 fdca 	bl	8005348 <sensor_fusion_update_mahony>
		  flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 80037b4:	4a18      	ldr	r2, [pc, #96]	@ (8003818 <main+0x148>)
 80037b6:	4912      	ldr	r1, [pc, #72]	@ (8003800 <main+0x130>)
 80037b8:	4812      	ldr	r0, [pc, #72]	@ (8003804 <main+0x134>)
 80037ba:	f7ff fab3 	bl	8002d24 <flight_algorithm_update>
		  // Update GPS/GNSS data
		  L86_GNSS_Update(&gnss_data);
 80037be:	4817      	ldr	r0, [pc, #92]	@ (800381c <main+0x14c>)
 80037c0:	f7ff fca8 	bl	8003114 <L86_GNSS_Update>

		  // Package all sensor data into telemetry packet for ground station transmission
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &gnss_data, hmc1021_gauss);
 80037c4:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <main+0x150>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	4a13      	ldr	r2, [pc, #76]	@ (800381c <main+0x14c>)
 80037d0:	490b      	ldr	r1, [pc, #44]	@ (8003800 <main+0x130>)
 80037d2:	480c      	ldr	r0, [pc, #48]	@ (8003804 <main+0x134>)
 80037d4:	f000 fc5e 	bl	8004094 <addDataPacketNormal>

		  uart2_send_packet_dma((uint8_t*)normal_paket, 38);
 80037d8:	2126      	movs	r1, #38	@ 0x26
 80037da:	4812      	ldr	r0, [pc, #72]	@ (8003824 <main+0x154>)
 80037dc:	f000 fbf4 	bl	8003fc8 <uart2_send_packet_dma>
		  lora_send_packet_dma((uint8_t*)normal_paket, 38);
 80037e0:	2126      	movs	r1, #38	@ 0x26
 80037e2:	4810      	ldr	r0, [pc, #64]	@ (8003824 <main+0x154>)
 80037e4:	f000 fc0c 	bl	8004000 <lora_send_packet_dma>
		  //read_value();
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 80037e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003828 <main+0x158>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	d9cd      	bls.n	800378e <main+0xbe>
		  tx_timer_flag_1s = 0;
 80037f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <main+0x158>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 80037f8:	e7c9      	b.n	800378e <main+0xbe>
 80037fa:	bf00      	nop
 80037fc:	20001260 	.word	0x20001260
 8003800:	20001508 	.word	0x20001508
 8003804:	200014a0 	.word	0x200014a0
 8003808:	08013418 	.word	0x08013418
 800380c:	20001338 	.word	0x20001338
 8003810:	20001440 	.word	0x20001440
 8003814:	20001606 	.word	0x20001606
 8003818:	200015a0 	.word	0x200015a0
 800381c:	200015bc 	.word	0x200015bc
 8003820:	20001610 	.word	0x20001610
 8003824:	20001618 	.word	0x20001618
 8003828:	20001607 	.word	0x20001607

0800382c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b094      	sub	sp, #80	@ 0x50
 8003830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003832:	f107 031c 	add.w	r3, r7, #28
 8003836:	2234      	movs	r2, #52	@ 0x34
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f00a fc77 	bl	800e12e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	2300      	movs	r3, #0
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <SystemClock_Config+0xd0>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	4a28      	ldr	r2, [pc, #160]	@ (80038fc <SystemClock_Config+0xd0>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003860:	4b26      	ldr	r3, [pc, #152]	@ (80038fc <SystemClock_Config+0xd0>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800386c:	2300      	movs	r3, #0
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4b23      	ldr	r3, [pc, #140]	@ (8003900 <SystemClock_Config+0xd4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a22      	ldr	r2, [pc, #136]	@ (8003900 <SystemClock_Config+0xd4>)
 8003876:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <SystemClock_Config+0xd4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003888:	2301      	movs	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800388c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003892:	2302      	movs	r3, #2
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003896:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800389a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800389c:	2308      	movs	r3, #8
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80038a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80038a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038a6:	2302      	movs	r3, #2
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038aa:	2302      	movs	r3, #2
 80038ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038ae:	2302      	movs	r3, #2
 80038b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038b2:	f107 031c 	add.w	r3, r7, #28
 80038b6:	4618      	mov	r0, r3
 80038b8:	f007 f98c 	bl	800abd4 <HAL_RCC_OscConfig>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80038c2:	f000 fbb9 	bl	8004038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038c6:	230f      	movs	r3, #15
 80038c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ca:	2302      	movs	r3, #2
 80038cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	2105      	movs	r1, #5
 80038e4:	4618      	mov	r0, r3
 80038e6:	f006 fe2b 	bl	800a540 <HAL_RCC_ClockConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80038f0:	f000 fba2 	bl	8004038 <Error_Handler>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3750      	adds	r7, #80	@ 0x50
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000

08003904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800390a:	463b      	mov	r3, r7
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003916:	4b21      	ldr	r3, [pc, #132]	@ (800399c <MX_ADC1_Init+0x98>)
 8003918:	4a21      	ldr	r2, [pc, #132]	@ (80039a0 <MX_ADC1_Init+0x9c>)
 800391a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800391c:	4b1f      	ldr	r3, [pc, #124]	@ (800399c <MX_ADC1_Init+0x98>)
 800391e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003924:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <MX_ADC1_Init+0x98>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800392a:	4b1c      	ldr	r3, [pc, #112]	@ (800399c <MX_ADC1_Init+0x98>)
 800392c:	2200      	movs	r2, #0
 800392e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003930:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <MX_ADC1_Init+0x98>)
 8003932:	2200      	movs	r2, #0
 8003934:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <MX_ADC1_Init+0x98>)
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800393e:	4b17      	ldr	r3, [pc, #92]	@ (800399c <MX_ADC1_Init+0x98>)
 8003940:	2200      	movs	r2, #0
 8003942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003944:	4b15      	ldr	r3, [pc, #84]	@ (800399c <MX_ADC1_Init+0x98>)
 8003946:	4a17      	ldr	r2, [pc, #92]	@ (80039a4 <MX_ADC1_Init+0xa0>)
 8003948:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800394a:	4b14      	ldr	r3, [pc, #80]	@ (800399c <MX_ADC1_Init+0x98>)
 800394c:	2200      	movs	r2, #0
 800394e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003950:	4b12      	ldr	r3, [pc, #72]	@ (800399c <MX_ADC1_Init+0x98>)
 8003952:	2201      	movs	r2, #1
 8003954:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003956:	4b11      	ldr	r3, [pc, #68]	@ (800399c <MX_ADC1_Init+0x98>)
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800395e:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <MX_ADC1_Init+0x98>)
 8003960:	2201      	movs	r2, #1
 8003962:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003964:	480d      	ldr	r0, [pc, #52]	@ (800399c <MX_ADC1_Init+0x98>)
 8003966:	f002 fa9b 	bl	8005ea0 <HAL_ADC_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003970:	f000 fb62 	bl	8004038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003974:	2309      	movs	r3, #9
 8003976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003978:	2301      	movs	r3, #1
 800397a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003980:	463b      	mov	r3, r7
 8003982:	4619      	mov	r1, r3
 8003984:	4805      	ldr	r0, [pc, #20]	@ (800399c <MX_ADC1_Init+0x98>)
 8003986:	f002 fc6d 	bl	8006264 <HAL_ADC_ConfigChannel>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003990:	f000 fb52 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20001110 	.word	0x20001110
 80039a0:	40012000 	.word	0x40012000
 80039a4:	0f000001 	.word	0x0f000001

080039a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039ac:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039ae:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <MX_I2C1_Init+0x54>)
 80039b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039b2:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039b4:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <MX_I2C1_Init+0x58>)
 80039b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039be:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039cc:	4b0a      	ldr	r3, [pc, #40]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039d2:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039d8:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039e4:	4804      	ldr	r0, [pc, #16]	@ (80039f8 <MX_I2C1_Init+0x50>)
 80039e6:	f003 fee3 	bl	80077b0 <HAL_I2C_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039f0:	f000 fb22 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20001158 	.word	0x20001158
 80039fc:	40005400 	.word	0x40005400
 8003a00:	000186a0 	.word	0x000186a0

08003a04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a08:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a0a:	4a13      	ldr	r2, [pc, #76]	@ (8003a58 <MX_I2C3_Init+0x54>)
 8003a0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003a0e:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a10:	4a12      	ldr	r2, [pc, #72]	@ (8003a5c <MX_I2C3_Init+0x58>)
 8003a12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a14:	4b0f      	ldr	r3, [pc, #60]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a34:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a40:	4804      	ldr	r0, [pc, #16]	@ (8003a54 <MX_I2C3_Init+0x50>)
 8003a42:	f003 feb5 	bl	80077b0 <HAL_I2C_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a4c:	f000 faf4 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	200011ac 	.word	0x200011ac
 8003a58:	40005c00 	.word	0x40005c00
 8003a5c:	000186a0 	.word	0x000186a0

08003a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a66:	f107 0308 	add.w	r3, r7, #8
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a74:	463b      	mov	r3, r7
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8003a84:	4b1c      	ldr	r3, [pc, #112]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003a86:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003a92:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003a94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003aa6:	4814      	ldr	r0, [pc, #80]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003aa8:	f007 fb32 	bl	800b110 <HAL_TIM_Base_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003ab2:	f000 fac1 	bl	8004038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003abc:	f107 0308 	add.w	r3, r7, #8
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480d      	ldr	r0, [pc, #52]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003ac4:	f007 fcd4 	bl	800b470 <HAL_TIM_ConfigClockSource>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003ace:	f000 fab3 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ada:	463b      	mov	r3, r7
 8003adc:	4619      	mov	r1, r3
 8003ade:	4806      	ldr	r0, [pc, #24]	@ (8003af8 <MX_TIM2_Init+0x98>)
 8003ae0:	f007 fef6 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003aea:	f000 faa5 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20001260 	.word	0x20001260

08003afc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <MX_UART4_Init+0x50>)
 8003b04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003b14:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b22:	220c      	movs	r2, #12
 8003b24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003b32:	4805      	ldr	r0, [pc, #20]	@ (8003b48 <MX_UART4_Init+0x4c>)
 8003b34:	f007 ff5c 	bl	800b9f0 <HAL_UART_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003b3e:	f000 fa7b 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200012a8 	.word	0x200012a8
 8003b4c:	40004c00 	.word	0x40004c00

08003b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b56:	4a12      	ldr	r2, [pc, #72]	@ (8003ba0 <MX_USART2_UART_Init+0x50>)
 8003b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b86:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b88:	f007 ff32 	bl	800b9f0 <HAL_UART_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b92:	f000 fa51 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200012f0 	.word	0x200012f0
 8003ba0:	40004400 	.word	0x40004400

08003ba4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <MX_USART6_UART_Init+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bce:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bdc:	f007 ff08 	bl	800b9f0 <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003be6:	f000 fa27 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20001338 	.word	0x20001338
 8003bf4:	40011400 	.word	0x40011400

08003bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	4b1f      	ldr	r3, [pc, #124]	@ (8003c80 <MX_DMA_Init+0x88>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <MX_DMA_Init+0x88>)
 8003c08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <MX_DMA_Init+0x88>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <MX_DMA_Init+0x88>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <MX_DMA_Init+0x88>)
 8003c24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <MX_DMA_Init+0x88>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	200b      	movs	r0, #11
 8003c3c:	f002 fe3f 	bl	80068be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c40:	200b      	movs	r0, #11
 8003c42:	f002 fe58 	bl	80068f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	200f      	movs	r0, #15
 8003c4c:	f002 fe37 	bl	80068be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c50:	200f      	movs	r0, #15
 8003c52:	f002 fe50 	bl	80068f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2011      	movs	r0, #17
 8003c5c:	f002 fe2f 	bl	80068be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003c60:	2011      	movs	r0, #17
 8003c62:	f002 fe48 	bl	80068f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2100      	movs	r1, #0
 8003c6a:	203a      	movs	r0, #58	@ 0x3a
 8003c6c:	f002 fe27 	bl	80068be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c70:	203a      	movs	r0, #58	@ 0x3a
 8003c72:	f002 fe40 	bl	80068f6 <HAL_NVIC_EnableIRQ>

}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	@ 0x28
 8003c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003caa:	4b3c      	ldr	r3, [pc, #240]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b38      	ldr	r3, [pc, #224]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	4a37      	ldr	r2, [pc, #220]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc6:	4b35      	ldr	r3, [pc, #212]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b31      	ldr	r3, [pc, #196]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a30      	ldr	r2, [pc, #192]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4a29      	ldr	r2, [pc, #164]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfe:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <MX_GPIO_Init+0x118>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	210c      	movs	r1, #12
 8003d0e:	4824      	ldr	r0, [pc, #144]	@ (8003da0 <MX_GPIO_Init+0x11c>)
 8003d10:	f003 fd1c 	bl	800774c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d1a:	4822      	ldr	r0, [pc, #136]	@ (8003da4 <MX_GPIO_Init+0x120>)
 8003d1c:	f003 fd16 	bl	800774c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8003d20:	230c      	movs	r3, #12
 8003d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4619      	mov	r1, r3
 8003d36:	481a      	ldr	r0, [pc, #104]	@ (8003da0 <MX_GPIO_Init+0x11c>)
 8003d38:	f003 fa80 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4619      	mov	r1, r3
 8003d54:	4813      	ldr	r0, [pc, #76]	@ (8003da4 <MX_GPIO_Init+0x120>)
 8003d56:	f003 fa71 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003d5a:	2318      	movs	r3, #24
 8003d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	480d      	ldr	r0, [pc, #52]	@ (8003da4 <MX_GPIO_Init+0x120>)
 8003d70:	f003 fa64 	bl	800723c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003d74:	2200      	movs	r2, #0
 8003d76:	2100      	movs	r1, #0
 8003d78:	2009      	movs	r0, #9
 8003d7a:	f002 fda0 	bl	80068be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d7e:	2009      	movs	r0, #9
 8003d80:	f002 fdb9 	bl	80068f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003d84:	2200      	movs	r2, #0
 8003d86:	2100      	movs	r1, #0
 8003d88:	200a      	movs	r0, #10
 8003d8a:	f002 fd98 	bl	80068be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003d8e:	200a      	movs	r0, #10
 8003d90:	f002 fdb1 	bl	80068f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d94:	bf00      	nop
 8003d96:	3728      	adds	r7, #40	@ 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40020400 	.word	0x40020400

08003da8 <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_8;
 8003dac:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <bme280_begin+0x28>)
 8003dae:	2203      	movs	r2, #3
 8003db0:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <bme280_begin+0x28>)
 8003db4:	2203      	movs	r2, #3
 8003db6:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_8;
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <bme280_begin+0x28>)
 8003dba:	2204      	movs	r2, #4
 8003dbc:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_20;
 8003dbe:	4b04      	ldr	r3, [pc, #16]	@ (8003dd0 <bme280_begin+0x28>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8003dc4:	4903      	ldr	r1, [pc, #12]	@ (8003dd4 <bme280_begin+0x2c>)
 8003dc6:	4802      	ldr	r0, [pc, #8]	@ (8003dd0 <bme280_begin+0x28>)
 8003dc8:	f7fd fce4 	bl	8001794 <bme280_init>
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200014a0 	.word	0x200014a0
 8003dd4:	200011ac 	.word	0x200011ac

08003dd8 <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <bmi_imu_init+0x54>)
 8003dde:	2208      	movs	r2, #8
 8003de0:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <bmi_imu_init+0x54>)
 8003de4:	2209      	movs	r2, #9
 8003de6:	72da      	strb	r2, [r3, #11]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003de8:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <bmi_imu_init+0x54>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	721a      	strb	r2, [r3, #8]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <bmi_imu_init+0x54>)
 8003df0:	2203      	movs	r2, #3
 8003df2:	725a      	strb	r2, [r3, #9]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8003df4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <bmi_imu_init+0x54>)
 8003df6:	2202      	movs	r2, #2
 8003df8:	735a      	strb	r2, [r3, #13]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <bmi_imu_init+0x54>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	739a      	strb	r2, [r3, #14]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <bmi_imu_init+0x54>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	731a      	strb	r2, [r3, #12]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <bmi_imu_init+0x54>)
 8003e08:	2209      	movs	r2, #9
 8003e0a:	751a      	strb	r2, [r3, #20]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8003e0c:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <bmi_imu_init+0x54>)
 8003e0e:	220a      	movs	r2, #10
 8003e10:	755a      	strb	r2, [r3, #21]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <bmi_imu_init+0x54>)
 8003e14:	4a06      	ldr	r2, [pc, #24]	@ (8003e30 <bmi_imu_init+0x58>)
 8003e16:	611a      	str	r2, [r3, #16]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <bmi_imu_init+0x54>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	619a      	str	r2, [r3, #24]

  return bmi088_init(&BMI_sensor);
 8003e1e:	4803      	ldr	r0, [pc, #12]	@ (8003e2c <bmi_imu_init+0x54>)
 8003e20:	f7fe f918 	bl	8002054 <bmi088_init>
 8003e24:	4603      	mov	r3, r0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20001508 	.word	0x20001508
 8003e30:	20001158 	.word	0x20001158

08003e34 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC()
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
    static uint16_t adc1_raw = 0;  // ADC1 değeri (Channel 9)

    // ADC1 okuma
    HAL_ADC_Start(&hadc1);
 8003e38:	4818      	ldr	r0, [pc, #96]	@ (8003e9c <read_ADC+0x68>)
 8003e3a:	f002 f875 	bl	8005f28 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) {
 8003e3e:	2105      	movs	r1, #5
 8003e40:	4816      	ldr	r0, [pc, #88]	@ (8003e9c <read_ADC+0x68>)
 8003e42:	f002 f976 	bl	8006132 <HAL_ADC_PollForConversion>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <read_ADC+0x26>
        adc1_raw = HAL_ADC_GetValue(&hadc1);
 8003e4c:	4813      	ldr	r0, [pc, #76]	@ (8003e9c <read_ADC+0x68>)
 8003e4e:	f002 f9fb 	bl	8006248 <HAL_ADC_GetValue>
 8003e52:	4603      	mov	r3, r0
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <read_ADC+0x6c>)
 8003e58:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8003e5a:	4810      	ldr	r0, [pc, #64]	@ (8003e9c <read_ADC+0x68>)
 8003e5c:	f002 f936 	bl	80060cc <HAL_ADC_Stop>


    // Kalibrasyonlu değerleri hesapla
    hmc1021_voltage = (adc1_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 8003e60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <read_ADC+0x6c>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003ea4 <read_ADC+0x70>
 8003e70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e74:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003ea8 <read_ADC+0x74>
 8003e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <read_ADC+0x78>)
 8003e7e:	edc3 7a00 	vstr	s15, [r3]
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <read_ADC+0x78>)
 8003e84:	edd3 7a00 	vldr	s15, [r3]
 8003e88:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003eb0 <read_ADC+0x7c>
 8003e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e90:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <read_ADC+0x80>)
 8003e92:	edc3 7a00 	vstr	s15, [r3]

}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20001110 	.word	0x20001110
 8003ea0:	20001614 	.word	0x20001614
 8003ea4:	40533333 	.word	0x40533333
 8003ea8:	45800000 	.word	0x45800000
 8003eac:	2000160c 	.word	0x2000160c
 8003eb0:	3fd33333 	.word	0x3fd33333
 8003eb4:	20001610 	.word	0x20001610

08003eb8 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d102      	bne.n	8003ece <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8003ec8:	4806      	ldr	r0, [pc, #24]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003eca:	f7fe fea3 	bl	8002c14 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d102      	bne.n	8003eda <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8003ed4:	4803      	ldr	r0, [pc, #12]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003ed6:	f7fe feaa 	bl	8002c2e <bmi088_set_gyro_INT>
  }
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20001508 	.word	0x20001508

08003ee8 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef8:	d10d      	bne.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8003efa:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003f06:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003f14:	701a      	strb	r2, [r3, #0]
  }
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20001606 	.word	0x20001606
 8003f28:	20001607 	.word	0x20001607

08003f2c <HAL_UART_TxCpltCallback>:
 * @brief UART transmission complete callback
 * @param huart UART handle
 * @note Clears transmission busy flag
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <HAL_UART_TxCpltCallback+0x34>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d102      	bne.n	8003f44 <HAL_UART_TxCpltCallback+0x18>
		usart4_tx_busy = 0;
 8003f3e:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <HAL_UART_TxCpltCallback+0x38>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a07      	ldr	r2, [pc, #28]	@ (8003f68 <HAL_UART_TxCpltCallback+0x3c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d102      	bne.n	8003f54 <HAL_UART_TxCpltCallback+0x28>
		usart2_tx_busy = 0;
 8003f4e:	4b07      	ldr	r3, [pc, #28]	@ (8003f6c <HAL_UART_TxCpltCallback+0x40>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
	}
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40004c00 	.word	0x40004c00
 8003f64:	20001604 	.word	0x20001604
 8003f68:	40004400 	.word	0x40004400
 8003f6c:	20001605 	.word	0x20001605

08003f70 <HAL_I2C_MemRxCpltCallback>:
 * @brief I2C Memory read complete callback (DMA)
 * @param hi2c I2C handle
 * @note Handles BMI088 sensor data DMA transfer completion
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <HAL_I2C_MemRxCpltCallback+0x4c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d117      	bne.n	8003fb2 <HAL_I2C_MemRxCpltCallback+0x42>
		// Check which device was being read based on device address
		if (hi2c->Devaddress == ACC_I2C_ADD) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	2b30      	cmp	r3, #48	@ 0x30
 8003f88:	d10c      	bne.n	8003fa4 <HAL_I2C_MemRxCpltCallback+0x34>
			// Accelerometer data received
			if (hi2c->pBuffPtr == BMI_sensor.datas.raw_temp_data) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc0 <HAL_I2C_MemRxCpltCallback+0x50>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d103      	bne.n	8003f9c <HAL_I2C_MemRxCpltCallback+0x2c>
				bmi088_temp_dma_complete_callback(&BMI_sensor);
 8003f94:	480b      	ldr	r0, [pc, #44]	@ (8003fc4 <HAL_I2C_MemRxCpltCallback+0x54>)
 8003f96:	f7fe fe7d 	bl	8002c94 <bmi088_temp_dma_complete_callback>
		} else if (hi2c->Devaddress == GYRO_I2C_ADD) {
			// Gyroscope data received
			bmi088_gyro_dma_complete_callback(&BMI_sensor);
		}
	}
}
 8003f9a:	e00a      	b.n	8003fb2 <HAL_I2C_MemRxCpltCallback+0x42>
				bmi088_accel_dma_complete_callback(&BMI_sensor);
 8003f9c:	4809      	ldr	r0, [pc, #36]	@ (8003fc4 <HAL_I2C_MemRxCpltCallback+0x54>)
 8003f9e:	f7fe fe53 	bl	8002c48 <bmi088_accel_dma_complete_callback>
}
 8003fa2:	e006      	b.n	8003fb2 <HAL_I2C_MemRxCpltCallback+0x42>
		} else if (hi2c->Devaddress == GYRO_I2C_ADD) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa8:	2bd0      	cmp	r3, #208	@ 0xd0
 8003faa:	d102      	bne.n	8003fb2 <HAL_I2C_MemRxCpltCallback+0x42>
			bmi088_gyro_dma_complete_callback(&BMI_sensor);
 8003fac:	4805      	ldr	r0, [pc, #20]	@ (8003fc4 <HAL_I2C_MemRxCpltCallback+0x54>)
 8003fae:	f7fe fe5e 	bl	8002c6e <bmi088_gyro_dma_complete_callback>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40005400 	.word	0x40005400
 8003fc0:	2000159b 	.word	0x2000159b
 8003fc4:	20001508 	.word	0x20001508

08003fc8 <uart2_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void uart2_send_packet_dma(uint8_t *data, uint16_t size)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
	if (!usart2_tx_busy) {
 8003fd4:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <uart2_send_packet_dma+0x30>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <uart2_send_packet_dma+0x28>
		usart2_tx_busy = 1;
 8003fde:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <uart2_send_packet_dma+0x30>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, data, size);
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4804      	ldr	r0, [pc, #16]	@ (8003ffc <uart2_send_packet_dma+0x34>)
 8003fec:	f007 fe0e 	bl	800bc0c <HAL_UART_Transmit_DMA>
	}
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20001605 	.word	0x20001605
 8003ffc:	200012f0 	.word	0x200012f0

08004000 <lora_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void lora_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	807b      	strh	r3, [r7, #2]
	if (!usart4_tx_busy) {
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <lora_send_packet_dma+0x30>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d108      	bne.n	8004028 <lora_send_packet_dma+0x28>
		usart4_tx_busy = 1;
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <lora_send_packet_dma+0x30>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, data, size);
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	461a      	mov	r2, r3
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4804      	ldr	r0, [pc, #16]	@ (8004034 <lora_send_packet_dma+0x34>)
 8004024:	f007 fdf2 	bl	800bc0c <HAL_UART_Transmit_DMA>
	}
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001604 	.word	0x20001604
 8004034:	200012a8 	.word	0x200012a8

08004038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800403c:	b672      	cpsid	i
}
 800403e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <Error_Handler+0x8>

08004044 <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[38];

unsigned char check_sum_hesapla_normal(int a){
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8004050:	2304      	movs	r3, #4
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	e00a      	b.n	800406c <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8004056:	4a0e      	ldr	r2, [pc, #56]	@ (8004090 <check_sum_hesapla_normal+0x4c>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3301      	adds	r3, #1
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	dbf0      	blt.n	8004056 <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	425a      	negs	r2, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	bf58      	it	pl
 800407e:	4253      	negpl	r3, r2
 8004080:	b2db      	uxtb	r3, r3
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20001618 	.word	0x20001618

08004094 <addDataPacketNormal>:
  normal_paket[48] = check_sum_hesapla_normal(48); // Check_sum = check_sum_hesapla();
  normal_paket[49] = 0x0D; // Sabit
  normal_paket[50] = 0x0A;
}*/

void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, gps_data_t* GPS, float hmc1021_gauss){
 8004094:	b580      	push	{r7, lr}
 8004096:	b08e      	sub	sp, #56	@ 0x38
 8004098:	af00      	add	r7, sp, #0
 800409a:	6178      	str	r0, [r7, #20]
 800409c:	6139      	str	r1, [r7, #16]
 800409e:	60fa      	str	r2, [r7, #12]
 80040a0:	ed87 0a02 	vstr	s0, [r7, #8]
  normal_paket[0] = 0xFF; // Sabit
 80040a4:	4b59      	ldr	r3, [pc, #356]	@ (800420c <addDataPacketNormal+0x178>)
 80040a6:	22ff      	movs	r2, #255	@ 0xff
 80040a8:	701a      	strb	r2, [r3, #0]
  normal_paket[1] = 0xFF; // Sabit
 80040aa:	4b58      	ldr	r3, [pc, #352]	@ (800420c <addDataPacketNormal+0x178>)
 80040ac:	22ff      	movs	r2, #255	@ 0xff
 80040ae:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = 0x54; // Sabit
 80040b0:	4b56      	ldr	r3, [pc, #344]	@ (800420c <addDataPacketNormal+0x178>)
 80040b2:	2254      	movs	r2, #84	@ 0x54
 80040b4:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = 0x52; // Sabit
 80040b6:	4b55      	ldr	r3, [pc, #340]	@ (800420c <addDataPacketNormal+0x178>)
 80040b8:	2252      	movs	r2, #82	@ 0x52
 80040ba:	70da      	strb	r2, [r3, #3]

  normal_paket[4] = 0;   // Takim ID = 0
 80040bc:	4b53      	ldr	r3, [pc, #332]	@ (800420c <addDataPacketNormal+0x178>)
 80040be:	2200      	movs	r2, #0
 80040c0:	711a      	strb	r2, [r3, #4]
  normal_paket[5] = 0; // Sayac degeri = 0
 80040c2:	4b52      	ldr	r3, [pc, #328]	@ (800420c <addDataPacketNormal+0x178>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	715a      	strb	r2, [r3, #5]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = BMI->datas.acc_x; // Irtifa degerinin atamasini yapiyoruz.
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[6] = irtifa_float32_uint8_donusturucu.array[0];
 80040ce:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80040d2:	4b4e      	ldr	r3, [pc, #312]	@ (800420c <addDataPacketNormal+0x178>)
 80040d4:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = irtifa_float32_uint8_donusturucu.array[1];
 80040d6:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80040da:	4b4c      	ldr	r3, [pc, #304]	@ (800420c <addDataPacketNormal+0x178>)
 80040dc:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = irtifa_float32_uint8_donusturucu.array[2];
 80040de:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <addDataPacketNormal+0x178>)
 80040e4:	721a      	strb	r2, [r3, #8]
  normal_paket[9] = irtifa_float32_uint8_donusturucu.array[3];
 80040e6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80040ea:	4b48      	ldr	r3, [pc, #288]	@ (800420c <addDataPacketNormal+0x178>)
 80040ec:	725a      	strb	r2, [r3, #9]


  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = GPS->altitude; // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[10] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 80040f4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80040f8:	4b44      	ldr	r3, [pc, #272]	@ (800420c <addDataPacketNormal+0x178>)
 80040fa:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 80040fc:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8004100:	4b42      	ldr	r3, [pc, #264]	@ (800420c <addDataPacketNormal+0x178>)
 8004102:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8004104:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8004108:	4b40      	ldr	r3, [pc, #256]	@ (800420c <addDataPacketNormal+0x178>)
 800410a:	731a      	strb	r2, [r3, #12]
  normal_paket[13] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 800410c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004110:	4b3e      	ldr	r3, [pc, #248]	@ (800420c <addDataPacketNormal+0x178>)
 8004112:	735a      	strb	r2, [r3, #13]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = GPS->latitude; // Roket enlem degerinin atamasini yapiyoruz.
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[14] = roket_enlem_float32_uint8_donusturucu.array[0];
 800411a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800411e:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <addDataPacketNormal+0x178>)
 8004120:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_enlem_float32_uint8_donusturucu.array[1];
 8004122:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8004126:	4b39      	ldr	r3, [pc, #228]	@ (800420c <addDataPacketNormal+0x178>)
 8004128:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_enlem_float32_uint8_donusturucu.array[2];
 800412a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800412e:	4b37      	ldr	r3, [pc, #220]	@ (800420c <addDataPacketNormal+0x178>)
 8004130:	741a      	strb	r2, [r3, #16]
  normal_paket[17] = roket_enlem_float32_uint8_donusturucu.array[3];
 8004132:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004136:	4b35      	ldr	r3, [pc, #212]	@ (800420c <addDataPacketNormal+0x178>)
 8004138:	745a      	strb	r2, [r3, #17]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = GPS->longitude; // Roket boylam degerinin atamasini yapiyoruz.
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[18] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 8004140:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004144:	4b31      	ldr	r3, [pc, #196]	@ (800420c <addDataPacketNormal+0x178>)
 8004146:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8004148:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800414c:	4b2f      	ldr	r3, [pc, #188]	@ (800420c <addDataPacketNormal+0x178>)
 800414e:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 8004150:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8004154:	4b2d      	ldr	r3, [pc, #180]	@ (800420c <addDataPacketNormal+0x178>)
 8004156:	751a      	strb	r2, [r3, #20]
  normal_paket[21] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8004158:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800415c:	4b2b      	ldr	r3, [pc, #172]	@ (800420c <addDataPacketNormal+0x178>)
 800415e:	755a      	strb	r2, [r3, #21]


  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = BME->temperature; // Sicaklik degerinin atamasini yapiyoruz.
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[22] = sicaklik_float32_uint8_donusturucu.array[0];
 8004166:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800416a:	4b28      	ldr	r3, [pc, #160]	@ (800420c <addDataPacketNormal+0x178>)
 800416c:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = sicaklik_float32_uint8_donusturucu.array[1];
 800416e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004172:	4b26      	ldr	r3, [pc, #152]	@ (800420c <addDataPacketNormal+0x178>)
 8004174:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = sicaklik_float32_uint8_donusturucu.array[2];
 8004176:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800417a:	4b24      	ldr	r3, [pc, #144]	@ (800420c <addDataPacketNormal+0x178>)
 800417c:	761a      	strb	r2, [r3, #24]
  normal_paket[25] = sicaklik_float32_uint8_donusturucu.array[3];
 800417e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <addDataPacketNormal+0x178>)
 8004184:	765a      	strb	r2, [r3, #25]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = BME->pressure; // Basinc degerinin atamasini yapiyoruz.
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	623b      	str	r3, [r7, #32]
  normal_paket[26] = basinc_float32_uint8_donusturucu.array[0];
 800418c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004190:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <addDataPacketNormal+0x178>)
 8004192:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = basinc_float32_uint8_donusturucu.array[1];
 8004194:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004198:	4b1c      	ldr	r3, [pc, #112]	@ (800420c <addDataPacketNormal+0x178>)
 800419a:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = basinc_float32_uint8_donusturucu.array[2];
 800419c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80041a0:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <addDataPacketNormal+0x178>)
 80041a2:	771a      	strb	r2, [r3, #28]
  normal_paket[29] = basinc_float32_uint8_donusturucu.array[3];
 80041a4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80041a8:	4b18      	ldr	r3, [pc, #96]	@ (800420c <addDataPacketNormal+0x178>)
 80041aa:	775a      	strb	r2, [r3, #29]

  FLOAT32_UINT8_DONUSTURUCU gorevVeri_float32_uint8_donusturucu;
  gorevVeri_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Basinc degerinin atamasini yapiyoruz.
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	61fb      	str	r3, [r7, #28]
  normal_paket[30] = gorevVeri_float32_uint8_donusturucu.array[0];
 80041b0:	7f3a      	ldrb	r2, [r7, #28]
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <addDataPacketNormal+0x178>)
 80041b4:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = gorevVeri_float32_uint8_donusturucu.array[1];
 80041b6:	7f7a      	ldrb	r2, [r7, #29]
 80041b8:	4b14      	ldr	r3, [pc, #80]	@ (800420c <addDataPacketNormal+0x178>)
 80041ba:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = gorevVeri_float32_uint8_donusturucu.array[2];
 80041bc:	7fba      	ldrb	r2, [r7, #30]
 80041be:	4b13      	ldr	r3, [pc, #76]	@ (800420c <addDataPacketNormal+0x178>)
 80041c0:	f883 2020 	strb.w	r2, [r3, #32]
  normal_paket[33] = gorevVeri_float32_uint8_donusturucu.array[3];
 80041c4:	7ffa      	ldrb	r2, [r7, #31]
 80041c6:	4b11      	ldr	r3, [pc, #68]	@ (800420c <addDataPacketNormal+0x178>)
 80041c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  normal_paket[34] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80041da:	793b      	ldrb	r3, [r7, #4]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <addDataPacketNormal+0x178>)
 80041e0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  normal_paket[35] = check_sum_hesapla_normal(35); // Check_sum = check_sum_hesapla();
 80041e4:	2023      	movs	r0, #35	@ 0x23
 80041e6:	f7ff ff2d 	bl	8004044 <check_sum_hesapla_normal>
 80041ea:	4603      	mov	r3, r0
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b07      	ldr	r3, [pc, #28]	@ (800420c <addDataPacketNormal+0x178>)
 80041f0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = 0x0D; // Sabit
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <addDataPacketNormal+0x178>)
 80041f6:	220d      	movs	r2, #13
 80041f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  normal_paket[37] = 0x0A;
 80041fc:	4b03      	ldr	r3, [pc, #12]	@ (800420c <addDataPacketNormal+0x178>)
 80041fe:	220a      	movs	r2, #10
 8004200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8004204:	bf00      	nop
 8004206:	3738      	adds	r7, #56	@ 0x38
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20001618 	.word	0x20001618

08004210 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b08c      	sub	sp, #48	@ 0x30
 8004214:	af00      	add	r7, sp, #0
 8004216:	ed87 0a03 	vstr	s0, [r7, #12]
 800421a:	edc7 0a02 	vstr	s1, [r7, #8]
 800421e:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004222:	4bd5      	ldr	r3, [pc, #852]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004224:	ed93 7a00 	vldr	s14, [r3]
 8004228:	4bd3      	ldr	r3, [pc, #844]	@ (8004578 <UpdateMahonyGains+0x368>)
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004232:	4bd1      	ldr	r3, [pc, #836]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004234:	edd3 6a01 	vldr	s13, [r3, #4]
 8004238:	4bcf      	ldr	r3, [pc, #828]	@ (8004578 <UpdateMahonyGains+0x368>)
 800423a:	edd3 7a01 	vldr	s15, [r3, #4]
 800423e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004246:	4bcc      	ldr	r3, [pc, #816]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004248:	edd3 6a02 	vldr	s13, [r3, #8]
 800424c:	4bca      	ldr	r3, [pc, #808]	@ (8004578 <UpdateMahonyGains+0x368>)
 800424e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800425a:	4bc7      	ldr	r3, [pc, #796]	@ (8004578 <UpdateMahonyGains+0x368>)
 800425c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004260:	4bc5      	ldr	r3, [pc, #788]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004262:	edd3 7a03 	vldr	s15, [r3, #12]
 8004266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800426a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800426e:	eeb0 0a67 	vmov.f32	s0, s15
 8004272:	f00d ff51 	bl	8012118 <sqrtf>
 8004276:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 800427a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800427e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004286:	f000 8172 	beq.w	800456e <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 800428a:	4bbb      	ldr	r3, [pc, #748]	@ (8004578 <UpdateMahonyGains+0x368>)
 800428c:	edd3 6a00 	vldr	s13, [r3]
 8004290:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004298:	4bb7      	ldr	r3, [pc, #732]	@ (8004578 <UpdateMahonyGains+0x368>)
 800429a:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 800429e:	4bb6      	ldr	r3, [pc, #728]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80042a4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ac:	4bb2      	ldr	r3, [pc, #712]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042ae:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80042b2:	4bb1      	ldr	r3, [pc, #708]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80042b8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c0:	4bad      	ldr	r3, [pc, #692]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042c2:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 80042c6:	4bac      	ldr	r3, [pc, #688]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80042cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d4:	4ba8      	ldr	r3, [pc, #672]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042d6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 80042da:	4ba7      	ldr	r3, [pc, #668]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80042e0:	4ba5      	ldr	r3, [pc, #660]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80042e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ea:	4ba3      	ldr	r3, [pc, #652]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042ec:	edd3 6a00 	vldr	s13, [r3]
 80042f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004578 <UpdateMahonyGains+0x368>)
 80042f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80042f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004302:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8004306:	4b9c      	ldr	r3, [pc, #624]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004308:	ed93 7a00 	vldr	s14, [r3]
 800430c:	4b9a      	ldr	r3, [pc, #616]	@ (8004578 <UpdateMahonyGains+0x368>)
 800430e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004316:	4b98      	ldr	r3, [pc, #608]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004318:	edd3 6a02 	vldr	s13, [r3, #8]
 800431c:	4b96      	ldr	r3, [pc, #600]	@ (8004578 <UpdateMahonyGains+0x368>)
 800431e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800432e:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8004332:	4b91      	ldr	r3, [pc, #580]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004334:	ed93 7a00 	vldr	s14, [r3]
 8004338:	4b8f      	ldr	r3, [pc, #572]	@ (8004578 <UpdateMahonyGains+0x368>)
 800433a:	edd3 7a00 	vldr	s15, [r3]
 800433e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004342:	4b8d      	ldr	r3, [pc, #564]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004344:	edd3 6a01 	vldr	s13, [r3, #4]
 8004348:	4b8b      	ldr	r3, [pc, #556]	@ (8004578 <UpdateMahonyGains+0x368>)
 800434a:	edd3 7a01 	vldr	s15, [r3, #4]
 800434e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004356:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004358:	edd3 6a02 	vldr	s13, [r3, #8]
 800435c:	4b86      	ldr	r3, [pc, #536]	@ (8004578 <UpdateMahonyGains+0x368>)
 800435e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800436a:	4b83      	ldr	r3, [pc, #524]	@ (8004578 <UpdateMahonyGains+0x368>)
 800436c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004370:	4b81      	ldr	r3, [pc, #516]	@ (8004578 <UpdateMahonyGains+0x368>)
 8004372:	edd3 7a03 	vldr	s15, [r3, #12]
 8004376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800437a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8004382:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004386:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800438a:	edd7 7a08 	vldr	s15, [r7, #32]
 800438e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004396:	edd7 7a07 	vldr	s15, [r7, #28]
 800439a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	f000 ff3f 	bl	8005228 <invSqrt>
 80043aa:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80043ae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80043b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 80043be:	ed97 7a08 	vldr	s14, [r7, #32]
 80043c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 80043ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80043d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 80043de:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80043e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80043ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80043f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004402:	f000 ff11 	bl	8005228 <invSqrt>
 8004406:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 800440a:	ed97 7a03 	vldr	s14, [r7, #12]
 800440e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 800441a:	ed97 7a02 	vldr	s14, [r7, #8]
 800441e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800442a:	ed97 7a01 	vldr	s14, [r7, #4]
 800442e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800443a:	ed97 7a03 	vldr	s14, [r7, #12]
 800443e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004446:	edd7 6a02 	vldr	s13, [r7, #8]
 800444a:	edd7 7a08 	vldr	s15, [r7, #32]
 800444e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004456:	edd7 6a01 	vldr	s13, [r7, #4]
 800445a:	edd7 7a07 	vldr	s15, [r7, #28]
 800445e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004466:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800446a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800446e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	dd02      	ble.n	8004482 <UpdateMahonyGains+0x272>
 800447c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8004482:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004486:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800448a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	d501      	bpl.n	8004498 <UpdateMahonyGains+0x288>
 8004494:	4b39      	ldr	r3, [pc, #228]	@ (800457c <UpdateMahonyGains+0x36c>)
 8004496:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8004498:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800449c:	f00d fe10 	bl	80120c0 <acosf>
 80044a0:	eef0 7a40 	vmov.f32	s15, s0
 80044a4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004580 <UpdateMahonyGains+0x370>
 80044a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ac:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80044b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80044b4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80044b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c0:	dd0a      	ble.n	80044d8 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 80044c2:	4b30      	ldr	r3, [pc, #192]	@ (8004584 <UpdateMahonyGains+0x374>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80044c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004588 <UpdateMahonyGains+0x378>)
 80044ca:	4a30      	ldr	r2, [pc, #192]	@ (800458c <UpdateMahonyGains+0x37c>)
 80044cc:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 80044ce:	4b30      	ldr	r3, [pc, #192]	@ (8004590 <UpdateMahonyGains+0x380>)
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e01d      	b.n	8004514 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 80044d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80044dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80044e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	dd0a      	ble.n	8004500 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80044ea:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <UpdateMahonyGains+0x374>)
 80044ec:	2202      	movs	r2, #2
 80044ee:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 80044f0:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <UpdateMahonyGains+0x378>)
 80044f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044f6:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 80044f8:	4b25      	ldr	r3, [pc, #148]	@ (8004590 <UpdateMahonyGains+0x380>)
 80044fa:	4a26      	ldr	r2, [pc, #152]	@ (8004594 <UpdateMahonyGains+0x384>)
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e009      	b.n	8004514 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8004500:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <UpdateMahonyGains+0x374>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8004506:	4b20      	ldr	r3, [pc, #128]	@ (8004588 <UpdateMahonyGains+0x378>)
 8004508:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800450c:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 800450e:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <UpdateMahonyGains+0x380>)
 8004510:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <UpdateMahonyGains+0x388>)
 8004512:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8004514:	4b1c      	ldr	r3, [pc, #112]	@ (8004588 <UpdateMahonyGains+0x378>)
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 800451e:	eeb0 0a67 	vmov.f32	s0, s15
 8004522:	f00d fe46 	bl	80121b2 <fminf>
 8004526:	eef0 7a40 	vmov.f32	s15, s0
 800452a:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800459c <UpdateMahonyGains+0x38c>
 800452e:	eeb0 0a67 	vmov.f32	s0, s15
 8004532:	f00d fe21 	bl	8012178 <fmaxf>
 8004536:	eef0 7a40 	vmov.f32	s15, s0
 800453a:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <UpdateMahonyGains+0x378>)
 800453c:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8004540:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <UpdateMahonyGains+0x380>)
 8004542:	edd3 7a00 	vldr	s15, [r3]
 8004546:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80045a0 <UpdateMahonyGains+0x390>
 800454a:	eeb0 0a67 	vmov.f32	s0, s15
 800454e:	f00d fe30 	bl	80121b2 <fminf>
 8004552:	eef0 7a40 	vmov.f32	s15, s0
 8004556:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80045a4 <UpdateMahonyGains+0x394>
 800455a:	eeb0 0a67 	vmov.f32	s0, s15
 800455e:	f00d fe0b 	bl	8012178 <fmaxf>
 8004562:	eef0 7a40 	vmov.f32	s15, s0
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <UpdateMahonyGains+0x380>)
 8004568:	edc3 7a00 	vstr	s15, [r3]
 800456c:	e000      	b.n	8004570 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 800456e:	bf00      	nop
}
 8004570:	3730      	adds	r7, #48	@ 0x30
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2000001c 	.word	0x2000001c
 800457c:	bf800000 	.word	0xbf800000
 8004580:	42652ee2 	.word	0x42652ee2
 8004584:	2000164c 	.word	0x2000164c
 8004588:	2000002c 	.word	0x2000002c
 800458c:	3e4ccccd 	.word	0x3e4ccccd
 8004590:	20000030 	.word	0x20000030
 8004594:	3c23d70a 	.word	0x3c23d70a
 8004598:	3d4ccccd 	.word	0x3d4ccccd
 800459c:	3dcccccd 	.word	0x3dcccccd
 80045a0:	3d4ccccd 	.word	0x3d4ccccd
 80045a4:	00000000 	.word	0x00000000

080045a8 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	@ 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	ed87 0a07 	vstr	s0, [r7, #28]
 80045b2:	edc7 0a06 	vstr	s1, [r7, #24]
 80045b6:	ed87 1a05 	vstr	s2, [r7, #20]
 80045ba:	edc7 1a04 	vstr	s3, [r7, #16]
 80045be:	ed87 2a03 	vstr	s4, [r7, #12]
 80045c2:	edc7 2a02 	vstr	s5, [r7, #8]
 80045c6:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 80045ca:	4b60      	ldr	r3, [pc, #384]	@ (800474c <Orientation_Update+0x1a4>)
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 80045ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80045d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80045e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004750 <Orientation_Update+0x1a8>)
 80045e8:	edd3 7a00 	vldr	s15, [r3]
 80045ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f4:	4b56      	ldr	r3, [pc, #344]	@ (8004750 <Orientation_Update+0x1a8>)
 80045f6:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 80045fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80045fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800460a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800460e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004612:	4b50      	ldr	r3, [pc, #320]	@ (8004754 <Orientation_Update+0x1ac>)
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800461c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004620:	4b4c      	ldr	r3, [pc, #304]	@ (8004754 <Orientation_Update+0x1ac>)
 8004622:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8004626:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800462a:	edd7 7a02 	vldr	s15, [r7, #8]
 800462e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004636:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800463a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800463e:	4b46      	ldr	r3, [pc, #280]	@ (8004758 <Orientation_Update+0x1b0>)
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	4b42      	ldr	r3, [pc, #264]	@ (8004758 <Orientation_Update+0x1b0>)
 800464e:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8004652:	4b3f      	ldr	r3, [pc, #252]	@ (8004750 <Orientation_Update+0x1a8>)
 8004654:	edd3 7a00 	vldr	s15, [r3]
 8004658:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <Orientation_Update+0x1ac>)
 800465a:	ed93 7a00 	vldr	s14, [r3]
 800465e:	4b3e      	ldr	r3, [pc, #248]	@ (8004758 <Orientation_Update+0x1b0>)
 8004660:	edd3 6a00 	vldr	s13, [r3]
 8004664:	eeb0 1a66 	vmov.f32	s2, s13
 8004668:	eef0 0a47 	vmov.f32	s1, s14
 800466c:	eeb0 0a67 	vmov.f32	s0, s15
 8004670:	f7ff fdce 	bl	8004210 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8004674:	4b36      	ldr	r3, [pc, #216]	@ (8004750 <Orientation_Update+0x1a8>)
 8004676:	ed93 7a00 	vldr	s14, [r3]
 800467a:	4b35      	ldr	r3, [pc, #212]	@ (8004750 <Orientation_Update+0x1a8>)
 800467c:	edd3 7a00 	vldr	s15, [r3]
 8004680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004684:	4b33      	ldr	r3, [pc, #204]	@ (8004754 <Orientation_Update+0x1ac>)
 8004686:	edd3 6a00 	vldr	s13, [r3]
 800468a:	4b32      	ldr	r3, [pc, #200]	@ (8004754 <Orientation_Update+0x1ac>)
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004698:	4b2f      	ldr	r3, [pc, #188]	@ (8004758 <Orientation_Update+0x1b0>)
 800469a:	edd3 6a00 	vldr	s13, [r3]
 800469e:	4b2e      	ldr	r3, [pc, #184]	@ (8004758 <Orientation_Update+0x1b0>)
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ac:	eeb0 0a67 	vmov.f32	s0, s15
 80046b0:	f00d fd32 	bl	8012118 <sqrtf>
 80046b4:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 80046b8:	4b28      	ldr	r3, [pc, #160]	@ (800475c <Orientation_Update+0x1b4>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 80046c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80046c4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004760 <Orientation_Update+0x1b8>
 80046c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	d50f      	bpl.n	80046f2 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 80046d2:	4b22      	ldr	r3, [pc, #136]	@ (800475c <Orientation_Update+0x1b4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e00b      	b.n	80046f2 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 80046da:	edd7 7a08 	vldr	s15, [r7, #32]
 80046de:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004764 <Orientation_Update+0x1bc>
 80046e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	dd02      	ble.n	80046f2 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <Orientation_Update+0x1b4>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 80046f2:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <Orientation_Update+0x1b4>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 80046fa:	edd7 1a01 	vldr	s3, [r7, #4]
 80046fe:	ed97 1a05 	vldr	s2, [r7, #20]
 8004702:	edd7 0a06 	vldr	s1, [r7, #24]
 8004706:	ed97 0a07 	vldr	s0, [r7, #28]
 800470a:	f000 f82d 	bl	8004768 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 800470e:	e018      	b.n	8004742 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8004710:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <Orientation_Update+0x1a8>)
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <Orientation_Update+0x1ac>)
 8004718:	ed93 7a00 	vldr	s14, [r3]
 800471c:	4b0e      	ldr	r3, [pc, #56]	@ (8004758 <Orientation_Update+0x1b0>)
 800471e:	edd3 6a00 	vldr	s13, [r3]
 8004722:	ed97 3a01 	vldr	s6, [r7, #4]
 8004726:	eef0 2a66 	vmov.f32	s5, s13
 800472a:	eeb0 2a47 	vmov.f32	s4, s14
 800472e:	eef0 1a67 	vmov.f32	s3, s15
 8004732:	ed97 1a05 	vldr	s2, [r7, #20]
 8004736:	edd7 0a06 	vldr	s1, [r7, #24]
 800473a:	ed97 0a07 	vldr	s0, [r7, #28]
 800473e:	f000 f93b 	bl	80049b8 <MahonyAHRSupdateIMU>
}
 8004742:	bf00      	nop
 8004744:	3728      	adds	r7, #40	@ 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	3e99999a 	.word	0x3e99999a
 8004750:	20001650 	.word	0x20001650
 8004754:	20001654 	.word	0x20001654
 8004758:	20001658 	.word	0x20001658
 800475c:	2000164d 	.word	0x2000164d
 8004760:	41d3d2db 	.word	0x41d3d2db
 8004764:	420172a2 	.word	0x420172a2

08004768 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004772:	edc7 0a02 	vstr	s1, [r7, #8]
 8004776:	ed87 1a01 	vstr	s2, [r7, #4]
 800477a:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 800477e:	4b8c      	ldr	r3, [pc, #560]	@ (80049b0 <updateQuaternion+0x248>)
 8004780:	edd3 7a01 	vldr	s15, [r3, #4]
 8004784:	eeb1 7a67 	vneg.f32	s14, s15
 8004788:	edd7 7a03 	vldr	s15, [r7, #12]
 800478c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004790:	4b87      	ldr	r3, [pc, #540]	@ (80049b0 <updateQuaternion+0x248>)
 8004792:	edd3 6a02 	vldr	s13, [r3, #8]
 8004796:	edd7 7a02 	vldr	s15, [r7, #8]
 800479a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800479e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047a2:	4b83      	ldr	r3, [pc, #524]	@ (80049b0 <updateQuaternion+0x248>)
 80047a4:	edd3 6a03 	vldr	s13, [r3, #12]
 80047a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80047b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80047c0:	4b7b      	ldr	r3, [pc, #492]	@ (80049b0 <updateQuaternion+0x248>)
 80047c2:	ed93 7a00 	vldr	s14, [r3]
 80047c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80047ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ce:	4b78      	ldr	r3, [pc, #480]	@ (80049b0 <updateQuaternion+0x248>)
 80047d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80047d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047e0:	4b73      	ldr	r3, [pc, #460]	@ (80049b0 <updateQuaternion+0x248>)
 80047e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80047e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80047ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80047f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047fa:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 80047fe:	4b6c      	ldr	r3, [pc, #432]	@ (80049b0 <updateQuaternion+0x248>)
 8004800:	ed93 7a00 	vldr	s14, [r3]
 8004804:	edd7 7a02 	vldr	s15, [r7, #8]
 8004808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800480c:	4b68      	ldr	r3, [pc, #416]	@ (80049b0 <updateQuaternion+0x248>)
 800480e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004812:	edd7 7a01 	vldr	s15, [r7, #4]
 8004816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800481a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800481e:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <updateQuaternion+0x248>)
 8004820:	edd3 6a03 	vldr	s13, [r3, #12]
 8004824:	edd7 7a03 	vldr	s15, [r7, #12]
 8004828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800482c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004830:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004838:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 800483c:	4b5c      	ldr	r3, [pc, #368]	@ (80049b0 <updateQuaternion+0x248>)
 800483e:	ed93 7a00 	vldr	s14, [r3]
 8004842:	edd7 7a01 	vldr	s15, [r7, #4]
 8004846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800484a:	4b59      	ldr	r3, [pc, #356]	@ (80049b0 <updateQuaternion+0x248>)
 800484c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004850:	edd7 7a02 	vldr	s15, [r7, #8]
 8004854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800485c:	4b54      	ldr	r3, [pc, #336]	@ (80049b0 <updateQuaternion+0x248>)
 800485e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004862:	edd7 7a03 	vldr	s15, [r7, #12]
 8004866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800486a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800486e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004876:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 800487a:	4b4d      	ldr	r3, [pc, #308]	@ (80049b0 <updateQuaternion+0x248>)
 800487c:	ed93 7a00 	vldr	s14, [r3]
 8004880:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004884:	edd7 7a00 	vldr	s15, [r7]
 8004888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800488c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004890:	4b47      	ldr	r3, [pc, #284]	@ (80049b0 <updateQuaternion+0x248>)
 8004892:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8004896:	4b46      	ldr	r3, [pc, #280]	@ (80049b0 <updateQuaternion+0x248>)
 8004898:	ed93 7a01 	vldr	s14, [r3, #4]
 800489c:	edd7 6a08 	vldr	s13, [r7, #32]
 80048a0:	edd7 7a00 	vldr	s15, [r7]
 80048a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ac:	4b40      	ldr	r3, [pc, #256]	@ (80049b0 <updateQuaternion+0x248>)
 80048ae:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 80048b2:	4b3f      	ldr	r3, [pc, #252]	@ (80049b0 <updateQuaternion+0x248>)
 80048b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80048b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048bc:	edd7 7a00 	vldr	s15, [r7]
 80048c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c8:	4b39      	ldr	r3, [pc, #228]	@ (80049b0 <updateQuaternion+0x248>)
 80048ca:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 80048ce:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <updateQuaternion+0x248>)
 80048d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80048d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80048d8:	edd7 7a00 	vldr	s15, [r7]
 80048dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e4:	4b32      	ldr	r3, [pc, #200]	@ (80049b0 <updateQuaternion+0x248>)
 80048e6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80048ea:	4b31      	ldr	r3, [pc, #196]	@ (80049b0 <updateQuaternion+0x248>)
 80048ec:	ed93 7a00 	vldr	s14, [r3]
 80048f0:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <updateQuaternion+0x248>)
 80048f2:	edd3 7a00 	vldr	s15, [r3]
 80048f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048fa:	4b2d      	ldr	r3, [pc, #180]	@ (80049b0 <updateQuaternion+0x248>)
 80048fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8004900:	4b2b      	ldr	r3, [pc, #172]	@ (80049b0 <updateQuaternion+0x248>)
 8004902:	edd3 7a01 	vldr	s15, [r3, #4]
 8004906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800490a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800490e:	4b28      	ldr	r3, [pc, #160]	@ (80049b0 <updateQuaternion+0x248>)
 8004910:	edd3 6a02 	vldr	s13, [r3, #8]
 8004914:	4b26      	ldr	r3, [pc, #152]	@ (80049b0 <updateQuaternion+0x248>)
 8004916:	edd3 7a02 	vldr	s15, [r3, #8]
 800491a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800491e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004922:	4b23      	ldr	r3, [pc, #140]	@ (80049b0 <updateQuaternion+0x248>)
 8004924:	edd3 6a03 	vldr	s13, [r3, #12]
 8004928:	4b21      	ldr	r3, [pc, #132]	@ (80049b0 <updateQuaternion+0x248>)
 800492a:	edd3 7a03 	vldr	s15, [r3, #12]
 800492e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004936:	eeb0 0a67 	vmov.f32	s0, s15
 800493a:	f00d fbed 	bl	8012118 <sqrtf>
 800493e:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8004942:	edd7 7a05 	vldr	s15, [r7, #20]
 8004946:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80049b4 <updateQuaternion+0x24c>
 800494a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	dc00      	bgt.n	8004956 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8004954:	e027      	b.n	80049a6 <updateQuaternion+0x23e>
        q[0] /= norm;
 8004956:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <updateQuaternion+0x248>)
 8004958:	edd3 6a00 	vldr	s13, [r3]
 800495c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <updateQuaternion+0x248>)
 8004966:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 800496a:	4b11      	ldr	r3, [pc, #68]	@ (80049b0 <updateQuaternion+0x248>)
 800496c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004970:	ed97 7a05 	vldr	s14, [r7, #20]
 8004974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004978:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <updateQuaternion+0x248>)
 800497a:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 800497e:	4b0c      	ldr	r3, [pc, #48]	@ (80049b0 <updateQuaternion+0x248>)
 8004980:	edd3 6a02 	vldr	s13, [r3, #8]
 8004984:	ed97 7a05 	vldr	s14, [r7, #20]
 8004988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498c:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <updateQuaternion+0x248>)
 800498e:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8004992:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <updateQuaternion+0x248>)
 8004994:	edd3 6a03 	vldr	s13, [r3, #12]
 8004998:	ed97 7a05 	vldr	s14, [r7, #20]
 800499c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a0:	4b03      	ldr	r3, [pc, #12]	@ (80049b0 <updateQuaternion+0x248>)
 80049a2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80049a6:	bf00      	nop
 80049a8:	3728      	adds	r7, #40	@ 0x28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	2000001c 	.word	0x2000001c
 80049b4:	358637bd 	.word	0x358637bd

080049b8 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b092      	sub	sp, #72	@ 0x48
 80049bc:	af00      	add	r7, sp, #0
 80049be:	ed87 0a07 	vstr	s0, [r7, #28]
 80049c2:	edc7 0a06 	vstr	s1, [r7, #24]
 80049c6:	ed87 1a05 	vstr	s2, [r7, #20]
 80049ca:	edc7 1a04 	vstr	s3, [r7, #16]
 80049ce:	ed87 2a03 	vstr	s4, [r7, #12]
 80049d2:	edc7 2a02 	vstr	s5, [r7, #8]
 80049d6:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 80049da:	edd7 7a04 	vldr	s15, [r7, #16]
 80049de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d10e      	bne.n	8004a06 <MahonyAHRSupdateIMU+0x4e>
 80049e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	d107      	bne.n	8004a06 <MahonyAHRSupdateIMU+0x4e>
 80049f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80049fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a02:	f000 8138 	beq.w	8004c76 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8004a06:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a0a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a26:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2a:	f000 fbfd 	bl	8005228 <invSqrt>
 8004a2e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8004a32:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3e:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8004a42:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8004a52:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a56:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8004a62:	4b66      	ldr	r3, [pc, #408]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a64:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a68:	4b64      	ldr	r3, [pc, #400]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a72:	4b62      	ldr	r3, [pc, #392]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a74:	edd3 6a00 	vldr	s13, [r3]
 8004a78:	4b60      	ldr	r3, [pc, #384]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a86:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8004a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a8c:	ed93 7a00 	vldr	s14, [r3]
 8004a90:	4b5a      	ldr	r3, [pc, #360]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a92:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a9a:	4b58      	ldr	r3, [pc, #352]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004a9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aa0:	4b56      	ldr	r3, [pc, #344]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004aa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aae:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8004ab2:	4b52      	ldr	r3, [pc, #328]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004ab4:	ed93 7a00 	vldr	s14, [r3]
 8004ab8:	4b50      	ldr	r3, [pc, #320]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ac6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004aca:	4b4c      	ldr	r3, [pc, #304]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004acc:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8004bfc <MahonyAHRSupdateIMU+0x244>)
 8004ad2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ade:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8004ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ae6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aee:	edd7 6a02 	vldr	s13, [r7, #8]
 8004af2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8004b02:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b06:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b0e:	edd7 6a04 	vldr	s13, [r7, #16]
 8004b12:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b1e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8004b22:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b2e:	edd7 6a03 	vldr	s13, [r7, #12]
 8004b32:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8004b42:	4b2f      	ldr	r3, [pc, #188]	@ (8004c00 <MahonyAHRSupdateIMU+0x248>)
 8004b44:	edd3 7a00 	vldr	s15, [r3]
 8004b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	dd5e      	ble.n	8004c10 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8004b52:	4b2b      	ldr	r3, [pc, #172]	@ (8004c00 <MahonyAHRSupdateIMU+0x248>)
 8004b54:	ed93 7a00 	vldr	s14, [r3]
 8004b58:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b68:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <MahonyAHRSupdateIMU+0x24c>)
 8004b6a:	edd3 7a00 	vldr	s15, [r3]
 8004b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b72:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <MahonyAHRSupdateIMU+0x24c>)
 8004b74:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8004b78:	4b21      	ldr	r3, [pc, #132]	@ (8004c00 <MahonyAHRSupdateIMU+0x248>)
 8004b7a:	ed93 7a00 	vldr	s14, [r3]
 8004b7e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004b82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <MahonyAHRSupdateIMU+0x250>)
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <MahonyAHRSupdateIMU+0x250>)
 8004b9a:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8004b9e:	4b18      	ldr	r3, [pc, #96]	@ (8004c00 <MahonyAHRSupdateIMU+0x248>)
 8004ba0:	ed93 7a00 	vldr	s14, [r3]
 8004ba4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bb4:	4b15      	ldr	r3, [pc, #84]	@ (8004c0c <MahonyAHRSupdateIMU+0x254>)
 8004bb6:	edd3 7a00 	vldr	s15, [r3]
 8004bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bbe:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <MahonyAHRSupdateIMU+0x254>)
 8004bc0:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <MahonyAHRSupdateIMU+0x24c>)
 8004bc6:	edd3 7a00 	vldr	s15, [r3]
 8004bca:	ed97 7a07 	vldr	s14, [r7, #28]
 8004bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <MahonyAHRSupdateIMU+0x250>)
 8004bd8:	edd3 7a00 	vldr	s15, [r3]
 8004bdc:	ed97 7a06 	vldr	s14, [r7, #24]
 8004be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be4:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8004be8:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <MahonyAHRSupdateIMU+0x254>)
 8004bea:	edd3 7a00 	vldr	s15, [r3]
 8004bee:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf6:	edc7 7a05 	vstr	s15, [r7, #20]
 8004bfa:	e015      	b.n	8004c28 <MahonyAHRSupdateIMU+0x270>
 8004bfc:	2000001c 	.word	0x2000001c
 8004c00:	20000030 	.word	0x20000030
 8004c04:	20001640 	.word	0x20001640
 8004c08:	20001644 	.word	0x20001644
 8004c0c:	20001648 	.word	0x20001648
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8004c10:	4b9a      	ldr	r3, [pc, #616]	@ (8004e7c <MahonyAHRSupdateIMU+0x4c4>)
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8004c18:	4b99      	ldr	r3, [pc, #612]	@ (8004e80 <MahonyAHRSupdateIMU+0x4c8>)
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8004c20:	4b98      	ldr	r3, [pc, #608]	@ (8004e84 <MahonyAHRSupdateIMU+0x4cc>)
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004c28:	4b97      	ldr	r3, [pc, #604]	@ (8004e88 <MahonyAHRSupdateIMU+0x4d0>)
 8004c2a:	ed93 7a00 	vldr	s14, [r3]
 8004c2e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8004c42:	4b91      	ldr	r3, [pc, #580]	@ (8004e88 <MahonyAHRSupdateIMU+0x4d0>)
 8004c44:	ed93 7a00 	vldr	s14, [r3]
 8004c48:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c50:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c58:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8004c5c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e88 <MahonyAHRSupdateIMU+0x4d0>)
 8004c5e:	ed93 7a00 	vldr	s14, [r3]
 8004c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c72:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8004c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c7a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c82:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8004c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca2:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8004ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004caa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8004cbe:	4b73      	ldr	r3, [pc, #460]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8004cc4:	4b71      	ldr	r3, [pc, #452]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8004cca:	4b70      	ldr	r3, [pc, #448]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8004cd0:	4b6e      	ldr	r3, [pc, #440]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004cd2:	ed93 7a00 	vldr	s14, [r3]
 8004cd6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004cda:	eef1 6a67 	vneg.f32	s13, s15
 8004cde:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ce2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ce6:	ed97 6a08 	vldr	s12, [r7, #32]
 8004cea:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004cf2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004cf6:	4b65      	ldr	r3, [pc, #404]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004cf8:	ed93 6a03 	vldr	s12, [r3, #12]
 8004cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d00:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d0e:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8004d12:	4b5e      	ldr	r3, [pc, #376]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d14:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d18:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d24:	ed97 6a08 	vldr	s12, [r7, #32]
 8004d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004d34:	4b55      	ldr	r3, [pc, #340]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d36:	ed93 6a03 	vldr	s12, [r3, #12]
 8004d3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4a:	4b50      	ldr	r3, [pc, #320]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d4c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8004d50:	4b4e      	ldr	r3, [pc, #312]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d52:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d56:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d62:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8004d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d72:	4b46      	ldr	r3, [pc, #280]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d74:	ed93 6a03 	vldr	s12, [r3, #12]
 8004d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d88:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d8a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004d90:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d94:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004d98:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004da0:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8004da4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004da8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004dac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004db0:	ed97 6a08 	vldr	s12, [r7, #32]
 8004db4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004db8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004dbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc4:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004dc6:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8004dca:	4b30      	ldr	r3, [pc, #192]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004dcc:	ed93 7a00 	vldr	s14, [r3]
 8004dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004dd2:	edd3 7a00 	vldr	s15, [r3]
 8004dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dda:	4b2c      	ldr	r3, [pc, #176]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004ddc:	edd3 6a01 	vldr	s13, [r3, #4]
 8004de0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004de2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dee:	4b27      	ldr	r3, [pc, #156]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004df0:	edd3 6a02 	vldr	s13, [r3, #8]
 8004df4:	4b25      	ldr	r3, [pc, #148]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004df6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e02:	4b22      	ldr	r3, [pc, #136]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e04:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e08:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e16:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1a:	f000 fa05 	bl	8005228 <invSqrt>
 8004e1e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8004e22:	4b1a      	ldr	r3, [pc, #104]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e24:	ed93 7a00 	vldr	s14, [r3]
 8004e28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e30:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e32:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8004e36:	4b15      	ldr	r3, [pc, #84]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e3c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e46:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8004e4a:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e50:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e58:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e5a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e60:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e64:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <MahonyAHRSupdateIMU+0x4d4>)
 8004e6e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004e72:	bf00      	nop
 8004e74:	3748      	adds	r7, #72	@ 0x48
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20001640 	.word	0x20001640
 8004e80:	20001644 	.word	0x20001644
 8004e84:	20001648 	.word	0x20001648
 8004e88:	2000002c 	.word	0x2000002c
 8004e8c:	2000001c 	.word	0x2000001c

08004e90 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8004e96:	4b44      	ldr	r3, [pc, #272]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004e98:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e9c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004ea0:	4b41      	ldr	r3, [pc, #260]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004ea2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004eac:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eb0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004eb6:	edd3 7a00 	vldr	s15, [r3]
 8004eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec2:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8004ec6:	4b38      	ldr	r3, [pc, #224]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004ec8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ecc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004ed0:	4b35      	ldr	r3, [pc, #212]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004ed2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eda:	4b33      	ldr	r3, [pc, #204]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ee0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ee4:	4b30      	ldr	r3, [pc, #192]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004ee6:	edd3 7a00 	vldr	s15, [r3]
 8004eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ef2:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8004ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004ef8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004efc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004f00:	4b29      	ldr	r3, [pc, #164]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f12:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004f1c:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <quaternionToThetaZ+0x118>)
 8004f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f2a:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8004f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f36:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f52:	eeb0 0a67 	vmov.f32	s0, s15
 8004f56:	f00d f8df 	bl	8012118 <sqrtf>
 8004f5a:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 8004f5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f6a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004f6e:	eeb0 0a66 	vmov.f32	s0, s13
 8004f72:	f00d f91e 	bl	80121b2 <fminf>
 8004f76:	eef0 7a40 	vmov.f32	s15, s0
 8004f7a:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8004f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f82:	f00d f8f9 	bl	8012178 <fmaxf>
 8004f86:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8004f8a:	ed97 0a00 	vldr	s0, [r7]
 8004f8e:	f00d f897 	bl	80120c0 <acosf>
 8004f92:	eef0 7a40 	vmov.f32	s15, s0
 8004f96:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004fac <quaternionToThetaZ+0x11c>
 8004f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	2000001c 	.word	0x2000001c
 8004fac:	42654ca3 	.word	0x42654ca3

08004fb0 <getInitialQuaternion>:
float quaternionToRoll(){
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
return roll;
}

void getInitialQuaternion() {
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b092      	sub	sp, #72	@ 0x48
 8004fb4:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8004fb6:	4b98      	ldr	r3, [pc, #608]	@ (8005218 <getInitialQuaternion+0x268>)
 8004fb8:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8004fbc:	4b96      	ldr	r3, [pc, #600]	@ (8005218 <getInitialQuaternion+0x268>)
 8004fbe:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8004fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fc6:	4b94      	ldr	r3, [pc, #592]	@ (8005218 <getInitialQuaternion+0x268>)
 8004fc8:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8004fcc:	4b92      	ldr	r3, [pc, #584]	@ (8005218 <getInitialQuaternion+0x268>)
 8004fce:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fda:	4b8f      	ldr	r3, [pc, #572]	@ (8005218 <getInitialQuaternion+0x268>)
 8004fdc:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8004fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8005218 <getInitialQuaternion+0x268>)
 8004fe2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fee:	ee17 0a90 	vmov	r0, s15
 8004ff2:	f7fb fac9 	bl	8000588 <__aeabi_f2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	ec43 2b10 	vmov	d0, r2, r3
 8004ffe:	f00d f833 	bl	8012068 <sqrt>
 8005002:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8005006:	4b84      	ldr	r3, [pc, #528]	@ (8005218 <getInitialQuaternion+0x268>)
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fabc 	bl	8000588 <__aeabi_f2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8005018:	4b7f      	ldr	r3, [pc, #508]	@ (8005218 <getInitialQuaternion+0x268>)
 800501a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800501e:	eef1 7a67 	vneg.f32	s15, s15
 8005022:	ee17 3a90 	vmov	r3, s15
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb faae 	bl	8000588 <__aeabi_f2d>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8005034:	4b78      	ldr	r3, [pc, #480]	@ (8005218 <getInitialQuaternion+0x268>)
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	4618      	mov	r0, r3
 800503a:	f7fb faa5 	bl	8000588 <__aeabi_f2d>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8005046:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800504a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800504e:	f7fb fc1d 	bl	800088c <__aeabi_ddiv>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 800505a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800505e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005062:	f7fb fc13 	bl	800088c <__aeabi_ddiv>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 800506e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005076:	f7fb fc09 	bl	800088c <__aeabi_ddiv>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8005082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005086:	f04f 0000 	mov.w	r0, #0
 800508a:	4964      	ldr	r1, [pc, #400]	@ (800521c <getInitialQuaternion+0x26c>)
 800508c:	f7fb f91c 	bl	80002c8 <__aeabi_dsub>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	ec43 2b17 	vmov	d7, r2, r3
 8005098:	eeb0 0a47 	vmov.f32	s0, s14
 800509c:	eef0 0a67 	vmov.f32	s1, s15
 80050a0:	f00c ffe2 	bl	8012068 <sqrt>
 80050a4:	ec51 0b10 	vmov	r0, r1, d0
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005220 <getInitialQuaternion+0x270>)
 80050ae:	f7fb fac3 	bl	8000638 <__aeabi_dmul>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 80050ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050be:	f04f 0000 	mov.w	r0, #0
 80050c2:	4957      	ldr	r1, [pc, #348]	@ (8005220 <getInitialQuaternion+0x270>)
 80050c4:	f7fb fbe2 	bl	800088c <__aeabi_ddiv>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 80050d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050d8:	f7fb faae 	bl	8000638 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4610      	mov	r0, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005220 <getInitialQuaternion+0x270>)
 80050ea:	f7fb faa5 	bl	8000638 <__aeabi_dmul>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80050f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80050fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050fe:	f7fb fa9b 	bl	8000638 <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	4b44      	ldr	r3, [pc, #272]	@ (8005220 <getInitialQuaternion+0x270>)
 8005110:	f7fb fa92 	bl	8000638 <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8005128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800512c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005130:	f7fb fa82 	bl	8000638 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4614      	mov	r4, r2
 800513a:	461d      	mov	r5, r3
 800513c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005144:	f7fb fa78 	bl	8000638 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb f8bc 	bl	80002cc <__adddf3>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005164:	f7fb fa68 	bl	8000638 <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fb f8ac 	bl	80002cc <__adddf3>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005184:	f7fb fa58 	bl	8000638 <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	f7fb f89c 	bl	80002cc <__adddf3>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	ec43 2b17 	vmov	d7, r2, r3
 800519c:	eeb0 0a47 	vmov.f32	s0, s14
 80051a0:	eef0 0a67 	vmov.f32	s1, s15
 80051a4:	f00c ff60 	bl	8012068 <sqrt>
 80051a8:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 80051ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051b4:	f7fb fb6a 	bl	800088c <__aeabi_ddiv>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	f7fb fd32 	bl	8000c28 <__aeabi_d2f>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <getInitialQuaternion+0x274>)
 80051c8:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 80051ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051d2:	f7fb fb5b 	bl	800088c <__aeabi_ddiv>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f7fb fd23 	bl	8000c28 <__aeabi_d2f>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005224 <getInitialQuaternion+0x274>)
 80051e6:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 80051e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051f0:	f7fb fb4c 	bl	800088c <__aeabi_ddiv>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	f7fb fd14 	bl	8000c28 <__aeabi_d2f>
 8005200:	4603      	mov	r3, r0
 8005202:	4a08      	ldr	r2, [pc, #32]	@ (8005224 <getInitialQuaternion+0x274>)
 8005204:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8005206:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <getInitialQuaternion+0x274>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	60da      	str	r2, [r3, #12]
}
 800520e:	bf00      	nop
 8005210:	3748      	adds	r7, #72	@ 0x48
 8005212:	46bd      	mov	sp, r7
 8005214:	bdb0      	pop	{r4, r5, r7, pc}
 8005216:	bf00      	nop
 8005218:	20001508 	.word	0x20001508
 800521c:	3ff00000 	.word	0x3ff00000
 8005220:	3fe00000 	.word	0x3fe00000
 8005224:	2000001c 	.word	0x2000001c

08005228 <invSqrt>:

float invSqrt(float x) {
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8005232:	edd7 7a01 	vldr	s15, [r7, #4]
 8005236:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800523a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	105a      	asrs	r2, r3, #1
 8005252:	4b12      	ldr	r3, [pc, #72]	@ (800529c <invSqrt+0x74>)
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8005260:	ed97 7a04 	vldr	s14, [r7, #16]
 8005264:	edd7 7a05 	vldr	s15, [r7, #20]
 8005268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800526c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005274:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005278:	ee37 7a67 	vsub.f32	s14, s14, s15
 800527c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005284:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	ee07 3a90 	vmov	s15, r3
}
 800528e:	eeb0 0a67 	vmov.f32	s0, s15
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	5f3759df 	.word	0x5f3759df

080052a0 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 80052a8:	481b      	ldr	r0, [pc, #108]	@ (8005318 <sensor_fusion_init+0x78>)
 80052aa:	f7fd fe79 	bl	8002fa0 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 80052ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005318 <sensor_fusion_init+0x78>)
 80052b0:	4a1a      	ldr	r2, [pc, #104]	@ (800531c <sensor_fusion_init+0x7c>)
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 80052b4:	4b18      	ldr	r3, [pc, #96]	@ (8005318 <sensor_fusion_init+0x78>)
 80052b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005320 <sensor_fusion_init+0x80>)
 80052b8:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 80052ba:	4b17      	ldr	r3, [pc, #92]	@ (8005318 <sensor_fusion_init+0x78>)
 80052bc:	4a19      	ldr	r2, [pc, #100]	@ (8005324 <sensor_fusion_init+0x84>)
 80052be:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e009      	b.n	80052da <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 80052c6:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <sensor_fusion_init+0x88>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	ddf2      	ble.n	80052c6 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 80052e0:	4b12      	ldr	r3, [pc, #72]	@ (800532c <sensor_fusion_init+0x8c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 80052e6:	4b12      	ldr	r3, [pc, #72]	@ (8005330 <sensor_fusion_init+0x90>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 80052ec:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <sensor_fusion_init+0x94>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 80052f2:	4b11      	ldr	r3, [pc, #68]	@ (8005338 <sensor_fusion_init+0x98>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	4a0f      	ldr	r2, [pc, #60]	@ (800533c <sensor_fusion_init+0x9c>)
 80052fe:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8005300:	f000 fd9e 	bl	8005e40 <HAL_GetTick>
 8005304:	4603      	mov	r3, r0
 8005306:	4a0e      	ldr	r2, [pc, #56]	@ (8005340 <sensor_fusion_init+0xa0>)
 8005308:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 800530a:	4b0e      	ldr	r3, [pc, #56]	@ (8005344 <sensor_fusion_init+0xa4>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	2000165c 	.word	0x2000165c
 800531c:	3dcccccd 	.word	0x3dcccccd
 8005320:	3ba3d70a 	.word	0x3ba3d70a
 8005324:	40a00000 	.word	0x40a00000
 8005328:	200016b8 	.word	0x200016b8
 800532c:	200016cc 	.word	0x200016cc
 8005330:	200016cd 	.word	0x200016cd
 8005334:	200016ce 	.word	0x200016ce
 8005338:	200016a8 	.word	0x200016a8
 800533c:	200016ac 	.word	0x200016ac
 8005340:	200016b0 	.word	0x200016b0
 8005344:	200016b4 	.word	0x200016b4

08005348 <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	4b10      	ldr	r3, [pc, #64]	@ (80053ac <HAL_MspInit+0x4c>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536e:	4a0f      	ldr	r2, [pc, #60]	@ (80053ac <HAL_MspInit+0x4c>)
 8005370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005374:	6453      	str	r3, [r2, #68]	@ 0x44
 8005376:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <HAL_MspInit+0x4c>)
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <HAL_MspInit+0x4c>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <HAL_MspInit+0x4c>)
 800538c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005390:	6413      	str	r3, [r2, #64]	@ 0x40
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_MspInit+0x4c>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800

080053b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	@ 0x28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b8:	f107 0314 	add.w	r3, r7, #20
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	@ (800542c <HAL_ADC_MspInit+0x7c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d127      	bne.n	8005422 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	4b16      	ldr	r3, [pc, #88]	@ (8005430 <HAL_ADC_MspInit+0x80>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053da:	4a15      	ldr	r2, [pc, #84]	@ (8005430 <HAL_ADC_MspInit+0x80>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053e2:	4b13      	ldr	r3, [pc, #76]	@ (8005430 <HAL_ADC_MspInit+0x80>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005430 <HAL_ADC_MspInit+0x80>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005430 <HAL_ADC_MspInit+0x80>)
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005430 <HAL_ADC_MspInit+0x80>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800540a:	2302      	movs	r3, #2
 800540c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800540e:	2303      	movs	r3, #3
 8005410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	4619      	mov	r1, r3
 800541c:	4805      	ldr	r0, [pc, #20]	@ (8005434 <HAL_ADC_MspInit+0x84>)
 800541e:	f001 ff0d 	bl	800723c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005422:	bf00      	nop
 8005424:	3728      	adds	r7, #40	@ 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40012000 	.word	0x40012000
 8005430:	40023800 	.word	0x40023800
 8005434:	40020400 	.word	0x40020400

08005438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	@ 0x30
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5d      	ldr	r2, [pc, #372]	@ (80055cc <HAL_I2C_MspInit+0x194>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d163      	bne.n	8005522 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	4b5c      	ldr	r3, [pc, #368]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	4a5b      	ldr	r2, [pc, #364]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 8005464:	f043 0302 	orr.w	r3, r3, #2
 8005468:	6313      	str	r3, [r2, #48]	@ 0x30
 800546a:	4b59      	ldr	r3, [pc, #356]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005476:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800547a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800547c:	2312      	movs	r3, #18
 800547e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005484:	2303      	movs	r3, #3
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005488:	2304      	movs	r3, #4
 800548a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800548c:	f107 031c 	add.w	r3, r7, #28
 8005490:	4619      	mov	r1, r3
 8005492:	4850      	ldr	r0, [pc, #320]	@ (80055d4 <HAL_I2C_MspInit+0x19c>)
 8005494:	f001 fed2 	bl	800723c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	4b4c      	ldr	r3, [pc, #304]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	4a4b      	ldr	r2, [pc, #300]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 80054a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80054a8:	4b49      	ldr	r3, [pc, #292]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80054b4:	4b48      	ldr	r3, [pc, #288]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054b6:	4a49      	ldr	r2, [pc, #292]	@ (80055dc <HAL_I2C_MspInit+0x1a4>)
 80054b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80054ba:	4b47      	ldr	r3, [pc, #284]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054c0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054c2:	4b45      	ldr	r3, [pc, #276]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054c8:	4b43      	ldr	r3, [pc, #268]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054ce:	4b42      	ldr	r3, [pc, #264]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054d6:	4b40      	ldr	r3, [pc, #256]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054d8:	2200      	movs	r2, #0
 80054da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054dc:	4b3e      	ldr	r3, [pc, #248]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80054e2:	4b3d      	ldr	r3, [pc, #244]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054e8:	4b3b      	ldr	r3, [pc, #236]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054ee:	4b3a      	ldr	r3, [pc, #232]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80054f4:	4838      	ldr	r0, [pc, #224]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 80054f6:	f001 fa27 	bl	8006948 <HAL_DMA_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005500:	f7fe fd9a 	bl	8004038 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a34      	ldr	r2, [pc, #208]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
 800550a:	4a33      	ldr	r2, [pc, #204]	@ (80055d8 <HAL_I2C_MspInit+0x1a0>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005510:	2200      	movs	r2, #0
 8005512:	2100      	movs	r1, #0
 8005514:	201f      	movs	r0, #31
 8005516:	f001 f9d2 	bl	80068be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800551a:	201f      	movs	r0, #31
 800551c:	f001 f9eb 	bl	80068f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005520:	e050      	b.n	80055c4 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C3)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2e      	ldr	r2, [pc, #184]	@ (80055e0 <HAL_I2C_MspInit+0x1a8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d14b      	bne.n	80055c4 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	4b27      	ldr	r3, [pc, #156]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005534:	4a26      	ldr	r2, [pc, #152]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 8005536:	f043 0304 	orr.w	r3, r3, #4
 800553a:	6313      	str	r3, [r2, #48]	@ 0x30
 800553c:	4b24      	ldr	r3, [pc, #144]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005550:	4a1f      	ldr	r2, [pc, #124]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6313      	str	r3, [r2, #48]	@ 0x30
 8005558:	4b1d      	ldr	r3, [pc, #116]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 800555a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800556a:	2312      	movs	r3, #18
 800556c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005572:	2303      	movs	r3, #3
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005576:	2304      	movs	r3, #4
 8005578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800557a:	f107 031c 	add.w	r3, r7, #28
 800557e:	4619      	mov	r1, r3
 8005580:	4818      	ldr	r0, [pc, #96]	@ (80055e4 <HAL_I2C_MspInit+0x1ac>)
 8005582:	f001 fe5b 	bl	800723c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800558a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800558c:	2312      	movs	r3, #18
 800558e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005594:	2303      	movs	r3, #3
 8005596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005598:	2304      	movs	r3, #4
 800559a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	4619      	mov	r1, r3
 80055a2:	4811      	ldr	r0, [pc, #68]	@ (80055e8 <HAL_I2C_MspInit+0x1b0>)
 80055a4:	f001 fe4a 	bl	800723c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80055a8:	2300      	movs	r3, #0
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	4b08      	ldr	r3, [pc, #32]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	4a07      	ldr	r2, [pc, #28]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 80055b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <HAL_I2C_MspInit+0x198>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
}
 80055c4:	bf00      	nop
 80055c6:	3730      	adds	r7, #48	@ 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40005400 	.word	0x40005400
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40020400 	.word	0x40020400
 80055d8:	20001200 	.word	0x20001200
 80055dc:	40026010 	.word	0x40026010
 80055e0:	40005c00 	.word	0x40005c00
 80055e4:	40020800 	.word	0x40020800
 80055e8:	40020000 	.word	0x40020000

080055ec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005664 <HAL_I2C_MspDeInit+0x78>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d118      	bne.n	8005630 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80055fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005668 <HAL_I2C_MspDeInit+0x7c>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <HAL_I2C_MspDeInit+0x7c>)
 8005604:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005608:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800560a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800560e:	4817      	ldr	r0, [pc, #92]	@ (800566c <HAL_I2C_MspDeInit+0x80>)
 8005610:	f001 ffa8 	bl	8007564 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005614:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005618:	4814      	ldr	r0, [pc, #80]	@ (800566c <HAL_I2C_MspDeInit+0x80>)
 800561a:	f001 ffa3 	bl	8007564 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fa3e 	bl	8006aa4 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005628:	201f      	movs	r0, #31
 800562a:	f001 f972 	bl	8006912 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800562e:	e014      	b.n	800565a <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C3)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a0e      	ldr	r2, [pc, #56]	@ (8005670 <HAL_I2C_MspDeInit+0x84>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d10f      	bne.n	800565a <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800563a:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <HAL_I2C_MspDeInit+0x7c>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	4a0a      	ldr	r2, [pc, #40]	@ (8005668 <HAL_I2C_MspDeInit+0x7c>)
 8005640:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005644:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005646:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800564a:	480a      	ldr	r0, [pc, #40]	@ (8005674 <HAL_I2C_MspDeInit+0x88>)
 800564c:	f001 ff8a 	bl	8007564 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005650:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005654:	4808      	ldr	r0, [pc, #32]	@ (8005678 <HAL_I2C_MspDeInit+0x8c>)
 8005656:	f001 ff85 	bl	8007564 <HAL_GPIO_DeInit>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40005400 	.word	0x40005400
 8005668:	40023800 	.word	0x40023800
 800566c:	40020400 	.word	0x40020400
 8005670:	40005c00 	.word	0x40005c00
 8005674:	40020800 	.word	0x40020800
 8005678:	40020000 	.word	0x40020000

0800567c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568c:	d115      	bne.n	80056ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <HAL_TIM_Base_MspInit+0x48>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	4a0b      	ldr	r2, [pc, #44]	@ (80056c4 <HAL_TIM_Base_MspInit+0x48>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6413      	str	r3, [r2, #64]	@ 0x40
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <HAL_TIM_Base_MspInit+0x48>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80056aa:	2200      	movs	r2, #0
 80056ac:	2100      	movs	r1, #0
 80056ae:	201c      	movs	r0, #28
 80056b0:	f001 f905 	bl	80068be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056b4:	201c      	movs	r0, #28
 80056b6:	f001 f91e 	bl	80068f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	@ 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005958 <HAL_UART_MspInit+0x290>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d162      	bne.n	80057b0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	4b9b      	ldr	r3, [pc, #620]	@ (800595c <HAL_UART_MspInit+0x294>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	4a9a      	ldr	r2, [pc, #616]	@ (800595c <HAL_UART_MspInit+0x294>)
 80056f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fa:	4b98      	ldr	r3, [pc, #608]	@ (800595c <HAL_UART_MspInit+0x294>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	4b94      	ldr	r3, [pc, #592]	@ (800595c <HAL_UART_MspInit+0x294>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570e:	4a93      	ldr	r2, [pc, #588]	@ (800595c <HAL_UART_MspInit+0x294>)
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	6313      	str	r3, [r2, #48]	@ 0x30
 8005716:	4b91      	ldr	r3, [pc, #580]	@ (800595c <HAL_UART_MspInit+0x294>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005722:	2303      	movs	r3, #3
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005726:	2302      	movs	r3, #2
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572a:	2300      	movs	r3, #0
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572e:	2303      	movs	r3, #3
 8005730:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005732:	2308      	movs	r3, #8
 8005734:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800573a:	4619      	mov	r1, r3
 800573c:	4888      	ldr	r0, [pc, #544]	@ (8005960 <HAL_UART_MspInit+0x298>)
 800573e:	f001 fd7d 	bl	800723c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005742:	4b88      	ldr	r3, [pc, #544]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005744:	4a88      	ldr	r2, [pc, #544]	@ (8005968 <HAL_UART_MspInit+0x2a0>)
 8005746:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005748:	4b86      	ldr	r3, [pc, #536]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 800574a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800574e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005750:	4b84      	ldr	r3, [pc, #528]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005752:	2240      	movs	r2, #64	@ 0x40
 8005754:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005756:	4b83      	ldr	r3, [pc, #524]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005758:	2200      	movs	r2, #0
 800575a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800575c:	4b81      	ldr	r3, [pc, #516]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 800575e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005762:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005764:	4b7f      	ldr	r3, [pc, #508]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005766:	2200      	movs	r2, #0
 8005768:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800576a:	4b7e      	ldr	r3, [pc, #504]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 800576c:	2200      	movs	r2, #0
 800576e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005770:	4b7c      	ldr	r3, [pc, #496]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005772:	2200      	movs	r2, #0
 8005774:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005776:	4b7b      	ldr	r3, [pc, #492]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005778:	2200      	movs	r2, #0
 800577a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800577c:	4b79      	ldr	r3, [pc, #484]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 800577e:	2200      	movs	r2, #0
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005782:	4878      	ldr	r0, [pc, #480]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005784:	f001 f8e0 	bl	8006948 <HAL_DMA_Init>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800578e:	f7fe fc53 	bl	8004038 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a73      	ldr	r2, [pc, #460]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 8005796:	639a      	str	r2, [r3, #56]	@ 0x38
 8005798:	4a72      	ldr	r2, [pc, #456]	@ (8005964 <HAL_UART_MspInit+0x29c>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800579e:	2200      	movs	r2, #0
 80057a0:	2100      	movs	r1, #0
 80057a2:	2034      	movs	r0, #52	@ 0x34
 80057a4:	f001 f88b 	bl	80068be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80057a8:	2034      	movs	r0, #52	@ 0x34
 80057aa:	f001 f8a4 	bl	80068f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80057ae:	e0cf      	b.n	8005950 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a6d      	ldr	r2, [pc, #436]	@ (800596c <HAL_UART_MspInit+0x2a4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d162      	bne.n	8005880 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	4b67      	ldr	r3, [pc, #412]	@ (800595c <HAL_UART_MspInit+0x294>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	4a66      	ldr	r2, [pc, #408]	@ (800595c <HAL_UART_MspInit+0x294>)
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80057ca:	4b64      	ldr	r3, [pc, #400]	@ (800595c <HAL_UART_MspInit+0x294>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	4b60      	ldr	r3, [pc, #384]	@ (800595c <HAL_UART_MspInit+0x294>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	4a5f      	ldr	r2, [pc, #380]	@ (800595c <HAL_UART_MspInit+0x294>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e6:	4b5d      	ldr	r3, [pc, #372]	@ (800595c <HAL_UART_MspInit+0x294>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80057f2:	230c      	movs	r3, #12
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f6:	2302      	movs	r3, #2
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fe:	2303      	movs	r3, #3
 8005800:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005802:	2307      	movs	r3, #7
 8005804:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800580a:	4619      	mov	r1, r3
 800580c:	4854      	ldr	r0, [pc, #336]	@ (8005960 <HAL_UART_MspInit+0x298>)
 800580e:	f001 fd15 	bl	800723c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005812:	4b57      	ldr	r3, [pc, #348]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005814:	4a57      	ldr	r2, [pc, #348]	@ (8005974 <HAL_UART_MspInit+0x2ac>)
 8005816:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005818:	4b55      	ldr	r3, [pc, #340]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 800581a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800581e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005820:	4b53      	ldr	r3, [pc, #332]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005822:	2240      	movs	r2, #64	@ 0x40
 8005824:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005826:	4b52      	ldr	r3, [pc, #328]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005828:	2200      	movs	r2, #0
 800582a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800582c:	4b50      	ldr	r3, [pc, #320]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 800582e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005832:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005834:	4b4e      	ldr	r3, [pc, #312]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005836:	2200      	movs	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800583a:	4b4d      	ldr	r3, [pc, #308]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005840:	4b4b      	ldr	r3, [pc, #300]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005846:	4b4a      	ldr	r3, [pc, #296]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005848:	2200      	movs	r2, #0
 800584a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800584c:	4b48      	ldr	r3, [pc, #288]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 800584e:	2200      	movs	r2, #0
 8005850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005852:	4847      	ldr	r0, [pc, #284]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005854:	f001 f878 	bl	8006948 <HAL_DMA_Init>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800585e:	f7fe fbeb 	bl	8004038 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a42      	ldr	r2, [pc, #264]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 8005866:	639a      	str	r2, [r3, #56]	@ 0x38
 8005868:	4a41      	ldr	r2, [pc, #260]	@ (8005970 <HAL_UART_MspInit+0x2a8>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	2026      	movs	r0, #38	@ 0x26
 8005874:	f001 f823 	bl	80068be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005878:	2026      	movs	r0, #38	@ 0x26
 800587a:	f001 f83c 	bl	80068f6 <HAL_NVIC_EnableIRQ>
}
 800587e:	e067      	b.n	8005950 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a3c      	ldr	r2, [pc, #240]	@ (8005978 <HAL_UART_MspInit+0x2b0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d162      	bne.n	8005950 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	4b33      	ldr	r3, [pc, #204]	@ (800595c <HAL_UART_MspInit+0x294>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	4a32      	ldr	r2, [pc, #200]	@ (800595c <HAL_UART_MspInit+0x294>)
 8005894:	f043 0320 	orr.w	r3, r3, #32
 8005898:	6453      	str	r3, [r2, #68]	@ 0x44
 800589a:	4b30      	ldr	r3, [pc, #192]	@ (800595c <HAL_UART_MspInit+0x294>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	4b2c      	ldr	r3, [pc, #176]	@ (800595c <HAL_UART_MspInit+0x294>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	4a2b      	ldr	r2, [pc, #172]	@ (800595c <HAL_UART_MspInit+0x294>)
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b6:	4b29      	ldr	r3, [pc, #164]	@ (800595c <HAL_UART_MspInit+0x294>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80058c2:	23c0      	movs	r3, #192	@ 0xc0
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c6:	2302      	movs	r3, #2
 80058c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ce:	2303      	movs	r3, #3
 80058d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80058d2:	2308      	movs	r3, #8
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058da:	4619      	mov	r1, r3
 80058dc:	4827      	ldr	r0, [pc, #156]	@ (800597c <HAL_UART_MspInit+0x2b4>)
 80058de:	f001 fcad 	bl	800723c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 80058e2:	4b27      	ldr	r3, [pc, #156]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 80058e4:	4a27      	ldr	r2, [pc, #156]	@ (8005984 <HAL_UART_MspInit+0x2bc>)
 80058e6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80058e8:	4b25      	ldr	r3, [pc, #148]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 80058ea:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80058ee:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058f0:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058f6:	4b22      	ldr	r3, [pc, #136]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058fc:	4b20      	ldr	r3, [pc, #128]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 80058fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005902:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005904:	4b1e      	ldr	r3, [pc, #120]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 8005906:	2200      	movs	r2, #0
 8005908:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800590a:	4b1d      	ldr	r3, [pc, #116]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 800590c:	2200      	movs	r2, #0
 800590e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005910:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 8005912:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005916:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005918:	4b19      	ldr	r3, [pc, #100]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 800591a:	2200      	movs	r2, #0
 800591c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 8005920:	2200      	movs	r2, #0
 8005922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005924:	4816      	ldr	r0, [pc, #88]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 8005926:	f001 f80f 	bl	8006948 <HAL_DMA_Init>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8005930:	f7fe fb82 	bl	8004038 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a12      	ldr	r2, [pc, #72]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 8005938:	63da      	str	r2, [r3, #60]	@ 0x3c
 800593a:	4a11      	ldr	r2, [pc, #68]	@ (8005980 <HAL_UART_MspInit+0x2b8>)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	2047      	movs	r0, #71	@ 0x47
 8005946:	f000 ffba 	bl	80068be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800594a:	2047      	movs	r0, #71	@ 0x47
 800594c:	f000 ffd3 	bl	80068f6 <HAL_NVIC_EnableIRQ>
}
 8005950:	bf00      	nop
 8005952:	3738      	adds	r7, #56	@ 0x38
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40004c00 	.word	0x40004c00
 800595c:	40023800 	.word	0x40023800
 8005960:	40020000 	.word	0x40020000
 8005964:	20001380 	.word	0x20001380
 8005968:	40026070 	.word	0x40026070
 800596c:	40004400 	.word	0x40004400
 8005970:	200013e0 	.word	0x200013e0
 8005974:	400260a0 	.word	0x400260a0
 8005978:	40011400 	.word	0x40011400
 800597c:	40020800 	.word	0x40020800
 8005980:	20001440 	.word	0x20001440
 8005984:	40026440 	.word	0x40026440

08005988 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a24      	ldr	r2, [pc, #144]	@ (8005a28 <HAL_UART_MspDeInit+0xa0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d112      	bne.n	80059c0 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800599a:	4b24      	ldr	r3, [pc, #144]	@ (8005a2c <HAL_UART_MspDeInit+0xa4>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	4a23      	ldr	r2, [pc, #140]	@ (8005a2c <HAL_UART_MspDeInit+0xa4>)
 80059a0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80059a4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80059a6:	2103      	movs	r1, #3
 80059a8:	4821      	ldr	r0, [pc, #132]	@ (8005a30 <HAL_UART_MspDeInit+0xa8>)
 80059aa:	f001 fddb 	bl	8007564 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f876 	bl	8006aa4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80059b8:	2034      	movs	r0, #52	@ 0x34
 80059ba:	f000 ffaa 	bl	8006912 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80059be:	e02e      	b.n	8005a1e <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <HAL_UART_MspDeInit+0xac>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d112      	bne.n	80059f0 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 80059ca:	4b18      	ldr	r3, [pc, #96]	@ (8005a2c <HAL_UART_MspDeInit+0xa4>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <HAL_UART_MspDeInit+0xa4>)
 80059d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059d4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80059d6:	210c      	movs	r1, #12
 80059d8:	4815      	ldr	r0, [pc, #84]	@ (8005a30 <HAL_UART_MspDeInit+0xa8>)
 80059da:	f001 fdc3 	bl	8007564 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 f85e 	bl	8006aa4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80059e8:	2026      	movs	r0, #38	@ 0x26
 80059ea:	f000 ff92 	bl	8006912 <HAL_NVIC_DisableIRQ>
}
 80059ee:	e016      	b.n	8005a1e <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART6)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a10      	ldr	r2, [pc, #64]	@ (8005a38 <HAL_UART_MspDeInit+0xb0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d111      	bne.n	8005a1e <HAL_UART_MspDeInit+0x96>
    __HAL_RCC_USART6_CLK_DISABLE();
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <HAL_UART_MspDeInit+0xa4>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	4a0b      	ldr	r2, [pc, #44]	@ (8005a2c <HAL_UART_MspDeInit+0xa4>)
 8005a00:	f023 0320 	bic.w	r3, r3, #32
 8005a04:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8005a06:	21c0      	movs	r1, #192	@ 0xc0
 8005a08:	480c      	ldr	r0, [pc, #48]	@ (8005a3c <HAL_UART_MspDeInit+0xb4>)
 8005a0a:	f001 fdab 	bl	8007564 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f846 	bl	8006aa4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8005a18:	2047      	movs	r0, #71	@ 0x47
 8005a1a:	f000 ff7a 	bl	8006912 <HAL_NVIC_DisableIRQ>
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40004c00 	.word	0x40004c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40020000 	.word	0x40020000
 8005a34:	40004400 	.word	0x40004400
 8005a38:	40011400 	.word	0x40011400
 8005a3c:	40020800 	.word	0x40020800

08005a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <NMI_Handler+0x4>

08005a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <HardFault_Handler+0x4>

08005a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <MemManage_Handler+0x4>

08005a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <BusFault_Handler+0x4>

08005a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <UsageFault_Handler+0x4>

08005a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a7a:	bf00      	nop
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a88:	bf00      	nop
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a96:	f000 f9bf 	bl	8005e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a9a:	bf00      	nop
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005aa2:	2008      	movs	r0, #8
 8005aa4:	f001 fe6c 	bl	8007780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005aa8:	bf00      	nop
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005ab0:	2010      	movs	r0, #16
 8005ab2:	f001 fe65 	bl	8007780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005ac0:	4802      	ldr	r0, [pc, #8]	@ (8005acc <DMA1_Stream0_IRQHandler+0x10>)
 8005ac2:	f001 f937 	bl	8006d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005ac6:	bf00      	nop
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20001200 	.word	0x20001200

08005ad0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005ad4:	4802      	ldr	r0, [pc, #8]	@ (8005ae0 <DMA1_Stream4_IRQHandler+0x10>)
 8005ad6:	f001 f92d 	bl	8006d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20001380 	.word	0x20001380

08005ae4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005ae8:	4802      	ldr	r0, [pc, #8]	@ (8005af4 <DMA1_Stream6_IRQHandler+0x10>)
 8005aea:	f001 f923 	bl	8006d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200013e0 	.word	0x200013e0

08005af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005afc:	4802      	ldr	r0, [pc, #8]	@ (8005b08 <TIM2_IRQHandler+0x10>)
 8005afe:	f005 fbc7 	bl	800b290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20001260 	.word	0x20001260

08005b0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005b10:	4802      	ldr	r0, [pc, #8]	@ (8005b1c <I2C1_EV_IRQHandler+0x10>)
 8005b12:	f002 fc91 	bl	8008438 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20001158 	.word	0x20001158

08005b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b24:	4802      	ldr	r0, [pc, #8]	@ (8005b30 <USART2_IRQHandler+0x10>)
 8005b26:	f006 f913 	bl	800bd50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	200012f0 	.word	0x200012f0

08005b34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005b38:	4802      	ldr	r0, [pc, #8]	@ (8005b44 <UART4_IRQHandler+0x10>)
 8005b3a:	f006 f909 	bl	800bd50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200012a8 	.word	0x200012a8

08005b48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005b4c:	4802      	ldr	r0, [pc, #8]	@ (8005b58 <DMA2_Stream2_IRQHandler+0x10>)
 8005b4e:	f001 f8f1 	bl	8006d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20001440 	.word	0x20001440

08005b5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005b60:	4802      	ldr	r0, [pc, #8]	@ (8005b6c <USART6_IRQHandler+0x10>)
 8005b62:	f006 f8f5 	bl	800bd50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20001338 	.word	0x20001338

08005b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return 1;
 8005b74:	2301      	movs	r3, #1
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <_kill>:

int _kill(int pid, int sig)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005b8a:	f008 fb49 	bl	800e220 <__errno>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2216      	movs	r2, #22
 8005b92:	601a      	str	r2, [r3, #0]
  return -1;
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <_exit>:

void _exit (int status)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ffe7 	bl	8005b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <_exit+0x12>

08005bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	e00a      	b.n	8005bde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005bc8:	f3af 8000 	nop.w
 8005bcc:	4601      	mov	r1, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	60ba      	str	r2, [r7, #8]
 8005bd4:	b2ca      	uxtb	r2, r1
 8005bd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	dbf0      	blt.n	8005bc8 <_read+0x12>
  }

  return len;
 8005be6:	687b      	ldr	r3, [r7, #4]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e009      	b.n	8005c16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	60ba      	str	r2, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	3301      	adds	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	dbf1      	blt.n	8005c02 <_write+0x12>
  }
  return len;
 8005c1e:	687b      	ldr	r3, [r7, #4]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <_close>:

int _close(int file)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c50:	605a      	str	r2, [r3, #4]
  return 0;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <_isatty>:

int _isatty(int file)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c68:	2301      	movs	r3, #1
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c98:	4a14      	ldr	r2, [pc, #80]	@ (8005cec <_sbrk+0x5c>)
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <_sbrk+0x60>)
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ca4:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <_sbrk+0x64>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005cac:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <_sbrk+0x64>)
 8005cae:	4a12      	ldr	r2, [pc, #72]	@ (8005cf8 <_sbrk+0x68>)
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cb2:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <_sbrk+0x64>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d207      	bcs.n	8005cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cc0:	f008 faae 	bl	800e220 <__errno>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	220c      	movs	r2, #12
 8005cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	e009      	b.n	8005ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cd0:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <_sbrk+0x64>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <_sbrk+0x64>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	4a05      	ldr	r2, [pc, #20]	@ (8005cf4 <_sbrk+0x64>)
 8005ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20020000 	.word	0x20020000
 8005cf0:	00000400 	.word	0x00000400
 8005cf4:	200016d0 	.word	0x200016d0
 8005cf8:	20001828 	.word	0x20001828

08005cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <SystemInit+0x20>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	4a05      	ldr	r2, [pc, #20]	@ (8005d1c <SystemInit+0x20>)
 8005d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	e000ed00 	.word	0xe000ed00

08005d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005d58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005d24:	f7ff ffea 	bl	8005cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d28:	480c      	ldr	r0, [pc, #48]	@ (8005d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d2a:	490d      	ldr	r1, [pc, #52]	@ (8005d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d30:	e002      	b.n	8005d38 <LoopCopyDataInit>

08005d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d36:	3304      	adds	r3, #4

08005d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d3c:	d3f9      	bcc.n	8005d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d40:	4c0a      	ldr	r4, [pc, #40]	@ (8005d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d44:	e001      	b.n	8005d4a <LoopFillZerobss>

08005d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d48:	3204      	adds	r2, #4

08005d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d4c:	d3fb      	bcc.n	8005d46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005d4e:	f008 fa6d 	bl	800e22c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d52:	f7fd fcbd 	bl	80036d0 <main>
  bx  lr    
 8005d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d60:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005d64:	08013920 	.word	0x08013920
  ldr r2, =_sbss
 8005d68:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005d6c:	20001824 	.word	0x20001824

08005d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d70:	e7fe      	b.n	8005d70 <ADC_IRQHandler>
	...

08005d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d78:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <HAL_Init+0x40>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005db4 <HAL_Init+0x40>)
 8005d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d84:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <HAL_Init+0x40>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <HAL_Init+0x40>)
 8005d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d90:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <HAL_Init+0x40>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a07      	ldr	r2, [pc, #28]	@ (8005db4 <HAL_Init+0x40>)
 8005d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	f000 fd83 	bl	80068a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005da2:	200f      	movs	r0, #15
 8005da4:	f000 f808 	bl	8005db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005da8:	f7ff fada 	bl	8005360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023c00 	.word	0x40023c00

08005db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dc0:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <HAL_InitTick+0x54>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <HAL_InitTick+0x58>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fda9 	bl	800692e <HAL_SYSTICK_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e00e      	b.n	8005e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d80a      	bhi.n	8005e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dec:	2200      	movs	r2, #0
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	f000 fd63 	bl	80068be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005df8:	4a06      	ldr	r2, [pc, #24]	@ (8005e14 <HAL_InitTick+0x5c>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000034 	.word	0x20000034
 8005e10:	2000003c 	.word	0x2000003c
 8005e14:	20000038 	.word	0x20000038

08005e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <HAL_IncTick+0x20>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <HAL_IncTick+0x24>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4413      	add	r3, r2
 8005e28:	4a04      	ldr	r2, [pc, #16]	@ (8005e3c <HAL_IncTick+0x24>)
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	2000003c 	.word	0x2000003c
 8005e3c:	200016d4 	.word	0x200016d4

08005e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return uwTick;
 8005e44:	4b03      	ldr	r3, [pc, #12]	@ (8005e54 <HAL_GetTick+0x14>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	200016d4 	.word	0x200016d4

08005e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e60:	f7ff ffee 	bl	8005e40 <HAL_GetTick>
 8005e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d005      	beq.n	8005e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <HAL_Delay+0x44>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e7e:	bf00      	nop
 8005e80:	f7ff ffde 	bl	8005e40 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d8f7      	bhi.n	8005e80 <HAL_Delay+0x28>
  {
  }
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2000003c 	.word	0x2000003c

08005ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e033      	b.n	8005f1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fa76 	bl	80053b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d118      	bne.n	8005f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005ee6:	f023 0302 	bic.w	r3, r3, #2
 8005eea:	f043 0202 	orr.w	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fae8 	bl	80064c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	f043 0201 	orr.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f0e:	e001      	b.n	8005f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_ADC_Start+0x1a>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e0b2      	b.n	80060a8 <HAL_ADC_Start+0x180>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d018      	beq.n	8005f8a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005f68:	4b52      	ldr	r3, [pc, #328]	@ (80060b4 <HAL_ADC_Start+0x18c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a52      	ldr	r2, [pc, #328]	@ (80060b8 <HAL_ADC_Start+0x190>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	0c9a      	lsrs	r2, r3, #18
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005f7c:	e002      	b.n	8005f84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f9      	bne.n	8005f7e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d17a      	bne.n	800608e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005fc2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd6:	d106      	bne.n	8005fe6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fdc:	f023 0206 	bic.w	r2, r3, #6
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	@ 0x44
 8005fe4:	e002      	b.n	8005fec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ff4:	4b31      	ldr	r3, [pc, #196]	@ (80060bc <HAL_ADC_Start+0x194>)
 8005ff6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006000:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12a      	bne.n	8006064 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2b      	ldr	r2, [pc, #172]	@ (80060c0 <HAL_ADC_Start+0x198>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d015      	beq.n	8006044 <HAL_ADC_Start+0x11c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <HAL_ADC_Start+0x19c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d105      	bne.n	800602e <HAL_ADC_Start+0x106>
 8006022:	4b26      	ldr	r3, [pc, #152]	@ (80060bc <HAL_ADC_Start+0x194>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a25      	ldr	r2, [pc, #148]	@ (80060c8 <HAL_ADC_Start+0x1a0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d136      	bne.n	80060a6 <HAL_ADC_Start+0x17e>
 8006038:	4b20      	ldr	r3, [pc, #128]	@ (80060bc <HAL_ADC_Start+0x194>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d130      	bne.n	80060a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d129      	bne.n	80060a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006060:	609a      	str	r2, [r3, #8]
 8006062:	e020      	b.n	80060a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <HAL_ADC_Start+0x198>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d11b      	bne.n	80060a6 <HAL_ADC_Start+0x17e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d114      	bne.n	80060a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	e00b      	b.n	80060a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f043 0210 	orr.w	r2, r3, #16
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	f043 0201 	orr.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20000034 	.word	0x20000034
 80060b8:	431bde83 	.word	0x431bde83
 80060bc:	40012300 	.word	0x40012300
 80060c0:	40012000 	.word	0x40012000
 80060c4:	40012100 	.word	0x40012100
 80060c8:	40012200 	.word	0x40012200

080060cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_Stop+0x16>
 80060de:	2302      	movs	r3, #2
 80060e0:	e021      	b.n	8006126 <HAL_ADC_Stop+0x5a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f043 0201 	orr.w	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800614a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614e:	d113      	bne.n	8006178 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800615a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615e:	d10b      	bne.n	8006178 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e063      	b.n	8006240 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006178:	f7ff fe62 	bl	8005e40 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800617e:	e021      	b.n	80061c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d01d      	beq.n	80061c4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <HAL_ADC_PollForConversion+0x6c>
 800618e:	f7ff fe57 	bl	8005e40 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d212      	bcs.n	80061c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d00b      	beq.n	80061c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	f043 0204 	orr.w	r2, r3, #4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e03d      	b.n	8006240 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d1d6      	bne.n	8006180 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f06f 0212 	mvn.w	r2, #18
 80061da:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d123      	bne.n	800623e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d11f      	bne.n	800623e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006208:	2b00      	cmp	r3, #0
 800620a:	d006      	beq.n	800621a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006216:	2b00      	cmp	r3, #0
 8006218:	d111      	bne.n	800623e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	f043 0201 	orr.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_ADC_ConfigChannel+0x1c>
 800627c:	2302      	movs	r3, #2
 800627e:	e113      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x244>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b09      	cmp	r3, #9
 800628e:	d925      	bls.n	80062dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68d9      	ldr	r1, [r3, #12]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	3b1e      	subs	r3, #30
 80062a6:	2207      	movs	r2, #7
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43da      	mvns	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	400a      	ands	r2, r1
 80062b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68d9      	ldr	r1, [r3, #12]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	4618      	mov	r0, r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	4403      	add	r3, r0
 80062ce:	3b1e      	subs	r3, #30
 80062d0:	409a      	lsls	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e022      	b.n	8006322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6919      	ldr	r1, [r3, #16]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	4613      	mov	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	2207      	movs	r2, #7
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	43da      	mvns	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	400a      	ands	r2, r1
 80062fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6919      	ldr	r1, [r3, #16]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	4618      	mov	r0, r3
 8006312:	4603      	mov	r3, r0
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4403      	add	r3, r0
 8006318:	409a      	lsls	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d824      	bhi.n	8006374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	3b05      	subs	r3, #5
 800633c:	221f      	movs	r2, #31
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	43da      	mvns	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	400a      	ands	r2, r1
 800634a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	4618      	mov	r0, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	3b05      	subs	r3, #5
 8006366:	fa00 f203 	lsl.w	r2, r0, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34
 8006372:	e04c      	b.n	800640e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b0c      	cmp	r3, #12
 800637a:	d824      	bhi.n	80063c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	3b23      	subs	r3, #35	@ 0x23
 800638e:	221f      	movs	r2, #31
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43da      	mvns	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	400a      	ands	r2, r1
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4618      	mov	r0, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	3b23      	subs	r3, #35	@ 0x23
 80063b8:	fa00 f203 	lsl.w	r2, r0, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80063c4:	e023      	b.n	800640e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	3b41      	subs	r3, #65	@ 0x41
 80063d8:	221f      	movs	r2, #31
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43da      	mvns	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	400a      	ands	r2, r1
 80063e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4618      	mov	r0, r3
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	3b41      	subs	r3, #65	@ 0x41
 8006402:	fa00 f203 	lsl.w	r2, r0, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800640e:	4b29      	ldr	r3, [pc, #164]	@ (80064b4 <HAL_ADC_ConfigChannel+0x250>)
 8006410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a28      	ldr	r2, [pc, #160]	@ (80064b8 <HAL_ADC_ConfigChannel+0x254>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d10f      	bne.n	800643c <HAL_ADC_ConfigChannel+0x1d8>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b12      	cmp	r3, #18
 8006422:	d10b      	bne.n	800643c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <HAL_ADC_ConfigChannel+0x254>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d12b      	bne.n	800649e <HAL_ADC_ConfigChannel+0x23a>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1c      	ldr	r2, [pc, #112]	@ (80064bc <HAL_ADC_ConfigChannel+0x258>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <HAL_ADC_ConfigChannel+0x1f4>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b11      	cmp	r3, #17
 8006456:	d122      	bne.n	800649e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a11      	ldr	r2, [pc, #68]	@ (80064bc <HAL_ADC_ConfigChannel+0x258>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d111      	bne.n	800649e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800647a:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <HAL_ADC_ConfigChannel+0x25c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a11      	ldr	r2, [pc, #68]	@ (80064c4 <HAL_ADC_ConfigChannel+0x260>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	0c9a      	lsrs	r2, r3, #18
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006490:	e002      	b.n	8006498 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	3b01      	subs	r3, #1
 8006496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f9      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40012300 	.word	0x40012300
 80064b8:	40012000 	.word	0x40012000
 80064bc:	10000012 	.word	0x10000012
 80064c0:	20000034 	.word	0x20000034
 80064c4:	431bde83 	.word	0x431bde83

080064c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064d0:	4b79      	ldr	r3, [pc, #484]	@ (80066b8 <ADC_Init+0x1f0>)
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6859      	ldr	r1, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	021a      	lsls	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6859      	ldr	r1, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6899      	ldr	r1, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	4a58      	ldr	r2, [pc, #352]	@ (80066bc <ADC_Init+0x1f4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d022      	beq.n	80065a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800656e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6899      	ldr	r1, [r3, #8]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]
 80065a4:	e00f      	b.n	80065c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80065b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80065c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0202 	bic.w	r2, r2, #2
 80065d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6899      	ldr	r1, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7e1b      	ldrb	r3, [r3, #24]
 80065e0:	005a      	lsls	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01b      	beq.n	800662c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006602:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6859      	ldr	r1, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	3b01      	subs	r3, #1
 8006620:	035a      	lsls	r2, r3, #13
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	e007      	b.n	800663c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800664a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	3b01      	subs	r3, #1
 8006658:	051a      	lsls	r2, r3, #20
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6899      	ldr	r1, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800667e:	025a      	lsls	r2, r3, #9
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6899      	ldr	r1, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	029a      	lsls	r2, r3, #10
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	40012300 	.word	0x40012300
 80066bc:	0f000001 	.word	0x0f000001

080066c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <__NVIC_SetPriorityGrouping+0x44>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066dc:	4013      	ands	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066f2:	4a04      	ldr	r2, [pc, #16]	@ (8006704 <__NVIC_SetPriorityGrouping+0x44>)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	60d3      	str	r3, [r2, #12]
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	e000ed00 	.word	0xe000ed00

08006708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800670c:	4b04      	ldr	r3, [pc, #16]	@ (8006720 <__NVIC_GetPriorityGrouping+0x18>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	0a1b      	lsrs	r3, r3, #8
 8006712:	f003 0307 	and.w	r3, r3, #7
}
 8006716:	4618      	mov	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	db0b      	blt.n	800674e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	f003 021f 	and.w	r2, r3, #31
 800673c:	4907      	ldr	r1, [pc, #28]	@ (800675c <__NVIC_EnableIRQ+0x38>)
 800673e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	2001      	movs	r0, #1
 8006746:	fa00 f202 	lsl.w	r2, r0, r2
 800674a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	e000e100 	.word	0xe000e100

08006760 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800676a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	db12      	blt.n	8006798 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	f003 021f 	and.w	r2, r3, #31
 8006778:	490a      	ldr	r1, [pc, #40]	@ (80067a4 <__NVIC_DisableIRQ+0x44>)
 800677a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	2001      	movs	r0, #1
 8006782:	fa00 f202 	lsl.w	r2, r0, r2
 8006786:	3320      	adds	r3, #32
 8006788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800678c:	f3bf 8f4f 	dsb	sy
}
 8006790:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006792:	f3bf 8f6f 	isb	sy
}
 8006796:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	e000e100 	.word	0xe000e100

080067a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	db0a      	blt.n	80067d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	490c      	ldr	r1, [pc, #48]	@ (80067f4 <__NVIC_SetPriority+0x4c>)
 80067c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c6:	0112      	lsls	r2, r2, #4
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	440b      	add	r3, r1
 80067cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067d0:	e00a      	b.n	80067e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	4908      	ldr	r1, [pc, #32]	@ (80067f8 <__NVIC_SetPriority+0x50>)
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	3b04      	subs	r3, #4
 80067e0:	0112      	lsls	r2, r2, #4
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	440b      	add	r3, r1
 80067e6:	761a      	strb	r2, [r3, #24]
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	e000e100 	.word	0xe000e100
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b089      	sub	sp, #36	@ 0x24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f1c3 0307 	rsb	r3, r3, #7
 8006816:	2b04      	cmp	r3, #4
 8006818:	bf28      	it	cs
 800681a:	2304      	movcs	r3, #4
 800681c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3304      	adds	r3, #4
 8006822:	2b06      	cmp	r3, #6
 8006824:	d902      	bls.n	800682c <NVIC_EncodePriority+0x30>
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3b03      	subs	r3, #3
 800682a:	e000      	b.n	800682e <NVIC_EncodePriority+0x32>
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43da      	mvns	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	401a      	ands	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006844:	f04f 31ff 	mov.w	r1, #4294967295
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	fa01 f303 	lsl.w	r3, r1, r3
 800684e:	43d9      	mvns	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006854:	4313      	orrs	r3, r2
         );
}
 8006856:	4618      	mov	r0, r3
 8006858:	3724      	adds	r7, #36	@ 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3b01      	subs	r3, #1
 8006870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006874:	d301      	bcc.n	800687a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006876:	2301      	movs	r3, #1
 8006878:	e00f      	b.n	800689a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800687a:	4a0a      	ldr	r2, [pc, #40]	@ (80068a4 <SysTick_Config+0x40>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3b01      	subs	r3, #1
 8006880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006882:	210f      	movs	r1, #15
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	f7ff ff8e 	bl	80067a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <SysTick_Config+0x40>)
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006892:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <SysTick_Config+0x40>)
 8006894:	2207      	movs	r2, #7
 8006896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	e000e010 	.word	0xe000e010

080068a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ff05 	bl	80066c0 <__NVIC_SetPriorityGrouping>
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	4603      	mov	r3, r0
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068d0:	f7ff ff1a 	bl	8006708 <__NVIC_GetPriorityGrouping>
 80068d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	6978      	ldr	r0, [r7, #20]
 80068dc:	f7ff ff8e 	bl	80067fc <NVIC_EncodePriority>
 80068e0:	4602      	mov	r2, r0
 80068e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff ff5d 	bl	80067a8 <__NVIC_SetPriority>
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	4603      	mov	r3, r0
 80068fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff ff0d 	bl	8006724 <__NVIC_EnableIRQ>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	4603      	mov	r3, r0
 800691a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800691c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff ff1d 	bl	8006760 <__NVIC_DisableIRQ>
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff94 	bl	8006864 <SysTick_Config>
 800693c:	4603      	mov	r3, r0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006954:	f7ff fa74 	bl	8005e40 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e099      	b.n	8006a98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006984:	e00f      	b.n	80069a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006986:	f7ff fa5b 	bl	8005e40 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b05      	cmp	r3, #5
 8006992:	d908      	bls.n	80069a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2203      	movs	r2, #3
 800699e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e078      	b.n	8006a98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e8      	bne.n	8006986 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4b38      	ldr	r3, [pc, #224]	@ (8006aa0 <HAL_DMA_Init+0x158>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d107      	bne.n	8006a10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d117      	bne.n	8006a6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00e      	beq.n	8006a6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb79 	bl	8007144 <DMA_CheckFifoParam>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2240      	movs	r2, #64	@ 0x40
 8006a5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006a66:	2301      	movs	r3, #1
 8006a68:	e016      	b.n	8006a98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb30 	bl	80070d8 <DMA_CalcBaseAndBitshift>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a80:	223f      	movs	r2, #63	@ 0x3f
 8006a82:	409a      	lsls	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	f010803f 	.word	0xf010803f

08006aa4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e050      	b.n	8006b58 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d101      	bne.n	8006ac6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e048      	b.n	8006b58 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0201 	bic.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2221      	movs	r2, #33	@ 0x21
 8006b04:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fae6 	bl	80070d8 <DMA_CalcBaseAndBitshift>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b38:	223f      	movs	r2, #63	@ 0x3f
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_DMA_Start_IT+0x26>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e040      	b.n	8006c08 <HAL_DMA_Start_IT+0xa8>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d12f      	bne.n	8006bfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fa64 	bl	800707c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb8:	223f      	movs	r2, #63	@ 0x3f
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0216 	orr.w	r2, r2, #22
 8006bce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0208 	orr.w	r2, r2, #8
 8006be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e005      	b.n	8006c06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c02:	2302      	movs	r3, #2
 8006c04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c1e:	f7ff f90f 	bl	8005e40 <HAL_GetTick>
 8006c22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d008      	beq.n	8006c42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2280      	movs	r2, #128	@ 0x80
 8006c34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e052      	b.n	8006ce8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0216 	bic.w	r2, r2, #22
 8006c50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <HAL_DMA_Abort+0x62>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0208 	bic.w	r2, r2, #8
 8006c80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c92:	e013      	b.n	8006cbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c94:	f7ff f8d4 	bl	8005e40 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d90c      	bls.n	8006cbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2203      	movs	r2, #3
 8006cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e015      	b.n	8006ce8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e4      	bne.n	8006c94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cce:	223f      	movs	r2, #63	@ 0x3f
 8006cd0:	409a      	lsls	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d004      	beq.n	8006d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2280      	movs	r2, #128	@ 0x80
 8006d08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e00c      	b.n	8006d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2205      	movs	r2, #5
 8006d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d40:	4b8e      	ldr	r3, [pc, #568]	@ (8006f7c <HAL_DMA_IRQHandler+0x248>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a8e      	ldr	r2, [pc, #568]	@ (8006f80 <HAL_DMA_IRQHandler+0x24c>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	0a9b      	lsrs	r3, r3, #10
 8006d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	2208      	movs	r2, #8
 8006d60:	409a      	lsls	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4013      	ands	r3, r2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01a      	beq.n	8006da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d013      	beq.n	8006da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0204 	bic.w	r2, r2, #4
 8006d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d98:	f043 0201 	orr.w	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da4:	2201      	movs	r2, #1
 8006da6:	409a      	lsls	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d012      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dce:	f043 0202 	orr.w	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dda:	2204      	movs	r2, #4
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d012      	beq.n	8006e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df8:	2204      	movs	r2, #4
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e04:	f043 0204 	orr.w	r2, r3, #4
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e10:	2210      	movs	r2, #16
 8006e12:	409a      	lsls	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4013      	ands	r3, r2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d043      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d03c      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2e:	2210      	movs	r2, #16
 8006e30:	409a      	lsls	r2, r3
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d018      	beq.n	8006e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d108      	bne.n	8006e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d024      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	e01f      	b.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01b      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
 8006e74:	e016      	b.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d107      	bne.n	8006e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0208 	bic.w	r2, r2, #8
 8006e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	409a      	lsls	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 808f 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8087 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eca:	2220      	movs	r2, #32
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d136      	bne.n	8006f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0216 	bic.w	r2, r2, #22
 8006eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <HAL_DMA_IRQHandler+0x1da>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0208 	bic.w	r2, r2, #8
 8006f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f22:	223f      	movs	r2, #63	@ 0x3f
 8006f24:	409a      	lsls	r2, r3
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d07e      	beq.n	8007040 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
        }
        return;
 8006f4a:	e079      	b.n	8007040 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01d      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10d      	bne.n	8006f84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d031      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	e02c      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
 8006f7a:	bf00      	nop
 8006f7c:	20000034 	.word	0x20000034
 8006f80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d023      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
 8006f94:	e01e      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0210 	bic.w	r2, r2, #16
 8006fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d032      	beq.n	8007042 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d022      	beq.n	800702e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2205      	movs	r2, #5
 8006fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	3301      	adds	r3, #1
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	429a      	cmp	r2, r3
 800700a:	d307      	bcc.n	800701c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f2      	bne.n	8007000 <HAL_DMA_IRQHandler+0x2cc>
 800701a:	e000      	b.n	800701e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800701c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
 800703e:	e000      	b.n	8007042 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007040:	bf00      	nop
    }
  }
}
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007056:	b2db      	uxtb	r3, r3
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b40      	cmp	r3, #64	@ 0x40
 80070a8:	d108      	bne.n	80070bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070ba:	e007      	b.n	80070cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]
}
 80070cc:	bf00      	nop
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3b10      	subs	r3, #16
 80070e8:	4a14      	ldr	r2, [pc, #80]	@ (800713c <DMA_CalcBaseAndBitshift+0x64>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070f2:	4a13      	ldr	r2, [pc, #76]	@ (8007140 <DMA_CalcBaseAndBitshift+0x68>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d909      	bls.n	800711a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	1d1a      	adds	r2, r3, #4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	659a      	str	r2, [r3, #88]	@ 0x58
 8007118:	e007      	b.n	800712a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	aaaaaaab 	.word	0xaaaaaaab
 8007140:	08013488 	.word	0x08013488

08007144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11f      	bne.n	800719e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b03      	cmp	r3, #3
 8007162:	d856      	bhi.n	8007212 <DMA_CheckFifoParam+0xce>
 8007164:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <DMA_CheckFifoParam+0x28>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	0800717d 	.word	0x0800717d
 8007170:	0800718f 	.word	0x0800718f
 8007174:	0800717d 	.word	0x0800717d
 8007178:	08007213 	.word	0x08007213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d046      	beq.n	8007216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800718c:	e043      	b.n	8007216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007196:	d140      	bne.n	800721a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800719c:	e03d      	b.n	800721a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a6:	d121      	bne.n	80071ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d837      	bhi.n	800721e <DMA_CheckFifoParam+0xda>
 80071ae:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <DMA_CheckFifoParam+0x70>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071c5 	.word	0x080071c5
 80071b8:	080071cb 	.word	0x080071cb
 80071bc:	080071c5 	.word	0x080071c5
 80071c0:	080071dd 	.word	0x080071dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
      break;
 80071c8:	e030      	b.n	800722c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d025      	beq.n	8007222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071da:	e022      	b.n	8007222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80071e4:	d11f      	bne.n	8007226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071ea:	e01c      	b.n	8007226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d903      	bls.n	80071fa <DMA_CheckFifoParam+0xb6>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d003      	beq.n	8007200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071f8:	e018      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
      break;
 80071fe:	e015      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	e00b      	b.n	800722a <DMA_CheckFifoParam+0xe6>
      break;
 8007212:	bf00      	nop
 8007214:	e00a      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      break;
 8007216:	bf00      	nop
 8007218:	e008      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      break;
 800721a:	bf00      	nop
 800721c:	e006      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      break;
 800721e:	bf00      	nop
 8007220:	e004      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      break;
 8007222:	bf00      	nop
 8007224:	e002      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      break;   
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <DMA_CheckFifoParam+0xe8>
      break;
 800722a:	bf00      	nop
    }
  } 
  
  return status; 
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop

0800723c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800723c:	b480      	push	{r7}
 800723e:	b089      	sub	sp, #36	@ 0x24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e165      	b.n	8007524 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007258:	2201      	movs	r2, #1
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4013      	ands	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	429a      	cmp	r2, r3
 8007272:	f040 8154 	bne.w	800751e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d005      	beq.n	800728e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800728a:	2b02      	cmp	r3, #2
 800728c:	d130      	bne.n	80072f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	2203      	movs	r2, #3
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	43db      	mvns	r3, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4013      	ands	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072c4:	2201      	movs	r2, #1
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4013      	ands	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	091b      	lsrs	r3, r3, #4
 80072da:	f003 0201 	and.w	r2, r3, #1
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d017      	beq.n	800732c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	2203      	movs	r2, #3
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43db      	mvns	r3, r3
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	4013      	ands	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	4313      	orrs	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d123      	bne.n	8007380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	08da      	lsrs	r2, r3, #3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3208      	adds	r2, #8
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	220f      	movs	r2, #15
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	4013      	ands	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	4313      	orrs	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	08da      	lsrs	r2, r3, #3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3208      	adds	r2, #8
 800737a:	69b9      	ldr	r1, [r7, #24]
 800737c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2203      	movs	r2, #3
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	4013      	ands	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 0203 	and.w	r2, r3, #3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80ae 	beq.w	800751e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	4b5d      	ldr	r3, [pc, #372]	@ (800753c <HAL_GPIO_Init+0x300>)
 80073c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ca:	4a5c      	ldr	r2, [pc, #368]	@ (800753c <HAL_GPIO_Init+0x300>)
 80073cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80073d2:	4b5a      	ldr	r3, [pc, #360]	@ (800753c <HAL_GPIO_Init+0x300>)
 80073d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073de:	4a58      	ldr	r2, [pc, #352]	@ (8007540 <HAL_GPIO_Init+0x304>)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	3302      	adds	r3, #2
 80073e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	220f      	movs	r2, #15
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43db      	mvns	r3, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a4f      	ldr	r2, [pc, #316]	@ (8007544 <HAL_GPIO_Init+0x308>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d025      	beq.n	8007456 <HAL_GPIO_Init+0x21a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a4e      	ldr	r2, [pc, #312]	@ (8007548 <HAL_GPIO_Init+0x30c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d01f      	beq.n	8007452 <HAL_GPIO_Init+0x216>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a4d      	ldr	r2, [pc, #308]	@ (800754c <HAL_GPIO_Init+0x310>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d019      	beq.n	800744e <HAL_GPIO_Init+0x212>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a4c      	ldr	r2, [pc, #304]	@ (8007550 <HAL_GPIO_Init+0x314>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d013      	beq.n	800744a <HAL_GPIO_Init+0x20e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a4b      	ldr	r2, [pc, #300]	@ (8007554 <HAL_GPIO_Init+0x318>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00d      	beq.n	8007446 <HAL_GPIO_Init+0x20a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a4a      	ldr	r2, [pc, #296]	@ (8007558 <HAL_GPIO_Init+0x31c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <HAL_GPIO_Init+0x206>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a49      	ldr	r2, [pc, #292]	@ (800755c <HAL_GPIO_Init+0x320>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <HAL_GPIO_Init+0x202>
 800743a:	2306      	movs	r3, #6
 800743c:	e00c      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 800743e:	2307      	movs	r3, #7
 8007440:	e00a      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 8007442:	2305      	movs	r3, #5
 8007444:	e008      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 8007446:	2304      	movs	r3, #4
 8007448:	e006      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 800744a:	2303      	movs	r3, #3
 800744c:	e004      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 800744e:	2302      	movs	r3, #2
 8007450:	e002      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <HAL_GPIO_Init+0x21c>
 8007456:	2300      	movs	r3, #0
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	f002 0203 	and.w	r2, r2, #3
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	4093      	lsls	r3, r2
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4313      	orrs	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007468:	4935      	ldr	r1, [pc, #212]	@ (8007540 <HAL_GPIO_Init+0x304>)
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	089b      	lsrs	r3, r3, #2
 800746e:	3302      	adds	r3, #2
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007476:	4b3a      	ldr	r3, [pc, #232]	@ (8007560 <HAL_GPIO_Init+0x324>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	43db      	mvns	r3, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	4013      	ands	r3, r2
 8007484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800749a:	4a31      	ldr	r2, [pc, #196]	@ (8007560 <HAL_GPIO_Init+0x324>)
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007560 <HAL_GPIO_Init+0x324>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	43db      	mvns	r3, r3
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	4013      	ands	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074c4:	4a26      	ldr	r2, [pc, #152]	@ (8007560 <HAL_GPIO_Init+0x324>)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80074ca:	4b25      	ldr	r3, [pc, #148]	@ (8007560 <HAL_GPIO_Init+0x324>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	43db      	mvns	r3, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4013      	ands	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007560 <HAL_GPIO_Init+0x324>)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <HAL_GPIO_Init+0x324>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	43db      	mvns	r3, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4013      	ands	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007518:	4a11      	ldr	r2, [pc, #68]	@ (8007560 <HAL_GPIO_Init+0x324>)
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3301      	adds	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	f67f ae96 	bls.w	8007258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	3724      	adds	r7, #36	@ 0x24
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40023800 	.word	0x40023800
 8007540:	40013800 	.word	0x40013800
 8007544:	40020000 	.word	0x40020000
 8007548:	40020400 	.word	0x40020400
 800754c:	40020800 	.word	0x40020800
 8007550:	40020c00 	.word	0x40020c00
 8007554:	40021000 	.word	0x40021000
 8007558:	40021400 	.word	0x40021400
 800755c:	40021800 	.word	0x40021800
 8007560:	40013c00 	.word	0x40013c00

08007564 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800756e:	2300      	movs	r3, #0
 8007570:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	e0c7      	b.n	8007710 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007580:	2201      	movs	r2, #1
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	4013      	ands	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	f040 80b7 	bne.w	800770a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800759c:	4a62      	ldr	r2, [pc, #392]	@ (8007728 <HAL_GPIO_DeInit+0x1c4>)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	089b      	lsrs	r3, r3, #2
 80075a2:	3302      	adds	r3, #2
 80075a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	220f      	movs	r2, #15
 80075b4:	fa02 f303 	lsl.w	r3, r2, r3
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a5a      	ldr	r2, [pc, #360]	@ (800772c <HAL_GPIO_DeInit+0x1c8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d025      	beq.n	8007612 <HAL_GPIO_DeInit+0xae>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a59      	ldr	r2, [pc, #356]	@ (8007730 <HAL_GPIO_DeInit+0x1cc>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01f      	beq.n	800760e <HAL_GPIO_DeInit+0xaa>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a58      	ldr	r2, [pc, #352]	@ (8007734 <HAL_GPIO_DeInit+0x1d0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d019      	beq.n	800760a <HAL_GPIO_DeInit+0xa6>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a57      	ldr	r2, [pc, #348]	@ (8007738 <HAL_GPIO_DeInit+0x1d4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d013      	beq.n	8007606 <HAL_GPIO_DeInit+0xa2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a56      	ldr	r2, [pc, #344]	@ (800773c <HAL_GPIO_DeInit+0x1d8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00d      	beq.n	8007602 <HAL_GPIO_DeInit+0x9e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a55      	ldr	r2, [pc, #340]	@ (8007740 <HAL_GPIO_DeInit+0x1dc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <HAL_GPIO_DeInit+0x9a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a54      	ldr	r2, [pc, #336]	@ (8007744 <HAL_GPIO_DeInit+0x1e0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d101      	bne.n	80075fa <HAL_GPIO_DeInit+0x96>
 80075f6:	2306      	movs	r3, #6
 80075f8:	e00c      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 80075fa:	2307      	movs	r3, #7
 80075fc:	e00a      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 80075fe:	2305      	movs	r3, #5
 8007600:	e008      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 8007602:	2304      	movs	r3, #4
 8007604:	e006      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 8007606:	2303      	movs	r3, #3
 8007608:	e004      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 800760a:	2302      	movs	r3, #2
 800760c:	e002      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <HAL_GPIO_DeInit+0xb0>
 8007612:	2300      	movs	r3, #0
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	f002 0203 	and.w	r2, r2, #3
 800761a:	0092      	lsls	r2, r2, #2
 800761c:	4093      	lsls	r3, r2
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d132      	bne.n	800768a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007624:	4b48      	ldr	r3, [pc, #288]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	43db      	mvns	r3, r3
 800762c:	4946      	ldr	r1, [pc, #280]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 800762e:	4013      	ands	r3, r2
 8007630:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007632:	4b45      	ldr	r3, [pc, #276]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	43db      	mvns	r3, r3
 800763a:	4943      	ldr	r1, [pc, #268]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 800763c:	4013      	ands	r3, r2
 800763e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007640:	4b41      	ldr	r3, [pc, #260]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	43db      	mvns	r3, r3
 8007648:	493f      	ldr	r1, [pc, #252]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 800764a:	4013      	ands	r3, r2
 800764c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800764e:	4b3e      	ldr	r3, [pc, #248]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	43db      	mvns	r3, r3
 8007656:	493c      	ldr	r1, [pc, #240]	@ (8007748 <HAL_GPIO_DeInit+0x1e4>)
 8007658:	4013      	ands	r3, r2
 800765a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	220f      	movs	r2, #15
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800766c:	4a2e      	ldr	r2, [pc, #184]	@ (8007728 <HAL_GPIO_DeInit+0x1c4>)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	089b      	lsrs	r3, r3, #2
 8007672:	3302      	adds	r3, #2
 8007674:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	43da      	mvns	r2, r3
 800767c:	482a      	ldr	r0, [pc, #168]	@ (8007728 <HAL_GPIO_DeInit+0x1c4>)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	089b      	lsrs	r3, r3, #2
 8007682:	400a      	ands	r2, r1
 8007684:	3302      	adds	r3, #2
 8007686:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	2103      	movs	r1, #3
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	401a      	ands	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	08da      	lsrs	r2, r3, #3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3208      	adds	r2, #8
 80076a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	220f      	movs	r2, #15
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	43db      	mvns	r3, r3
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	08d2      	lsrs	r2, r2, #3
 80076c0:	4019      	ands	r1, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3208      	adds	r2, #8
 80076c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	2103      	movs	r1, #3
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	43db      	mvns	r3, r3
 80076da:	401a      	ands	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	2101      	movs	r1, #1
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ec:	43db      	mvns	r3, r3
 80076ee:	401a      	ands	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	2103      	movs	r1, #3
 80076fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	401a      	ands	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	3301      	adds	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b0f      	cmp	r3, #15
 8007714:	f67f af34 	bls.w	8007580 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40013800 	.word	0x40013800
 800772c:	40020000 	.word	0x40020000
 8007730:	40020400 	.word	0x40020400
 8007734:	40020800 	.word	0x40020800
 8007738:	40020c00 	.word	0x40020c00
 800773c:	40021000 	.word	0x40021000
 8007740:	40021400 	.word	0x40021400
 8007744:	40021800 	.word	0x40021800
 8007748:	40013c00 	.word	0x40013c00

0800774c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	807b      	strh	r3, [r7, #2]
 8007758:	4613      	mov	r3, r2
 800775a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800775c:	787b      	ldrb	r3, [r7, #1]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007762:	887a      	ldrh	r2, [r7, #2]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007768:	e003      	b.n	8007772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800776a:	887b      	ldrh	r3, [r7, #2]
 800776c:	041a      	lsls	r2, r3, #16
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	619a      	str	r2, [r3, #24]
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800778a:	4b08      	ldr	r3, [pc, #32]	@ (80077ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	4013      	ands	r3, r2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007796:	4a05      	ldr	r2, [pc, #20]	@ (80077ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fc fb8a 	bl	8003eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40013c00 	.word	0x40013c00

080077b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e12b      	b.n	8007a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fd fe2e 	bl	8005438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2224      	movs	r2, #36	@ 0x24
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007814:	f002 ff86 	bl	800a724 <HAL_RCC_GetPCLK1Freq>
 8007818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	4a81      	ldr	r2, [pc, #516]	@ (8007a24 <HAL_I2C_Init+0x274>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d807      	bhi.n	8007834 <HAL_I2C_Init+0x84>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a80      	ldr	r2, [pc, #512]	@ (8007a28 <HAL_I2C_Init+0x278>)
 8007828:	4293      	cmp	r3, r2
 800782a:	bf94      	ite	ls
 800782c:	2301      	movls	r3, #1
 800782e:	2300      	movhi	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	e006      	b.n	8007842 <HAL_I2C_Init+0x92>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a7d      	ldr	r2, [pc, #500]	@ (8007a2c <HAL_I2C_Init+0x27c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	bf94      	ite	ls
 800783c:	2301      	movls	r3, #1
 800783e:	2300      	movhi	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e0e7      	b.n	8007a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a78      	ldr	r2, [pc, #480]	@ (8007a30 <HAL_I2C_Init+0x280>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	0c9b      	lsrs	r3, r3, #18
 8007854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4a6a      	ldr	r2, [pc, #424]	@ (8007a24 <HAL_I2C_Init+0x274>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d802      	bhi.n	8007884 <HAL_I2C_Init+0xd4>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3301      	adds	r3, #1
 8007882:	e009      	b.n	8007898 <HAL_I2C_Init+0xe8>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800788a:	fb02 f303 	mul.w	r3, r2, r3
 800788e:	4a69      	ldr	r2, [pc, #420]	@ (8007a34 <HAL_I2C_Init+0x284>)
 8007890:	fba2 2303 	umull	r2, r3, r2, r3
 8007894:	099b      	lsrs	r3, r3, #6
 8007896:	3301      	adds	r3, #1
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	430b      	orrs	r3, r1
 800789e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80078aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	495c      	ldr	r1, [pc, #368]	@ (8007a24 <HAL_I2C_Init+0x274>)
 80078b4:	428b      	cmp	r3, r1
 80078b6:	d819      	bhi.n	80078ec <HAL_I2C_Init+0x13c>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	1e59      	subs	r1, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078c6:	1c59      	adds	r1, r3, #1
 80078c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80078cc:	400b      	ands	r3, r1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_I2C_Init+0x138>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1e59      	subs	r1, r3, #1
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80078e0:	3301      	adds	r3, #1
 80078e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078e6:	e051      	b.n	800798c <HAL_I2C_Init+0x1dc>
 80078e8:	2304      	movs	r3, #4
 80078ea:	e04f      	b.n	800798c <HAL_I2C_Init+0x1dc>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d111      	bne.n	8007918 <HAL_I2C_Init+0x168>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	1e58      	subs	r0, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6859      	ldr	r1, [r3, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	440b      	add	r3, r1
 8007902:	fbb0 f3f3 	udiv	r3, r0, r3
 8007906:	3301      	adds	r3, #1
 8007908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800790c:	2b00      	cmp	r3, #0
 800790e:	bf0c      	ite	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	2300      	movne	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	e012      	b.n	800793e <HAL_I2C_Init+0x18e>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	1e58      	subs	r0, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6859      	ldr	r1, [r3, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	0099      	lsls	r1, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	fbb0 f3f3 	udiv	r3, r0, r3
 800792e:	3301      	adds	r3, #1
 8007930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007934:	2b00      	cmp	r3, #0
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_I2C_Init+0x196>
 8007942:	2301      	movs	r3, #1
 8007944:	e022      	b.n	800798c <HAL_I2C_Init+0x1dc>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10e      	bne.n	800796c <HAL_I2C_Init+0x1bc>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1e58      	subs	r0, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6859      	ldr	r1, [r3, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	440b      	add	r3, r1
 800795c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007960:	3301      	adds	r3, #1
 8007962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800796a:	e00f      	b.n	800798c <HAL_I2C_Init+0x1dc>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	1e58      	subs	r0, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6859      	ldr	r1, [r3, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	0099      	lsls	r1, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007982:	3301      	adds	r3, #1
 8007984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	6809      	ldr	r1, [r1, #0]
 8007990:	4313      	orrs	r3, r2
 8007992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80079ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6911      	ldr	r1, [r2, #16]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	68d2      	ldr	r2, [r2, #12]
 80079c6:	4311      	orrs	r1, r2
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6812      	ldr	r2, [r2, #0]
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695a      	ldr	r2, [r3, #20]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	000186a0 	.word	0x000186a0
 8007a28:	001e847f 	.word	0x001e847f
 8007a2c:	003d08ff 	.word	0x003d08ff
 8007a30:	431bde83 	.word	0x431bde83
 8007a34:	10624dd3 	.word	0x10624dd3

08007a38 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e021      	b.n	8007a8e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2224      	movs	r2, #36	@ 0x24
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fd fdc2 	bl	80055ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa8:	2b80      	cmp	r3, #128	@ 0x80
 8007aaa:	d103      	bne.n	8007ab4 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	611a      	str	r2, [r3, #16]
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	817b      	strh	r3, [r7, #10]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	813b      	strh	r3, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ada:	f7fe f9b1 	bl	8005e40 <HAL_GetTick>
 8007ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	f040 80d9 	bne.w	8007ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2319      	movs	r3, #25
 8007af4:	2201      	movs	r2, #1
 8007af6:	496d      	ldr	r1, [pc, #436]	@ (8007cac <HAL_I2C_Mem_Write+0x1ec>)
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f002 fa9d 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b04:	2302      	movs	r3, #2
 8007b06:	e0cc      	b.n	8007ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_I2C_Mem_Write+0x56>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e0c5      	b.n	8007ca2 <HAL_I2C_Mem_Write+0x1e2>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d007      	beq.n	8007b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2221      	movs	r2, #33	@ 0x21
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2240      	movs	r2, #64	@ 0x40
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a3a      	ldr	r2, [r7, #32]
 8007b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a4d      	ldr	r2, [pc, #308]	@ (8007cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8007b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b7e:	88f8      	ldrh	r0, [r7, #6]
 8007b80:	893a      	ldrh	r2, [r7, #8]
 8007b82:	8979      	ldrh	r1, [r7, #10]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f001 ff10 	bl	80099b4 <I2C_RequestMemoryWrite>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d052      	beq.n	8007c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e081      	b.n	8007ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f002 fb62 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d107      	bne.n	8007bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e06b      	b.n	8007ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d11b      	bne.n	8007c40 <HAL_I2C_Mem_Write+0x180>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d017      	beq.n	8007c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	781a      	ldrb	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1aa      	bne.n	8007b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f002 fb55 	bl	800a2fc <I2C_WaitOnBTFFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00d      	beq.n	8007c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d107      	bne.n	8007c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e016      	b.n	8007ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e000      	b.n	8007ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ca0:	2302      	movs	r3, #2
  }
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	00100002 	.word	0x00100002
 8007cb0:	ffff0000 	.word	0xffff0000

08007cb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08c      	sub	sp, #48	@ 0x30
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	817b      	strh	r3, [r7, #10]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	813b      	strh	r3, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cce:	f7fe f8b7 	bl	8005e40 <HAL_GetTick>
 8007cd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	f040 8214 	bne.w	800810a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2319      	movs	r3, #25
 8007ce8:	2201      	movs	r2, #1
 8007cea:	497b      	ldr	r1, [pc, #492]	@ (8007ed8 <HAL_I2C_Mem_Read+0x224>)
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f002 f9a3 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e207      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_I2C_Mem_Read+0x56>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e200      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d007      	beq.n	8007d30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2222      	movs	r2, #34	@ 0x22
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2240      	movs	r2, #64	@ 0x40
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8007edc <HAL_I2C_Mem_Read+0x228>)
 8007d70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d72:	88f8      	ldrh	r0, [r7, #6]
 8007d74:	893a      	ldrh	r2, [r7, #8]
 8007d76:	8979      	ldrh	r1, [r7, #10]
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	4603      	mov	r3, r0
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f001 feac 	bl	8009ae0 <I2C_RequestMemoryRead>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e1bc      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d113      	bne.n	8007dc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	623b      	str	r3, [r7, #32]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	623b      	str	r3, [r7, #32]
 8007dae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e190      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d11b      	bne.n	8007e02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	61fb      	str	r3, [r7, #28]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	61fb      	str	r3, [r7, #28]
 8007dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e170      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d11b      	bne.n	8007e42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	e150      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e58:	e144      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	f200 80f1 	bhi.w	8008046 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d123      	bne.n	8007eb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f002 fabd 	bl	800a3f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e145      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007eb2:	e117      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d14e      	bne.n	8007f5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4906      	ldr	r1, [pc, #24]	@ (8007ee0 <HAL_I2C_Mem_Read+0x22c>)
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f002 f8b6 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e11a      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
 8007ed6:	bf00      	nop
 8007ed8:	00100002 	.word	0x00100002
 8007edc:	ffff0000 	.word	0xffff0000
 8007ee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f58:	e0c4      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	2200      	movs	r2, #0
 8007f62:	496c      	ldr	r1, [pc, #432]	@ (8008114 <HAL_I2C_Mem_Read+0x460>)
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f002 f867 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0cb      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4955      	ldr	r1, [pc, #340]	@ (8008114 <HAL_I2C_Mem_Read+0x460>)
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f002 f839 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e09d      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691a      	ldr	r2, [r3, #16]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800803a:	b29b      	uxth	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008044:	e04e      	b.n	80080e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f002 f9d0 	bl	800a3f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e058      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008076:	3b01      	subs	r3, #1
 8008078:	b29a      	uxth	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008082:	b29b      	uxth	r3, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d124      	bne.n	80080e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d107      	bne.n	80080b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f47f aeb6 	bne.w	8007e5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	e000      	b.n	800810c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800810a:	2302      	movs	r3, #2
  }
}
 800810c:	4618      	mov	r0, r3
 800810e:	3728      	adds	r7, #40	@ 0x28
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	00010004 	.word	0x00010004

08008118 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08c      	sub	sp, #48	@ 0x30
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	461a      	mov	r2, r3
 8008126:	4603      	mov	r3, r0
 8008128:	817b      	strh	r3, [r7, #10]
 800812a:	460b      	mov	r3, r1
 800812c:	813b      	strh	r3, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008132:	f7fd fe85 	bl	8005e40 <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b20      	cmp	r3, #32
 8008146:	f040 8172 	bne.w	800842e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800814a:	4b93      	ldr	r3, [pc, #588]	@ (8008398 <HAL_I2C_Mem_Read_DMA+0x280>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	08db      	lsrs	r3, r3, #3
 8008150:	4a92      	ldr	r2, [pc, #584]	@ (800839c <HAL_I2C_Mem_Read_DMA+0x284>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	0a1a      	lsrs	r2, r3, #8
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009a      	lsls	r2, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	3b01      	subs	r3, #1
 8008168:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d112      	bne.n	8008196 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	f043 0220 	orr.w	r2, r3, #32
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
 8008194:	e14c      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d0df      	beq.n	8008164 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d101      	bne.n	80081b2 <HAL_I2C_Mem_Read_DMA+0x9a>
 80081ae:	2302      	movs	r3, #2
 80081b0:	e13e      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d007      	beq.n	80081d8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2222      	movs	r2, #34	@ 0x22
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2240      	movs	r2, #64	@ 0x40
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4a62      	ldr	r2, [pc, #392]	@ (80083a0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8008218:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800821a:	897a      	ldrh	r2, [r7, #10]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8008220:	893a      	ldrh	r2, [r7, #8]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008226:	88fa      	ldrh	r2, [r7, #6]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80cc 	beq.w	80083d4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d02d      	beq.n	80082a0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	4a56      	ldr	r2, [pc, #344]	@ (80083a4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800824a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	4a55      	ldr	r2, [pc, #340]	@ (80083a8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8008252:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	2200      	movs	r2, #0
 800825a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	2200      	movs	r2, #0
 8008262:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008268:	2200      	movs	r2, #0
 800826a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008270:	2200      	movs	r2, #0
 8008272:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3310      	adds	r3, #16
 800827e:	4619      	mov	r1, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008284:	461a      	mov	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828a:	f7fe fc69 	bl	8006b60 <HAL_DMA_Start_IT>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 8087 	bne.w	80083ac <HAL_I2C_Mem_Read_DMA+0x294>
 800829e:	e013      	b.n	80082c8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e0b3      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80082c8:	88f8      	ldrh	r0, [r7, #6]
 80082ca:	893a      	ldrh	r2, [r7, #8]
 80082cc:	8979      	ldrh	r1, [r7, #10]
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2323      	movs	r3, #35	@ 0x23
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4603      	mov	r3, r0
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 fc01 	bl	8009ae0 <I2C_RequestMemoryRead>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d023      	beq.n	800832c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fd01 	bl	8006cf0 <HAL_DMA_Abort_IT>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	2200      	movs	r2, #0
 80082fa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800830a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0201 	bic.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e081      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008330:	2b01      	cmp	r3, #1
 8008332:	d108      	bne.n	8008346 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e007      	b.n	8008356 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008354:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008382:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008392:	605a      	str	r2, [r3, #4]
 8008394:	e049      	b.n	800842a <HAL_I2C_Mem_Read_DMA+0x312>
 8008396:	bf00      	nop
 8008398:	20000034 	.word	0x20000034
 800839c:	14f8b589 	.word	0x14f8b589
 80083a0:	ffff0000 	.word	0xffff0000
 80083a4:	08009cb1 	.word	0x08009cb1
 80083a8:	08009e6f 	.word	0x08009e6f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c0:	f043 0210 	orr.w	r2, r3, #16
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e02d      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80083d4:	88f8      	ldrh	r0, [r7, #6]
 80083d6:	893a      	ldrh	r2, [r7, #8]
 80083d8:	8979      	ldrh	r1, [r7, #10]
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	2323      	movs	r3, #35	@ 0x23
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4603      	mov	r3, r0
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f001 fb7b 	bl	8009ae0 <I2C_RequestMemoryRead>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e01d      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008418:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e000      	b.n	8008430 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800842e:	2302      	movs	r3, #2
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3728      	adds	r7, #40	@ 0x28
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008458:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008460:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b10      	cmp	r3, #16
 8008466:	d003      	beq.n	8008470 <HAL_I2C_EV_IRQHandler+0x38>
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	2b40      	cmp	r3, #64	@ 0x40
 800846c:	f040 80b1 	bne.w	80085d2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008490:	d003      	beq.n	800849a <HAL_I2C_EV_IRQHandler+0x62>
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008498:	d101      	bne.n	800849e <HAL_I2C_EV_IRQHandler+0x66>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <HAL_I2C_EV_IRQHandler+0x68>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f000 8114 	beq.w	80086ce <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <HAL_I2C_EV_IRQHandler+0x90>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d006      	beq.n	80084c8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f002 f824 	bl	800a508 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fccd 	bl	8008e60 <I2C_Master_SB>
 80084c6:	e083      	b.n	80085d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <HAL_I2C_EV_IRQHandler+0xac>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fd45 	bl	8008f6c <I2C_Master_ADD10>
 80084e2:	e075      	b.n	80085d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <HAL_I2C_EV_IRQHandler+0xc8>
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fd61 	bl	8008fc0 <I2C_Master_ADDR>
 80084fe:	e067      	b.n	80085d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d036      	beq.n	8008578 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008518:	f000 80db 	beq.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <HAL_I2C_EV_IRQHandler+0x10a>
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_I2C_EV_IRQHandler+0x10a>
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f92d 	bl	800879a <I2C_MasterTransmit_TXE>
 8008540:	e046      	b.n	80085d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80c2 	beq.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80bc 	beq.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b21      	cmp	r3, #33	@ 0x21
 800855e:	d103      	bne.n	8008568 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f9b6 	bl	80088d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008566:	e0b4      	b.n	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b40      	cmp	r3, #64	@ 0x40
 800856c:	f040 80b1 	bne.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fa24 	bl	80089be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008576:	e0ac      	b.n	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008586:	f000 80a4 	beq.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00d      	beq.n	80085b0 <HAL_I2C_EV_IRQHandler+0x178>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <HAL_I2C_EV_IRQHandler+0x178>
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 faa0 	bl	8008aee <I2C_MasterReceive_RXNE>
 80085ae:	e00f      	b.n	80085d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 808b 	beq.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8085 	beq.w	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fb58 	bl	8008c7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085ce:	e080      	b.n	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80085d0:	e07f      	b.n	80086d2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	61fb      	str	r3, [r7, #28]
 80085e2:	e007      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d011      	beq.n	8008622 <HAL_I2C_EV_IRQHandler+0x1ea>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008618:	69b9      	ldr	r1, [r7, #24]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 ff1f 	bl	800945e <I2C_Slave_ADDR>
 8008620:	e05a      	b.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_I2C_EV_IRQHandler+0x206>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 ff5a 	bl	80094f0 <I2C_Slave_STOPF>
 800863c:	e04c      	b.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b21      	cmp	r3, #33	@ 0x21
 8008642:	d002      	beq.n	800864a <HAL_I2C_EV_IRQHandler+0x212>
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b29      	cmp	r3, #41	@ 0x29
 8008648:	d120      	bne.n	800868c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00d      	beq.n	8008670 <HAL_I2C_EV_IRQHandler+0x238>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800865a:	2b00      	cmp	r3, #0
 800865c:	d008      	beq.n	8008670 <HAL_I2C_EV_IRQHandler+0x238>
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fe3a 	bl	80092e2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800866e:	e032      	b.n	80086d6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d02d      	beq.n	80086d6 <HAL_I2C_EV_IRQHandler+0x29e>
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008680:	2b00      	cmp	r3, #0
 8008682:	d028      	beq.n	80086d6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fe69 	bl	800935c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800868a:	e024      	b.n	80086d6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00d      	beq.n	80086b2 <HAL_I2C_EV_IRQHandler+0x27a>
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800869c:	2b00      	cmp	r3, #0
 800869e:	d008      	beq.n	80086b2 <HAL_I2C_EV_IRQHandler+0x27a>
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fe77 	bl	800939e <I2C_SlaveReceive_RXNE>
 80086b0:	e012      	b.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00d      	beq.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fea7 	bl	800941a <I2C_SlaveReceive_BTF>
 80086cc:	e004      	b.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80086ce:	bf00      	nop
 80086d0:	e002      	b.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086d2:	bf00      	nop
 80086d4:	e000      	b.n	80086d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80086d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80086d8:	3720      	adds	r7, #32
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	70fb      	strb	r3, [r7, #3]
 800873a:	4613      	mov	r3, r2
 800873c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d150      	bne.n	8008862 <I2C_MasterTransmit_TXE+0xc8>
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b21      	cmp	r3, #33	@ 0x21
 80087c4:	d14d      	bne.n	8008862 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d01d      	beq.n	8008808 <I2C_MasterTransmit_TXE+0x6e>
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d01a      	beq.n	8008808 <I2C_MasterTransmit_TXE+0x6e>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087d8:	d016      	beq.n	8008808 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80087e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2211      	movs	r2, #17
 80087ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ff6c 	bl	80086de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008806:	e060      	b.n	80088ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008816:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008826:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b40      	cmp	r3, #64	@ 0x40
 8008840:	d107      	bne.n	8008852 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff87 	bl	800875e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008850:	e03b      	b.n	80088ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff ff3f 	bl	80086de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008860:	e033      	b.n	80088ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b21      	cmp	r3, #33	@ 0x21
 8008866:	d005      	beq.n	8008874 <I2C_MasterTransmit_TXE+0xda>
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b40      	cmp	r3, #64	@ 0x40
 800886c:	d12d      	bne.n	80088ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b22      	cmp	r3, #34	@ 0x22
 8008872:	d12a      	bne.n	80088ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d108      	bne.n	8008890 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800888c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800888e:	e01c      	b.n	80088ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b40      	cmp	r3, #64	@ 0x40
 800889a:	d103      	bne.n	80088a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f88e 	bl	80089be <I2C_MemoryTransmit_TXE_BTF>
}
 80088a2:	e012      	b.n	80088ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	781a      	ldrb	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80088c8:	e7ff      	b.n	80088ca <I2C_MasterTransmit_TXE+0x130>
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b21      	cmp	r3, #33	@ 0x21
 80088ea:	d164      	bne.n	80089b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d012      	beq.n	800891c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008910:	b29b      	uxth	r3, r3
 8008912:	3b01      	subs	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800891a:	e04c      	b.n	80089b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b08      	cmp	r3, #8
 8008920:	d01d      	beq.n	800895e <I2C_MasterTransmit_BTF+0x8c>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2b20      	cmp	r3, #32
 8008926:	d01a      	beq.n	800895e <I2C_MasterTransmit_BTF+0x8c>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800892e:	d016      	beq.n	800895e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800893e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2211      	movs	r2, #17
 8008944:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fec1 	bl	80086de <HAL_I2C_MasterTxCpltCallback>
}
 800895c:	e02b      	b.n	80089b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800896c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800897c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b40      	cmp	r3, #64	@ 0x40
 8008996:	d107      	bne.n	80089a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff fedc 	bl	800875e <HAL_I2C_MemTxCpltCallback>
}
 80089a6:	e006      	b.n	80089b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fe94 	bl	80086de <HAL_I2C_MasterTxCpltCallback>
}
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d11d      	bne.n	8008a12 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d10b      	bne.n	80089f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ee:	1c9a      	adds	r2, r3, #2
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80089f4:	e077      	b.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	121b      	asrs	r3, r3, #8
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008a10:	e069      	b.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d10b      	bne.n	8008a32 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008a30:	e059      	b.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d152      	bne.n	8008ae0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	2b22      	cmp	r3, #34	@ 0x22
 8008a3e:	d10d      	bne.n	8008a5c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a4e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008a5a:	e044      	b.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d015      	beq.n	8008a92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b21      	cmp	r3, #33	@ 0x21
 8008a6a:	d112      	bne.n	8008a92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008a90:	e029      	b.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d124      	bne.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b21      	cmp	r3, #33	@ 0x21
 8008aa0:	d121      	bne.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ab0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ac0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff fe40 	bl	800875e <HAL_I2C_MemTxCpltCallback>
}
 8008ade:	e002      	b.n	8008ae6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7fe ffd8 	bl	8007a96 <I2C_Flush_DR>
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b22      	cmp	r3, #34	@ 0x22
 8008b00:	f040 80b9 	bne.w	8008c76 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b08:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d921      	bls.n	8008b5c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b22:	b2d2      	uxtb	r2, r2
 8008b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	f040 8096 	bne.w	8008c76 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008b5a:	e08c      	b.n	8008c76 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d07f      	beq.n	8008c64 <I2C_MasterReceive_RXNE+0x176>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d002      	beq.n	8008b70 <I2C_MasterReceive_RXNE+0x82>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d179      	bne.n	8008c64 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 fc0b 	bl	800a38c <I2C_WaitOnSTOPRequestThroughIT>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d14c      	bne.n	8008c16 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008b9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691a      	ldr	r2, [r3, #16]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b40      	cmp	r3, #64	@ 0x40
 8008bd4:	d10a      	bne.n	8008bec <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7fb f9c3 	bl	8003f70 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008bea:	e044      	b.n	8008c76 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d002      	beq.n	8008c00 <I2C_MasterReceive_RXNE+0x112>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	d103      	bne.n	8008c08 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c06:	e002      	b.n	8008c0e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2212      	movs	r2, #18
 8008c0c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fd6f 	bl	80086f2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008c14:	e02f      	b.n	8008c76 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fd88 	bl	8008772 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008c62:	e008      	b.n	8008c76 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c72:	605a      	str	r2, [r3, #4]
}
 8008c74:	e7ff      	b.n	8008c76 <I2C_MasterReceive_RXNE+0x188>
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d11b      	bne.n	8008cce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ca4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008ccc:	e0c4      	b.n	8008e58 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d129      	bne.n	8008d2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ce6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d00a      	beq.n	8008d04 <I2C_MasterReceive_BTF+0x86>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d007      	beq.n	8008d04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008d2a:	e095      	b.n	8008e58 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d17d      	bne.n	8008e32 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d002      	beq.n	8008d42 <I2C_MasterReceive_BTF+0xc4>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d108      	bne.n	8008d54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e016      	b.n	8008d82 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d002      	beq.n	8008d60 <I2C_MasterReceive_BTF+0xe2>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d108      	bne.n	8008d72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	e007      	b.n	8008d82 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691a      	ldr	r2, [r3, #16]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691a      	ldr	r2, [r3, #16]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008ddc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d10a      	bne.n	8008e08 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7fb f8b5 	bl	8003f70 <HAL_I2C_MemRxCpltCallback>
}
 8008e06:	e027      	b.n	8008e58 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d002      	beq.n	8008e1c <I2C_MasterReceive_BTF+0x19e>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d103      	bne.n	8008e24 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e22:	e002      	b.n	8008e2a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2212      	movs	r2, #18
 8008e28:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fc61 	bl	80086f2 <HAL_I2C_MasterRxCpltCallback>
}
 8008e30:	e012      	b.n	8008e58 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b40      	cmp	r3, #64	@ 0x40
 8008e72:	d117      	bne.n	8008ea4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d109      	bne.n	8008e90 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008e8c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008e8e:	e067      	b.n	8008f60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f043 0301 	orr.w	r3, r3, #1
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	611a      	str	r2, [r3, #16]
}
 8008ea2:	e05d      	b.n	8008f60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eac:	d133      	bne.n	8008f16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b21      	cmp	r3, #33	@ 0x21
 8008eb8:	d109      	bne.n	8008ece <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008eca:	611a      	str	r2, [r3, #16]
 8008ecc:	e008      	b.n	8008ee0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f043 0301 	orr.w	r3, r3, #1
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d004      	beq.n	8008ef2 <I2C_Master_SB+0x92>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d108      	bne.n	8008f04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d032      	beq.n	8008f60 <I2C_Master_SB+0x100>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d02d      	beq.n	8008f60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f12:	605a      	str	r2, [r3, #4]
}
 8008f14:	e024      	b.n	8008f60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10e      	bne.n	8008f3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	11db      	asrs	r3, r3, #7
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f003 0306 	and.w	r3, r3, #6
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f063 030f 	orn	r3, r3, #15
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	611a      	str	r2, [r3, #16]
}
 8008f3a:	e011      	b.n	8008f60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d10d      	bne.n	8008f60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	11db      	asrs	r3, r3, #7
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0306 	and.w	r3, r3, #6
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f063 030e 	orn	r3, r3, #14
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	611a      	str	r2, [r3, #16]
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <I2C_Master_ADD10+0x26>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d108      	bne.n	8008fa4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <I2C_Master_ADD10+0x48>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d007      	beq.n	8008fb4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fb2:	605a      	str	r2, [r3, #4]
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b091      	sub	sp, #68	@ 0x44
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b22      	cmp	r3, #34	@ 0x22
 8008fe8:	f040 8169 	bne.w	80092be <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10f      	bne.n	8009014 <I2C_Master_ADDR+0x54>
 8008ff4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ff8:	2b40      	cmp	r3, #64	@ 0x40
 8008ffa:	d10b      	bne.n	8009014 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	e160      	b.n	80092d6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009018:	2b00      	cmp	r3, #0
 800901a:	d11d      	bne.n	8009058 <I2C_Master_ADDR+0x98>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009024:	d118      	bne.n	8009058 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009026:	2300      	movs	r3, #0
 8009028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800904a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	651a      	str	r2, [r3, #80]	@ 0x50
 8009056:	e13e      	b.n	80092d6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800905c:	b29b      	uxth	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d113      	bne.n	800908a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009062:	2300      	movs	r3, #0
 8009064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009076:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e115      	b.n	80092b6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	f040 808a 	bne.w	80091aa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800909c:	d137      	bne.n	800910e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090bc:	d113      	bne.n	80090e6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090cc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	e0e7      	b.n	80092b6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090e6:	2300      	movs	r3, #0
 80090e8:	623b      	str	r3, [r7, #32]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	623b      	str	r3, [r7, #32]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	623b      	str	r3, [r7, #32]
 80090fa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	e0d3      	b.n	80092b6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800910e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009110:	2b08      	cmp	r3, #8
 8009112:	d02e      	beq.n	8009172 <I2C_Master_ADDR+0x1b2>
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	2b20      	cmp	r3, #32
 8009118:	d02b      	beq.n	8009172 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800911a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911c:	2b12      	cmp	r3, #18
 800911e:	d102      	bne.n	8009126 <I2C_Master_ADDR+0x166>
 8009120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009122:	2b01      	cmp	r3, #1
 8009124:	d125      	bne.n	8009172 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	2b04      	cmp	r3, #4
 800912a:	d00e      	beq.n	800914a <I2C_Master_ADDR+0x18a>
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	2b02      	cmp	r3, #2
 8009130:	d00b      	beq.n	800914a <I2C_Master_ADDR+0x18a>
 8009132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009134:	2b10      	cmp	r3, #16
 8009136:	d008      	beq.n	800914a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e007      	b.n	800915a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009158:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800915a:	2300      	movs	r3, #0
 800915c:	61fb      	str	r3, [r7, #28]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	e0a1      	b.n	80092b6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009180:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009182:	2300      	movs	r3, #0
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	e085      	b.n	80092b6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d14d      	bne.n	8009250 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d016      	beq.n	80091e8 <I2C_Master_ADDR+0x228>
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d013      	beq.n	80091e8 <I2C_Master_ADDR+0x228>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d010      	beq.n	80091e8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091d4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	e007      	b.n	80091f8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091f6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009206:	d117      	bne.n	8009238 <I2C_Master_ADDR+0x278>
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800920e:	d00b      	beq.n	8009228 <I2C_Master_ADDR+0x268>
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	2b01      	cmp	r3, #1
 8009214:	d008      	beq.n	8009228 <I2C_Master_ADDR+0x268>
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	2b08      	cmp	r3, #8
 800921a:	d005      	beq.n	8009228 <I2C_Master_ADDR+0x268>
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	2b10      	cmp	r3, #16
 8009220:	d002      	beq.n	8009228 <I2C_Master_ADDR+0x268>
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	2b20      	cmp	r3, #32
 8009226:	d107      	bne.n	8009238 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009236:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	617b      	str	r3, [r7, #20]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	e032      	b.n	80092b6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800925e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800926a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800926e:	d117      	bne.n	80092a0 <I2C_Master_ADDR+0x2e0>
 8009270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009272:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009276:	d00b      	beq.n	8009290 <I2C_Master_ADDR+0x2d0>
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	2b01      	cmp	r3, #1
 800927c:	d008      	beq.n	8009290 <I2C_Master_ADDR+0x2d0>
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	2b08      	cmp	r3, #8
 8009282:	d005      	beq.n	8009290 <I2C_Master_ADDR+0x2d0>
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	2b10      	cmp	r3, #16
 8009288:	d002      	beq.n	8009290 <I2C_Master_ADDR+0x2d0>
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	2b20      	cmp	r3, #32
 800928e:	d107      	bne.n	80092a0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800929e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80092bc:	e00b      	b.n	80092d6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	68fb      	ldr	r3, [r7, #12]
}
 80092d4:	e7ff      	b.n	80092d6 <I2C_Master_ADDR+0x316>
 80092d6:	bf00      	nop
 80092d8:	3744      	adds	r7, #68	@ 0x44
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d02b      	beq.n	8009354 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009300:	781a      	ldrb	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009316:	b29b      	uxth	r3, r3
 8009318:	3b01      	subs	r3, #1
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009324:	b29b      	uxth	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d114      	bne.n	8009354 <I2C_SlaveTransmit_TXE+0x72>
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b29      	cmp	r3, #41	@ 0x29
 800932e:	d111      	bne.n	8009354 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800933e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2221      	movs	r2, #33	@ 0x21
 8009344:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2228      	movs	r2, #40	@ 0x28
 800934a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff f9d9 	bl	8008706 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d02c      	beq.n	8009412 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29a      	uxth	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d114      	bne.n	8009412 <I2C_SlaveReceive_RXNE+0x74>
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ec:	d111      	bne.n	8009412 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2222      	movs	r2, #34	@ 0x22
 8009402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2228      	movs	r2, #40	@ 0x28
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff f984 	bl	800871a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d012      	beq.n	8009452 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691a      	ldr	r2, [r3, #16]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009436:	b2d2      	uxtb	r2, r2
 8009438:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009478:	2b28      	cmp	r3, #40	@ 0x28
 800947a:	d125      	bne.n	80094c8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800948a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	81bb      	strh	r3, [r7, #12]
 80094aa:	e002      	b.n	80094b2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80094ba:	89ba      	ldrh	r2, [r7, #12]
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff f934 	bl	800872e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80094c6:	e00e      	b.n	80094e6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094c8:	2300      	movs	r3, #0
 80094ca:	60bb      	str	r3, [r7, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	60bb      	str	r3, [r7, #8]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800950e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009510:	2300      	movs	r3, #0
 8009512:	60bb      	str	r3, [r7, #8]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	60bb      	str	r3, [r7, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800953c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800954c:	d172      	bne.n	8009634 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b22      	cmp	r3, #34	@ 0x22
 8009552:	d002      	beq.n	800955a <I2C_Slave_STOPF+0x6a>
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2b2a      	cmp	r3, #42	@ 0x2a
 8009558:	d135      	bne.n	80095c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b29a      	uxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009576:	f043 0204 	orr.w	r2, r3, #4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800958c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd fd58 	bl	8007048 <HAL_DMA_GetState>
 8009598:	4603      	mov	r3, r0
 800959a:	2b01      	cmp	r3, #1
 800959c:	d049      	beq.n	8009632 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a2:	4a69      	ldr	r2, [pc, #420]	@ (8009748 <I2C_Slave_STOPF+0x258>)
 80095a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fd fba0 	bl	8006cf0 <HAL_DMA_Abort_IT>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d03d      	beq.n	8009632 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80095c0:	4610      	mov	r0, r2
 80095c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095c4:	e035      	b.n	8009632 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d8:	b29b      	uxth	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e2:	f043 0204 	orr.w	r2, r3, #4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fd fd22 	bl	8007048 <HAL_DMA_GetState>
 8009604:	4603      	mov	r3, r0
 8009606:	2b01      	cmp	r3, #1
 8009608:	d014      	beq.n	8009634 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960e:	4a4e      	ldr	r2, [pc, #312]	@ (8009748 <I2C_Slave_STOPF+0x258>)
 8009610:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009616:	4618      	mov	r0, r3
 8009618:	f7fd fb6a 	bl	8006cf0 <HAL_DMA_Abort_IT>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d008      	beq.n	8009634 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800962c:	4610      	mov	r0, r2
 800962e:	4798      	blx	r3
 8009630:	e000      	b.n	8009634 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009632:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d03e      	beq.n	80096bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b04      	cmp	r3, #4
 800964a:	d112      	bne.n	8009672 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800967c:	2b40      	cmp	r3, #64	@ 0x40
 800967e:	d112      	bne.n	80096a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	691a      	ldr	r2, [r3, #16]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b4:	f043 0204 	orr.w	r2, r3, #4
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f843 	bl	8009750 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80096ca:	e039      	b.n	8009740 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d0:	d109      	bne.n	80096e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2228      	movs	r2, #40	@ 0x28
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff f81a 	bl	800871a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b28      	cmp	r3, #40	@ 0x28
 80096f0:	d111      	bne.n	8009716 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a15      	ldr	r2, [pc, #84]	@ (800974c <I2C_Slave_STOPF+0x25c>)
 80096f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff f81b 	bl	800874a <HAL_I2C_ListenCpltCallback>
}
 8009714:	e014      	b.n	8009740 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971a:	2b22      	cmp	r3, #34	@ 0x22
 800971c:	d002      	beq.n	8009724 <I2C_Slave_STOPF+0x234>
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b22      	cmp	r3, #34	@ 0x22
 8009722:	d10d      	bne.n	8009740 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7fe ffed 	bl	800871a <HAL_I2C_SlaveRxCpltCallback>
}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	08009ee9 	.word	0x08009ee9
 800974c:	ffff0000 	.word	0xffff0000

08009750 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800975e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009766:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b10      	cmp	r3, #16
 800976c:	d002      	beq.n	8009774 <I2C_ITError+0x24>
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	2b40      	cmp	r3, #64	@ 0x40
 8009772:	d10a      	bne.n	800978a <I2C_ITError+0x3a>
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b22      	cmp	r3, #34	@ 0x22
 8009778:	d107      	bne.n	800978a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009788:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009790:	2b28      	cmp	r3, #40	@ 0x28
 8009792:	d107      	bne.n	80097a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2228      	movs	r2, #40	@ 0x28
 800979e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80097a2:	e015      	b.n	80097d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097b2:	d00a      	beq.n	80097ca <I2C_ITError+0x7a>
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	2b60      	cmp	r3, #96	@ 0x60
 80097b8:	d007      	beq.n	80097ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097de:	d162      	bne.n	80098a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d020      	beq.n	8009840 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009802:	4a6a      	ldr	r2, [pc, #424]	@ (80099ac <I2C_ITError+0x25c>)
 8009804:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980a:	4618      	mov	r0, r3
 800980c:	f7fd fa70 	bl	8006cf0 <HAL_DMA_Abort_IT>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8089 	beq.w	800992a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 0201 	bic.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2220      	movs	r2, #32
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800983a:	4610      	mov	r0, r2
 800983c:	4798      	blx	r3
 800983e:	e074      	b.n	800992a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009844:	4a59      	ldr	r2, [pc, #356]	@ (80099ac <I2C_ITError+0x25c>)
 8009846:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984c:	4618      	mov	r0, r3
 800984e:	f7fd fa4f 	bl	8006cf0 <HAL_DMA_Abort_IT>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d068      	beq.n	800992a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009862:	2b40      	cmp	r3, #64	@ 0x40
 8009864:	d10b      	bne.n	800987e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0201 	bic.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80098a0:	4610      	mov	r0, r2
 80098a2:	4798      	blx	r3
 80098a4:	e041      	b.n	800992a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b60      	cmp	r3, #96	@ 0x60
 80098b0:	d125      	bne.n	80098fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	d10b      	bne.n	80098e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7fe ff45 	bl	8008786 <HAL_I2C_AbortCpltCallback>
 80098fc:	e015      	b.n	800992a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009908:	2b40      	cmp	r3, #64	@ 0x40
 800990a:	d10b      	bne.n	8009924 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	691a      	ldr	r2, [r3, #16]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe ff24 	bl	8008772 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10e      	bne.n	8009958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009940:	2b00      	cmp	r3, #0
 8009942:	d109      	bne.n	8009958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009966:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800996e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b04      	cmp	r3, #4
 800997a:	d113      	bne.n	80099a4 <I2C_ITError+0x254>
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	2b28      	cmp	r3, #40	@ 0x28
 8009980:	d110      	bne.n	80099a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a0a      	ldr	r2, [pc, #40]	@ (80099b0 <I2C_ITError+0x260>)
 8009986:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fe fed3 	bl	800874a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	08009ee9 	.word	0x08009ee9
 80099b0:	ffff0000 	.word	0xffff0000

080099b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	461a      	mov	r2, r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	817b      	strh	r3, [r7, #10]
 80099c6:	460b      	mov	r3, r1
 80099c8:	813b      	strh	r3, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fb24 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00d      	beq.n	8009a12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a04:	d103      	bne.n	8009a0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e05f      	b.n	8009ad2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a12:	897b      	ldrh	r3, [r7, #10]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	461a      	mov	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	6a3a      	ldr	r2, [r7, #32]
 8009a26:	492d      	ldr	r1, [pc, #180]	@ (8009adc <I2C_RequestMemoryWrite+0x128>)
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fb7f 	bl	800a12c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e04c      	b.n	8009ad2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a50:	6a39      	ldr	r1, [r7, #32]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 fc0a 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00d      	beq.n	8009a7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d107      	bne.n	8009a76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e02b      	b.n	8009ad2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d105      	bne.n	8009a8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a80:	893b      	ldrh	r3, [r7, #8]
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	611a      	str	r2, [r3, #16]
 8009a8a:	e021      	b.n	8009ad0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a8c:	893b      	ldrh	r3, [r7, #8]
 8009a8e:	0a1b      	lsrs	r3, r3, #8
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a9c:	6a39      	ldr	r1, [r7, #32]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 fbe4 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00d      	beq.n	8009ac6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d107      	bne.n	8009ac2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e005      	b.n	8009ad2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ac6:	893b      	ldrh	r3, [r7, #8]
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	00010002 	.word	0x00010002

08009ae0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	4608      	mov	r0, r1
 8009aea:	4611      	mov	r1, r2
 8009aec:	461a      	mov	r2, r3
 8009aee:	4603      	mov	r3, r0
 8009af0:	817b      	strh	r3, [r7, #10]
 8009af2:	460b      	mov	r3, r1
 8009af4:	813b      	strh	r3, [r7, #8]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 fa86 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00d      	beq.n	8009b4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b40:	d103      	bne.n	8009b4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e0aa      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b4e:	897b      	ldrh	r3, [r7, #10]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	461a      	mov	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	6a3a      	ldr	r2, [r7, #32]
 8009b62:	4952      	ldr	r1, [pc, #328]	@ (8009cac <I2C_RequestMemoryRead+0x1cc>)
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fae1 	bl	800a12c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e097      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	617b      	str	r3, [r7, #20]
 8009b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b8c:	6a39      	ldr	r1, [r7, #32]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 fb6c 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00d      	beq.n	8009bb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d107      	bne.n	8009bb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e076      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bb6:	88fb      	ldrh	r3, [r7, #6]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d105      	bne.n	8009bc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bbc:	893b      	ldrh	r3, [r7, #8]
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	611a      	str	r2, [r3, #16]
 8009bc6:	e021      	b.n	8009c0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bc8:	893b      	ldrh	r3, [r7, #8]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bd8:	6a39      	ldr	r1, [r7, #32]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 fb46 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00d      	beq.n	8009c02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d107      	bne.n	8009bfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e050      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c02:	893b      	ldrh	r3, [r7, #8]
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c0e:	6a39      	ldr	r1, [r7, #32]
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 fb2b 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00d      	beq.n	8009c38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d107      	bne.n	8009c34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e035      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 f9ef 	bl	800a038 <I2C_WaitOnFlagUntilTimeout>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00d      	beq.n	8009c7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c6e:	d103      	bne.n	8009c78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e013      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c7c:	897b      	ldrh	r3, [r7, #10]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	f043 0301 	orr.w	r3, r3, #1
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	6a3a      	ldr	r2, [r7, #32]
 8009c90:	4906      	ldr	r1, [pc, #24]	@ (8009cac <I2C_RequestMemoryRead+0x1cc>)
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 fa4a 	bl	800a12c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	00010002 	.word	0x00010002

08009cb0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cbc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cc4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ccc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009ce2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d00:	2200      	movs	r2, #0
 8009d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009d04:	7cfb      	ldrb	r3, [r7, #19]
 8009d06:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8009d0a:	2b21      	cmp	r3, #33	@ 0x21
 8009d0c:	d007      	beq.n	8009d1e <I2C_DMAXferCplt+0x6e>
 8009d0e:	7cfb      	ldrb	r3, [r7, #19]
 8009d10:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8009d14:	2b22      	cmp	r3, #34	@ 0x22
 8009d16:	d131      	bne.n	8009d7c <I2C_DMAXferCplt+0xcc>
 8009d18:	7cbb      	ldrb	r3, [r7, #18]
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d12e      	bne.n	8009d7c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d2c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2200      	movs	r2, #0
 8009d32:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009d34:	7cfb      	ldrb	r3, [r7, #19]
 8009d36:	2b29      	cmp	r3, #41	@ 0x29
 8009d38:	d10a      	bne.n	8009d50 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2221      	movs	r2, #33	@ 0x21
 8009d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2228      	movs	r2, #40	@ 0x28
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d48:	6978      	ldr	r0, [r7, #20]
 8009d4a:	f7fe fcdc 	bl	8008706 <HAL_I2C_SlaveTxCpltCallback>
 8009d4e:	e00c      	b.n	8009d6a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009d50:	7cfb      	ldrb	r3, [r7, #19]
 8009d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d54:	d109      	bne.n	8009d6a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2222      	movs	r2, #34	@ 0x22
 8009d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2228      	movs	r2, #40	@ 0x28
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d64:	6978      	ldr	r0, [r7, #20]
 8009d66:	f7fe fcd8 	bl	800871a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009d78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009d7a:	e074      	b.n	8009e66 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d06e      	beq.n	8009e66 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d107      	bne.n	8009da2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009da0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009db0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009db8:	d009      	beq.n	8009dce <I2C_DMAXferCplt+0x11e>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d006      	beq.n	8009dce <I2C_DMAXferCplt+0x11e>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009dc6:	d002      	beq.n	8009dce <I2C_DMAXferCplt+0x11e>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	d107      	bne.n	8009dde <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ddc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009dec:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009dfc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2200      	movs	r2, #0
 8009e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f7fe fcb0 	bl	8008772 <HAL_I2C_ErrorCallback>
}
 8009e12:	e028      	b.n	8009e66 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b40      	cmp	r3, #64	@ 0x40
 8009e26:	d10a      	bne.n	8009e3e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2200      	movs	r2, #0
 8009e34:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009e36:	6978      	ldr	r0, [r7, #20]
 8009e38:	f7fa f89a 	bl	8003f70 <HAL_I2C_MemRxCpltCallback>
}
 8009e3c:	e013      	b.n	8009e66 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d002      	beq.n	8009e52 <I2C_DMAXferCplt+0x1a2>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d103      	bne.n	8009e5a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2200      	movs	r2, #0
 8009e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e58:	e002      	b.n	8009e60 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2212      	movs	r2, #18
 8009e5e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009e60:	6978      	ldr	r0, [r7, #20]
 8009e62:	f7fe fc46 	bl	80086f2 <HAL_I2C_MasterRxCpltCallback>
}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e88:	2200      	movs	r2, #0
 8009e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e98:	2200      	movs	r2, #0
 8009e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fd f8e1 	bl	8007064 <HAL_DMA_GetError>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d01b      	beq.n	8009ee0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009eb6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed2:	f043 0210 	orr.w	r2, r3, #16
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7fe fc49 	bl	8008772 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f02:	4b4b      	ldr	r3, [pc, #300]	@ (800a030 <I2C_DMAAbort+0x148>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	08db      	lsrs	r3, r3, #3
 8009f08:	4a4a      	ldr	r2, [pc, #296]	@ (800a034 <I2C_DMAAbort+0x14c>)
 8009f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0e:	0a1a      	lsrs	r2, r3, #8
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	00da      	lsls	r2, r3, #3
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f26:	f043 0220 	orr.w	r2, r3, #32
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009f2e:	e00a      	b.n	8009f46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f44:	d0ea      	beq.n	8009f1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f52:	2200      	movs	r2, #0
 8009f54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f62:	2200      	movs	r2, #0
 8009f64:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	2200      	movs	r2, #0
 8009f8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f98:	2200      	movs	r2, #0
 8009f9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 0201 	bic.w	r2, r2, #1
 8009faa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b60      	cmp	r3, #96	@ 0x60
 8009fb6:	d10e      	bne.n	8009fd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009fce:	6978      	ldr	r0, [r7, #20]
 8009fd0:	f7fe fbd9 	bl	8008786 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009fd4:	e027      	b.n	800a026 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009fd6:	7cfb      	ldrb	r3, [r7, #19]
 8009fd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009fdc:	2b28      	cmp	r3, #40	@ 0x28
 8009fde:	d117      	bne.n	800a010 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0201 	orr.w	r2, r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ffe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2228      	movs	r2, #40	@ 0x28
 800a00a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a00e:	e007      	b.n	800a020 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2220      	movs	r2, #32
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a020:	6978      	ldr	r0, [r7, #20]
 800a022:	f7fe fba6 	bl	8008772 <HAL_I2C_ErrorCallback>
}
 800a026:	bf00      	nop
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000034 	.word	0x20000034
 800a034:	14f8b589 	.word	0x14f8b589

0800a038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	603b      	str	r3, [r7, #0]
 800a044:	4613      	mov	r3, r2
 800a046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a048:	e048      	b.n	800a0dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a050:	d044      	beq.n	800a0dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a052:	f7fb fef5 	bl	8005e40 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d302      	bcc.n	800a068 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d139      	bne.n	800a0dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d10d      	bne.n	800a08e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	43da      	mvns	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	4013      	ands	r3, r2
 800a07e:	b29b      	uxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	bf0c      	ite	eq
 800a084:	2301      	moveq	r3, #1
 800a086:	2300      	movne	r3, #0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	e00c      	b.n	800a0a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	43da      	mvns	r2, r3
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4013      	ands	r3, r2
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bf0c      	ite	eq
 800a0a0:	2301      	moveq	r3, #1
 800a0a2:	2300      	movne	r3, #0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d116      	bne.n	800a0dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c8:	f043 0220 	orr.w	r2, r3, #32
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e023      	b.n	800a124 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	0c1b      	lsrs	r3, r3, #16
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d10d      	bne.n	800a102 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	43da      	mvns	r2, r3
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bf0c      	ite	eq
 800a0f8:	2301      	moveq	r3, #1
 800a0fa:	2300      	movne	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	e00c      	b.n	800a11c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	43da      	mvns	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	4013      	ands	r3, r2
 800a10e:	b29b      	uxth	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	bf0c      	ite	eq
 800a114:	2301      	moveq	r3, #1
 800a116:	2300      	movne	r3, #0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	461a      	mov	r2, r3
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d093      	beq.n	800a04a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a13a:	e071      	b.n	800a220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14a:	d123      	bne.n	800a194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a15a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2220      	movs	r2, #32
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a180:	f043 0204 	orr.w	r2, r3, #4
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e067      	b.n	800a264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d041      	beq.n	800a220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a19c:	f7fb fe50 	bl	8005e40 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d302      	bcc.n	800a1b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d136      	bne.n	800a220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	0c1b      	lsrs	r3, r3, #16
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d10c      	bne.n	800a1d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	43da      	mvns	r2, r3
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bf14      	ite	ne
 800a1ce:	2301      	movne	r3, #1
 800a1d0:	2300      	moveq	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	e00b      	b.n	800a1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	43da      	mvns	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bf14      	ite	ne
 800a1e8:	2301      	movne	r3, #1
 800a1ea:	2300      	moveq	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d016      	beq.n	800a220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a20c:	f043 0220 	orr.w	r2, r3, #32
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e021      	b.n	800a264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	0c1b      	lsrs	r3, r3, #16
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b01      	cmp	r3, #1
 800a228:	d10c      	bne.n	800a244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	43da      	mvns	r2, r3
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	4013      	ands	r3, r2
 800a236:	b29b      	uxth	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bf14      	ite	ne
 800a23c:	2301      	movne	r3, #1
 800a23e:	2300      	moveq	r3, #0
 800a240:	b2db      	uxtb	r3, r3
 800a242:	e00b      	b.n	800a25c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	43da      	mvns	r2, r3
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4013      	ands	r3, r2
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	bf14      	ite	ne
 800a256:	2301      	movne	r3, #1
 800a258:	2300      	moveq	r3, #0
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f47f af6d 	bne.w	800a13c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a278:	e034      	b.n	800a2e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 f915 	bl	800a4aa <I2C_IsAcknowledgeFailed>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e034      	b.n	800a2f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a290:	d028      	beq.n	800a2e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a292:	f7fb fdd5 	bl	8005e40 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d11d      	bne.n	800a2e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b2:	2b80      	cmp	r3, #128	@ 0x80
 800a2b4:	d016      	beq.n	800a2e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d0:	f043 0220 	orr.w	r2, r3, #32
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e007      	b.n	800a2f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ee:	2b80      	cmp	r3, #128	@ 0x80
 800a2f0:	d1c3      	bne.n	800a27a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a308:	e034      	b.n	800a374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f8cd 	bl	800a4aa <I2C_IsAcknowledgeFailed>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e034      	b.n	800a384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a320:	d028      	beq.n	800a374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a322:	f7fb fd8d 	bl	8005e40 <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d302      	bcc.n	800a338 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d11d      	bne.n	800a374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b04      	cmp	r3, #4
 800a344:	d016      	beq.n	800a374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2220      	movs	r2, #32
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a360:	f043 0220 	orr.w	r2, r3, #32
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e007      	b.n	800a384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	f003 0304 	and.w	r3, r3, #4
 800a37e:	2b04      	cmp	r3, #4
 800a380:	d1c3      	bne.n	800a30a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a398:	4b13      	ldr	r3, [pc, #76]	@ (800a3e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	08db      	lsrs	r3, r3, #3
 800a39e:	4a13      	ldr	r2, [pc, #76]	@ (800a3ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a4:	0a1a      	lsrs	r2, r3, #8
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d107      	bne.n	800a3ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3be:	f043 0220 	orr.w	r2, r3, #32
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e008      	b.n	800a3dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d8:	d0e9      	beq.n	800a3ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	20000034 	.word	0x20000034
 800a3ec:	14f8b589 	.word	0x14f8b589

0800a3f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3fc:	e049      	b.n	800a492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b10      	cmp	r3, #16
 800a40a:	d119      	bne.n	800a440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f06f 0210 	mvn.w	r2, #16
 800a414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e030      	b.n	800a4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a440:	f7fb fcfe 	bl	8005e40 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d302      	bcc.n	800a456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d11d      	bne.n	800a492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a460:	2b40      	cmp	r3, #64	@ 0x40
 800a462:	d016      	beq.n	800a492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2220      	movs	r2, #32
 800a46e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47e:	f043 0220 	orr.w	r2, r3, #32
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e007      	b.n	800a4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a49c:	2b40      	cmp	r3, #64	@ 0x40
 800a49e:	d1ae      	bne.n	800a3fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4c0:	d11b      	bne.n	800a4fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a4ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e6:	f043 0204 	orr.w	r2, r3, #4
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a514:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a518:	d103      	bne.n	800a522 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a520:	e007      	b.n	800a532 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a526:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a52a:	d102      	bne.n	800a532 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2208      	movs	r2, #8
 800a530:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e0cc      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a554:	4b68      	ldr	r3, [pc, #416]	@ (800a6f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d90c      	bls.n	800a57c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a562:	4b65      	ldr	r3, [pc, #404]	@ (800a6f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	b2d2      	uxtb	r2, r2
 800a568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a56a:	4b63      	ldr	r3, [pc, #396]	@ (800a6f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d001      	beq.n	800a57c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e0b8      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d020      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a594:	4b59      	ldr	r3, [pc, #356]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	4a58      	ldr	r2, [pc, #352]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a59a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a59e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0308 	and.w	r3, r3, #8
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5ac:	4b53      	ldr	r3, [pc, #332]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	4a52      	ldr	r2, [pc, #328]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a5b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a5b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5b8:	4b50      	ldr	r3, [pc, #320]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	494d      	ldr	r1, [pc, #308]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d044      	beq.n	800a660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d107      	bne.n	800a5ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5de:	4b47      	ldr	r3, [pc, #284]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d119      	bne.n	800a61e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e07f      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d003      	beq.n	800a5fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d107      	bne.n	800a60e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d109      	bne.n	800a61e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e06f      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a60e:	4b3b      	ldr	r3, [pc, #236]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e067      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a61e:	4b37      	ldr	r3, [pc, #220]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f023 0203 	bic.w	r2, r3, #3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	4934      	ldr	r1, [pc, #208]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a630:	f7fb fc06 	bl	8005e40 <HAL_GetTick>
 800a634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a636:	e00a      	b.n	800a64e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a638:	f7fb fc02 	bl	8005e40 <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a646:	4293      	cmp	r3, r2
 800a648:	d901      	bls.n	800a64e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e04f      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a64e:	4b2b      	ldr	r3, [pc, #172]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 020c 	and.w	r2, r3, #12
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d1eb      	bne.n	800a638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a660:	4b25      	ldr	r3, [pc, #148]	@ (800a6f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d20c      	bcs.n	800a688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a66e:	4b22      	ldr	r3, [pc, #136]	@ (800a6f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	b2d2      	uxtb	r2, r2
 800a674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a676:	4b20      	ldr	r3, [pc, #128]	@ (800a6f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 030f 	and.w	r3, r3, #15
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	429a      	cmp	r2, r3
 800a682:	d001      	beq.n	800a688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e032      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d008      	beq.n	800a6a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a694:	4b19      	ldr	r3, [pc, #100]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4916      	ldr	r1, [pc, #88]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0308 	and.w	r3, r3, #8
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6b2:	4b12      	ldr	r3, [pc, #72]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	490e      	ldr	r1, [pc, #56]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6c6:	f000 f855 	bl	800a774 <HAL_RCC_GetSysClockFreq>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a6fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	091b      	lsrs	r3, r3, #4
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	490a      	ldr	r1, [pc, #40]	@ (800a700 <HAL_RCC_ClockConfig+0x1c0>)
 800a6d8:	5ccb      	ldrb	r3, [r1, r3]
 800a6da:	fa22 f303 	lsr.w	r3, r2, r3
 800a6de:	4a09      	ldr	r2, [pc, #36]	@ (800a704 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a6e2:	4b09      	ldr	r3, [pc, #36]	@ (800a708 <HAL_RCC_ClockConfig+0x1c8>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fb fb66 	bl	8005db8 <HAL_InitTick>

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	40023c00 	.word	0x40023c00
 800a6fc:	40023800 	.word	0x40023800
 800a700:	08013470 	.word	0x08013470
 800a704:	20000034 	.word	0x20000034
 800a708:	20000038 	.word	0x20000038

0800a70c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a710:	4b03      	ldr	r3, [pc, #12]	@ (800a720 <HAL_RCC_GetHCLKFreq+0x14>)
 800a712:	681b      	ldr	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	20000034 	.word	0x20000034

0800a724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a728:	f7ff fff0 	bl	800a70c <HAL_RCC_GetHCLKFreq>
 800a72c:	4602      	mov	r2, r0
 800a72e:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	0a9b      	lsrs	r3, r3, #10
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	4903      	ldr	r1, [pc, #12]	@ (800a748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a73a:	5ccb      	ldrb	r3, [r1, r3]
 800a73c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a740:	4618      	mov	r0, r3
 800a742:	bd80      	pop	{r7, pc}
 800a744:	40023800 	.word	0x40023800
 800a748:	08013480 	.word	0x08013480

0800a74c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a750:	f7ff ffdc 	bl	800a70c <HAL_RCC_GetHCLKFreq>
 800a754:	4602      	mov	r2, r0
 800a756:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	0b5b      	lsrs	r3, r3, #13
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	4903      	ldr	r1, [pc, #12]	@ (800a770 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a762:	5ccb      	ldrb	r3, [r1, r3]
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a768:	4618      	mov	r0, r3
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	40023800 	.word	0x40023800
 800a770:	08013480 	.word	0x08013480

0800a774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a778:	b0ae      	sub	sp, #184	@ 0xb8
 800a77a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800a78e:	2300      	movs	r3, #0
 800a790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a79a:	4bcb      	ldr	r3, [pc, #812]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 030c 	and.w	r3, r3, #12
 800a7a2:	2b0c      	cmp	r3, #12
 800a7a4:	f200 8206 	bhi.w	800abb4 <HAL_RCC_GetSysClockFreq+0x440>
 800a7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ae:	bf00      	nop
 800a7b0:	0800a7e5 	.word	0x0800a7e5
 800a7b4:	0800abb5 	.word	0x0800abb5
 800a7b8:	0800abb5 	.word	0x0800abb5
 800a7bc:	0800abb5 	.word	0x0800abb5
 800a7c0:	0800a7ed 	.word	0x0800a7ed
 800a7c4:	0800abb5 	.word	0x0800abb5
 800a7c8:	0800abb5 	.word	0x0800abb5
 800a7cc:	0800abb5 	.word	0x0800abb5
 800a7d0:	0800a7f5 	.word	0x0800a7f5
 800a7d4:	0800abb5 	.word	0x0800abb5
 800a7d8:	0800abb5 	.word	0x0800abb5
 800a7dc:	0800abb5 	.word	0x0800abb5
 800a7e0:	0800a9e5 	.word	0x0800a9e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7e4:	4bb9      	ldr	r3, [pc, #740]	@ (800aacc <HAL_RCC_GetSysClockFreq+0x358>)
 800a7e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a7ea:	e1e7      	b.n	800abbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7ec:	4bb8      	ldr	r3, [pc, #736]	@ (800aad0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a7ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a7f2:	e1e3      	b.n	800abbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7f4:	4bb4      	ldr	r3, [pc, #720]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a800:	4bb1      	ldr	r3, [pc, #708]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d071      	beq.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a80c:	4bae      	ldr	r3, [pc, #696]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	099b      	lsrs	r3, r3, #6
 800a812:	2200      	movs	r2, #0
 800a814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a818:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a81c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a828:	2300      	movs	r3, #0
 800a82a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a82e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a832:	4622      	mov	r2, r4
 800a834:	462b      	mov	r3, r5
 800a836:	f04f 0000 	mov.w	r0, #0
 800a83a:	f04f 0100 	mov.w	r1, #0
 800a83e:	0159      	lsls	r1, r3, #5
 800a840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a844:	0150      	lsls	r0, r2, #5
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4621      	mov	r1, r4
 800a84c:	1a51      	subs	r1, r2, r1
 800a84e:	6439      	str	r1, [r7, #64]	@ 0x40
 800a850:	4629      	mov	r1, r5
 800a852:	eb63 0301 	sbc.w	r3, r3, r1
 800a856:	647b      	str	r3, [r7, #68]	@ 0x44
 800a858:	f04f 0200 	mov.w	r2, #0
 800a85c:	f04f 0300 	mov.w	r3, #0
 800a860:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800a864:	4649      	mov	r1, r9
 800a866:	018b      	lsls	r3, r1, #6
 800a868:	4641      	mov	r1, r8
 800a86a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a86e:	4641      	mov	r1, r8
 800a870:	018a      	lsls	r2, r1, #6
 800a872:	4641      	mov	r1, r8
 800a874:	1a51      	subs	r1, r2, r1
 800a876:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a878:	4649      	mov	r1, r9
 800a87a:	eb63 0301 	sbc.w	r3, r3, r1
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a880:	f04f 0200 	mov.w	r2, #0
 800a884:	f04f 0300 	mov.w	r3, #0
 800a888:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800a88c:	4649      	mov	r1, r9
 800a88e:	00cb      	lsls	r3, r1, #3
 800a890:	4641      	mov	r1, r8
 800a892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a896:	4641      	mov	r1, r8
 800a898:	00ca      	lsls	r2, r1, #3
 800a89a:	4610      	mov	r0, r2
 800a89c:	4619      	mov	r1, r3
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	189b      	adds	r3, r3, r2
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	460a      	mov	r2, r1
 800a8aa:	eb42 0303 	adc.w	r3, r2, r3
 800a8ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a8bc:	4629      	mov	r1, r5
 800a8be:	024b      	lsls	r3, r1, #9
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	024a      	lsls	r2, r1, #9
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a8dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800a8e0:	f7f6 fb50 	bl	8000f84 <__aeabi_uldivmod>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8ee:	e067      	b.n	800a9c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8f0:	4b75      	ldr	r3, [pc, #468]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	099b      	lsrs	r3, r3, #6
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800a900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a90a:	2300      	movs	r3, #0
 800a90c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a90e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800a912:	4622      	mov	r2, r4
 800a914:	462b      	mov	r3, r5
 800a916:	f04f 0000 	mov.w	r0, #0
 800a91a:	f04f 0100 	mov.w	r1, #0
 800a91e:	0159      	lsls	r1, r3, #5
 800a920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a924:	0150      	lsls	r0, r2, #5
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4621      	mov	r1, r4
 800a92c:	1a51      	subs	r1, r2, r1
 800a92e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a930:	4629      	mov	r1, r5
 800a932:	eb63 0301 	sbc.w	r3, r3, r1
 800a936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800a944:	4649      	mov	r1, r9
 800a946:	018b      	lsls	r3, r1, #6
 800a948:	4641      	mov	r1, r8
 800a94a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a94e:	4641      	mov	r1, r8
 800a950:	018a      	lsls	r2, r1, #6
 800a952:	4641      	mov	r1, r8
 800a954:	ebb2 0a01 	subs.w	sl, r2, r1
 800a958:	4649      	mov	r1, r9
 800a95a:	eb63 0b01 	sbc.w	fp, r3, r1
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a96a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a96e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a972:	4692      	mov	sl, r2
 800a974:	469b      	mov	fp, r3
 800a976:	4623      	mov	r3, r4
 800a978:	eb1a 0303 	adds.w	r3, sl, r3
 800a97c:	623b      	str	r3, [r7, #32]
 800a97e:	462b      	mov	r3, r5
 800a980:	eb4b 0303 	adc.w	r3, fp, r3
 800a984:	627b      	str	r3, [r7, #36]	@ 0x24
 800a986:	f04f 0200 	mov.w	r2, #0
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a992:	4629      	mov	r1, r5
 800a994:	028b      	lsls	r3, r1, #10
 800a996:	4621      	mov	r1, r4
 800a998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a99c:	4621      	mov	r1, r4
 800a99e:	028a      	lsls	r2, r1, #10
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9ac:	677a      	str	r2, [r7, #116]	@ 0x74
 800a9ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800a9b2:	f7f6 fae7 	bl	8000f84 <__aeabi_uldivmod>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a9c0:	4b41      	ldr	r3, [pc, #260]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	0c1b      	lsrs	r3, r3, #16
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800a9d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a9e2:	e0eb      	b.n	800abbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a9e4:	4b38      	ldr	r3, [pc, #224]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a9f0:	4b35      	ldr	r3, [pc, #212]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d06b      	beq.n	800aad4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9fc:	4b32      	ldr	r3, [pc, #200]	@ (800aac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	099b      	lsrs	r3, r3, #6
 800aa02:	2200      	movs	r2, #0
 800aa04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0e:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa10:	2300      	movs	r3, #0
 800aa12:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	f04f 0000 	mov.w	r0, #0
 800aa20:	f04f 0100 	mov.w	r1, #0
 800aa24:	0159      	lsls	r1, r3, #5
 800aa26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa2a:	0150      	lsls	r0, r2, #5
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4621      	mov	r1, r4
 800aa32:	1a51      	subs	r1, r2, r1
 800aa34:	61b9      	str	r1, [r7, #24]
 800aa36:	4629      	mov	r1, r5
 800aa38:	eb63 0301 	sbc.w	r3, r3, r1
 800aa3c:	61fb      	str	r3, [r7, #28]
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800aa4a:	4659      	mov	r1, fp
 800aa4c:	018b      	lsls	r3, r1, #6
 800aa4e:	4651      	mov	r1, sl
 800aa50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aa54:	4651      	mov	r1, sl
 800aa56:	018a      	lsls	r2, r1, #6
 800aa58:	4651      	mov	r1, sl
 800aa5a:	ebb2 0801 	subs.w	r8, r2, r1
 800aa5e:	4659      	mov	r1, fp
 800aa60:	eb63 0901 	sbc.w	r9, r3, r1
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	f04f 0300 	mov.w	r3, #0
 800aa6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa78:	4690      	mov	r8, r2
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	eb18 0303 	adds.w	r3, r8, r3
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	462b      	mov	r3, r5
 800aa86:	eb49 0303 	adc.w	r3, r9, r3
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	f04f 0200 	mov.w	r2, #0
 800aa90:	f04f 0300 	mov.w	r3, #0
 800aa94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800aa98:	4629      	mov	r1, r5
 800aa9a:	024b      	lsls	r3, r1, #9
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	024a      	lsls	r2, r1, #9
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaae:	2200      	movs	r2, #0
 800aab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aab2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800aab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aab8:	f7f6 fa64 	bl	8000f84 <__aeabi_uldivmod>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4613      	mov	r3, r2
 800aac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aac6:	e065      	b.n	800ab94 <HAL_RCC_GetSysClockFreq+0x420>
 800aac8:	40023800 	.word	0x40023800
 800aacc:	00f42400 	.word	0x00f42400
 800aad0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aad4:	4b3d      	ldr	r3, [pc, #244]	@ (800abcc <HAL_RCC_GetSysClockFreq+0x458>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	099b      	lsrs	r3, r3, #6
 800aada:	2200      	movs	r2, #0
 800aadc:	4618      	mov	r0, r3
 800aade:	4611      	mov	r1, r2
 800aae0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aae4:	653b      	str	r3, [r7, #80]	@ 0x50
 800aae6:	2300      	movs	r3, #0
 800aae8:	657b      	str	r3, [r7, #84]	@ 0x54
 800aaea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800aaee:	4642      	mov	r2, r8
 800aaf0:	464b      	mov	r3, r9
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f04f 0100 	mov.w	r1, #0
 800aafa:	0159      	lsls	r1, r3, #5
 800aafc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab00:	0150      	lsls	r0, r2, #5
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4641      	mov	r1, r8
 800ab08:	1a51      	subs	r1, r2, r1
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	eb63 0301 	sbc.w	r3, r3, r1
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ab20:	4659      	mov	r1, fp
 800ab22:	018b      	lsls	r3, r1, #6
 800ab24:	4651      	mov	r1, sl
 800ab26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ab2a:	4651      	mov	r1, sl
 800ab2c:	018a      	lsls	r2, r1, #6
 800ab2e:	4651      	mov	r1, sl
 800ab30:	1a54      	subs	r4, r2, r1
 800ab32:	4659      	mov	r1, fp
 800ab34:	eb63 0501 	sbc.w	r5, r3, r1
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	f04f 0300 	mov.w	r3, #0
 800ab40:	00eb      	lsls	r3, r5, #3
 800ab42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab46:	00e2      	lsls	r2, r4, #3
 800ab48:	4614      	mov	r4, r2
 800ab4a:	461d      	mov	r5, r3
 800ab4c:	4643      	mov	r3, r8
 800ab4e:	18e3      	adds	r3, r4, r3
 800ab50:	603b      	str	r3, [r7, #0]
 800ab52:	464b      	mov	r3, r9
 800ab54:	eb45 0303 	adc.w	r3, r5, r3
 800ab58:	607b      	str	r3, [r7, #4]
 800ab5a:	f04f 0200 	mov.w	r2, #0
 800ab5e:	f04f 0300 	mov.w	r3, #0
 800ab62:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab66:	4629      	mov	r1, r5
 800ab68:	028b      	lsls	r3, r1, #10
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab70:	4621      	mov	r1, r4
 800ab72:	028a      	lsls	r2, r1, #10
 800ab74:	4610      	mov	r0, r2
 800ab76:	4619      	mov	r1, r3
 800ab78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ab82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab86:	f7f6 f9fd 	bl	8000f84 <__aeabi_uldivmod>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4613      	mov	r3, r2
 800ab90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ab94:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <HAL_RCC_GetSysClockFreq+0x458>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	0f1b      	lsrs	r3, r3, #28
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800aba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800abb2:	e003      	b.n	800abbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800abb4:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <HAL_RCC_GetSysClockFreq+0x45c>)
 800abb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800abba:	bf00      	nop
    }
  }
  return sysclockfreq;
 800abbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	37b8      	adds	r7, #184	@ 0xb8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abca:	bf00      	nop
 800abcc:	40023800 	.word	0x40023800
 800abd0:	00f42400 	.word	0x00f42400

0800abd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e28d      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 8083 	beq.w	800acfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800abf4:	4b94      	ldr	r3, [pc, #592]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 030c 	and.w	r3, r3, #12
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d019      	beq.n	800ac34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ac00:	4b91      	ldr	r3, [pc, #580]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f003 030c 	and.w	r3, r3, #12
        || \
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d106      	bne.n	800ac1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ac0c:	4b8e      	ldr	r3, [pc, #568]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac18:	d00c      	beq.n	800ac34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac1a:	4b8b      	ldr	r3, [pc, #556]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ac22:	2b0c      	cmp	r3, #12
 800ac24:	d112      	bne.n	800ac4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac26:	4b88      	ldr	r3, [pc, #544]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac32:	d10b      	bne.n	800ac4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac34:	4b84      	ldr	r3, [pc, #528]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05b      	beq.n	800acf8 <HAL_RCC_OscConfig+0x124>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d157      	bne.n	800acf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e25a      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac54:	d106      	bne.n	800ac64 <HAL_RCC_OscConfig+0x90>
 800ac56:	4b7c      	ldr	r3, [pc, #496]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a7b      	ldr	r2, [pc, #492]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	e01d      	b.n	800aca0 <HAL_RCC_OscConfig+0xcc>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac6c:	d10c      	bne.n	800ac88 <HAL_RCC_OscConfig+0xb4>
 800ac6e:	4b76      	ldr	r3, [pc, #472]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a75      	ldr	r2, [pc, #468]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	4b73      	ldr	r3, [pc, #460]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a72      	ldr	r2, [pc, #456]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	e00b      	b.n	800aca0 <HAL_RCC_OscConfig+0xcc>
 800ac88:	4b6f      	ldr	r3, [pc, #444]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a6e      	ldr	r2, [pc, #440]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	4b6c      	ldr	r3, [pc, #432]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a6b      	ldr	r2, [pc, #428]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ac9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d013      	beq.n	800acd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca8:	f7fb f8ca 	bl	8005e40 <HAL_GetTick>
 800acac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acae:	e008      	b.n	800acc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acb0:	f7fb f8c6 	bl	8005e40 <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	2b64      	cmp	r3, #100	@ 0x64
 800acbc:	d901      	bls.n	800acc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e21f      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acc2:	4b61      	ldr	r3, [pc, #388]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0f0      	beq.n	800acb0 <HAL_RCC_OscConfig+0xdc>
 800acce:	e014      	b.n	800acfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd0:	f7fb f8b6 	bl	8005e40 <HAL_GetTick>
 800acd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acd8:	f7fb f8b2 	bl	8005e40 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b64      	cmp	r3, #100	@ 0x64
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e20b      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acea:	4b57      	ldr	r3, [pc, #348]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f0      	bne.n	800acd8 <HAL_RCC_OscConfig+0x104>
 800acf6:	e000      	b.n	800acfa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d06f      	beq.n	800ade6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ad06:	4b50      	ldr	r3, [pc, #320]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 030c 	and.w	r3, r3, #12
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d017      	beq.n	800ad42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ad12:	4b4d      	ldr	r3, [pc, #308]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f003 030c 	and.w	r3, r3, #12
        || \
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d105      	bne.n	800ad2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ad1e:	4b4a      	ldr	r3, [pc, #296]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00b      	beq.n	800ad42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad2a:	4b47      	ldr	r3, [pc, #284]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ad32:	2b0c      	cmp	r3, #12
 800ad34:	d11c      	bne.n	800ad70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad36:	4b44      	ldr	r3, [pc, #272]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d116      	bne.n	800ad70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad42:	4b41      	ldr	r3, [pc, #260]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <HAL_RCC_OscConfig+0x186>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d001      	beq.n	800ad5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e1d3      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad5a:	4b3b      	ldr	r3, [pc, #236]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	4937      	ldr	r1, [pc, #220]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad6e:	e03a      	b.n	800ade6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d020      	beq.n	800adba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad78:	4b34      	ldr	r3, [pc, #208]	@ (800ae4c <HAL_RCC_OscConfig+0x278>)
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7e:	f7fb f85f 	bl	8005e40 <HAL_GetTick>
 800ad82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad84:	e008      	b.n	800ad98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad86:	f7fb f85b 	bl	8005e40 <HAL_GetTick>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d901      	bls.n	800ad98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e1b4      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad98:	4b2b      	ldr	r3, [pc, #172]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0f0      	beq.n	800ad86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada4:	4b28      	ldr	r3, [pc, #160]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	4925      	ldr	r1, [pc, #148]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800adb4:	4313      	orrs	r3, r2
 800adb6:	600b      	str	r3, [r1, #0]
 800adb8:	e015      	b.n	800ade6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adba:	4b24      	ldr	r3, [pc, #144]	@ (800ae4c <HAL_RCC_OscConfig+0x278>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc0:	f7fb f83e 	bl	8005e40 <HAL_GetTick>
 800adc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adc6:	e008      	b.n	800adda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adc8:	f7fb f83a 	bl	8005e40 <HAL_GetTick>
 800adcc:	4602      	mov	r2, r0
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	2b02      	cmp	r3, #2
 800add4:	d901      	bls.n	800adda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	e193      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adda:	4b1b      	ldr	r3, [pc, #108]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f0      	bne.n	800adc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0308 	and.w	r3, r3, #8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d036      	beq.n	800ae60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d016      	beq.n	800ae28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adfa:	4b15      	ldr	r3, [pc, #84]	@ (800ae50 <HAL_RCC_OscConfig+0x27c>)
 800adfc:	2201      	movs	r2, #1
 800adfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae00:	f7fb f81e 	bl	8005e40 <HAL_GetTick>
 800ae04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae08:	f7fb f81a 	bl	8005e40 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e173      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae48 <HAL_RCC_OscConfig+0x274>)
 800ae1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0f0      	beq.n	800ae08 <HAL_RCC_OscConfig+0x234>
 800ae26:	e01b      	b.n	800ae60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae28:	4b09      	ldr	r3, [pc, #36]	@ (800ae50 <HAL_RCC_OscConfig+0x27c>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae2e:	f7fb f807 	bl	8005e40 <HAL_GetTick>
 800ae32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae34:	e00e      	b.n	800ae54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae36:	f7fb f803 	bl	8005e40 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d907      	bls.n	800ae54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e15c      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	42470000 	.word	0x42470000
 800ae50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae54:	4b8a      	ldr	r3, [pc, #552]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800ae56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1ea      	bne.n	800ae36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 8097 	beq.w	800af9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae72:	4b83      	ldr	r3, [pc, #524]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800ae74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10f      	bne.n	800ae9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	4b7f      	ldr	r3, [pc, #508]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800ae84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae86:	4a7e      	ldr	r2, [pc, #504]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800ae88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae8c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae8e:	4b7c      	ldr	r3, [pc, #496]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800ae90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae9e:	4b79      	ldr	r3, [pc, #484]	@ (800b084 <HAL_RCC_OscConfig+0x4b0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d118      	bne.n	800aedc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aeaa:	4b76      	ldr	r3, [pc, #472]	@ (800b084 <HAL_RCC_OscConfig+0x4b0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a75      	ldr	r2, [pc, #468]	@ (800b084 <HAL_RCC_OscConfig+0x4b0>)
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeb6:	f7fa ffc3 	bl	8005e40 <HAL_GetTick>
 800aeba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aebc:	e008      	b.n	800aed0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aebe:	f7fa ffbf 	bl	8005e40 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d901      	bls.n	800aed0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e118      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aed0:	4b6c      	ldr	r3, [pc, #432]	@ (800b084 <HAL_RCC_OscConfig+0x4b0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0f0      	beq.n	800aebe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d106      	bne.n	800aef2 <HAL_RCC_OscConfig+0x31e>
 800aee4:	4b66      	ldr	r3, [pc, #408]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800aee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee8:	4a65      	ldr	r2, [pc, #404]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	6713      	str	r3, [r2, #112]	@ 0x70
 800aef0:	e01c      	b.n	800af2c <HAL_RCC_OscConfig+0x358>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b05      	cmp	r3, #5
 800aef8:	d10c      	bne.n	800af14 <HAL_RCC_OscConfig+0x340>
 800aefa:	4b61      	ldr	r3, [pc, #388]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800aefc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aefe:	4a60      	ldr	r2, [pc, #384]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af00:	f043 0304 	orr.w	r3, r3, #4
 800af04:	6713      	str	r3, [r2, #112]	@ 0x70
 800af06:	4b5e      	ldr	r3, [pc, #376]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af0a:	4a5d      	ldr	r2, [pc, #372]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af0c:	f043 0301 	orr.w	r3, r3, #1
 800af10:	6713      	str	r3, [r2, #112]	@ 0x70
 800af12:	e00b      	b.n	800af2c <HAL_RCC_OscConfig+0x358>
 800af14:	4b5a      	ldr	r3, [pc, #360]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af18:	4a59      	ldr	r2, [pc, #356]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af1a:	f023 0301 	bic.w	r3, r3, #1
 800af1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800af20:	4b57      	ldr	r3, [pc, #348]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af24:	4a56      	ldr	r2, [pc, #344]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af26:	f023 0304 	bic.w	r3, r3, #4
 800af2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d015      	beq.n	800af60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af34:	f7fa ff84 	bl	8005e40 <HAL_GetTick>
 800af38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af3a:	e00a      	b.n	800af52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af3c:	f7fa ff80 	bl	8005e40 <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e0d7      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af52:	4b4b      	ldr	r3, [pc, #300]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0ee      	beq.n	800af3c <HAL_RCC_OscConfig+0x368>
 800af5e:	e014      	b.n	800af8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af60:	f7fa ff6e 	bl	8005e40 <HAL_GetTick>
 800af64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af66:	e00a      	b.n	800af7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af68:	f7fa ff6a 	bl	8005e40 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af76:	4293      	cmp	r3, r2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e0c1      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af7e:	4b40      	ldr	r3, [pc, #256]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1ee      	bne.n	800af68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af8a:	7dfb      	ldrb	r3, [r7, #23]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d105      	bne.n	800af9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af90:	4b3b      	ldr	r3, [pc, #236]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af94:	4a3a      	ldr	r2, [pc, #232]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800af96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 80ad 	beq.w	800b100 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800afa6:	4b36      	ldr	r3, [pc, #216]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f003 030c 	and.w	r3, r3, #12
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d060      	beq.n	800b074 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d145      	bne.n	800b046 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afba:	4b33      	ldr	r3, [pc, #204]	@ (800b088 <HAL_RCC_OscConfig+0x4b4>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc0:	f7fa ff3e 	bl	8005e40 <HAL_GetTick>
 800afc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afc6:	e008      	b.n	800afda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afc8:	f7fa ff3a 	bl	8005e40 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d901      	bls.n	800afda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e093      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afda:	4b29      	ldr	r3, [pc, #164]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1f0      	bne.n	800afc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69da      	ldr	r2, [r3, #28]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	431a      	orrs	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff4:	019b      	lsls	r3, r3, #6
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affc:	085b      	lsrs	r3, r3, #1
 800affe:	3b01      	subs	r3, #1
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	431a      	orrs	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b008:	061b      	lsls	r3, r3, #24
 800b00a:	431a      	orrs	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b010:	071b      	lsls	r3, r3, #28
 800b012:	491b      	ldr	r1, [pc, #108]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800b014:	4313      	orrs	r3, r2
 800b016:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b018:	4b1b      	ldr	r3, [pc, #108]	@ (800b088 <HAL_RCC_OscConfig+0x4b4>)
 800b01a:	2201      	movs	r2, #1
 800b01c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b01e:	f7fa ff0f 	bl	8005e40 <HAL_GetTick>
 800b022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b024:	e008      	b.n	800b038 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b026:	f7fa ff0b 	bl	8005e40 <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	2b02      	cmp	r3, #2
 800b032:	d901      	bls.n	800b038 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e064      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b038:	4b11      	ldr	r3, [pc, #68]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0f0      	beq.n	800b026 <HAL_RCC_OscConfig+0x452>
 800b044:	e05c      	b.n	800b100 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b046:	4b10      	ldr	r3, [pc, #64]	@ (800b088 <HAL_RCC_OscConfig+0x4b4>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b04c:	f7fa fef8 	bl	8005e40 <HAL_GetTick>
 800b050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b052:	e008      	b.n	800b066 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b054:	f7fa fef4 	bl	8005e40 <HAL_GetTick>
 800b058:	4602      	mov	r2, r0
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	1ad3      	subs	r3, r2, r3
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d901      	bls.n	800b066 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e04d      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b066:	4b06      	ldr	r3, [pc, #24]	@ (800b080 <HAL_RCC_OscConfig+0x4ac>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1f0      	bne.n	800b054 <HAL_RCC_OscConfig+0x480>
 800b072:	e045      	b.n	800b100 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d107      	bne.n	800b08c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e040      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
 800b080:	40023800 	.word	0x40023800
 800b084:	40007000 	.word	0x40007000
 800b088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b08c:	4b1f      	ldr	r3, [pc, #124]	@ (800b10c <HAL_RCC_OscConfig+0x538>)
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d030      	beq.n	800b0fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d129      	bne.n	800b0fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d122      	bne.n	800b0fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b0bc:	4013      	ands	r3, r2
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b0c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d119      	bne.n	800b0fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d2:	085b      	lsrs	r3, r3, #1
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d10f      	bne.n	800b0fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d107      	bne.n	800b0fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d001      	beq.n	800b100 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e000      	b.n	800b102 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	40023800 	.word	0x40023800

0800b110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e041      	b.n	800b1a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7fa faa0 	bl	800567c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f000 fa7e 	bl	800b650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d001      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e04e      	b.n	800b266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a23      	ldr	r2, [pc, #140]	@ (800b274 <HAL_TIM_Base_Start_IT+0xc4>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d022      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1f2:	d01d      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b278 <HAL_TIM_Base_Start_IT+0xc8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d018      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a1e      	ldr	r2, [pc, #120]	@ (800b27c <HAL_TIM_Base_Start_IT+0xcc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d013      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a1c      	ldr	r2, [pc, #112]	@ (800b280 <HAL_TIM_Base_Start_IT+0xd0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00e      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a1b      	ldr	r2, [pc, #108]	@ (800b284 <HAL_TIM_Base_Start_IT+0xd4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d009      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a19      	ldr	r2, [pc, #100]	@ (800b288 <HAL_TIM_Base_Start_IT+0xd8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d004      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a18      	ldr	r2, [pc, #96]	@ (800b28c <HAL_TIM_Base_Start_IT+0xdc>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d111      	bne.n	800b254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b06      	cmp	r3, #6
 800b240:	d010      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f042 0201 	orr.w	r2, r2, #1
 800b250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b252:	e007      	b.n	800b264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	40010000 	.word	0x40010000
 800b278:	40000400 	.word	0x40000400
 800b27c:	40000800 	.word	0x40000800
 800b280:	40000c00 	.word	0x40000c00
 800b284:	40010400 	.word	0x40010400
 800b288:	40014000 	.word	0x40014000
 800b28c:	40001800 	.word	0x40001800

0800b290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d020      	beq.n	800b2f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f003 0302 	and.w	r3, r3, #2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01b      	beq.n	800b2f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0202 	mvn.w	r2, #2
 800b2c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f999 	bl	800b612 <HAL_TIM_IC_CaptureCallback>
 800b2e0:	e005      	b.n	800b2ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f98b 	bl	800b5fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f99c 	bl	800b626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 0304 	and.w	r3, r3, #4
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d020      	beq.n	800b340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01b      	beq.n	800b340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f06f 0204 	mvn.w	r2, #4
 800b310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2202      	movs	r2, #2
 800b316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f973 	bl	800b612 <HAL_TIM_IC_CaptureCallback>
 800b32c:	e005      	b.n	800b33a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f965 	bl	800b5fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f976 	bl	800b626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f003 0308 	and.w	r3, r3, #8
 800b346:	2b00      	cmp	r3, #0
 800b348:	d020      	beq.n	800b38c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f003 0308 	and.w	r3, r3, #8
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01b      	beq.n	800b38c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0208 	mvn.w	r2, #8
 800b35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2204      	movs	r2, #4
 800b362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f94d 	bl	800b612 <HAL_TIM_IC_CaptureCallback>
 800b378:	e005      	b.n	800b386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f93f 	bl	800b5fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f950 	bl	800b626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	f003 0310 	and.w	r3, r3, #16
 800b392:	2b00      	cmp	r3, #0
 800b394:	d020      	beq.n	800b3d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f003 0310 	and.w	r3, r3, #16
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01b      	beq.n	800b3d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f06f 0210 	mvn.w	r2, #16
 800b3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2208      	movs	r2, #8
 800b3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f927 	bl	800b612 <HAL_TIM_IC_CaptureCallback>
 800b3c4:	e005      	b.n	800b3d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f919 	bl	800b5fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f92a 	bl	800b626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00c      	beq.n	800b3fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d007      	beq.n	800b3fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f06f 0201 	mvn.w	r2, #1
 800b3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7f8 fd76 	bl	8003ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00c      	beq.n	800b420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d007      	beq.n	800b420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fade 	bl	800b9dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00c      	beq.n	800b444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d007      	beq.n	800b444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b43c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f8fb 	bl	800b63a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	f003 0320 	and.w	r3, r3, #32
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00c      	beq.n	800b468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f003 0320 	and.w	r3, r3, #32
 800b454:	2b00      	cmp	r3, #0
 800b456:	d007      	beq.n	800b468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f06f 0220 	mvn.w	r2, #32
 800b460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fab0 	bl	800b9c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b468:	bf00      	nop
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <HAL_TIM_ConfigClockSource+0x1c>
 800b488:	2302      	movs	r3, #2
 800b48a:	e0b4      	b.n	800b5f6 <HAL_TIM_ConfigClockSource+0x186>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4c4:	d03e      	beq.n	800b544 <HAL_TIM_ConfigClockSource+0xd4>
 800b4c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4ca:	f200 8087 	bhi.w	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b4ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4d2:	f000 8086 	beq.w	800b5e2 <HAL_TIM_ConfigClockSource+0x172>
 800b4d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4da:	d87f      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b4dc:	2b70      	cmp	r3, #112	@ 0x70
 800b4de:	d01a      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0xa6>
 800b4e0:	2b70      	cmp	r3, #112	@ 0x70
 800b4e2:	d87b      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b4e4:	2b60      	cmp	r3, #96	@ 0x60
 800b4e6:	d050      	beq.n	800b58a <HAL_TIM_ConfigClockSource+0x11a>
 800b4e8:	2b60      	cmp	r3, #96	@ 0x60
 800b4ea:	d877      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b4ec:	2b50      	cmp	r3, #80	@ 0x50
 800b4ee:	d03c      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0xfa>
 800b4f0:	2b50      	cmp	r3, #80	@ 0x50
 800b4f2:	d873      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b4f4:	2b40      	cmp	r3, #64	@ 0x40
 800b4f6:	d058      	beq.n	800b5aa <HAL_TIM_ConfigClockSource+0x13a>
 800b4f8:	2b40      	cmp	r3, #64	@ 0x40
 800b4fa:	d86f      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b4fc:	2b30      	cmp	r3, #48	@ 0x30
 800b4fe:	d064      	beq.n	800b5ca <HAL_TIM_ConfigClockSource+0x15a>
 800b500:	2b30      	cmp	r3, #48	@ 0x30
 800b502:	d86b      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b504:	2b20      	cmp	r3, #32
 800b506:	d060      	beq.n	800b5ca <HAL_TIM_ConfigClockSource+0x15a>
 800b508:	2b20      	cmp	r3, #32
 800b50a:	d867      	bhi.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d05c      	beq.n	800b5ca <HAL_TIM_ConfigClockSource+0x15a>
 800b510:	2b10      	cmp	r3, #16
 800b512:	d05a      	beq.n	800b5ca <HAL_TIM_ConfigClockSource+0x15a>
 800b514:	e062      	b.n	800b5dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b526:	f000 f9b3 	bl	800b890 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	609a      	str	r2, [r3, #8]
      break;
 800b542:	e04f      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b554:	f000 f99c 	bl	800b890 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689a      	ldr	r2, [r3, #8]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b566:	609a      	str	r2, [r3, #8]
      break;
 800b568:	e03c      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b576:	461a      	mov	r2, r3
 800b578:	f000 f910 	bl	800b79c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2150      	movs	r1, #80	@ 0x50
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f969 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800b588:	e02c      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b596:	461a      	mov	r2, r3
 800b598:	f000 f92f 	bl	800b7fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2160      	movs	r1, #96	@ 0x60
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 f959 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800b5a8:	e01c      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f000 f8f0 	bl	800b79c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2140      	movs	r1, #64	@ 0x40
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f949 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800b5c8:	e00c      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	f000 f940 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800b5da:	e003      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e0:	e000      	b.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b61a:	bf00      	nop
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b626:	b480      	push	{r7}
 800b628:	b083      	sub	sp, #12
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b62e:	bf00      	nop
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b083      	sub	sp, #12
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b642:	bf00      	nop
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a43      	ldr	r2, [pc, #268]	@ (800b770 <TIM_Base_SetConfig+0x120>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d013      	beq.n	800b690 <TIM_Base_SetConfig+0x40>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b66e:	d00f      	beq.n	800b690 <TIM_Base_SetConfig+0x40>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a40      	ldr	r2, [pc, #256]	@ (800b774 <TIM_Base_SetConfig+0x124>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d00b      	beq.n	800b690 <TIM_Base_SetConfig+0x40>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a3f      	ldr	r2, [pc, #252]	@ (800b778 <TIM_Base_SetConfig+0x128>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d007      	beq.n	800b690 <TIM_Base_SetConfig+0x40>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a3e      	ldr	r2, [pc, #248]	@ (800b77c <TIM_Base_SetConfig+0x12c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d003      	beq.n	800b690 <TIM_Base_SetConfig+0x40>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a3d      	ldr	r2, [pc, #244]	@ (800b780 <TIM_Base_SetConfig+0x130>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d108      	bne.n	800b6a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a32      	ldr	r2, [pc, #200]	@ (800b770 <TIM_Base_SetConfig+0x120>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d02b      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6b0:	d027      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a2f      	ldr	r2, [pc, #188]	@ (800b774 <TIM_Base_SetConfig+0x124>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d023      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a2e      	ldr	r2, [pc, #184]	@ (800b778 <TIM_Base_SetConfig+0x128>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d01f      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a2d      	ldr	r2, [pc, #180]	@ (800b77c <TIM_Base_SetConfig+0x12c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d01b      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a2c      	ldr	r2, [pc, #176]	@ (800b780 <TIM_Base_SetConfig+0x130>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d017      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a2b      	ldr	r2, [pc, #172]	@ (800b784 <TIM_Base_SetConfig+0x134>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d013      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a2a      	ldr	r2, [pc, #168]	@ (800b788 <TIM_Base_SetConfig+0x138>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d00f      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a29      	ldr	r2, [pc, #164]	@ (800b78c <TIM_Base_SetConfig+0x13c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d00b      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a28      	ldr	r2, [pc, #160]	@ (800b790 <TIM_Base_SetConfig+0x140>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d007      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a27      	ldr	r2, [pc, #156]	@ (800b794 <TIM_Base_SetConfig+0x144>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d003      	beq.n	800b702 <TIM_Base_SetConfig+0xb2>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a26      	ldr	r2, [pc, #152]	@ (800b798 <TIM_Base_SetConfig+0x148>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d108      	bne.n	800b714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	4313      	orrs	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	4313      	orrs	r3, r2
 800b720:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	689a      	ldr	r2, [r3, #8]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a0e      	ldr	r2, [pc, #56]	@ (800b770 <TIM_Base_SetConfig+0x120>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d003      	beq.n	800b742 <TIM_Base_SetConfig+0xf2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a10      	ldr	r2, [pc, #64]	@ (800b780 <TIM_Base_SetConfig+0x130>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d103      	bne.n	800b74a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f043 0204 	orr.w	r2, r3, #4
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	601a      	str	r2, [r3, #0]
}
 800b762:	bf00      	nop
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	40010000 	.word	0x40010000
 800b774:	40000400 	.word	0x40000400
 800b778:	40000800 	.word	0x40000800
 800b77c:	40000c00 	.word	0x40000c00
 800b780:	40010400 	.word	0x40010400
 800b784:	40014000 	.word	0x40014000
 800b788:	40014400 	.word	0x40014400
 800b78c:	40014800 	.word	0x40014800
 800b790:	40001800 	.word	0x40001800
 800b794:	40001c00 	.word	0x40001c00
 800b798:	40002000 	.word	0x40002000

0800b79c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	f023 0201 	bic.w	r2, r3, #1
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f023 030a 	bic.w	r3, r3, #10
 800b7d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	621a      	str	r2, [r3, #32]
}
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	f023 0210 	bic.w	r2, r3, #16
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	031b      	lsls	r3, r3, #12
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b836:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	621a      	str	r2, [r3, #32]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b085      	sub	sp, #20
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4313      	orrs	r3, r2
 800b878:	f043 0307 	orr.w	r3, r3, #7
 800b87c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	609a      	str	r2, [r3, #8]
}
 800b884:	bf00      	nop
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	021a      	lsls	r2, r3, #8
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	609a      	str	r2, [r3, #8]
}
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d101      	bne.n	800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e05a      	b.n	800b99e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b90e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a21      	ldr	r2, [pc, #132]	@ (800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d022      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b934:	d01d      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d018      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a1b      	ldr	r2, [pc, #108]	@ (800b9b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d013      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a1a      	ldr	r2, [pc, #104]	@ (800b9b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d00e      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a18      	ldr	r2, [pc, #96]	@ (800b9bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d009      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a17      	ldr	r2, [pc, #92]	@ (800b9c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d004      	beq.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a15      	ldr	r2, [pc, #84]	@ (800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d10c      	bne.n	800b98c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	4313      	orrs	r3, r2
 800b982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	40010000 	.word	0x40010000
 800b9b0:	40000400 	.word	0x40000400
 800b9b4:	40000800 	.word	0x40000800
 800b9b8:	40000c00 	.word	0x40000c00
 800b9bc:	40010400 	.word	0x40010400
 800b9c0:	40014000 	.word	0x40014000
 800b9c4:	40001800 	.word	0x40001800

0800b9c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e042      	b.n	800ba88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7f9 fe56 	bl	80056c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2224      	movs	r2, #36	@ 0x24
 800ba20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68da      	ldr	r2, [r3, #12]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ba32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 f86f 	bl	800cb18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	691a      	ldr	r2, [r3, #16]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	695a      	ldr	r2, [r3, #20]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68da      	ldr	r2, [r3, #12]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ba68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2220      	movs	r2, #32
 800ba74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e024      	b.n	800baec <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2224      	movs	r2, #36	@ 0x24
 800baa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68da      	ldr	r2, [r3, #12]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bab8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7f9 ff64 	bl	8005988 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08a      	sub	sp, #40	@ 0x28
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	4613      	mov	r3, r2
 800bb02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	d175      	bne.n	800bc00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <HAL_UART_Transmit+0x2c>
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e06e      	b.n	800bc02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2221      	movs	r2, #33	@ 0x21
 800bb2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb32:	f7fa f985 	bl	8005e40 <HAL_GetTick>
 800bb36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	88fa      	ldrh	r2, [r7, #6]
 800bb3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	88fa      	ldrh	r2, [r7, #6]
 800bb42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb4c:	d108      	bne.n	800bb60 <HAL_UART_Transmit+0x6c>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d104      	bne.n	800bb60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	61bb      	str	r3, [r7, #24]
 800bb5e:	e003      	b.n	800bb68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb64:	2300      	movs	r3, #0
 800bb66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb68:	e02e      	b.n	800bbc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2200      	movs	r2, #0
 800bb72:	2180      	movs	r1, #128	@ 0x80
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 fd0e 	bl	800c596 <UART_WaitOnFlagUntilTimeout>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d005      	beq.n	800bb8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2220      	movs	r2, #32
 800bb84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e03a      	b.n	800bc02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	3302      	adds	r3, #2
 800bba6:	61bb      	str	r3, [r7, #24]
 800bba8:	e007      	b.n	800bbba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	781a      	ldrb	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1cb      	bne.n	800bb6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2140      	movs	r1, #64	@ 0x40
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 fcda 	bl	800c596 <UART_WaitOnFlagUntilTimeout>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d005      	beq.n	800bbf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2220      	movs	r2, #32
 800bbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e006      	b.n	800bc02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e000      	b.n	800bc02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800bc00:	2302      	movs	r3, #2
  }
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3720      	adds	r7, #32
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08c      	sub	sp, #48	@ 0x30
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b20      	cmp	r3, #32
 800bc24:	d162      	bne.n	800bcec <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <HAL_UART_Transmit_DMA+0x26>
 800bc2c:	88fb      	ldrh	r3, [r7, #6]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e05b      	b.n	800bcee <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	88fa      	ldrh	r2, [r7, #6]
 800bc46:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2221      	movs	r2, #33	@ 0x21
 800bc52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5a:	4a27      	ldr	r2, [pc, #156]	@ (800bcf8 <HAL_UART_Transmit_DMA+0xec>)
 800bc5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc62:	4a26      	ldr	r2, [pc, #152]	@ (800bcfc <HAL_UART_Transmit_DMA+0xf0>)
 800bc64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6a:	4a25      	ldr	r2, [pc, #148]	@ (800bd00 <HAL_UART_Transmit_DMA+0xf4>)
 800bc6c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc72:	2200      	movs	r2, #0
 800bc74:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bc76:	f107 0308 	add.w	r3, r7, #8
 800bc7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc82:	6819      	ldr	r1, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	88fb      	ldrh	r3, [r7, #6]
 800bc8e:	f7fa ff67 	bl	8006b60 <HAL_DMA_Start_IT>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d008      	beq.n	800bcaa <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2210      	movs	r2, #16
 800bc9c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2220      	movs	r2, #32
 800bca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e021      	b.n	800bcee <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bcb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3314      	adds	r3, #20
 800bcba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	e853 3f00 	ldrex	r3, [r3]
 800bcc2:	617b      	str	r3, [r7, #20]
   return(result);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3314      	adds	r3, #20
 800bcd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcd4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd8:	6a39      	ldr	r1, [r7, #32]
 800bcda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcdc:	e841 2300 	strex	r3, r2, [r1]
 800bce0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1e5      	bne.n	800bcb4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	e000      	b.n	800bcee <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800bcec:	2302      	movs	r3, #2
  }
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3730      	adds	r7, #48	@ 0x30
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	0800c2e5 	.word	0x0800c2e5
 800bcfc:	0800c37f 	.word	0x0800c37f
 800bd00:	0800c503 	.word	0x0800c503

0800bd04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b20      	cmp	r3, #32
 800bd1c:	d112      	bne.n	800bd44 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <HAL_UART_Receive_DMA+0x26>
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e00b      	b.n	800bd46 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd34:	88fb      	ldrh	r3, [r7, #6]
 800bd36:	461a      	mov	r2, r3
 800bd38:	68b9      	ldr	r1, [r7, #8]
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f000 fc84 	bl	800c648 <UART_Start_Receive_DMA>
 800bd40:	4603      	mov	r3, r0
 800bd42:	e000      	b.n	800bd46 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bd44:	2302      	movs	r3, #2
  }
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b0ba      	sub	sp, #232	@ 0xe8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd86:	f003 030f 	and.w	r3, r3, #15
 800bd8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bd8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10f      	bne.n	800bdb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd9a:	f003 0320 	and.w	r3, r3, #32
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <HAL_UART_IRQHandler+0x66>
 800bda2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bda6:	f003 0320 	and.w	r3, r3, #32
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fdf4 	bl	800c99c <UART_Receive_IT>
      return;
 800bdb4:	e273      	b.n	800c29e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bdb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 80de 	beq.w	800bf7c <HAL_UART_IRQHandler+0x22c>
 800bdc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d106      	bne.n	800bdda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bdcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 80d1 	beq.w	800bf7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bdda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00b      	beq.n	800bdfe <HAL_UART_IRQHandler+0xae>
 800bde6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d005      	beq.n	800bdfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf6:	f043 0201 	orr.w	r2, r3, #1
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be02:	f003 0304 	and.w	r3, r3, #4
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00b      	beq.n	800be22 <HAL_UART_IRQHandler+0xd2>
 800be0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be1a:	f043 0202 	orr.w	r2, r3, #2
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <HAL_UART_IRQHandler+0xf6>
 800be2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d005      	beq.n	800be46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be3e:	f043 0204 	orr.w	r2, r3, #4
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be4a:	f003 0308 	and.w	r3, r3, #8
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d011      	beq.n	800be76 <HAL_UART_IRQHandler+0x126>
 800be52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be56:	f003 0320 	and.w	r3, r3, #32
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d105      	bne.n	800be6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be6e:	f043 0208 	orr.w	r2, r3, #8
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 820a 	beq.w	800c294 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be84:	f003 0320 	and.w	r3, r3, #32
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d008      	beq.n	800be9e <HAL_UART_IRQHandler+0x14e>
 800be8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be90:	f003 0320 	and.w	r3, r3, #32
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fd7f 	bl	800c99c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bea8:	2b40      	cmp	r3, #64	@ 0x40
 800beaa:	bf0c      	ite	eq
 800beac:	2301      	moveq	r3, #1
 800beae:	2300      	movne	r3, #0
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beba:	f003 0308 	and.w	r3, r3, #8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d103      	bne.n	800beca <HAL_UART_IRQHandler+0x17a>
 800bec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d04f      	beq.n	800bf6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fc8a 	bl	800c7e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beda:	2b40      	cmp	r3, #64	@ 0x40
 800bedc:	d141      	bne.n	800bf62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3314      	adds	r3, #20
 800bee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800befc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3314      	adds	r3, #20
 800bf06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bf0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bf0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bf16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bf22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1d9      	bne.n	800bede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d013      	beq.n	800bf5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf36:	4a8a      	ldr	r2, [pc, #552]	@ (800c160 <HAL_UART_IRQHandler+0x410>)
 800bf38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fa fed6 	bl	8006cf0 <HAL_DMA_Abort_IT>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d016      	beq.n	800bf78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf58:	e00e      	b.n	800bf78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f9ac 	bl	800c2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf60:	e00a      	b.n	800bf78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f9a8 	bl	800c2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf68:	e006      	b.n	800bf78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f9a4 	bl	800c2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bf76:	e18d      	b.n	800c294 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf78:	bf00      	nop
    return;
 800bf7a:	e18b      	b.n	800c294 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	f040 8167 	bne.w	800c254 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf8a:	f003 0310 	and.w	r3, r3, #16
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 8160 	beq.w	800c254 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800bf94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf98:	f003 0310 	and.w	r3, r3, #16
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8159 	beq.w	800c254 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	60bb      	str	r3, [r7, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	60bb      	str	r3, [r7, #8]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	60bb      	str	r3, [r7, #8]
 800bfb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfc2:	2b40      	cmp	r3, #64	@ 0x40
 800bfc4:	f040 80ce 	bne.w	800c164 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80a9 	beq.w	800c130 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bfe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	f080 80a2 	bcs.w	800c130 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bff2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bffe:	f000 8088 	beq.w	800c112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	330c      	adds	r3, #12
 800c008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c01c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	330c      	adds	r3, #12
 800c02a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c02e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c03a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1d9      	bne.n	800c002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3314      	adds	r3, #20
 800c054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c060:	f023 0301 	bic.w	r3, r3, #1
 800c064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3314      	adds	r3, #20
 800c06e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c072:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c076:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c07e:	e841 2300 	strex	r3, r2, [r1]
 800c082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e1      	bne.n	800c04e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3314      	adds	r3, #20
 800c090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c09c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3314      	adds	r3, #20
 800c0aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c0ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c0b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0b6:	e841 2300 	strex	r3, r2, [r1]
 800c0ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c0bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e3      	bne.n	800c08a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	330c      	adds	r3, #12
 800c0d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0da:	e853 3f00 	ldrex	r3, [r3]
 800c0de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e2:	f023 0310 	bic.w	r3, r3, #16
 800c0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	330c      	adds	r3, #12
 800c0f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c0f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c0f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0fc:	e841 2300 	strex	r3, r2, [r1]
 800c100:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e3      	bne.n	800c0d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fa fd7f 	bl	8006c10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2202      	movs	r2, #2
 800c116:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c120:	b29b      	uxth	r3, r3
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	b29b      	uxth	r3, r3
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f8cf 	bl	800c2cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c12e:	e0b3      	b.n	800c298 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c138:	429a      	cmp	r2, r3
 800c13a:	f040 80ad 	bne.w	800c298 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c142:	69db      	ldr	r3, [r3, #28]
 800c144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c148:	f040 80a6 	bne.w	800c298 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f8b7 	bl	800c2cc <HAL_UARTEx_RxEventCallback>
      return;
 800c15e:	e09b      	b.n	800c298 <HAL_UART_IRQHandler+0x548>
 800c160:	0800c8ab 	.word	0x0800c8ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c178:	b29b      	uxth	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f000 808e 	beq.w	800c29c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 8089 	beq.w	800c29c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	330c      	adds	r3, #12
 800c190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c194:	e853 3f00 	ldrex	r3, [r3]
 800c198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c19a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c19c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	330c      	adds	r3, #12
 800c1aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c1ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800c1b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c1b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1b6:	e841 2300 	strex	r3, r2, [r1]
 800c1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1e3      	bne.n	800c18a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	f023 0301 	bic.w	r3, r3, #1
 800c1d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c1e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1ee:	e841 2300 	strex	r3, r2, [r1]
 800c1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e3      	bne.n	800c1c2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2220      	movs	r2, #32
 800c1fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	330c      	adds	r3, #12
 800c20e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	e853 3f00 	ldrex	r3, [r3]
 800c216:	60fb      	str	r3, [r7, #12]
   return(result);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f023 0310 	bic.w	r3, r3, #16
 800c21e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	330c      	adds	r3, #12
 800c228:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c22c:	61fa      	str	r2, [r7, #28]
 800c22e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	69b9      	ldr	r1, [r7, #24]
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	617b      	str	r3, [r7, #20]
   return(result);
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e3      	bne.n	800c208 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f83d 	bl	800c2cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c252:	e023      	b.n	800c29c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <HAL_UART_IRQHandler+0x524>
 800c260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fb2d 	bl	800c8cc <UART_Transmit_IT>
    return;
 800c272:	e014      	b.n	800c29e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00e      	beq.n	800c29e <HAL_UART_IRQHandler+0x54e>
 800c280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d008      	beq.n	800c29e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fb6d 	bl	800c96c <UART_EndTransmit_IT>
    return;
 800c292:	e004      	b.n	800c29e <HAL_UART_IRQHandler+0x54e>
    return;
 800c294:	bf00      	nop
 800c296:	e002      	b.n	800c29e <HAL_UART_IRQHandler+0x54e>
      return;
 800c298:	bf00      	nop
 800c29a:	e000      	b.n	800c29e <HAL_UART_IRQHandler+0x54e>
      return;
 800c29c:	bf00      	nop
  }
}
 800c29e:	37e8      	adds	r7, #232	@ 0xe8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b090      	sub	sp, #64	@ 0x40
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d137      	bne.n	800c370 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c302:	2200      	movs	r2, #0
 800c304:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3314      	adds	r3, #20
 800c30c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	623b      	str	r3, [r7, #32]
   return(result);
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c31c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3314      	adds	r3, #20
 800c324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c326:	633a      	str	r2, [r7, #48]	@ 0x30
 800c328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c32c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e5      	bne.n	800c306 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	330c      	adds	r3, #12
 800c340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	e853 3f00 	ldrex	r3, [r3]
 800c348:	60fb      	str	r3, [r7, #12]
   return(result);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c350:	637b      	str	r3, [r7, #52]	@ 0x34
 800c352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	330c      	adds	r3, #12
 800c358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c35a:	61fa      	str	r2, [r7, #28]
 800c35c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35e:	69b9      	ldr	r1, [r7, #24]
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	e841 2300 	strex	r3, r2, [r1]
 800c366:	617b      	str	r3, [r7, #20]
   return(result);
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1e5      	bne.n	800c33a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c36e:	e002      	b.n	800c376 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c370:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c372:	f7f7 fddb 	bl	8003f2c <HAL_UART_TxCpltCallback>
}
 800c376:	bf00      	nop
 800c378:	3740      	adds	r7, #64	@ 0x40
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f7ff ff89 	bl	800c2a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b09c      	sub	sp, #112	@ 0x70
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d172      	bne.n	800c49c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c3b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3c6:	e853 3f00 	ldrex	r3, [r3]
 800c3ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	330c      	adds	r3, #12
 800c3da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c3dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c3de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3e4:	e841 2300 	strex	r3, r2, [r1]
 800c3e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c3ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1e5      	bne.n	800c3bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3314      	adds	r3, #20
 800c3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fa:	e853 3f00 	ldrex	r3, [r3]
 800c3fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c402:	f023 0301 	bic.w	r3, r3, #1
 800c406:	667b      	str	r3, [r7, #100]	@ 0x64
 800c408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3314      	adds	r3, #20
 800c40e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c410:	647a      	str	r2, [r7, #68]	@ 0x44
 800c412:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c414:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c418:	e841 2300 	strex	r3, r2, [r1]
 800c41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e5      	bne.n	800c3f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3314      	adds	r3, #20
 800c42a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	623b      	str	r3, [r7, #32]
   return(result);
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c43a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c43c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3314      	adds	r3, #20
 800c442:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c444:	633a      	str	r2, [r7, #48]	@ 0x30
 800c446:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e5      	bne.n	800c424 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c45a:	2220      	movs	r2, #32
 800c45c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c464:	2b01      	cmp	r3, #1
 800c466:	d119      	bne.n	800c49c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	60fb      	str	r3, [r7, #12]
   return(result);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f023 0310 	bic.w	r3, r3, #16
 800c47e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	330c      	adds	r3, #12
 800c486:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c488:	61fa      	str	r2, [r7, #28]
 800c48a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	69b9      	ldr	r1, [r7, #24]
 800c48e:	69fa      	ldr	r2, [r7, #28]
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	617b      	str	r3, [r7, #20]
   return(result);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e5      	bne.n	800c468 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c49e:	2200      	movs	r2, #0
 800c4a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d106      	bne.n	800c4b8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4b2:	f7ff ff0b 	bl	800c2cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4b6:	e002      	b.n	800c4be <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c4b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4ba:	f7f6 fe07 	bl	80030cc <HAL_UART_RxCpltCallback>
}
 800c4be:	bf00      	nop
 800c4c0:	3770      	adds	r7, #112	@ 0x70
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d108      	bne.n	800c4f4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c4e6:	085b      	lsrs	r3, r3, #1
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f7ff feed 	bl	800c2cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4f2:	e002      	b.n	800c4fa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f7f6 fdc5 	bl	8003084 <HAL_UART_RxHalfCpltCallback>
}
 800c4fa:	bf00      	nop
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c512:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c51e:	2b80      	cmp	r3, #128	@ 0x80
 800c520:	bf0c      	ite	eq
 800c522:	2301      	moveq	r3, #1
 800c524:	2300      	movne	r3, #0
 800c526:	b2db      	uxtb	r3, r3
 800c528:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b21      	cmp	r3, #33	@ 0x21
 800c534:	d108      	bne.n	800c548 <UART_DMAError+0x46>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d005      	beq.n	800c548 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2200      	movs	r2, #0
 800c540:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c542:	68b8      	ldr	r0, [r7, #8]
 800c544:	f000 f926 	bl	800c794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c552:	2b40      	cmp	r3, #64	@ 0x40
 800c554:	bf0c      	ite	eq
 800c556:	2301      	moveq	r3, #1
 800c558:	2300      	movne	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b22      	cmp	r3, #34	@ 0x22
 800c568:	d108      	bne.n	800c57c <UART_DMAError+0x7a>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2200      	movs	r2, #0
 800c574:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c576:	68b8      	ldr	r0, [r7, #8]
 800c578:	f000 f934 	bl	800c7e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c580:	f043 0210 	orr.w	r2, r3, #16
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c588:	68b8      	ldr	r0, [r7, #8]
 800c58a:	f7ff fe95 	bl	800c2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c58e:	bf00      	nop
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b086      	sub	sp, #24
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	603b      	str	r3, [r7, #0]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5a6:	e03b      	b.n	800c620 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5a8:	6a3b      	ldr	r3, [r7, #32]
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ae:	d037      	beq.n	800c620 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5b0:	f7f9 fc46 	bl	8005e40 <HAL_GetTick>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	1ad3      	subs	r3, r2, r3
 800c5ba:	6a3a      	ldr	r2, [r7, #32]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d302      	bcc.n	800c5c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d101      	bne.n	800c5ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e03a      	b.n	800c640 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d023      	beq.n	800c620 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b80      	cmp	r3, #128	@ 0x80
 800c5dc:	d020      	beq.n	800c620 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b40      	cmp	r3, #64	@ 0x40
 800c5e2:	d01d      	beq.n	800c620 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0308 	and.w	r3, r3, #8
 800c5ee:	2b08      	cmp	r3, #8
 800c5f0:	d116      	bne.n	800c620 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	617b      	str	r3, [r7, #20]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 f8eb 	bl	800c7e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2208      	movs	r2, #8
 800c612:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e00f      	b.n	800c640 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4013      	ands	r3, r2
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	bf0c      	ite	eq
 800c630:	2301      	moveq	r3, #1
 800c632:	2300      	movne	r3, #0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	461a      	mov	r2, r3
 800c638:	79fb      	ldrb	r3, [r7, #7]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d0b4      	beq.n	800c5a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b098      	sub	sp, #96	@ 0x60
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	4613      	mov	r3, r2
 800c654:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	88fa      	ldrh	r2, [r7, #6]
 800c660:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2222      	movs	r2, #34	@ 0x22
 800c66c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c674:	4a44      	ldr	r2, [pc, #272]	@ (800c788 <UART_Start_Receive_DMA+0x140>)
 800c676:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c67c:	4a43      	ldr	r2, [pc, #268]	@ (800c78c <UART_Start_Receive_DMA+0x144>)
 800c67e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c684:	4a42      	ldr	r2, [pc, #264]	@ (800c790 <UART_Start_Receive_DMA+0x148>)
 800c686:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c68c:	2200      	movs	r2, #0
 800c68e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c690:	f107 0308 	add.w	r3, r7, #8
 800c694:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	88fb      	ldrh	r3, [r7, #6]
 800c6a8:	f7fa fa5a 	bl	8006b60 <HAL_DMA_Start_IT>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d008      	beq.n	800c6c4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2210      	movs	r2, #16
 800c6b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2220      	movs	r2, #32
 800c6bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e05d      	b.n	800c780 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	613b      	str	r3, [r7, #16]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	613b      	str	r3, [r7, #16]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	613b      	str	r3, [r7, #16]
 800c6d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d019      	beq.n	800c716 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	330c      	adds	r3, #12
 800c6e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6ec:	e853 3f00 	ldrex	r3, [r3]
 800c6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	330c      	adds	r3, #12
 800c700:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c702:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c704:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c708:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c70a:	e841 2300 	strex	r3, r2, [r1]
 800c70e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1e5      	bne.n	800c6e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3314      	adds	r3, #20
 800c71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c720:	e853 3f00 	ldrex	r3, [r3]
 800c724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c728:	f043 0301 	orr.w	r3, r3, #1
 800c72c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3314      	adds	r3, #20
 800c734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c736:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c73c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c73e:	e841 2300 	strex	r3, r2, [r1]
 800c742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e5      	bne.n	800c716 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3314      	adds	r3, #20
 800c750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	e853 3f00 	ldrex	r3, [r3]
 800c758:	617b      	str	r3, [r7, #20]
   return(result);
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c760:	653b      	str	r3, [r7, #80]	@ 0x50
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3314      	adds	r3, #20
 800c768:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c76a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c76c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76e:	6a39      	ldr	r1, [r7, #32]
 800c770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	61fb      	str	r3, [r7, #28]
   return(result);
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e5      	bne.n	800c74a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3760      	adds	r7, #96	@ 0x60
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	0800c39b 	.word	0x0800c39b
 800c78c:	0800c4c7 	.word	0x0800c4c7
 800c790:	0800c503 	.word	0x0800c503

0800c794 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b089      	sub	sp, #36	@ 0x24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	330c      	adds	r3, #12
 800c7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c7b2:	61fb      	str	r3, [r7, #28]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	330c      	adds	r3, #12
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	61ba      	str	r2, [r7, #24]
 800c7be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c0:	6979      	ldr	r1, [r7, #20]
 800c7c2:	69ba      	ldr	r2, [r7, #24]
 800c7c4:	e841 2300 	strex	r3, r2, [r1]
 800c7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e5      	bne.n	800c79c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2220      	movs	r2, #32
 800c7d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c7d8:	bf00      	nop
 800c7da:	3724      	adds	r7, #36	@ 0x24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b095      	sub	sp, #84	@ 0x54
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	330c      	adds	r3, #12
 800c7f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f6:	e853 3f00 	ldrex	r3, [r3]
 800c7fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	330c      	adds	r3, #12
 800c80a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c80c:	643a      	str	r2, [r7, #64]	@ 0x40
 800c80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c810:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c812:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c814:	e841 2300 	strex	r3, r2, [r1]
 800c818:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1e5      	bne.n	800c7ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3314      	adds	r3, #20
 800c826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	e853 3f00 	ldrex	r3, [r3]
 800c82e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	f023 0301 	bic.w	r3, r3, #1
 800c836:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3314      	adds	r3, #20
 800c83e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c840:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c848:	e841 2300 	strex	r3, r2, [r1]
 800c84c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1e5      	bne.n	800c820 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d119      	bne.n	800c890 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	330c      	adds	r3, #12
 800c862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	e853 3f00 	ldrex	r3, [r3]
 800c86a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f023 0310 	bic.w	r3, r3, #16
 800c872:	647b      	str	r3, [r7, #68]	@ 0x44
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	330c      	adds	r3, #12
 800c87a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c87c:	61ba      	str	r2, [r7, #24]
 800c87e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	6979      	ldr	r1, [r7, #20]
 800c882:	69ba      	ldr	r2, [r7, #24]
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	613b      	str	r3, [r7, #16]
   return(result);
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e5      	bne.n	800c85c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2220      	movs	r2, #32
 800c894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c89e:	bf00      	nop
 800c8a0:	3754      	adds	r7, #84	@ 0x54
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff fcfa 	bl	800c2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b21      	cmp	r3, #33	@ 0x21
 800c8de:	d13e      	bne.n	800c95e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8e8:	d114      	bne.n	800c914 <UART_Transmit_IT+0x48>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d110      	bne.n	800c914 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c906:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a1b      	ldr	r3, [r3, #32]
 800c90c:	1c9a      	adds	r2, r3, #2
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	621a      	str	r2, [r3, #32]
 800c912:	e008      	b.n	800c926 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	1c59      	adds	r1, r3, #1
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	6211      	str	r1, [r2, #32]
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	3b01      	subs	r3, #1
 800c92e:	b29b      	uxth	r3, r3
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	4619      	mov	r1, r3
 800c934:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10f      	bne.n	800c95a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68da      	ldr	r2, [r3, #12]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c948:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c958:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e000      	b.n	800c960 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c95e:	2302      	movs	r3, #2
  }
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c982:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2220      	movs	r2, #32
 800c988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7f7 facd 	bl	8003f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08c      	sub	sp, #48	@ 0x30
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	2b22      	cmp	r3, #34	@ 0x22
 800c9b6:	f040 80aa 	bne.w	800cb0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9c2:	d115      	bne.n	800c9f0 <UART_Receive_IT+0x54>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d111      	bne.n	800c9f0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e8:	1c9a      	adds	r2, r3, #2
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	629a      	str	r2, [r3, #40]	@ 0x28
 800c9ee:	e024      	b.n	800ca3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9fe:	d007      	beq.n	800ca10 <UART_Receive_IT+0x74>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <UART_Receive_IT+0x82>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d106      	bne.n	800ca1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca1a:	701a      	strb	r2, [r3, #0]
 800ca1c:	e008      	b.n	800ca30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	4619      	mov	r1, r3
 800ca48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d15d      	bne.n	800cb0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f022 0220 	bic.w	r2, r2, #32
 800ca5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68da      	ldr	r2, [r3, #12]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	695a      	ldr	r2, [r3, #20]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 0201 	bic.w	r2, r2, #1
 800ca7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d135      	bne.n	800cb00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	330c      	adds	r3, #12
 800caa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	e853 3f00 	ldrex	r3, [r3]
 800caa8:	613b      	str	r3, [r7, #16]
   return(result);
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	f023 0310 	bic.w	r3, r3, #16
 800cab0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	330c      	adds	r3, #12
 800cab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caba:	623a      	str	r2, [r7, #32]
 800cabc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabe:	69f9      	ldr	r1, [r7, #28]
 800cac0:	6a3a      	ldr	r2, [r7, #32]
 800cac2:	e841 2300 	strex	r3, r2, [r1]
 800cac6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e5      	bne.n	800ca9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 0310 	and.w	r3, r3, #16
 800cad8:	2b10      	cmp	r3, #16
 800cada:	d10a      	bne.n	800caf2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff fbe7 	bl	800c2cc <HAL_UARTEx_RxEventCallback>
 800cafe:	e002      	b.n	800cb06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7f6 fae3 	bl	80030cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e002      	b.n	800cb10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e000      	b.n	800cb10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb0e:	2302      	movs	r3, #2
  }
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3730      	adds	r7, #48	@ 0x30
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb1c:	b0c0      	sub	sp, #256	@ 0x100
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb34:	68d9      	ldr	r1, [r3, #12]
 800cb36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	ea40 0301 	orr.w	r3, r0, r1
 800cb40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cb42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb46:	689a      	ldr	r2, [r3, #8]
 800cb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	431a      	orrs	r2, r3
 800cb58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cb70:	f021 010c 	bic.w	r1, r1, #12
 800cb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cb7e:	430b      	orrs	r3, r1
 800cb80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cb8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb92:	6999      	ldr	r1, [r3, #24]
 800cb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	ea40 0301 	orr.w	r3, r0, r1
 800cb9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	4b8f      	ldr	r3, [pc, #572]	@ (800cde4 <UART_SetConfig+0x2cc>)
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d005      	beq.n	800cbb8 <UART_SetConfig+0xa0>
 800cbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b8d      	ldr	r3, [pc, #564]	@ (800cde8 <UART_SetConfig+0x2d0>)
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d104      	bne.n	800cbc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cbb8:	f7fd fdc8 	bl	800a74c <HAL_RCC_GetPCLK2Freq>
 800cbbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cbc0:	e003      	b.n	800cbca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cbc2:	f7fd fdaf 	bl	800a724 <HAL_RCC_GetPCLK1Freq>
 800cbc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbce:	69db      	ldr	r3, [r3, #28]
 800cbd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cbd4:	f040 810c 	bne.w	800cdf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cbd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cbe2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cbe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cbea:	4622      	mov	r2, r4
 800cbec:	462b      	mov	r3, r5
 800cbee:	1891      	adds	r1, r2, r2
 800cbf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cbf2:	415b      	adcs	r3, r3
 800cbf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	eb12 0801 	adds.w	r8, r2, r1
 800cc00:	4629      	mov	r1, r5
 800cc02:	eb43 0901 	adc.w	r9, r3, r1
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	f04f 0300 	mov.w	r3, #0
 800cc0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc1a:	4690      	mov	r8, r2
 800cc1c:	4699      	mov	r9, r3
 800cc1e:	4623      	mov	r3, r4
 800cc20:	eb18 0303 	adds.w	r3, r8, r3
 800cc24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cc28:	462b      	mov	r3, r5
 800cc2a:	eb49 0303 	adc.w	r3, r9, r3
 800cc2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cc32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cc3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cc42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cc46:	460b      	mov	r3, r1
 800cc48:	18db      	adds	r3, r3, r3
 800cc4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	eb42 0303 	adc.w	r3, r2, r3
 800cc52:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cc58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cc5c:	f7f4 f992 	bl	8000f84 <__aeabi_uldivmod>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4b61      	ldr	r3, [pc, #388]	@ (800cdec <UART_SetConfig+0x2d4>)
 800cc66:	fba3 2302 	umull	r2, r3, r3, r2
 800cc6a:	095b      	lsrs	r3, r3, #5
 800cc6c:	011c      	lsls	r4, r3, #4
 800cc6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc72:	2200      	movs	r2, #0
 800cc74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cc7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cc80:	4642      	mov	r2, r8
 800cc82:	464b      	mov	r3, r9
 800cc84:	1891      	adds	r1, r2, r2
 800cc86:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cc88:	415b      	adcs	r3, r3
 800cc8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cc90:	4641      	mov	r1, r8
 800cc92:	eb12 0a01 	adds.w	sl, r2, r1
 800cc96:	4649      	mov	r1, r9
 800cc98:	eb43 0b01 	adc.w	fp, r3, r1
 800cc9c:	f04f 0200 	mov.w	r2, #0
 800cca0:	f04f 0300 	mov.w	r3, #0
 800cca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ccac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ccb0:	4692      	mov	sl, r2
 800ccb2:	469b      	mov	fp, r3
 800ccb4:	4643      	mov	r3, r8
 800ccb6:	eb1a 0303 	adds.w	r3, sl, r3
 800ccba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ccbe:	464b      	mov	r3, r9
 800ccc0:	eb4b 0303 	adc.w	r3, fp, r3
 800ccc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ccc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ccd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ccd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	18db      	adds	r3, r3, r3
 800cce0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cce2:	4613      	mov	r3, r2
 800cce4:	eb42 0303 	adc.w	r3, r2, r3
 800cce8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ccee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ccf2:	f7f4 f947 	bl	8000f84 <__aeabi_uldivmod>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	4b3b      	ldr	r3, [pc, #236]	@ (800cdec <UART_SetConfig+0x2d4>)
 800ccfe:	fba3 2301 	umull	r2, r3, r3, r1
 800cd02:	095b      	lsrs	r3, r3, #5
 800cd04:	2264      	movs	r2, #100	@ 0x64
 800cd06:	fb02 f303 	mul.w	r3, r2, r3
 800cd0a:	1acb      	subs	r3, r1, r3
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cd12:	4b36      	ldr	r3, [pc, #216]	@ (800cdec <UART_SetConfig+0x2d4>)
 800cd14:	fba3 2302 	umull	r2, r3, r3, r2
 800cd18:	095b      	lsrs	r3, r3, #5
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cd20:	441c      	add	r4, r3
 800cd22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd26:	2200      	movs	r2, #0
 800cd28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cd30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cd34:	4642      	mov	r2, r8
 800cd36:	464b      	mov	r3, r9
 800cd38:	1891      	adds	r1, r2, r2
 800cd3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cd3c:	415b      	adcs	r3, r3
 800cd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cd44:	4641      	mov	r1, r8
 800cd46:	1851      	adds	r1, r2, r1
 800cd48:	6339      	str	r1, [r7, #48]	@ 0x30
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	414b      	adcs	r3, r1
 800cd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd50:	f04f 0200 	mov.w	r2, #0
 800cd54:	f04f 0300 	mov.w	r3, #0
 800cd58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cd5c:	4659      	mov	r1, fp
 800cd5e:	00cb      	lsls	r3, r1, #3
 800cd60:	4651      	mov	r1, sl
 800cd62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd66:	4651      	mov	r1, sl
 800cd68:	00ca      	lsls	r2, r1, #3
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	4642      	mov	r2, r8
 800cd72:	189b      	adds	r3, r3, r2
 800cd74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd78:	464b      	mov	r3, r9
 800cd7a:	460a      	mov	r2, r1
 800cd7c:	eb42 0303 	adc.w	r3, r2, r3
 800cd80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cd84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cd90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cd94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cd98:	460b      	mov	r3, r1
 800cd9a:	18db      	adds	r3, r3, r3
 800cd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd9e:	4613      	mov	r3, r2
 800cda0:	eb42 0303 	adc.w	r3, r2, r3
 800cda4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cda6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cdaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cdae:	f7f4 f8e9 	bl	8000f84 <__aeabi_uldivmod>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cdec <UART_SetConfig+0x2d4>)
 800cdb8:	fba3 1302 	umull	r1, r3, r3, r2
 800cdbc:	095b      	lsrs	r3, r3, #5
 800cdbe:	2164      	movs	r1, #100	@ 0x64
 800cdc0:	fb01 f303 	mul.w	r3, r1, r3
 800cdc4:	1ad3      	subs	r3, r2, r3
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	3332      	adds	r3, #50	@ 0x32
 800cdca:	4a08      	ldr	r2, [pc, #32]	@ (800cdec <UART_SetConfig+0x2d4>)
 800cdcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd0:	095b      	lsrs	r3, r3, #5
 800cdd2:	f003 0207 	and.w	r2, r3, #7
 800cdd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4422      	add	r2, r4
 800cdde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cde0:	e106      	b.n	800cff0 <UART_SetConfig+0x4d8>
 800cde2:	bf00      	nop
 800cde4:	40011000 	.word	0x40011000
 800cde8:	40011400 	.word	0x40011400
 800cdec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cdf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cdfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ce02:	4642      	mov	r2, r8
 800ce04:	464b      	mov	r3, r9
 800ce06:	1891      	adds	r1, r2, r2
 800ce08:	6239      	str	r1, [r7, #32]
 800ce0a:	415b      	adcs	r3, r3
 800ce0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce12:	4641      	mov	r1, r8
 800ce14:	1854      	adds	r4, r2, r1
 800ce16:	4649      	mov	r1, r9
 800ce18:	eb43 0501 	adc.w	r5, r3, r1
 800ce1c:	f04f 0200 	mov.w	r2, #0
 800ce20:	f04f 0300 	mov.w	r3, #0
 800ce24:	00eb      	lsls	r3, r5, #3
 800ce26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce2a:	00e2      	lsls	r2, r4, #3
 800ce2c:	4614      	mov	r4, r2
 800ce2e:	461d      	mov	r5, r3
 800ce30:	4643      	mov	r3, r8
 800ce32:	18e3      	adds	r3, r4, r3
 800ce34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce38:	464b      	mov	r3, r9
 800ce3a:	eb45 0303 	adc.w	r3, r5, r3
 800ce3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ce5e:	4629      	mov	r1, r5
 800ce60:	008b      	lsls	r3, r1, #2
 800ce62:	4621      	mov	r1, r4
 800ce64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce68:	4621      	mov	r1, r4
 800ce6a:	008a      	lsls	r2, r1, #2
 800ce6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ce70:	f7f4 f888 	bl	8000f84 <__aeabi_uldivmod>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4b60      	ldr	r3, [pc, #384]	@ (800cffc <UART_SetConfig+0x4e4>)
 800ce7a:	fba3 2302 	umull	r2, r3, r3, r2
 800ce7e:	095b      	lsrs	r3, r3, #5
 800ce80:	011c      	lsls	r4, r3, #4
 800ce82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ce90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ce94:	4642      	mov	r2, r8
 800ce96:	464b      	mov	r3, r9
 800ce98:	1891      	adds	r1, r2, r2
 800ce9a:	61b9      	str	r1, [r7, #24]
 800ce9c:	415b      	adcs	r3, r3
 800ce9e:	61fb      	str	r3, [r7, #28]
 800cea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cea4:	4641      	mov	r1, r8
 800cea6:	1851      	adds	r1, r2, r1
 800cea8:	6139      	str	r1, [r7, #16]
 800ceaa:	4649      	mov	r1, r9
 800ceac:	414b      	adcs	r3, r1
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	f04f 0200 	mov.w	r2, #0
 800ceb4:	f04f 0300 	mov.w	r3, #0
 800ceb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cebc:	4659      	mov	r1, fp
 800cebe:	00cb      	lsls	r3, r1, #3
 800cec0:	4651      	mov	r1, sl
 800cec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cec6:	4651      	mov	r1, sl
 800cec8:	00ca      	lsls	r2, r1, #3
 800ceca:	4610      	mov	r0, r2
 800cecc:	4619      	mov	r1, r3
 800cece:	4603      	mov	r3, r0
 800ced0:	4642      	mov	r2, r8
 800ced2:	189b      	adds	r3, r3, r2
 800ced4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ced8:	464b      	mov	r3, r9
 800ceda:	460a      	mov	r2, r1
 800cedc:	eb42 0303 	adc.w	r3, r2, r3
 800cee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ceee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cef0:	f04f 0200 	mov.w	r2, #0
 800cef4:	f04f 0300 	mov.w	r3, #0
 800cef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cefc:	4649      	mov	r1, r9
 800cefe:	008b      	lsls	r3, r1, #2
 800cf00:	4641      	mov	r1, r8
 800cf02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf06:	4641      	mov	r1, r8
 800cf08:	008a      	lsls	r2, r1, #2
 800cf0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cf0e:	f7f4 f839 	bl	8000f84 <__aeabi_uldivmod>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	4611      	mov	r1, r2
 800cf18:	4b38      	ldr	r3, [pc, #224]	@ (800cffc <UART_SetConfig+0x4e4>)
 800cf1a:	fba3 2301 	umull	r2, r3, r3, r1
 800cf1e:	095b      	lsrs	r3, r3, #5
 800cf20:	2264      	movs	r2, #100	@ 0x64
 800cf22:	fb02 f303 	mul.w	r3, r2, r3
 800cf26:	1acb      	subs	r3, r1, r3
 800cf28:	011b      	lsls	r3, r3, #4
 800cf2a:	3332      	adds	r3, #50	@ 0x32
 800cf2c:	4a33      	ldr	r2, [pc, #204]	@ (800cffc <UART_SetConfig+0x4e4>)
 800cf2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf32:	095b      	lsrs	r3, r3, #5
 800cf34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf38:	441c      	add	r4, r3
 800cf3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf3e:	2200      	movs	r2, #0
 800cf40:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf42:	677a      	str	r2, [r7, #116]	@ 0x74
 800cf44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cf48:	4642      	mov	r2, r8
 800cf4a:	464b      	mov	r3, r9
 800cf4c:	1891      	adds	r1, r2, r2
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	415b      	adcs	r3, r3
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf58:	4641      	mov	r1, r8
 800cf5a:	1851      	adds	r1, r2, r1
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	4649      	mov	r1, r9
 800cf60:	414b      	adcs	r3, r1
 800cf62:	607b      	str	r3, [r7, #4]
 800cf64:	f04f 0200 	mov.w	r2, #0
 800cf68:	f04f 0300 	mov.w	r3, #0
 800cf6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cf70:	4659      	mov	r1, fp
 800cf72:	00cb      	lsls	r3, r1, #3
 800cf74:	4651      	mov	r1, sl
 800cf76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf7a:	4651      	mov	r1, sl
 800cf7c:	00ca      	lsls	r2, r1, #3
 800cf7e:	4610      	mov	r0, r2
 800cf80:	4619      	mov	r1, r3
 800cf82:	4603      	mov	r3, r0
 800cf84:	4642      	mov	r2, r8
 800cf86:	189b      	adds	r3, r3, r2
 800cf88:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf8a:	464b      	mov	r3, r9
 800cf8c:	460a      	mov	r2, r1
 800cf8e:	eb42 0303 	adc.w	r3, r2, r3
 800cf92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf9e:	667a      	str	r2, [r7, #100]	@ 0x64
 800cfa0:	f04f 0200 	mov.w	r2, #0
 800cfa4:	f04f 0300 	mov.w	r3, #0
 800cfa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cfac:	4649      	mov	r1, r9
 800cfae:	008b      	lsls	r3, r1, #2
 800cfb0:	4641      	mov	r1, r8
 800cfb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cfb6:	4641      	mov	r1, r8
 800cfb8:	008a      	lsls	r2, r1, #2
 800cfba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cfbe:	f7f3 ffe1 	bl	8000f84 <__aeabi_uldivmod>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800cffc <UART_SetConfig+0x4e4>)
 800cfc8:	fba3 1302 	umull	r1, r3, r3, r2
 800cfcc:	095b      	lsrs	r3, r3, #5
 800cfce:	2164      	movs	r1, #100	@ 0x64
 800cfd0:	fb01 f303 	mul.w	r3, r1, r3
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	011b      	lsls	r3, r3, #4
 800cfd8:	3332      	adds	r3, #50	@ 0x32
 800cfda:	4a08      	ldr	r2, [pc, #32]	@ (800cffc <UART_SetConfig+0x4e4>)
 800cfdc:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe0:	095b      	lsrs	r3, r3, #5
 800cfe2:	f003 020f 	and.w	r2, r3, #15
 800cfe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4422      	add	r2, r4
 800cfee:	609a      	str	r2, [r3, #8]
}
 800cff0:	bf00      	nop
 800cff2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cff6:	46bd      	mov	sp, r7
 800cff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cffc:	51eb851f 	.word	0x51eb851f

0800d000 <calloc>:
 800d000:	4b02      	ldr	r3, [pc, #8]	@ (800d00c <calloc+0xc>)
 800d002:	460a      	mov	r2, r1
 800d004:	4601      	mov	r1, r0
 800d006:	6818      	ldr	r0, [r3, #0]
 800d008:	f000 b802 	b.w	800d010 <_calloc_r>
 800d00c:	2000004c 	.word	0x2000004c

0800d010 <_calloc_r>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	fba1 5402 	umull	r5, r4, r1, r2
 800d016:	b93c      	cbnz	r4, 800d028 <_calloc_r+0x18>
 800d018:	4629      	mov	r1, r5
 800d01a:	f000 f82f 	bl	800d07c <_malloc_r>
 800d01e:	4606      	mov	r6, r0
 800d020:	b928      	cbnz	r0, 800d02e <_calloc_r+0x1e>
 800d022:	2600      	movs	r6, #0
 800d024:	4630      	mov	r0, r6
 800d026:	bd70      	pop	{r4, r5, r6, pc}
 800d028:	220c      	movs	r2, #12
 800d02a:	6002      	str	r2, [r0, #0]
 800d02c:	e7f9      	b.n	800d022 <_calloc_r+0x12>
 800d02e:	462a      	mov	r2, r5
 800d030:	4621      	mov	r1, r4
 800d032:	f001 f87c 	bl	800e12e <memset>
 800d036:	e7f5      	b.n	800d024 <_calloc_r+0x14>

0800d038 <sbrk_aligned>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	4e0f      	ldr	r6, [pc, #60]	@ (800d078 <sbrk_aligned+0x40>)
 800d03c:	460c      	mov	r4, r1
 800d03e:	6831      	ldr	r1, [r6, #0]
 800d040:	4605      	mov	r5, r0
 800d042:	b911      	cbnz	r1, 800d04a <sbrk_aligned+0x12>
 800d044:	f001 f8ca 	bl	800e1dc <_sbrk_r>
 800d048:	6030      	str	r0, [r6, #0]
 800d04a:	4621      	mov	r1, r4
 800d04c:	4628      	mov	r0, r5
 800d04e:	f001 f8c5 	bl	800e1dc <_sbrk_r>
 800d052:	1c43      	adds	r3, r0, #1
 800d054:	d103      	bne.n	800d05e <sbrk_aligned+0x26>
 800d056:	f04f 34ff 	mov.w	r4, #4294967295
 800d05a:	4620      	mov	r0, r4
 800d05c:	bd70      	pop	{r4, r5, r6, pc}
 800d05e:	1cc4      	adds	r4, r0, #3
 800d060:	f024 0403 	bic.w	r4, r4, #3
 800d064:	42a0      	cmp	r0, r4
 800d066:	d0f8      	beq.n	800d05a <sbrk_aligned+0x22>
 800d068:	1a21      	subs	r1, r4, r0
 800d06a:	4628      	mov	r0, r5
 800d06c:	f001 f8b6 	bl	800e1dc <_sbrk_r>
 800d070:	3001      	adds	r0, #1
 800d072:	d1f2      	bne.n	800d05a <sbrk_aligned+0x22>
 800d074:	e7ef      	b.n	800d056 <sbrk_aligned+0x1e>
 800d076:	bf00      	nop
 800d078:	200016d8 	.word	0x200016d8

0800d07c <_malloc_r>:
 800d07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d080:	1ccd      	adds	r5, r1, #3
 800d082:	f025 0503 	bic.w	r5, r5, #3
 800d086:	3508      	adds	r5, #8
 800d088:	2d0c      	cmp	r5, #12
 800d08a:	bf38      	it	cc
 800d08c:	250c      	movcc	r5, #12
 800d08e:	2d00      	cmp	r5, #0
 800d090:	4606      	mov	r6, r0
 800d092:	db01      	blt.n	800d098 <_malloc_r+0x1c>
 800d094:	42a9      	cmp	r1, r5
 800d096:	d904      	bls.n	800d0a2 <_malloc_r+0x26>
 800d098:	230c      	movs	r3, #12
 800d09a:	6033      	str	r3, [r6, #0]
 800d09c:	2000      	movs	r0, #0
 800d09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d178 <_malloc_r+0xfc>
 800d0a6:	f000 f869 	bl	800d17c <__malloc_lock>
 800d0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ae:	461c      	mov	r4, r3
 800d0b0:	bb44      	cbnz	r4, 800d104 <_malloc_r+0x88>
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff ffbf 	bl	800d038 <sbrk_aligned>
 800d0ba:	1c43      	adds	r3, r0, #1
 800d0bc:	4604      	mov	r4, r0
 800d0be:	d158      	bne.n	800d172 <_malloc_r+0xf6>
 800d0c0:	f8d8 4000 	ldr.w	r4, [r8]
 800d0c4:	4627      	mov	r7, r4
 800d0c6:	2f00      	cmp	r7, #0
 800d0c8:	d143      	bne.n	800d152 <_malloc_r+0xd6>
 800d0ca:	2c00      	cmp	r4, #0
 800d0cc:	d04b      	beq.n	800d166 <_malloc_r+0xea>
 800d0ce:	6823      	ldr	r3, [r4, #0]
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	eb04 0903 	add.w	r9, r4, r3
 800d0d8:	f001 f880 	bl	800e1dc <_sbrk_r>
 800d0dc:	4581      	cmp	r9, r0
 800d0de:	d142      	bne.n	800d166 <_malloc_r+0xea>
 800d0e0:	6821      	ldr	r1, [r4, #0]
 800d0e2:	1a6d      	subs	r5, r5, r1
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f7ff ffa6 	bl	800d038 <sbrk_aligned>
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d03a      	beq.n	800d166 <_malloc_r+0xea>
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	442b      	add	r3, r5
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	bb62      	cbnz	r2, 800d158 <_malloc_r+0xdc>
 800d0fe:	f8c8 7000 	str.w	r7, [r8]
 800d102:	e00f      	b.n	800d124 <_malloc_r+0xa8>
 800d104:	6822      	ldr	r2, [r4, #0]
 800d106:	1b52      	subs	r2, r2, r5
 800d108:	d420      	bmi.n	800d14c <_malloc_r+0xd0>
 800d10a:	2a0b      	cmp	r2, #11
 800d10c:	d917      	bls.n	800d13e <_malloc_r+0xc2>
 800d10e:	1961      	adds	r1, r4, r5
 800d110:	42a3      	cmp	r3, r4
 800d112:	6025      	str	r5, [r4, #0]
 800d114:	bf18      	it	ne
 800d116:	6059      	strne	r1, [r3, #4]
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	bf08      	it	eq
 800d11c:	f8c8 1000 	streq.w	r1, [r8]
 800d120:	5162      	str	r2, [r4, r5]
 800d122:	604b      	str	r3, [r1, #4]
 800d124:	4630      	mov	r0, r6
 800d126:	f000 f82f 	bl	800d188 <__malloc_unlock>
 800d12a:	f104 000b 	add.w	r0, r4, #11
 800d12e:	1d23      	adds	r3, r4, #4
 800d130:	f020 0007 	bic.w	r0, r0, #7
 800d134:	1ac2      	subs	r2, r0, r3
 800d136:	bf1c      	itt	ne
 800d138:	1a1b      	subne	r3, r3, r0
 800d13a:	50a3      	strne	r3, [r4, r2]
 800d13c:	e7af      	b.n	800d09e <_malloc_r+0x22>
 800d13e:	6862      	ldr	r2, [r4, #4]
 800d140:	42a3      	cmp	r3, r4
 800d142:	bf0c      	ite	eq
 800d144:	f8c8 2000 	streq.w	r2, [r8]
 800d148:	605a      	strne	r2, [r3, #4]
 800d14a:	e7eb      	b.n	800d124 <_malloc_r+0xa8>
 800d14c:	4623      	mov	r3, r4
 800d14e:	6864      	ldr	r4, [r4, #4]
 800d150:	e7ae      	b.n	800d0b0 <_malloc_r+0x34>
 800d152:	463c      	mov	r4, r7
 800d154:	687f      	ldr	r7, [r7, #4]
 800d156:	e7b6      	b.n	800d0c6 <_malloc_r+0x4a>
 800d158:	461a      	mov	r2, r3
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	d1fb      	bne.n	800d158 <_malloc_r+0xdc>
 800d160:	2300      	movs	r3, #0
 800d162:	6053      	str	r3, [r2, #4]
 800d164:	e7de      	b.n	800d124 <_malloc_r+0xa8>
 800d166:	230c      	movs	r3, #12
 800d168:	6033      	str	r3, [r6, #0]
 800d16a:	4630      	mov	r0, r6
 800d16c:	f000 f80c 	bl	800d188 <__malloc_unlock>
 800d170:	e794      	b.n	800d09c <_malloc_r+0x20>
 800d172:	6005      	str	r5, [r0, #0]
 800d174:	e7d6      	b.n	800d124 <_malloc_r+0xa8>
 800d176:	bf00      	nop
 800d178:	200016dc 	.word	0x200016dc

0800d17c <__malloc_lock>:
 800d17c:	4801      	ldr	r0, [pc, #4]	@ (800d184 <__malloc_lock+0x8>)
 800d17e:	f001 b87a 	b.w	800e276 <__retarget_lock_acquire_recursive>
 800d182:	bf00      	nop
 800d184:	20001820 	.word	0x20001820

0800d188 <__malloc_unlock>:
 800d188:	4801      	ldr	r0, [pc, #4]	@ (800d190 <__malloc_unlock+0x8>)
 800d18a:	f001 b875 	b.w	800e278 <__retarget_lock_release_recursive>
 800d18e:	bf00      	nop
 800d190:	20001820 	.word	0x20001820

0800d194 <__cvt>:
 800d194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	ec57 6b10 	vmov	r6, r7, d0
 800d19c:	2f00      	cmp	r7, #0
 800d19e:	460c      	mov	r4, r1
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	463b      	mov	r3, r7
 800d1a4:	bfbb      	ittet	lt
 800d1a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d1aa:	461f      	movlt	r7, r3
 800d1ac:	2300      	movge	r3, #0
 800d1ae:	232d      	movlt	r3, #45	@ 0x2d
 800d1b0:	700b      	strb	r3, [r1, #0]
 800d1b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d1b8:	4691      	mov	r9, r2
 800d1ba:	f023 0820 	bic.w	r8, r3, #32
 800d1be:	bfbc      	itt	lt
 800d1c0:	4632      	movlt	r2, r6
 800d1c2:	4616      	movlt	r6, r2
 800d1c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1c8:	d005      	beq.n	800d1d6 <__cvt+0x42>
 800d1ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d1ce:	d100      	bne.n	800d1d2 <__cvt+0x3e>
 800d1d0:	3401      	adds	r4, #1
 800d1d2:	2102      	movs	r1, #2
 800d1d4:	e000      	b.n	800d1d8 <__cvt+0x44>
 800d1d6:	2103      	movs	r1, #3
 800d1d8:	ab03      	add	r3, sp, #12
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	ab02      	add	r3, sp, #8
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	ec47 6b10 	vmov	d0, r6, r7
 800d1e4:	4653      	mov	r3, sl
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	f001 f8e6 	bl	800e3b8 <_dtoa_r>
 800d1ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	d119      	bne.n	800d228 <__cvt+0x94>
 800d1f4:	f019 0f01 	tst.w	r9, #1
 800d1f8:	d00e      	beq.n	800d218 <__cvt+0x84>
 800d1fa:	eb00 0904 	add.w	r9, r0, r4
 800d1fe:	2200      	movs	r2, #0
 800d200:	2300      	movs	r3, #0
 800d202:	4630      	mov	r0, r6
 800d204:	4639      	mov	r1, r7
 800d206:	f7f3 fc7f 	bl	8000b08 <__aeabi_dcmpeq>
 800d20a:	b108      	cbz	r0, 800d210 <__cvt+0x7c>
 800d20c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d210:	2230      	movs	r2, #48	@ 0x30
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	454b      	cmp	r3, r9
 800d216:	d31e      	bcc.n	800d256 <__cvt+0xc2>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d21c:	1b5b      	subs	r3, r3, r5
 800d21e:	4628      	mov	r0, r5
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	b004      	add	sp, #16
 800d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d228:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d22c:	eb00 0904 	add.w	r9, r0, r4
 800d230:	d1e5      	bne.n	800d1fe <__cvt+0x6a>
 800d232:	7803      	ldrb	r3, [r0, #0]
 800d234:	2b30      	cmp	r3, #48	@ 0x30
 800d236:	d10a      	bne.n	800d24e <__cvt+0xba>
 800d238:	2200      	movs	r2, #0
 800d23a:	2300      	movs	r3, #0
 800d23c:	4630      	mov	r0, r6
 800d23e:	4639      	mov	r1, r7
 800d240:	f7f3 fc62 	bl	8000b08 <__aeabi_dcmpeq>
 800d244:	b918      	cbnz	r0, 800d24e <__cvt+0xba>
 800d246:	f1c4 0401 	rsb	r4, r4, #1
 800d24a:	f8ca 4000 	str.w	r4, [sl]
 800d24e:	f8da 3000 	ldr.w	r3, [sl]
 800d252:	4499      	add	r9, r3
 800d254:	e7d3      	b.n	800d1fe <__cvt+0x6a>
 800d256:	1c59      	adds	r1, r3, #1
 800d258:	9103      	str	r1, [sp, #12]
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	e7d9      	b.n	800d212 <__cvt+0x7e>

0800d25e <__exponent>:
 800d25e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d260:	2900      	cmp	r1, #0
 800d262:	bfba      	itte	lt
 800d264:	4249      	neglt	r1, r1
 800d266:	232d      	movlt	r3, #45	@ 0x2d
 800d268:	232b      	movge	r3, #43	@ 0x2b
 800d26a:	2909      	cmp	r1, #9
 800d26c:	7002      	strb	r2, [r0, #0]
 800d26e:	7043      	strb	r3, [r0, #1]
 800d270:	dd29      	ble.n	800d2c6 <__exponent+0x68>
 800d272:	f10d 0307 	add.w	r3, sp, #7
 800d276:	461d      	mov	r5, r3
 800d278:	270a      	movs	r7, #10
 800d27a:	461a      	mov	r2, r3
 800d27c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d280:	fb07 1416 	mls	r4, r7, r6, r1
 800d284:	3430      	adds	r4, #48	@ 0x30
 800d286:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d28a:	460c      	mov	r4, r1
 800d28c:	2c63      	cmp	r4, #99	@ 0x63
 800d28e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d292:	4631      	mov	r1, r6
 800d294:	dcf1      	bgt.n	800d27a <__exponent+0x1c>
 800d296:	3130      	adds	r1, #48	@ 0x30
 800d298:	1e94      	subs	r4, r2, #2
 800d29a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d29e:	1c41      	adds	r1, r0, #1
 800d2a0:	4623      	mov	r3, r4
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	d30a      	bcc.n	800d2bc <__exponent+0x5e>
 800d2a6:	f10d 0309 	add.w	r3, sp, #9
 800d2aa:	1a9b      	subs	r3, r3, r2
 800d2ac:	42ac      	cmp	r4, r5
 800d2ae:	bf88      	it	hi
 800d2b0:	2300      	movhi	r3, #0
 800d2b2:	3302      	adds	r3, #2
 800d2b4:	4403      	add	r3, r0
 800d2b6:	1a18      	subs	r0, r3, r0
 800d2b8:	b003      	add	sp, #12
 800d2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d2c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d2c4:	e7ed      	b.n	800d2a2 <__exponent+0x44>
 800d2c6:	2330      	movs	r3, #48	@ 0x30
 800d2c8:	3130      	adds	r1, #48	@ 0x30
 800d2ca:	7083      	strb	r3, [r0, #2]
 800d2cc:	70c1      	strb	r1, [r0, #3]
 800d2ce:	1d03      	adds	r3, r0, #4
 800d2d0:	e7f1      	b.n	800d2b6 <__exponent+0x58>
	...

0800d2d4 <_printf_float>:
 800d2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d8:	b08d      	sub	sp, #52	@ 0x34
 800d2da:	460c      	mov	r4, r1
 800d2dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d2e0:	4616      	mov	r6, r2
 800d2e2:	461f      	mov	r7, r3
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	f000 ff41 	bl	800e16c <_localeconv_r>
 800d2ea:	6803      	ldr	r3, [r0, #0]
 800d2ec:	9304      	str	r3, [sp, #16]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7f2 ffde 	bl	80002b0 <strlen>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2fc:	9005      	str	r0, [sp, #20]
 800d2fe:	3307      	adds	r3, #7
 800d300:	f023 0307 	bic.w	r3, r3, #7
 800d304:	f103 0208 	add.w	r2, r3, #8
 800d308:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d30c:	f8d4 b000 	ldr.w	fp, [r4]
 800d310:	f8c8 2000 	str.w	r2, [r8]
 800d314:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d318:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d31c:	9307      	str	r3, [sp, #28]
 800d31e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d322:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d32a:	4b9c      	ldr	r3, [pc, #624]	@ (800d59c <_printf_float+0x2c8>)
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295
 800d330:	f7f3 fc1c 	bl	8000b6c <__aeabi_dcmpun>
 800d334:	bb70      	cbnz	r0, 800d394 <_printf_float+0xc0>
 800d336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d33a:	4b98      	ldr	r3, [pc, #608]	@ (800d59c <_printf_float+0x2c8>)
 800d33c:	f04f 32ff 	mov.w	r2, #4294967295
 800d340:	f7f3 fbf6 	bl	8000b30 <__aeabi_dcmple>
 800d344:	bb30      	cbnz	r0, 800d394 <_printf_float+0xc0>
 800d346:	2200      	movs	r2, #0
 800d348:	2300      	movs	r3, #0
 800d34a:	4640      	mov	r0, r8
 800d34c:	4649      	mov	r1, r9
 800d34e:	f7f3 fbe5 	bl	8000b1c <__aeabi_dcmplt>
 800d352:	b110      	cbz	r0, 800d35a <_printf_float+0x86>
 800d354:	232d      	movs	r3, #45	@ 0x2d
 800d356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d35a:	4a91      	ldr	r2, [pc, #580]	@ (800d5a0 <_printf_float+0x2cc>)
 800d35c:	4b91      	ldr	r3, [pc, #580]	@ (800d5a4 <_printf_float+0x2d0>)
 800d35e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d362:	bf94      	ite	ls
 800d364:	4690      	movls	r8, r2
 800d366:	4698      	movhi	r8, r3
 800d368:	2303      	movs	r3, #3
 800d36a:	6123      	str	r3, [r4, #16]
 800d36c:	f02b 0304 	bic.w	r3, fp, #4
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	f04f 0900 	mov.w	r9, #0
 800d376:	9700      	str	r7, [sp, #0]
 800d378:	4633      	mov	r3, r6
 800d37a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d37c:	4621      	mov	r1, r4
 800d37e:	4628      	mov	r0, r5
 800d380:	f000 f9d2 	bl	800d728 <_printf_common>
 800d384:	3001      	adds	r0, #1
 800d386:	f040 808d 	bne.w	800d4a4 <_printf_float+0x1d0>
 800d38a:	f04f 30ff 	mov.w	r0, #4294967295
 800d38e:	b00d      	add	sp, #52	@ 0x34
 800d390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d394:	4642      	mov	r2, r8
 800d396:	464b      	mov	r3, r9
 800d398:	4640      	mov	r0, r8
 800d39a:	4649      	mov	r1, r9
 800d39c:	f7f3 fbe6 	bl	8000b6c <__aeabi_dcmpun>
 800d3a0:	b140      	cbz	r0, 800d3b4 <_printf_float+0xe0>
 800d3a2:	464b      	mov	r3, r9
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	bfbc      	itt	lt
 800d3a8:	232d      	movlt	r3, #45	@ 0x2d
 800d3aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d3ae:	4a7e      	ldr	r2, [pc, #504]	@ (800d5a8 <_printf_float+0x2d4>)
 800d3b0:	4b7e      	ldr	r3, [pc, #504]	@ (800d5ac <_printf_float+0x2d8>)
 800d3b2:	e7d4      	b.n	800d35e <_printf_float+0x8a>
 800d3b4:	6863      	ldr	r3, [r4, #4]
 800d3b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d3ba:	9206      	str	r2, [sp, #24]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	d13b      	bne.n	800d438 <_printf_float+0x164>
 800d3c0:	2306      	movs	r3, #6
 800d3c2:	6063      	str	r3, [r4, #4]
 800d3c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	6022      	str	r2, [r4, #0]
 800d3cc:	9303      	str	r3, [sp, #12]
 800d3ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d3d4:	ab09      	add	r3, sp, #36	@ 0x24
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	6861      	ldr	r1, [r4, #4]
 800d3da:	ec49 8b10 	vmov	d0, r8, r9
 800d3de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f7ff fed6 	bl	800d194 <__cvt>
 800d3e8:	9b06      	ldr	r3, [sp, #24]
 800d3ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3ec:	2b47      	cmp	r3, #71	@ 0x47
 800d3ee:	4680      	mov	r8, r0
 800d3f0:	d129      	bne.n	800d446 <_printf_float+0x172>
 800d3f2:	1cc8      	adds	r0, r1, #3
 800d3f4:	db02      	blt.n	800d3fc <_printf_float+0x128>
 800d3f6:	6863      	ldr	r3, [r4, #4]
 800d3f8:	4299      	cmp	r1, r3
 800d3fa:	dd41      	ble.n	800d480 <_printf_float+0x1ac>
 800d3fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800d400:	fa5f fa8a 	uxtb.w	sl, sl
 800d404:	3901      	subs	r1, #1
 800d406:	4652      	mov	r2, sl
 800d408:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d40c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d40e:	f7ff ff26 	bl	800d25e <__exponent>
 800d412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d414:	1813      	adds	r3, r2, r0
 800d416:	2a01      	cmp	r2, #1
 800d418:	4681      	mov	r9, r0
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	dc02      	bgt.n	800d424 <_printf_float+0x150>
 800d41e:	6822      	ldr	r2, [r4, #0]
 800d420:	07d2      	lsls	r2, r2, #31
 800d422:	d501      	bpl.n	800d428 <_printf_float+0x154>
 800d424:	3301      	adds	r3, #1
 800d426:	6123      	str	r3, [r4, #16]
 800d428:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d0a2      	beq.n	800d376 <_printf_float+0xa2>
 800d430:	232d      	movs	r3, #45	@ 0x2d
 800d432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d436:	e79e      	b.n	800d376 <_printf_float+0xa2>
 800d438:	9a06      	ldr	r2, [sp, #24]
 800d43a:	2a47      	cmp	r2, #71	@ 0x47
 800d43c:	d1c2      	bne.n	800d3c4 <_printf_float+0xf0>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1c0      	bne.n	800d3c4 <_printf_float+0xf0>
 800d442:	2301      	movs	r3, #1
 800d444:	e7bd      	b.n	800d3c2 <_printf_float+0xee>
 800d446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d44a:	d9db      	bls.n	800d404 <_printf_float+0x130>
 800d44c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d450:	d118      	bne.n	800d484 <_printf_float+0x1b0>
 800d452:	2900      	cmp	r1, #0
 800d454:	6863      	ldr	r3, [r4, #4]
 800d456:	dd0b      	ble.n	800d470 <_printf_float+0x19c>
 800d458:	6121      	str	r1, [r4, #16]
 800d45a:	b913      	cbnz	r3, 800d462 <_printf_float+0x18e>
 800d45c:	6822      	ldr	r2, [r4, #0]
 800d45e:	07d0      	lsls	r0, r2, #31
 800d460:	d502      	bpl.n	800d468 <_printf_float+0x194>
 800d462:	3301      	adds	r3, #1
 800d464:	440b      	add	r3, r1
 800d466:	6123      	str	r3, [r4, #16]
 800d468:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d46a:	f04f 0900 	mov.w	r9, #0
 800d46e:	e7db      	b.n	800d428 <_printf_float+0x154>
 800d470:	b913      	cbnz	r3, 800d478 <_printf_float+0x1a4>
 800d472:	6822      	ldr	r2, [r4, #0]
 800d474:	07d2      	lsls	r2, r2, #31
 800d476:	d501      	bpl.n	800d47c <_printf_float+0x1a8>
 800d478:	3302      	adds	r3, #2
 800d47a:	e7f4      	b.n	800d466 <_printf_float+0x192>
 800d47c:	2301      	movs	r3, #1
 800d47e:	e7f2      	b.n	800d466 <_printf_float+0x192>
 800d480:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d486:	4299      	cmp	r1, r3
 800d488:	db05      	blt.n	800d496 <_printf_float+0x1c2>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	6121      	str	r1, [r4, #16]
 800d48e:	07d8      	lsls	r0, r3, #31
 800d490:	d5ea      	bpl.n	800d468 <_printf_float+0x194>
 800d492:	1c4b      	adds	r3, r1, #1
 800d494:	e7e7      	b.n	800d466 <_printf_float+0x192>
 800d496:	2900      	cmp	r1, #0
 800d498:	bfd4      	ite	le
 800d49a:	f1c1 0202 	rsble	r2, r1, #2
 800d49e:	2201      	movgt	r2, #1
 800d4a0:	4413      	add	r3, r2
 800d4a2:	e7e0      	b.n	800d466 <_printf_float+0x192>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	055a      	lsls	r2, r3, #21
 800d4a8:	d407      	bmi.n	800d4ba <_printf_float+0x1e6>
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	4642      	mov	r2, r8
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b8      	blx	r7
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d12b      	bne.n	800d510 <_printf_float+0x23c>
 800d4b8:	e767      	b.n	800d38a <_printf_float+0xb6>
 800d4ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4be:	f240 80dd 	bls.w	800d67c <_printf_float+0x3a8>
 800d4c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f7f3 fb1d 	bl	8000b08 <__aeabi_dcmpeq>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d033      	beq.n	800d53a <_printf_float+0x266>
 800d4d2:	4a37      	ldr	r2, [pc, #220]	@ (800d5b0 <_printf_float+0x2dc>)
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	4628      	mov	r0, r5
 800d4da:	47b8      	blx	r7
 800d4dc:	3001      	adds	r0, #1
 800d4de:	f43f af54 	beq.w	800d38a <_printf_float+0xb6>
 800d4e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d4e6:	4543      	cmp	r3, r8
 800d4e8:	db02      	blt.n	800d4f0 <_printf_float+0x21c>
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	07d8      	lsls	r0, r3, #31
 800d4ee:	d50f      	bpl.n	800d510 <_printf_float+0x23c>
 800d4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	47b8      	blx	r7
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	f43f af45 	beq.w	800d38a <_printf_float+0xb6>
 800d500:	f04f 0900 	mov.w	r9, #0
 800d504:	f108 38ff 	add.w	r8, r8, #4294967295
 800d508:	f104 0a1a 	add.w	sl, r4, #26
 800d50c:	45c8      	cmp	r8, r9
 800d50e:	dc09      	bgt.n	800d524 <_printf_float+0x250>
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	079b      	lsls	r3, r3, #30
 800d514:	f100 8103 	bmi.w	800d71e <_printf_float+0x44a>
 800d518:	68e0      	ldr	r0, [r4, #12]
 800d51a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d51c:	4298      	cmp	r0, r3
 800d51e:	bfb8      	it	lt
 800d520:	4618      	movlt	r0, r3
 800d522:	e734      	b.n	800d38e <_printf_float+0xba>
 800d524:	2301      	movs	r3, #1
 800d526:	4652      	mov	r2, sl
 800d528:	4631      	mov	r1, r6
 800d52a:	4628      	mov	r0, r5
 800d52c:	47b8      	blx	r7
 800d52e:	3001      	adds	r0, #1
 800d530:	f43f af2b 	beq.w	800d38a <_printf_float+0xb6>
 800d534:	f109 0901 	add.w	r9, r9, #1
 800d538:	e7e8      	b.n	800d50c <_printf_float+0x238>
 800d53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	dc39      	bgt.n	800d5b4 <_printf_float+0x2e0>
 800d540:	4a1b      	ldr	r2, [pc, #108]	@ (800d5b0 <_printf_float+0x2dc>)
 800d542:	2301      	movs	r3, #1
 800d544:	4631      	mov	r1, r6
 800d546:	4628      	mov	r0, r5
 800d548:	47b8      	blx	r7
 800d54a:	3001      	adds	r0, #1
 800d54c:	f43f af1d 	beq.w	800d38a <_printf_float+0xb6>
 800d550:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d554:	ea59 0303 	orrs.w	r3, r9, r3
 800d558:	d102      	bne.n	800d560 <_printf_float+0x28c>
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	07d9      	lsls	r1, r3, #31
 800d55e:	d5d7      	bpl.n	800d510 <_printf_float+0x23c>
 800d560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d564:	4631      	mov	r1, r6
 800d566:	4628      	mov	r0, r5
 800d568:	47b8      	blx	r7
 800d56a:	3001      	adds	r0, #1
 800d56c:	f43f af0d 	beq.w	800d38a <_printf_float+0xb6>
 800d570:	f04f 0a00 	mov.w	sl, #0
 800d574:	f104 0b1a 	add.w	fp, r4, #26
 800d578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57a:	425b      	negs	r3, r3
 800d57c:	4553      	cmp	r3, sl
 800d57e:	dc01      	bgt.n	800d584 <_printf_float+0x2b0>
 800d580:	464b      	mov	r3, r9
 800d582:	e793      	b.n	800d4ac <_printf_float+0x1d8>
 800d584:	2301      	movs	r3, #1
 800d586:	465a      	mov	r2, fp
 800d588:	4631      	mov	r1, r6
 800d58a:	4628      	mov	r0, r5
 800d58c:	47b8      	blx	r7
 800d58e:	3001      	adds	r0, #1
 800d590:	f43f aefb 	beq.w	800d38a <_printf_float+0xb6>
 800d594:	f10a 0a01 	add.w	sl, sl, #1
 800d598:	e7ee      	b.n	800d578 <_printf_float+0x2a4>
 800d59a:	bf00      	nop
 800d59c:	7fefffff 	.word	0x7fefffff
 800d5a0:	08013490 	.word	0x08013490
 800d5a4:	08013494 	.word	0x08013494
 800d5a8:	08013498 	.word	0x08013498
 800d5ac:	0801349c 	.word	0x0801349c
 800d5b0:	08013830 	.word	0x08013830
 800d5b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5ba:	4553      	cmp	r3, sl
 800d5bc:	bfa8      	it	ge
 800d5be:	4653      	movge	r3, sl
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	4699      	mov	r9, r3
 800d5c4:	dc36      	bgt.n	800d634 <_printf_float+0x360>
 800d5c6:	f04f 0b00 	mov.w	fp, #0
 800d5ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5ce:	f104 021a 	add.w	r2, r4, #26
 800d5d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5d4:	9306      	str	r3, [sp, #24]
 800d5d6:	eba3 0309 	sub.w	r3, r3, r9
 800d5da:	455b      	cmp	r3, fp
 800d5dc:	dc31      	bgt.n	800d642 <_printf_float+0x36e>
 800d5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e0:	459a      	cmp	sl, r3
 800d5e2:	dc3a      	bgt.n	800d65a <_printf_float+0x386>
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	07da      	lsls	r2, r3, #31
 800d5e8:	d437      	bmi.n	800d65a <_printf_float+0x386>
 800d5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ec:	ebaa 0903 	sub.w	r9, sl, r3
 800d5f0:	9b06      	ldr	r3, [sp, #24]
 800d5f2:	ebaa 0303 	sub.w	r3, sl, r3
 800d5f6:	4599      	cmp	r9, r3
 800d5f8:	bfa8      	it	ge
 800d5fa:	4699      	movge	r9, r3
 800d5fc:	f1b9 0f00 	cmp.w	r9, #0
 800d600:	dc33      	bgt.n	800d66a <_printf_float+0x396>
 800d602:	f04f 0800 	mov.w	r8, #0
 800d606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d60a:	f104 0b1a 	add.w	fp, r4, #26
 800d60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d610:	ebaa 0303 	sub.w	r3, sl, r3
 800d614:	eba3 0309 	sub.w	r3, r3, r9
 800d618:	4543      	cmp	r3, r8
 800d61a:	f77f af79 	ble.w	800d510 <_printf_float+0x23c>
 800d61e:	2301      	movs	r3, #1
 800d620:	465a      	mov	r2, fp
 800d622:	4631      	mov	r1, r6
 800d624:	4628      	mov	r0, r5
 800d626:	47b8      	blx	r7
 800d628:	3001      	adds	r0, #1
 800d62a:	f43f aeae 	beq.w	800d38a <_printf_float+0xb6>
 800d62e:	f108 0801 	add.w	r8, r8, #1
 800d632:	e7ec      	b.n	800d60e <_printf_float+0x33a>
 800d634:	4642      	mov	r2, r8
 800d636:	4631      	mov	r1, r6
 800d638:	4628      	mov	r0, r5
 800d63a:	47b8      	blx	r7
 800d63c:	3001      	adds	r0, #1
 800d63e:	d1c2      	bne.n	800d5c6 <_printf_float+0x2f2>
 800d640:	e6a3      	b.n	800d38a <_printf_float+0xb6>
 800d642:	2301      	movs	r3, #1
 800d644:	4631      	mov	r1, r6
 800d646:	4628      	mov	r0, r5
 800d648:	9206      	str	r2, [sp, #24]
 800d64a:	47b8      	blx	r7
 800d64c:	3001      	adds	r0, #1
 800d64e:	f43f ae9c 	beq.w	800d38a <_printf_float+0xb6>
 800d652:	9a06      	ldr	r2, [sp, #24]
 800d654:	f10b 0b01 	add.w	fp, fp, #1
 800d658:	e7bb      	b.n	800d5d2 <_printf_float+0x2fe>
 800d65a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d65e:	4631      	mov	r1, r6
 800d660:	4628      	mov	r0, r5
 800d662:	47b8      	blx	r7
 800d664:	3001      	adds	r0, #1
 800d666:	d1c0      	bne.n	800d5ea <_printf_float+0x316>
 800d668:	e68f      	b.n	800d38a <_printf_float+0xb6>
 800d66a:	9a06      	ldr	r2, [sp, #24]
 800d66c:	464b      	mov	r3, r9
 800d66e:	4442      	add	r2, r8
 800d670:	4631      	mov	r1, r6
 800d672:	4628      	mov	r0, r5
 800d674:	47b8      	blx	r7
 800d676:	3001      	adds	r0, #1
 800d678:	d1c3      	bne.n	800d602 <_printf_float+0x32e>
 800d67a:	e686      	b.n	800d38a <_printf_float+0xb6>
 800d67c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d680:	f1ba 0f01 	cmp.w	sl, #1
 800d684:	dc01      	bgt.n	800d68a <_printf_float+0x3b6>
 800d686:	07db      	lsls	r3, r3, #31
 800d688:	d536      	bpl.n	800d6f8 <_printf_float+0x424>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4642      	mov	r2, r8
 800d68e:	4631      	mov	r1, r6
 800d690:	4628      	mov	r0, r5
 800d692:	47b8      	blx	r7
 800d694:	3001      	adds	r0, #1
 800d696:	f43f ae78 	beq.w	800d38a <_printf_float+0xb6>
 800d69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d69e:	4631      	mov	r1, r6
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b8      	blx	r7
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	f43f ae70 	beq.w	800d38a <_printf_float+0xb6>
 800d6aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6b6:	f7f3 fa27 	bl	8000b08 <__aeabi_dcmpeq>
 800d6ba:	b9c0      	cbnz	r0, 800d6ee <_printf_float+0x41a>
 800d6bc:	4653      	mov	r3, sl
 800d6be:	f108 0201 	add.w	r2, r8, #1
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	47b8      	blx	r7
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d10c      	bne.n	800d6e6 <_printf_float+0x412>
 800d6cc:	e65d      	b.n	800d38a <_printf_float+0xb6>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	465a      	mov	r2, fp
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	47b8      	blx	r7
 800d6d8:	3001      	adds	r0, #1
 800d6da:	f43f ae56 	beq.w	800d38a <_printf_float+0xb6>
 800d6de:	f108 0801 	add.w	r8, r8, #1
 800d6e2:	45d0      	cmp	r8, sl
 800d6e4:	dbf3      	blt.n	800d6ce <_printf_float+0x3fa>
 800d6e6:	464b      	mov	r3, r9
 800d6e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d6ec:	e6df      	b.n	800d4ae <_printf_float+0x1da>
 800d6ee:	f04f 0800 	mov.w	r8, #0
 800d6f2:	f104 0b1a 	add.w	fp, r4, #26
 800d6f6:	e7f4      	b.n	800d6e2 <_printf_float+0x40e>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	4642      	mov	r2, r8
 800d6fc:	e7e1      	b.n	800d6c2 <_printf_float+0x3ee>
 800d6fe:	2301      	movs	r3, #1
 800d700:	464a      	mov	r2, r9
 800d702:	4631      	mov	r1, r6
 800d704:	4628      	mov	r0, r5
 800d706:	47b8      	blx	r7
 800d708:	3001      	adds	r0, #1
 800d70a:	f43f ae3e 	beq.w	800d38a <_printf_float+0xb6>
 800d70e:	f108 0801 	add.w	r8, r8, #1
 800d712:	68e3      	ldr	r3, [r4, #12]
 800d714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d716:	1a5b      	subs	r3, r3, r1
 800d718:	4543      	cmp	r3, r8
 800d71a:	dcf0      	bgt.n	800d6fe <_printf_float+0x42a>
 800d71c:	e6fc      	b.n	800d518 <_printf_float+0x244>
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	f104 0919 	add.w	r9, r4, #25
 800d726:	e7f4      	b.n	800d712 <_printf_float+0x43e>

0800d728 <_printf_common>:
 800d728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d72c:	4616      	mov	r6, r2
 800d72e:	4698      	mov	r8, r3
 800d730:	688a      	ldr	r2, [r1, #8]
 800d732:	690b      	ldr	r3, [r1, #16]
 800d734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d738:	4293      	cmp	r3, r2
 800d73a:	bfb8      	it	lt
 800d73c:	4613      	movlt	r3, r2
 800d73e:	6033      	str	r3, [r6, #0]
 800d740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d744:	4607      	mov	r7, r0
 800d746:	460c      	mov	r4, r1
 800d748:	b10a      	cbz	r2, 800d74e <_printf_common+0x26>
 800d74a:	3301      	adds	r3, #1
 800d74c:	6033      	str	r3, [r6, #0]
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	0699      	lsls	r1, r3, #26
 800d752:	bf42      	ittt	mi
 800d754:	6833      	ldrmi	r3, [r6, #0]
 800d756:	3302      	addmi	r3, #2
 800d758:	6033      	strmi	r3, [r6, #0]
 800d75a:	6825      	ldr	r5, [r4, #0]
 800d75c:	f015 0506 	ands.w	r5, r5, #6
 800d760:	d106      	bne.n	800d770 <_printf_common+0x48>
 800d762:	f104 0a19 	add.w	sl, r4, #25
 800d766:	68e3      	ldr	r3, [r4, #12]
 800d768:	6832      	ldr	r2, [r6, #0]
 800d76a:	1a9b      	subs	r3, r3, r2
 800d76c:	42ab      	cmp	r3, r5
 800d76e:	dc26      	bgt.n	800d7be <_printf_common+0x96>
 800d770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d774:	6822      	ldr	r2, [r4, #0]
 800d776:	3b00      	subs	r3, #0
 800d778:	bf18      	it	ne
 800d77a:	2301      	movne	r3, #1
 800d77c:	0692      	lsls	r2, r2, #26
 800d77e:	d42b      	bmi.n	800d7d8 <_printf_common+0xb0>
 800d780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d784:	4641      	mov	r1, r8
 800d786:	4638      	mov	r0, r7
 800d788:	47c8      	blx	r9
 800d78a:	3001      	adds	r0, #1
 800d78c:	d01e      	beq.n	800d7cc <_printf_common+0xa4>
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	6922      	ldr	r2, [r4, #16]
 800d792:	f003 0306 	and.w	r3, r3, #6
 800d796:	2b04      	cmp	r3, #4
 800d798:	bf02      	ittt	eq
 800d79a:	68e5      	ldreq	r5, [r4, #12]
 800d79c:	6833      	ldreq	r3, [r6, #0]
 800d79e:	1aed      	subeq	r5, r5, r3
 800d7a0:	68a3      	ldr	r3, [r4, #8]
 800d7a2:	bf0c      	ite	eq
 800d7a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7a8:	2500      	movne	r5, #0
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	bfc4      	itt	gt
 800d7ae:	1a9b      	subgt	r3, r3, r2
 800d7b0:	18ed      	addgt	r5, r5, r3
 800d7b2:	2600      	movs	r6, #0
 800d7b4:	341a      	adds	r4, #26
 800d7b6:	42b5      	cmp	r5, r6
 800d7b8:	d11a      	bne.n	800d7f0 <_printf_common+0xc8>
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e008      	b.n	800d7d0 <_printf_common+0xa8>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	4652      	mov	r2, sl
 800d7c2:	4641      	mov	r1, r8
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	47c8      	blx	r9
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d103      	bne.n	800d7d4 <_printf_common+0xac>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	e7c6      	b.n	800d766 <_printf_common+0x3e>
 800d7d8:	18e1      	adds	r1, r4, r3
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	2030      	movs	r0, #48	@ 0x30
 800d7de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7e2:	4422      	add	r2, r4
 800d7e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7ec:	3302      	adds	r3, #2
 800d7ee:	e7c7      	b.n	800d780 <_printf_common+0x58>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	4641      	mov	r1, r8
 800d7f6:	4638      	mov	r0, r7
 800d7f8:	47c8      	blx	r9
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d0e6      	beq.n	800d7cc <_printf_common+0xa4>
 800d7fe:	3601      	adds	r6, #1
 800d800:	e7d9      	b.n	800d7b6 <_printf_common+0x8e>
	...

0800d804 <_printf_i>:
 800d804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	7e0f      	ldrb	r7, [r1, #24]
 800d80a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d80c:	2f78      	cmp	r7, #120	@ 0x78
 800d80e:	4691      	mov	r9, r2
 800d810:	4680      	mov	r8, r0
 800d812:	460c      	mov	r4, r1
 800d814:	469a      	mov	sl, r3
 800d816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d81a:	d807      	bhi.n	800d82c <_printf_i+0x28>
 800d81c:	2f62      	cmp	r7, #98	@ 0x62
 800d81e:	d80a      	bhi.n	800d836 <_printf_i+0x32>
 800d820:	2f00      	cmp	r7, #0
 800d822:	f000 80d2 	beq.w	800d9ca <_printf_i+0x1c6>
 800d826:	2f58      	cmp	r7, #88	@ 0x58
 800d828:	f000 80b9 	beq.w	800d99e <_printf_i+0x19a>
 800d82c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d834:	e03a      	b.n	800d8ac <_printf_i+0xa8>
 800d836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d83a:	2b15      	cmp	r3, #21
 800d83c:	d8f6      	bhi.n	800d82c <_printf_i+0x28>
 800d83e:	a101      	add	r1, pc, #4	@ (adr r1, 800d844 <_printf_i+0x40>)
 800d840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d844:	0800d89d 	.word	0x0800d89d
 800d848:	0800d8b1 	.word	0x0800d8b1
 800d84c:	0800d82d 	.word	0x0800d82d
 800d850:	0800d82d 	.word	0x0800d82d
 800d854:	0800d82d 	.word	0x0800d82d
 800d858:	0800d82d 	.word	0x0800d82d
 800d85c:	0800d8b1 	.word	0x0800d8b1
 800d860:	0800d82d 	.word	0x0800d82d
 800d864:	0800d82d 	.word	0x0800d82d
 800d868:	0800d82d 	.word	0x0800d82d
 800d86c:	0800d82d 	.word	0x0800d82d
 800d870:	0800d9b1 	.word	0x0800d9b1
 800d874:	0800d8db 	.word	0x0800d8db
 800d878:	0800d96b 	.word	0x0800d96b
 800d87c:	0800d82d 	.word	0x0800d82d
 800d880:	0800d82d 	.word	0x0800d82d
 800d884:	0800d9d3 	.word	0x0800d9d3
 800d888:	0800d82d 	.word	0x0800d82d
 800d88c:	0800d8db 	.word	0x0800d8db
 800d890:	0800d82d 	.word	0x0800d82d
 800d894:	0800d82d 	.word	0x0800d82d
 800d898:	0800d973 	.word	0x0800d973
 800d89c:	6833      	ldr	r3, [r6, #0]
 800d89e:	1d1a      	adds	r2, r3, #4
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6032      	str	r2, [r6, #0]
 800d8a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e09d      	b.n	800d9ec <_printf_i+0x1e8>
 800d8b0:	6833      	ldr	r3, [r6, #0]
 800d8b2:	6820      	ldr	r0, [r4, #0]
 800d8b4:	1d19      	adds	r1, r3, #4
 800d8b6:	6031      	str	r1, [r6, #0]
 800d8b8:	0606      	lsls	r6, r0, #24
 800d8ba:	d501      	bpl.n	800d8c0 <_printf_i+0xbc>
 800d8bc:	681d      	ldr	r5, [r3, #0]
 800d8be:	e003      	b.n	800d8c8 <_printf_i+0xc4>
 800d8c0:	0645      	lsls	r5, r0, #25
 800d8c2:	d5fb      	bpl.n	800d8bc <_printf_i+0xb8>
 800d8c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8c8:	2d00      	cmp	r5, #0
 800d8ca:	da03      	bge.n	800d8d4 <_printf_i+0xd0>
 800d8cc:	232d      	movs	r3, #45	@ 0x2d
 800d8ce:	426d      	negs	r5, r5
 800d8d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8d4:	4859      	ldr	r0, [pc, #356]	@ (800da3c <_printf_i+0x238>)
 800d8d6:	230a      	movs	r3, #10
 800d8d8:	e011      	b.n	800d8fe <_printf_i+0xfa>
 800d8da:	6821      	ldr	r1, [r4, #0]
 800d8dc:	6833      	ldr	r3, [r6, #0]
 800d8de:	0608      	lsls	r0, r1, #24
 800d8e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8e4:	d402      	bmi.n	800d8ec <_printf_i+0xe8>
 800d8e6:	0649      	lsls	r1, r1, #25
 800d8e8:	bf48      	it	mi
 800d8ea:	b2ad      	uxthmi	r5, r5
 800d8ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8ee:	4853      	ldr	r0, [pc, #332]	@ (800da3c <_printf_i+0x238>)
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	bf14      	ite	ne
 800d8f4:	230a      	movne	r3, #10
 800d8f6:	2308      	moveq	r3, #8
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d8fe:	6866      	ldr	r6, [r4, #4]
 800d900:	60a6      	str	r6, [r4, #8]
 800d902:	2e00      	cmp	r6, #0
 800d904:	bfa2      	ittt	ge
 800d906:	6821      	ldrge	r1, [r4, #0]
 800d908:	f021 0104 	bicge.w	r1, r1, #4
 800d90c:	6021      	strge	r1, [r4, #0]
 800d90e:	b90d      	cbnz	r5, 800d914 <_printf_i+0x110>
 800d910:	2e00      	cmp	r6, #0
 800d912:	d04b      	beq.n	800d9ac <_printf_i+0x1a8>
 800d914:	4616      	mov	r6, r2
 800d916:	fbb5 f1f3 	udiv	r1, r5, r3
 800d91a:	fb03 5711 	mls	r7, r3, r1, r5
 800d91e:	5dc7      	ldrb	r7, [r0, r7]
 800d920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d924:	462f      	mov	r7, r5
 800d926:	42bb      	cmp	r3, r7
 800d928:	460d      	mov	r5, r1
 800d92a:	d9f4      	bls.n	800d916 <_printf_i+0x112>
 800d92c:	2b08      	cmp	r3, #8
 800d92e:	d10b      	bne.n	800d948 <_printf_i+0x144>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	07df      	lsls	r7, r3, #31
 800d934:	d508      	bpl.n	800d948 <_printf_i+0x144>
 800d936:	6923      	ldr	r3, [r4, #16]
 800d938:	6861      	ldr	r1, [r4, #4]
 800d93a:	4299      	cmp	r1, r3
 800d93c:	bfde      	ittt	le
 800d93e:	2330      	movle	r3, #48	@ 0x30
 800d940:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d944:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d948:	1b92      	subs	r2, r2, r6
 800d94a:	6122      	str	r2, [r4, #16]
 800d94c:	f8cd a000 	str.w	sl, [sp]
 800d950:	464b      	mov	r3, r9
 800d952:	aa03      	add	r2, sp, #12
 800d954:	4621      	mov	r1, r4
 800d956:	4640      	mov	r0, r8
 800d958:	f7ff fee6 	bl	800d728 <_printf_common>
 800d95c:	3001      	adds	r0, #1
 800d95e:	d14a      	bne.n	800d9f6 <_printf_i+0x1f2>
 800d960:	f04f 30ff 	mov.w	r0, #4294967295
 800d964:	b004      	add	sp, #16
 800d966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	f043 0320 	orr.w	r3, r3, #32
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	4833      	ldr	r0, [pc, #204]	@ (800da40 <_printf_i+0x23c>)
 800d974:	2778      	movs	r7, #120	@ 0x78
 800d976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	6831      	ldr	r1, [r6, #0]
 800d97e:	061f      	lsls	r7, r3, #24
 800d980:	f851 5b04 	ldr.w	r5, [r1], #4
 800d984:	d402      	bmi.n	800d98c <_printf_i+0x188>
 800d986:	065f      	lsls	r7, r3, #25
 800d988:	bf48      	it	mi
 800d98a:	b2ad      	uxthmi	r5, r5
 800d98c:	6031      	str	r1, [r6, #0]
 800d98e:	07d9      	lsls	r1, r3, #31
 800d990:	bf44      	itt	mi
 800d992:	f043 0320 	orrmi.w	r3, r3, #32
 800d996:	6023      	strmi	r3, [r4, #0]
 800d998:	b11d      	cbz	r5, 800d9a2 <_printf_i+0x19e>
 800d99a:	2310      	movs	r3, #16
 800d99c:	e7ac      	b.n	800d8f8 <_printf_i+0xf4>
 800d99e:	4827      	ldr	r0, [pc, #156]	@ (800da3c <_printf_i+0x238>)
 800d9a0:	e7e9      	b.n	800d976 <_printf_i+0x172>
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	f023 0320 	bic.w	r3, r3, #32
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	e7f6      	b.n	800d99a <_printf_i+0x196>
 800d9ac:	4616      	mov	r6, r2
 800d9ae:	e7bd      	b.n	800d92c <_printf_i+0x128>
 800d9b0:	6833      	ldr	r3, [r6, #0]
 800d9b2:	6825      	ldr	r5, [r4, #0]
 800d9b4:	6961      	ldr	r1, [r4, #20]
 800d9b6:	1d18      	adds	r0, r3, #4
 800d9b8:	6030      	str	r0, [r6, #0]
 800d9ba:	062e      	lsls	r6, r5, #24
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	d501      	bpl.n	800d9c4 <_printf_i+0x1c0>
 800d9c0:	6019      	str	r1, [r3, #0]
 800d9c2:	e002      	b.n	800d9ca <_printf_i+0x1c6>
 800d9c4:	0668      	lsls	r0, r5, #25
 800d9c6:	d5fb      	bpl.n	800d9c0 <_printf_i+0x1bc>
 800d9c8:	8019      	strh	r1, [r3, #0]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	6123      	str	r3, [r4, #16]
 800d9ce:	4616      	mov	r6, r2
 800d9d0:	e7bc      	b.n	800d94c <_printf_i+0x148>
 800d9d2:	6833      	ldr	r3, [r6, #0]
 800d9d4:	1d1a      	adds	r2, r3, #4
 800d9d6:	6032      	str	r2, [r6, #0]
 800d9d8:	681e      	ldr	r6, [r3, #0]
 800d9da:	6862      	ldr	r2, [r4, #4]
 800d9dc:	2100      	movs	r1, #0
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7f2 fc16 	bl	8000210 <memchr>
 800d9e4:	b108      	cbz	r0, 800d9ea <_printf_i+0x1e6>
 800d9e6:	1b80      	subs	r0, r0, r6
 800d9e8:	6060      	str	r0, [r4, #4]
 800d9ea:	6863      	ldr	r3, [r4, #4]
 800d9ec:	6123      	str	r3, [r4, #16]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9f4:	e7aa      	b.n	800d94c <_printf_i+0x148>
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	4632      	mov	r2, r6
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	47d0      	blx	sl
 800da00:	3001      	adds	r0, #1
 800da02:	d0ad      	beq.n	800d960 <_printf_i+0x15c>
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	079b      	lsls	r3, r3, #30
 800da08:	d413      	bmi.n	800da32 <_printf_i+0x22e>
 800da0a:	68e0      	ldr	r0, [r4, #12]
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	4298      	cmp	r0, r3
 800da10:	bfb8      	it	lt
 800da12:	4618      	movlt	r0, r3
 800da14:	e7a6      	b.n	800d964 <_printf_i+0x160>
 800da16:	2301      	movs	r3, #1
 800da18:	4632      	mov	r2, r6
 800da1a:	4649      	mov	r1, r9
 800da1c:	4640      	mov	r0, r8
 800da1e:	47d0      	blx	sl
 800da20:	3001      	adds	r0, #1
 800da22:	d09d      	beq.n	800d960 <_printf_i+0x15c>
 800da24:	3501      	adds	r5, #1
 800da26:	68e3      	ldr	r3, [r4, #12]
 800da28:	9903      	ldr	r1, [sp, #12]
 800da2a:	1a5b      	subs	r3, r3, r1
 800da2c:	42ab      	cmp	r3, r5
 800da2e:	dcf2      	bgt.n	800da16 <_printf_i+0x212>
 800da30:	e7eb      	b.n	800da0a <_printf_i+0x206>
 800da32:	2500      	movs	r5, #0
 800da34:	f104 0619 	add.w	r6, r4, #25
 800da38:	e7f5      	b.n	800da26 <_printf_i+0x222>
 800da3a:	bf00      	nop
 800da3c:	080134a0 	.word	0x080134a0
 800da40:	080134b1 	.word	0x080134b1

0800da44 <_scanf_float>:
 800da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da48:	b087      	sub	sp, #28
 800da4a:	4617      	mov	r7, r2
 800da4c:	9303      	str	r3, [sp, #12]
 800da4e:	688b      	ldr	r3, [r1, #8]
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800da56:	bf81      	itttt	hi
 800da58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800da5c:	eb03 0b05 	addhi.w	fp, r3, r5
 800da60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800da64:	608b      	strhi	r3, [r1, #8]
 800da66:	680b      	ldr	r3, [r1, #0]
 800da68:	460a      	mov	r2, r1
 800da6a:	f04f 0500 	mov.w	r5, #0
 800da6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800da72:	f842 3b1c 	str.w	r3, [r2], #28
 800da76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da7a:	4680      	mov	r8, r0
 800da7c:	460c      	mov	r4, r1
 800da7e:	bf98      	it	ls
 800da80:	f04f 0b00 	movls.w	fp, #0
 800da84:	9201      	str	r2, [sp, #4]
 800da86:	4616      	mov	r6, r2
 800da88:	46aa      	mov	sl, r5
 800da8a:	46a9      	mov	r9, r5
 800da8c:	9502      	str	r5, [sp, #8]
 800da8e:	68a2      	ldr	r2, [r4, #8]
 800da90:	b152      	cbz	r2, 800daa8 <_scanf_float+0x64>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b4e      	cmp	r3, #78	@ 0x4e
 800da98:	d864      	bhi.n	800db64 <_scanf_float+0x120>
 800da9a:	2b40      	cmp	r3, #64	@ 0x40
 800da9c:	d83c      	bhi.n	800db18 <_scanf_float+0xd4>
 800da9e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800daa2:	b2c8      	uxtb	r0, r1
 800daa4:	280e      	cmp	r0, #14
 800daa6:	d93a      	bls.n	800db1e <_scanf_float+0xda>
 800daa8:	f1b9 0f00 	cmp.w	r9, #0
 800daac:	d003      	beq.n	800dab6 <_scanf_float+0x72>
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800daba:	f1ba 0f01 	cmp.w	sl, #1
 800dabe:	f200 8117 	bhi.w	800dcf0 <_scanf_float+0x2ac>
 800dac2:	9b01      	ldr	r3, [sp, #4]
 800dac4:	429e      	cmp	r6, r3
 800dac6:	f200 8108 	bhi.w	800dcda <_scanf_float+0x296>
 800daca:	2001      	movs	r0, #1
 800dacc:	b007      	add	sp, #28
 800dace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dad6:	2a0d      	cmp	r2, #13
 800dad8:	d8e6      	bhi.n	800daa8 <_scanf_float+0x64>
 800dada:	a101      	add	r1, pc, #4	@ (adr r1, 800dae0 <_scanf_float+0x9c>)
 800dadc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dae0:	0800dc27 	.word	0x0800dc27
 800dae4:	0800daa9 	.word	0x0800daa9
 800dae8:	0800daa9 	.word	0x0800daa9
 800daec:	0800daa9 	.word	0x0800daa9
 800daf0:	0800dc87 	.word	0x0800dc87
 800daf4:	0800dc5f 	.word	0x0800dc5f
 800daf8:	0800daa9 	.word	0x0800daa9
 800dafc:	0800daa9 	.word	0x0800daa9
 800db00:	0800dc35 	.word	0x0800dc35
 800db04:	0800daa9 	.word	0x0800daa9
 800db08:	0800daa9 	.word	0x0800daa9
 800db0c:	0800daa9 	.word	0x0800daa9
 800db10:	0800daa9 	.word	0x0800daa9
 800db14:	0800dbed 	.word	0x0800dbed
 800db18:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800db1c:	e7db      	b.n	800dad6 <_scanf_float+0x92>
 800db1e:	290e      	cmp	r1, #14
 800db20:	d8c2      	bhi.n	800daa8 <_scanf_float+0x64>
 800db22:	a001      	add	r0, pc, #4	@ (adr r0, 800db28 <_scanf_float+0xe4>)
 800db24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800db28:	0800dbdd 	.word	0x0800dbdd
 800db2c:	0800daa9 	.word	0x0800daa9
 800db30:	0800dbdd 	.word	0x0800dbdd
 800db34:	0800dc73 	.word	0x0800dc73
 800db38:	0800daa9 	.word	0x0800daa9
 800db3c:	0800db85 	.word	0x0800db85
 800db40:	0800dbc3 	.word	0x0800dbc3
 800db44:	0800dbc3 	.word	0x0800dbc3
 800db48:	0800dbc3 	.word	0x0800dbc3
 800db4c:	0800dbc3 	.word	0x0800dbc3
 800db50:	0800dbc3 	.word	0x0800dbc3
 800db54:	0800dbc3 	.word	0x0800dbc3
 800db58:	0800dbc3 	.word	0x0800dbc3
 800db5c:	0800dbc3 	.word	0x0800dbc3
 800db60:	0800dbc3 	.word	0x0800dbc3
 800db64:	2b6e      	cmp	r3, #110	@ 0x6e
 800db66:	d809      	bhi.n	800db7c <_scanf_float+0x138>
 800db68:	2b60      	cmp	r3, #96	@ 0x60
 800db6a:	d8b2      	bhi.n	800dad2 <_scanf_float+0x8e>
 800db6c:	2b54      	cmp	r3, #84	@ 0x54
 800db6e:	d07b      	beq.n	800dc68 <_scanf_float+0x224>
 800db70:	2b59      	cmp	r3, #89	@ 0x59
 800db72:	d199      	bne.n	800daa8 <_scanf_float+0x64>
 800db74:	2d07      	cmp	r5, #7
 800db76:	d197      	bne.n	800daa8 <_scanf_float+0x64>
 800db78:	2508      	movs	r5, #8
 800db7a:	e02c      	b.n	800dbd6 <_scanf_float+0x192>
 800db7c:	2b74      	cmp	r3, #116	@ 0x74
 800db7e:	d073      	beq.n	800dc68 <_scanf_float+0x224>
 800db80:	2b79      	cmp	r3, #121	@ 0x79
 800db82:	e7f6      	b.n	800db72 <_scanf_float+0x12e>
 800db84:	6821      	ldr	r1, [r4, #0]
 800db86:	05c8      	lsls	r0, r1, #23
 800db88:	d51b      	bpl.n	800dbc2 <_scanf_float+0x17e>
 800db8a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800db8e:	6021      	str	r1, [r4, #0]
 800db90:	f109 0901 	add.w	r9, r9, #1
 800db94:	f1bb 0f00 	cmp.w	fp, #0
 800db98:	d003      	beq.n	800dba2 <_scanf_float+0x15e>
 800db9a:	3201      	adds	r2, #1
 800db9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dba0:	60a2      	str	r2, [r4, #8]
 800dba2:	68a3      	ldr	r3, [r4, #8]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	60a3      	str	r3, [r4, #8]
 800dba8:	6923      	ldr	r3, [r4, #16]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	6123      	str	r3, [r4, #16]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	607b      	str	r3, [r7, #4]
 800dbb6:	f340 8087 	ble.w	800dcc8 <_scanf_float+0x284>
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	603b      	str	r3, [r7, #0]
 800dbc0:	e765      	b.n	800da8e <_scanf_float+0x4a>
 800dbc2:	eb1a 0105 	adds.w	r1, sl, r5
 800dbc6:	f47f af6f 	bne.w	800daa8 <_scanf_float+0x64>
 800dbca:	6822      	ldr	r2, [r4, #0]
 800dbcc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dbd0:	6022      	str	r2, [r4, #0]
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	468a      	mov	sl, r1
 800dbd6:	f806 3b01 	strb.w	r3, [r6], #1
 800dbda:	e7e2      	b.n	800dba2 <_scanf_float+0x15e>
 800dbdc:	6822      	ldr	r2, [r4, #0]
 800dbde:	0610      	lsls	r0, r2, #24
 800dbe0:	f57f af62 	bpl.w	800daa8 <_scanf_float+0x64>
 800dbe4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dbe8:	6022      	str	r2, [r4, #0]
 800dbea:	e7f4      	b.n	800dbd6 <_scanf_float+0x192>
 800dbec:	f1ba 0f00 	cmp.w	sl, #0
 800dbf0:	d10e      	bne.n	800dc10 <_scanf_float+0x1cc>
 800dbf2:	f1b9 0f00 	cmp.w	r9, #0
 800dbf6:	d10e      	bne.n	800dc16 <_scanf_float+0x1d2>
 800dbf8:	6822      	ldr	r2, [r4, #0]
 800dbfa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dbfe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dc02:	d108      	bne.n	800dc16 <_scanf_float+0x1d2>
 800dc04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc08:	6022      	str	r2, [r4, #0]
 800dc0a:	f04f 0a01 	mov.w	sl, #1
 800dc0e:	e7e2      	b.n	800dbd6 <_scanf_float+0x192>
 800dc10:	f1ba 0f02 	cmp.w	sl, #2
 800dc14:	d055      	beq.n	800dcc2 <_scanf_float+0x27e>
 800dc16:	2d01      	cmp	r5, #1
 800dc18:	d002      	beq.n	800dc20 <_scanf_float+0x1dc>
 800dc1a:	2d04      	cmp	r5, #4
 800dc1c:	f47f af44 	bne.w	800daa8 <_scanf_float+0x64>
 800dc20:	3501      	adds	r5, #1
 800dc22:	b2ed      	uxtb	r5, r5
 800dc24:	e7d7      	b.n	800dbd6 <_scanf_float+0x192>
 800dc26:	f1ba 0f01 	cmp.w	sl, #1
 800dc2a:	f47f af3d 	bne.w	800daa8 <_scanf_float+0x64>
 800dc2e:	f04f 0a02 	mov.w	sl, #2
 800dc32:	e7d0      	b.n	800dbd6 <_scanf_float+0x192>
 800dc34:	b97d      	cbnz	r5, 800dc56 <_scanf_float+0x212>
 800dc36:	f1b9 0f00 	cmp.w	r9, #0
 800dc3a:	f47f af38 	bne.w	800daae <_scanf_float+0x6a>
 800dc3e:	6822      	ldr	r2, [r4, #0]
 800dc40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dc44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dc48:	f040 8108 	bne.w	800de5c <_scanf_float+0x418>
 800dc4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc50:	6022      	str	r2, [r4, #0]
 800dc52:	2501      	movs	r5, #1
 800dc54:	e7bf      	b.n	800dbd6 <_scanf_float+0x192>
 800dc56:	2d03      	cmp	r5, #3
 800dc58:	d0e2      	beq.n	800dc20 <_scanf_float+0x1dc>
 800dc5a:	2d05      	cmp	r5, #5
 800dc5c:	e7de      	b.n	800dc1c <_scanf_float+0x1d8>
 800dc5e:	2d02      	cmp	r5, #2
 800dc60:	f47f af22 	bne.w	800daa8 <_scanf_float+0x64>
 800dc64:	2503      	movs	r5, #3
 800dc66:	e7b6      	b.n	800dbd6 <_scanf_float+0x192>
 800dc68:	2d06      	cmp	r5, #6
 800dc6a:	f47f af1d 	bne.w	800daa8 <_scanf_float+0x64>
 800dc6e:	2507      	movs	r5, #7
 800dc70:	e7b1      	b.n	800dbd6 <_scanf_float+0x192>
 800dc72:	6822      	ldr	r2, [r4, #0]
 800dc74:	0591      	lsls	r1, r2, #22
 800dc76:	f57f af17 	bpl.w	800daa8 <_scanf_float+0x64>
 800dc7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dc7e:	6022      	str	r2, [r4, #0]
 800dc80:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc84:	e7a7      	b.n	800dbd6 <_scanf_float+0x192>
 800dc86:	6822      	ldr	r2, [r4, #0]
 800dc88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dc8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dc90:	d006      	beq.n	800dca0 <_scanf_float+0x25c>
 800dc92:	0550      	lsls	r0, r2, #21
 800dc94:	f57f af08 	bpl.w	800daa8 <_scanf_float+0x64>
 800dc98:	f1b9 0f00 	cmp.w	r9, #0
 800dc9c:	f000 80de 	beq.w	800de5c <_scanf_float+0x418>
 800dca0:	0591      	lsls	r1, r2, #22
 800dca2:	bf58      	it	pl
 800dca4:	9902      	ldrpl	r1, [sp, #8]
 800dca6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dcaa:	bf58      	it	pl
 800dcac:	eba9 0101 	subpl.w	r1, r9, r1
 800dcb0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dcb4:	bf58      	it	pl
 800dcb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dcba:	6022      	str	r2, [r4, #0]
 800dcbc:	f04f 0900 	mov.w	r9, #0
 800dcc0:	e789      	b.n	800dbd6 <_scanf_float+0x192>
 800dcc2:	f04f 0a03 	mov.w	sl, #3
 800dcc6:	e786      	b.n	800dbd6 <_scanf_float+0x192>
 800dcc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dccc:	4639      	mov	r1, r7
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4798      	blx	r3
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	f43f aedb 	beq.w	800da8e <_scanf_float+0x4a>
 800dcd8:	e6e6      	b.n	800daa8 <_scanf_float+0x64>
 800dcda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dcde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dce2:	463a      	mov	r2, r7
 800dce4:	4640      	mov	r0, r8
 800dce6:	4798      	blx	r3
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	6123      	str	r3, [r4, #16]
 800dcee:	e6e8      	b.n	800dac2 <_scanf_float+0x7e>
 800dcf0:	1e6b      	subs	r3, r5, #1
 800dcf2:	2b06      	cmp	r3, #6
 800dcf4:	d824      	bhi.n	800dd40 <_scanf_float+0x2fc>
 800dcf6:	2d02      	cmp	r5, #2
 800dcf8:	d836      	bhi.n	800dd68 <_scanf_float+0x324>
 800dcfa:	9b01      	ldr	r3, [sp, #4]
 800dcfc:	429e      	cmp	r6, r3
 800dcfe:	f67f aee4 	bls.w	800daca <_scanf_float+0x86>
 800dd02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd0a:	463a      	mov	r2, r7
 800dd0c:	4640      	mov	r0, r8
 800dd0e:	4798      	blx	r3
 800dd10:	6923      	ldr	r3, [r4, #16]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	6123      	str	r3, [r4, #16]
 800dd16:	e7f0      	b.n	800dcfa <_scanf_float+0x2b6>
 800dd18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dd20:	463a      	mov	r2, r7
 800dd22:	4640      	mov	r0, r8
 800dd24:	4798      	blx	r3
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	6123      	str	r3, [r4, #16]
 800dd2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd30:	fa5f fa8a 	uxtb.w	sl, sl
 800dd34:	f1ba 0f02 	cmp.w	sl, #2
 800dd38:	d1ee      	bne.n	800dd18 <_scanf_float+0x2d4>
 800dd3a:	3d03      	subs	r5, #3
 800dd3c:	b2ed      	uxtb	r5, r5
 800dd3e:	1b76      	subs	r6, r6, r5
 800dd40:	6823      	ldr	r3, [r4, #0]
 800dd42:	05da      	lsls	r2, r3, #23
 800dd44:	d530      	bpl.n	800dda8 <_scanf_float+0x364>
 800dd46:	055b      	lsls	r3, r3, #21
 800dd48:	d511      	bpl.n	800dd6e <_scanf_float+0x32a>
 800dd4a:	9b01      	ldr	r3, [sp, #4]
 800dd4c:	429e      	cmp	r6, r3
 800dd4e:	f67f aebc 	bls.w	800daca <_scanf_float+0x86>
 800dd52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd5a:	463a      	mov	r2, r7
 800dd5c:	4640      	mov	r0, r8
 800dd5e:	4798      	blx	r3
 800dd60:	6923      	ldr	r3, [r4, #16]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	6123      	str	r3, [r4, #16]
 800dd66:	e7f0      	b.n	800dd4a <_scanf_float+0x306>
 800dd68:	46aa      	mov	sl, r5
 800dd6a:	46b3      	mov	fp, r6
 800dd6c:	e7de      	b.n	800dd2c <_scanf_float+0x2e8>
 800dd6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	2965      	cmp	r1, #101	@ 0x65
 800dd76:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd7a:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd7e:	6123      	str	r3, [r4, #16]
 800dd80:	d00c      	beq.n	800dd9c <_scanf_float+0x358>
 800dd82:	2945      	cmp	r1, #69	@ 0x45
 800dd84:	d00a      	beq.n	800dd9c <_scanf_float+0x358>
 800dd86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd8a:	463a      	mov	r2, r7
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	4798      	blx	r3
 800dd90:	6923      	ldr	r3, [r4, #16]
 800dd92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	1eb5      	subs	r5, r6, #2
 800dd9a:	6123      	str	r3, [r4, #16]
 800dd9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dda0:	463a      	mov	r2, r7
 800dda2:	4640      	mov	r0, r8
 800dda4:	4798      	blx	r3
 800dda6:	462e      	mov	r6, r5
 800dda8:	6822      	ldr	r2, [r4, #0]
 800ddaa:	f012 0210 	ands.w	r2, r2, #16
 800ddae:	d001      	beq.n	800ddb4 <_scanf_float+0x370>
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	e68b      	b.n	800dacc <_scanf_float+0x88>
 800ddb4:	7032      	strb	r2, [r6, #0]
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ddbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddc0:	d11c      	bne.n	800ddfc <_scanf_float+0x3b8>
 800ddc2:	9b02      	ldr	r3, [sp, #8]
 800ddc4:	454b      	cmp	r3, r9
 800ddc6:	eba3 0209 	sub.w	r2, r3, r9
 800ddca:	d123      	bne.n	800de14 <_scanf_float+0x3d0>
 800ddcc:	9901      	ldr	r1, [sp, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	f002 fbbd 	bl	8010550 <_strtod_r>
 800ddd6:	9b03      	ldr	r3, [sp, #12]
 800ddd8:	6821      	ldr	r1, [r4, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f011 0f02 	tst.w	r1, #2
 800dde0:	ec57 6b10 	vmov	r6, r7, d0
 800dde4:	f103 0204 	add.w	r2, r3, #4
 800dde8:	d01f      	beq.n	800de2a <_scanf_float+0x3e6>
 800ddea:	9903      	ldr	r1, [sp, #12]
 800ddec:	600a      	str	r2, [r1, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	e9c3 6700 	strd	r6, r7, [r3]
 800ddf4:	68e3      	ldr	r3, [r4, #12]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	60e3      	str	r3, [r4, #12]
 800ddfa:	e7d9      	b.n	800ddb0 <_scanf_float+0x36c>
 800ddfc:	9b04      	ldr	r3, [sp, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0e4      	beq.n	800ddcc <_scanf_float+0x388>
 800de02:	9905      	ldr	r1, [sp, #20]
 800de04:	230a      	movs	r3, #10
 800de06:	3101      	adds	r1, #1
 800de08:	4640      	mov	r0, r8
 800de0a:	f002 fc21 	bl	8010650 <_strtol_r>
 800de0e:	9b04      	ldr	r3, [sp, #16]
 800de10:	9e05      	ldr	r6, [sp, #20]
 800de12:	1ac2      	subs	r2, r0, r3
 800de14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800de18:	429e      	cmp	r6, r3
 800de1a:	bf28      	it	cs
 800de1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800de20:	4910      	ldr	r1, [pc, #64]	@ (800de64 <_scanf_float+0x420>)
 800de22:	4630      	mov	r0, r6
 800de24:	f000 f8e4 	bl	800dff0 <siprintf>
 800de28:	e7d0      	b.n	800ddcc <_scanf_float+0x388>
 800de2a:	f011 0f04 	tst.w	r1, #4
 800de2e:	9903      	ldr	r1, [sp, #12]
 800de30:	600a      	str	r2, [r1, #0]
 800de32:	d1dc      	bne.n	800ddee <_scanf_float+0x3aa>
 800de34:	681d      	ldr	r5, [r3, #0]
 800de36:	4632      	mov	r2, r6
 800de38:	463b      	mov	r3, r7
 800de3a:	4630      	mov	r0, r6
 800de3c:	4639      	mov	r1, r7
 800de3e:	f7f2 fe95 	bl	8000b6c <__aeabi_dcmpun>
 800de42:	b128      	cbz	r0, 800de50 <_scanf_float+0x40c>
 800de44:	4808      	ldr	r0, [pc, #32]	@ (800de68 <_scanf_float+0x424>)
 800de46:	f000 fa27 	bl	800e298 <nanf>
 800de4a:	ed85 0a00 	vstr	s0, [r5]
 800de4e:	e7d1      	b.n	800ddf4 <_scanf_float+0x3b0>
 800de50:	4630      	mov	r0, r6
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fee8 	bl	8000c28 <__aeabi_d2f>
 800de58:	6028      	str	r0, [r5, #0]
 800de5a:	e7cb      	b.n	800ddf4 <_scanf_float+0x3b0>
 800de5c:	f04f 0900 	mov.w	r9, #0
 800de60:	e629      	b.n	800dab6 <_scanf_float+0x72>
 800de62:	bf00      	nop
 800de64:	080134c2 	.word	0x080134c2
 800de68:	08013878 	.word	0x08013878

0800de6c <std>:
 800de6c:	2300      	movs	r3, #0
 800de6e:	b510      	push	{r4, lr}
 800de70:	4604      	mov	r4, r0
 800de72:	e9c0 3300 	strd	r3, r3, [r0]
 800de76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de7a:	6083      	str	r3, [r0, #8]
 800de7c:	8181      	strh	r1, [r0, #12]
 800de7e:	6643      	str	r3, [r0, #100]	@ 0x64
 800de80:	81c2      	strh	r2, [r0, #14]
 800de82:	6183      	str	r3, [r0, #24]
 800de84:	4619      	mov	r1, r3
 800de86:	2208      	movs	r2, #8
 800de88:	305c      	adds	r0, #92	@ 0x5c
 800de8a:	f000 f950 	bl	800e12e <memset>
 800de8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dec4 <std+0x58>)
 800de90:	6263      	str	r3, [r4, #36]	@ 0x24
 800de92:	4b0d      	ldr	r3, [pc, #52]	@ (800dec8 <std+0x5c>)
 800de94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de96:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <std+0x60>)
 800de98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <std+0x64>)
 800de9c:	6323      	str	r3, [r4, #48]	@ 0x30
 800de9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ded4 <std+0x68>)
 800dea0:	6224      	str	r4, [r4, #32]
 800dea2:	429c      	cmp	r4, r3
 800dea4:	d006      	beq.n	800deb4 <std+0x48>
 800dea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800deaa:	4294      	cmp	r4, r2
 800deac:	d002      	beq.n	800deb4 <std+0x48>
 800deae:	33d0      	adds	r3, #208	@ 0xd0
 800deb0:	429c      	cmp	r4, r3
 800deb2:	d105      	bne.n	800dec0 <std+0x54>
 800deb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800deb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800debc:	f000 b9da 	b.w	800e274 <__retarget_lock_init_recursive>
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	bf00      	nop
 800dec4:	0800e085 	.word	0x0800e085
 800dec8:	0800e0ab 	.word	0x0800e0ab
 800decc:	0800e0e3 	.word	0x0800e0e3
 800ded0:	0800e107 	.word	0x0800e107
 800ded4:	200016e0 	.word	0x200016e0

0800ded8 <stdio_exit_handler>:
 800ded8:	4a02      	ldr	r2, [pc, #8]	@ (800dee4 <stdio_exit_handler+0xc>)
 800deda:	4903      	ldr	r1, [pc, #12]	@ (800dee8 <stdio_exit_handler+0x10>)
 800dedc:	4803      	ldr	r0, [pc, #12]	@ (800deec <stdio_exit_handler+0x14>)
 800dede:	f000 b869 	b.w	800dfb4 <_fwalk_sglue>
 800dee2:	bf00      	nop
 800dee4:	20000040 	.word	0x20000040
 800dee8:	08011041 	.word	0x08011041
 800deec:	20000050 	.word	0x20000050

0800def0 <cleanup_stdio>:
 800def0:	6841      	ldr	r1, [r0, #4]
 800def2:	4b0c      	ldr	r3, [pc, #48]	@ (800df24 <cleanup_stdio+0x34>)
 800def4:	4299      	cmp	r1, r3
 800def6:	b510      	push	{r4, lr}
 800def8:	4604      	mov	r4, r0
 800defa:	d001      	beq.n	800df00 <cleanup_stdio+0x10>
 800defc:	f003 f8a0 	bl	8011040 <_fflush_r>
 800df00:	68a1      	ldr	r1, [r4, #8]
 800df02:	4b09      	ldr	r3, [pc, #36]	@ (800df28 <cleanup_stdio+0x38>)
 800df04:	4299      	cmp	r1, r3
 800df06:	d002      	beq.n	800df0e <cleanup_stdio+0x1e>
 800df08:	4620      	mov	r0, r4
 800df0a:	f003 f899 	bl	8011040 <_fflush_r>
 800df0e:	68e1      	ldr	r1, [r4, #12]
 800df10:	4b06      	ldr	r3, [pc, #24]	@ (800df2c <cleanup_stdio+0x3c>)
 800df12:	4299      	cmp	r1, r3
 800df14:	d004      	beq.n	800df20 <cleanup_stdio+0x30>
 800df16:	4620      	mov	r0, r4
 800df18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df1c:	f003 b890 	b.w	8011040 <_fflush_r>
 800df20:	bd10      	pop	{r4, pc}
 800df22:	bf00      	nop
 800df24:	200016e0 	.word	0x200016e0
 800df28:	20001748 	.word	0x20001748
 800df2c:	200017b0 	.word	0x200017b0

0800df30 <global_stdio_init.part.0>:
 800df30:	b510      	push	{r4, lr}
 800df32:	4b0b      	ldr	r3, [pc, #44]	@ (800df60 <global_stdio_init.part.0+0x30>)
 800df34:	4c0b      	ldr	r4, [pc, #44]	@ (800df64 <global_stdio_init.part.0+0x34>)
 800df36:	4a0c      	ldr	r2, [pc, #48]	@ (800df68 <global_stdio_init.part.0+0x38>)
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	4620      	mov	r0, r4
 800df3c:	2200      	movs	r2, #0
 800df3e:	2104      	movs	r1, #4
 800df40:	f7ff ff94 	bl	800de6c <std>
 800df44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df48:	2201      	movs	r2, #1
 800df4a:	2109      	movs	r1, #9
 800df4c:	f7ff ff8e 	bl	800de6c <std>
 800df50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df54:	2202      	movs	r2, #2
 800df56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df5a:	2112      	movs	r1, #18
 800df5c:	f7ff bf86 	b.w	800de6c <std>
 800df60:	20001818 	.word	0x20001818
 800df64:	200016e0 	.word	0x200016e0
 800df68:	0800ded9 	.word	0x0800ded9

0800df6c <__sfp_lock_acquire>:
 800df6c:	4801      	ldr	r0, [pc, #4]	@ (800df74 <__sfp_lock_acquire+0x8>)
 800df6e:	f000 b982 	b.w	800e276 <__retarget_lock_acquire_recursive>
 800df72:	bf00      	nop
 800df74:	20001821 	.word	0x20001821

0800df78 <__sfp_lock_release>:
 800df78:	4801      	ldr	r0, [pc, #4]	@ (800df80 <__sfp_lock_release+0x8>)
 800df7a:	f000 b97d 	b.w	800e278 <__retarget_lock_release_recursive>
 800df7e:	bf00      	nop
 800df80:	20001821 	.word	0x20001821

0800df84 <__sinit>:
 800df84:	b510      	push	{r4, lr}
 800df86:	4604      	mov	r4, r0
 800df88:	f7ff fff0 	bl	800df6c <__sfp_lock_acquire>
 800df8c:	6a23      	ldr	r3, [r4, #32]
 800df8e:	b11b      	cbz	r3, 800df98 <__sinit+0x14>
 800df90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df94:	f7ff bff0 	b.w	800df78 <__sfp_lock_release>
 800df98:	4b04      	ldr	r3, [pc, #16]	@ (800dfac <__sinit+0x28>)
 800df9a:	6223      	str	r3, [r4, #32]
 800df9c:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <__sinit+0x2c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f5      	bne.n	800df90 <__sinit+0xc>
 800dfa4:	f7ff ffc4 	bl	800df30 <global_stdio_init.part.0>
 800dfa8:	e7f2      	b.n	800df90 <__sinit+0xc>
 800dfaa:	bf00      	nop
 800dfac:	0800def1 	.word	0x0800def1
 800dfb0:	20001818 	.word	0x20001818

0800dfb4 <_fwalk_sglue>:
 800dfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb8:	4607      	mov	r7, r0
 800dfba:	4688      	mov	r8, r1
 800dfbc:	4614      	mov	r4, r2
 800dfbe:	2600      	movs	r6, #0
 800dfc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfc4:	f1b9 0901 	subs.w	r9, r9, #1
 800dfc8:	d505      	bpl.n	800dfd6 <_fwalk_sglue+0x22>
 800dfca:	6824      	ldr	r4, [r4, #0]
 800dfcc:	2c00      	cmp	r4, #0
 800dfce:	d1f7      	bne.n	800dfc0 <_fwalk_sglue+0xc>
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d907      	bls.n	800dfec <_fwalk_sglue+0x38>
 800dfdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	d003      	beq.n	800dfec <_fwalk_sglue+0x38>
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	47c0      	blx	r8
 800dfea:	4306      	orrs	r6, r0
 800dfec:	3568      	adds	r5, #104	@ 0x68
 800dfee:	e7e9      	b.n	800dfc4 <_fwalk_sglue+0x10>

0800dff0 <siprintf>:
 800dff0:	b40e      	push	{r1, r2, r3}
 800dff2:	b500      	push	{lr}
 800dff4:	b09c      	sub	sp, #112	@ 0x70
 800dff6:	ab1d      	add	r3, sp, #116	@ 0x74
 800dff8:	9002      	str	r0, [sp, #8]
 800dffa:	9006      	str	r0, [sp, #24]
 800dffc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e000:	4809      	ldr	r0, [pc, #36]	@ (800e028 <siprintf+0x38>)
 800e002:	9107      	str	r1, [sp, #28]
 800e004:	9104      	str	r1, [sp, #16]
 800e006:	4909      	ldr	r1, [pc, #36]	@ (800e02c <siprintf+0x3c>)
 800e008:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00c:	9105      	str	r1, [sp, #20]
 800e00e:	6800      	ldr	r0, [r0, #0]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	a902      	add	r1, sp, #8
 800e014:	f002 fb7a 	bl	801070c <_svfiprintf_r>
 800e018:	9b02      	ldr	r3, [sp, #8]
 800e01a:	2200      	movs	r2, #0
 800e01c:	701a      	strb	r2, [r3, #0]
 800e01e:	b01c      	add	sp, #112	@ 0x70
 800e020:	f85d eb04 	ldr.w	lr, [sp], #4
 800e024:	b003      	add	sp, #12
 800e026:	4770      	bx	lr
 800e028:	2000004c 	.word	0x2000004c
 800e02c:	ffff0208 	.word	0xffff0208

0800e030 <siscanf>:
 800e030:	b40e      	push	{r1, r2, r3}
 800e032:	b530      	push	{r4, r5, lr}
 800e034:	b09c      	sub	sp, #112	@ 0x70
 800e036:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e038:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e03c:	f854 5b04 	ldr.w	r5, [r4], #4
 800e040:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e044:	9002      	str	r0, [sp, #8]
 800e046:	9006      	str	r0, [sp, #24]
 800e048:	f7f2 f932 	bl	80002b0 <strlen>
 800e04c:	4b0b      	ldr	r3, [pc, #44]	@ (800e07c <siscanf+0x4c>)
 800e04e:	9003      	str	r0, [sp, #12]
 800e050:	9007      	str	r0, [sp, #28]
 800e052:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e054:	480a      	ldr	r0, [pc, #40]	@ (800e080 <siscanf+0x50>)
 800e056:	9401      	str	r4, [sp, #4]
 800e058:	2300      	movs	r3, #0
 800e05a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e05c:	9314      	str	r3, [sp, #80]	@ 0x50
 800e05e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e062:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e066:	462a      	mov	r2, r5
 800e068:	4623      	mov	r3, r4
 800e06a:	a902      	add	r1, sp, #8
 800e06c:	6800      	ldr	r0, [r0, #0]
 800e06e:	f002 fca1 	bl	80109b4 <__ssvfiscanf_r>
 800e072:	b01c      	add	sp, #112	@ 0x70
 800e074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e078:	b003      	add	sp, #12
 800e07a:	4770      	bx	lr
 800e07c:	0800e0a7 	.word	0x0800e0a7
 800e080:	2000004c 	.word	0x2000004c

0800e084 <__sread>:
 800e084:	b510      	push	{r4, lr}
 800e086:	460c      	mov	r4, r1
 800e088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e08c:	f000 f894 	bl	800e1b8 <_read_r>
 800e090:	2800      	cmp	r0, #0
 800e092:	bfab      	itete	ge
 800e094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e096:	89a3      	ldrhlt	r3, [r4, #12]
 800e098:	181b      	addge	r3, r3, r0
 800e09a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e09e:	bfac      	ite	ge
 800e0a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0a2:	81a3      	strhlt	r3, [r4, #12]
 800e0a4:	bd10      	pop	{r4, pc}

0800e0a6 <__seofread>:
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	4770      	bx	lr

0800e0aa <__swrite>:
 800e0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ae:	461f      	mov	r7, r3
 800e0b0:	898b      	ldrh	r3, [r1, #12]
 800e0b2:	05db      	lsls	r3, r3, #23
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	4616      	mov	r6, r2
 800e0ba:	d505      	bpl.n	800e0c8 <__swrite+0x1e>
 800e0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f000 f866 	bl	800e194 <_lseek_r>
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	4632      	mov	r2, r6
 800e0d6:	463b      	mov	r3, r7
 800e0d8:	4628      	mov	r0, r5
 800e0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0de:	f000 b88d 	b.w	800e1fc <_write_r>

0800e0e2 <__sseek>:
 800e0e2:	b510      	push	{r4, lr}
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ea:	f000 f853 	bl	800e194 <_lseek_r>
 800e0ee:	1c43      	adds	r3, r0, #1
 800e0f0:	89a3      	ldrh	r3, [r4, #12]
 800e0f2:	bf15      	itete	ne
 800e0f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e0f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e0fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e0fe:	81a3      	strheq	r3, [r4, #12]
 800e100:	bf18      	it	ne
 800e102:	81a3      	strhne	r3, [r4, #12]
 800e104:	bd10      	pop	{r4, pc}

0800e106 <__sclose>:
 800e106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e10a:	f000 b833 	b.w	800e174 <_close_r>

0800e10e <memcmp>:
 800e10e:	b510      	push	{r4, lr}
 800e110:	3901      	subs	r1, #1
 800e112:	4402      	add	r2, r0
 800e114:	4290      	cmp	r0, r2
 800e116:	d101      	bne.n	800e11c <memcmp+0xe>
 800e118:	2000      	movs	r0, #0
 800e11a:	e005      	b.n	800e128 <memcmp+0x1a>
 800e11c:	7803      	ldrb	r3, [r0, #0]
 800e11e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e122:	42a3      	cmp	r3, r4
 800e124:	d001      	beq.n	800e12a <memcmp+0x1c>
 800e126:	1b18      	subs	r0, r3, r4
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	3001      	adds	r0, #1
 800e12c:	e7f2      	b.n	800e114 <memcmp+0x6>

0800e12e <memset>:
 800e12e:	4402      	add	r2, r0
 800e130:	4603      	mov	r3, r0
 800e132:	4293      	cmp	r3, r2
 800e134:	d100      	bne.n	800e138 <memset+0xa>
 800e136:	4770      	bx	lr
 800e138:	f803 1b01 	strb.w	r1, [r3], #1
 800e13c:	e7f9      	b.n	800e132 <memset+0x4>

0800e13e <strstr>:
 800e13e:	780a      	ldrb	r2, [r1, #0]
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	b96a      	cbnz	r2, 800e160 <strstr+0x22>
 800e144:	bd70      	pop	{r4, r5, r6, pc}
 800e146:	429a      	cmp	r2, r3
 800e148:	d109      	bne.n	800e15e <strstr+0x20>
 800e14a:	460c      	mov	r4, r1
 800e14c:	4605      	mov	r5, r0
 800e14e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0f6      	beq.n	800e144 <strstr+0x6>
 800e156:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e15a:	429e      	cmp	r6, r3
 800e15c:	d0f7      	beq.n	800e14e <strstr+0x10>
 800e15e:	3001      	adds	r0, #1
 800e160:	7803      	ldrb	r3, [r0, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1ef      	bne.n	800e146 <strstr+0x8>
 800e166:	4618      	mov	r0, r3
 800e168:	e7ec      	b.n	800e144 <strstr+0x6>
	...

0800e16c <_localeconv_r>:
 800e16c:	4800      	ldr	r0, [pc, #0]	@ (800e170 <_localeconv_r+0x4>)
 800e16e:	4770      	bx	lr
 800e170:	2000018c 	.word	0x2000018c

0800e174 <_close_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4d06      	ldr	r5, [pc, #24]	@ (800e190 <_close_r+0x1c>)
 800e178:	2300      	movs	r3, #0
 800e17a:	4604      	mov	r4, r0
 800e17c:	4608      	mov	r0, r1
 800e17e:	602b      	str	r3, [r5, #0]
 800e180:	f7f7 fd52 	bl	8005c28 <_close>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d102      	bne.n	800e18e <_close_r+0x1a>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	b103      	cbz	r3, 800e18e <_close_r+0x1a>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	2000181c 	.word	0x2000181c

0800e194 <_lseek_r>:
 800e194:	b538      	push	{r3, r4, r5, lr}
 800e196:	4d07      	ldr	r5, [pc, #28]	@ (800e1b4 <_lseek_r+0x20>)
 800e198:	4604      	mov	r4, r0
 800e19a:	4608      	mov	r0, r1
 800e19c:	4611      	mov	r1, r2
 800e19e:	2200      	movs	r2, #0
 800e1a0:	602a      	str	r2, [r5, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	f7f7 fd67 	bl	8005c76 <_lseek>
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	d102      	bne.n	800e1b2 <_lseek_r+0x1e>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	b103      	cbz	r3, 800e1b2 <_lseek_r+0x1e>
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	bd38      	pop	{r3, r4, r5, pc}
 800e1b4:	2000181c 	.word	0x2000181c

0800e1b8 <_read_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4d07      	ldr	r5, [pc, #28]	@ (800e1d8 <_read_r+0x20>)
 800e1bc:	4604      	mov	r4, r0
 800e1be:	4608      	mov	r0, r1
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	602a      	str	r2, [r5, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f7f7 fcf5 	bl	8005bb6 <_read>
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	d102      	bne.n	800e1d6 <_read_r+0x1e>
 800e1d0:	682b      	ldr	r3, [r5, #0]
 800e1d2:	b103      	cbz	r3, 800e1d6 <_read_r+0x1e>
 800e1d4:	6023      	str	r3, [r4, #0]
 800e1d6:	bd38      	pop	{r3, r4, r5, pc}
 800e1d8:	2000181c 	.word	0x2000181c

0800e1dc <_sbrk_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	4d06      	ldr	r5, [pc, #24]	@ (800e1f8 <_sbrk_r+0x1c>)
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	602b      	str	r3, [r5, #0]
 800e1e8:	f7f7 fd52 	bl	8005c90 <_sbrk>
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	d102      	bne.n	800e1f6 <_sbrk_r+0x1a>
 800e1f0:	682b      	ldr	r3, [r5, #0]
 800e1f2:	b103      	cbz	r3, 800e1f6 <_sbrk_r+0x1a>
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	2000181c 	.word	0x2000181c

0800e1fc <_write_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d07      	ldr	r5, [pc, #28]	@ (800e21c <_write_r+0x20>)
 800e200:	4604      	mov	r4, r0
 800e202:	4608      	mov	r0, r1
 800e204:	4611      	mov	r1, r2
 800e206:	2200      	movs	r2, #0
 800e208:	602a      	str	r2, [r5, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	f7f7 fcf0 	bl	8005bf0 <_write>
 800e210:	1c43      	adds	r3, r0, #1
 800e212:	d102      	bne.n	800e21a <_write_r+0x1e>
 800e214:	682b      	ldr	r3, [r5, #0]
 800e216:	b103      	cbz	r3, 800e21a <_write_r+0x1e>
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	bd38      	pop	{r3, r4, r5, pc}
 800e21c:	2000181c 	.word	0x2000181c

0800e220 <__errno>:
 800e220:	4b01      	ldr	r3, [pc, #4]	@ (800e228 <__errno+0x8>)
 800e222:	6818      	ldr	r0, [r3, #0]
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	2000004c 	.word	0x2000004c

0800e22c <__libc_init_array>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	4d0d      	ldr	r5, [pc, #52]	@ (800e264 <__libc_init_array+0x38>)
 800e230:	4c0d      	ldr	r4, [pc, #52]	@ (800e268 <__libc_init_array+0x3c>)
 800e232:	1b64      	subs	r4, r4, r5
 800e234:	10a4      	asrs	r4, r4, #2
 800e236:	2600      	movs	r6, #0
 800e238:	42a6      	cmp	r6, r4
 800e23a:	d109      	bne.n	800e250 <__libc_init_array+0x24>
 800e23c:	4d0b      	ldr	r5, [pc, #44]	@ (800e26c <__libc_init_array+0x40>)
 800e23e:	4c0c      	ldr	r4, [pc, #48]	@ (800e270 <__libc_init_array+0x44>)
 800e240:	f005 f84a 	bl	80132d8 <_init>
 800e244:	1b64      	subs	r4, r4, r5
 800e246:	10a4      	asrs	r4, r4, #2
 800e248:	2600      	movs	r6, #0
 800e24a:	42a6      	cmp	r6, r4
 800e24c:	d105      	bne.n	800e25a <__libc_init_array+0x2e>
 800e24e:	bd70      	pop	{r4, r5, r6, pc}
 800e250:	f855 3b04 	ldr.w	r3, [r5], #4
 800e254:	4798      	blx	r3
 800e256:	3601      	adds	r6, #1
 800e258:	e7ee      	b.n	800e238 <__libc_init_array+0xc>
 800e25a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e25e:	4798      	blx	r3
 800e260:	3601      	adds	r6, #1
 800e262:	e7f2      	b.n	800e24a <__libc_init_array+0x1e>
 800e264:	08013918 	.word	0x08013918
 800e268:	08013918 	.word	0x08013918
 800e26c:	08013918 	.word	0x08013918
 800e270:	0801391c 	.word	0x0801391c

0800e274 <__retarget_lock_init_recursive>:
 800e274:	4770      	bx	lr

0800e276 <__retarget_lock_acquire_recursive>:
 800e276:	4770      	bx	lr

0800e278 <__retarget_lock_release_recursive>:
 800e278:	4770      	bx	lr

0800e27a <memcpy>:
 800e27a:	440a      	add	r2, r1
 800e27c:	4291      	cmp	r1, r2
 800e27e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e282:	d100      	bne.n	800e286 <memcpy+0xc>
 800e284:	4770      	bx	lr
 800e286:	b510      	push	{r4, lr}
 800e288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e28c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e290:	4291      	cmp	r1, r2
 800e292:	d1f9      	bne.n	800e288 <memcpy+0xe>
 800e294:	bd10      	pop	{r4, pc}
	...

0800e298 <nanf>:
 800e298:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e2a0 <nanf+0x8>
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	7fc00000 	.word	0x7fc00000

0800e2a4 <quorem>:
 800e2a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a8:	6903      	ldr	r3, [r0, #16]
 800e2aa:	690c      	ldr	r4, [r1, #16]
 800e2ac:	42a3      	cmp	r3, r4
 800e2ae:	4607      	mov	r7, r0
 800e2b0:	db7e      	blt.n	800e3b0 <quorem+0x10c>
 800e2b2:	3c01      	subs	r4, #1
 800e2b4:	f101 0814 	add.w	r8, r1, #20
 800e2b8:	00a3      	lsls	r3, r4, #2
 800e2ba:	f100 0514 	add.w	r5, r0, #20
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e2ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2da:	d32e      	bcc.n	800e33a <quorem+0x96>
 800e2dc:	f04f 0a00 	mov.w	sl, #0
 800e2e0:	46c4      	mov	ip, r8
 800e2e2:	46ae      	mov	lr, r5
 800e2e4:	46d3      	mov	fp, sl
 800e2e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e2ea:	b298      	uxth	r0, r3
 800e2ec:	fb06 a000 	mla	r0, r6, r0, sl
 800e2f0:	0c02      	lsrs	r2, r0, #16
 800e2f2:	0c1b      	lsrs	r3, r3, #16
 800e2f4:	fb06 2303 	mla	r3, r6, r3, r2
 800e2f8:	f8de 2000 	ldr.w	r2, [lr]
 800e2fc:	b280      	uxth	r0, r0
 800e2fe:	b292      	uxth	r2, r2
 800e300:	1a12      	subs	r2, r2, r0
 800e302:	445a      	add	r2, fp
 800e304:	f8de 0000 	ldr.w	r0, [lr]
 800e308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e312:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e316:	b292      	uxth	r2, r2
 800e318:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e31c:	45e1      	cmp	r9, ip
 800e31e:	f84e 2b04 	str.w	r2, [lr], #4
 800e322:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e326:	d2de      	bcs.n	800e2e6 <quorem+0x42>
 800e328:	9b00      	ldr	r3, [sp, #0]
 800e32a:	58eb      	ldr	r3, [r5, r3]
 800e32c:	b92b      	cbnz	r3, 800e33a <quorem+0x96>
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	3b04      	subs	r3, #4
 800e332:	429d      	cmp	r5, r3
 800e334:	461a      	mov	r2, r3
 800e336:	d32f      	bcc.n	800e398 <quorem+0xf4>
 800e338:	613c      	str	r4, [r7, #16]
 800e33a:	4638      	mov	r0, r7
 800e33c:	f001 f916 	bl	800f56c <__mcmp>
 800e340:	2800      	cmp	r0, #0
 800e342:	db25      	blt.n	800e390 <quorem+0xec>
 800e344:	4629      	mov	r1, r5
 800e346:	2000      	movs	r0, #0
 800e348:	f858 2b04 	ldr.w	r2, [r8], #4
 800e34c:	f8d1 c000 	ldr.w	ip, [r1]
 800e350:	fa1f fe82 	uxth.w	lr, r2
 800e354:	fa1f f38c 	uxth.w	r3, ip
 800e358:	eba3 030e 	sub.w	r3, r3, lr
 800e35c:	4403      	add	r3, r0
 800e35e:	0c12      	lsrs	r2, r2, #16
 800e360:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e364:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e368:	b29b      	uxth	r3, r3
 800e36a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e36e:	45c1      	cmp	r9, r8
 800e370:	f841 3b04 	str.w	r3, [r1], #4
 800e374:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e378:	d2e6      	bcs.n	800e348 <quorem+0xa4>
 800e37a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e37e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e382:	b922      	cbnz	r2, 800e38e <quorem+0xea>
 800e384:	3b04      	subs	r3, #4
 800e386:	429d      	cmp	r5, r3
 800e388:	461a      	mov	r2, r3
 800e38a:	d30b      	bcc.n	800e3a4 <quorem+0x100>
 800e38c:	613c      	str	r4, [r7, #16]
 800e38e:	3601      	adds	r6, #1
 800e390:	4630      	mov	r0, r6
 800e392:	b003      	add	sp, #12
 800e394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e398:	6812      	ldr	r2, [r2, #0]
 800e39a:	3b04      	subs	r3, #4
 800e39c:	2a00      	cmp	r2, #0
 800e39e:	d1cb      	bne.n	800e338 <quorem+0x94>
 800e3a0:	3c01      	subs	r4, #1
 800e3a2:	e7c6      	b.n	800e332 <quorem+0x8e>
 800e3a4:	6812      	ldr	r2, [r2, #0]
 800e3a6:	3b04      	subs	r3, #4
 800e3a8:	2a00      	cmp	r2, #0
 800e3aa:	d1ef      	bne.n	800e38c <quorem+0xe8>
 800e3ac:	3c01      	subs	r4, #1
 800e3ae:	e7ea      	b.n	800e386 <quorem+0xe2>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7ee      	b.n	800e392 <quorem+0xee>
 800e3b4:	0000      	movs	r0, r0
	...

0800e3b8 <_dtoa_r>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	69c7      	ldr	r7, [r0, #28]
 800e3be:	b099      	sub	sp, #100	@ 0x64
 800e3c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e3c4:	ec55 4b10 	vmov	r4, r5, d0
 800e3c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e3ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800e3cc:	4683      	mov	fp, r0
 800e3ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3d2:	b97f      	cbnz	r7, 800e3f4 <_dtoa_r+0x3c>
 800e3d4:	2010      	movs	r0, #16
 800e3d6:	f000 fdfd 	bl	800efd4 <malloc>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e3e0:	b920      	cbnz	r0, 800e3ec <_dtoa_r+0x34>
 800e3e2:	4ba7      	ldr	r3, [pc, #668]	@ (800e680 <_dtoa_r+0x2c8>)
 800e3e4:	21ef      	movs	r1, #239	@ 0xef
 800e3e6:	48a7      	ldr	r0, [pc, #668]	@ (800e684 <_dtoa_r+0x2cc>)
 800e3e8:	f002 fefa 	bl	80111e0 <__assert_func>
 800e3ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e3f0:	6007      	str	r7, [r0, #0]
 800e3f2:	60c7      	str	r7, [r0, #12]
 800e3f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e3f8:	6819      	ldr	r1, [r3, #0]
 800e3fa:	b159      	cbz	r1, 800e414 <_dtoa_r+0x5c>
 800e3fc:	685a      	ldr	r2, [r3, #4]
 800e3fe:	604a      	str	r2, [r1, #4]
 800e400:	2301      	movs	r3, #1
 800e402:	4093      	lsls	r3, r2
 800e404:	608b      	str	r3, [r1, #8]
 800e406:	4658      	mov	r0, fp
 800e408:	f000 fe2c 	bl	800f064 <_Bfree>
 800e40c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e410:	2200      	movs	r2, #0
 800e412:	601a      	str	r2, [r3, #0]
 800e414:	1e2b      	subs	r3, r5, #0
 800e416:	bfb9      	ittee	lt
 800e418:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e41c:	9303      	strlt	r3, [sp, #12]
 800e41e:	2300      	movge	r3, #0
 800e420:	6033      	strge	r3, [r6, #0]
 800e422:	9f03      	ldr	r7, [sp, #12]
 800e424:	4b98      	ldr	r3, [pc, #608]	@ (800e688 <_dtoa_r+0x2d0>)
 800e426:	bfbc      	itt	lt
 800e428:	2201      	movlt	r2, #1
 800e42a:	6032      	strlt	r2, [r6, #0]
 800e42c:	43bb      	bics	r3, r7
 800e42e:	d112      	bne.n	800e456 <_dtoa_r+0x9e>
 800e430:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e432:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e436:	6013      	str	r3, [r2, #0]
 800e438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e43c:	4323      	orrs	r3, r4
 800e43e:	f000 854d 	beq.w	800eedc <_dtoa_r+0xb24>
 800e442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e444:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e69c <_dtoa_r+0x2e4>
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 854f 	beq.w	800eeec <_dtoa_r+0xb34>
 800e44e:	f10a 0303 	add.w	r3, sl, #3
 800e452:	f000 bd49 	b.w	800eee8 <_dtoa_r+0xb30>
 800e456:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e45a:	2200      	movs	r2, #0
 800e45c:	ec51 0b17 	vmov	r0, r1, d7
 800e460:	2300      	movs	r3, #0
 800e462:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e466:	f7f2 fb4f 	bl	8000b08 <__aeabi_dcmpeq>
 800e46a:	4680      	mov	r8, r0
 800e46c:	b158      	cbz	r0, 800e486 <_dtoa_r+0xce>
 800e46e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e470:	2301      	movs	r3, #1
 800e472:	6013      	str	r3, [r2, #0]
 800e474:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e476:	b113      	cbz	r3, 800e47e <_dtoa_r+0xc6>
 800e478:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e47a:	4b84      	ldr	r3, [pc, #528]	@ (800e68c <_dtoa_r+0x2d4>)
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e6a0 <_dtoa_r+0x2e8>
 800e482:	f000 bd33 	b.w	800eeec <_dtoa_r+0xb34>
 800e486:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e48a:	aa16      	add	r2, sp, #88	@ 0x58
 800e48c:	a917      	add	r1, sp, #92	@ 0x5c
 800e48e:	4658      	mov	r0, fp
 800e490:	f001 f98c 	bl	800f7ac <__d2b>
 800e494:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e498:	4681      	mov	r9, r0
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	d077      	beq.n	800e58e <_dtoa_r+0x1d6>
 800e49e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e4a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e4b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e4b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	4b74      	ldr	r3, [pc, #464]	@ (800e690 <_dtoa_r+0x2d8>)
 800e4be:	f7f1 ff03 	bl	80002c8 <__aeabi_dsub>
 800e4c2:	a369      	add	r3, pc, #420	@ (adr r3, 800e668 <_dtoa_r+0x2b0>)
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	f7f2 f8b6 	bl	8000638 <__aeabi_dmul>
 800e4cc:	a368      	add	r3, pc, #416	@ (adr r3, 800e670 <_dtoa_r+0x2b8>)
 800e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d2:	f7f1 fefb 	bl	80002cc <__adddf3>
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4630      	mov	r0, r6
 800e4da:	460d      	mov	r5, r1
 800e4dc:	f7f2 f842 	bl	8000564 <__aeabi_i2d>
 800e4e0:	a365      	add	r3, pc, #404	@ (adr r3, 800e678 <_dtoa_r+0x2c0>)
 800e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e6:	f7f2 f8a7 	bl	8000638 <__aeabi_dmul>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	4629      	mov	r1, r5
 800e4f2:	f7f1 feeb 	bl	80002cc <__adddf3>
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	460d      	mov	r5, r1
 800e4fa:	f7f2 fb4d 	bl	8000b98 <__aeabi_d2iz>
 800e4fe:	2200      	movs	r2, #0
 800e500:	4607      	mov	r7, r0
 800e502:	2300      	movs	r3, #0
 800e504:	4620      	mov	r0, r4
 800e506:	4629      	mov	r1, r5
 800e508:	f7f2 fb08 	bl	8000b1c <__aeabi_dcmplt>
 800e50c:	b140      	cbz	r0, 800e520 <_dtoa_r+0x168>
 800e50e:	4638      	mov	r0, r7
 800e510:	f7f2 f828 	bl	8000564 <__aeabi_i2d>
 800e514:	4622      	mov	r2, r4
 800e516:	462b      	mov	r3, r5
 800e518:	f7f2 faf6 	bl	8000b08 <__aeabi_dcmpeq>
 800e51c:	b900      	cbnz	r0, 800e520 <_dtoa_r+0x168>
 800e51e:	3f01      	subs	r7, #1
 800e520:	2f16      	cmp	r7, #22
 800e522:	d851      	bhi.n	800e5c8 <_dtoa_r+0x210>
 800e524:	4b5b      	ldr	r3, [pc, #364]	@ (800e694 <_dtoa_r+0x2dc>)
 800e526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e532:	f7f2 faf3 	bl	8000b1c <__aeabi_dcmplt>
 800e536:	2800      	cmp	r0, #0
 800e538:	d048      	beq.n	800e5cc <_dtoa_r+0x214>
 800e53a:	3f01      	subs	r7, #1
 800e53c:	2300      	movs	r3, #0
 800e53e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e540:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e542:	1b9b      	subs	r3, r3, r6
 800e544:	1e5a      	subs	r2, r3, #1
 800e546:	bf44      	itt	mi
 800e548:	f1c3 0801 	rsbmi	r8, r3, #1
 800e54c:	2300      	movmi	r3, #0
 800e54e:	9208      	str	r2, [sp, #32]
 800e550:	bf54      	ite	pl
 800e552:	f04f 0800 	movpl.w	r8, #0
 800e556:	9308      	strmi	r3, [sp, #32]
 800e558:	2f00      	cmp	r7, #0
 800e55a:	db39      	blt.n	800e5d0 <_dtoa_r+0x218>
 800e55c:	9b08      	ldr	r3, [sp, #32]
 800e55e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e560:	443b      	add	r3, r7
 800e562:	9308      	str	r3, [sp, #32]
 800e564:	2300      	movs	r3, #0
 800e566:	930a      	str	r3, [sp, #40]	@ 0x28
 800e568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56a:	2b09      	cmp	r3, #9
 800e56c:	d864      	bhi.n	800e638 <_dtoa_r+0x280>
 800e56e:	2b05      	cmp	r3, #5
 800e570:	bfc4      	itt	gt
 800e572:	3b04      	subgt	r3, #4
 800e574:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e578:	f1a3 0302 	sub.w	r3, r3, #2
 800e57c:	bfcc      	ite	gt
 800e57e:	2400      	movgt	r4, #0
 800e580:	2401      	movle	r4, #1
 800e582:	2b03      	cmp	r3, #3
 800e584:	d863      	bhi.n	800e64e <_dtoa_r+0x296>
 800e586:	e8df f003 	tbb	[pc, r3]
 800e58a:	372a      	.short	0x372a
 800e58c:	5535      	.short	0x5535
 800e58e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e592:	441e      	add	r6, r3
 800e594:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e598:	2b20      	cmp	r3, #32
 800e59a:	bfc1      	itttt	gt
 800e59c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e5a0:	409f      	lslgt	r7, r3
 800e5a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e5a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e5aa:	bfd6      	itet	le
 800e5ac:	f1c3 0320 	rsble	r3, r3, #32
 800e5b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e5b4:	fa04 f003 	lslle.w	r0, r4, r3
 800e5b8:	f7f1 ffc4 	bl	8000544 <__aeabi_ui2d>
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e5c2:	3e01      	subs	r6, #1
 800e5c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e5c6:	e777      	b.n	800e4b8 <_dtoa_r+0x100>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e7b8      	b.n	800e53e <_dtoa_r+0x186>
 800e5cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e5ce:	e7b7      	b.n	800e540 <_dtoa_r+0x188>
 800e5d0:	427b      	negs	r3, r7
 800e5d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	eba8 0807 	sub.w	r8, r8, r7
 800e5da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5dc:	e7c4      	b.n	800e568 <_dtoa_r+0x1b0>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	dc35      	bgt.n	800e654 <_dtoa_r+0x29c>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	9307      	str	r3, [sp, #28]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5f2:	e00b      	b.n	800e60c <_dtoa_r+0x254>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e7f3      	b.n	800e5e0 <_dtoa_r+0x228>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5fe:	18fb      	adds	r3, r7, r3
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	2b01      	cmp	r3, #1
 800e606:	9307      	str	r3, [sp, #28]
 800e608:	bfb8      	it	lt
 800e60a:	2301      	movlt	r3, #1
 800e60c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e610:	2100      	movs	r1, #0
 800e612:	2204      	movs	r2, #4
 800e614:	f102 0514 	add.w	r5, r2, #20
 800e618:	429d      	cmp	r5, r3
 800e61a:	d91f      	bls.n	800e65c <_dtoa_r+0x2a4>
 800e61c:	6041      	str	r1, [r0, #4]
 800e61e:	4658      	mov	r0, fp
 800e620:	f000 fce0 	bl	800efe4 <_Balloc>
 800e624:	4682      	mov	sl, r0
 800e626:	2800      	cmp	r0, #0
 800e628:	d13c      	bne.n	800e6a4 <_dtoa_r+0x2ec>
 800e62a:	4b1b      	ldr	r3, [pc, #108]	@ (800e698 <_dtoa_r+0x2e0>)
 800e62c:	4602      	mov	r2, r0
 800e62e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e632:	e6d8      	b.n	800e3e6 <_dtoa_r+0x2e>
 800e634:	2301      	movs	r3, #1
 800e636:	e7e0      	b.n	800e5fa <_dtoa_r+0x242>
 800e638:	2401      	movs	r4, #1
 800e63a:	2300      	movs	r3, #0
 800e63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e63e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e640:	f04f 33ff 	mov.w	r3, #4294967295
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	9307      	str	r3, [sp, #28]
 800e648:	2200      	movs	r2, #0
 800e64a:	2312      	movs	r3, #18
 800e64c:	e7d0      	b.n	800e5f0 <_dtoa_r+0x238>
 800e64e:	2301      	movs	r3, #1
 800e650:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e652:	e7f5      	b.n	800e640 <_dtoa_r+0x288>
 800e654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	9307      	str	r3, [sp, #28]
 800e65a:	e7d7      	b.n	800e60c <_dtoa_r+0x254>
 800e65c:	3101      	adds	r1, #1
 800e65e:	0052      	lsls	r2, r2, #1
 800e660:	e7d8      	b.n	800e614 <_dtoa_r+0x25c>
 800e662:	bf00      	nop
 800e664:	f3af 8000 	nop.w
 800e668:	636f4361 	.word	0x636f4361
 800e66c:	3fd287a7 	.word	0x3fd287a7
 800e670:	8b60c8b3 	.word	0x8b60c8b3
 800e674:	3fc68a28 	.word	0x3fc68a28
 800e678:	509f79fb 	.word	0x509f79fb
 800e67c:	3fd34413 	.word	0x3fd34413
 800e680:	080134d4 	.word	0x080134d4
 800e684:	080134eb 	.word	0x080134eb
 800e688:	7ff00000 	.word	0x7ff00000
 800e68c:	08013831 	.word	0x08013831
 800e690:	3ff80000 	.word	0x3ff80000
 800e694:	080135e8 	.word	0x080135e8
 800e698:	08013543 	.word	0x08013543
 800e69c:	080134d0 	.word	0x080134d0
 800e6a0:	08013830 	.word	0x08013830
 800e6a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6a8:	6018      	str	r0, [r3, #0]
 800e6aa:	9b07      	ldr	r3, [sp, #28]
 800e6ac:	2b0e      	cmp	r3, #14
 800e6ae:	f200 80a4 	bhi.w	800e7fa <_dtoa_r+0x442>
 800e6b2:	2c00      	cmp	r4, #0
 800e6b4:	f000 80a1 	beq.w	800e7fa <_dtoa_r+0x442>
 800e6b8:	2f00      	cmp	r7, #0
 800e6ba:	dd33      	ble.n	800e724 <_dtoa_r+0x36c>
 800e6bc:	4bad      	ldr	r3, [pc, #692]	@ (800e974 <_dtoa_r+0x5bc>)
 800e6be:	f007 020f 	and.w	r2, r7, #15
 800e6c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6c6:	ed93 7b00 	vldr	d7, [r3]
 800e6ca:	05f8      	lsls	r0, r7, #23
 800e6cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e6d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e6d4:	d516      	bpl.n	800e704 <_dtoa_r+0x34c>
 800e6d6:	4ba8      	ldr	r3, [pc, #672]	@ (800e978 <_dtoa_r+0x5c0>)
 800e6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e6e0:	f7f2 f8d4 	bl	800088c <__aeabi_ddiv>
 800e6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6e8:	f004 040f 	and.w	r4, r4, #15
 800e6ec:	2603      	movs	r6, #3
 800e6ee:	4da2      	ldr	r5, [pc, #648]	@ (800e978 <_dtoa_r+0x5c0>)
 800e6f0:	b954      	cbnz	r4, 800e708 <_dtoa_r+0x350>
 800e6f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6fa:	f7f2 f8c7 	bl	800088c <__aeabi_ddiv>
 800e6fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e702:	e028      	b.n	800e756 <_dtoa_r+0x39e>
 800e704:	2602      	movs	r6, #2
 800e706:	e7f2      	b.n	800e6ee <_dtoa_r+0x336>
 800e708:	07e1      	lsls	r1, r4, #31
 800e70a:	d508      	bpl.n	800e71e <_dtoa_r+0x366>
 800e70c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e710:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e714:	f7f1 ff90 	bl	8000638 <__aeabi_dmul>
 800e718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e71c:	3601      	adds	r6, #1
 800e71e:	1064      	asrs	r4, r4, #1
 800e720:	3508      	adds	r5, #8
 800e722:	e7e5      	b.n	800e6f0 <_dtoa_r+0x338>
 800e724:	f000 80d2 	beq.w	800e8cc <_dtoa_r+0x514>
 800e728:	427c      	negs	r4, r7
 800e72a:	4b92      	ldr	r3, [pc, #584]	@ (800e974 <_dtoa_r+0x5bc>)
 800e72c:	4d92      	ldr	r5, [pc, #584]	@ (800e978 <_dtoa_r+0x5c0>)
 800e72e:	f004 020f 	and.w	r2, r4, #15
 800e732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e73e:	f7f1 ff7b 	bl	8000638 <__aeabi_dmul>
 800e742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e746:	1124      	asrs	r4, r4, #4
 800e748:	2300      	movs	r3, #0
 800e74a:	2602      	movs	r6, #2
 800e74c:	2c00      	cmp	r4, #0
 800e74e:	f040 80b2 	bne.w	800e8b6 <_dtoa_r+0x4fe>
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1d3      	bne.n	800e6fe <_dtoa_r+0x346>
 800e756:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e758:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f000 80b7 	beq.w	800e8d0 <_dtoa_r+0x518>
 800e762:	4b86      	ldr	r3, [pc, #536]	@ (800e97c <_dtoa_r+0x5c4>)
 800e764:	2200      	movs	r2, #0
 800e766:	4620      	mov	r0, r4
 800e768:	4629      	mov	r1, r5
 800e76a:	f7f2 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800e76e:	2800      	cmp	r0, #0
 800e770:	f000 80ae 	beq.w	800e8d0 <_dtoa_r+0x518>
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 80aa 	beq.w	800e8d0 <_dtoa_r+0x518>
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	dd37      	ble.n	800e7f2 <_dtoa_r+0x43a>
 800e782:	1e7b      	subs	r3, r7, #1
 800e784:	9304      	str	r3, [sp, #16]
 800e786:	4620      	mov	r0, r4
 800e788:	4b7d      	ldr	r3, [pc, #500]	@ (800e980 <_dtoa_r+0x5c8>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	4629      	mov	r1, r5
 800e78e:	f7f1 ff53 	bl	8000638 <__aeabi_dmul>
 800e792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e796:	9c00      	ldr	r4, [sp, #0]
 800e798:	3601      	adds	r6, #1
 800e79a:	4630      	mov	r0, r6
 800e79c:	f7f1 fee2 	bl	8000564 <__aeabi_i2d>
 800e7a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7a4:	f7f1 ff48 	bl	8000638 <__aeabi_dmul>
 800e7a8:	4b76      	ldr	r3, [pc, #472]	@ (800e984 <_dtoa_r+0x5cc>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f7f1 fd8e 	bl	80002cc <__adddf3>
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e7b6:	2c00      	cmp	r4, #0
 800e7b8:	f040 808d 	bne.w	800e8d6 <_dtoa_r+0x51e>
 800e7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c0:	4b71      	ldr	r3, [pc, #452]	@ (800e988 <_dtoa_r+0x5d0>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f7f1 fd80 	bl	80002c8 <__aeabi_dsub>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7d0:	462a      	mov	r2, r5
 800e7d2:	4633      	mov	r3, r6
 800e7d4:	f7f2 f9c0 	bl	8000b58 <__aeabi_dcmpgt>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	f040 828b 	bne.w	800ecf4 <_dtoa_r+0x93c>
 800e7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e7e8:	f7f2 f998 	bl	8000b1c <__aeabi_dcmplt>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f040 8128 	bne.w	800ea42 <_dtoa_r+0x68a>
 800e7f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e7f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e7fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f2c0 815a 	blt.w	800eab6 <_dtoa_r+0x6fe>
 800e802:	2f0e      	cmp	r7, #14
 800e804:	f300 8157 	bgt.w	800eab6 <_dtoa_r+0x6fe>
 800e808:	4b5a      	ldr	r3, [pc, #360]	@ (800e974 <_dtoa_r+0x5bc>)
 800e80a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e80e:	ed93 7b00 	vldr	d7, [r3]
 800e812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e814:	2b00      	cmp	r3, #0
 800e816:	ed8d 7b00 	vstr	d7, [sp]
 800e81a:	da03      	bge.n	800e824 <_dtoa_r+0x46c>
 800e81c:	9b07      	ldr	r3, [sp, #28]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f340 8101 	ble.w	800ea26 <_dtoa_r+0x66e>
 800e824:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e828:	4656      	mov	r6, sl
 800e82a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e82e:	4620      	mov	r0, r4
 800e830:	4629      	mov	r1, r5
 800e832:	f7f2 f82b 	bl	800088c <__aeabi_ddiv>
 800e836:	f7f2 f9af 	bl	8000b98 <__aeabi_d2iz>
 800e83a:	4680      	mov	r8, r0
 800e83c:	f7f1 fe92 	bl	8000564 <__aeabi_i2d>
 800e840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e844:	f7f1 fef8 	bl	8000638 <__aeabi_dmul>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e854:	f7f1 fd38 	bl	80002c8 <__aeabi_dsub>
 800e858:	f806 4b01 	strb.w	r4, [r6], #1
 800e85c:	9d07      	ldr	r5, [sp, #28]
 800e85e:	eba6 040a 	sub.w	r4, r6, sl
 800e862:	42a5      	cmp	r5, r4
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	f040 8117 	bne.w	800ea9a <_dtoa_r+0x6e2>
 800e86c:	f7f1 fd2e 	bl	80002cc <__adddf3>
 800e870:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e874:	4604      	mov	r4, r0
 800e876:	460d      	mov	r5, r1
 800e878:	f7f2 f96e 	bl	8000b58 <__aeabi_dcmpgt>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f040 80f9 	bne.w	800ea74 <_dtoa_r+0x6bc>
 800e882:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e886:	4620      	mov	r0, r4
 800e888:	4629      	mov	r1, r5
 800e88a:	f7f2 f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800e88e:	b118      	cbz	r0, 800e898 <_dtoa_r+0x4e0>
 800e890:	f018 0f01 	tst.w	r8, #1
 800e894:	f040 80ee 	bne.w	800ea74 <_dtoa_r+0x6bc>
 800e898:	4649      	mov	r1, r9
 800e89a:	4658      	mov	r0, fp
 800e89c:	f000 fbe2 	bl	800f064 <_Bfree>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	7033      	strb	r3, [r6, #0]
 800e8a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e8a6:	3701      	adds	r7, #1
 800e8a8:	601f      	str	r7, [r3, #0]
 800e8aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 831d 	beq.w	800eeec <_dtoa_r+0xb34>
 800e8b2:	601e      	str	r6, [r3, #0]
 800e8b4:	e31a      	b.n	800eeec <_dtoa_r+0xb34>
 800e8b6:	07e2      	lsls	r2, r4, #31
 800e8b8:	d505      	bpl.n	800e8c6 <_dtoa_r+0x50e>
 800e8ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8be:	f7f1 febb 	bl	8000638 <__aeabi_dmul>
 800e8c2:	3601      	adds	r6, #1
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	1064      	asrs	r4, r4, #1
 800e8c8:	3508      	adds	r5, #8
 800e8ca:	e73f      	b.n	800e74c <_dtoa_r+0x394>
 800e8cc:	2602      	movs	r6, #2
 800e8ce:	e742      	b.n	800e756 <_dtoa_r+0x39e>
 800e8d0:	9c07      	ldr	r4, [sp, #28]
 800e8d2:	9704      	str	r7, [sp, #16]
 800e8d4:	e761      	b.n	800e79a <_dtoa_r+0x3e2>
 800e8d6:	4b27      	ldr	r3, [pc, #156]	@ (800e974 <_dtoa_r+0x5bc>)
 800e8d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8e2:	4454      	add	r4, sl
 800e8e4:	2900      	cmp	r1, #0
 800e8e6:	d053      	beq.n	800e990 <_dtoa_r+0x5d8>
 800e8e8:	4928      	ldr	r1, [pc, #160]	@ (800e98c <_dtoa_r+0x5d4>)
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f7f1 ffce 	bl	800088c <__aeabi_ddiv>
 800e8f0:	4633      	mov	r3, r6
 800e8f2:	462a      	mov	r2, r5
 800e8f4:	f7f1 fce8 	bl	80002c8 <__aeabi_dsub>
 800e8f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e8fc:	4656      	mov	r6, sl
 800e8fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e902:	f7f2 f949 	bl	8000b98 <__aeabi_d2iz>
 800e906:	4605      	mov	r5, r0
 800e908:	f7f1 fe2c 	bl	8000564 <__aeabi_i2d>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e914:	f7f1 fcd8 	bl	80002c8 <__aeabi_dsub>
 800e918:	3530      	adds	r5, #48	@ 0x30
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e922:	f806 5b01 	strb.w	r5, [r6], #1
 800e926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e92a:	f7f2 f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d171      	bne.n	800ea16 <_dtoa_r+0x65e>
 800e932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e936:	4911      	ldr	r1, [pc, #68]	@ (800e97c <_dtoa_r+0x5c4>)
 800e938:	2000      	movs	r0, #0
 800e93a:	f7f1 fcc5 	bl	80002c8 <__aeabi_dsub>
 800e93e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e942:	f7f2 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 800e946:	2800      	cmp	r0, #0
 800e948:	f040 8095 	bne.w	800ea76 <_dtoa_r+0x6be>
 800e94c:	42a6      	cmp	r6, r4
 800e94e:	f43f af50 	beq.w	800e7f2 <_dtoa_r+0x43a>
 800e952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e956:	4b0a      	ldr	r3, [pc, #40]	@ (800e980 <_dtoa_r+0x5c8>)
 800e958:	2200      	movs	r2, #0
 800e95a:	f7f1 fe6d 	bl	8000638 <__aeabi_dmul>
 800e95e:	4b08      	ldr	r3, [pc, #32]	@ (800e980 <_dtoa_r+0x5c8>)
 800e960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e964:	2200      	movs	r2, #0
 800e966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e96a:	f7f1 fe65 	bl	8000638 <__aeabi_dmul>
 800e96e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e972:	e7c4      	b.n	800e8fe <_dtoa_r+0x546>
 800e974:	080135e8 	.word	0x080135e8
 800e978:	080135c0 	.word	0x080135c0
 800e97c:	3ff00000 	.word	0x3ff00000
 800e980:	40240000 	.word	0x40240000
 800e984:	401c0000 	.word	0x401c0000
 800e988:	40140000 	.word	0x40140000
 800e98c:	3fe00000 	.word	0x3fe00000
 800e990:	4631      	mov	r1, r6
 800e992:	4628      	mov	r0, r5
 800e994:	f7f1 fe50 	bl	8000638 <__aeabi_dmul>
 800e998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e99c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e99e:	4656      	mov	r6, sl
 800e9a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9a4:	f7f2 f8f8 	bl	8000b98 <__aeabi_d2iz>
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	f7f1 fddb 	bl	8000564 <__aeabi_i2d>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b6:	f7f1 fc87 	bl	80002c8 <__aeabi_dsub>
 800e9ba:	3530      	adds	r5, #48	@ 0x30
 800e9bc:	f806 5b01 	strb.w	r5, [r6], #1
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	42a6      	cmp	r6, r4
 800e9c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9ca:	f04f 0200 	mov.w	r2, #0
 800e9ce:	d124      	bne.n	800ea1a <_dtoa_r+0x662>
 800e9d0:	4bac      	ldr	r3, [pc, #688]	@ (800ec84 <_dtoa_r+0x8cc>)
 800e9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e9d6:	f7f1 fc79 	bl	80002cc <__adddf3>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	460b      	mov	r3, r1
 800e9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9e2:	f7f2 f8b9 	bl	8000b58 <__aeabi_dcmpgt>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d145      	bne.n	800ea76 <_dtoa_r+0x6be>
 800e9ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e9ee:	49a5      	ldr	r1, [pc, #660]	@ (800ec84 <_dtoa_r+0x8cc>)
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	f7f1 fc69 	bl	80002c8 <__aeabi_dsub>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9fe:	f7f2 f88d 	bl	8000b1c <__aeabi_dcmplt>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f43f aef5 	beq.w	800e7f2 <_dtoa_r+0x43a>
 800ea08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ea0a:	1e73      	subs	r3, r6, #1
 800ea0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ea0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ea12:	2b30      	cmp	r3, #48	@ 0x30
 800ea14:	d0f8      	beq.n	800ea08 <_dtoa_r+0x650>
 800ea16:	9f04      	ldr	r7, [sp, #16]
 800ea18:	e73e      	b.n	800e898 <_dtoa_r+0x4e0>
 800ea1a:	4b9b      	ldr	r3, [pc, #620]	@ (800ec88 <_dtoa_r+0x8d0>)
 800ea1c:	f7f1 fe0c 	bl	8000638 <__aeabi_dmul>
 800ea20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea24:	e7bc      	b.n	800e9a0 <_dtoa_r+0x5e8>
 800ea26:	d10c      	bne.n	800ea42 <_dtoa_r+0x68a>
 800ea28:	4b98      	ldr	r3, [pc, #608]	@ (800ec8c <_dtoa_r+0x8d4>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea30:	f7f1 fe02 	bl	8000638 <__aeabi_dmul>
 800ea34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea38:	f7f2 f884 	bl	8000b44 <__aeabi_dcmpge>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	f000 8157 	beq.w	800ecf0 <_dtoa_r+0x938>
 800ea42:	2400      	movs	r4, #0
 800ea44:	4625      	mov	r5, r4
 800ea46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea48:	43db      	mvns	r3, r3
 800ea4a:	9304      	str	r3, [sp, #16]
 800ea4c:	4656      	mov	r6, sl
 800ea4e:	2700      	movs	r7, #0
 800ea50:	4621      	mov	r1, r4
 800ea52:	4658      	mov	r0, fp
 800ea54:	f000 fb06 	bl	800f064 <_Bfree>
 800ea58:	2d00      	cmp	r5, #0
 800ea5a:	d0dc      	beq.n	800ea16 <_dtoa_r+0x65e>
 800ea5c:	b12f      	cbz	r7, 800ea6a <_dtoa_r+0x6b2>
 800ea5e:	42af      	cmp	r7, r5
 800ea60:	d003      	beq.n	800ea6a <_dtoa_r+0x6b2>
 800ea62:	4639      	mov	r1, r7
 800ea64:	4658      	mov	r0, fp
 800ea66:	f000 fafd 	bl	800f064 <_Bfree>
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	4658      	mov	r0, fp
 800ea6e:	f000 faf9 	bl	800f064 <_Bfree>
 800ea72:	e7d0      	b.n	800ea16 <_dtoa_r+0x65e>
 800ea74:	9704      	str	r7, [sp, #16]
 800ea76:	4633      	mov	r3, r6
 800ea78:	461e      	mov	r6, r3
 800ea7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea7e:	2a39      	cmp	r2, #57	@ 0x39
 800ea80:	d107      	bne.n	800ea92 <_dtoa_r+0x6da>
 800ea82:	459a      	cmp	sl, r3
 800ea84:	d1f8      	bne.n	800ea78 <_dtoa_r+0x6c0>
 800ea86:	9a04      	ldr	r2, [sp, #16]
 800ea88:	3201      	adds	r2, #1
 800ea8a:	9204      	str	r2, [sp, #16]
 800ea8c:	2230      	movs	r2, #48	@ 0x30
 800ea8e:	f88a 2000 	strb.w	r2, [sl]
 800ea92:	781a      	ldrb	r2, [r3, #0]
 800ea94:	3201      	adds	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
 800ea98:	e7bd      	b.n	800ea16 <_dtoa_r+0x65e>
 800ea9a:	4b7b      	ldr	r3, [pc, #492]	@ (800ec88 <_dtoa_r+0x8d0>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f7f1 fdcb 	bl	8000638 <__aeabi_dmul>
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	f7f2 f82d 	bl	8000b08 <__aeabi_dcmpeq>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f43f aebb 	beq.w	800e82a <_dtoa_r+0x472>
 800eab4:	e6f0      	b.n	800e898 <_dtoa_r+0x4e0>
 800eab6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eab8:	2a00      	cmp	r2, #0
 800eaba:	f000 80db 	beq.w	800ec74 <_dtoa_r+0x8bc>
 800eabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eac0:	2a01      	cmp	r2, #1
 800eac2:	f300 80bf 	bgt.w	800ec44 <_dtoa_r+0x88c>
 800eac6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eac8:	2a00      	cmp	r2, #0
 800eaca:	f000 80b7 	beq.w	800ec3c <_dtoa_r+0x884>
 800eace:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ead2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ead4:	4646      	mov	r6, r8
 800ead6:	9a08      	ldr	r2, [sp, #32]
 800ead8:	2101      	movs	r1, #1
 800eada:	441a      	add	r2, r3
 800eadc:	4658      	mov	r0, fp
 800eade:	4498      	add	r8, r3
 800eae0:	9208      	str	r2, [sp, #32]
 800eae2:	f000 fbbd 	bl	800f260 <__i2b>
 800eae6:	4605      	mov	r5, r0
 800eae8:	b15e      	cbz	r6, 800eb02 <_dtoa_r+0x74a>
 800eaea:	9b08      	ldr	r3, [sp, #32]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	dd08      	ble.n	800eb02 <_dtoa_r+0x74a>
 800eaf0:	42b3      	cmp	r3, r6
 800eaf2:	9a08      	ldr	r2, [sp, #32]
 800eaf4:	bfa8      	it	ge
 800eaf6:	4633      	movge	r3, r6
 800eaf8:	eba8 0803 	sub.w	r8, r8, r3
 800eafc:	1af6      	subs	r6, r6, r3
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	9308      	str	r3, [sp, #32]
 800eb02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb04:	b1f3      	cbz	r3, 800eb44 <_dtoa_r+0x78c>
 800eb06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 80b7 	beq.w	800ec7c <_dtoa_r+0x8c4>
 800eb0e:	b18c      	cbz	r4, 800eb34 <_dtoa_r+0x77c>
 800eb10:	4629      	mov	r1, r5
 800eb12:	4622      	mov	r2, r4
 800eb14:	4658      	mov	r0, fp
 800eb16:	f000 fc63 	bl	800f3e0 <__pow5mult>
 800eb1a:	464a      	mov	r2, r9
 800eb1c:	4601      	mov	r1, r0
 800eb1e:	4605      	mov	r5, r0
 800eb20:	4658      	mov	r0, fp
 800eb22:	f000 fbb3 	bl	800f28c <__multiply>
 800eb26:	4649      	mov	r1, r9
 800eb28:	9004      	str	r0, [sp, #16]
 800eb2a:	4658      	mov	r0, fp
 800eb2c:	f000 fa9a 	bl	800f064 <_Bfree>
 800eb30:	9b04      	ldr	r3, [sp, #16]
 800eb32:	4699      	mov	r9, r3
 800eb34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb36:	1b1a      	subs	r2, r3, r4
 800eb38:	d004      	beq.n	800eb44 <_dtoa_r+0x78c>
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	4658      	mov	r0, fp
 800eb3e:	f000 fc4f 	bl	800f3e0 <__pow5mult>
 800eb42:	4681      	mov	r9, r0
 800eb44:	2101      	movs	r1, #1
 800eb46:	4658      	mov	r0, fp
 800eb48:	f000 fb8a 	bl	800f260 <__i2b>
 800eb4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb4e:	4604      	mov	r4, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 81cf 	beq.w	800eef4 <_dtoa_r+0xb3c>
 800eb56:	461a      	mov	r2, r3
 800eb58:	4601      	mov	r1, r0
 800eb5a:	4658      	mov	r0, fp
 800eb5c:	f000 fc40 	bl	800f3e0 <__pow5mult>
 800eb60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	4604      	mov	r4, r0
 800eb66:	f300 8095 	bgt.w	800ec94 <_dtoa_r+0x8dc>
 800eb6a:	9b02      	ldr	r3, [sp, #8]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f040 8087 	bne.w	800ec80 <_dtoa_r+0x8c8>
 800eb72:	9b03      	ldr	r3, [sp, #12]
 800eb74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f040 8089 	bne.w	800ec90 <_dtoa_r+0x8d8>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb84:	0d1b      	lsrs	r3, r3, #20
 800eb86:	051b      	lsls	r3, r3, #20
 800eb88:	b12b      	cbz	r3, 800eb96 <_dtoa_r+0x7de>
 800eb8a:	9b08      	ldr	r3, [sp, #32]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	9308      	str	r3, [sp, #32]
 800eb90:	f108 0801 	add.w	r8, r8, #1
 800eb94:	2301      	movs	r3, #1
 800eb96:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 81b0 	beq.w	800ef00 <_dtoa_r+0xb48>
 800eba0:	6923      	ldr	r3, [r4, #16]
 800eba2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eba6:	6918      	ldr	r0, [r3, #16]
 800eba8:	f000 fb0e 	bl	800f1c8 <__hi0bits>
 800ebac:	f1c0 0020 	rsb	r0, r0, #32
 800ebb0:	9b08      	ldr	r3, [sp, #32]
 800ebb2:	4418      	add	r0, r3
 800ebb4:	f010 001f 	ands.w	r0, r0, #31
 800ebb8:	d077      	beq.n	800ecaa <_dtoa_r+0x8f2>
 800ebba:	f1c0 0320 	rsb	r3, r0, #32
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	dd6b      	ble.n	800ec9a <_dtoa_r+0x8e2>
 800ebc2:	9b08      	ldr	r3, [sp, #32]
 800ebc4:	f1c0 001c 	rsb	r0, r0, #28
 800ebc8:	4403      	add	r3, r0
 800ebca:	4480      	add	r8, r0
 800ebcc:	4406      	add	r6, r0
 800ebce:	9308      	str	r3, [sp, #32]
 800ebd0:	f1b8 0f00 	cmp.w	r8, #0
 800ebd4:	dd05      	ble.n	800ebe2 <_dtoa_r+0x82a>
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	4642      	mov	r2, r8
 800ebda:	4658      	mov	r0, fp
 800ebdc:	f000 fc5a 	bl	800f494 <__lshift>
 800ebe0:	4681      	mov	r9, r0
 800ebe2:	9b08      	ldr	r3, [sp, #32]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	dd05      	ble.n	800ebf4 <_dtoa_r+0x83c>
 800ebe8:	4621      	mov	r1, r4
 800ebea:	461a      	mov	r2, r3
 800ebec:	4658      	mov	r0, fp
 800ebee:	f000 fc51 	bl	800f494 <__lshift>
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d059      	beq.n	800ecae <_dtoa_r+0x8f6>
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4648      	mov	r0, r9
 800ebfe:	f000 fcb5 	bl	800f56c <__mcmp>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	da53      	bge.n	800ecae <_dtoa_r+0x8f6>
 800ec06:	1e7b      	subs	r3, r7, #1
 800ec08:	9304      	str	r3, [sp, #16]
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	220a      	movs	r2, #10
 800ec10:	4658      	mov	r0, fp
 800ec12:	f000 fa49 	bl	800f0a8 <__multadd>
 800ec16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec18:	4681      	mov	r9, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f000 8172 	beq.w	800ef04 <_dtoa_r+0xb4c>
 800ec20:	2300      	movs	r3, #0
 800ec22:	4629      	mov	r1, r5
 800ec24:	220a      	movs	r2, #10
 800ec26:	4658      	mov	r0, fp
 800ec28:	f000 fa3e 	bl	800f0a8 <__multadd>
 800ec2c:	9b00      	ldr	r3, [sp, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	4605      	mov	r5, r0
 800ec32:	dc67      	bgt.n	800ed04 <_dtoa_r+0x94c>
 800ec34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	dc41      	bgt.n	800ecbe <_dtoa_r+0x906>
 800ec3a:	e063      	b.n	800ed04 <_dtoa_r+0x94c>
 800ec3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ec3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ec42:	e746      	b.n	800ead2 <_dtoa_r+0x71a>
 800ec44:	9b07      	ldr	r3, [sp, #28]
 800ec46:	1e5c      	subs	r4, r3, #1
 800ec48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec4a:	42a3      	cmp	r3, r4
 800ec4c:	bfbf      	itttt	lt
 800ec4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ec50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ec52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ec54:	1ae3      	sublt	r3, r4, r3
 800ec56:	bfb4      	ite	lt
 800ec58:	18d2      	addlt	r2, r2, r3
 800ec5a:	1b1c      	subge	r4, r3, r4
 800ec5c:	9b07      	ldr	r3, [sp, #28]
 800ec5e:	bfbc      	itt	lt
 800ec60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ec62:	2400      	movlt	r4, #0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	bfb5      	itete	lt
 800ec68:	eba8 0603 	sublt.w	r6, r8, r3
 800ec6c:	9b07      	ldrge	r3, [sp, #28]
 800ec6e:	2300      	movlt	r3, #0
 800ec70:	4646      	movge	r6, r8
 800ec72:	e730      	b.n	800ead6 <_dtoa_r+0x71e>
 800ec74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ec78:	4646      	mov	r6, r8
 800ec7a:	e735      	b.n	800eae8 <_dtoa_r+0x730>
 800ec7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ec7e:	e75c      	b.n	800eb3a <_dtoa_r+0x782>
 800ec80:	2300      	movs	r3, #0
 800ec82:	e788      	b.n	800eb96 <_dtoa_r+0x7de>
 800ec84:	3fe00000 	.word	0x3fe00000
 800ec88:	40240000 	.word	0x40240000
 800ec8c:	40140000 	.word	0x40140000
 800ec90:	9b02      	ldr	r3, [sp, #8]
 800ec92:	e780      	b.n	800eb96 <_dtoa_r+0x7de>
 800ec94:	2300      	movs	r3, #0
 800ec96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec98:	e782      	b.n	800eba0 <_dtoa_r+0x7e8>
 800ec9a:	d099      	beq.n	800ebd0 <_dtoa_r+0x818>
 800ec9c:	9a08      	ldr	r2, [sp, #32]
 800ec9e:	331c      	adds	r3, #28
 800eca0:	441a      	add	r2, r3
 800eca2:	4498      	add	r8, r3
 800eca4:	441e      	add	r6, r3
 800eca6:	9208      	str	r2, [sp, #32]
 800eca8:	e792      	b.n	800ebd0 <_dtoa_r+0x818>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	e7f6      	b.n	800ec9c <_dtoa_r+0x8e4>
 800ecae:	9b07      	ldr	r3, [sp, #28]
 800ecb0:	9704      	str	r7, [sp, #16]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	dc20      	bgt.n	800ecf8 <_dtoa_r+0x940>
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	dd1e      	ble.n	800ecfc <_dtoa_r+0x944>
 800ecbe:	9b00      	ldr	r3, [sp, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f47f aec0 	bne.w	800ea46 <_dtoa_r+0x68e>
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	2205      	movs	r2, #5
 800ecca:	4658      	mov	r0, fp
 800eccc:	f000 f9ec 	bl	800f0a8 <__multadd>
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	4648      	mov	r0, r9
 800ecd6:	f000 fc49 	bl	800f56c <__mcmp>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f77f aeb3 	ble.w	800ea46 <_dtoa_r+0x68e>
 800ece0:	4656      	mov	r6, sl
 800ece2:	2331      	movs	r3, #49	@ 0x31
 800ece4:	f806 3b01 	strb.w	r3, [r6], #1
 800ece8:	9b04      	ldr	r3, [sp, #16]
 800ecea:	3301      	adds	r3, #1
 800ecec:	9304      	str	r3, [sp, #16]
 800ecee:	e6ae      	b.n	800ea4e <_dtoa_r+0x696>
 800ecf0:	9c07      	ldr	r4, [sp, #28]
 800ecf2:	9704      	str	r7, [sp, #16]
 800ecf4:	4625      	mov	r5, r4
 800ecf6:	e7f3      	b.n	800ece0 <_dtoa_r+0x928>
 800ecf8:	9b07      	ldr	r3, [sp, #28]
 800ecfa:	9300      	str	r3, [sp, #0]
 800ecfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f000 8104 	beq.w	800ef0c <_dtoa_r+0xb54>
 800ed04:	2e00      	cmp	r6, #0
 800ed06:	dd05      	ble.n	800ed14 <_dtoa_r+0x95c>
 800ed08:	4629      	mov	r1, r5
 800ed0a:	4632      	mov	r2, r6
 800ed0c:	4658      	mov	r0, fp
 800ed0e:	f000 fbc1 	bl	800f494 <__lshift>
 800ed12:	4605      	mov	r5, r0
 800ed14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d05a      	beq.n	800edd0 <_dtoa_r+0xa18>
 800ed1a:	6869      	ldr	r1, [r5, #4]
 800ed1c:	4658      	mov	r0, fp
 800ed1e:	f000 f961 	bl	800efe4 <_Balloc>
 800ed22:	4606      	mov	r6, r0
 800ed24:	b928      	cbnz	r0, 800ed32 <_dtoa_r+0x97a>
 800ed26:	4b84      	ldr	r3, [pc, #528]	@ (800ef38 <_dtoa_r+0xb80>)
 800ed28:	4602      	mov	r2, r0
 800ed2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ed2e:	f7ff bb5a 	b.w	800e3e6 <_dtoa_r+0x2e>
 800ed32:	692a      	ldr	r2, [r5, #16]
 800ed34:	3202      	adds	r2, #2
 800ed36:	0092      	lsls	r2, r2, #2
 800ed38:	f105 010c 	add.w	r1, r5, #12
 800ed3c:	300c      	adds	r0, #12
 800ed3e:	f7ff fa9c 	bl	800e27a <memcpy>
 800ed42:	2201      	movs	r2, #1
 800ed44:	4631      	mov	r1, r6
 800ed46:	4658      	mov	r0, fp
 800ed48:	f000 fba4 	bl	800f494 <__lshift>
 800ed4c:	f10a 0301 	add.w	r3, sl, #1
 800ed50:	9307      	str	r3, [sp, #28]
 800ed52:	9b00      	ldr	r3, [sp, #0]
 800ed54:	4453      	add	r3, sl
 800ed56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed58:	9b02      	ldr	r3, [sp, #8]
 800ed5a:	f003 0301 	and.w	r3, r3, #1
 800ed5e:	462f      	mov	r7, r5
 800ed60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed62:	4605      	mov	r5, r0
 800ed64:	9b07      	ldr	r3, [sp, #28]
 800ed66:	4621      	mov	r1, r4
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	4648      	mov	r0, r9
 800ed6c:	9300      	str	r3, [sp, #0]
 800ed6e:	f7ff fa99 	bl	800e2a4 <quorem>
 800ed72:	4639      	mov	r1, r7
 800ed74:	9002      	str	r0, [sp, #8]
 800ed76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed7a:	4648      	mov	r0, r9
 800ed7c:	f000 fbf6 	bl	800f56c <__mcmp>
 800ed80:	462a      	mov	r2, r5
 800ed82:	9008      	str	r0, [sp, #32]
 800ed84:	4621      	mov	r1, r4
 800ed86:	4658      	mov	r0, fp
 800ed88:	f000 fc0c 	bl	800f5a4 <__mdiff>
 800ed8c:	68c2      	ldr	r2, [r0, #12]
 800ed8e:	4606      	mov	r6, r0
 800ed90:	bb02      	cbnz	r2, 800edd4 <_dtoa_r+0xa1c>
 800ed92:	4601      	mov	r1, r0
 800ed94:	4648      	mov	r0, r9
 800ed96:	f000 fbe9 	bl	800f56c <__mcmp>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	4631      	mov	r1, r6
 800ed9e:	4658      	mov	r0, fp
 800eda0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eda2:	f000 f95f 	bl	800f064 <_Bfree>
 800eda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eda8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edaa:	9e07      	ldr	r6, [sp, #28]
 800edac:	ea43 0102 	orr.w	r1, r3, r2
 800edb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edb2:	4319      	orrs	r1, r3
 800edb4:	d110      	bne.n	800edd8 <_dtoa_r+0xa20>
 800edb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800edba:	d029      	beq.n	800ee10 <_dtoa_r+0xa58>
 800edbc:	9b08      	ldr	r3, [sp, #32]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dd02      	ble.n	800edc8 <_dtoa_r+0xa10>
 800edc2:	9b02      	ldr	r3, [sp, #8]
 800edc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800edc8:	9b00      	ldr	r3, [sp, #0]
 800edca:	f883 8000 	strb.w	r8, [r3]
 800edce:	e63f      	b.n	800ea50 <_dtoa_r+0x698>
 800edd0:	4628      	mov	r0, r5
 800edd2:	e7bb      	b.n	800ed4c <_dtoa_r+0x994>
 800edd4:	2201      	movs	r2, #1
 800edd6:	e7e1      	b.n	800ed9c <_dtoa_r+0x9e4>
 800edd8:	9b08      	ldr	r3, [sp, #32]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	db04      	blt.n	800ede8 <_dtoa_r+0xa30>
 800edde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ede0:	430b      	orrs	r3, r1
 800ede2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ede4:	430b      	orrs	r3, r1
 800ede6:	d120      	bne.n	800ee2a <_dtoa_r+0xa72>
 800ede8:	2a00      	cmp	r2, #0
 800edea:	dded      	ble.n	800edc8 <_dtoa_r+0xa10>
 800edec:	4649      	mov	r1, r9
 800edee:	2201      	movs	r2, #1
 800edf0:	4658      	mov	r0, fp
 800edf2:	f000 fb4f 	bl	800f494 <__lshift>
 800edf6:	4621      	mov	r1, r4
 800edf8:	4681      	mov	r9, r0
 800edfa:	f000 fbb7 	bl	800f56c <__mcmp>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	dc03      	bgt.n	800ee0a <_dtoa_r+0xa52>
 800ee02:	d1e1      	bne.n	800edc8 <_dtoa_r+0xa10>
 800ee04:	f018 0f01 	tst.w	r8, #1
 800ee08:	d0de      	beq.n	800edc8 <_dtoa_r+0xa10>
 800ee0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee0e:	d1d8      	bne.n	800edc2 <_dtoa_r+0xa0a>
 800ee10:	9a00      	ldr	r2, [sp, #0]
 800ee12:	2339      	movs	r3, #57	@ 0x39
 800ee14:	7013      	strb	r3, [r2, #0]
 800ee16:	4633      	mov	r3, r6
 800ee18:	461e      	mov	r6, r3
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ee20:	2a39      	cmp	r2, #57	@ 0x39
 800ee22:	d052      	beq.n	800eeca <_dtoa_r+0xb12>
 800ee24:	3201      	adds	r2, #1
 800ee26:	701a      	strb	r2, [r3, #0]
 800ee28:	e612      	b.n	800ea50 <_dtoa_r+0x698>
 800ee2a:	2a00      	cmp	r2, #0
 800ee2c:	dd07      	ble.n	800ee3e <_dtoa_r+0xa86>
 800ee2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee32:	d0ed      	beq.n	800ee10 <_dtoa_r+0xa58>
 800ee34:	9a00      	ldr	r2, [sp, #0]
 800ee36:	f108 0301 	add.w	r3, r8, #1
 800ee3a:	7013      	strb	r3, [r2, #0]
 800ee3c:	e608      	b.n	800ea50 <_dtoa_r+0x698>
 800ee3e:	9b07      	ldr	r3, [sp, #28]
 800ee40:	9a07      	ldr	r2, [sp, #28]
 800ee42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ee46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d028      	beq.n	800ee9e <_dtoa_r+0xae6>
 800ee4c:	4649      	mov	r1, r9
 800ee4e:	2300      	movs	r3, #0
 800ee50:	220a      	movs	r2, #10
 800ee52:	4658      	mov	r0, fp
 800ee54:	f000 f928 	bl	800f0a8 <__multadd>
 800ee58:	42af      	cmp	r7, r5
 800ee5a:	4681      	mov	r9, r0
 800ee5c:	f04f 0300 	mov.w	r3, #0
 800ee60:	f04f 020a 	mov.w	r2, #10
 800ee64:	4639      	mov	r1, r7
 800ee66:	4658      	mov	r0, fp
 800ee68:	d107      	bne.n	800ee7a <_dtoa_r+0xac2>
 800ee6a:	f000 f91d 	bl	800f0a8 <__multadd>
 800ee6e:	4607      	mov	r7, r0
 800ee70:	4605      	mov	r5, r0
 800ee72:	9b07      	ldr	r3, [sp, #28]
 800ee74:	3301      	adds	r3, #1
 800ee76:	9307      	str	r3, [sp, #28]
 800ee78:	e774      	b.n	800ed64 <_dtoa_r+0x9ac>
 800ee7a:	f000 f915 	bl	800f0a8 <__multadd>
 800ee7e:	4629      	mov	r1, r5
 800ee80:	4607      	mov	r7, r0
 800ee82:	2300      	movs	r3, #0
 800ee84:	220a      	movs	r2, #10
 800ee86:	4658      	mov	r0, fp
 800ee88:	f000 f90e 	bl	800f0a8 <__multadd>
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	e7f0      	b.n	800ee72 <_dtoa_r+0xaba>
 800ee90:	9b00      	ldr	r3, [sp, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bfcc      	ite	gt
 800ee96:	461e      	movgt	r6, r3
 800ee98:	2601      	movle	r6, #1
 800ee9a:	4456      	add	r6, sl
 800ee9c:	2700      	movs	r7, #0
 800ee9e:	4649      	mov	r1, r9
 800eea0:	2201      	movs	r2, #1
 800eea2:	4658      	mov	r0, fp
 800eea4:	f000 faf6 	bl	800f494 <__lshift>
 800eea8:	4621      	mov	r1, r4
 800eeaa:	4681      	mov	r9, r0
 800eeac:	f000 fb5e 	bl	800f56c <__mcmp>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	dcb0      	bgt.n	800ee16 <_dtoa_r+0xa5e>
 800eeb4:	d102      	bne.n	800eebc <_dtoa_r+0xb04>
 800eeb6:	f018 0f01 	tst.w	r8, #1
 800eeba:	d1ac      	bne.n	800ee16 <_dtoa_r+0xa5e>
 800eebc:	4633      	mov	r3, r6
 800eebe:	461e      	mov	r6, r3
 800eec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eec4:	2a30      	cmp	r2, #48	@ 0x30
 800eec6:	d0fa      	beq.n	800eebe <_dtoa_r+0xb06>
 800eec8:	e5c2      	b.n	800ea50 <_dtoa_r+0x698>
 800eeca:	459a      	cmp	sl, r3
 800eecc:	d1a4      	bne.n	800ee18 <_dtoa_r+0xa60>
 800eece:	9b04      	ldr	r3, [sp, #16]
 800eed0:	3301      	adds	r3, #1
 800eed2:	9304      	str	r3, [sp, #16]
 800eed4:	2331      	movs	r3, #49	@ 0x31
 800eed6:	f88a 3000 	strb.w	r3, [sl]
 800eeda:	e5b9      	b.n	800ea50 <_dtoa_r+0x698>
 800eedc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eede:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ef3c <_dtoa_r+0xb84>
 800eee2:	b11b      	cbz	r3, 800eeec <_dtoa_r+0xb34>
 800eee4:	f10a 0308 	add.w	r3, sl, #8
 800eee8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eeea:	6013      	str	r3, [r2, #0]
 800eeec:	4650      	mov	r0, sl
 800eeee:	b019      	add	sp, #100	@ 0x64
 800eef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	f77f ae37 	ble.w	800eb6a <_dtoa_r+0x7b2>
 800eefc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eefe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef00:	2001      	movs	r0, #1
 800ef02:	e655      	b.n	800ebb0 <_dtoa_r+0x7f8>
 800ef04:	9b00      	ldr	r3, [sp, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f77f aed6 	ble.w	800ecb8 <_dtoa_r+0x900>
 800ef0c:	4656      	mov	r6, sl
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4648      	mov	r0, r9
 800ef12:	f7ff f9c7 	bl	800e2a4 <quorem>
 800ef16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef1a:	f806 8b01 	strb.w	r8, [r6], #1
 800ef1e:	9b00      	ldr	r3, [sp, #0]
 800ef20:	eba6 020a 	sub.w	r2, r6, sl
 800ef24:	4293      	cmp	r3, r2
 800ef26:	ddb3      	ble.n	800ee90 <_dtoa_r+0xad8>
 800ef28:	4649      	mov	r1, r9
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	220a      	movs	r2, #10
 800ef2e:	4658      	mov	r0, fp
 800ef30:	f000 f8ba 	bl	800f0a8 <__multadd>
 800ef34:	4681      	mov	r9, r0
 800ef36:	e7ea      	b.n	800ef0e <_dtoa_r+0xb56>
 800ef38:	08013543 	.word	0x08013543
 800ef3c:	080134c7 	.word	0x080134c7

0800ef40 <_free_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4605      	mov	r5, r0
 800ef44:	2900      	cmp	r1, #0
 800ef46:	d041      	beq.n	800efcc <_free_r+0x8c>
 800ef48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef4c:	1f0c      	subs	r4, r1, #4
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	bfb8      	it	lt
 800ef52:	18e4      	addlt	r4, r4, r3
 800ef54:	f7fe f912 	bl	800d17c <__malloc_lock>
 800ef58:	4a1d      	ldr	r2, [pc, #116]	@ (800efd0 <_free_r+0x90>)
 800ef5a:	6813      	ldr	r3, [r2, #0]
 800ef5c:	b933      	cbnz	r3, 800ef6c <_free_r+0x2c>
 800ef5e:	6063      	str	r3, [r4, #4]
 800ef60:	6014      	str	r4, [r2, #0]
 800ef62:	4628      	mov	r0, r5
 800ef64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef68:	f7fe b90e 	b.w	800d188 <__malloc_unlock>
 800ef6c:	42a3      	cmp	r3, r4
 800ef6e:	d908      	bls.n	800ef82 <_free_r+0x42>
 800ef70:	6820      	ldr	r0, [r4, #0]
 800ef72:	1821      	adds	r1, r4, r0
 800ef74:	428b      	cmp	r3, r1
 800ef76:	bf01      	itttt	eq
 800ef78:	6819      	ldreq	r1, [r3, #0]
 800ef7a:	685b      	ldreq	r3, [r3, #4]
 800ef7c:	1809      	addeq	r1, r1, r0
 800ef7e:	6021      	streq	r1, [r4, #0]
 800ef80:	e7ed      	b.n	800ef5e <_free_r+0x1e>
 800ef82:	461a      	mov	r2, r3
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	b10b      	cbz	r3, 800ef8c <_free_r+0x4c>
 800ef88:	42a3      	cmp	r3, r4
 800ef8a:	d9fa      	bls.n	800ef82 <_free_r+0x42>
 800ef8c:	6811      	ldr	r1, [r2, #0]
 800ef8e:	1850      	adds	r0, r2, r1
 800ef90:	42a0      	cmp	r0, r4
 800ef92:	d10b      	bne.n	800efac <_free_r+0x6c>
 800ef94:	6820      	ldr	r0, [r4, #0]
 800ef96:	4401      	add	r1, r0
 800ef98:	1850      	adds	r0, r2, r1
 800ef9a:	4283      	cmp	r3, r0
 800ef9c:	6011      	str	r1, [r2, #0]
 800ef9e:	d1e0      	bne.n	800ef62 <_free_r+0x22>
 800efa0:	6818      	ldr	r0, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	6053      	str	r3, [r2, #4]
 800efa6:	4408      	add	r0, r1
 800efa8:	6010      	str	r0, [r2, #0]
 800efaa:	e7da      	b.n	800ef62 <_free_r+0x22>
 800efac:	d902      	bls.n	800efb4 <_free_r+0x74>
 800efae:	230c      	movs	r3, #12
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	e7d6      	b.n	800ef62 <_free_r+0x22>
 800efb4:	6820      	ldr	r0, [r4, #0]
 800efb6:	1821      	adds	r1, r4, r0
 800efb8:	428b      	cmp	r3, r1
 800efba:	bf04      	itt	eq
 800efbc:	6819      	ldreq	r1, [r3, #0]
 800efbe:	685b      	ldreq	r3, [r3, #4]
 800efc0:	6063      	str	r3, [r4, #4]
 800efc2:	bf04      	itt	eq
 800efc4:	1809      	addeq	r1, r1, r0
 800efc6:	6021      	streq	r1, [r4, #0]
 800efc8:	6054      	str	r4, [r2, #4]
 800efca:	e7ca      	b.n	800ef62 <_free_r+0x22>
 800efcc:	bd38      	pop	{r3, r4, r5, pc}
 800efce:	bf00      	nop
 800efd0:	200016dc 	.word	0x200016dc

0800efd4 <malloc>:
 800efd4:	4b02      	ldr	r3, [pc, #8]	@ (800efe0 <malloc+0xc>)
 800efd6:	4601      	mov	r1, r0
 800efd8:	6818      	ldr	r0, [r3, #0]
 800efda:	f7fe b84f 	b.w	800d07c <_malloc_r>
 800efde:	bf00      	nop
 800efe0:	2000004c 	.word	0x2000004c

0800efe4 <_Balloc>:
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	69c6      	ldr	r6, [r0, #28]
 800efe8:	4604      	mov	r4, r0
 800efea:	460d      	mov	r5, r1
 800efec:	b976      	cbnz	r6, 800f00c <_Balloc+0x28>
 800efee:	2010      	movs	r0, #16
 800eff0:	f7ff fff0 	bl	800efd4 <malloc>
 800eff4:	4602      	mov	r2, r0
 800eff6:	61e0      	str	r0, [r4, #28]
 800eff8:	b920      	cbnz	r0, 800f004 <_Balloc+0x20>
 800effa:	4b18      	ldr	r3, [pc, #96]	@ (800f05c <_Balloc+0x78>)
 800effc:	4818      	ldr	r0, [pc, #96]	@ (800f060 <_Balloc+0x7c>)
 800effe:	216b      	movs	r1, #107	@ 0x6b
 800f000:	f002 f8ee 	bl	80111e0 <__assert_func>
 800f004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f008:	6006      	str	r6, [r0, #0]
 800f00a:	60c6      	str	r6, [r0, #12]
 800f00c:	69e6      	ldr	r6, [r4, #28]
 800f00e:	68f3      	ldr	r3, [r6, #12]
 800f010:	b183      	cbz	r3, 800f034 <_Balloc+0x50>
 800f012:	69e3      	ldr	r3, [r4, #28]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f01a:	b9b8      	cbnz	r0, 800f04c <_Balloc+0x68>
 800f01c:	2101      	movs	r1, #1
 800f01e:	fa01 f605 	lsl.w	r6, r1, r5
 800f022:	1d72      	adds	r2, r6, #5
 800f024:	0092      	lsls	r2, r2, #2
 800f026:	4620      	mov	r0, r4
 800f028:	f7fd fff2 	bl	800d010 <_calloc_r>
 800f02c:	b160      	cbz	r0, 800f048 <_Balloc+0x64>
 800f02e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f032:	e00e      	b.n	800f052 <_Balloc+0x6e>
 800f034:	2221      	movs	r2, #33	@ 0x21
 800f036:	2104      	movs	r1, #4
 800f038:	4620      	mov	r0, r4
 800f03a:	f7fd ffe9 	bl	800d010 <_calloc_r>
 800f03e:	69e3      	ldr	r3, [r4, #28]
 800f040:	60f0      	str	r0, [r6, #12]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1e4      	bne.n	800f012 <_Balloc+0x2e>
 800f048:	2000      	movs	r0, #0
 800f04a:	bd70      	pop	{r4, r5, r6, pc}
 800f04c:	6802      	ldr	r2, [r0, #0]
 800f04e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f052:	2300      	movs	r3, #0
 800f054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f058:	e7f7      	b.n	800f04a <_Balloc+0x66>
 800f05a:	bf00      	nop
 800f05c:	080134d4 	.word	0x080134d4
 800f060:	08013554 	.word	0x08013554

0800f064 <_Bfree>:
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	69c6      	ldr	r6, [r0, #28]
 800f068:	4605      	mov	r5, r0
 800f06a:	460c      	mov	r4, r1
 800f06c:	b976      	cbnz	r6, 800f08c <_Bfree+0x28>
 800f06e:	2010      	movs	r0, #16
 800f070:	f7ff ffb0 	bl	800efd4 <malloc>
 800f074:	4602      	mov	r2, r0
 800f076:	61e8      	str	r0, [r5, #28]
 800f078:	b920      	cbnz	r0, 800f084 <_Bfree+0x20>
 800f07a:	4b09      	ldr	r3, [pc, #36]	@ (800f0a0 <_Bfree+0x3c>)
 800f07c:	4809      	ldr	r0, [pc, #36]	@ (800f0a4 <_Bfree+0x40>)
 800f07e:	218f      	movs	r1, #143	@ 0x8f
 800f080:	f002 f8ae 	bl	80111e0 <__assert_func>
 800f084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f088:	6006      	str	r6, [r0, #0]
 800f08a:	60c6      	str	r6, [r0, #12]
 800f08c:	b13c      	cbz	r4, 800f09e <_Bfree+0x3a>
 800f08e:	69eb      	ldr	r3, [r5, #28]
 800f090:	6862      	ldr	r2, [r4, #4]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f098:	6021      	str	r1, [r4, #0]
 800f09a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	080134d4 	.word	0x080134d4
 800f0a4:	08013554 	.word	0x08013554

0800f0a8 <__multadd>:
 800f0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ac:	690d      	ldr	r5, [r1, #16]
 800f0ae:	4607      	mov	r7, r0
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	461e      	mov	r6, r3
 800f0b4:	f101 0c14 	add.w	ip, r1, #20
 800f0b8:	2000      	movs	r0, #0
 800f0ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f0be:	b299      	uxth	r1, r3
 800f0c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f0c4:	0c1e      	lsrs	r6, r3, #16
 800f0c6:	0c0b      	lsrs	r3, r1, #16
 800f0c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f0cc:	b289      	uxth	r1, r1
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0d4:	4285      	cmp	r5, r0
 800f0d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f0da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0de:	dcec      	bgt.n	800f0ba <__multadd+0x12>
 800f0e0:	b30e      	cbz	r6, 800f126 <__multadd+0x7e>
 800f0e2:	68a3      	ldr	r3, [r4, #8]
 800f0e4:	42ab      	cmp	r3, r5
 800f0e6:	dc19      	bgt.n	800f11c <__multadd+0x74>
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	3101      	adds	r1, #1
 800f0ee:	f7ff ff79 	bl	800efe4 <_Balloc>
 800f0f2:	4680      	mov	r8, r0
 800f0f4:	b928      	cbnz	r0, 800f102 <__multadd+0x5a>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f12c <__multadd+0x84>)
 800f0fa:	480d      	ldr	r0, [pc, #52]	@ (800f130 <__multadd+0x88>)
 800f0fc:	21ba      	movs	r1, #186	@ 0xba
 800f0fe:	f002 f86f 	bl	80111e0 <__assert_func>
 800f102:	6922      	ldr	r2, [r4, #16]
 800f104:	3202      	adds	r2, #2
 800f106:	f104 010c 	add.w	r1, r4, #12
 800f10a:	0092      	lsls	r2, r2, #2
 800f10c:	300c      	adds	r0, #12
 800f10e:	f7ff f8b4 	bl	800e27a <memcpy>
 800f112:	4621      	mov	r1, r4
 800f114:	4638      	mov	r0, r7
 800f116:	f7ff ffa5 	bl	800f064 <_Bfree>
 800f11a:	4644      	mov	r4, r8
 800f11c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f120:	3501      	adds	r5, #1
 800f122:	615e      	str	r6, [r3, #20]
 800f124:	6125      	str	r5, [r4, #16]
 800f126:	4620      	mov	r0, r4
 800f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12c:	08013543 	.word	0x08013543
 800f130:	08013554 	.word	0x08013554

0800f134 <__s2b>:
 800f134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f138:	460c      	mov	r4, r1
 800f13a:	4615      	mov	r5, r2
 800f13c:	461f      	mov	r7, r3
 800f13e:	2209      	movs	r2, #9
 800f140:	3308      	adds	r3, #8
 800f142:	4606      	mov	r6, r0
 800f144:	fb93 f3f2 	sdiv	r3, r3, r2
 800f148:	2100      	movs	r1, #0
 800f14a:	2201      	movs	r2, #1
 800f14c:	429a      	cmp	r2, r3
 800f14e:	db09      	blt.n	800f164 <__s2b+0x30>
 800f150:	4630      	mov	r0, r6
 800f152:	f7ff ff47 	bl	800efe4 <_Balloc>
 800f156:	b940      	cbnz	r0, 800f16a <__s2b+0x36>
 800f158:	4602      	mov	r2, r0
 800f15a:	4b19      	ldr	r3, [pc, #100]	@ (800f1c0 <__s2b+0x8c>)
 800f15c:	4819      	ldr	r0, [pc, #100]	@ (800f1c4 <__s2b+0x90>)
 800f15e:	21d3      	movs	r1, #211	@ 0xd3
 800f160:	f002 f83e 	bl	80111e0 <__assert_func>
 800f164:	0052      	lsls	r2, r2, #1
 800f166:	3101      	adds	r1, #1
 800f168:	e7f0      	b.n	800f14c <__s2b+0x18>
 800f16a:	9b08      	ldr	r3, [sp, #32]
 800f16c:	6143      	str	r3, [r0, #20]
 800f16e:	2d09      	cmp	r5, #9
 800f170:	f04f 0301 	mov.w	r3, #1
 800f174:	6103      	str	r3, [r0, #16]
 800f176:	dd16      	ble.n	800f1a6 <__s2b+0x72>
 800f178:	f104 0909 	add.w	r9, r4, #9
 800f17c:	46c8      	mov	r8, r9
 800f17e:	442c      	add	r4, r5
 800f180:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f184:	4601      	mov	r1, r0
 800f186:	3b30      	subs	r3, #48	@ 0x30
 800f188:	220a      	movs	r2, #10
 800f18a:	4630      	mov	r0, r6
 800f18c:	f7ff ff8c 	bl	800f0a8 <__multadd>
 800f190:	45a0      	cmp	r8, r4
 800f192:	d1f5      	bne.n	800f180 <__s2b+0x4c>
 800f194:	f1a5 0408 	sub.w	r4, r5, #8
 800f198:	444c      	add	r4, r9
 800f19a:	1b2d      	subs	r5, r5, r4
 800f19c:	1963      	adds	r3, r4, r5
 800f19e:	42bb      	cmp	r3, r7
 800f1a0:	db04      	blt.n	800f1ac <__s2b+0x78>
 800f1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a6:	340a      	adds	r4, #10
 800f1a8:	2509      	movs	r5, #9
 800f1aa:	e7f6      	b.n	800f19a <__s2b+0x66>
 800f1ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	3b30      	subs	r3, #48	@ 0x30
 800f1b4:	220a      	movs	r2, #10
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f7ff ff76 	bl	800f0a8 <__multadd>
 800f1bc:	e7ee      	b.n	800f19c <__s2b+0x68>
 800f1be:	bf00      	nop
 800f1c0:	08013543 	.word	0x08013543
 800f1c4:	08013554 	.word	0x08013554

0800f1c8 <__hi0bits>:
 800f1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	bf36      	itet	cc
 800f1d0:	0403      	lslcc	r3, r0, #16
 800f1d2:	2000      	movcs	r0, #0
 800f1d4:	2010      	movcc	r0, #16
 800f1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f1da:	bf3c      	itt	cc
 800f1dc:	021b      	lslcc	r3, r3, #8
 800f1de:	3008      	addcc	r0, #8
 800f1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1e4:	bf3c      	itt	cc
 800f1e6:	011b      	lslcc	r3, r3, #4
 800f1e8:	3004      	addcc	r0, #4
 800f1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1ee:	bf3c      	itt	cc
 800f1f0:	009b      	lslcc	r3, r3, #2
 800f1f2:	3002      	addcc	r0, #2
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	db05      	blt.n	800f204 <__hi0bits+0x3c>
 800f1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f1fc:	f100 0001 	add.w	r0, r0, #1
 800f200:	bf08      	it	eq
 800f202:	2020      	moveq	r0, #32
 800f204:	4770      	bx	lr

0800f206 <__lo0bits>:
 800f206:	6803      	ldr	r3, [r0, #0]
 800f208:	4602      	mov	r2, r0
 800f20a:	f013 0007 	ands.w	r0, r3, #7
 800f20e:	d00b      	beq.n	800f228 <__lo0bits+0x22>
 800f210:	07d9      	lsls	r1, r3, #31
 800f212:	d421      	bmi.n	800f258 <__lo0bits+0x52>
 800f214:	0798      	lsls	r0, r3, #30
 800f216:	bf49      	itett	mi
 800f218:	085b      	lsrmi	r3, r3, #1
 800f21a:	089b      	lsrpl	r3, r3, #2
 800f21c:	2001      	movmi	r0, #1
 800f21e:	6013      	strmi	r3, [r2, #0]
 800f220:	bf5c      	itt	pl
 800f222:	6013      	strpl	r3, [r2, #0]
 800f224:	2002      	movpl	r0, #2
 800f226:	4770      	bx	lr
 800f228:	b299      	uxth	r1, r3
 800f22a:	b909      	cbnz	r1, 800f230 <__lo0bits+0x2a>
 800f22c:	0c1b      	lsrs	r3, r3, #16
 800f22e:	2010      	movs	r0, #16
 800f230:	b2d9      	uxtb	r1, r3
 800f232:	b909      	cbnz	r1, 800f238 <__lo0bits+0x32>
 800f234:	3008      	adds	r0, #8
 800f236:	0a1b      	lsrs	r3, r3, #8
 800f238:	0719      	lsls	r1, r3, #28
 800f23a:	bf04      	itt	eq
 800f23c:	091b      	lsreq	r3, r3, #4
 800f23e:	3004      	addeq	r0, #4
 800f240:	0799      	lsls	r1, r3, #30
 800f242:	bf04      	itt	eq
 800f244:	089b      	lsreq	r3, r3, #2
 800f246:	3002      	addeq	r0, #2
 800f248:	07d9      	lsls	r1, r3, #31
 800f24a:	d403      	bmi.n	800f254 <__lo0bits+0x4e>
 800f24c:	085b      	lsrs	r3, r3, #1
 800f24e:	f100 0001 	add.w	r0, r0, #1
 800f252:	d003      	beq.n	800f25c <__lo0bits+0x56>
 800f254:	6013      	str	r3, [r2, #0]
 800f256:	4770      	bx	lr
 800f258:	2000      	movs	r0, #0
 800f25a:	4770      	bx	lr
 800f25c:	2020      	movs	r0, #32
 800f25e:	4770      	bx	lr

0800f260 <__i2b>:
 800f260:	b510      	push	{r4, lr}
 800f262:	460c      	mov	r4, r1
 800f264:	2101      	movs	r1, #1
 800f266:	f7ff febd 	bl	800efe4 <_Balloc>
 800f26a:	4602      	mov	r2, r0
 800f26c:	b928      	cbnz	r0, 800f27a <__i2b+0x1a>
 800f26e:	4b05      	ldr	r3, [pc, #20]	@ (800f284 <__i2b+0x24>)
 800f270:	4805      	ldr	r0, [pc, #20]	@ (800f288 <__i2b+0x28>)
 800f272:	f240 1145 	movw	r1, #325	@ 0x145
 800f276:	f001 ffb3 	bl	80111e0 <__assert_func>
 800f27a:	2301      	movs	r3, #1
 800f27c:	6144      	str	r4, [r0, #20]
 800f27e:	6103      	str	r3, [r0, #16]
 800f280:	bd10      	pop	{r4, pc}
 800f282:	bf00      	nop
 800f284:	08013543 	.word	0x08013543
 800f288:	08013554 	.word	0x08013554

0800f28c <__multiply>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	4614      	mov	r4, r2
 800f292:	690a      	ldr	r2, [r1, #16]
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	429a      	cmp	r2, r3
 800f298:	bfa8      	it	ge
 800f29a:	4623      	movge	r3, r4
 800f29c:	460f      	mov	r7, r1
 800f29e:	bfa4      	itt	ge
 800f2a0:	460c      	movge	r4, r1
 800f2a2:	461f      	movge	r7, r3
 800f2a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f2a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f2ac:	68a3      	ldr	r3, [r4, #8]
 800f2ae:	6861      	ldr	r1, [r4, #4]
 800f2b0:	eb0a 0609 	add.w	r6, sl, r9
 800f2b4:	42b3      	cmp	r3, r6
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	bfb8      	it	lt
 800f2ba:	3101      	addlt	r1, #1
 800f2bc:	f7ff fe92 	bl	800efe4 <_Balloc>
 800f2c0:	b930      	cbnz	r0, 800f2d0 <__multiply+0x44>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	4b44      	ldr	r3, [pc, #272]	@ (800f3d8 <__multiply+0x14c>)
 800f2c6:	4845      	ldr	r0, [pc, #276]	@ (800f3dc <__multiply+0x150>)
 800f2c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f2cc:	f001 ff88 	bl	80111e0 <__assert_func>
 800f2d0:	f100 0514 	add.w	r5, r0, #20
 800f2d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2d8:	462b      	mov	r3, r5
 800f2da:	2200      	movs	r2, #0
 800f2dc:	4543      	cmp	r3, r8
 800f2de:	d321      	bcc.n	800f324 <__multiply+0x98>
 800f2e0:	f107 0114 	add.w	r1, r7, #20
 800f2e4:	f104 0214 	add.w	r2, r4, #20
 800f2e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f2ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f2f0:	9302      	str	r3, [sp, #8]
 800f2f2:	1b13      	subs	r3, r2, r4
 800f2f4:	3b15      	subs	r3, #21
 800f2f6:	f023 0303 	bic.w	r3, r3, #3
 800f2fa:	3304      	adds	r3, #4
 800f2fc:	f104 0715 	add.w	r7, r4, #21
 800f300:	42ba      	cmp	r2, r7
 800f302:	bf38      	it	cc
 800f304:	2304      	movcc	r3, #4
 800f306:	9301      	str	r3, [sp, #4]
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	9103      	str	r1, [sp, #12]
 800f30c:	428b      	cmp	r3, r1
 800f30e:	d80c      	bhi.n	800f32a <__multiply+0x9e>
 800f310:	2e00      	cmp	r6, #0
 800f312:	dd03      	ble.n	800f31c <__multiply+0x90>
 800f314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d05b      	beq.n	800f3d4 <__multiply+0x148>
 800f31c:	6106      	str	r6, [r0, #16]
 800f31e:	b005      	add	sp, #20
 800f320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f324:	f843 2b04 	str.w	r2, [r3], #4
 800f328:	e7d8      	b.n	800f2dc <__multiply+0x50>
 800f32a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f32e:	f1ba 0f00 	cmp.w	sl, #0
 800f332:	d024      	beq.n	800f37e <__multiply+0xf2>
 800f334:	f104 0e14 	add.w	lr, r4, #20
 800f338:	46a9      	mov	r9, r5
 800f33a:	f04f 0c00 	mov.w	ip, #0
 800f33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f342:	f8d9 3000 	ldr.w	r3, [r9]
 800f346:	fa1f fb87 	uxth.w	fp, r7
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f350:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f354:	f8d9 7000 	ldr.w	r7, [r9]
 800f358:	4463      	add	r3, ip
 800f35a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f35e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f362:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f366:	b29b      	uxth	r3, r3
 800f368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f36c:	4572      	cmp	r2, lr
 800f36e:	f849 3b04 	str.w	r3, [r9], #4
 800f372:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f376:	d8e2      	bhi.n	800f33e <__multiply+0xb2>
 800f378:	9b01      	ldr	r3, [sp, #4]
 800f37a:	f845 c003 	str.w	ip, [r5, r3]
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f384:	3104      	adds	r1, #4
 800f386:	f1b9 0f00 	cmp.w	r9, #0
 800f38a:	d021      	beq.n	800f3d0 <__multiply+0x144>
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	f104 0c14 	add.w	ip, r4, #20
 800f392:	46ae      	mov	lr, r5
 800f394:	f04f 0a00 	mov.w	sl, #0
 800f398:	f8bc b000 	ldrh.w	fp, [ip]
 800f39c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f3a0:	fb09 770b 	mla	r7, r9, fp, r7
 800f3a4:	4457      	add	r7, sl
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f3ac:	f84e 3b04 	str.w	r3, [lr], #4
 800f3b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3b8:	f8be 3000 	ldrh.w	r3, [lr]
 800f3bc:	fb09 330a 	mla	r3, r9, sl, r3
 800f3c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f3c4:	4562      	cmp	r2, ip
 800f3c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3ca:	d8e5      	bhi.n	800f398 <__multiply+0x10c>
 800f3cc:	9f01      	ldr	r7, [sp, #4]
 800f3ce:	51eb      	str	r3, [r5, r7]
 800f3d0:	3504      	adds	r5, #4
 800f3d2:	e799      	b.n	800f308 <__multiply+0x7c>
 800f3d4:	3e01      	subs	r6, #1
 800f3d6:	e79b      	b.n	800f310 <__multiply+0x84>
 800f3d8:	08013543 	.word	0x08013543
 800f3dc:	08013554 	.word	0x08013554

0800f3e0 <__pow5mult>:
 800f3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e4:	4615      	mov	r5, r2
 800f3e6:	f012 0203 	ands.w	r2, r2, #3
 800f3ea:	4607      	mov	r7, r0
 800f3ec:	460e      	mov	r6, r1
 800f3ee:	d007      	beq.n	800f400 <__pow5mult+0x20>
 800f3f0:	4c25      	ldr	r4, [pc, #148]	@ (800f488 <__pow5mult+0xa8>)
 800f3f2:	3a01      	subs	r2, #1
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3fa:	f7ff fe55 	bl	800f0a8 <__multadd>
 800f3fe:	4606      	mov	r6, r0
 800f400:	10ad      	asrs	r5, r5, #2
 800f402:	d03d      	beq.n	800f480 <__pow5mult+0xa0>
 800f404:	69fc      	ldr	r4, [r7, #28]
 800f406:	b97c      	cbnz	r4, 800f428 <__pow5mult+0x48>
 800f408:	2010      	movs	r0, #16
 800f40a:	f7ff fde3 	bl	800efd4 <malloc>
 800f40e:	4602      	mov	r2, r0
 800f410:	61f8      	str	r0, [r7, #28]
 800f412:	b928      	cbnz	r0, 800f420 <__pow5mult+0x40>
 800f414:	4b1d      	ldr	r3, [pc, #116]	@ (800f48c <__pow5mult+0xac>)
 800f416:	481e      	ldr	r0, [pc, #120]	@ (800f490 <__pow5mult+0xb0>)
 800f418:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f41c:	f001 fee0 	bl	80111e0 <__assert_func>
 800f420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f424:	6004      	str	r4, [r0, #0]
 800f426:	60c4      	str	r4, [r0, #12]
 800f428:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f42c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f430:	b94c      	cbnz	r4, 800f446 <__pow5mult+0x66>
 800f432:	f240 2171 	movw	r1, #625	@ 0x271
 800f436:	4638      	mov	r0, r7
 800f438:	f7ff ff12 	bl	800f260 <__i2b>
 800f43c:	2300      	movs	r3, #0
 800f43e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f442:	4604      	mov	r4, r0
 800f444:	6003      	str	r3, [r0, #0]
 800f446:	f04f 0900 	mov.w	r9, #0
 800f44a:	07eb      	lsls	r3, r5, #31
 800f44c:	d50a      	bpl.n	800f464 <__pow5mult+0x84>
 800f44e:	4631      	mov	r1, r6
 800f450:	4622      	mov	r2, r4
 800f452:	4638      	mov	r0, r7
 800f454:	f7ff ff1a 	bl	800f28c <__multiply>
 800f458:	4631      	mov	r1, r6
 800f45a:	4680      	mov	r8, r0
 800f45c:	4638      	mov	r0, r7
 800f45e:	f7ff fe01 	bl	800f064 <_Bfree>
 800f462:	4646      	mov	r6, r8
 800f464:	106d      	asrs	r5, r5, #1
 800f466:	d00b      	beq.n	800f480 <__pow5mult+0xa0>
 800f468:	6820      	ldr	r0, [r4, #0]
 800f46a:	b938      	cbnz	r0, 800f47c <__pow5mult+0x9c>
 800f46c:	4622      	mov	r2, r4
 800f46e:	4621      	mov	r1, r4
 800f470:	4638      	mov	r0, r7
 800f472:	f7ff ff0b 	bl	800f28c <__multiply>
 800f476:	6020      	str	r0, [r4, #0]
 800f478:	f8c0 9000 	str.w	r9, [r0]
 800f47c:	4604      	mov	r4, r0
 800f47e:	e7e4      	b.n	800f44a <__pow5mult+0x6a>
 800f480:	4630      	mov	r0, r6
 800f482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f486:	bf00      	nop
 800f488:	080135b0 	.word	0x080135b0
 800f48c:	080134d4 	.word	0x080134d4
 800f490:	08013554 	.word	0x08013554

0800f494 <__lshift>:
 800f494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f498:	460c      	mov	r4, r1
 800f49a:	6849      	ldr	r1, [r1, #4]
 800f49c:	6923      	ldr	r3, [r4, #16]
 800f49e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4a2:	68a3      	ldr	r3, [r4, #8]
 800f4a4:	4607      	mov	r7, r0
 800f4a6:	4691      	mov	r9, r2
 800f4a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4ac:	f108 0601 	add.w	r6, r8, #1
 800f4b0:	42b3      	cmp	r3, r6
 800f4b2:	db0b      	blt.n	800f4cc <__lshift+0x38>
 800f4b4:	4638      	mov	r0, r7
 800f4b6:	f7ff fd95 	bl	800efe4 <_Balloc>
 800f4ba:	4605      	mov	r5, r0
 800f4bc:	b948      	cbnz	r0, 800f4d2 <__lshift+0x3e>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	4b28      	ldr	r3, [pc, #160]	@ (800f564 <__lshift+0xd0>)
 800f4c2:	4829      	ldr	r0, [pc, #164]	@ (800f568 <__lshift+0xd4>)
 800f4c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f4c8:	f001 fe8a 	bl	80111e0 <__assert_func>
 800f4cc:	3101      	adds	r1, #1
 800f4ce:	005b      	lsls	r3, r3, #1
 800f4d0:	e7ee      	b.n	800f4b0 <__lshift+0x1c>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f100 0114 	add.w	r1, r0, #20
 800f4d8:	f100 0210 	add.w	r2, r0, #16
 800f4dc:	4618      	mov	r0, r3
 800f4de:	4553      	cmp	r3, sl
 800f4e0:	db33      	blt.n	800f54a <__lshift+0xb6>
 800f4e2:	6920      	ldr	r0, [r4, #16]
 800f4e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4e8:	f104 0314 	add.w	r3, r4, #20
 800f4ec:	f019 091f 	ands.w	r9, r9, #31
 800f4f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f4f8:	d02b      	beq.n	800f552 <__lshift+0xbe>
 800f4fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f4fe:	468a      	mov	sl, r1
 800f500:	2200      	movs	r2, #0
 800f502:	6818      	ldr	r0, [r3, #0]
 800f504:	fa00 f009 	lsl.w	r0, r0, r9
 800f508:	4310      	orrs	r0, r2
 800f50a:	f84a 0b04 	str.w	r0, [sl], #4
 800f50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f512:	459c      	cmp	ip, r3
 800f514:	fa22 f20e 	lsr.w	r2, r2, lr
 800f518:	d8f3      	bhi.n	800f502 <__lshift+0x6e>
 800f51a:	ebac 0304 	sub.w	r3, ip, r4
 800f51e:	3b15      	subs	r3, #21
 800f520:	f023 0303 	bic.w	r3, r3, #3
 800f524:	3304      	adds	r3, #4
 800f526:	f104 0015 	add.w	r0, r4, #21
 800f52a:	4584      	cmp	ip, r0
 800f52c:	bf38      	it	cc
 800f52e:	2304      	movcc	r3, #4
 800f530:	50ca      	str	r2, [r1, r3]
 800f532:	b10a      	cbz	r2, 800f538 <__lshift+0xa4>
 800f534:	f108 0602 	add.w	r6, r8, #2
 800f538:	3e01      	subs	r6, #1
 800f53a:	4638      	mov	r0, r7
 800f53c:	612e      	str	r6, [r5, #16]
 800f53e:	4621      	mov	r1, r4
 800f540:	f7ff fd90 	bl	800f064 <_Bfree>
 800f544:	4628      	mov	r0, r5
 800f546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f54a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f54e:	3301      	adds	r3, #1
 800f550:	e7c5      	b.n	800f4de <__lshift+0x4a>
 800f552:	3904      	subs	r1, #4
 800f554:	f853 2b04 	ldr.w	r2, [r3], #4
 800f558:	f841 2f04 	str.w	r2, [r1, #4]!
 800f55c:	459c      	cmp	ip, r3
 800f55e:	d8f9      	bhi.n	800f554 <__lshift+0xc0>
 800f560:	e7ea      	b.n	800f538 <__lshift+0xa4>
 800f562:	bf00      	nop
 800f564:	08013543 	.word	0x08013543
 800f568:	08013554 	.word	0x08013554

0800f56c <__mcmp>:
 800f56c:	690a      	ldr	r2, [r1, #16]
 800f56e:	4603      	mov	r3, r0
 800f570:	6900      	ldr	r0, [r0, #16]
 800f572:	1a80      	subs	r0, r0, r2
 800f574:	b530      	push	{r4, r5, lr}
 800f576:	d10e      	bne.n	800f596 <__mcmp+0x2a>
 800f578:	3314      	adds	r3, #20
 800f57a:	3114      	adds	r1, #20
 800f57c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f580:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f584:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f58c:	4295      	cmp	r5, r2
 800f58e:	d003      	beq.n	800f598 <__mcmp+0x2c>
 800f590:	d205      	bcs.n	800f59e <__mcmp+0x32>
 800f592:	f04f 30ff 	mov.w	r0, #4294967295
 800f596:	bd30      	pop	{r4, r5, pc}
 800f598:	42a3      	cmp	r3, r4
 800f59a:	d3f3      	bcc.n	800f584 <__mcmp+0x18>
 800f59c:	e7fb      	b.n	800f596 <__mcmp+0x2a>
 800f59e:	2001      	movs	r0, #1
 800f5a0:	e7f9      	b.n	800f596 <__mcmp+0x2a>
	...

0800f5a4 <__mdiff>:
 800f5a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a8:	4689      	mov	r9, r1
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	4648      	mov	r0, r9
 800f5b0:	4614      	mov	r4, r2
 800f5b2:	f7ff ffdb 	bl	800f56c <__mcmp>
 800f5b6:	1e05      	subs	r5, r0, #0
 800f5b8:	d112      	bne.n	800f5e0 <__mdiff+0x3c>
 800f5ba:	4629      	mov	r1, r5
 800f5bc:	4630      	mov	r0, r6
 800f5be:	f7ff fd11 	bl	800efe4 <_Balloc>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	b928      	cbnz	r0, 800f5d2 <__mdiff+0x2e>
 800f5c6:	4b3f      	ldr	r3, [pc, #252]	@ (800f6c4 <__mdiff+0x120>)
 800f5c8:	f240 2137 	movw	r1, #567	@ 0x237
 800f5cc:	483e      	ldr	r0, [pc, #248]	@ (800f6c8 <__mdiff+0x124>)
 800f5ce:	f001 fe07 	bl	80111e0 <__assert_func>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5d8:	4610      	mov	r0, r2
 800f5da:	b003      	add	sp, #12
 800f5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e0:	bfbc      	itt	lt
 800f5e2:	464b      	movlt	r3, r9
 800f5e4:	46a1      	movlt	r9, r4
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f5ec:	bfba      	itte	lt
 800f5ee:	461c      	movlt	r4, r3
 800f5f0:	2501      	movlt	r5, #1
 800f5f2:	2500      	movge	r5, #0
 800f5f4:	f7ff fcf6 	bl	800efe4 <_Balloc>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	b918      	cbnz	r0, 800f604 <__mdiff+0x60>
 800f5fc:	4b31      	ldr	r3, [pc, #196]	@ (800f6c4 <__mdiff+0x120>)
 800f5fe:	f240 2145 	movw	r1, #581	@ 0x245
 800f602:	e7e3      	b.n	800f5cc <__mdiff+0x28>
 800f604:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f608:	6926      	ldr	r6, [r4, #16]
 800f60a:	60c5      	str	r5, [r0, #12]
 800f60c:	f109 0310 	add.w	r3, r9, #16
 800f610:	f109 0514 	add.w	r5, r9, #20
 800f614:	f104 0e14 	add.w	lr, r4, #20
 800f618:	f100 0b14 	add.w	fp, r0, #20
 800f61c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f620:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f624:	9301      	str	r3, [sp, #4]
 800f626:	46d9      	mov	r9, fp
 800f628:	f04f 0c00 	mov.w	ip, #0
 800f62c:	9b01      	ldr	r3, [sp, #4]
 800f62e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f632:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f636:	9301      	str	r3, [sp, #4]
 800f638:	fa1f f38a 	uxth.w	r3, sl
 800f63c:	4619      	mov	r1, r3
 800f63e:	b283      	uxth	r3, r0
 800f640:	1acb      	subs	r3, r1, r3
 800f642:	0c00      	lsrs	r0, r0, #16
 800f644:	4463      	add	r3, ip
 800f646:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f64a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f64e:	b29b      	uxth	r3, r3
 800f650:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f654:	4576      	cmp	r6, lr
 800f656:	f849 3b04 	str.w	r3, [r9], #4
 800f65a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f65e:	d8e5      	bhi.n	800f62c <__mdiff+0x88>
 800f660:	1b33      	subs	r3, r6, r4
 800f662:	3b15      	subs	r3, #21
 800f664:	f023 0303 	bic.w	r3, r3, #3
 800f668:	3415      	adds	r4, #21
 800f66a:	3304      	adds	r3, #4
 800f66c:	42a6      	cmp	r6, r4
 800f66e:	bf38      	it	cc
 800f670:	2304      	movcc	r3, #4
 800f672:	441d      	add	r5, r3
 800f674:	445b      	add	r3, fp
 800f676:	461e      	mov	r6, r3
 800f678:	462c      	mov	r4, r5
 800f67a:	4544      	cmp	r4, r8
 800f67c:	d30e      	bcc.n	800f69c <__mdiff+0xf8>
 800f67e:	f108 0103 	add.w	r1, r8, #3
 800f682:	1b49      	subs	r1, r1, r5
 800f684:	f021 0103 	bic.w	r1, r1, #3
 800f688:	3d03      	subs	r5, #3
 800f68a:	45a8      	cmp	r8, r5
 800f68c:	bf38      	it	cc
 800f68e:	2100      	movcc	r1, #0
 800f690:	440b      	add	r3, r1
 800f692:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f696:	b191      	cbz	r1, 800f6be <__mdiff+0x11a>
 800f698:	6117      	str	r7, [r2, #16]
 800f69a:	e79d      	b.n	800f5d8 <__mdiff+0x34>
 800f69c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f6a0:	46e6      	mov	lr, ip
 800f6a2:	0c08      	lsrs	r0, r1, #16
 800f6a4:	fa1c fc81 	uxtah	ip, ip, r1
 800f6a8:	4471      	add	r1, lr
 800f6aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f6ae:	b289      	uxth	r1, r1
 800f6b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f6b4:	f846 1b04 	str.w	r1, [r6], #4
 800f6b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f6bc:	e7dd      	b.n	800f67a <__mdiff+0xd6>
 800f6be:	3f01      	subs	r7, #1
 800f6c0:	e7e7      	b.n	800f692 <__mdiff+0xee>
 800f6c2:	bf00      	nop
 800f6c4:	08013543 	.word	0x08013543
 800f6c8:	08013554 	.word	0x08013554

0800f6cc <__ulp>:
 800f6cc:	b082      	sub	sp, #8
 800f6ce:	ed8d 0b00 	vstr	d0, [sp]
 800f6d2:	9a01      	ldr	r2, [sp, #4]
 800f6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800f714 <__ulp+0x48>)
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	dc08      	bgt.n	800f6f2 <__ulp+0x26>
 800f6e0:	425b      	negs	r3, r3
 800f6e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f6e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6ea:	da04      	bge.n	800f6f6 <__ulp+0x2a>
 800f6ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f6f0:	4113      	asrs	r3, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	e008      	b.n	800f708 <__ulp+0x3c>
 800f6f6:	f1a2 0314 	sub.w	r3, r2, #20
 800f6fa:	2b1e      	cmp	r3, #30
 800f6fc:	bfda      	itte	le
 800f6fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f702:	40da      	lsrle	r2, r3
 800f704:	2201      	movgt	r2, #1
 800f706:	2300      	movs	r3, #0
 800f708:	4619      	mov	r1, r3
 800f70a:	4610      	mov	r0, r2
 800f70c:	ec41 0b10 	vmov	d0, r0, r1
 800f710:	b002      	add	sp, #8
 800f712:	4770      	bx	lr
 800f714:	7ff00000 	.word	0x7ff00000

0800f718 <__b2d>:
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	6906      	ldr	r6, [r0, #16]
 800f71e:	f100 0814 	add.w	r8, r0, #20
 800f722:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f726:	1f37      	subs	r7, r6, #4
 800f728:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7ff fd4b 	bl	800f1c8 <__hi0bits>
 800f732:	f1c0 0320 	rsb	r3, r0, #32
 800f736:	280a      	cmp	r0, #10
 800f738:	600b      	str	r3, [r1, #0]
 800f73a:	491b      	ldr	r1, [pc, #108]	@ (800f7a8 <__b2d+0x90>)
 800f73c:	dc15      	bgt.n	800f76a <__b2d+0x52>
 800f73e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f742:	fa22 f30c 	lsr.w	r3, r2, ip
 800f746:	45b8      	cmp	r8, r7
 800f748:	ea43 0501 	orr.w	r5, r3, r1
 800f74c:	bf34      	ite	cc
 800f74e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f752:	2300      	movcs	r3, #0
 800f754:	3015      	adds	r0, #21
 800f756:	fa02 f000 	lsl.w	r0, r2, r0
 800f75a:	fa23 f30c 	lsr.w	r3, r3, ip
 800f75e:	4303      	orrs	r3, r0
 800f760:	461c      	mov	r4, r3
 800f762:	ec45 4b10 	vmov	d0, r4, r5
 800f766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76a:	45b8      	cmp	r8, r7
 800f76c:	bf3a      	itte	cc
 800f76e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f772:	f1a6 0708 	subcc.w	r7, r6, #8
 800f776:	2300      	movcs	r3, #0
 800f778:	380b      	subs	r0, #11
 800f77a:	d012      	beq.n	800f7a2 <__b2d+0x8a>
 800f77c:	f1c0 0120 	rsb	r1, r0, #32
 800f780:	fa23 f401 	lsr.w	r4, r3, r1
 800f784:	4082      	lsls	r2, r0
 800f786:	4322      	orrs	r2, r4
 800f788:	4547      	cmp	r7, r8
 800f78a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f78e:	bf8c      	ite	hi
 800f790:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f794:	2200      	movls	r2, #0
 800f796:	4083      	lsls	r3, r0
 800f798:	40ca      	lsrs	r2, r1
 800f79a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	e7de      	b.n	800f760 <__b2d+0x48>
 800f7a2:	ea42 0501 	orr.w	r5, r2, r1
 800f7a6:	e7db      	b.n	800f760 <__b2d+0x48>
 800f7a8:	3ff00000 	.word	0x3ff00000

0800f7ac <__d2b>:
 800f7ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7b0:	460f      	mov	r7, r1
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	ec59 8b10 	vmov	r8, r9, d0
 800f7b8:	4616      	mov	r6, r2
 800f7ba:	f7ff fc13 	bl	800efe4 <_Balloc>
 800f7be:	4604      	mov	r4, r0
 800f7c0:	b930      	cbnz	r0, 800f7d0 <__d2b+0x24>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	4b23      	ldr	r3, [pc, #140]	@ (800f854 <__d2b+0xa8>)
 800f7c6:	4824      	ldr	r0, [pc, #144]	@ (800f858 <__d2b+0xac>)
 800f7c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f7cc:	f001 fd08 	bl	80111e0 <__assert_func>
 800f7d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7d8:	b10d      	cbz	r5, 800f7de <__d2b+0x32>
 800f7da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7de:	9301      	str	r3, [sp, #4]
 800f7e0:	f1b8 0300 	subs.w	r3, r8, #0
 800f7e4:	d023      	beq.n	800f82e <__d2b+0x82>
 800f7e6:	4668      	mov	r0, sp
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	f7ff fd0c 	bl	800f206 <__lo0bits>
 800f7ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f7f2:	b1d0      	cbz	r0, 800f82a <__d2b+0x7e>
 800f7f4:	f1c0 0320 	rsb	r3, r0, #32
 800f7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f7fc:	430b      	orrs	r3, r1
 800f7fe:	40c2      	lsrs	r2, r0
 800f800:	6163      	str	r3, [r4, #20]
 800f802:	9201      	str	r2, [sp, #4]
 800f804:	9b01      	ldr	r3, [sp, #4]
 800f806:	61a3      	str	r3, [r4, #24]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	bf0c      	ite	eq
 800f80c:	2201      	moveq	r2, #1
 800f80e:	2202      	movne	r2, #2
 800f810:	6122      	str	r2, [r4, #16]
 800f812:	b1a5      	cbz	r5, 800f83e <__d2b+0x92>
 800f814:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f818:	4405      	add	r5, r0
 800f81a:	603d      	str	r5, [r7, #0]
 800f81c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f820:	6030      	str	r0, [r6, #0]
 800f822:	4620      	mov	r0, r4
 800f824:	b003      	add	sp, #12
 800f826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f82a:	6161      	str	r1, [r4, #20]
 800f82c:	e7ea      	b.n	800f804 <__d2b+0x58>
 800f82e:	a801      	add	r0, sp, #4
 800f830:	f7ff fce9 	bl	800f206 <__lo0bits>
 800f834:	9b01      	ldr	r3, [sp, #4]
 800f836:	6163      	str	r3, [r4, #20]
 800f838:	3020      	adds	r0, #32
 800f83a:	2201      	movs	r2, #1
 800f83c:	e7e8      	b.n	800f810 <__d2b+0x64>
 800f83e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f842:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f846:	6038      	str	r0, [r7, #0]
 800f848:	6918      	ldr	r0, [r3, #16]
 800f84a:	f7ff fcbd 	bl	800f1c8 <__hi0bits>
 800f84e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f852:	e7e5      	b.n	800f820 <__d2b+0x74>
 800f854:	08013543 	.word	0x08013543
 800f858:	08013554 	.word	0x08013554

0800f85c <__ratio>:
 800f85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f860:	b085      	sub	sp, #20
 800f862:	e9cd 1000 	strd	r1, r0, [sp]
 800f866:	a902      	add	r1, sp, #8
 800f868:	f7ff ff56 	bl	800f718 <__b2d>
 800f86c:	9800      	ldr	r0, [sp, #0]
 800f86e:	a903      	add	r1, sp, #12
 800f870:	ec55 4b10 	vmov	r4, r5, d0
 800f874:	f7ff ff50 	bl	800f718 <__b2d>
 800f878:	9b01      	ldr	r3, [sp, #4]
 800f87a:	6919      	ldr	r1, [r3, #16]
 800f87c:	9b00      	ldr	r3, [sp, #0]
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	1ac9      	subs	r1, r1, r3
 800f882:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f886:	1a9b      	subs	r3, r3, r2
 800f888:	ec5b ab10 	vmov	sl, fp, d0
 800f88c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f890:	2b00      	cmp	r3, #0
 800f892:	bfce      	itee	gt
 800f894:	462a      	movgt	r2, r5
 800f896:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f89a:	465a      	movle	r2, fp
 800f89c:	462f      	mov	r7, r5
 800f89e:	46d9      	mov	r9, fp
 800f8a0:	bfcc      	ite	gt
 800f8a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f8aa:	464b      	mov	r3, r9
 800f8ac:	4652      	mov	r2, sl
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	4639      	mov	r1, r7
 800f8b2:	f7f0 ffeb 	bl	800088c <__aeabi_ddiv>
 800f8b6:	ec41 0b10 	vmov	d0, r0, r1
 800f8ba:	b005      	add	sp, #20
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8c0 <__copybits>:
 800f8c0:	3901      	subs	r1, #1
 800f8c2:	b570      	push	{r4, r5, r6, lr}
 800f8c4:	1149      	asrs	r1, r1, #5
 800f8c6:	6914      	ldr	r4, [r2, #16]
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	f102 0314 	add.w	r3, r2, #20
 800f8ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8d6:	1f05      	subs	r5, r0, #4
 800f8d8:	42a3      	cmp	r3, r4
 800f8da:	d30c      	bcc.n	800f8f6 <__copybits+0x36>
 800f8dc:	1aa3      	subs	r3, r4, r2
 800f8de:	3b11      	subs	r3, #17
 800f8e0:	f023 0303 	bic.w	r3, r3, #3
 800f8e4:	3211      	adds	r2, #17
 800f8e6:	42a2      	cmp	r2, r4
 800f8e8:	bf88      	it	hi
 800f8ea:	2300      	movhi	r3, #0
 800f8ec:	4418      	add	r0, r3
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	4288      	cmp	r0, r1
 800f8f2:	d305      	bcc.n	800f900 <__copybits+0x40>
 800f8f4:	bd70      	pop	{r4, r5, r6, pc}
 800f8f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800f8fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800f8fe:	e7eb      	b.n	800f8d8 <__copybits+0x18>
 800f900:	f840 3b04 	str.w	r3, [r0], #4
 800f904:	e7f4      	b.n	800f8f0 <__copybits+0x30>

0800f906 <__any_on>:
 800f906:	f100 0214 	add.w	r2, r0, #20
 800f90a:	6900      	ldr	r0, [r0, #16]
 800f90c:	114b      	asrs	r3, r1, #5
 800f90e:	4298      	cmp	r0, r3
 800f910:	b510      	push	{r4, lr}
 800f912:	db11      	blt.n	800f938 <__any_on+0x32>
 800f914:	dd0a      	ble.n	800f92c <__any_on+0x26>
 800f916:	f011 011f 	ands.w	r1, r1, #31
 800f91a:	d007      	beq.n	800f92c <__any_on+0x26>
 800f91c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f920:	fa24 f001 	lsr.w	r0, r4, r1
 800f924:	fa00 f101 	lsl.w	r1, r0, r1
 800f928:	428c      	cmp	r4, r1
 800f92a:	d10b      	bne.n	800f944 <__any_on+0x3e>
 800f92c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f930:	4293      	cmp	r3, r2
 800f932:	d803      	bhi.n	800f93c <__any_on+0x36>
 800f934:	2000      	movs	r0, #0
 800f936:	bd10      	pop	{r4, pc}
 800f938:	4603      	mov	r3, r0
 800f93a:	e7f7      	b.n	800f92c <__any_on+0x26>
 800f93c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f940:	2900      	cmp	r1, #0
 800f942:	d0f5      	beq.n	800f930 <__any_on+0x2a>
 800f944:	2001      	movs	r0, #1
 800f946:	e7f6      	b.n	800f936 <__any_on+0x30>

0800f948 <sulp>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	4604      	mov	r4, r0
 800f94c:	460d      	mov	r5, r1
 800f94e:	ec45 4b10 	vmov	d0, r4, r5
 800f952:	4616      	mov	r6, r2
 800f954:	f7ff feba 	bl	800f6cc <__ulp>
 800f958:	ec51 0b10 	vmov	r0, r1, d0
 800f95c:	b17e      	cbz	r6, 800f97e <sulp+0x36>
 800f95e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f962:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f966:	2b00      	cmp	r3, #0
 800f968:	dd09      	ble.n	800f97e <sulp+0x36>
 800f96a:	051b      	lsls	r3, r3, #20
 800f96c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f970:	2400      	movs	r4, #0
 800f972:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f976:	4622      	mov	r2, r4
 800f978:	462b      	mov	r3, r5
 800f97a:	f7f0 fe5d 	bl	8000638 <__aeabi_dmul>
 800f97e:	ec41 0b10 	vmov	d0, r0, r1
 800f982:	bd70      	pop	{r4, r5, r6, pc}
 800f984:	0000      	movs	r0, r0
	...

0800f988 <_strtod_l>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	b09f      	sub	sp, #124	@ 0x7c
 800f98e:	460c      	mov	r4, r1
 800f990:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f992:	2200      	movs	r2, #0
 800f994:	921a      	str	r2, [sp, #104]	@ 0x68
 800f996:	9005      	str	r0, [sp, #20]
 800f998:	f04f 0a00 	mov.w	sl, #0
 800f99c:	f04f 0b00 	mov.w	fp, #0
 800f9a0:	460a      	mov	r2, r1
 800f9a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f9a4:	7811      	ldrb	r1, [r2, #0]
 800f9a6:	292b      	cmp	r1, #43	@ 0x2b
 800f9a8:	d04a      	beq.n	800fa40 <_strtod_l+0xb8>
 800f9aa:	d838      	bhi.n	800fa1e <_strtod_l+0x96>
 800f9ac:	290d      	cmp	r1, #13
 800f9ae:	d832      	bhi.n	800fa16 <_strtod_l+0x8e>
 800f9b0:	2908      	cmp	r1, #8
 800f9b2:	d832      	bhi.n	800fa1a <_strtod_l+0x92>
 800f9b4:	2900      	cmp	r1, #0
 800f9b6:	d03b      	beq.n	800fa30 <_strtod_l+0xa8>
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f9bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f9be:	782a      	ldrb	r2, [r5, #0]
 800f9c0:	2a30      	cmp	r2, #48	@ 0x30
 800f9c2:	f040 80b3 	bne.w	800fb2c <_strtod_l+0x1a4>
 800f9c6:	786a      	ldrb	r2, [r5, #1]
 800f9c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9cc:	2a58      	cmp	r2, #88	@ 0x58
 800f9ce:	d16e      	bne.n	800faae <_strtod_l+0x126>
 800f9d0:	9302      	str	r3, [sp, #8]
 800f9d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	4a8e      	ldr	r2, [pc, #568]	@ (800fc14 <_strtod_l+0x28c>)
 800f9dc:	9805      	ldr	r0, [sp, #20]
 800f9de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f9e0:	a919      	add	r1, sp, #100	@ 0x64
 800f9e2:	f001 fc83 	bl	80112ec <__gethex>
 800f9e6:	f010 060f 	ands.w	r6, r0, #15
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	d005      	beq.n	800f9fa <_strtod_l+0x72>
 800f9ee:	2e06      	cmp	r6, #6
 800f9f0:	d128      	bne.n	800fa44 <_strtod_l+0xbc>
 800f9f2:	3501      	adds	r5, #1
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800f9f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f040 858e 	bne.w	801051e <_strtod_l+0xb96>
 800fa02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa04:	b1cb      	cbz	r3, 800fa3a <_strtod_l+0xb2>
 800fa06:	4652      	mov	r2, sl
 800fa08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fa0c:	ec43 2b10 	vmov	d0, r2, r3
 800fa10:	b01f      	add	sp, #124	@ 0x7c
 800fa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa16:	2920      	cmp	r1, #32
 800fa18:	d1ce      	bne.n	800f9b8 <_strtod_l+0x30>
 800fa1a:	3201      	adds	r2, #1
 800fa1c:	e7c1      	b.n	800f9a2 <_strtod_l+0x1a>
 800fa1e:	292d      	cmp	r1, #45	@ 0x2d
 800fa20:	d1ca      	bne.n	800f9b8 <_strtod_l+0x30>
 800fa22:	2101      	movs	r1, #1
 800fa24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fa26:	1c51      	adds	r1, r2, #1
 800fa28:	9119      	str	r1, [sp, #100]	@ 0x64
 800fa2a:	7852      	ldrb	r2, [r2, #1]
 800fa2c:	2a00      	cmp	r2, #0
 800fa2e:	d1c5      	bne.n	800f9bc <_strtod_l+0x34>
 800fa30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa32:	9419      	str	r4, [sp, #100]	@ 0x64
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f040 8570 	bne.w	801051a <_strtod_l+0xb92>
 800fa3a:	4652      	mov	r2, sl
 800fa3c:	465b      	mov	r3, fp
 800fa3e:	e7e5      	b.n	800fa0c <_strtod_l+0x84>
 800fa40:	2100      	movs	r1, #0
 800fa42:	e7ef      	b.n	800fa24 <_strtod_l+0x9c>
 800fa44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fa46:	b13a      	cbz	r2, 800fa58 <_strtod_l+0xd0>
 800fa48:	2135      	movs	r1, #53	@ 0x35
 800fa4a:	a81c      	add	r0, sp, #112	@ 0x70
 800fa4c:	f7ff ff38 	bl	800f8c0 <__copybits>
 800fa50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa52:	9805      	ldr	r0, [sp, #20]
 800fa54:	f7ff fb06 	bl	800f064 <_Bfree>
 800fa58:	3e01      	subs	r6, #1
 800fa5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fa5c:	2e04      	cmp	r6, #4
 800fa5e:	d806      	bhi.n	800fa6e <_strtod_l+0xe6>
 800fa60:	e8df f006 	tbb	[pc, r6]
 800fa64:	201d0314 	.word	0x201d0314
 800fa68:	14          	.byte	0x14
 800fa69:	00          	.byte	0x00
 800fa6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fa6e:	05e1      	lsls	r1, r4, #23
 800fa70:	bf48      	it	mi
 800fa72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fa76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa7a:	0d1b      	lsrs	r3, r3, #20
 800fa7c:	051b      	lsls	r3, r3, #20
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1bb      	bne.n	800f9fa <_strtod_l+0x72>
 800fa82:	f7fe fbcd 	bl	800e220 <__errno>
 800fa86:	2322      	movs	r3, #34	@ 0x22
 800fa88:	6003      	str	r3, [r0, #0]
 800fa8a:	e7b6      	b.n	800f9fa <_strtod_l+0x72>
 800fa8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fa90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fa94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fa98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa9c:	e7e7      	b.n	800fa6e <_strtod_l+0xe6>
 800fa9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fc1c <_strtod_l+0x294>
 800faa2:	e7e4      	b.n	800fa6e <_strtod_l+0xe6>
 800faa4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800faa8:	f04f 3aff 	mov.w	sl, #4294967295
 800faac:	e7df      	b.n	800fa6e <_strtod_l+0xe6>
 800faae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fab4:	785b      	ldrb	r3, [r3, #1]
 800fab6:	2b30      	cmp	r3, #48	@ 0x30
 800fab8:	d0f9      	beq.n	800faae <_strtod_l+0x126>
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d09d      	beq.n	800f9fa <_strtod_l+0x72>
 800fabe:	2301      	movs	r3, #1
 800fac0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fac4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fac6:	2300      	movs	r3, #0
 800fac8:	9308      	str	r3, [sp, #32]
 800faca:	930a      	str	r3, [sp, #40]	@ 0x28
 800facc:	461f      	mov	r7, r3
 800face:	220a      	movs	r2, #10
 800fad0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fad2:	7805      	ldrb	r5, [r0, #0]
 800fad4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fad8:	b2d9      	uxtb	r1, r3
 800fada:	2909      	cmp	r1, #9
 800fadc:	d928      	bls.n	800fb30 <_strtod_l+0x1a8>
 800fade:	494e      	ldr	r1, [pc, #312]	@ (800fc18 <_strtod_l+0x290>)
 800fae0:	2201      	movs	r2, #1
 800fae2:	f001 fb62 	bl	80111aa <strncmp>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d032      	beq.n	800fb50 <_strtod_l+0x1c8>
 800faea:	2000      	movs	r0, #0
 800faec:	462a      	mov	r2, r5
 800faee:	4681      	mov	r9, r0
 800faf0:	463d      	mov	r5, r7
 800faf2:	4603      	mov	r3, r0
 800faf4:	2a65      	cmp	r2, #101	@ 0x65
 800faf6:	d001      	beq.n	800fafc <_strtod_l+0x174>
 800faf8:	2a45      	cmp	r2, #69	@ 0x45
 800fafa:	d114      	bne.n	800fb26 <_strtod_l+0x19e>
 800fafc:	b91d      	cbnz	r5, 800fb06 <_strtod_l+0x17e>
 800fafe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb00:	4302      	orrs	r2, r0
 800fb02:	d095      	beq.n	800fa30 <_strtod_l+0xa8>
 800fb04:	2500      	movs	r5, #0
 800fb06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fb08:	1c62      	adds	r2, r4, #1
 800fb0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb0c:	7862      	ldrb	r2, [r4, #1]
 800fb0e:	2a2b      	cmp	r2, #43	@ 0x2b
 800fb10:	d077      	beq.n	800fc02 <_strtod_l+0x27a>
 800fb12:	2a2d      	cmp	r2, #45	@ 0x2d
 800fb14:	d07b      	beq.n	800fc0e <_strtod_l+0x286>
 800fb16:	f04f 0c00 	mov.w	ip, #0
 800fb1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fb1e:	2909      	cmp	r1, #9
 800fb20:	f240 8082 	bls.w	800fc28 <_strtod_l+0x2a0>
 800fb24:	9419      	str	r4, [sp, #100]	@ 0x64
 800fb26:	f04f 0800 	mov.w	r8, #0
 800fb2a:	e0a2      	b.n	800fc72 <_strtod_l+0x2ea>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	e7c7      	b.n	800fac0 <_strtod_l+0x138>
 800fb30:	2f08      	cmp	r7, #8
 800fb32:	bfd5      	itete	le
 800fb34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fb36:	9908      	ldrgt	r1, [sp, #32]
 800fb38:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fb40:	f100 0001 	add.w	r0, r0, #1
 800fb44:	bfd4      	ite	le
 800fb46:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fb48:	9308      	strgt	r3, [sp, #32]
 800fb4a:	3701      	adds	r7, #1
 800fb4c:	9019      	str	r0, [sp, #100]	@ 0x64
 800fb4e:	e7bf      	b.n	800fad0 <_strtod_l+0x148>
 800fb50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb56:	785a      	ldrb	r2, [r3, #1]
 800fb58:	b37f      	cbz	r7, 800fbba <_strtod_l+0x232>
 800fb5a:	4681      	mov	r9, r0
 800fb5c:	463d      	mov	r5, r7
 800fb5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fb62:	2b09      	cmp	r3, #9
 800fb64:	d912      	bls.n	800fb8c <_strtod_l+0x204>
 800fb66:	2301      	movs	r3, #1
 800fb68:	e7c4      	b.n	800faf4 <_strtod_l+0x16c>
 800fb6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb6c:	1c5a      	adds	r2, r3, #1
 800fb6e:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb70:	785a      	ldrb	r2, [r3, #1]
 800fb72:	3001      	adds	r0, #1
 800fb74:	2a30      	cmp	r2, #48	@ 0x30
 800fb76:	d0f8      	beq.n	800fb6a <_strtod_l+0x1e2>
 800fb78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fb7c:	2b08      	cmp	r3, #8
 800fb7e:	f200 84d3 	bhi.w	8010528 <_strtod_l+0xba0>
 800fb82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb84:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb86:	4681      	mov	r9, r0
 800fb88:	2000      	movs	r0, #0
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	3a30      	subs	r2, #48	@ 0x30
 800fb8e:	f100 0301 	add.w	r3, r0, #1
 800fb92:	d02a      	beq.n	800fbea <_strtod_l+0x262>
 800fb94:	4499      	add	r9, r3
 800fb96:	eb00 0c05 	add.w	ip, r0, r5
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	210a      	movs	r1, #10
 800fb9e:	4563      	cmp	r3, ip
 800fba0:	d10d      	bne.n	800fbbe <_strtod_l+0x236>
 800fba2:	1c69      	adds	r1, r5, #1
 800fba4:	4401      	add	r1, r0
 800fba6:	4428      	add	r0, r5
 800fba8:	2808      	cmp	r0, #8
 800fbaa:	dc16      	bgt.n	800fbda <_strtod_l+0x252>
 800fbac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fbae:	230a      	movs	r3, #10
 800fbb0:	fb03 2300 	mla	r3, r3, r0, r2
 800fbb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	e018      	b.n	800fbec <_strtod_l+0x264>
 800fbba:	4638      	mov	r0, r7
 800fbbc:	e7da      	b.n	800fb74 <_strtod_l+0x1ec>
 800fbbe:	2b08      	cmp	r3, #8
 800fbc0:	f103 0301 	add.w	r3, r3, #1
 800fbc4:	dc03      	bgt.n	800fbce <_strtod_l+0x246>
 800fbc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fbc8:	434e      	muls	r6, r1
 800fbca:	960a      	str	r6, [sp, #40]	@ 0x28
 800fbcc:	e7e7      	b.n	800fb9e <_strtod_l+0x216>
 800fbce:	2b10      	cmp	r3, #16
 800fbd0:	bfde      	ittt	le
 800fbd2:	9e08      	ldrle	r6, [sp, #32]
 800fbd4:	434e      	mulle	r6, r1
 800fbd6:	9608      	strle	r6, [sp, #32]
 800fbd8:	e7e1      	b.n	800fb9e <_strtod_l+0x216>
 800fbda:	280f      	cmp	r0, #15
 800fbdc:	dceb      	bgt.n	800fbb6 <_strtod_l+0x22e>
 800fbde:	9808      	ldr	r0, [sp, #32]
 800fbe0:	230a      	movs	r3, #10
 800fbe2:	fb03 2300 	mla	r3, r3, r0, r2
 800fbe6:	9308      	str	r3, [sp, #32]
 800fbe8:	e7e5      	b.n	800fbb6 <_strtod_l+0x22e>
 800fbea:	4629      	mov	r1, r5
 800fbec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbee:	1c50      	adds	r0, r2, #1
 800fbf0:	9019      	str	r0, [sp, #100]	@ 0x64
 800fbf2:	7852      	ldrb	r2, [r2, #1]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	460d      	mov	r5, r1
 800fbf8:	e7b1      	b.n	800fb5e <_strtod_l+0x1d6>
 800fbfa:	f04f 0900 	mov.w	r9, #0
 800fbfe:	2301      	movs	r3, #1
 800fc00:	e77d      	b.n	800fafe <_strtod_l+0x176>
 800fc02:	f04f 0c00 	mov.w	ip, #0
 800fc06:	1ca2      	adds	r2, r4, #2
 800fc08:	9219      	str	r2, [sp, #100]	@ 0x64
 800fc0a:	78a2      	ldrb	r2, [r4, #2]
 800fc0c:	e785      	b.n	800fb1a <_strtod_l+0x192>
 800fc0e:	f04f 0c01 	mov.w	ip, #1
 800fc12:	e7f8      	b.n	800fc06 <_strtod_l+0x27e>
 800fc14:	080136c8 	.word	0x080136c8
 800fc18:	080136b0 	.word	0x080136b0
 800fc1c:	7ff00000 	.word	0x7ff00000
 800fc20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc22:	1c51      	adds	r1, r2, #1
 800fc24:	9119      	str	r1, [sp, #100]	@ 0x64
 800fc26:	7852      	ldrb	r2, [r2, #1]
 800fc28:	2a30      	cmp	r2, #48	@ 0x30
 800fc2a:	d0f9      	beq.n	800fc20 <_strtod_l+0x298>
 800fc2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fc30:	2908      	cmp	r1, #8
 800fc32:	f63f af78 	bhi.w	800fb26 <_strtod_l+0x19e>
 800fc36:	3a30      	subs	r2, #48	@ 0x30
 800fc38:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fc3e:	f04f 080a 	mov.w	r8, #10
 800fc42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc44:	1c56      	adds	r6, r2, #1
 800fc46:	9619      	str	r6, [sp, #100]	@ 0x64
 800fc48:	7852      	ldrb	r2, [r2, #1]
 800fc4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fc4e:	f1be 0f09 	cmp.w	lr, #9
 800fc52:	d939      	bls.n	800fcc8 <_strtod_l+0x340>
 800fc54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fc56:	1a76      	subs	r6, r6, r1
 800fc58:	2e08      	cmp	r6, #8
 800fc5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fc5e:	dc03      	bgt.n	800fc68 <_strtod_l+0x2e0>
 800fc60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc62:	4588      	cmp	r8, r1
 800fc64:	bfa8      	it	ge
 800fc66:	4688      	movge	r8, r1
 800fc68:	f1bc 0f00 	cmp.w	ip, #0
 800fc6c:	d001      	beq.n	800fc72 <_strtod_l+0x2ea>
 800fc6e:	f1c8 0800 	rsb	r8, r8, #0
 800fc72:	2d00      	cmp	r5, #0
 800fc74:	d14e      	bne.n	800fd14 <_strtod_l+0x38c>
 800fc76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc78:	4308      	orrs	r0, r1
 800fc7a:	f47f aebe 	bne.w	800f9fa <_strtod_l+0x72>
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f47f aed6 	bne.w	800fa30 <_strtod_l+0xa8>
 800fc84:	2a69      	cmp	r2, #105	@ 0x69
 800fc86:	d028      	beq.n	800fcda <_strtod_l+0x352>
 800fc88:	dc25      	bgt.n	800fcd6 <_strtod_l+0x34e>
 800fc8a:	2a49      	cmp	r2, #73	@ 0x49
 800fc8c:	d025      	beq.n	800fcda <_strtod_l+0x352>
 800fc8e:	2a4e      	cmp	r2, #78	@ 0x4e
 800fc90:	f47f aece 	bne.w	800fa30 <_strtod_l+0xa8>
 800fc94:	499b      	ldr	r1, [pc, #620]	@ (800ff04 <_strtod_l+0x57c>)
 800fc96:	a819      	add	r0, sp, #100	@ 0x64
 800fc98:	f001 fd4a 	bl	8011730 <__match>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	f43f aec7 	beq.w	800fa30 <_strtod_l+0xa8>
 800fca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	2b28      	cmp	r3, #40	@ 0x28
 800fca8:	d12e      	bne.n	800fd08 <_strtod_l+0x380>
 800fcaa:	4997      	ldr	r1, [pc, #604]	@ (800ff08 <_strtod_l+0x580>)
 800fcac:	aa1c      	add	r2, sp, #112	@ 0x70
 800fcae:	a819      	add	r0, sp, #100	@ 0x64
 800fcb0:	f001 fd52 	bl	8011758 <__hexnan>
 800fcb4:	2805      	cmp	r0, #5
 800fcb6:	d127      	bne.n	800fd08 <_strtod_l+0x380>
 800fcb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fcbe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fcc2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fcc6:	e698      	b.n	800f9fa <_strtod_l+0x72>
 800fcc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fcca:	fb08 2101 	mla	r1, r8, r1, r2
 800fcce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fcd2:	920e      	str	r2, [sp, #56]	@ 0x38
 800fcd4:	e7b5      	b.n	800fc42 <_strtod_l+0x2ba>
 800fcd6:	2a6e      	cmp	r2, #110	@ 0x6e
 800fcd8:	e7da      	b.n	800fc90 <_strtod_l+0x308>
 800fcda:	498c      	ldr	r1, [pc, #560]	@ (800ff0c <_strtod_l+0x584>)
 800fcdc:	a819      	add	r0, sp, #100	@ 0x64
 800fcde:	f001 fd27 	bl	8011730 <__match>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	f43f aea4 	beq.w	800fa30 <_strtod_l+0xa8>
 800fce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcea:	4989      	ldr	r1, [pc, #548]	@ (800ff10 <_strtod_l+0x588>)
 800fcec:	3b01      	subs	r3, #1
 800fcee:	a819      	add	r0, sp, #100	@ 0x64
 800fcf0:	9319      	str	r3, [sp, #100]	@ 0x64
 800fcf2:	f001 fd1d 	bl	8011730 <__match>
 800fcf6:	b910      	cbnz	r0, 800fcfe <_strtod_l+0x376>
 800fcf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	9319      	str	r3, [sp, #100]	@ 0x64
 800fcfe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ff20 <_strtod_l+0x598>
 800fd02:	f04f 0a00 	mov.w	sl, #0
 800fd06:	e678      	b.n	800f9fa <_strtod_l+0x72>
 800fd08:	4882      	ldr	r0, [pc, #520]	@ (800ff14 <_strtod_l+0x58c>)
 800fd0a:	f001 fa61 	bl	80111d0 <nan>
 800fd0e:	ec5b ab10 	vmov	sl, fp, d0
 800fd12:	e672      	b.n	800f9fa <_strtod_l+0x72>
 800fd14:	eba8 0309 	sub.w	r3, r8, r9
 800fd18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fd1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd1c:	2f00      	cmp	r7, #0
 800fd1e:	bf08      	it	eq
 800fd20:	462f      	moveq	r7, r5
 800fd22:	2d10      	cmp	r5, #16
 800fd24:	462c      	mov	r4, r5
 800fd26:	bfa8      	it	ge
 800fd28:	2410      	movge	r4, #16
 800fd2a:	f7f0 fc0b 	bl	8000544 <__aeabi_ui2d>
 800fd2e:	2d09      	cmp	r5, #9
 800fd30:	4682      	mov	sl, r0
 800fd32:	468b      	mov	fp, r1
 800fd34:	dc13      	bgt.n	800fd5e <_strtod_l+0x3d6>
 800fd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f43f ae5e 	beq.w	800f9fa <_strtod_l+0x72>
 800fd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd40:	dd78      	ble.n	800fe34 <_strtod_l+0x4ac>
 800fd42:	2b16      	cmp	r3, #22
 800fd44:	dc5f      	bgt.n	800fe06 <_strtod_l+0x47e>
 800fd46:	4974      	ldr	r1, [pc, #464]	@ (800ff18 <_strtod_l+0x590>)
 800fd48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd50:	4652      	mov	r2, sl
 800fd52:	465b      	mov	r3, fp
 800fd54:	f7f0 fc70 	bl	8000638 <__aeabi_dmul>
 800fd58:	4682      	mov	sl, r0
 800fd5a:	468b      	mov	fp, r1
 800fd5c:	e64d      	b.n	800f9fa <_strtod_l+0x72>
 800fd5e:	4b6e      	ldr	r3, [pc, #440]	@ (800ff18 <_strtod_l+0x590>)
 800fd60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fd68:	f7f0 fc66 	bl	8000638 <__aeabi_dmul>
 800fd6c:	4682      	mov	sl, r0
 800fd6e:	9808      	ldr	r0, [sp, #32]
 800fd70:	468b      	mov	fp, r1
 800fd72:	f7f0 fbe7 	bl	8000544 <__aeabi_ui2d>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	4650      	mov	r0, sl
 800fd7c:	4659      	mov	r1, fp
 800fd7e:	f7f0 faa5 	bl	80002cc <__adddf3>
 800fd82:	2d0f      	cmp	r5, #15
 800fd84:	4682      	mov	sl, r0
 800fd86:	468b      	mov	fp, r1
 800fd88:	ddd5      	ble.n	800fd36 <_strtod_l+0x3ae>
 800fd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd8c:	1b2c      	subs	r4, r5, r4
 800fd8e:	441c      	add	r4, r3
 800fd90:	2c00      	cmp	r4, #0
 800fd92:	f340 8096 	ble.w	800fec2 <_strtod_l+0x53a>
 800fd96:	f014 030f 	ands.w	r3, r4, #15
 800fd9a:	d00a      	beq.n	800fdb2 <_strtod_l+0x42a>
 800fd9c:	495e      	ldr	r1, [pc, #376]	@ (800ff18 <_strtod_l+0x590>)
 800fd9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fda2:	4652      	mov	r2, sl
 800fda4:	465b      	mov	r3, fp
 800fda6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdaa:	f7f0 fc45 	bl	8000638 <__aeabi_dmul>
 800fdae:	4682      	mov	sl, r0
 800fdb0:	468b      	mov	fp, r1
 800fdb2:	f034 040f 	bics.w	r4, r4, #15
 800fdb6:	d073      	beq.n	800fea0 <_strtod_l+0x518>
 800fdb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fdbc:	dd48      	ble.n	800fe50 <_strtod_l+0x4c8>
 800fdbe:	2400      	movs	r4, #0
 800fdc0:	46a0      	mov	r8, r4
 800fdc2:	940a      	str	r4, [sp, #40]	@ 0x28
 800fdc4:	46a1      	mov	r9, r4
 800fdc6:	9a05      	ldr	r2, [sp, #20]
 800fdc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ff20 <_strtod_l+0x598>
 800fdcc:	2322      	movs	r3, #34	@ 0x22
 800fdce:	6013      	str	r3, [r2, #0]
 800fdd0:	f04f 0a00 	mov.w	sl, #0
 800fdd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f43f ae0f 	beq.w	800f9fa <_strtod_l+0x72>
 800fddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fdde:	9805      	ldr	r0, [sp, #20]
 800fde0:	f7ff f940 	bl	800f064 <_Bfree>
 800fde4:	9805      	ldr	r0, [sp, #20]
 800fde6:	4649      	mov	r1, r9
 800fde8:	f7ff f93c 	bl	800f064 <_Bfree>
 800fdec:	9805      	ldr	r0, [sp, #20]
 800fdee:	4641      	mov	r1, r8
 800fdf0:	f7ff f938 	bl	800f064 <_Bfree>
 800fdf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fdf6:	9805      	ldr	r0, [sp, #20]
 800fdf8:	f7ff f934 	bl	800f064 <_Bfree>
 800fdfc:	9805      	ldr	r0, [sp, #20]
 800fdfe:	4621      	mov	r1, r4
 800fe00:	f7ff f930 	bl	800f064 <_Bfree>
 800fe04:	e5f9      	b.n	800f9fa <_strtod_l+0x72>
 800fe06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	dbbc      	blt.n	800fd8a <_strtod_l+0x402>
 800fe10:	4c41      	ldr	r4, [pc, #260]	@ (800ff18 <_strtod_l+0x590>)
 800fe12:	f1c5 050f 	rsb	r5, r5, #15
 800fe16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe1a:	4652      	mov	r2, sl
 800fe1c:	465b      	mov	r3, fp
 800fe1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe22:	f7f0 fc09 	bl	8000638 <__aeabi_dmul>
 800fe26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe28:	1b5d      	subs	r5, r3, r5
 800fe2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fe2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe32:	e78f      	b.n	800fd54 <_strtod_l+0x3cc>
 800fe34:	3316      	adds	r3, #22
 800fe36:	dba8      	blt.n	800fd8a <_strtod_l+0x402>
 800fe38:	4b37      	ldr	r3, [pc, #220]	@ (800ff18 <_strtod_l+0x590>)
 800fe3a:	eba9 0808 	sub.w	r8, r9, r8
 800fe3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fe42:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fe46:	4650      	mov	r0, sl
 800fe48:	4659      	mov	r1, fp
 800fe4a:	f7f0 fd1f 	bl	800088c <__aeabi_ddiv>
 800fe4e:	e783      	b.n	800fd58 <_strtod_l+0x3d0>
 800fe50:	4b32      	ldr	r3, [pc, #200]	@ (800ff1c <_strtod_l+0x594>)
 800fe52:	9308      	str	r3, [sp, #32]
 800fe54:	2300      	movs	r3, #0
 800fe56:	1124      	asrs	r4, r4, #4
 800fe58:	4650      	mov	r0, sl
 800fe5a:	4659      	mov	r1, fp
 800fe5c:	461e      	mov	r6, r3
 800fe5e:	2c01      	cmp	r4, #1
 800fe60:	dc21      	bgt.n	800fea6 <_strtod_l+0x51e>
 800fe62:	b10b      	cbz	r3, 800fe68 <_strtod_l+0x4e0>
 800fe64:	4682      	mov	sl, r0
 800fe66:	468b      	mov	fp, r1
 800fe68:	492c      	ldr	r1, [pc, #176]	@ (800ff1c <_strtod_l+0x594>)
 800fe6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fe6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fe72:	4652      	mov	r2, sl
 800fe74:	465b      	mov	r3, fp
 800fe76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe7a:	f7f0 fbdd 	bl	8000638 <__aeabi_dmul>
 800fe7e:	4b28      	ldr	r3, [pc, #160]	@ (800ff20 <_strtod_l+0x598>)
 800fe80:	460a      	mov	r2, r1
 800fe82:	400b      	ands	r3, r1
 800fe84:	4927      	ldr	r1, [pc, #156]	@ (800ff24 <_strtod_l+0x59c>)
 800fe86:	428b      	cmp	r3, r1
 800fe88:	4682      	mov	sl, r0
 800fe8a:	d898      	bhi.n	800fdbe <_strtod_l+0x436>
 800fe8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fe90:	428b      	cmp	r3, r1
 800fe92:	bf86      	itte	hi
 800fe94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ff28 <_strtod_l+0x5a0>
 800fe98:	f04f 3aff 	movhi.w	sl, #4294967295
 800fe9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fea0:	2300      	movs	r3, #0
 800fea2:	9308      	str	r3, [sp, #32]
 800fea4:	e07a      	b.n	800ff9c <_strtod_l+0x614>
 800fea6:	07e2      	lsls	r2, r4, #31
 800fea8:	d505      	bpl.n	800feb6 <_strtod_l+0x52e>
 800feaa:	9b08      	ldr	r3, [sp, #32]
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 fbc2 	bl	8000638 <__aeabi_dmul>
 800feb4:	2301      	movs	r3, #1
 800feb6:	9a08      	ldr	r2, [sp, #32]
 800feb8:	3208      	adds	r2, #8
 800feba:	3601      	adds	r6, #1
 800febc:	1064      	asrs	r4, r4, #1
 800febe:	9208      	str	r2, [sp, #32]
 800fec0:	e7cd      	b.n	800fe5e <_strtod_l+0x4d6>
 800fec2:	d0ed      	beq.n	800fea0 <_strtod_l+0x518>
 800fec4:	4264      	negs	r4, r4
 800fec6:	f014 020f 	ands.w	r2, r4, #15
 800feca:	d00a      	beq.n	800fee2 <_strtod_l+0x55a>
 800fecc:	4b12      	ldr	r3, [pc, #72]	@ (800ff18 <_strtod_l+0x590>)
 800fece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fed2:	4650      	mov	r0, sl
 800fed4:	4659      	mov	r1, fp
 800fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feda:	f7f0 fcd7 	bl	800088c <__aeabi_ddiv>
 800fede:	4682      	mov	sl, r0
 800fee0:	468b      	mov	fp, r1
 800fee2:	1124      	asrs	r4, r4, #4
 800fee4:	d0dc      	beq.n	800fea0 <_strtod_l+0x518>
 800fee6:	2c1f      	cmp	r4, #31
 800fee8:	dd20      	ble.n	800ff2c <_strtod_l+0x5a4>
 800feea:	2400      	movs	r4, #0
 800feec:	46a0      	mov	r8, r4
 800feee:	940a      	str	r4, [sp, #40]	@ 0x28
 800fef0:	46a1      	mov	r9, r4
 800fef2:	9a05      	ldr	r2, [sp, #20]
 800fef4:	2322      	movs	r3, #34	@ 0x22
 800fef6:	f04f 0a00 	mov.w	sl, #0
 800fefa:	f04f 0b00 	mov.w	fp, #0
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	e768      	b.n	800fdd4 <_strtod_l+0x44c>
 800ff02:	bf00      	nop
 800ff04:	0801349d 	.word	0x0801349d
 800ff08:	080136b4 	.word	0x080136b4
 800ff0c:	08013495 	.word	0x08013495
 800ff10:	080134ca 	.word	0x080134ca
 800ff14:	08013878 	.word	0x08013878
 800ff18:	080135e8 	.word	0x080135e8
 800ff1c:	080135c0 	.word	0x080135c0
 800ff20:	7ff00000 	.word	0x7ff00000
 800ff24:	7ca00000 	.word	0x7ca00000
 800ff28:	7fefffff 	.word	0x7fefffff
 800ff2c:	f014 0310 	ands.w	r3, r4, #16
 800ff30:	bf18      	it	ne
 800ff32:	236a      	movne	r3, #106	@ 0x6a
 800ff34:	4ea9      	ldr	r6, [pc, #676]	@ (80101dc <_strtod_l+0x854>)
 800ff36:	9308      	str	r3, [sp, #32]
 800ff38:	4650      	mov	r0, sl
 800ff3a:	4659      	mov	r1, fp
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	07e2      	lsls	r2, r4, #31
 800ff40:	d504      	bpl.n	800ff4c <_strtod_l+0x5c4>
 800ff42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff46:	f7f0 fb77 	bl	8000638 <__aeabi_dmul>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	1064      	asrs	r4, r4, #1
 800ff4e:	f106 0608 	add.w	r6, r6, #8
 800ff52:	d1f4      	bne.n	800ff3e <_strtod_l+0x5b6>
 800ff54:	b10b      	cbz	r3, 800ff5a <_strtod_l+0x5d2>
 800ff56:	4682      	mov	sl, r0
 800ff58:	468b      	mov	fp, r1
 800ff5a:	9b08      	ldr	r3, [sp, #32]
 800ff5c:	b1b3      	cbz	r3, 800ff8c <_strtod_l+0x604>
 800ff5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ff62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	4659      	mov	r1, fp
 800ff6a:	dd0f      	ble.n	800ff8c <_strtod_l+0x604>
 800ff6c:	2b1f      	cmp	r3, #31
 800ff6e:	dd55      	ble.n	801001c <_strtod_l+0x694>
 800ff70:	2b34      	cmp	r3, #52	@ 0x34
 800ff72:	bfde      	ittt	le
 800ff74:	f04f 33ff 	movle.w	r3, #4294967295
 800ff78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ff7c:	4093      	lslle	r3, r2
 800ff7e:	f04f 0a00 	mov.w	sl, #0
 800ff82:	bfcc      	ite	gt
 800ff84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ff88:	ea03 0b01 	andle.w	fp, r3, r1
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	2300      	movs	r3, #0
 800ff90:	4650      	mov	r0, sl
 800ff92:	4659      	mov	r1, fp
 800ff94:	f7f0 fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d1a6      	bne.n	800feea <_strtod_l+0x562>
 800ff9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ffa2:	9805      	ldr	r0, [sp, #20]
 800ffa4:	462b      	mov	r3, r5
 800ffa6:	463a      	mov	r2, r7
 800ffa8:	f7ff f8c4 	bl	800f134 <__s2b>
 800ffac:	900a      	str	r0, [sp, #40]	@ 0x28
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f43f af05 	beq.w	800fdbe <_strtod_l+0x436>
 800ffb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffb6:	2a00      	cmp	r2, #0
 800ffb8:	eba9 0308 	sub.w	r3, r9, r8
 800ffbc:	bfa8      	it	ge
 800ffbe:	2300      	movge	r3, #0
 800ffc0:	9312      	str	r3, [sp, #72]	@ 0x48
 800ffc2:	2400      	movs	r4, #0
 800ffc4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ffc8:	9316      	str	r3, [sp, #88]	@ 0x58
 800ffca:	46a0      	mov	r8, r4
 800ffcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffce:	9805      	ldr	r0, [sp, #20]
 800ffd0:	6859      	ldr	r1, [r3, #4]
 800ffd2:	f7ff f807 	bl	800efe4 <_Balloc>
 800ffd6:	4681      	mov	r9, r0
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	f43f aef4 	beq.w	800fdc6 <_strtod_l+0x43e>
 800ffde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffe0:	691a      	ldr	r2, [r3, #16]
 800ffe2:	3202      	adds	r2, #2
 800ffe4:	f103 010c 	add.w	r1, r3, #12
 800ffe8:	0092      	lsls	r2, r2, #2
 800ffea:	300c      	adds	r0, #12
 800ffec:	f7fe f945 	bl	800e27a <memcpy>
 800fff0:	ec4b ab10 	vmov	d0, sl, fp
 800fff4:	9805      	ldr	r0, [sp, #20]
 800fff6:	aa1c      	add	r2, sp, #112	@ 0x70
 800fff8:	a91b      	add	r1, sp, #108	@ 0x6c
 800fffa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fffe:	f7ff fbd5 	bl	800f7ac <__d2b>
 8010002:	901a      	str	r0, [sp, #104]	@ 0x68
 8010004:	2800      	cmp	r0, #0
 8010006:	f43f aede 	beq.w	800fdc6 <_strtod_l+0x43e>
 801000a:	9805      	ldr	r0, [sp, #20]
 801000c:	2101      	movs	r1, #1
 801000e:	f7ff f927 	bl	800f260 <__i2b>
 8010012:	4680      	mov	r8, r0
 8010014:	b948      	cbnz	r0, 801002a <_strtod_l+0x6a2>
 8010016:	f04f 0800 	mov.w	r8, #0
 801001a:	e6d4      	b.n	800fdc6 <_strtod_l+0x43e>
 801001c:	f04f 32ff 	mov.w	r2, #4294967295
 8010020:	fa02 f303 	lsl.w	r3, r2, r3
 8010024:	ea03 0a0a 	and.w	sl, r3, sl
 8010028:	e7b0      	b.n	800ff8c <_strtod_l+0x604>
 801002a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801002c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801002e:	2d00      	cmp	r5, #0
 8010030:	bfab      	itete	ge
 8010032:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010034:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010036:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010038:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801003a:	bfac      	ite	ge
 801003c:	18ef      	addge	r7, r5, r3
 801003e:	1b5e      	sublt	r6, r3, r5
 8010040:	9b08      	ldr	r3, [sp, #32]
 8010042:	1aed      	subs	r5, r5, r3
 8010044:	4415      	add	r5, r2
 8010046:	4b66      	ldr	r3, [pc, #408]	@ (80101e0 <_strtod_l+0x858>)
 8010048:	3d01      	subs	r5, #1
 801004a:	429d      	cmp	r5, r3
 801004c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010050:	da50      	bge.n	80100f4 <_strtod_l+0x76c>
 8010052:	1b5b      	subs	r3, r3, r5
 8010054:	2b1f      	cmp	r3, #31
 8010056:	eba2 0203 	sub.w	r2, r2, r3
 801005a:	f04f 0101 	mov.w	r1, #1
 801005e:	dc3d      	bgt.n	80100dc <_strtod_l+0x754>
 8010060:	fa01 f303 	lsl.w	r3, r1, r3
 8010064:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010066:	2300      	movs	r3, #0
 8010068:	9310      	str	r3, [sp, #64]	@ 0x40
 801006a:	18bd      	adds	r5, r7, r2
 801006c:	9b08      	ldr	r3, [sp, #32]
 801006e:	42af      	cmp	r7, r5
 8010070:	4416      	add	r6, r2
 8010072:	441e      	add	r6, r3
 8010074:	463b      	mov	r3, r7
 8010076:	bfa8      	it	ge
 8010078:	462b      	movge	r3, r5
 801007a:	42b3      	cmp	r3, r6
 801007c:	bfa8      	it	ge
 801007e:	4633      	movge	r3, r6
 8010080:	2b00      	cmp	r3, #0
 8010082:	bfc2      	ittt	gt
 8010084:	1aed      	subgt	r5, r5, r3
 8010086:	1af6      	subgt	r6, r6, r3
 8010088:	1aff      	subgt	r7, r7, r3
 801008a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801008c:	2b00      	cmp	r3, #0
 801008e:	dd16      	ble.n	80100be <_strtod_l+0x736>
 8010090:	4641      	mov	r1, r8
 8010092:	9805      	ldr	r0, [sp, #20]
 8010094:	461a      	mov	r2, r3
 8010096:	f7ff f9a3 	bl	800f3e0 <__pow5mult>
 801009a:	4680      	mov	r8, r0
 801009c:	2800      	cmp	r0, #0
 801009e:	d0ba      	beq.n	8010016 <_strtod_l+0x68e>
 80100a0:	4601      	mov	r1, r0
 80100a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80100a4:	9805      	ldr	r0, [sp, #20]
 80100a6:	f7ff f8f1 	bl	800f28c <__multiply>
 80100aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f43f ae8a 	beq.w	800fdc6 <_strtod_l+0x43e>
 80100b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100b4:	9805      	ldr	r0, [sp, #20]
 80100b6:	f7fe ffd5 	bl	800f064 <_Bfree>
 80100ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80100be:	2d00      	cmp	r5, #0
 80100c0:	dc1d      	bgt.n	80100fe <_strtod_l+0x776>
 80100c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	dd23      	ble.n	8010110 <_strtod_l+0x788>
 80100c8:	4649      	mov	r1, r9
 80100ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80100cc:	9805      	ldr	r0, [sp, #20]
 80100ce:	f7ff f987 	bl	800f3e0 <__pow5mult>
 80100d2:	4681      	mov	r9, r0
 80100d4:	b9e0      	cbnz	r0, 8010110 <_strtod_l+0x788>
 80100d6:	f04f 0900 	mov.w	r9, #0
 80100da:	e674      	b.n	800fdc6 <_strtod_l+0x43e>
 80100dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80100e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80100e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80100e8:	35e2      	adds	r5, #226	@ 0xe2
 80100ea:	fa01 f305 	lsl.w	r3, r1, r5
 80100ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80100f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80100f2:	e7ba      	b.n	801006a <_strtod_l+0x6e2>
 80100f4:	2300      	movs	r3, #0
 80100f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80100f8:	2301      	movs	r3, #1
 80100fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100fc:	e7b5      	b.n	801006a <_strtod_l+0x6e2>
 80100fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010100:	9805      	ldr	r0, [sp, #20]
 8010102:	462a      	mov	r2, r5
 8010104:	f7ff f9c6 	bl	800f494 <__lshift>
 8010108:	901a      	str	r0, [sp, #104]	@ 0x68
 801010a:	2800      	cmp	r0, #0
 801010c:	d1d9      	bne.n	80100c2 <_strtod_l+0x73a>
 801010e:	e65a      	b.n	800fdc6 <_strtod_l+0x43e>
 8010110:	2e00      	cmp	r6, #0
 8010112:	dd07      	ble.n	8010124 <_strtod_l+0x79c>
 8010114:	4649      	mov	r1, r9
 8010116:	9805      	ldr	r0, [sp, #20]
 8010118:	4632      	mov	r2, r6
 801011a:	f7ff f9bb 	bl	800f494 <__lshift>
 801011e:	4681      	mov	r9, r0
 8010120:	2800      	cmp	r0, #0
 8010122:	d0d8      	beq.n	80100d6 <_strtod_l+0x74e>
 8010124:	2f00      	cmp	r7, #0
 8010126:	dd08      	ble.n	801013a <_strtod_l+0x7b2>
 8010128:	4641      	mov	r1, r8
 801012a:	9805      	ldr	r0, [sp, #20]
 801012c:	463a      	mov	r2, r7
 801012e:	f7ff f9b1 	bl	800f494 <__lshift>
 8010132:	4680      	mov	r8, r0
 8010134:	2800      	cmp	r0, #0
 8010136:	f43f ae46 	beq.w	800fdc6 <_strtod_l+0x43e>
 801013a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801013c:	9805      	ldr	r0, [sp, #20]
 801013e:	464a      	mov	r2, r9
 8010140:	f7ff fa30 	bl	800f5a4 <__mdiff>
 8010144:	4604      	mov	r4, r0
 8010146:	2800      	cmp	r0, #0
 8010148:	f43f ae3d 	beq.w	800fdc6 <_strtod_l+0x43e>
 801014c:	68c3      	ldr	r3, [r0, #12]
 801014e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010150:	2300      	movs	r3, #0
 8010152:	60c3      	str	r3, [r0, #12]
 8010154:	4641      	mov	r1, r8
 8010156:	f7ff fa09 	bl	800f56c <__mcmp>
 801015a:	2800      	cmp	r0, #0
 801015c:	da46      	bge.n	80101ec <_strtod_l+0x864>
 801015e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010160:	ea53 030a 	orrs.w	r3, r3, sl
 8010164:	d16c      	bne.n	8010240 <_strtod_l+0x8b8>
 8010166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801016a:	2b00      	cmp	r3, #0
 801016c:	d168      	bne.n	8010240 <_strtod_l+0x8b8>
 801016e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010172:	0d1b      	lsrs	r3, r3, #20
 8010174:	051b      	lsls	r3, r3, #20
 8010176:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801017a:	d961      	bls.n	8010240 <_strtod_l+0x8b8>
 801017c:	6963      	ldr	r3, [r4, #20]
 801017e:	b913      	cbnz	r3, 8010186 <_strtod_l+0x7fe>
 8010180:	6923      	ldr	r3, [r4, #16]
 8010182:	2b01      	cmp	r3, #1
 8010184:	dd5c      	ble.n	8010240 <_strtod_l+0x8b8>
 8010186:	4621      	mov	r1, r4
 8010188:	2201      	movs	r2, #1
 801018a:	9805      	ldr	r0, [sp, #20]
 801018c:	f7ff f982 	bl	800f494 <__lshift>
 8010190:	4641      	mov	r1, r8
 8010192:	4604      	mov	r4, r0
 8010194:	f7ff f9ea 	bl	800f56c <__mcmp>
 8010198:	2800      	cmp	r0, #0
 801019a:	dd51      	ble.n	8010240 <_strtod_l+0x8b8>
 801019c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80101a0:	9a08      	ldr	r2, [sp, #32]
 80101a2:	0d1b      	lsrs	r3, r3, #20
 80101a4:	051b      	lsls	r3, r3, #20
 80101a6:	2a00      	cmp	r2, #0
 80101a8:	d06b      	beq.n	8010282 <_strtod_l+0x8fa>
 80101aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80101ae:	d868      	bhi.n	8010282 <_strtod_l+0x8fa>
 80101b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80101b4:	f67f ae9d 	bls.w	800fef2 <_strtod_l+0x56a>
 80101b8:	4b0a      	ldr	r3, [pc, #40]	@ (80101e4 <_strtod_l+0x85c>)
 80101ba:	4650      	mov	r0, sl
 80101bc:	4659      	mov	r1, fp
 80101be:	2200      	movs	r2, #0
 80101c0:	f7f0 fa3a 	bl	8000638 <__aeabi_dmul>
 80101c4:	4b08      	ldr	r3, [pc, #32]	@ (80101e8 <_strtod_l+0x860>)
 80101c6:	400b      	ands	r3, r1
 80101c8:	4682      	mov	sl, r0
 80101ca:	468b      	mov	fp, r1
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f47f ae05 	bne.w	800fddc <_strtod_l+0x454>
 80101d2:	9a05      	ldr	r2, [sp, #20]
 80101d4:	2322      	movs	r3, #34	@ 0x22
 80101d6:	6013      	str	r3, [r2, #0]
 80101d8:	e600      	b.n	800fddc <_strtod_l+0x454>
 80101da:	bf00      	nop
 80101dc:	080136e0 	.word	0x080136e0
 80101e0:	fffffc02 	.word	0xfffffc02
 80101e4:	39500000 	.word	0x39500000
 80101e8:	7ff00000 	.word	0x7ff00000
 80101ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80101f0:	d165      	bne.n	80102be <_strtod_l+0x936>
 80101f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80101f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101f8:	b35a      	cbz	r2, 8010252 <_strtod_l+0x8ca>
 80101fa:	4a9f      	ldr	r2, [pc, #636]	@ (8010478 <_strtod_l+0xaf0>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d12b      	bne.n	8010258 <_strtod_l+0x8d0>
 8010200:	9b08      	ldr	r3, [sp, #32]
 8010202:	4651      	mov	r1, sl
 8010204:	b303      	cbz	r3, 8010248 <_strtod_l+0x8c0>
 8010206:	4b9d      	ldr	r3, [pc, #628]	@ (801047c <_strtod_l+0xaf4>)
 8010208:	465a      	mov	r2, fp
 801020a:	4013      	ands	r3, r2
 801020c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010210:	f04f 32ff 	mov.w	r2, #4294967295
 8010214:	d81b      	bhi.n	801024e <_strtod_l+0x8c6>
 8010216:	0d1b      	lsrs	r3, r3, #20
 8010218:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801021c:	fa02 f303 	lsl.w	r3, r2, r3
 8010220:	4299      	cmp	r1, r3
 8010222:	d119      	bne.n	8010258 <_strtod_l+0x8d0>
 8010224:	4b96      	ldr	r3, [pc, #600]	@ (8010480 <_strtod_l+0xaf8>)
 8010226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010228:	429a      	cmp	r2, r3
 801022a:	d102      	bne.n	8010232 <_strtod_l+0x8aa>
 801022c:	3101      	adds	r1, #1
 801022e:	f43f adca 	beq.w	800fdc6 <_strtod_l+0x43e>
 8010232:	4b92      	ldr	r3, [pc, #584]	@ (801047c <_strtod_l+0xaf4>)
 8010234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010236:	401a      	ands	r2, r3
 8010238:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801023c:	f04f 0a00 	mov.w	sl, #0
 8010240:	9b08      	ldr	r3, [sp, #32]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1b8      	bne.n	80101b8 <_strtod_l+0x830>
 8010246:	e5c9      	b.n	800fddc <_strtod_l+0x454>
 8010248:	f04f 33ff 	mov.w	r3, #4294967295
 801024c:	e7e8      	b.n	8010220 <_strtod_l+0x898>
 801024e:	4613      	mov	r3, r2
 8010250:	e7e6      	b.n	8010220 <_strtod_l+0x898>
 8010252:	ea53 030a 	orrs.w	r3, r3, sl
 8010256:	d0a1      	beq.n	801019c <_strtod_l+0x814>
 8010258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801025a:	b1db      	cbz	r3, 8010294 <_strtod_l+0x90c>
 801025c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801025e:	4213      	tst	r3, r2
 8010260:	d0ee      	beq.n	8010240 <_strtod_l+0x8b8>
 8010262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010264:	9a08      	ldr	r2, [sp, #32]
 8010266:	4650      	mov	r0, sl
 8010268:	4659      	mov	r1, fp
 801026a:	b1bb      	cbz	r3, 801029c <_strtod_l+0x914>
 801026c:	f7ff fb6c 	bl	800f948 <sulp>
 8010270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010274:	ec53 2b10 	vmov	r2, r3, d0
 8010278:	f7f0 f828 	bl	80002cc <__adddf3>
 801027c:	4682      	mov	sl, r0
 801027e:	468b      	mov	fp, r1
 8010280:	e7de      	b.n	8010240 <_strtod_l+0x8b8>
 8010282:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010286:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801028a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801028e:	f04f 3aff 	mov.w	sl, #4294967295
 8010292:	e7d5      	b.n	8010240 <_strtod_l+0x8b8>
 8010294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010296:	ea13 0f0a 	tst.w	r3, sl
 801029a:	e7e1      	b.n	8010260 <_strtod_l+0x8d8>
 801029c:	f7ff fb54 	bl	800f948 <sulp>
 80102a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102a4:	ec53 2b10 	vmov	r2, r3, d0
 80102a8:	f7f0 f80e 	bl	80002c8 <__aeabi_dsub>
 80102ac:	2200      	movs	r2, #0
 80102ae:	2300      	movs	r3, #0
 80102b0:	4682      	mov	sl, r0
 80102b2:	468b      	mov	fp, r1
 80102b4:	f7f0 fc28 	bl	8000b08 <__aeabi_dcmpeq>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d0c1      	beq.n	8010240 <_strtod_l+0x8b8>
 80102bc:	e619      	b.n	800fef2 <_strtod_l+0x56a>
 80102be:	4641      	mov	r1, r8
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7ff facb 	bl	800f85c <__ratio>
 80102c6:	ec57 6b10 	vmov	r6, r7, d0
 80102ca:	2200      	movs	r2, #0
 80102cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80102d0:	4630      	mov	r0, r6
 80102d2:	4639      	mov	r1, r7
 80102d4:	f7f0 fc2c 	bl	8000b30 <__aeabi_dcmple>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d06f      	beq.n	80103bc <_strtod_l+0xa34>
 80102dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d17a      	bne.n	80103d8 <_strtod_l+0xa50>
 80102e2:	f1ba 0f00 	cmp.w	sl, #0
 80102e6:	d158      	bne.n	801039a <_strtod_l+0xa12>
 80102e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d15a      	bne.n	80103a8 <_strtod_l+0xa20>
 80102f2:	4b64      	ldr	r3, [pc, #400]	@ (8010484 <_strtod_l+0xafc>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7f0 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d159      	bne.n	80103b6 <_strtod_l+0xa2e>
 8010302:	4630      	mov	r0, r6
 8010304:	4639      	mov	r1, r7
 8010306:	4b60      	ldr	r3, [pc, #384]	@ (8010488 <_strtod_l+0xb00>)
 8010308:	2200      	movs	r2, #0
 801030a:	f7f0 f995 	bl	8000638 <__aeabi_dmul>
 801030e:	4606      	mov	r6, r0
 8010310:	460f      	mov	r7, r1
 8010312:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010316:	9606      	str	r6, [sp, #24]
 8010318:	9307      	str	r3, [sp, #28]
 801031a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801031e:	4d57      	ldr	r5, [pc, #348]	@ (801047c <_strtod_l+0xaf4>)
 8010320:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010326:	401d      	ands	r5, r3
 8010328:	4b58      	ldr	r3, [pc, #352]	@ (801048c <_strtod_l+0xb04>)
 801032a:	429d      	cmp	r5, r3
 801032c:	f040 80b2 	bne.w	8010494 <_strtod_l+0xb0c>
 8010330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010332:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010336:	ec4b ab10 	vmov	d0, sl, fp
 801033a:	f7ff f9c7 	bl	800f6cc <__ulp>
 801033e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010342:	ec51 0b10 	vmov	r0, r1, d0
 8010346:	f7f0 f977 	bl	8000638 <__aeabi_dmul>
 801034a:	4652      	mov	r2, sl
 801034c:	465b      	mov	r3, fp
 801034e:	f7ef ffbd 	bl	80002cc <__adddf3>
 8010352:	460b      	mov	r3, r1
 8010354:	4949      	ldr	r1, [pc, #292]	@ (801047c <_strtod_l+0xaf4>)
 8010356:	4a4e      	ldr	r2, [pc, #312]	@ (8010490 <_strtod_l+0xb08>)
 8010358:	4019      	ands	r1, r3
 801035a:	4291      	cmp	r1, r2
 801035c:	4682      	mov	sl, r0
 801035e:	d942      	bls.n	80103e6 <_strtod_l+0xa5e>
 8010360:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010362:	4b47      	ldr	r3, [pc, #284]	@ (8010480 <_strtod_l+0xaf8>)
 8010364:	429a      	cmp	r2, r3
 8010366:	d103      	bne.n	8010370 <_strtod_l+0x9e8>
 8010368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801036a:	3301      	adds	r3, #1
 801036c:	f43f ad2b 	beq.w	800fdc6 <_strtod_l+0x43e>
 8010370:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010480 <_strtod_l+0xaf8>
 8010374:	f04f 3aff 	mov.w	sl, #4294967295
 8010378:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801037a:	9805      	ldr	r0, [sp, #20]
 801037c:	f7fe fe72 	bl	800f064 <_Bfree>
 8010380:	9805      	ldr	r0, [sp, #20]
 8010382:	4649      	mov	r1, r9
 8010384:	f7fe fe6e 	bl	800f064 <_Bfree>
 8010388:	9805      	ldr	r0, [sp, #20]
 801038a:	4641      	mov	r1, r8
 801038c:	f7fe fe6a 	bl	800f064 <_Bfree>
 8010390:	9805      	ldr	r0, [sp, #20]
 8010392:	4621      	mov	r1, r4
 8010394:	f7fe fe66 	bl	800f064 <_Bfree>
 8010398:	e618      	b.n	800ffcc <_strtod_l+0x644>
 801039a:	f1ba 0f01 	cmp.w	sl, #1
 801039e:	d103      	bne.n	80103a8 <_strtod_l+0xa20>
 80103a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f43f ada5 	beq.w	800fef2 <_strtod_l+0x56a>
 80103a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010458 <_strtod_l+0xad0>
 80103ac:	4f35      	ldr	r7, [pc, #212]	@ (8010484 <_strtod_l+0xafc>)
 80103ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103b2:	2600      	movs	r6, #0
 80103b4:	e7b1      	b.n	801031a <_strtod_l+0x992>
 80103b6:	4f34      	ldr	r7, [pc, #208]	@ (8010488 <_strtod_l+0xb00>)
 80103b8:	2600      	movs	r6, #0
 80103ba:	e7aa      	b.n	8010312 <_strtod_l+0x98a>
 80103bc:	4b32      	ldr	r3, [pc, #200]	@ (8010488 <_strtod_l+0xb00>)
 80103be:	4630      	mov	r0, r6
 80103c0:	4639      	mov	r1, r7
 80103c2:	2200      	movs	r2, #0
 80103c4:	f7f0 f938 	bl	8000638 <__aeabi_dmul>
 80103c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103ca:	4606      	mov	r6, r0
 80103cc:	460f      	mov	r7, r1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d09f      	beq.n	8010312 <_strtod_l+0x98a>
 80103d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80103d6:	e7a0      	b.n	801031a <_strtod_l+0x992>
 80103d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010460 <_strtod_l+0xad8>
 80103dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103e0:	ec57 6b17 	vmov	r6, r7, d7
 80103e4:	e799      	b.n	801031a <_strtod_l+0x992>
 80103e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80103ea:	9b08      	ldr	r3, [sp, #32]
 80103ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d1c1      	bne.n	8010378 <_strtod_l+0x9f0>
 80103f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80103f8:	0d1b      	lsrs	r3, r3, #20
 80103fa:	051b      	lsls	r3, r3, #20
 80103fc:	429d      	cmp	r5, r3
 80103fe:	d1bb      	bne.n	8010378 <_strtod_l+0x9f0>
 8010400:	4630      	mov	r0, r6
 8010402:	4639      	mov	r1, r7
 8010404:	f7f0 fdd6 	bl	8000fb4 <__aeabi_d2lz>
 8010408:	f7f0 f8e8 	bl	80005dc <__aeabi_l2d>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4630      	mov	r0, r6
 8010412:	4639      	mov	r1, r7
 8010414:	f7ef ff58 	bl	80002c8 <__aeabi_dsub>
 8010418:	460b      	mov	r3, r1
 801041a:	4602      	mov	r2, r0
 801041c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010420:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010426:	ea46 060a 	orr.w	r6, r6, sl
 801042a:	431e      	orrs	r6, r3
 801042c:	d06f      	beq.n	801050e <_strtod_l+0xb86>
 801042e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010468 <_strtod_l+0xae0>)
 8010430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010434:	f7f0 fb72 	bl	8000b1c <__aeabi_dcmplt>
 8010438:	2800      	cmp	r0, #0
 801043a:	f47f accf 	bne.w	800fddc <_strtod_l+0x454>
 801043e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010470 <_strtod_l+0xae8>)
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010448:	f7f0 fb86 	bl	8000b58 <__aeabi_dcmpgt>
 801044c:	2800      	cmp	r0, #0
 801044e:	d093      	beq.n	8010378 <_strtod_l+0x9f0>
 8010450:	e4c4      	b.n	800fddc <_strtod_l+0x454>
 8010452:	bf00      	nop
 8010454:	f3af 8000 	nop.w
 8010458:	00000000 	.word	0x00000000
 801045c:	bff00000 	.word	0xbff00000
 8010460:	00000000 	.word	0x00000000
 8010464:	3ff00000 	.word	0x3ff00000
 8010468:	94a03595 	.word	0x94a03595
 801046c:	3fdfffff 	.word	0x3fdfffff
 8010470:	35afe535 	.word	0x35afe535
 8010474:	3fe00000 	.word	0x3fe00000
 8010478:	000fffff 	.word	0x000fffff
 801047c:	7ff00000 	.word	0x7ff00000
 8010480:	7fefffff 	.word	0x7fefffff
 8010484:	3ff00000 	.word	0x3ff00000
 8010488:	3fe00000 	.word	0x3fe00000
 801048c:	7fe00000 	.word	0x7fe00000
 8010490:	7c9fffff 	.word	0x7c9fffff
 8010494:	9b08      	ldr	r3, [sp, #32]
 8010496:	b323      	cbz	r3, 80104e2 <_strtod_l+0xb5a>
 8010498:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801049c:	d821      	bhi.n	80104e2 <_strtod_l+0xb5a>
 801049e:	a328      	add	r3, pc, #160	@ (adr r3, 8010540 <_strtod_l+0xbb8>)
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7f0 fb42 	bl	8000b30 <__aeabi_dcmple>
 80104ac:	b1a0      	cbz	r0, 80104d8 <_strtod_l+0xb50>
 80104ae:	4639      	mov	r1, r7
 80104b0:	4630      	mov	r0, r6
 80104b2:	f7f0 fb99 	bl	8000be8 <__aeabi_d2uiz>
 80104b6:	2801      	cmp	r0, #1
 80104b8:	bf38      	it	cc
 80104ba:	2001      	movcc	r0, #1
 80104bc:	f7f0 f842 	bl	8000544 <__aeabi_ui2d>
 80104c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	b9fb      	cbnz	r3, 8010508 <_strtod_l+0xb80>
 80104c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80104ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80104d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80104d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80104d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80104de:	1b5b      	subs	r3, r3, r5
 80104e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80104e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80104e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80104ea:	f7ff f8ef 	bl	800f6cc <__ulp>
 80104ee:	4650      	mov	r0, sl
 80104f0:	ec53 2b10 	vmov	r2, r3, d0
 80104f4:	4659      	mov	r1, fp
 80104f6:	f7f0 f89f 	bl	8000638 <__aeabi_dmul>
 80104fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80104fe:	f7ef fee5 	bl	80002cc <__adddf3>
 8010502:	4682      	mov	sl, r0
 8010504:	468b      	mov	fp, r1
 8010506:	e770      	b.n	80103ea <_strtod_l+0xa62>
 8010508:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801050c:	e7e0      	b.n	80104d0 <_strtod_l+0xb48>
 801050e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010548 <_strtod_l+0xbc0>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7f0 fb02 	bl	8000b1c <__aeabi_dcmplt>
 8010518:	e798      	b.n	801044c <_strtod_l+0xac4>
 801051a:	2300      	movs	r3, #0
 801051c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801051e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	f7ff ba6d 	b.w	800fa02 <_strtod_l+0x7a>
 8010528:	2a65      	cmp	r2, #101	@ 0x65
 801052a:	f43f ab66 	beq.w	800fbfa <_strtod_l+0x272>
 801052e:	2a45      	cmp	r2, #69	@ 0x45
 8010530:	f43f ab63 	beq.w	800fbfa <_strtod_l+0x272>
 8010534:	2301      	movs	r3, #1
 8010536:	f7ff bb9e 	b.w	800fc76 <_strtod_l+0x2ee>
 801053a:	bf00      	nop
 801053c:	f3af 8000 	nop.w
 8010540:	ffc00000 	.word	0xffc00000
 8010544:	41dfffff 	.word	0x41dfffff
 8010548:	94a03595 	.word	0x94a03595
 801054c:	3fcfffff 	.word	0x3fcfffff

08010550 <_strtod_r>:
 8010550:	4b01      	ldr	r3, [pc, #4]	@ (8010558 <_strtod_r+0x8>)
 8010552:	f7ff ba19 	b.w	800f988 <_strtod_l>
 8010556:	bf00      	nop
 8010558:	2000009c 	.word	0x2000009c

0801055c <_strtol_l.constprop.0>:
 801055c:	2b24      	cmp	r3, #36	@ 0x24
 801055e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010562:	4686      	mov	lr, r0
 8010564:	4690      	mov	r8, r2
 8010566:	d801      	bhi.n	801056c <_strtol_l.constprop.0+0x10>
 8010568:	2b01      	cmp	r3, #1
 801056a:	d106      	bne.n	801057a <_strtol_l.constprop.0+0x1e>
 801056c:	f7fd fe58 	bl	800e220 <__errno>
 8010570:	2316      	movs	r3, #22
 8010572:	6003      	str	r3, [r0, #0]
 8010574:	2000      	movs	r0, #0
 8010576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057a:	4834      	ldr	r0, [pc, #208]	@ (801064c <_strtol_l.constprop.0+0xf0>)
 801057c:	460d      	mov	r5, r1
 801057e:	462a      	mov	r2, r5
 8010580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010584:	5d06      	ldrb	r6, [r0, r4]
 8010586:	f016 0608 	ands.w	r6, r6, #8
 801058a:	d1f8      	bne.n	801057e <_strtol_l.constprop.0+0x22>
 801058c:	2c2d      	cmp	r4, #45	@ 0x2d
 801058e:	d12d      	bne.n	80105ec <_strtol_l.constprop.0+0x90>
 8010590:	782c      	ldrb	r4, [r5, #0]
 8010592:	2601      	movs	r6, #1
 8010594:	1c95      	adds	r5, r2, #2
 8010596:	f033 0210 	bics.w	r2, r3, #16
 801059a:	d109      	bne.n	80105b0 <_strtol_l.constprop.0+0x54>
 801059c:	2c30      	cmp	r4, #48	@ 0x30
 801059e:	d12a      	bne.n	80105f6 <_strtol_l.constprop.0+0x9a>
 80105a0:	782a      	ldrb	r2, [r5, #0]
 80105a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80105a6:	2a58      	cmp	r2, #88	@ 0x58
 80105a8:	d125      	bne.n	80105f6 <_strtol_l.constprop.0+0x9a>
 80105aa:	786c      	ldrb	r4, [r5, #1]
 80105ac:	2310      	movs	r3, #16
 80105ae:	3502      	adds	r5, #2
 80105b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80105b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80105b8:	2200      	movs	r2, #0
 80105ba:	fbbc f9f3 	udiv	r9, ip, r3
 80105be:	4610      	mov	r0, r2
 80105c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80105c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80105c8:	2f09      	cmp	r7, #9
 80105ca:	d81b      	bhi.n	8010604 <_strtol_l.constprop.0+0xa8>
 80105cc:	463c      	mov	r4, r7
 80105ce:	42a3      	cmp	r3, r4
 80105d0:	dd27      	ble.n	8010622 <_strtol_l.constprop.0+0xc6>
 80105d2:	1c57      	adds	r7, r2, #1
 80105d4:	d007      	beq.n	80105e6 <_strtol_l.constprop.0+0x8a>
 80105d6:	4581      	cmp	r9, r0
 80105d8:	d320      	bcc.n	801061c <_strtol_l.constprop.0+0xc0>
 80105da:	d101      	bne.n	80105e0 <_strtol_l.constprop.0+0x84>
 80105dc:	45a2      	cmp	sl, r4
 80105de:	db1d      	blt.n	801061c <_strtol_l.constprop.0+0xc0>
 80105e0:	fb00 4003 	mla	r0, r0, r3, r4
 80105e4:	2201      	movs	r2, #1
 80105e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105ea:	e7eb      	b.n	80105c4 <_strtol_l.constprop.0+0x68>
 80105ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80105ee:	bf04      	itt	eq
 80105f0:	782c      	ldrbeq	r4, [r5, #0]
 80105f2:	1c95      	addeq	r5, r2, #2
 80105f4:	e7cf      	b.n	8010596 <_strtol_l.constprop.0+0x3a>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1da      	bne.n	80105b0 <_strtol_l.constprop.0+0x54>
 80105fa:	2c30      	cmp	r4, #48	@ 0x30
 80105fc:	bf0c      	ite	eq
 80105fe:	2308      	moveq	r3, #8
 8010600:	230a      	movne	r3, #10
 8010602:	e7d5      	b.n	80105b0 <_strtol_l.constprop.0+0x54>
 8010604:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010608:	2f19      	cmp	r7, #25
 801060a:	d801      	bhi.n	8010610 <_strtol_l.constprop.0+0xb4>
 801060c:	3c37      	subs	r4, #55	@ 0x37
 801060e:	e7de      	b.n	80105ce <_strtol_l.constprop.0+0x72>
 8010610:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010614:	2f19      	cmp	r7, #25
 8010616:	d804      	bhi.n	8010622 <_strtol_l.constprop.0+0xc6>
 8010618:	3c57      	subs	r4, #87	@ 0x57
 801061a:	e7d8      	b.n	80105ce <_strtol_l.constprop.0+0x72>
 801061c:	f04f 32ff 	mov.w	r2, #4294967295
 8010620:	e7e1      	b.n	80105e6 <_strtol_l.constprop.0+0x8a>
 8010622:	1c53      	adds	r3, r2, #1
 8010624:	d108      	bne.n	8010638 <_strtol_l.constprop.0+0xdc>
 8010626:	2322      	movs	r3, #34	@ 0x22
 8010628:	f8ce 3000 	str.w	r3, [lr]
 801062c:	4660      	mov	r0, ip
 801062e:	f1b8 0f00 	cmp.w	r8, #0
 8010632:	d0a0      	beq.n	8010576 <_strtol_l.constprop.0+0x1a>
 8010634:	1e69      	subs	r1, r5, #1
 8010636:	e006      	b.n	8010646 <_strtol_l.constprop.0+0xea>
 8010638:	b106      	cbz	r6, 801063c <_strtol_l.constprop.0+0xe0>
 801063a:	4240      	negs	r0, r0
 801063c:	f1b8 0f00 	cmp.w	r8, #0
 8010640:	d099      	beq.n	8010576 <_strtol_l.constprop.0+0x1a>
 8010642:	2a00      	cmp	r2, #0
 8010644:	d1f6      	bne.n	8010634 <_strtol_l.constprop.0+0xd8>
 8010646:	f8c8 1000 	str.w	r1, [r8]
 801064a:	e794      	b.n	8010576 <_strtol_l.constprop.0+0x1a>
 801064c:	08013709 	.word	0x08013709

08010650 <_strtol_r>:
 8010650:	f7ff bf84 	b.w	801055c <_strtol_l.constprop.0>

08010654 <__ssputs_r>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	688e      	ldr	r6, [r1, #8]
 801065a:	461f      	mov	r7, r3
 801065c:	42be      	cmp	r6, r7
 801065e:	680b      	ldr	r3, [r1, #0]
 8010660:	4682      	mov	sl, r0
 8010662:	460c      	mov	r4, r1
 8010664:	4690      	mov	r8, r2
 8010666:	d82d      	bhi.n	80106c4 <__ssputs_r+0x70>
 8010668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801066c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010670:	d026      	beq.n	80106c0 <__ssputs_r+0x6c>
 8010672:	6965      	ldr	r5, [r4, #20]
 8010674:	6909      	ldr	r1, [r1, #16]
 8010676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801067a:	eba3 0901 	sub.w	r9, r3, r1
 801067e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010682:	1c7b      	adds	r3, r7, #1
 8010684:	444b      	add	r3, r9
 8010686:	106d      	asrs	r5, r5, #1
 8010688:	429d      	cmp	r5, r3
 801068a:	bf38      	it	cc
 801068c:	461d      	movcc	r5, r3
 801068e:	0553      	lsls	r3, r2, #21
 8010690:	d527      	bpl.n	80106e2 <__ssputs_r+0x8e>
 8010692:	4629      	mov	r1, r5
 8010694:	f7fc fcf2 	bl	800d07c <_malloc_r>
 8010698:	4606      	mov	r6, r0
 801069a:	b360      	cbz	r0, 80106f6 <__ssputs_r+0xa2>
 801069c:	6921      	ldr	r1, [r4, #16]
 801069e:	464a      	mov	r2, r9
 80106a0:	f7fd fdeb 	bl	800e27a <memcpy>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80106aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	6126      	str	r6, [r4, #16]
 80106b2:	6165      	str	r5, [r4, #20]
 80106b4:	444e      	add	r6, r9
 80106b6:	eba5 0509 	sub.w	r5, r5, r9
 80106ba:	6026      	str	r6, [r4, #0]
 80106bc:	60a5      	str	r5, [r4, #8]
 80106be:	463e      	mov	r6, r7
 80106c0:	42be      	cmp	r6, r7
 80106c2:	d900      	bls.n	80106c6 <__ssputs_r+0x72>
 80106c4:	463e      	mov	r6, r7
 80106c6:	6820      	ldr	r0, [r4, #0]
 80106c8:	4632      	mov	r2, r6
 80106ca:	4641      	mov	r1, r8
 80106cc:	f000 fd53 	bl	8011176 <memmove>
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	1b9b      	subs	r3, r3, r6
 80106d4:	60a3      	str	r3, [r4, #8]
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	4433      	add	r3, r6
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	2000      	movs	r0, #0
 80106de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106e2:	462a      	mov	r2, r5
 80106e4:	f001 f8e5 	bl	80118b2 <_realloc_r>
 80106e8:	4606      	mov	r6, r0
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d1e0      	bne.n	80106b0 <__ssputs_r+0x5c>
 80106ee:	6921      	ldr	r1, [r4, #16]
 80106f0:	4650      	mov	r0, sl
 80106f2:	f7fe fc25 	bl	800ef40 <_free_r>
 80106f6:	230c      	movs	r3, #12
 80106f8:	f8ca 3000 	str.w	r3, [sl]
 80106fc:	89a3      	ldrh	r3, [r4, #12]
 80106fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010702:	81a3      	strh	r3, [r4, #12]
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	e7e9      	b.n	80106de <__ssputs_r+0x8a>
	...

0801070c <_svfiprintf_r>:
 801070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	4698      	mov	r8, r3
 8010712:	898b      	ldrh	r3, [r1, #12]
 8010714:	061b      	lsls	r3, r3, #24
 8010716:	b09d      	sub	sp, #116	@ 0x74
 8010718:	4607      	mov	r7, r0
 801071a:	460d      	mov	r5, r1
 801071c:	4614      	mov	r4, r2
 801071e:	d510      	bpl.n	8010742 <_svfiprintf_r+0x36>
 8010720:	690b      	ldr	r3, [r1, #16]
 8010722:	b973      	cbnz	r3, 8010742 <_svfiprintf_r+0x36>
 8010724:	2140      	movs	r1, #64	@ 0x40
 8010726:	f7fc fca9 	bl	800d07c <_malloc_r>
 801072a:	6028      	str	r0, [r5, #0]
 801072c:	6128      	str	r0, [r5, #16]
 801072e:	b930      	cbnz	r0, 801073e <_svfiprintf_r+0x32>
 8010730:	230c      	movs	r3, #12
 8010732:	603b      	str	r3, [r7, #0]
 8010734:	f04f 30ff 	mov.w	r0, #4294967295
 8010738:	b01d      	add	sp, #116	@ 0x74
 801073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073e:	2340      	movs	r3, #64	@ 0x40
 8010740:	616b      	str	r3, [r5, #20]
 8010742:	2300      	movs	r3, #0
 8010744:	9309      	str	r3, [sp, #36]	@ 0x24
 8010746:	2320      	movs	r3, #32
 8010748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801074c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010750:	2330      	movs	r3, #48	@ 0x30
 8010752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80108f0 <_svfiprintf_r+0x1e4>
 8010756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801075a:	f04f 0901 	mov.w	r9, #1
 801075e:	4623      	mov	r3, r4
 8010760:	469a      	mov	sl, r3
 8010762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010766:	b10a      	cbz	r2, 801076c <_svfiprintf_r+0x60>
 8010768:	2a25      	cmp	r2, #37	@ 0x25
 801076a:	d1f9      	bne.n	8010760 <_svfiprintf_r+0x54>
 801076c:	ebba 0b04 	subs.w	fp, sl, r4
 8010770:	d00b      	beq.n	801078a <_svfiprintf_r+0x7e>
 8010772:	465b      	mov	r3, fp
 8010774:	4622      	mov	r2, r4
 8010776:	4629      	mov	r1, r5
 8010778:	4638      	mov	r0, r7
 801077a:	f7ff ff6b 	bl	8010654 <__ssputs_r>
 801077e:	3001      	adds	r0, #1
 8010780:	f000 80a7 	beq.w	80108d2 <_svfiprintf_r+0x1c6>
 8010784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010786:	445a      	add	r2, fp
 8010788:	9209      	str	r2, [sp, #36]	@ 0x24
 801078a:	f89a 3000 	ldrb.w	r3, [sl]
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 809f 	beq.w	80108d2 <_svfiprintf_r+0x1c6>
 8010794:	2300      	movs	r3, #0
 8010796:	f04f 32ff 	mov.w	r2, #4294967295
 801079a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801079e:	f10a 0a01 	add.w	sl, sl, #1
 80107a2:	9304      	str	r3, [sp, #16]
 80107a4:	9307      	str	r3, [sp, #28]
 80107a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80107ac:	4654      	mov	r4, sl
 80107ae:	2205      	movs	r2, #5
 80107b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b4:	484e      	ldr	r0, [pc, #312]	@ (80108f0 <_svfiprintf_r+0x1e4>)
 80107b6:	f7ef fd2b 	bl	8000210 <memchr>
 80107ba:	9a04      	ldr	r2, [sp, #16]
 80107bc:	b9d8      	cbnz	r0, 80107f6 <_svfiprintf_r+0xea>
 80107be:	06d0      	lsls	r0, r2, #27
 80107c0:	bf44      	itt	mi
 80107c2:	2320      	movmi	r3, #32
 80107c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107c8:	0711      	lsls	r1, r2, #28
 80107ca:	bf44      	itt	mi
 80107cc:	232b      	movmi	r3, #43	@ 0x2b
 80107ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107d2:	f89a 3000 	ldrb.w	r3, [sl]
 80107d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80107d8:	d015      	beq.n	8010806 <_svfiprintf_r+0xfa>
 80107da:	9a07      	ldr	r2, [sp, #28]
 80107dc:	4654      	mov	r4, sl
 80107de:	2000      	movs	r0, #0
 80107e0:	f04f 0c0a 	mov.w	ip, #10
 80107e4:	4621      	mov	r1, r4
 80107e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107ea:	3b30      	subs	r3, #48	@ 0x30
 80107ec:	2b09      	cmp	r3, #9
 80107ee:	d94b      	bls.n	8010888 <_svfiprintf_r+0x17c>
 80107f0:	b1b0      	cbz	r0, 8010820 <_svfiprintf_r+0x114>
 80107f2:	9207      	str	r2, [sp, #28]
 80107f4:	e014      	b.n	8010820 <_svfiprintf_r+0x114>
 80107f6:	eba0 0308 	sub.w	r3, r0, r8
 80107fa:	fa09 f303 	lsl.w	r3, r9, r3
 80107fe:	4313      	orrs	r3, r2
 8010800:	9304      	str	r3, [sp, #16]
 8010802:	46a2      	mov	sl, r4
 8010804:	e7d2      	b.n	80107ac <_svfiprintf_r+0xa0>
 8010806:	9b03      	ldr	r3, [sp, #12]
 8010808:	1d19      	adds	r1, r3, #4
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	9103      	str	r1, [sp, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	bfbb      	ittet	lt
 8010812:	425b      	neglt	r3, r3
 8010814:	f042 0202 	orrlt.w	r2, r2, #2
 8010818:	9307      	strge	r3, [sp, #28]
 801081a:	9307      	strlt	r3, [sp, #28]
 801081c:	bfb8      	it	lt
 801081e:	9204      	strlt	r2, [sp, #16]
 8010820:	7823      	ldrb	r3, [r4, #0]
 8010822:	2b2e      	cmp	r3, #46	@ 0x2e
 8010824:	d10a      	bne.n	801083c <_svfiprintf_r+0x130>
 8010826:	7863      	ldrb	r3, [r4, #1]
 8010828:	2b2a      	cmp	r3, #42	@ 0x2a
 801082a:	d132      	bne.n	8010892 <_svfiprintf_r+0x186>
 801082c:	9b03      	ldr	r3, [sp, #12]
 801082e:	1d1a      	adds	r2, r3, #4
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	9203      	str	r2, [sp, #12]
 8010834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010838:	3402      	adds	r4, #2
 801083a:	9305      	str	r3, [sp, #20]
 801083c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010900 <_svfiprintf_r+0x1f4>
 8010840:	7821      	ldrb	r1, [r4, #0]
 8010842:	2203      	movs	r2, #3
 8010844:	4650      	mov	r0, sl
 8010846:	f7ef fce3 	bl	8000210 <memchr>
 801084a:	b138      	cbz	r0, 801085c <_svfiprintf_r+0x150>
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	eba0 000a 	sub.w	r0, r0, sl
 8010852:	2240      	movs	r2, #64	@ 0x40
 8010854:	4082      	lsls	r2, r0
 8010856:	4313      	orrs	r3, r2
 8010858:	3401      	adds	r4, #1
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010860:	4824      	ldr	r0, [pc, #144]	@ (80108f4 <_svfiprintf_r+0x1e8>)
 8010862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010866:	2206      	movs	r2, #6
 8010868:	f7ef fcd2 	bl	8000210 <memchr>
 801086c:	2800      	cmp	r0, #0
 801086e:	d036      	beq.n	80108de <_svfiprintf_r+0x1d2>
 8010870:	4b21      	ldr	r3, [pc, #132]	@ (80108f8 <_svfiprintf_r+0x1ec>)
 8010872:	bb1b      	cbnz	r3, 80108bc <_svfiprintf_r+0x1b0>
 8010874:	9b03      	ldr	r3, [sp, #12]
 8010876:	3307      	adds	r3, #7
 8010878:	f023 0307 	bic.w	r3, r3, #7
 801087c:	3308      	adds	r3, #8
 801087e:	9303      	str	r3, [sp, #12]
 8010880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010882:	4433      	add	r3, r6
 8010884:	9309      	str	r3, [sp, #36]	@ 0x24
 8010886:	e76a      	b.n	801075e <_svfiprintf_r+0x52>
 8010888:	fb0c 3202 	mla	r2, ip, r2, r3
 801088c:	460c      	mov	r4, r1
 801088e:	2001      	movs	r0, #1
 8010890:	e7a8      	b.n	80107e4 <_svfiprintf_r+0xd8>
 8010892:	2300      	movs	r3, #0
 8010894:	3401      	adds	r4, #1
 8010896:	9305      	str	r3, [sp, #20]
 8010898:	4619      	mov	r1, r3
 801089a:	f04f 0c0a 	mov.w	ip, #10
 801089e:	4620      	mov	r0, r4
 80108a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108a4:	3a30      	subs	r2, #48	@ 0x30
 80108a6:	2a09      	cmp	r2, #9
 80108a8:	d903      	bls.n	80108b2 <_svfiprintf_r+0x1a6>
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d0c6      	beq.n	801083c <_svfiprintf_r+0x130>
 80108ae:	9105      	str	r1, [sp, #20]
 80108b0:	e7c4      	b.n	801083c <_svfiprintf_r+0x130>
 80108b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80108b6:	4604      	mov	r4, r0
 80108b8:	2301      	movs	r3, #1
 80108ba:	e7f0      	b.n	801089e <_svfiprintf_r+0x192>
 80108bc:	ab03      	add	r3, sp, #12
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	462a      	mov	r2, r5
 80108c2:	4b0e      	ldr	r3, [pc, #56]	@ (80108fc <_svfiprintf_r+0x1f0>)
 80108c4:	a904      	add	r1, sp, #16
 80108c6:	4638      	mov	r0, r7
 80108c8:	f7fc fd04 	bl	800d2d4 <_printf_float>
 80108cc:	1c42      	adds	r2, r0, #1
 80108ce:	4606      	mov	r6, r0
 80108d0:	d1d6      	bne.n	8010880 <_svfiprintf_r+0x174>
 80108d2:	89ab      	ldrh	r3, [r5, #12]
 80108d4:	065b      	lsls	r3, r3, #25
 80108d6:	f53f af2d 	bmi.w	8010734 <_svfiprintf_r+0x28>
 80108da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108dc:	e72c      	b.n	8010738 <_svfiprintf_r+0x2c>
 80108de:	ab03      	add	r3, sp, #12
 80108e0:	9300      	str	r3, [sp, #0]
 80108e2:	462a      	mov	r2, r5
 80108e4:	4b05      	ldr	r3, [pc, #20]	@ (80108fc <_svfiprintf_r+0x1f0>)
 80108e6:	a904      	add	r1, sp, #16
 80108e8:	4638      	mov	r0, r7
 80108ea:	f7fc ff8b 	bl	800d804 <_printf_i>
 80108ee:	e7ed      	b.n	80108cc <_svfiprintf_r+0x1c0>
 80108f0:	08013809 	.word	0x08013809
 80108f4:	08013813 	.word	0x08013813
 80108f8:	0800d2d5 	.word	0x0800d2d5
 80108fc:	08010655 	.word	0x08010655
 8010900:	0801380f 	.word	0x0801380f

08010904 <_sungetc_r>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	1c4b      	adds	r3, r1, #1
 8010908:	4614      	mov	r4, r2
 801090a:	d103      	bne.n	8010914 <_sungetc_r+0x10>
 801090c:	f04f 35ff 	mov.w	r5, #4294967295
 8010910:	4628      	mov	r0, r5
 8010912:	bd38      	pop	{r3, r4, r5, pc}
 8010914:	8993      	ldrh	r3, [r2, #12]
 8010916:	f023 0320 	bic.w	r3, r3, #32
 801091a:	8193      	strh	r3, [r2, #12]
 801091c:	6853      	ldr	r3, [r2, #4]
 801091e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010920:	b2cd      	uxtb	r5, r1
 8010922:	b18a      	cbz	r2, 8010948 <_sungetc_r+0x44>
 8010924:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010926:	429a      	cmp	r2, r3
 8010928:	dd08      	ble.n	801093c <_sungetc_r+0x38>
 801092a:	6823      	ldr	r3, [r4, #0]
 801092c:	1e5a      	subs	r2, r3, #1
 801092e:	6022      	str	r2, [r4, #0]
 8010930:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010934:	6863      	ldr	r3, [r4, #4]
 8010936:	3301      	adds	r3, #1
 8010938:	6063      	str	r3, [r4, #4]
 801093a:	e7e9      	b.n	8010910 <_sungetc_r+0xc>
 801093c:	4621      	mov	r1, r4
 801093e:	f000 fbe0 	bl	8011102 <__submore>
 8010942:	2800      	cmp	r0, #0
 8010944:	d0f1      	beq.n	801092a <_sungetc_r+0x26>
 8010946:	e7e1      	b.n	801090c <_sungetc_r+0x8>
 8010948:	6921      	ldr	r1, [r4, #16]
 801094a:	6822      	ldr	r2, [r4, #0]
 801094c:	b141      	cbz	r1, 8010960 <_sungetc_r+0x5c>
 801094e:	4291      	cmp	r1, r2
 8010950:	d206      	bcs.n	8010960 <_sungetc_r+0x5c>
 8010952:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010956:	42a9      	cmp	r1, r5
 8010958:	d102      	bne.n	8010960 <_sungetc_r+0x5c>
 801095a:	3a01      	subs	r2, #1
 801095c:	6022      	str	r2, [r4, #0]
 801095e:	e7ea      	b.n	8010936 <_sungetc_r+0x32>
 8010960:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8010964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010968:	6363      	str	r3, [r4, #52]	@ 0x34
 801096a:	2303      	movs	r3, #3
 801096c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801096e:	4623      	mov	r3, r4
 8010970:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010974:	6023      	str	r3, [r4, #0]
 8010976:	2301      	movs	r3, #1
 8010978:	e7de      	b.n	8010938 <_sungetc_r+0x34>

0801097a <__ssrefill_r>:
 801097a:	b510      	push	{r4, lr}
 801097c:	460c      	mov	r4, r1
 801097e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010980:	b169      	cbz	r1, 801099e <__ssrefill_r+0x24>
 8010982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010986:	4299      	cmp	r1, r3
 8010988:	d001      	beq.n	801098e <__ssrefill_r+0x14>
 801098a:	f7fe fad9 	bl	800ef40 <_free_r>
 801098e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010990:	6063      	str	r3, [r4, #4]
 8010992:	2000      	movs	r0, #0
 8010994:	6360      	str	r0, [r4, #52]	@ 0x34
 8010996:	b113      	cbz	r3, 801099e <__ssrefill_r+0x24>
 8010998:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801099a:	6023      	str	r3, [r4, #0]
 801099c:	bd10      	pop	{r4, pc}
 801099e:	6923      	ldr	r3, [r4, #16]
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	2300      	movs	r3, #0
 80109a4:	6063      	str	r3, [r4, #4]
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	f043 0320 	orr.w	r3, r3, #32
 80109ac:	81a3      	strh	r3, [r4, #12]
 80109ae:	f04f 30ff 	mov.w	r0, #4294967295
 80109b2:	e7f3      	b.n	801099c <__ssrefill_r+0x22>

080109b4 <__ssvfiscanf_r>:
 80109b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b8:	460c      	mov	r4, r1
 80109ba:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80109be:	2100      	movs	r1, #0
 80109c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80109c4:	49a5      	ldr	r1, [pc, #660]	@ (8010c5c <__ssvfiscanf_r+0x2a8>)
 80109c6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80109c8:	f10d 0804 	add.w	r8, sp, #4
 80109cc:	49a4      	ldr	r1, [pc, #656]	@ (8010c60 <__ssvfiscanf_r+0x2ac>)
 80109ce:	4fa5      	ldr	r7, [pc, #660]	@ (8010c64 <__ssvfiscanf_r+0x2b0>)
 80109d0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80109d4:	4606      	mov	r6, r0
 80109d6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	7813      	ldrb	r3, [r2, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f000 8158 	beq.w	8010c92 <__ssvfiscanf_r+0x2de>
 80109e2:	5cf9      	ldrb	r1, [r7, r3]
 80109e4:	f011 0108 	ands.w	r1, r1, #8
 80109e8:	f102 0501 	add.w	r5, r2, #1
 80109ec:	d019      	beq.n	8010a22 <__ssvfiscanf_r+0x6e>
 80109ee:	6863      	ldr	r3, [r4, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	dd0f      	ble.n	8010a14 <__ssvfiscanf_r+0x60>
 80109f4:	6823      	ldr	r3, [r4, #0]
 80109f6:	781a      	ldrb	r2, [r3, #0]
 80109f8:	5cba      	ldrb	r2, [r7, r2]
 80109fa:	0712      	lsls	r2, r2, #28
 80109fc:	d401      	bmi.n	8010a02 <__ssvfiscanf_r+0x4e>
 80109fe:	462a      	mov	r2, r5
 8010a00:	e7eb      	b.n	80109da <__ssvfiscanf_r+0x26>
 8010a02:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010a04:	3201      	adds	r2, #1
 8010a06:	9245      	str	r2, [sp, #276]	@ 0x114
 8010a08:	6862      	ldr	r2, [r4, #4]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	3a01      	subs	r2, #1
 8010a0e:	6062      	str	r2, [r4, #4]
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	e7ec      	b.n	80109ee <__ssvfiscanf_r+0x3a>
 8010a14:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010a16:	4621      	mov	r1, r4
 8010a18:	4630      	mov	r0, r6
 8010a1a:	4798      	blx	r3
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d0e9      	beq.n	80109f4 <__ssvfiscanf_r+0x40>
 8010a20:	e7ed      	b.n	80109fe <__ssvfiscanf_r+0x4a>
 8010a22:	2b25      	cmp	r3, #37	@ 0x25
 8010a24:	d012      	beq.n	8010a4c <__ssvfiscanf_r+0x98>
 8010a26:	4699      	mov	r9, r3
 8010a28:	6863      	ldr	r3, [r4, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f340 8093 	ble.w	8010b56 <__ssvfiscanf_r+0x1a2>
 8010a30:	6822      	ldr	r2, [r4, #0]
 8010a32:	7813      	ldrb	r3, [r2, #0]
 8010a34:	454b      	cmp	r3, r9
 8010a36:	f040 812c 	bne.w	8010c92 <__ssvfiscanf_r+0x2de>
 8010a3a:	6863      	ldr	r3, [r4, #4]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	6063      	str	r3, [r4, #4]
 8010a40:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010a42:	3201      	adds	r2, #1
 8010a44:	3301      	adds	r3, #1
 8010a46:	6022      	str	r2, [r4, #0]
 8010a48:	9345      	str	r3, [sp, #276]	@ 0x114
 8010a4a:	e7d8      	b.n	80109fe <__ssvfiscanf_r+0x4a>
 8010a4c:	9141      	str	r1, [sp, #260]	@ 0x104
 8010a4e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010a50:	7853      	ldrb	r3, [r2, #1]
 8010a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a54:	bf02      	ittt	eq
 8010a56:	2310      	moveq	r3, #16
 8010a58:	1c95      	addeq	r5, r2, #2
 8010a5a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010a5c:	220a      	movs	r2, #10
 8010a5e:	46a9      	mov	r9, r5
 8010a60:	f819 1b01 	ldrb.w	r1, [r9], #1
 8010a64:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010a68:	2b09      	cmp	r3, #9
 8010a6a:	d91e      	bls.n	8010aaa <__ssvfiscanf_r+0xf6>
 8010a6c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8010c68 <__ssvfiscanf_r+0x2b4>
 8010a70:	2203      	movs	r2, #3
 8010a72:	4650      	mov	r0, sl
 8010a74:	f7ef fbcc 	bl	8000210 <memchr>
 8010a78:	b138      	cbz	r0, 8010a8a <__ssvfiscanf_r+0xd6>
 8010a7a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010a7c:	eba0 000a 	sub.w	r0, r0, sl
 8010a80:	2301      	movs	r3, #1
 8010a82:	4083      	lsls	r3, r0
 8010a84:	4313      	orrs	r3, r2
 8010a86:	9341      	str	r3, [sp, #260]	@ 0x104
 8010a88:	464d      	mov	r5, r9
 8010a8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010a8e:	2b78      	cmp	r3, #120	@ 0x78
 8010a90:	d806      	bhi.n	8010aa0 <__ssvfiscanf_r+0xec>
 8010a92:	2b57      	cmp	r3, #87	@ 0x57
 8010a94:	d810      	bhi.n	8010ab8 <__ssvfiscanf_r+0x104>
 8010a96:	2b25      	cmp	r3, #37	@ 0x25
 8010a98:	d0c5      	beq.n	8010a26 <__ssvfiscanf_r+0x72>
 8010a9a:	d857      	bhi.n	8010b4c <__ssvfiscanf_r+0x198>
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d065      	beq.n	8010b6c <__ssvfiscanf_r+0x1b8>
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010aa4:	230a      	movs	r3, #10
 8010aa6:	9342      	str	r3, [sp, #264]	@ 0x108
 8010aa8:	e078      	b.n	8010b9c <__ssvfiscanf_r+0x1e8>
 8010aaa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010aac:	fb02 1103 	mla	r1, r2, r3, r1
 8010ab0:	3930      	subs	r1, #48	@ 0x30
 8010ab2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010ab4:	464d      	mov	r5, r9
 8010ab6:	e7d2      	b.n	8010a5e <__ssvfiscanf_r+0xaa>
 8010ab8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010abc:	2a20      	cmp	r2, #32
 8010abe:	d8ef      	bhi.n	8010aa0 <__ssvfiscanf_r+0xec>
 8010ac0:	a101      	add	r1, pc, #4	@ (adr r1, 8010ac8 <__ssvfiscanf_r+0x114>)
 8010ac2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010ac6:	bf00      	nop
 8010ac8:	08010b7b 	.word	0x08010b7b
 8010acc:	08010aa1 	.word	0x08010aa1
 8010ad0:	08010aa1 	.word	0x08010aa1
 8010ad4:	08010bd5 	.word	0x08010bd5
 8010ad8:	08010aa1 	.word	0x08010aa1
 8010adc:	08010aa1 	.word	0x08010aa1
 8010ae0:	08010aa1 	.word	0x08010aa1
 8010ae4:	08010aa1 	.word	0x08010aa1
 8010ae8:	08010aa1 	.word	0x08010aa1
 8010aec:	08010aa1 	.word	0x08010aa1
 8010af0:	08010aa1 	.word	0x08010aa1
 8010af4:	08010beb 	.word	0x08010beb
 8010af8:	08010bd1 	.word	0x08010bd1
 8010afc:	08010b53 	.word	0x08010b53
 8010b00:	08010b53 	.word	0x08010b53
 8010b04:	08010b53 	.word	0x08010b53
 8010b08:	08010aa1 	.word	0x08010aa1
 8010b0c:	08010b8d 	.word	0x08010b8d
 8010b10:	08010aa1 	.word	0x08010aa1
 8010b14:	08010aa1 	.word	0x08010aa1
 8010b18:	08010aa1 	.word	0x08010aa1
 8010b1c:	08010aa1 	.word	0x08010aa1
 8010b20:	08010bfb 	.word	0x08010bfb
 8010b24:	08010b95 	.word	0x08010b95
 8010b28:	08010b73 	.word	0x08010b73
 8010b2c:	08010aa1 	.word	0x08010aa1
 8010b30:	08010aa1 	.word	0x08010aa1
 8010b34:	08010bf7 	.word	0x08010bf7
 8010b38:	08010aa1 	.word	0x08010aa1
 8010b3c:	08010bd1 	.word	0x08010bd1
 8010b40:	08010aa1 	.word	0x08010aa1
 8010b44:	08010aa1 	.word	0x08010aa1
 8010b48:	08010b7b 	.word	0x08010b7b
 8010b4c:	3b45      	subs	r3, #69	@ 0x45
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	d8a6      	bhi.n	8010aa0 <__ssvfiscanf_r+0xec>
 8010b52:	2305      	movs	r3, #5
 8010b54:	e021      	b.n	8010b9a <__ssvfiscanf_r+0x1e6>
 8010b56:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010b58:	4621      	mov	r1, r4
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	4798      	blx	r3
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f43f af66 	beq.w	8010a30 <__ssvfiscanf_r+0x7c>
 8010b64:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010b66:	2800      	cmp	r0, #0
 8010b68:	f040 808b 	bne.w	8010c82 <__ssvfiscanf_r+0x2ce>
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b70:	e08b      	b.n	8010c8a <__ssvfiscanf_r+0x2d6>
 8010b72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010b74:	f042 0220 	orr.w	r2, r2, #32
 8010b78:	9241      	str	r2, [sp, #260]	@ 0x104
 8010b7a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010b80:	9241      	str	r2, [sp, #260]	@ 0x104
 8010b82:	2210      	movs	r2, #16
 8010b84:	2b6e      	cmp	r3, #110	@ 0x6e
 8010b86:	9242      	str	r2, [sp, #264]	@ 0x108
 8010b88:	d902      	bls.n	8010b90 <__ssvfiscanf_r+0x1dc>
 8010b8a:	e005      	b.n	8010b98 <__ssvfiscanf_r+0x1e4>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010b90:	2303      	movs	r3, #3
 8010b92:	e002      	b.n	8010b9a <__ssvfiscanf_r+0x1e6>
 8010b94:	2308      	movs	r3, #8
 8010b96:	9342      	str	r3, [sp, #264]	@ 0x108
 8010b98:	2304      	movs	r3, #4
 8010b9a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010b9c:	6863      	ldr	r3, [r4, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	dd39      	ble.n	8010c16 <__ssvfiscanf_r+0x262>
 8010ba2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010ba4:	0659      	lsls	r1, r3, #25
 8010ba6:	d404      	bmi.n	8010bb2 <__ssvfiscanf_r+0x1fe>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	781a      	ldrb	r2, [r3, #0]
 8010bac:	5cba      	ldrb	r2, [r7, r2]
 8010bae:	0712      	lsls	r2, r2, #28
 8010bb0:	d438      	bmi.n	8010c24 <__ssvfiscanf_r+0x270>
 8010bb2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	dc47      	bgt.n	8010c48 <__ssvfiscanf_r+0x294>
 8010bb8:	466b      	mov	r3, sp
 8010bba:	4622      	mov	r2, r4
 8010bbc:	a941      	add	r1, sp, #260	@ 0x104
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f000 f86c 	bl	8010c9c <_scanf_chars>
 8010bc4:	2801      	cmp	r0, #1
 8010bc6:	d064      	beq.n	8010c92 <__ssvfiscanf_r+0x2de>
 8010bc8:	2802      	cmp	r0, #2
 8010bca:	f47f af18 	bne.w	80109fe <__ssvfiscanf_r+0x4a>
 8010bce:	e7c9      	b.n	8010b64 <__ssvfiscanf_r+0x1b0>
 8010bd0:	220a      	movs	r2, #10
 8010bd2:	e7d7      	b.n	8010b84 <__ssvfiscanf_r+0x1d0>
 8010bd4:	4629      	mov	r1, r5
 8010bd6:	4640      	mov	r0, r8
 8010bd8:	f000 fa5a 	bl	8011090 <__sccl>
 8010bdc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010be2:	9341      	str	r3, [sp, #260]	@ 0x104
 8010be4:	4605      	mov	r5, r0
 8010be6:	2301      	movs	r3, #1
 8010be8:	e7d7      	b.n	8010b9a <__ssvfiscanf_r+0x1e6>
 8010bea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bf0:	9341      	str	r3, [sp, #260]	@ 0x104
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	e7d1      	b.n	8010b9a <__ssvfiscanf_r+0x1e6>
 8010bf6:	2302      	movs	r3, #2
 8010bf8:	e7cf      	b.n	8010b9a <__ssvfiscanf_r+0x1e6>
 8010bfa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010bfc:	06c3      	lsls	r3, r0, #27
 8010bfe:	f53f aefe 	bmi.w	80109fe <__ssvfiscanf_r+0x4a>
 8010c02:	9b00      	ldr	r3, [sp, #0]
 8010c04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010c06:	1d19      	adds	r1, r3, #4
 8010c08:	9100      	str	r1, [sp, #0]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	07c0      	lsls	r0, r0, #31
 8010c0e:	bf4c      	ite	mi
 8010c10:	801a      	strhmi	r2, [r3, #0]
 8010c12:	601a      	strpl	r2, [r3, #0]
 8010c14:	e6f3      	b.n	80109fe <__ssvfiscanf_r+0x4a>
 8010c16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010c18:	4621      	mov	r1, r4
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	4798      	blx	r3
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d0bf      	beq.n	8010ba2 <__ssvfiscanf_r+0x1ee>
 8010c22:	e79f      	b.n	8010b64 <__ssvfiscanf_r+0x1b0>
 8010c24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010c26:	3201      	adds	r2, #1
 8010c28:	9245      	str	r2, [sp, #276]	@ 0x114
 8010c2a:	6862      	ldr	r2, [r4, #4]
 8010c2c:	3a01      	subs	r2, #1
 8010c2e:	2a00      	cmp	r2, #0
 8010c30:	6062      	str	r2, [r4, #4]
 8010c32:	dd02      	ble.n	8010c3a <__ssvfiscanf_r+0x286>
 8010c34:	3301      	adds	r3, #1
 8010c36:	6023      	str	r3, [r4, #0]
 8010c38:	e7b6      	b.n	8010ba8 <__ssvfiscanf_r+0x1f4>
 8010c3a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010c3c:	4621      	mov	r1, r4
 8010c3e:	4630      	mov	r0, r6
 8010c40:	4798      	blx	r3
 8010c42:	2800      	cmp	r0, #0
 8010c44:	d0b0      	beq.n	8010ba8 <__ssvfiscanf_r+0x1f4>
 8010c46:	e78d      	b.n	8010b64 <__ssvfiscanf_r+0x1b0>
 8010c48:	2b04      	cmp	r3, #4
 8010c4a:	dc0f      	bgt.n	8010c6c <__ssvfiscanf_r+0x2b8>
 8010c4c:	466b      	mov	r3, sp
 8010c4e:	4622      	mov	r2, r4
 8010c50:	a941      	add	r1, sp, #260	@ 0x104
 8010c52:	4630      	mov	r0, r6
 8010c54:	f000 f87c 	bl	8010d50 <_scanf_i>
 8010c58:	e7b4      	b.n	8010bc4 <__ssvfiscanf_r+0x210>
 8010c5a:	bf00      	nop
 8010c5c:	08010905 	.word	0x08010905
 8010c60:	0801097b 	.word	0x0801097b
 8010c64:	08013709 	.word	0x08013709
 8010c68:	0801380f 	.word	0x0801380f
 8010c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010c98 <__ssvfiscanf_r+0x2e4>)
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f43f aec5 	beq.w	80109fe <__ssvfiscanf_r+0x4a>
 8010c74:	466b      	mov	r3, sp
 8010c76:	4622      	mov	r2, r4
 8010c78:	a941      	add	r1, sp, #260	@ 0x104
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f7fc fee2 	bl	800da44 <_scanf_float>
 8010c80:	e7a0      	b.n	8010bc4 <__ssvfiscanf_r+0x210>
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	065b      	lsls	r3, r3, #25
 8010c86:	f53f af71 	bmi.w	8010b6c <__ssvfiscanf_r+0x1b8>
 8010c8a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c92:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010c94:	e7f9      	b.n	8010c8a <__ssvfiscanf_r+0x2d6>
 8010c96:	bf00      	nop
 8010c98:	0800da45 	.word	0x0800da45

08010c9c <_scanf_chars>:
 8010c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ca0:	4615      	mov	r5, r2
 8010ca2:	688a      	ldr	r2, [r1, #8]
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	b932      	cbnz	r2, 8010cb8 <_scanf_chars+0x1c>
 8010caa:	698a      	ldr	r2, [r1, #24]
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	bf14      	ite	ne
 8010cb0:	f04f 32ff 	movne.w	r2, #4294967295
 8010cb4:	2201      	moveq	r2, #1
 8010cb6:	608a      	str	r2, [r1, #8]
 8010cb8:	6822      	ldr	r2, [r4, #0]
 8010cba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8010d4c <_scanf_chars+0xb0>
 8010cbe:	06d1      	lsls	r1, r2, #27
 8010cc0:	bf5f      	itttt	pl
 8010cc2:	681a      	ldrpl	r2, [r3, #0]
 8010cc4:	1d11      	addpl	r1, r2, #4
 8010cc6:	6019      	strpl	r1, [r3, #0]
 8010cc8:	6816      	ldrpl	r6, [r2, #0]
 8010cca:	2700      	movs	r7, #0
 8010ccc:	69a0      	ldr	r0, [r4, #24]
 8010cce:	b188      	cbz	r0, 8010cf4 <_scanf_chars+0x58>
 8010cd0:	2801      	cmp	r0, #1
 8010cd2:	d107      	bne.n	8010ce4 <_scanf_chars+0x48>
 8010cd4:	682b      	ldr	r3, [r5, #0]
 8010cd6:	781a      	ldrb	r2, [r3, #0]
 8010cd8:	6963      	ldr	r3, [r4, #20]
 8010cda:	5c9b      	ldrb	r3, [r3, r2]
 8010cdc:	b953      	cbnz	r3, 8010cf4 <_scanf_chars+0x58>
 8010cde:	2f00      	cmp	r7, #0
 8010ce0:	d031      	beq.n	8010d46 <_scanf_chars+0xaa>
 8010ce2:	e022      	b.n	8010d2a <_scanf_chars+0x8e>
 8010ce4:	2802      	cmp	r0, #2
 8010ce6:	d120      	bne.n	8010d2a <_scanf_chars+0x8e>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010cf0:	071b      	lsls	r3, r3, #28
 8010cf2:	d41a      	bmi.n	8010d2a <_scanf_chars+0x8e>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	06da      	lsls	r2, r3, #27
 8010cf8:	bf5e      	ittt	pl
 8010cfa:	682b      	ldrpl	r3, [r5, #0]
 8010cfc:	781b      	ldrbpl	r3, [r3, #0]
 8010cfe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010d02:	682a      	ldr	r2, [r5, #0]
 8010d04:	686b      	ldr	r3, [r5, #4]
 8010d06:	3201      	adds	r2, #1
 8010d08:	602a      	str	r2, [r5, #0]
 8010d0a:	68a2      	ldr	r2, [r4, #8]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	3a01      	subs	r2, #1
 8010d10:	606b      	str	r3, [r5, #4]
 8010d12:	3701      	adds	r7, #1
 8010d14:	60a2      	str	r2, [r4, #8]
 8010d16:	b142      	cbz	r2, 8010d2a <_scanf_chars+0x8e>
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	dcd7      	bgt.n	8010ccc <_scanf_chars+0x30>
 8010d1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010d20:	4629      	mov	r1, r5
 8010d22:	4640      	mov	r0, r8
 8010d24:	4798      	blx	r3
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d0d0      	beq.n	8010ccc <_scanf_chars+0x30>
 8010d2a:	6823      	ldr	r3, [r4, #0]
 8010d2c:	f013 0310 	ands.w	r3, r3, #16
 8010d30:	d105      	bne.n	8010d3e <_scanf_chars+0xa2>
 8010d32:	68e2      	ldr	r2, [r4, #12]
 8010d34:	3201      	adds	r2, #1
 8010d36:	60e2      	str	r2, [r4, #12]
 8010d38:	69a2      	ldr	r2, [r4, #24]
 8010d3a:	b102      	cbz	r2, 8010d3e <_scanf_chars+0xa2>
 8010d3c:	7033      	strb	r3, [r6, #0]
 8010d3e:	6923      	ldr	r3, [r4, #16]
 8010d40:	443b      	add	r3, r7
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	2000      	movs	r0, #0
 8010d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d4a:	bf00      	nop
 8010d4c:	08013709 	.word	0x08013709

08010d50 <_scanf_i>:
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	4698      	mov	r8, r3
 8010d56:	4b74      	ldr	r3, [pc, #464]	@ (8010f28 <_scanf_i+0x1d8>)
 8010d58:	460c      	mov	r4, r1
 8010d5a:	4682      	mov	sl, r0
 8010d5c:	4616      	mov	r6, r2
 8010d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010d62:	b087      	sub	sp, #28
 8010d64:	ab03      	add	r3, sp, #12
 8010d66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d6a:	4b70      	ldr	r3, [pc, #448]	@ (8010f2c <_scanf_i+0x1dc>)
 8010d6c:	69a1      	ldr	r1, [r4, #24]
 8010d6e:	4a70      	ldr	r2, [pc, #448]	@ (8010f30 <_scanf_i+0x1e0>)
 8010d70:	2903      	cmp	r1, #3
 8010d72:	bf08      	it	eq
 8010d74:	461a      	moveq	r2, r3
 8010d76:	68a3      	ldr	r3, [r4, #8]
 8010d78:	9201      	str	r2, [sp, #4]
 8010d7a:	1e5a      	subs	r2, r3, #1
 8010d7c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010d80:	bf88      	it	hi
 8010d82:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010d86:	4627      	mov	r7, r4
 8010d88:	bf82      	ittt	hi
 8010d8a:	eb03 0905 	addhi.w	r9, r3, r5
 8010d8e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010d92:	60a3      	strhi	r3, [r4, #8]
 8010d94:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010d98:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010d9c:	bf98      	it	ls
 8010d9e:	f04f 0900 	movls.w	r9, #0
 8010da2:	6023      	str	r3, [r4, #0]
 8010da4:	463d      	mov	r5, r7
 8010da6:	f04f 0b00 	mov.w	fp, #0
 8010daa:	6831      	ldr	r1, [r6, #0]
 8010dac:	ab03      	add	r3, sp, #12
 8010dae:	7809      	ldrb	r1, [r1, #0]
 8010db0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010db4:	2202      	movs	r2, #2
 8010db6:	f7ef fa2b 	bl	8000210 <memchr>
 8010dba:	b328      	cbz	r0, 8010e08 <_scanf_i+0xb8>
 8010dbc:	f1bb 0f01 	cmp.w	fp, #1
 8010dc0:	d159      	bne.n	8010e76 <_scanf_i+0x126>
 8010dc2:	6862      	ldr	r2, [r4, #4]
 8010dc4:	b92a      	cbnz	r2, 8010dd2 <_scanf_i+0x82>
 8010dc6:	6822      	ldr	r2, [r4, #0]
 8010dc8:	2108      	movs	r1, #8
 8010dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010dce:	6061      	str	r1, [r4, #4]
 8010dd0:	6022      	str	r2, [r4, #0]
 8010dd2:	6822      	ldr	r2, [r4, #0]
 8010dd4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	68a2      	ldr	r2, [r4, #8]
 8010ddc:	1e51      	subs	r1, r2, #1
 8010dde:	60a1      	str	r1, [r4, #8]
 8010de0:	b192      	cbz	r2, 8010e08 <_scanf_i+0xb8>
 8010de2:	6832      	ldr	r2, [r6, #0]
 8010de4:	1c51      	adds	r1, r2, #1
 8010de6:	6031      	str	r1, [r6, #0]
 8010de8:	7812      	ldrb	r2, [r2, #0]
 8010dea:	f805 2b01 	strb.w	r2, [r5], #1
 8010dee:	6872      	ldr	r2, [r6, #4]
 8010df0:	3a01      	subs	r2, #1
 8010df2:	2a00      	cmp	r2, #0
 8010df4:	6072      	str	r2, [r6, #4]
 8010df6:	dc07      	bgt.n	8010e08 <_scanf_i+0xb8>
 8010df8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	4650      	mov	r0, sl
 8010e00:	4790      	blx	r2
 8010e02:	2800      	cmp	r0, #0
 8010e04:	f040 8085 	bne.w	8010f12 <_scanf_i+0x1c2>
 8010e08:	f10b 0b01 	add.w	fp, fp, #1
 8010e0c:	f1bb 0f03 	cmp.w	fp, #3
 8010e10:	d1cb      	bne.n	8010daa <_scanf_i+0x5a>
 8010e12:	6863      	ldr	r3, [r4, #4]
 8010e14:	b90b      	cbnz	r3, 8010e1a <_scanf_i+0xca>
 8010e16:	230a      	movs	r3, #10
 8010e18:	6063      	str	r3, [r4, #4]
 8010e1a:	6863      	ldr	r3, [r4, #4]
 8010e1c:	4945      	ldr	r1, [pc, #276]	@ (8010f34 <_scanf_i+0x1e4>)
 8010e1e:	6960      	ldr	r0, [r4, #20]
 8010e20:	1ac9      	subs	r1, r1, r3
 8010e22:	f000 f935 	bl	8011090 <__sccl>
 8010e26:	f04f 0b00 	mov.w	fp, #0
 8010e2a:	68a3      	ldr	r3, [r4, #8]
 8010e2c:	6822      	ldr	r2, [r4, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d03d      	beq.n	8010eae <_scanf_i+0x15e>
 8010e32:	6831      	ldr	r1, [r6, #0]
 8010e34:	6960      	ldr	r0, [r4, #20]
 8010e36:	f891 c000 	ldrb.w	ip, [r1]
 8010e3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d035      	beq.n	8010eae <_scanf_i+0x15e>
 8010e42:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010e46:	d124      	bne.n	8010e92 <_scanf_i+0x142>
 8010e48:	0510      	lsls	r0, r2, #20
 8010e4a:	d522      	bpl.n	8010e92 <_scanf_i+0x142>
 8010e4c:	f10b 0b01 	add.w	fp, fp, #1
 8010e50:	f1b9 0f00 	cmp.w	r9, #0
 8010e54:	d003      	beq.n	8010e5e <_scanf_i+0x10e>
 8010e56:	3301      	adds	r3, #1
 8010e58:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e5c:	60a3      	str	r3, [r4, #8]
 8010e5e:	6873      	ldr	r3, [r6, #4]
 8010e60:	3b01      	subs	r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	6073      	str	r3, [r6, #4]
 8010e66:	dd1b      	ble.n	8010ea0 <_scanf_i+0x150>
 8010e68:	6833      	ldr	r3, [r6, #0]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	6033      	str	r3, [r6, #0]
 8010e6e:	68a3      	ldr	r3, [r4, #8]
 8010e70:	3b01      	subs	r3, #1
 8010e72:	60a3      	str	r3, [r4, #8]
 8010e74:	e7d9      	b.n	8010e2a <_scanf_i+0xda>
 8010e76:	f1bb 0f02 	cmp.w	fp, #2
 8010e7a:	d1ae      	bne.n	8010dda <_scanf_i+0x8a>
 8010e7c:	6822      	ldr	r2, [r4, #0]
 8010e7e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010e82:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010e86:	d1bf      	bne.n	8010e08 <_scanf_i+0xb8>
 8010e88:	2110      	movs	r1, #16
 8010e8a:	6061      	str	r1, [r4, #4]
 8010e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010e90:	e7a2      	b.n	8010dd8 <_scanf_i+0x88>
 8010e92:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010e96:	6022      	str	r2, [r4, #0]
 8010e98:	780b      	ldrb	r3, [r1, #0]
 8010e9a:	f805 3b01 	strb.w	r3, [r5], #1
 8010e9e:	e7de      	b.n	8010e5e <_scanf_i+0x10e>
 8010ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4650      	mov	r0, sl
 8010ea8:	4798      	blx	r3
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	d0df      	beq.n	8010e6e <_scanf_i+0x11e>
 8010eae:	6823      	ldr	r3, [r4, #0]
 8010eb0:	05d9      	lsls	r1, r3, #23
 8010eb2:	d50d      	bpl.n	8010ed0 <_scanf_i+0x180>
 8010eb4:	42bd      	cmp	r5, r7
 8010eb6:	d909      	bls.n	8010ecc <_scanf_i+0x17c>
 8010eb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ec0:	4632      	mov	r2, r6
 8010ec2:	4650      	mov	r0, sl
 8010ec4:	4798      	blx	r3
 8010ec6:	f105 39ff 	add.w	r9, r5, #4294967295
 8010eca:	464d      	mov	r5, r9
 8010ecc:	42bd      	cmp	r5, r7
 8010ece:	d028      	beq.n	8010f22 <_scanf_i+0x1d2>
 8010ed0:	6822      	ldr	r2, [r4, #0]
 8010ed2:	f012 0210 	ands.w	r2, r2, #16
 8010ed6:	d113      	bne.n	8010f00 <_scanf_i+0x1b0>
 8010ed8:	702a      	strb	r2, [r5, #0]
 8010eda:	6863      	ldr	r3, [r4, #4]
 8010edc:	9e01      	ldr	r6, [sp, #4]
 8010ede:	4639      	mov	r1, r7
 8010ee0:	4650      	mov	r0, sl
 8010ee2:	47b0      	blx	r6
 8010ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ee8:	6821      	ldr	r1, [r4, #0]
 8010eea:	1d1a      	adds	r2, r3, #4
 8010eec:	f8c8 2000 	str.w	r2, [r8]
 8010ef0:	f011 0f20 	tst.w	r1, #32
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	d00f      	beq.n	8010f18 <_scanf_i+0x1c8>
 8010ef8:	6018      	str	r0, [r3, #0]
 8010efa:	68e3      	ldr	r3, [r4, #12]
 8010efc:	3301      	adds	r3, #1
 8010efe:	60e3      	str	r3, [r4, #12]
 8010f00:	6923      	ldr	r3, [r4, #16]
 8010f02:	1bed      	subs	r5, r5, r7
 8010f04:	445d      	add	r5, fp
 8010f06:	442b      	add	r3, r5
 8010f08:	6123      	str	r3, [r4, #16]
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	b007      	add	sp, #28
 8010f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f12:	f04f 0b00 	mov.w	fp, #0
 8010f16:	e7ca      	b.n	8010eae <_scanf_i+0x15e>
 8010f18:	07ca      	lsls	r2, r1, #31
 8010f1a:	bf4c      	ite	mi
 8010f1c:	8018      	strhmi	r0, [r3, #0]
 8010f1e:	6018      	strpl	r0, [r3, #0]
 8010f20:	e7eb      	b.n	8010efa <_scanf_i+0x1aa>
 8010f22:	2001      	movs	r0, #1
 8010f24:	e7f2      	b.n	8010f0c <_scanf_i+0x1bc>
 8010f26:	bf00      	nop
 8010f28:	08013464 	.word	0x08013464
 8010f2c:	08010651 	.word	0x08010651
 8010f30:	080119ed 	.word	0x080119ed
 8010f34:	0801382a 	.word	0x0801382a

08010f38 <__sflush_r>:
 8010f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f40:	0716      	lsls	r6, r2, #28
 8010f42:	4605      	mov	r5, r0
 8010f44:	460c      	mov	r4, r1
 8010f46:	d454      	bmi.n	8010ff2 <__sflush_r+0xba>
 8010f48:	684b      	ldr	r3, [r1, #4]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	dc02      	bgt.n	8010f54 <__sflush_r+0x1c>
 8010f4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	dd48      	ble.n	8010fe6 <__sflush_r+0xae>
 8010f54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010f56:	2e00      	cmp	r6, #0
 8010f58:	d045      	beq.n	8010fe6 <__sflush_r+0xae>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010f60:	682f      	ldr	r7, [r5, #0]
 8010f62:	6a21      	ldr	r1, [r4, #32]
 8010f64:	602b      	str	r3, [r5, #0]
 8010f66:	d030      	beq.n	8010fca <__sflush_r+0x92>
 8010f68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	0759      	lsls	r1, r3, #29
 8010f6e:	d505      	bpl.n	8010f7c <__sflush_r+0x44>
 8010f70:	6863      	ldr	r3, [r4, #4]
 8010f72:	1ad2      	subs	r2, r2, r3
 8010f74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010f76:	b10b      	cbz	r3, 8010f7c <__sflush_r+0x44>
 8010f78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010f7a:	1ad2      	subs	r2, r2, r3
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010f80:	6a21      	ldr	r1, [r4, #32]
 8010f82:	4628      	mov	r0, r5
 8010f84:	47b0      	blx	r6
 8010f86:	1c43      	adds	r3, r0, #1
 8010f88:	89a3      	ldrh	r3, [r4, #12]
 8010f8a:	d106      	bne.n	8010f9a <__sflush_r+0x62>
 8010f8c:	6829      	ldr	r1, [r5, #0]
 8010f8e:	291d      	cmp	r1, #29
 8010f90:	d82b      	bhi.n	8010fea <__sflush_r+0xb2>
 8010f92:	4a2a      	ldr	r2, [pc, #168]	@ (801103c <__sflush_r+0x104>)
 8010f94:	410a      	asrs	r2, r1
 8010f96:	07d6      	lsls	r6, r2, #31
 8010f98:	d427      	bmi.n	8010fea <__sflush_r+0xb2>
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	6062      	str	r2, [r4, #4]
 8010f9e:	04d9      	lsls	r1, r3, #19
 8010fa0:	6922      	ldr	r2, [r4, #16]
 8010fa2:	6022      	str	r2, [r4, #0]
 8010fa4:	d504      	bpl.n	8010fb0 <__sflush_r+0x78>
 8010fa6:	1c42      	adds	r2, r0, #1
 8010fa8:	d101      	bne.n	8010fae <__sflush_r+0x76>
 8010faa:	682b      	ldr	r3, [r5, #0]
 8010fac:	b903      	cbnz	r3, 8010fb0 <__sflush_r+0x78>
 8010fae:	6560      	str	r0, [r4, #84]	@ 0x54
 8010fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010fb2:	602f      	str	r7, [r5, #0]
 8010fb4:	b1b9      	cbz	r1, 8010fe6 <__sflush_r+0xae>
 8010fb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010fba:	4299      	cmp	r1, r3
 8010fbc:	d002      	beq.n	8010fc4 <__sflush_r+0x8c>
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	f7fd ffbe 	bl	800ef40 <_free_r>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8010fc8:	e00d      	b.n	8010fe6 <__sflush_r+0xae>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	4628      	mov	r0, r5
 8010fce:	47b0      	blx	r6
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	1c50      	adds	r0, r2, #1
 8010fd4:	d1c9      	bne.n	8010f6a <__sflush_r+0x32>
 8010fd6:	682b      	ldr	r3, [r5, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d0c6      	beq.n	8010f6a <__sflush_r+0x32>
 8010fdc:	2b1d      	cmp	r3, #29
 8010fde:	d001      	beq.n	8010fe4 <__sflush_r+0xac>
 8010fe0:	2b16      	cmp	r3, #22
 8010fe2:	d11e      	bne.n	8011022 <__sflush_r+0xea>
 8010fe4:	602f      	str	r7, [r5, #0]
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	e022      	b.n	8011030 <__sflush_r+0xf8>
 8010fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fee:	b21b      	sxth	r3, r3
 8010ff0:	e01b      	b.n	801102a <__sflush_r+0xf2>
 8010ff2:	690f      	ldr	r7, [r1, #16]
 8010ff4:	2f00      	cmp	r7, #0
 8010ff6:	d0f6      	beq.n	8010fe6 <__sflush_r+0xae>
 8010ff8:	0793      	lsls	r3, r2, #30
 8010ffa:	680e      	ldr	r6, [r1, #0]
 8010ffc:	bf08      	it	eq
 8010ffe:	694b      	ldreq	r3, [r1, #20]
 8011000:	600f      	str	r7, [r1, #0]
 8011002:	bf18      	it	ne
 8011004:	2300      	movne	r3, #0
 8011006:	eba6 0807 	sub.w	r8, r6, r7
 801100a:	608b      	str	r3, [r1, #8]
 801100c:	f1b8 0f00 	cmp.w	r8, #0
 8011010:	dde9      	ble.n	8010fe6 <__sflush_r+0xae>
 8011012:	6a21      	ldr	r1, [r4, #32]
 8011014:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011016:	4643      	mov	r3, r8
 8011018:	463a      	mov	r2, r7
 801101a:	4628      	mov	r0, r5
 801101c:	47b0      	blx	r6
 801101e:	2800      	cmp	r0, #0
 8011020:	dc08      	bgt.n	8011034 <__sflush_r+0xfc>
 8011022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801102a:	81a3      	strh	r3, [r4, #12]
 801102c:	f04f 30ff 	mov.w	r0, #4294967295
 8011030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011034:	4407      	add	r7, r0
 8011036:	eba8 0800 	sub.w	r8, r8, r0
 801103a:	e7e7      	b.n	801100c <__sflush_r+0xd4>
 801103c:	dfbffffe 	.word	0xdfbffffe

08011040 <_fflush_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	690b      	ldr	r3, [r1, #16]
 8011044:	4605      	mov	r5, r0
 8011046:	460c      	mov	r4, r1
 8011048:	b913      	cbnz	r3, 8011050 <_fflush_r+0x10>
 801104a:	2500      	movs	r5, #0
 801104c:	4628      	mov	r0, r5
 801104e:	bd38      	pop	{r3, r4, r5, pc}
 8011050:	b118      	cbz	r0, 801105a <_fflush_r+0x1a>
 8011052:	6a03      	ldr	r3, [r0, #32]
 8011054:	b90b      	cbnz	r3, 801105a <_fflush_r+0x1a>
 8011056:	f7fc ff95 	bl	800df84 <__sinit>
 801105a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d0f3      	beq.n	801104a <_fflush_r+0xa>
 8011062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011064:	07d0      	lsls	r0, r2, #31
 8011066:	d404      	bmi.n	8011072 <_fflush_r+0x32>
 8011068:	0599      	lsls	r1, r3, #22
 801106a:	d402      	bmi.n	8011072 <_fflush_r+0x32>
 801106c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801106e:	f7fd f902 	bl	800e276 <__retarget_lock_acquire_recursive>
 8011072:	4628      	mov	r0, r5
 8011074:	4621      	mov	r1, r4
 8011076:	f7ff ff5f 	bl	8010f38 <__sflush_r>
 801107a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801107c:	07da      	lsls	r2, r3, #31
 801107e:	4605      	mov	r5, r0
 8011080:	d4e4      	bmi.n	801104c <_fflush_r+0xc>
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	059b      	lsls	r3, r3, #22
 8011086:	d4e1      	bmi.n	801104c <_fflush_r+0xc>
 8011088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801108a:	f7fd f8f5 	bl	800e278 <__retarget_lock_release_recursive>
 801108e:	e7dd      	b.n	801104c <_fflush_r+0xc>

08011090 <__sccl>:
 8011090:	b570      	push	{r4, r5, r6, lr}
 8011092:	780b      	ldrb	r3, [r1, #0]
 8011094:	4604      	mov	r4, r0
 8011096:	2b5e      	cmp	r3, #94	@ 0x5e
 8011098:	bf0b      	itete	eq
 801109a:	784b      	ldrbeq	r3, [r1, #1]
 801109c:	1c4a      	addne	r2, r1, #1
 801109e:	1c8a      	addeq	r2, r1, #2
 80110a0:	2100      	movne	r1, #0
 80110a2:	bf08      	it	eq
 80110a4:	2101      	moveq	r1, #1
 80110a6:	3801      	subs	r0, #1
 80110a8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80110ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80110b0:	42a8      	cmp	r0, r5
 80110b2:	d1fb      	bne.n	80110ac <__sccl+0x1c>
 80110b4:	b90b      	cbnz	r3, 80110ba <__sccl+0x2a>
 80110b6:	1e50      	subs	r0, r2, #1
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
 80110ba:	f081 0101 	eor.w	r1, r1, #1
 80110be:	54e1      	strb	r1, [r4, r3]
 80110c0:	4610      	mov	r0, r2
 80110c2:	4602      	mov	r2, r0
 80110c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80110c8:	2d2d      	cmp	r5, #45	@ 0x2d
 80110ca:	d005      	beq.n	80110d8 <__sccl+0x48>
 80110cc:	2d5d      	cmp	r5, #93	@ 0x5d
 80110ce:	d016      	beq.n	80110fe <__sccl+0x6e>
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	d0f1      	beq.n	80110b8 <__sccl+0x28>
 80110d4:	462b      	mov	r3, r5
 80110d6:	e7f2      	b.n	80110be <__sccl+0x2e>
 80110d8:	7846      	ldrb	r6, [r0, #1]
 80110da:	2e5d      	cmp	r6, #93	@ 0x5d
 80110dc:	d0fa      	beq.n	80110d4 <__sccl+0x44>
 80110de:	42b3      	cmp	r3, r6
 80110e0:	dcf8      	bgt.n	80110d4 <__sccl+0x44>
 80110e2:	3002      	adds	r0, #2
 80110e4:	461a      	mov	r2, r3
 80110e6:	3201      	adds	r2, #1
 80110e8:	4296      	cmp	r6, r2
 80110ea:	54a1      	strb	r1, [r4, r2]
 80110ec:	dcfb      	bgt.n	80110e6 <__sccl+0x56>
 80110ee:	1af2      	subs	r2, r6, r3
 80110f0:	3a01      	subs	r2, #1
 80110f2:	1c5d      	adds	r5, r3, #1
 80110f4:	42b3      	cmp	r3, r6
 80110f6:	bfa8      	it	ge
 80110f8:	2200      	movge	r2, #0
 80110fa:	18ab      	adds	r3, r5, r2
 80110fc:	e7e1      	b.n	80110c2 <__sccl+0x32>
 80110fe:	4610      	mov	r0, r2
 8011100:	e7da      	b.n	80110b8 <__sccl+0x28>

08011102 <__submore>:
 8011102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011106:	460c      	mov	r4, r1
 8011108:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801110a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801110e:	4299      	cmp	r1, r3
 8011110:	d11d      	bne.n	801114e <__submore+0x4c>
 8011112:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011116:	f7fb ffb1 	bl	800d07c <_malloc_r>
 801111a:	b918      	cbnz	r0, 8011124 <__submore+0x22>
 801111c:	f04f 30ff 	mov.w	r0, #4294967295
 8011120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011128:	63a3      	str	r3, [r4, #56]	@ 0x38
 801112a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801112e:	6360      	str	r0, [r4, #52]	@ 0x34
 8011130:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011134:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011138:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801113c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011140:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011144:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011148:	6020      	str	r0, [r4, #0]
 801114a:	2000      	movs	r0, #0
 801114c:	e7e8      	b.n	8011120 <__submore+0x1e>
 801114e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011150:	0077      	lsls	r7, r6, #1
 8011152:	463a      	mov	r2, r7
 8011154:	f000 fbad 	bl	80118b2 <_realloc_r>
 8011158:	4605      	mov	r5, r0
 801115a:	2800      	cmp	r0, #0
 801115c:	d0de      	beq.n	801111c <__submore+0x1a>
 801115e:	eb00 0806 	add.w	r8, r0, r6
 8011162:	4601      	mov	r1, r0
 8011164:	4632      	mov	r2, r6
 8011166:	4640      	mov	r0, r8
 8011168:	f7fd f887 	bl	800e27a <memcpy>
 801116c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011170:	f8c4 8000 	str.w	r8, [r4]
 8011174:	e7e9      	b.n	801114a <__submore+0x48>

08011176 <memmove>:
 8011176:	4288      	cmp	r0, r1
 8011178:	b510      	push	{r4, lr}
 801117a:	eb01 0402 	add.w	r4, r1, r2
 801117e:	d902      	bls.n	8011186 <memmove+0x10>
 8011180:	4284      	cmp	r4, r0
 8011182:	4623      	mov	r3, r4
 8011184:	d807      	bhi.n	8011196 <memmove+0x20>
 8011186:	1e43      	subs	r3, r0, #1
 8011188:	42a1      	cmp	r1, r4
 801118a:	d008      	beq.n	801119e <memmove+0x28>
 801118c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011190:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011194:	e7f8      	b.n	8011188 <memmove+0x12>
 8011196:	4402      	add	r2, r0
 8011198:	4601      	mov	r1, r0
 801119a:	428a      	cmp	r2, r1
 801119c:	d100      	bne.n	80111a0 <memmove+0x2a>
 801119e:	bd10      	pop	{r4, pc}
 80111a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111a8:	e7f7      	b.n	801119a <memmove+0x24>

080111aa <strncmp>:
 80111aa:	b510      	push	{r4, lr}
 80111ac:	b16a      	cbz	r2, 80111ca <strncmp+0x20>
 80111ae:	3901      	subs	r1, #1
 80111b0:	1884      	adds	r4, r0, r2
 80111b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d103      	bne.n	80111c6 <strncmp+0x1c>
 80111be:	42a0      	cmp	r0, r4
 80111c0:	d001      	beq.n	80111c6 <strncmp+0x1c>
 80111c2:	2a00      	cmp	r2, #0
 80111c4:	d1f5      	bne.n	80111b2 <strncmp+0x8>
 80111c6:	1ad0      	subs	r0, r2, r3
 80111c8:	bd10      	pop	{r4, pc}
 80111ca:	4610      	mov	r0, r2
 80111cc:	e7fc      	b.n	80111c8 <strncmp+0x1e>
	...

080111d0 <nan>:
 80111d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80111d8 <nan+0x8>
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop
 80111d8:	00000000 	.word	0x00000000
 80111dc:	7ff80000 	.word	0x7ff80000

080111e0 <__assert_func>:
 80111e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e2:	4614      	mov	r4, r2
 80111e4:	461a      	mov	r2, r3
 80111e6:	4b09      	ldr	r3, [pc, #36]	@ (801120c <__assert_func+0x2c>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4605      	mov	r5, r0
 80111ec:	68d8      	ldr	r0, [r3, #12]
 80111ee:	b954      	cbnz	r4, 8011206 <__assert_func+0x26>
 80111f0:	4b07      	ldr	r3, [pc, #28]	@ (8011210 <__assert_func+0x30>)
 80111f2:	461c      	mov	r4, r3
 80111f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111f8:	9100      	str	r1, [sp, #0]
 80111fa:	462b      	mov	r3, r5
 80111fc:	4905      	ldr	r1, [pc, #20]	@ (8011214 <__assert_func+0x34>)
 80111fe:	f000 fc05 	bl	8011a0c <fiprintf>
 8011202:	f000 fc15 	bl	8011a30 <abort>
 8011206:	4b04      	ldr	r3, [pc, #16]	@ (8011218 <__assert_func+0x38>)
 8011208:	e7f4      	b.n	80111f4 <__assert_func+0x14>
 801120a:	bf00      	nop
 801120c:	2000004c 	.word	0x2000004c
 8011210:	08013878 	.word	0x08013878
 8011214:	0801384a 	.word	0x0801384a
 8011218:	0801383d 	.word	0x0801383d

0801121c <rshift>:
 801121c:	6903      	ldr	r3, [r0, #16]
 801121e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011226:	ea4f 1261 	mov.w	r2, r1, asr #5
 801122a:	f100 0414 	add.w	r4, r0, #20
 801122e:	dd45      	ble.n	80112bc <rshift+0xa0>
 8011230:	f011 011f 	ands.w	r1, r1, #31
 8011234:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011238:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801123c:	d10c      	bne.n	8011258 <rshift+0x3c>
 801123e:	f100 0710 	add.w	r7, r0, #16
 8011242:	4629      	mov	r1, r5
 8011244:	42b1      	cmp	r1, r6
 8011246:	d334      	bcc.n	80112b2 <rshift+0x96>
 8011248:	1a9b      	subs	r3, r3, r2
 801124a:	009b      	lsls	r3, r3, #2
 801124c:	1eea      	subs	r2, r5, #3
 801124e:	4296      	cmp	r6, r2
 8011250:	bf38      	it	cc
 8011252:	2300      	movcc	r3, #0
 8011254:	4423      	add	r3, r4
 8011256:	e015      	b.n	8011284 <rshift+0x68>
 8011258:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801125c:	f1c1 0820 	rsb	r8, r1, #32
 8011260:	40cf      	lsrs	r7, r1
 8011262:	f105 0e04 	add.w	lr, r5, #4
 8011266:	46a1      	mov	r9, r4
 8011268:	4576      	cmp	r6, lr
 801126a:	46f4      	mov	ip, lr
 801126c:	d815      	bhi.n	801129a <rshift+0x7e>
 801126e:	1a9a      	subs	r2, r3, r2
 8011270:	0092      	lsls	r2, r2, #2
 8011272:	3a04      	subs	r2, #4
 8011274:	3501      	adds	r5, #1
 8011276:	42ae      	cmp	r6, r5
 8011278:	bf38      	it	cc
 801127a:	2200      	movcc	r2, #0
 801127c:	18a3      	adds	r3, r4, r2
 801127e:	50a7      	str	r7, [r4, r2]
 8011280:	b107      	cbz	r7, 8011284 <rshift+0x68>
 8011282:	3304      	adds	r3, #4
 8011284:	1b1a      	subs	r2, r3, r4
 8011286:	42a3      	cmp	r3, r4
 8011288:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801128c:	bf08      	it	eq
 801128e:	2300      	moveq	r3, #0
 8011290:	6102      	str	r2, [r0, #16]
 8011292:	bf08      	it	eq
 8011294:	6143      	streq	r3, [r0, #20]
 8011296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801129a:	f8dc c000 	ldr.w	ip, [ip]
 801129e:	fa0c fc08 	lsl.w	ip, ip, r8
 80112a2:	ea4c 0707 	orr.w	r7, ip, r7
 80112a6:	f849 7b04 	str.w	r7, [r9], #4
 80112aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112ae:	40cf      	lsrs	r7, r1
 80112b0:	e7da      	b.n	8011268 <rshift+0x4c>
 80112b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80112b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80112ba:	e7c3      	b.n	8011244 <rshift+0x28>
 80112bc:	4623      	mov	r3, r4
 80112be:	e7e1      	b.n	8011284 <rshift+0x68>

080112c0 <__hexdig_fun>:
 80112c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80112c4:	2b09      	cmp	r3, #9
 80112c6:	d802      	bhi.n	80112ce <__hexdig_fun+0xe>
 80112c8:	3820      	subs	r0, #32
 80112ca:	b2c0      	uxtb	r0, r0
 80112cc:	4770      	bx	lr
 80112ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80112d2:	2b05      	cmp	r3, #5
 80112d4:	d801      	bhi.n	80112da <__hexdig_fun+0x1a>
 80112d6:	3847      	subs	r0, #71	@ 0x47
 80112d8:	e7f7      	b.n	80112ca <__hexdig_fun+0xa>
 80112da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80112de:	2b05      	cmp	r3, #5
 80112e0:	d801      	bhi.n	80112e6 <__hexdig_fun+0x26>
 80112e2:	3827      	subs	r0, #39	@ 0x27
 80112e4:	e7f1      	b.n	80112ca <__hexdig_fun+0xa>
 80112e6:	2000      	movs	r0, #0
 80112e8:	4770      	bx	lr
	...

080112ec <__gethex>:
 80112ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f0:	b085      	sub	sp, #20
 80112f2:	468a      	mov	sl, r1
 80112f4:	9302      	str	r3, [sp, #8]
 80112f6:	680b      	ldr	r3, [r1, #0]
 80112f8:	9001      	str	r0, [sp, #4]
 80112fa:	4690      	mov	r8, r2
 80112fc:	1c9c      	adds	r4, r3, #2
 80112fe:	46a1      	mov	r9, r4
 8011300:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011304:	2830      	cmp	r0, #48	@ 0x30
 8011306:	d0fa      	beq.n	80112fe <__gethex+0x12>
 8011308:	eba9 0303 	sub.w	r3, r9, r3
 801130c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011310:	f7ff ffd6 	bl	80112c0 <__hexdig_fun>
 8011314:	4605      	mov	r5, r0
 8011316:	2800      	cmp	r0, #0
 8011318:	d168      	bne.n	80113ec <__gethex+0x100>
 801131a:	49a0      	ldr	r1, [pc, #640]	@ (801159c <__gethex+0x2b0>)
 801131c:	2201      	movs	r2, #1
 801131e:	4648      	mov	r0, r9
 8011320:	f7ff ff43 	bl	80111aa <strncmp>
 8011324:	4607      	mov	r7, r0
 8011326:	2800      	cmp	r0, #0
 8011328:	d167      	bne.n	80113fa <__gethex+0x10e>
 801132a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801132e:	4626      	mov	r6, r4
 8011330:	f7ff ffc6 	bl	80112c0 <__hexdig_fun>
 8011334:	2800      	cmp	r0, #0
 8011336:	d062      	beq.n	80113fe <__gethex+0x112>
 8011338:	4623      	mov	r3, r4
 801133a:	7818      	ldrb	r0, [r3, #0]
 801133c:	2830      	cmp	r0, #48	@ 0x30
 801133e:	4699      	mov	r9, r3
 8011340:	f103 0301 	add.w	r3, r3, #1
 8011344:	d0f9      	beq.n	801133a <__gethex+0x4e>
 8011346:	f7ff ffbb 	bl	80112c0 <__hexdig_fun>
 801134a:	fab0 f580 	clz	r5, r0
 801134e:	096d      	lsrs	r5, r5, #5
 8011350:	f04f 0b01 	mov.w	fp, #1
 8011354:	464a      	mov	r2, r9
 8011356:	4616      	mov	r6, r2
 8011358:	3201      	adds	r2, #1
 801135a:	7830      	ldrb	r0, [r6, #0]
 801135c:	f7ff ffb0 	bl	80112c0 <__hexdig_fun>
 8011360:	2800      	cmp	r0, #0
 8011362:	d1f8      	bne.n	8011356 <__gethex+0x6a>
 8011364:	498d      	ldr	r1, [pc, #564]	@ (801159c <__gethex+0x2b0>)
 8011366:	2201      	movs	r2, #1
 8011368:	4630      	mov	r0, r6
 801136a:	f7ff ff1e 	bl	80111aa <strncmp>
 801136e:	2800      	cmp	r0, #0
 8011370:	d13f      	bne.n	80113f2 <__gethex+0x106>
 8011372:	b944      	cbnz	r4, 8011386 <__gethex+0x9a>
 8011374:	1c74      	adds	r4, r6, #1
 8011376:	4622      	mov	r2, r4
 8011378:	4616      	mov	r6, r2
 801137a:	3201      	adds	r2, #1
 801137c:	7830      	ldrb	r0, [r6, #0]
 801137e:	f7ff ff9f 	bl	80112c0 <__hexdig_fun>
 8011382:	2800      	cmp	r0, #0
 8011384:	d1f8      	bne.n	8011378 <__gethex+0x8c>
 8011386:	1ba4      	subs	r4, r4, r6
 8011388:	00a7      	lsls	r7, r4, #2
 801138a:	7833      	ldrb	r3, [r6, #0]
 801138c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011390:	2b50      	cmp	r3, #80	@ 0x50
 8011392:	d13e      	bne.n	8011412 <__gethex+0x126>
 8011394:	7873      	ldrb	r3, [r6, #1]
 8011396:	2b2b      	cmp	r3, #43	@ 0x2b
 8011398:	d033      	beq.n	8011402 <__gethex+0x116>
 801139a:	2b2d      	cmp	r3, #45	@ 0x2d
 801139c:	d034      	beq.n	8011408 <__gethex+0x11c>
 801139e:	1c71      	adds	r1, r6, #1
 80113a0:	2400      	movs	r4, #0
 80113a2:	7808      	ldrb	r0, [r1, #0]
 80113a4:	f7ff ff8c 	bl	80112c0 <__hexdig_fun>
 80113a8:	1e43      	subs	r3, r0, #1
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b18      	cmp	r3, #24
 80113ae:	d830      	bhi.n	8011412 <__gethex+0x126>
 80113b0:	f1a0 0210 	sub.w	r2, r0, #16
 80113b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80113b8:	f7ff ff82 	bl	80112c0 <__hexdig_fun>
 80113bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80113c0:	fa5f fc8c 	uxtb.w	ip, ip
 80113c4:	f1bc 0f18 	cmp.w	ip, #24
 80113c8:	f04f 030a 	mov.w	r3, #10
 80113cc:	d91e      	bls.n	801140c <__gethex+0x120>
 80113ce:	b104      	cbz	r4, 80113d2 <__gethex+0xe6>
 80113d0:	4252      	negs	r2, r2
 80113d2:	4417      	add	r7, r2
 80113d4:	f8ca 1000 	str.w	r1, [sl]
 80113d8:	b1ed      	cbz	r5, 8011416 <__gethex+0x12a>
 80113da:	f1bb 0f00 	cmp.w	fp, #0
 80113de:	bf0c      	ite	eq
 80113e0:	2506      	moveq	r5, #6
 80113e2:	2500      	movne	r5, #0
 80113e4:	4628      	mov	r0, r5
 80113e6:	b005      	add	sp, #20
 80113e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ec:	2500      	movs	r5, #0
 80113ee:	462c      	mov	r4, r5
 80113f0:	e7b0      	b.n	8011354 <__gethex+0x68>
 80113f2:	2c00      	cmp	r4, #0
 80113f4:	d1c7      	bne.n	8011386 <__gethex+0x9a>
 80113f6:	4627      	mov	r7, r4
 80113f8:	e7c7      	b.n	801138a <__gethex+0x9e>
 80113fa:	464e      	mov	r6, r9
 80113fc:	462f      	mov	r7, r5
 80113fe:	2501      	movs	r5, #1
 8011400:	e7c3      	b.n	801138a <__gethex+0x9e>
 8011402:	2400      	movs	r4, #0
 8011404:	1cb1      	adds	r1, r6, #2
 8011406:	e7cc      	b.n	80113a2 <__gethex+0xb6>
 8011408:	2401      	movs	r4, #1
 801140a:	e7fb      	b.n	8011404 <__gethex+0x118>
 801140c:	fb03 0002 	mla	r0, r3, r2, r0
 8011410:	e7ce      	b.n	80113b0 <__gethex+0xc4>
 8011412:	4631      	mov	r1, r6
 8011414:	e7de      	b.n	80113d4 <__gethex+0xe8>
 8011416:	eba6 0309 	sub.w	r3, r6, r9
 801141a:	3b01      	subs	r3, #1
 801141c:	4629      	mov	r1, r5
 801141e:	2b07      	cmp	r3, #7
 8011420:	dc0a      	bgt.n	8011438 <__gethex+0x14c>
 8011422:	9801      	ldr	r0, [sp, #4]
 8011424:	f7fd fdde 	bl	800efe4 <_Balloc>
 8011428:	4604      	mov	r4, r0
 801142a:	b940      	cbnz	r0, 801143e <__gethex+0x152>
 801142c:	4b5c      	ldr	r3, [pc, #368]	@ (80115a0 <__gethex+0x2b4>)
 801142e:	4602      	mov	r2, r0
 8011430:	21e4      	movs	r1, #228	@ 0xe4
 8011432:	485c      	ldr	r0, [pc, #368]	@ (80115a4 <__gethex+0x2b8>)
 8011434:	f7ff fed4 	bl	80111e0 <__assert_func>
 8011438:	3101      	adds	r1, #1
 801143a:	105b      	asrs	r3, r3, #1
 801143c:	e7ef      	b.n	801141e <__gethex+0x132>
 801143e:	f100 0a14 	add.w	sl, r0, #20
 8011442:	2300      	movs	r3, #0
 8011444:	4655      	mov	r5, sl
 8011446:	469b      	mov	fp, r3
 8011448:	45b1      	cmp	r9, r6
 801144a:	d337      	bcc.n	80114bc <__gethex+0x1d0>
 801144c:	f845 bb04 	str.w	fp, [r5], #4
 8011450:	eba5 050a 	sub.w	r5, r5, sl
 8011454:	10ad      	asrs	r5, r5, #2
 8011456:	6125      	str	r5, [r4, #16]
 8011458:	4658      	mov	r0, fp
 801145a:	f7fd feb5 	bl	800f1c8 <__hi0bits>
 801145e:	016d      	lsls	r5, r5, #5
 8011460:	f8d8 6000 	ldr.w	r6, [r8]
 8011464:	1a2d      	subs	r5, r5, r0
 8011466:	42b5      	cmp	r5, r6
 8011468:	dd54      	ble.n	8011514 <__gethex+0x228>
 801146a:	1bad      	subs	r5, r5, r6
 801146c:	4629      	mov	r1, r5
 801146e:	4620      	mov	r0, r4
 8011470:	f7fe fa49 	bl	800f906 <__any_on>
 8011474:	4681      	mov	r9, r0
 8011476:	b178      	cbz	r0, 8011498 <__gethex+0x1ac>
 8011478:	1e6b      	subs	r3, r5, #1
 801147a:	1159      	asrs	r1, r3, #5
 801147c:	f003 021f 	and.w	r2, r3, #31
 8011480:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011484:	f04f 0901 	mov.w	r9, #1
 8011488:	fa09 f202 	lsl.w	r2, r9, r2
 801148c:	420a      	tst	r2, r1
 801148e:	d003      	beq.n	8011498 <__gethex+0x1ac>
 8011490:	454b      	cmp	r3, r9
 8011492:	dc36      	bgt.n	8011502 <__gethex+0x216>
 8011494:	f04f 0902 	mov.w	r9, #2
 8011498:	4629      	mov	r1, r5
 801149a:	4620      	mov	r0, r4
 801149c:	f7ff febe 	bl	801121c <rshift>
 80114a0:	442f      	add	r7, r5
 80114a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114a6:	42bb      	cmp	r3, r7
 80114a8:	da42      	bge.n	8011530 <__gethex+0x244>
 80114aa:	9801      	ldr	r0, [sp, #4]
 80114ac:	4621      	mov	r1, r4
 80114ae:	f7fd fdd9 	bl	800f064 <_Bfree>
 80114b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114b4:	2300      	movs	r3, #0
 80114b6:	6013      	str	r3, [r2, #0]
 80114b8:	25a3      	movs	r5, #163	@ 0xa3
 80114ba:	e793      	b.n	80113e4 <__gethex+0xf8>
 80114bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80114c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80114c2:	d012      	beq.n	80114ea <__gethex+0x1fe>
 80114c4:	2b20      	cmp	r3, #32
 80114c6:	d104      	bne.n	80114d2 <__gethex+0x1e6>
 80114c8:	f845 bb04 	str.w	fp, [r5], #4
 80114cc:	f04f 0b00 	mov.w	fp, #0
 80114d0:	465b      	mov	r3, fp
 80114d2:	7830      	ldrb	r0, [r6, #0]
 80114d4:	9303      	str	r3, [sp, #12]
 80114d6:	f7ff fef3 	bl	80112c0 <__hexdig_fun>
 80114da:	9b03      	ldr	r3, [sp, #12]
 80114dc:	f000 000f 	and.w	r0, r0, #15
 80114e0:	4098      	lsls	r0, r3
 80114e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80114e6:	3304      	adds	r3, #4
 80114e8:	e7ae      	b.n	8011448 <__gethex+0x15c>
 80114ea:	45b1      	cmp	r9, r6
 80114ec:	d8ea      	bhi.n	80114c4 <__gethex+0x1d8>
 80114ee:	492b      	ldr	r1, [pc, #172]	@ (801159c <__gethex+0x2b0>)
 80114f0:	9303      	str	r3, [sp, #12]
 80114f2:	2201      	movs	r2, #1
 80114f4:	4630      	mov	r0, r6
 80114f6:	f7ff fe58 	bl	80111aa <strncmp>
 80114fa:	9b03      	ldr	r3, [sp, #12]
 80114fc:	2800      	cmp	r0, #0
 80114fe:	d1e1      	bne.n	80114c4 <__gethex+0x1d8>
 8011500:	e7a2      	b.n	8011448 <__gethex+0x15c>
 8011502:	1ea9      	subs	r1, r5, #2
 8011504:	4620      	mov	r0, r4
 8011506:	f7fe f9fe 	bl	800f906 <__any_on>
 801150a:	2800      	cmp	r0, #0
 801150c:	d0c2      	beq.n	8011494 <__gethex+0x1a8>
 801150e:	f04f 0903 	mov.w	r9, #3
 8011512:	e7c1      	b.n	8011498 <__gethex+0x1ac>
 8011514:	da09      	bge.n	801152a <__gethex+0x23e>
 8011516:	1b75      	subs	r5, r6, r5
 8011518:	4621      	mov	r1, r4
 801151a:	9801      	ldr	r0, [sp, #4]
 801151c:	462a      	mov	r2, r5
 801151e:	f7fd ffb9 	bl	800f494 <__lshift>
 8011522:	1b7f      	subs	r7, r7, r5
 8011524:	4604      	mov	r4, r0
 8011526:	f100 0a14 	add.w	sl, r0, #20
 801152a:	f04f 0900 	mov.w	r9, #0
 801152e:	e7b8      	b.n	80114a2 <__gethex+0x1b6>
 8011530:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011534:	42bd      	cmp	r5, r7
 8011536:	dd6f      	ble.n	8011618 <__gethex+0x32c>
 8011538:	1bed      	subs	r5, r5, r7
 801153a:	42ae      	cmp	r6, r5
 801153c:	dc34      	bgt.n	80115a8 <__gethex+0x2bc>
 801153e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011542:	2b02      	cmp	r3, #2
 8011544:	d022      	beq.n	801158c <__gethex+0x2a0>
 8011546:	2b03      	cmp	r3, #3
 8011548:	d024      	beq.n	8011594 <__gethex+0x2a8>
 801154a:	2b01      	cmp	r3, #1
 801154c:	d115      	bne.n	801157a <__gethex+0x28e>
 801154e:	42ae      	cmp	r6, r5
 8011550:	d113      	bne.n	801157a <__gethex+0x28e>
 8011552:	2e01      	cmp	r6, #1
 8011554:	d10b      	bne.n	801156e <__gethex+0x282>
 8011556:	9a02      	ldr	r2, [sp, #8]
 8011558:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801155c:	6013      	str	r3, [r2, #0]
 801155e:	2301      	movs	r3, #1
 8011560:	6123      	str	r3, [r4, #16]
 8011562:	f8ca 3000 	str.w	r3, [sl]
 8011566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011568:	2562      	movs	r5, #98	@ 0x62
 801156a:	601c      	str	r4, [r3, #0]
 801156c:	e73a      	b.n	80113e4 <__gethex+0xf8>
 801156e:	1e71      	subs	r1, r6, #1
 8011570:	4620      	mov	r0, r4
 8011572:	f7fe f9c8 	bl	800f906 <__any_on>
 8011576:	2800      	cmp	r0, #0
 8011578:	d1ed      	bne.n	8011556 <__gethex+0x26a>
 801157a:	9801      	ldr	r0, [sp, #4]
 801157c:	4621      	mov	r1, r4
 801157e:	f7fd fd71 	bl	800f064 <_Bfree>
 8011582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011584:	2300      	movs	r3, #0
 8011586:	6013      	str	r3, [r2, #0]
 8011588:	2550      	movs	r5, #80	@ 0x50
 801158a:	e72b      	b.n	80113e4 <__gethex+0xf8>
 801158c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1f3      	bne.n	801157a <__gethex+0x28e>
 8011592:	e7e0      	b.n	8011556 <__gethex+0x26a>
 8011594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011596:	2b00      	cmp	r3, #0
 8011598:	d1dd      	bne.n	8011556 <__gethex+0x26a>
 801159a:	e7ee      	b.n	801157a <__gethex+0x28e>
 801159c:	080136b0 	.word	0x080136b0
 80115a0:	08013543 	.word	0x08013543
 80115a4:	08013879 	.word	0x08013879
 80115a8:	1e6f      	subs	r7, r5, #1
 80115aa:	f1b9 0f00 	cmp.w	r9, #0
 80115ae:	d130      	bne.n	8011612 <__gethex+0x326>
 80115b0:	b127      	cbz	r7, 80115bc <__gethex+0x2d0>
 80115b2:	4639      	mov	r1, r7
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7fe f9a6 	bl	800f906 <__any_on>
 80115ba:	4681      	mov	r9, r0
 80115bc:	117a      	asrs	r2, r7, #5
 80115be:	2301      	movs	r3, #1
 80115c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80115c4:	f007 071f 	and.w	r7, r7, #31
 80115c8:	40bb      	lsls	r3, r7
 80115ca:	4213      	tst	r3, r2
 80115cc:	4629      	mov	r1, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	bf18      	it	ne
 80115d2:	f049 0902 	orrne.w	r9, r9, #2
 80115d6:	f7ff fe21 	bl	801121c <rshift>
 80115da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80115de:	1b76      	subs	r6, r6, r5
 80115e0:	2502      	movs	r5, #2
 80115e2:	f1b9 0f00 	cmp.w	r9, #0
 80115e6:	d047      	beq.n	8011678 <__gethex+0x38c>
 80115e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115ec:	2b02      	cmp	r3, #2
 80115ee:	d015      	beq.n	801161c <__gethex+0x330>
 80115f0:	2b03      	cmp	r3, #3
 80115f2:	d017      	beq.n	8011624 <__gethex+0x338>
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d109      	bne.n	801160c <__gethex+0x320>
 80115f8:	f019 0f02 	tst.w	r9, #2
 80115fc:	d006      	beq.n	801160c <__gethex+0x320>
 80115fe:	f8da 3000 	ldr.w	r3, [sl]
 8011602:	ea49 0903 	orr.w	r9, r9, r3
 8011606:	f019 0f01 	tst.w	r9, #1
 801160a:	d10e      	bne.n	801162a <__gethex+0x33e>
 801160c:	f045 0510 	orr.w	r5, r5, #16
 8011610:	e032      	b.n	8011678 <__gethex+0x38c>
 8011612:	f04f 0901 	mov.w	r9, #1
 8011616:	e7d1      	b.n	80115bc <__gethex+0x2d0>
 8011618:	2501      	movs	r5, #1
 801161a:	e7e2      	b.n	80115e2 <__gethex+0x2f6>
 801161c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801161e:	f1c3 0301 	rsb	r3, r3, #1
 8011622:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011626:	2b00      	cmp	r3, #0
 8011628:	d0f0      	beq.n	801160c <__gethex+0x320>
 801162a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801162e:	f104 0314 	add.w	r3, r4, #20
 8011632:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011636:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801163a:	f04f 0c00 	mov.w	ip, #0
 801163e:	4618      	mov	r0, r3
 8011640:	f853 2b04 	ldr.w	r2, [r3], #4
 8011644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011648:	d01b      	beq.n	8011682 <__gethex+0x396>
 801164a:	3201      	adds	r2, #1
 801164c:	6002      	str	r2, [r0, #0]
 801164e:	2d02      	cmp	r5, #2
 8011650:	f104 0314 	add.w	r3, r4, #20
 8011654:	d13c      	bne.n	80116d0 <__gethex+0x3e4>
 8011656:	f8d8 2000 	ldr.w	r2, [r8]
 801165a:	3a01      	subs	r2, #1
 801165c:	42b2      	cmp	r2, r6
 801165e:	d109      	bne.n	8011674 <__gethex+0x388>
 8011660:	1171      	asrs	r1, r6, #5
 8011662:	2201      	movs	r2, #1
 8011664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011668:	f006 061f 	and.w	r6, r6, #31
 801166c:	fa02 f606 	lsl.w	r6, r2, r6
 8011670:	421e      	tst	r6, r3
 8011672:	d13a      	bne.n	80116ea <__gethex+0x3fe>
 8011674:	f045 0520 	orr.w	r5, r5, #32
 8011678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801167a:	601c      	str	r4, [r3, #0]
 801167c:	9b02      	ldr	r3, [sp, #8]
 801167e:	601f      	str	r7, [r3, #0]
 8011680:	e6b0      	b.n	80113e4 <__gethex+0xf8>
 8011682:	4299      	cmp	r1, r3
 8011684:	f843 cc04 	str.w	ip, [r3, #-4]
 8011688:	d8d9      	bhi.n	801163e <__gethex+0x352>
 801168a:	68a3      	ldr	r3, [r4, #8]
 801168c:	459b      	cmp	fp, r3
 801168e:	db17      	blt.n	80116c0 <__gethex+0x3d4>
 8011690:	6861      	ldr	r1, [r4, #4]
 8011692:	9801      	ldr	r0, [sp, #4]
 8011694:	3101      	adds	r1, #1
 8011696:	f7fd fca5 	bl	800efe4 <_Balloc>
 801169a:	4681      	mov	r9, r0
 801169c:	b918      	cbnz	r0, 80116a6 <__gethex+0x3ba>
 801169e:	4b1a      	ldr	r3, [pc, #104]	@ (8011708 <__gethex+0x41c>)
 80116a0:	4602      	mov	r2, r0
 80116a2:	2184      	movs	r1, #132	@ 0x84
 80116a4:	e6c5      	b.n	8011432 <__gethex+0x146>
 80116a6:	6922      	ldr	r2, [r4, #16]
 80116a8:	3202      	adds	r2, #2
 80116aa:	f104 010c 	add.w	r1, r4, #12
 80116ae:	0092      	lsls	r2, r2, #2
 80116b0:	300c      	adds	r0, #12
 80116b2:	f7fc fde2 	bl	800e27a <memcpy>
 80116b6:	4621      	mov	r1, r4
 80116b8:	9801      	ldr	r0, [sp, #4]
 80116ba:	f7fd fcd3 	bl	800f064 <_Bfree>
 80116be:	464c      	mov	r4, r9
 80116c0:	6923      	ldr	r3, [r4, #16]
 80116c2:	1c5a      	adds	r2, r3, #1
 80116c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116c8:	6122      	str	r2, [r4, #16]
 80116ca:	2201      	movs	r2, #1
 80116cc:	615a      	str	r2, [r3, #20]
 80116ce:	e7be      	b.n	801164e <__gethex+0x362>
 80116d0:	6922      	ldr	r2, [r4, #16]
 80116d2:	455a      	cmp	r2, fp
 80116d4:	dd0b      	ble.n	80116ee <__gethex+0x402>
 80116d6:	2101      	movs	r1, #1
 80116d8:	4620      	mov	r0, r4
 80116da:	f7ff fd9f 	bl	801121c <rshift>
 80116de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116e2:	3701      	adds	r7, #1
 80116e4:	42bb      	cmp	r3, r7
 80116e6:	f6ff aee0 	blt.w	80114aa <__gethex+0x1be>
 80116ea:	2501      	movs	r5, #1
 80116ec:	e7c2      	b.n	8011674 <__gethex+0x388>
 80116ee:	f016 061f 	ands.w	r6, r6, #31
 80116f2:	d0fa      	beq.n	80116ea <__gethex+0x3fe>
 80116f4:	4453      	add	r3, sl
 80116f6:	f1c6 0620 	rsb	r6, r6, #32
 80116fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80116fe:	f7fd fd63 	bl	800f1c8 <__hi0bits>
 8011702:	42b0      	cmp	r0, r6
 8011704:	dbe7      	blt.n	80116d6 <__gethex+0x3ea>
 8011706:	e7f0      	b.n	80116ea <__gethex+0x3fe>
 8011708:	08013543 	.word	0x08013543

0801170c <L_shift>:
 801170c:	f1c2 0208 	rsb	r2, r2, #8
 8011710:	0092      	lsls	r2, r2, #2
 8011712:	b570      	push	{r4, r5, r6, lr}
 8011714:	f1c2 0620 	rsb	r6, r2, #32
 8011718:	6843      	ldr	r3, [r0, #4]
 801171a:	6804      	ldr	r4, [r0, #0]
 801171c:	fa03 f506 	lsl.w	r5, r3, r6
 8011720:	432c      	orrs	r4, r5
 8011722:	40d3      	lsrs	r3, r2
 8011724:	6004      	str	r4, [r0, #0]
 8011726:	f840 3f04 	str.w	r3, [r0, #4]!
 801172a:	4288      	cmp	r0, r1
 801172c:	d3f4      	bcc.n	8011718 <L_shift+0xc>
 801172e:	bd70      	pop	{r4, r5, r6, pc}

08011730 <__match>:
 8011730:	b530      	push	{r4, r5, lr}
 8011732:	6803      	ldr	r3, [r0, #0]
 8011734:	3301      	adds	r3, #1
 8011736:	f811 4b01 	ldrb.w	r4, [r1], #1
 801173a:	b914      	cbnz	r4, 8011742 <__match+0x12>
 801173c:	6003      	str	r3, [r0, #0]
 801173e:	2001      	movs	r0, #1
 8011740:	bd30      	pop	{r4, r5, pc}
 8011742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011746:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801174a:	2d19      	cmp	r5, #25
 801174c:	bf98      	it	ls
 801174e:	3220      	addls	r2, #32
 8011750:	42a2      	cmp	r2, r4
 8011752:	d0f0      	beq.n	8011736 <__match+0x6>
 8011754:	2000      	movs	r0, #0
 8011756:	e7f3      	b.n	8011740 <__match+0x10>

08011758 <__hexnan>:
 8011758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	680b      	ldr	r3, [r1, #0]
 801175e:	6801      	ldr	r1, [r0, #0]
 8011760:	115e      	asrs	r6, r3, #5
 8011762:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011766:	f013 031f 	ands.w	r3, r3, #31
 801176a:	b087      	sub	sp, #28
 801176c:	bf18      	it	ne
 801176e:	3604      	addne	r6, #4
 8011770:	2500      	movs	r5, #0
 8011772:	1f37      	subs	r7, r6, #4
 8011774:	4682      	mov	sl, r0
 8011776:	4690      	mov	r8, r2
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	f846 5c04 	str.w	r5, [r6, #-4]
 801177e:	46b9      	mov	r9, r7
 8011780:	463c      	mov	r4, r7
 8011782:	9502      	str	r5, [sp, #8]
 8011784:	46ab      	mov	fp, r5
 8011786:	784a      	ldrb	r2, [r1, #1]
 8011788:	1c4b      	adds	r3, r1, #1
 801178a:	9303      	str	r3, [sp, #12]
 801178c:	b342      	cbz	r2, 80117e0 <__hexnan+0x88>
 801178e:	4610      	mov	r0, r2
 8011790:	9105      	str	r1, [sp, #20]
 8011792:	9204      	str	r2, [sp, #16]
 8011794:	f7ff fd94 	bl	80112c0 <__hexdig_fun>
 8011798:	2800      	cmp	r0, #0
 801179a:	d151      	bne.n	8011840 <__hexnan+0xe8>
 801179c:	9a04      	ldr	r2, [sp, #16]
 801179e:	9905      	ldr	r1, [sp, #20]
 80117a0:	2a20      	cmp	r2, #32
 80117a2:	d818      	bhi.n	80117d6 <__hexnan+0x7e>
 80117a4:	9b02      	ldr	r3, [sp, #8]
 80117a6:	459b      	cmp	fp, r3
 80117a8:	dd13      	ble.n	80117d2 <__hexnan+0x7a>
 80117aa:	454c      	cmp	r4, r9
 80117ac:	d206      	bcs.n	80117bc <__hexnan+0x64>
 80117ae:	2d07      	cmp	r5, #7
 80117b0:	dc04      	bgt.n	80117bc <__hexnan+0x64>
 80117b2:	462a      	mov	r2, r5
 80117b4:	4649      	mov	r1, r9
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7ff ffa8 	bl	801170c <L_shift>
 80117bc:	4544      	cmp	r4, r8
 80117be:	d952      	bls.n	8011866 <__hexnan+0x10e>
 80117c0:	2300      	movs	r3, #0
 80117c2:	f1a4 0904 	sub.w	r9, r4, #4
 80117c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80117ca:	f8cd b008 	str.w	fp, [sp, #8]
 80117ce:	464c      	mov	r4, r9
 80117d0:	461d      	mov	r5, r3
 80117d2:	9903      	ldr	r1, [sp, #12]
 80117d4:	e7d7      	b.n	8011786 <__hexnan+0x2e>
 80117d6:	2a29      	cmp	r2, #41	@ 0x29
 80117d8:	d157      	bne.n	801188a <__hexnan+0x132>
 80117da:	3102      	adds	r1, #2
 80117dc:	f8ca 1000 	str.w	r1, [sl]
 80117e0:	f1bb 0f00 	cmp.w	fp, #0
 80117e4:	d051      	beq.n	801188a <__hexnan+0x132>
 80117e6:	454c      	cmp	r4, r9
 80117e8:	d206      	bcs.n	80117f8 <__hexnan+0xa0>
 80117ea:	2d07      	cmp	r5, #7
 80117ec:	dc04      	bgt.n	80117f8 <__hexnan+0xa0>
 80117ee:	462a      	mov	r2, r5
 80117f0:	4649      	mov	r1, r9
 80117f2:	4620      	mov	r0, r4
 80117f4:	f7ff ff8a 	bl	801170c <L_shift>
 80117f8:	4544      	cmp	r4, r8
 80117fa:	d936      	bls.n	801186a <__hexnan+0x112>
 80117fc:	f1a8 0204 	sub.w	r2, r8, #4
 8011800:	4623      	mov	r3, r4
 8011802:	f853 1b04 	ldr.w	r1, [r3], #4
 8011806:	f842 1f04 	str.w	r1, [r2, #4]!
 801180a:	429f      	cmp	r7, r3
 801180c:	d2f9      	bcs.n	8011802 <__hexnan+0xaa>
 801180e:	1b3b      	subs	r3, r7, r4
 8011810:	f023 0303 	bic.w	r3, r3, #3
 8011814:	3304      	adds	r3, #4
 8011816:	3401      	adds	r4, #1
 8011818:	3e03      	subs	r6, #3
 801181a:	42b4      	cmp	r4, r6
 801181c:	bf88      	it	hi
 801181e:	2304      	movhi	r3, #4
 8011820:	4443      	add	r3, r8
 8011822:	2200      	movs	r2, #0
 8011824:	f843 2b04 	str.w	r2, [r3], #4
 8011828:	429f      	cmp	r7, r3
 801182a:	d2fb      	bcs.n	8011824 <__hexnan+0xcc>
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	b91b      	cbnz	r3, 8011838 <__hexnan+0xe0>
 8011830:	4547      	cmp	r7, r8
 8011832:	d128      	bne.n	8011886 <__hexnan+0x12e>
 8011834:	2301      	movs	r3, #1
 8011836:	603b      	str	r3, [r7, #0]
 8011838:	2005      	movs	r0, #5
 801183a:	b007      	add	sp, #28
 801183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011840:	3501      	adds	r5, #1
 8011842:	2d08      	cmp	r5, #8
 8011844:	f10b 0b01 	add.w	fp, fp, #1
 8011848:	dd06      	ble.n	8011858 <__hexnan+0x100>
 801184a:	4544      	cmp	r4, r8
 801184c:	d9c1      	bls.n	80117d2 <__hexnan+0x7a>
 801184e:	2300      	movs	r3, #0
 8011850:	f844 3c04 	str.w	r3, [r4, #-4]
 8011854:	2501      	movs	r5, #1
 8011856:	3c04      	subs	r4, #4
 8011858:	6822      	ldr	r2, [r4, #0]
 801185a:	f000 000f 	and.w	r0, r0, #15
 801185e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011862:	6020      	str	r0, [r4, #0]
 8011864:	e7b5      	b.n	80117d2 <__hexnan+0x7a>
 8011866:	2508      	movs	r5, #8
 8011868:	e7b3      	b.n	80117d2 <__hexnan+0x7a>
 801186a:	9b01      	ldr	r3, [sp, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d0dd      	beq.n	801182c <__hexnan+0xd4>
 8011870:	f1c3 0320 	rsb	r3, r3, #32
 8011874:	f04f 32ff 	mov.w	r2, #4294967295
 8011878:	40da      	lsrs	r2, r3
 801187a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801187e:	4013      	ands	r3, r2
 8011880:	f846 3c04 	str.w	r3, [r6, #-4]
 8011884:	e7d2      	b.n	801182c <__hexnan+0xd4>
 8011886:	3f04      	subs	r7, #4
 8011888:	e7d0      	b.n	801182c <__hexnan+0xd4>
 801188a:	2004      	movs	r0, #4
 801188c:	e7d5      	b.n	801183a <__hexnan+0xe2>

0801188e <__ascii_mbtowc>:
 801188e:	b082      	sub	sp, #8
 8011890:	b901      	cbnz	r1, 8011894 <__ascii_mbtowc+0x6>
 8011892:	a901      	add	r1, sp, #4
 8011894:	b142      	cbz	r2, 80118a8 <__ascii_mbtowc+0x1a>
 8011896:	b14b      	cbz	r3, 80118ac <__ascii_mbtowc+0x1e>
 8011898:	7813      	ldrb	r3, [r2, #0]
 801189a:	600b      	str	r3, [r1, #0]
 801189c:	7812      	ldrb	r2, [r2, #0]
 801189e:	1e10      	subs	r0, r2, #0
 80118a0:	bf18      	it	ne
 80118a2:	2001      	movne	r0, #1
 80118a4:	b002      	add	sp, #8
 80118a6:	4770      	bx	lr
 80118a8:	4610      	mov	r0, r2
 80118aa:	e7fb      	b.n	80118a4 <__ascii_mbtowc+0x16>
 80118ac:	f06f 0001 	mvn.w	r0, #1
 80118b0:	e7f8      	b.n	80118a4 <__ascii_mbtowc+0x16>

080118b2 <_realloc_r>:
 80118b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b6:	4680      	mov	r8, r0
 80118b8:	4615      	mov	r5, r2
 80118ba:	460c      	mov	r4, r1
 80118bc:	b921      	cbnz	r1, 80118c8 <_realloc_r+0x16>
 80118be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118c2:	4611      	mov	r1, r2
 80118c4:	f7fb bbda 	b.w	800d07c <_malloc_r>
 80118c8:	b92a      	cbnz	r2, 80118d6 <_realloc_r+0x24>
 80118ca:	f7fd fb39 	bl	800ef40 <_free_r>
 80118ce:	2400      	movs	r4, #0
 80118d0:	4620      	mov	r0, r4
 80118d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d6:	f000 f8b2 	bl	8011a3e <_malloc_usable_size_r>
 80118da:	4285      	cmp	r5, r0
 80118dc:	4606      	mov	r6, r0
 80118de:	d802      	bhi.n	80118e6 <_realloc_r+0x34>
 80118e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80118e4:	d8f4      	bhi.n	80118d0 <_realloc_r+0x1e>
 80118e6:	4629      	mov	r1, r5
 80118e8:	4640      	mov	r0, r8
 80118ea:	f7fb fbc7 	bl	800d07c <_malloc_r>
 80118ee:	4607      	mov	r7, r0
 80118f0:	2800      	cmp	r0, #0
 80118f2:	d0ec      	beq.n	80118ce <_realloc_r+0x1c>
 80118f4:	42b5      	cmp	r5, r6
 80118f6:	462a      	mov	r2, r5
 80118f8:	4621      	mov	r1, r4
 80118fa:	bf28      	it	cs
 80118fc:	4632      	movcs	r2, r6
 80118fe:	f7fc fcbc 	bl	800e27a <memcpy>
 8011902:	4621      	mov	r1, r4
 8011904:	4640      	mov	r0, r8
 8011906:	f7fd fb1b 	bl	800ef40 <_free_r>
 801190a:	463c      	mov	r4, r7
 801190c:	e7e0      	b.n	80118d0 <_realloc_r+0x1e>
	...

08011910 <_strtoul_l.constprop.0>:
 8011910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011914:	4e34      	ldr	r6, [pc, #208]	@ (80119e8 <_strtoul_l.constprop.0+0xd8>)
 8011916:	4686      	mov	lr, r0
 8011918:	460d      	mov	r5, r1
 801191a:	4628      	mov	r0, r5
 801191c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011920:	5d37      	ldrb	r7, [r6, r4]
 8011922:	f017 0708 	ands.w	r7, r7, #8
 8011926:	d1f8      	bne.n	801191a <_strtoul_l.constprop.0+0xa>
 8011928:	2c2d      	cmp	r4, #45	@ 0x2d
 801192a:	d12f      	bne.n	801198c <_strtoul_l.constprop.0+0x7c>
 801192c:	782c      	ldrb	r4, [r5, #0]
 801192e:	2701      	movs	r7, #1
 8011930:	1c85      	adds	r5, r0, #2
 8011932:	f033 0010 	bics.w	r0, r3, #16
 8011936:	d109      	bne.n	801194c <_strtoul_l.constprop.0+0x3c>
 8011938:	2c30      	cmp	r4, #48	@ 0x30
 801193a:	d12c      	bne.n	8011996 <_strtoul_l.constprop.0+0x86>
 801193c:	7828      	ldrb	r0, [r5, #0]
 801193e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011942:	2858      	cmp	r0, #88	@ 0x58
 8011944:	d127      	bne.n	8011996 <_strtoul_l.constprop.0+0x86>
 8011946:	786c      	ldrb	r4, [r5, #1]
 8011948:	2310      	movs	r3, #16
 801194a:	3502      	adds	r5, #2
 801194c:	f04f 38ff 	mov.w	r8, #4294967295
 8011950:	2600      	movs	r6, #0
 8011952:	fbb8 f8f3 	udiv	r8, r8, r3
 8011956:	fb03 f908 	mul.w	r9, r3, r8
 801195a:	ea6f 0909 	mvn.w	r9, r9
 801195e:	4630      	mov	r0, r6
 8011960:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011964:	f1bc 0f09 	cmp.w	ip, #9
 8011968:	d81c      	bhi.n	80119a4 <_strtoul_l.constprop.0+0x94>
 801196a:	4664      	mov	r4, ip
 801196c:	42a3      	cmp	r3, r4
 801196e:	dd2a      	ble.n	80119c6 <_strtoul_l.constprop.0+0xb6>
 8011970:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011974:	d007      	beq.n	8011986 <_strtoul_l.constprop.0+0x76>
 8011976:	4580      	cmp	r8, r0
 8011978:	d322      	bcc.n	80119c0 <_strtoul_l.constprop.0+0xb0>
 801197a:	d101      	bne.n	8011980 <_strtoul_l.constprop.0+0x70>
 801197c:	45a1      	cmp	r9, r4
 801197e:	db1f      	blt.n	80119c0 <_strtoul_l.constprop.0+0xb0>
 8011980:	fb00 4003 	mla	r0, r0, r3, r4
 8011984:	2601      	movs	r6, #1
 8011986:	f815 4b01 	ldrb.w	r4, [r5], #1
 801198a:	e7e9      	b.n	8011960 <_strtoul_l.constprop.0+0x50>
 801198c:	2c2b      	cmp	r4, #43	@ 0x2b
 801198e:	bf04      	itt	eq
 8011990:	782c      	ldrbeq	r4, [r5, #0]
 8011992:	1c85      	addeq	r5, r0, #2
 8011994:	e7cd      	b.n	8011932 <_strtoul_l.constprop.0+0x22>
 8011996:	2b00      	cmp	r3, #0
 8011998:	d1d8      	bne.n	801194c <_strtoul_l.constprop.0+0x3c>
 801199a:	2c30      	cmp	r4, #48	@ 0x30
 801199c:	bf0c      	ite	eq
 801199e:	2308      	moveq	r3, #8
 80119a0:	230a      	movne	r3, #10
 80119a2:	e7d3      	b.n	801194c <_strtoul_l.constprop.0+0x3c>
 80119a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80119a8:	f1bc 0f19 	cmp.w	ip, #25
 80119ac:	d801      	bhi.n	80119b2 <_strtoul_l.constprop.0+0xa2>
 80119ae:	3c37      	subs	r4, #55	@ 0x37
 80119b0:	e7dc      	b.n	801196c <_strtoul_l.constprop.0+0x5c>
 80119b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80119b6:	f1bc 0f19 	cmp.w	ip, #25
 80119ba:	d804      	bhi.n	80119c6 <_strtoul_l.constprop.0+0xb6>
 80119bc:	3c57      	subs	r4, #87	@ 0x57
 80119be:	e7d5      	b.n	801196c <_strtoul_l.constprop.0+0x5c>
 80119c0:	f04f 36ff 	mov.w	r6, #4294967295
 80119c4:	e7df      	b.n	8011986 <_strtoul_l.constprop.0+0x76>
 80119c6:	1c73      	adds	r3, r6, #1
 80119c8:	d106      	bne.n	80119d8 <_strtoul_l.constprop.0+0xc8>
 80119ca:	2322      	movs	r3, #34	@ 0x22
 80119cc:	f8ce 3000 	str.w	r3, [lr]
 80119d0:	4630      	mov	r0, r6
 80119d2:	b932      	cbnz	r2, 80119e2 <_strtoul_l.constprop.0+0xd2>
 80119d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119d8:	b107      	cbz	r7, 80119dc <_strtoul_l.constprop.0+0xcc>
 80119da:	4240      	negs	r0, r0
 80119dc:	2a00      	cmp	r2, #0
 80119de:	d0f9      	beq.n	80119d4 <_strtoul_l.constprop.0+0xc4>
 80119e0:	b106      	cbz	r6, 80119e4 <_strtoul_l.constprop.0+0xd4>
 80119e2:	1e69      	subs	r1, r5, #1
 80119e4:	6011      	str	r1, [r2, #0]
 80119e6:	e7f5      	b.n	80119d4 <_strtoul_l.constprop.0+0xc4>
 80119e8:	08013709 	.word	0x08013709

080119ec <_strtoul_r>:
 80119ec:	f7ff bf90 	b.w	8011910 <_strtoul_l.constprop.0>

080119f0 <__ascii_wctomb>:
 80119f0:	4603      	mov	r3, r0
 80119f2:	4608      	mov	r0, r1
 80119f4:	b141      	cbz	r1, 8011a08 <__ascii_wctomb+0x18>
 80119f6:	2aff      	cmp	r2, #255	@ 0xff
 80119f8:	d904      	bls.n	8011a04 <__ascii_wctomb+0x14>
 80119fa:	228a      	movs	r2, #138	@ 0x8a
 80119fc:	601a      	str	r2, [r3, #0]
 80119fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011a02:	4770      	bx	lr
 8011a04:	700a      	strb	r2, [r1, #0]
 8011a06:	2001      	movs	r0, #1
 8011a08:	4770      	bx	lr
	...

08011a0c <fiprintf>:
 8011a0c:	b40e      	push	{r1, r2, r3}
 8011a0e:	b503      	push	{r0, r1, lr}
 8011a10:	4601      	mov	r1, r0
 8011a12:	ab03      	add	r3, sp, #12
 8011a14:	4805      	ldr	r0, [pc, #20]	@ (8011a2c <fiprintf+0x20>)
 8011a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a1a:	6800      	ldr	r0, [r0, #0]
 8011a1c:	9301      	str	r3, [sp, #4]
 8011a1e:	f000 f83f 	bl	8011aa0 <_vfiprintf_r>
 8011a22:	b002      	add	sp, #8
 8011a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a28:	b003      	add	sp, #12
 8011a2a:	4770      	bx	lr
 8011a2c:	2000004c 	.word	0x2000004c

08011a30 <abort>:
 8011a30:	b508      	push	{r3, lr}
 8011a32:	2006      	movs	r0, #6
 8011a34:	f000 fa08 	bl	8011e48 <raise>
 8011a38:	2001      	movs	r0, #1
 8011a3a:	f7f4 f8b1 	bl	8005ba0 <_exit>

08011a3e <_malloc_usable_size_r>:
 8011a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a42:	1f18      	subs	r0, r3, #4
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	bfbc      	itt	lt
 8011a48:	580b      	ldrlt	r3, [r1, r0]
 8011a4a:	18c0      	addlt	r0, r0, r3
 8011a4c:	4770      	bx	lr

08011a4e <__sfputc_r>:
 8011a4e:	6893      	ldr	r3, [r2, #8]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	b410      	push	{r4}
 8011a56:	6093      	str	r3, [r2, #8]
 8011a58:	da08      	bge.n	8011a6c <__sfputc_r+0x1e>
 8011a5a:	6994      	ldr	r4, [r2, #24]
 8011a5c:	42a3      	cmp	r3, r4
 8011a5e:	db01      	blt.n	8011a64 <__sfputc_r+0x16>
 8011a60:	290a      	cmp	r1, #10
 8011a62:	d103      	bne.n	8011a6c <__sfputc_r+0x1e>
 8011a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a68:	f000 b932 	b.w	8011cd0 <__swbuf_r>
 8011a6c:	6813      	ldr	r3, [r2, #0]
 8011a6e:	1c58      	adds	r0, r3, #1
 8011a70:	6010      	str	r0, [r2, #0]
 8011a72:	7019      	strb	r1, [r3, #0]
 8011a74:	4608      	mov	r0, r1
 8011a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <__sfputs_r>:
 8011a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a7e:	4606      	mov	r6, r0
 8011a80:	460f      	mov	r7, r1
 8011a82:	4614      	mov	r4, r2
 8011a84:	18d5      	adds	r5, r2, r3
 8011a86:	42ac      	cmp	r4, r5
 8011a88:	d101      	bne.n	8011a8e <__sfputs_r+0x12>
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	e007      	b.n	8011a9e <__sfputs_r+0x22>
 8011a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a92:	463a      	mov	r2, r7
 8011a94:	4630      	mov	r0, r6
 8011a96:	f7ff ffda 	bl	8011a4e <__sfputc_r>
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	d1f3      	bne.n	8011a86 <__sfputs_r+0xa>
 8011a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011aa0 <_vfiprintf_r>:
 8011aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa4:	460d      	mov	r5, r1
 8011aa6:	b09d      	sub	sp, #116	@ 0x74
 8011aa8:	4614      	mov	r4, r2
 8011aaa:	4698      	mov	r8, r3
 8011aac:	4606      	mov	r6, r0
 8011aae:	b118      	cbz	r0, 8011ab8 <_vfiprintf_r+0x18>
 8011ab0:	6a03      	ldr	r3, [r0, #32]
 8011ab2:	b90b      	cbnz	r3, 8011ab8 <_vfiprintf_r+0x18>
 8011ab4:	f7fc fa66 	bl	800df84 <__sinit>
 8011ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011aba:	07d9      	lsls	r1, r3, #31
 8011abc:	d405      	bmi.n	8011aca <_vfiprintf_r+0x2a>
 8011abe:	89ab      	ldrh	r3, [r5, #12]
 8011ac0:	059a      	lsls	r2, r3, #22
 8011ac2:	d402      	bmi.n	8011aca <_vfiprintf_r+0x2a>
 8011ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ac6:	f7fc fbd6 	bl	800e276 <__retarget_lock_acquire_recursive>
 8011aca:	89ab      	ldrh	r3, [r5, #12]
 8011acc:	071b      	lsls	r3, r3, #28
 8011ace:	d501      	bpl.n	8011ad4 <_vfiprintf_r+0x34>
 8011ad0:	692b      	ldr	r3, [r5, #16]
 8011ad2:	b99b      	cbnz	r3, 8011afc <_vfiprintf_r+0x5c>
 8011ad4:	4629      	mov	r1, r5
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f000 f938 	bl	8011d4c <__swsetup_r>
 8011adc:	b170      	cbz	r0, 8011afc <_vfiprintf_r+0x5c>
 8011ade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ae0:	07dc      	lsls	r4, r3, #31
 8011ae2:	d504      	bpl.n	8011aee <_vfiprintf_r+0x4e>
 8011ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae8:	b01d      	add	sp, #116	@ 0x74
 8011aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aee:	89ab      	ldrh	r3, [r5, #12]
 8011af0:	0598      	lsls	r0, r3, #22
 8011af2:	d4f7      	bmi.n	8011ae4 <_vfiprintf_r+0x44>
 8011af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011af6:	f7fc fbbf 	bl	800e278 <__retarget_lock_release_recursive>
 8011afa:	e7f3      	b.n	8011ae4 <_vfiprintf_r+0x44>
 8011afc:	2300      	movs	r3, #0
 8011afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b00:	2320      	movs	r3, #32
 8011b02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b0a:	2330      	movs	r3, #48	@ 0x30
 8011b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011cbc <_vfiprintf_r+0x21c>
 8011b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b14:	f04f 0901 	mov.w	r9, #1
 8011b18:	4623      	mov	r3, r4
 8011b1a:	469a      	mov	sl, r3
 8011b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b20:	b10a      	cbz	r2, 8011b26 <_vfiprintf_r+0x86>
 8011b22:	2a25      	cmp	r2, #37	@ 0x25
 8011b24:	d1f9      	bne.n	8011b1a <_vfiprintf_r+0x7a>
 8011b26:	ebba 0b04 	subs.w	fp, sl, r4
 8011b2a:	d00b      	beq.n	8011b44 <_vfiprintf_r+0xa4>
 8011b2c:	465b      	mov	r3, fp
 8011b2e:	4622      	mov	r2, r4
 8011b30:	4629      	mov	r1, r5
 8011b32:	4630      	mov	r0, r6
 8011b34:	f7ff ffa2 	bl	8011a7c <__sfputs_r>
 8011b38:	3001      	adds	r0, #1
 8011b3a:	f000 80a7 	beq.w	8011c8c <_vfiprintf_r+0x1ec>
 8011b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b40:	445a      	add	r2, fp
 8011b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b44:	f89a 3000 	ldrb.w	r3, [sl]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f000 809f 	beq.w	8011c8c <_vfiprintf_r+0x1ec>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f04f 32ff 	mov.w	r2, #4294967295
 8011b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b58:	f10a 0a01 	add.w	sl, sl, #1
 8011b5c:	9304      	str	r3, [sp, #16]
 8011b5e:	9307      	str	r3, [sp, #28]
 8011b60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b64:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b66:	4654      	mov	r4, sl
 8011b68:	2205      	movs	r2, #5
 8011b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b6e:	4853      	ldr	r0, [pc, #332]	@ (8011cbc <_vfiprintf_r+0x21c>)
 8011b70:	f7ee fb4e 	bl	8000210 <memchr>
 8011b74:	9a04      	ldr	r2, [sp, #16]
 8011b76:	b9d8      	cbnz	r0, 8011bb0 <_vfiprintf_r+0x110>
 8011b78:	06d1      	lsls	r1, r2, #27
 8011b7a:	bf44      	itt	mi
 8011b7c:	2320      	movmi	r3, #32
 8011b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b82:	0713      	lsls	r3, r2, #28
 8011b84:	bf44      	itt	mi
 8011b86:	232b      	movmi	r3, #43	@ 0x2b
 8011b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b92:	d015      	beq.n	8011bc0 <_vfiprintf_r+0x120>
 8011b94:	9a07      	ldr	r2, [sp, #28]
 8011b96:	4654      	mov	r4, sl
 8011b98:	2000      	movs	r0, #0
 8011b9a:	f04f 0c0a 	mov.w	ip, #10
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ba4:	3b30      	subs	r3, #48	@ 0x30
 8011ba6:	2b09      	cmp	r3, #9
 8011ba8:	d94b      	bls.n	8011c42 <_vfiprintf_r+0x1a2>
 8011baa:	b1b0      	cbz	r0, 8011bda <_vfiprintf_r+0x13a>
 8011bac:	9207      	str	r2, [sp, #28]
 8011bae:	e014      	b.n	8011bda <_vfiprintf_r+0x13a>
 8011bb0:	eba0 0308 	sub.w	r3, r0, r8
 8011bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	9304      	str	r3, [sp, #16]
 8011bbc:	46a2      	mov	sl, r4
 8011bbe:	e7d2      	b.n	8011b66 <_vfiprintf_r+0xc6>
 8011bc0:	9b03      	ldr	r3, [sp, #12]
 8011bc2:	1d19      	adds	r1, r3, #4
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	9103      	str	r1, [sp, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	bfbb      	ittet	lt
 8011bcc:	425b      	neglt	r3, r3
 8011bce:	f042 0202 	orrlt.w	r2, r2, #2
 8011bd2:	9307      	strge	r3, [sp, #28]
 8011bd4:	9307      	strlt	r3, [sp, #28]
 8011bd6:	bfb8      	it	lt
 8011bd8:	9204      	strlt	r2, [sp, #16]
 8011bda:	7823      	ldrb	r3, [r4, #0]
 8011bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bde:	d10a      	bne.n	8011bf6 <_vfiprintf_r+0x156>
 8011be0:	7863      	ldrb	r3, [r4, #1]
 8011be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011be4:	d132      	bne.n	8011c4c <_vfiprintf_r+0x1ac>
 8011be6:	9b03      	ldr	r3, [sp, #12]
 8011be8:	1d1a      	adds	r2, r3, #4
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	9203      	str	r2, [sp, #12]
 8011bee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bf2:	3402      	adds	r4, #2
 8011bf4:	9305      	str	r3, [sp, #20]
 8011bf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ccc <_vfiprintf_r+0x22c>
 8011bfa:	7821      	ldrb	r1, [r4, #0]
 8011bfc:	2203      	movs	r2, #3
 8011bfe:	4650      	mov	r0, sl
 8011c00:	f7ee fb06 	bl	8000210 <memchr>
 8011c04:	b138      	cbz	r0, 8011c16 <_vfiprintf_r+0x176>
 8011c06:	9b04      	ldr	r3, [sp, #16]
 8011c08:	eba0 000a 	sub.w	r0, r0, sl
 8011c0c:	2240      	movs	r2, #64	@ 0x40
 8011c0e:	4082      	lsls	r2, r0
 8011c10:	4313      	orrs	r3, r2
 8011c12:	3401      	adds	r4, #1
 8011c14:	9304      	str	r3, [sp, #16]
 8011c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c1a:	4829      	ldr	r0, [pc, #164]	@ (8011cc0 <_vfiprintf_r+0x220>)
 8011c1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c20:	2206      	movs	r2, #6
 8011c22:	f7ee faf5 	bl	8000210 <memchr>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d03f      	beq.n	8011caa <_vfiprintf_r+0x20a>
 8011c2a:	4b26      	ldr	r3, [pc, #152]	@ (8011cc4 <_vfiprintf_r+0x224>)
 8011c2c:	bb1b      	cbnz	r3, 8011c76 <_vfiprintf_r+0x1d6>
 8011c2e:	9b03      	ldr	r3, [sp, #12]
 8011c30:	3307      	adds	r3, #7
 8011c32:	f023 0307 	bic.w	r3, r3, #7
 8011c36:	3308      	adds	r3, #8
 8011c38:	9303      	str	r3, [sp, #12]
 8011c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c3c:	443b      	add	r3, r7
 8011c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c40:	e76a      	b.n	8011b18 <_vfiprintf_r+0x78>
 8011c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c46:	460c      	mov	r4, r1
 8011c48:	2001      	movs	r0, #1
 8011c4a:	e7a8      	b.n	8011b9e <_vfiprintf_r+0xfe>
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	3401      	adds	r4, #1
 8011c50:	9305      	str	r3, [sp, #20]
 8011c52:	4619      	mov	r1, r3
 8011c54:	f04f 0c0a 	mov.w	ip, #10
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c5e:	3a30      	subs	r2, #48	@ 0x30
 8011c60:	2a09      	cmp	r2, #9
 8011c62:	d903      	bls.n	8011c6c <_vfiprintf_r+0x1cc>
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d0c6      	beq.n	8011bf6 <_vfiprintf_r+0x156>
 8011c68:	9105      	str	r1, [sp, #20]
 8011c6a:	e7c4      	b.n	8011bf6 <_vfiprintf_r+0x156>
 8011c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c70:	4604      	mov	r4, r0
 8011c72:	2301      	movs	r3, #1
 8011c74:	e7f0      	b.n	8011c58 <_vfiprintf_r+0x1b8>
 8011c76:	ab03      	add	r3, sp, #12
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	462a      	mov	r2, r5
 8011c7c:	4b12      	ldr	r3, [pc, #72]	@ (8011cc8 <_vfiprintf_r+0x228>)
 8011c7e:	a904      	add	r1, sp, #16
 8011c80:	4630      	mov	r0, r6
 8011c82:	f7fb fb27 	bl	800d2d4 <_printf_float>
 8011c86:	4607      	mov	r7, r0
 8011c88:	1c78      	adds	r0, r7, #1
 8011c8a:	d1d6      	bne.n	8011c3a <_vfiprintf_r+0x19a>
 8011c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c8e:	07d9      	lsls	r1, r3, #31
 8011c90:	d405      	bmi.n	8011c9e <_vfiprintf_r+0x1fe>
 8011c92:	89ab      	ldrh	r3, [r5, #12]
 8011c94:	059a      	lsls	r2, r3, #22
 8011c96:	d402      	bmi.n	8011c9e <_vfiprintf_r+0x1fe>
 8011c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c9a:	f7fc faed 	bl	800e278 <__retarget_lock_release_recursive>
 8011c9e:	89ab      	ldrh	r3, [r5, #12]
 8011ca0:	065b      	lsls	r3, r3, #25
 8011ca2:	f53f af1f 	bmi.w	8011ae4 <_vfiprintf_r+0x44>
 8011ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ca8:	e71e      	b.n	8011ae8 <_vfiprintf_r+0x48>
 8011caa:	ab03      	add	r3, sp, #12
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	462a      	mov	r2, r5
 8011cb0:	4b05      	ldr	r3, [pc, #20]	@ (8011cc8 <_vfiprintf_r+0x228>)
 8011cb2:	a904      	add	r1, sp, #16
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	f7fb fda5 	bl	800d804 <_printf_i>
 8011cba:	e7e4      	b.n	8011c86 <_vfiprintf_r+0x1e6>
 8011cbc:	08013809 	.word	0x08013809
 8011cc0:	08013813 	.word	0x08013813
 8011cc4:	0800d2d5 	.word	0x0800d2d5
 8011cc8:	08011a7d 	.word	0x08011a7d
 8011ccc:	0801380f 	.word	0x0801380f

08011cd0 <__swbuf_r>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	460e      	mov	r6, r1
 8011cd4:	4614      	mov	r4, r2
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	b118      	cbz	r0, 8011ce2 <__swbuf_r+0x12>
 8011cda:	6a03      	ldr	r3, [r0, #32]
 8011cdc:	b90b      	cbnz	r3, 8011ce2 <__swbuf_r+0x12>
 8011cde:	f7fc f951 	bl	800df84 <__sinit>
 8011ce2:	69a3      	ldr	r3, [r4, #24]
 8011ce4:	60a3      	str	r3, [r4, #8]
 8011ce6:	89a3      	ldrh	r3, [r4, #12]
 8011ce8:	071a      	lsls	r2, r3, #28
 8011cea:	d501      	bpl.n	8011cf0 <__swbuf_r+0x20>
 8011cec:	6923      	ldr	r3, [r4, #16]
 8011cee:	b943      	cbnz	r3, 8011d02 <__swbuf_r+0x32>
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f000 f82a 	bl	8011d4c <__swsetup_r>
 8011cf8:	b118      	cbz	r0, 8011d02 <__swbuf_r+0x32>
 8011cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8011cfe:	4638      	mov	r0, r7
 8011d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d02:	6823      	ldr	r3, [r4, #0]
 8011d04:	6922      	ldr	r2, [r4, #16]
 8011d06:	1a98      	subs	r0, r3, r2
 8011d08:	6963      	ldr	r3, [r4, #20]
 8011d0a:	b2f6      	uxtb	r6, r6
 8011d0c:	4283      	cmp	r3, r0
 8011d0e:	4637      	mov	r7, r6
 8011d10:	dc05      	bgt.n	8011d1e <__swbuf_r+0x4e>
 8011d12:	4621      	mov	r1, r4
 8011d14:	4628      	mov	r0, r5
 8011d16:	f7ff f993 	bl	8011040 <_fflush_r>
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	d1ed      	bne.n	8011cfa <__swbuf_r+0x2a>
 8011d1e:	68a3      	ldr	r3, [r4, #8]
 8011d20:	3b01      	subs	r3, #1
 8011d22:	60a3      	str	r3, [r4, #8]
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	1c5a      	adds	r2, r3, #1
 8011d28:	6022      	str	r2, [r4, #0]
 8011d2a:	701e      	strb	r6, [r3, #0]
 8011d2c:	6962      	ldr	r2, [r4, #20]
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d004      	beq.n	8011d3e <__swbuf_r+0x6e>
 8011d34:	89a3      	ldrh	r3, [r4, #12]
 8011d36:	07db      	lsls	r3, r3, #31
 8011d38:	d5e1      	bpl.n	8011cfe <__swbuf_r+0x2e>
 8011d3a:	2e0a      	cmp	r6, #10
 8011d3c:	d1df      	bne.n	8011cfe <__swbuf_r+0x2e>
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ff f97d 	bl	8011040 <_fflush_r>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d0d9      	beq.n	8011cfe <__swbuf_r+0x2e>
 8011d4a:	e7d6      	b.n	8011cfa <__swbuf_r+0x2a>

08011d4c <__swsetup_r>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4b29      	ldr	r3, [pc, #164]	@ (8011df4 <__swsetup_r+0xa8>)
 8011d50:	4605      	mov	r5, r0
 8011d52:	6818      	ldr	r0, [r3, #0]
 8011d54:	460c      	mov	r4, r1
 8011d56:	b118      	cbz	r0, 8011d60 <__swsetup_r+0x14>
 8011d58:	6a03      	ldr	r3, [r0, #32]
 8011d5a:	b90b      	cbnz	r3, 8011d60 <__swsetup_r+0x14>
 8011d5c:	f7fc f912 	bl	800df84 <__sinit>
 8011d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d64:	0719      	lsls	r1, r3, #28
 8011d66:	d422      	bmi.n	8011dae <__swsetup_r+0x62>
 8011d68:	06da      	lsls	r2, r3, #27
 8011d6a:	d407      	bmi.n	8011d7c <__swsetup_r+0x30>
 8011d6c:	2209      	movs	r2, #9
 8011d6e:	602a      	str	r2, [r5, #0]
 8011d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	f04f 30ff 	mov.w	r0, #4294967295
 8011d7a:	e033      	b.n	8011de4 <__swsetup_r+0x98>
 8011d7c:	0758      	lsls	r0, r3, #29
 8011d7e:	d512      	bpl.n	8011da6 <__swsetup_r+0x5a>
 8011d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d82:	b141      	cbz	r1, 8011d96 <__swsetup_r+0x4a>
 8011d84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d88:	4299      	cmp	r1, r3
 8011d8a:	d002      	beq.n	8011d92 <__swsetup_r+0x46>
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f7fd f8d7 	bl	800ef40 <_free_r>
 8011d92:	2300      	movs	r3, #0
 8011d94:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d96:	89a3      	ldrh	r3, [r4, #12]
 8011d98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d9c:	81a3      	strh	r3, [r4, #12]
 8011d9e:	2300      	movs	r3, #0
 8011da0:	6063      	str	r3, [r4, #4]
 8011da2:	6923      	ldr	r3, [r4, #16]
 8011da4:	6023      	str	r3, [r4, #0]
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	f043 0308 	orr.w	r3, r3, #8
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	6923      	ldr	r3, [r4, #16]
 8011db0:	b94b      	cbnz	r3, 8011dc6 <__swsetup_r+0x7a>
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dbc:	d003      	beq.n	8011dc6 <__swsetup_r+0x7a>
 8011dbe:	4621      	mov	r1, r4
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f000 f883 	bl	8011ecc <__smakebuf_r>
 8011dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dca:	f013 0201 	ands.w	r2, r3, #1
 8011dce:	d00a      	beq.n	8011de6 <__swsetup_r+0x9a>
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	60a2      	str	r2, [r4, #8]
 8011dd4:	6962      	ldr	r2, [r4, #20]
 8011dd6:	4252      	negs	r2, r2
 8011dd8:	61a2      	str	r2, [r4, #24]
 8011dda:	6922      	ldr	r2, [r4, #16]
 8011ddc:	b942      	cbnz	r2, 8011df0 <__swsetup_r+0xa4>
 8011dde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011de2:	d1c5      	bne.n	8011d70 <__swsetup_r+0x24>
 8011de4:	bd38      	pop	{r3, r4, r5, pc}
 8011de6:	0799      	lsls	r1, r3, #30
 8011de8:	bf58      	it	pl
 8011dea:	6962      	ldrpl	r2, [r4, #20]
 8011dec:	60a2      	str	r2, [r4, #8]
 8011dee:	e7f4      	b.n	8011dda <__swsetup_r+0x8e>
 8011df0:	2000      	movs	r0, #0
 8011df2:	e7f7      	b.n	8011de4 <__swsetup_r+0x98>
 8011df4:	2000004c 	.word	0x2000004c

08011df8 <_raise_r>:
 8011df8:	291f      	cmp	r1, #31
 8011dfa:	b538      	push	{r3, r4, r5, lr}
 8011dfc:	4605      	mov	r5, r0
 8011dfe:	460c      	mov	r4, r1
 8011e00:	d904      	bls.n	8011e0c <_raise_r+0x14>
 8011e02:	2316      	movs	r3, #22
 8011e04:	6003      	str	r3, [r0, #0]
 8011e06:	f04f 30ff 	mov.w	r0, #4294967295
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e0e:	b112      	cbz	r2, 8011e16 <_raise_r+0x1e>
 8011e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e14:	b94b      	cbnz	r3, 8011e2a <_raise_r+0x32>
 8011e16:	4628      	mov	r0, r5
 8011e18:	f000 f830 	bl	8011e7c <_getpid_r>
 8011e1c:	4622      	mov	r2, r4
 8011e1e:	4601      	mov	r1, r0
 8011e20:	4628      	mov	r0, r5
 8011e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e26:	f000 b817 	b.w	8011e58 <_kill_r>
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d00a      	beq.n	8011e44 <_raise_r+0x4c>
 8011e2e:	1c59      	adds	r1, r3, #1
 8011e30:	d103      	bne.n	8011e3a <_raise_r+0x42>
 8011e32:	2316      	movs	r3, #22
 8011e34:	6003      	str	r3, [r0, #0]
 8011e36:	2001      	movs	r0, #1
 8011e38:	e7e7      	b.n	8011e0a <_raise_r+0x12>
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e40:	4620      	mov	r0, r4
 8011e42:	4798      	blx	r3
 8011e44:	2000      	movs	r0, #0
 8011e46:	e7e0      	b.n	8011e0a <_raise_r+0x12>

08011e48 <raise>:
 8011e48:	4b02      	ldr	r3, [pc, #8]	@ (8011e54 <raise+0xc>)
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	6818      	ldr	r0, [r3, #0]
 8011e4e:	f7ff bfd3 	b.w	8011df8 <_raise_r>
 8011e52:	bf00      	nop
 8011e54:	2000004c 	.word	0x2000004c

08011e58 <_kill_r>:
 8011e58:	b538      	push	{r3, r4, r5, lr}
 8011e5a:	4d07      	ldr	r5, [pc, #28]	@ (8011e78 <_kill_r+0x20>)
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4604      	mov	r4, r0
 8011e60:	4608      	mov	r0, r1
 8011e62:	4611      	mov	r1, r2
 8011e64:	602b      	str	r3, [r5, #0]
 8011e66:	f7f3 fe8b 	bl	8005b80 <_kill>
 8011e6a:	1c43      	adds	r3, r0, #1
 8011e6c:	d102      	bne.n	8011e74 <_kill_r+0x1c>
 8011e6e:	682b      	ldr	r3, [r5, #0]
 8011e70:	b103      	cbz	r3, 8011e74 <_kill_r+0x1c>
 8011e72:	6023      	str	r3, [r4, #0]
 8011e74:	bd38      	pop	{r3, r4, r5, pc}
 8011e76:	bf00      	nop
 8011e78:	2000181c 	.word	0x2000181c

08011e7c <_getpid_r>:
 8011e7c:	f7f3 be78 	b.w	8005b70 <_getpid>

08011e80 <__swhatbuf_r>:
 8011e80:	b570      	push	{r4, r5, r6, lr}
 8011e82:	460c      	mov	r4, r1
 8011e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e88:	2900      	cmp	r1, #0
 8011e8a:	b096      	sub	sp, #88	@ 0x58
 8011e8c:	4615      	mov	r5, r2
 8011e8e:	461e      	mov	r6, r3
 8011e90:	da0d      	bge.n	8011eae <__swhatbuf_r+0x2e>
 8011e92:	89a3      	ldrh	r3, [r4, #12]
 8011e94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e98:	f04f 0100 	mov.w	r1, #0
 8011e9c:	bf14      	ite	ne
 8011e9e:	2340      	movne	r3, #64	@ 0x40
 8011ea0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	6031      	str	r1, [r6, #0]
 8011ea8:	602b      	str	r3, [r5, #0]
 8011eaa:	b016      	add	sp, #88	@ 0x58
 8011eac:	bd70      	pop	{r4, r5, r6, pc}
 8011eae:	466a      	mov	r2, sp
 8011eb0:	f000 f848 	bl	8011f44 <_fstat_r>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	dbec      	blt.n	8011e92 <__swhatbuf_r+0x12>
 8011eb8:	9901      	ldr	r1, [sp, #4]
 8011eba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ebe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ec2:	4259      	negs	r1, r3
 8011ec4:	4159      	adcs	r1, r3
 8011ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011eca:	e7eb      	b.n	8011ea4 <__swhatbuf_r+0x24>

08011ecc <__smakebuf_r>:
 8011ecc:	898b      	ldrh	r3, [r1, #12]
 8011ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ed0:	079d      	lsls	r5, r3, #30
 8011ed2:	4606      	mov	r6, r0
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	d507      	bpl.n	8011ee8 <__smakebuf_r+0x1c>
 8011ed8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011edc:	6023      	str	r3, [r4, #0]
 8011ede:	6123      	str	r3, [r4, #16]
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	6163      	str	r3, [r4, #20]
 8011ee4:	b003      	add	sp, #12
 8011ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ee8:	ab01      	add	r3, sp, #4
 8011eea:	466a      	mov	r2, sp
 8011eec:	f7ff ffc8 	bl	8011e80 <__swhatbuf_r>
 8011ef0:	9f00      	ldr	r7, [sp, #0]
 8011ef2:	4605      	mov	r5, r0
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f7fb f8c0 	bl	800d07c <_malloc_r>
 8011efc:	b948      	cbnz	r0, 8011f12 <__smakebuf_r+0x46>
 8011efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f02:	059a      	lsls	r2, r3, #22
 8011f04:	d4ee      	bmi.n	8011ee4 <__smakebuf_r+0x18>
 8011f06:	f023 0303 	bic.w	r3, r3, #3
 8011f0a:	f043 0302 	orr.w	r3, r3, #2
 8011f0e:	81a3      	strh	r3, [r4, #12]
 8011f10:	e7e2      	b.n	8011ed8 <__smakebuf_r+0xc>
 8011f12:	89a3      	ldrh	r3, [r4, #12]
 8011f14:	6020      	str	r0, [r4, #0]
 8011f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f1a:	81a3      	strh	r3, [r4, #12]
 8011f1c:	9b01      	ldr	r3, [sp, #4]
 8011f1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f22:	b15b      	cbz	r3, 8011f3c <__smakebuf_r+0x70>
 8011f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f000 f81d 	bl	8011f68 <_isatty_r>
 8011f2e:	b128      	cbz	r0, 8011f3c <__smakebuf_r+0x70>
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	f023 0303 	bic.w	r3, r3, #3
 8011f36:	f043 0301 	orr.w	r3, r3, #1
 8011f3a:	81a3      	strh	r3, [r4, #12]
 8011f3c:	89a3      	ldrh	r3, [r4, #12]
 8011f3e:	431d      	orrs	r5, r3
 8011f40:	81a5      	strh	r5, [r4, #12]
 8011f42:	e7cf      	b.n	8011ee4 <__smakebuf_r+0x18>

08011f44 <_fstat_r>:
 8011f44:	b538      	push	{r3, r4, r5, lr}
 8011f46:	4d07      	ldr	r5, [pc, #28]	@ (8011f64 <_fstat_r+0x20>)
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	4611      	mov	r1, r2
 8011f50:	602b      	str	r3, [r5, #0]
 8011f52:	f7f3 fe75 	bl	8005c40 <_fstat>
 8011f56:	1c43      	adds	r3, r0, #1
 8011f58:	d102      	bne.n	8011f60 <_fstat_r+0x1c>
 8011f5a:	682b      	ldr	r3, [r5, #0]
 8011f5c:	b103      	cbz	r3, 8011f60 <_fstat_r+0x1c>
 8011f5e:	6023      	str	r3, [r4, #0]
 8011f60:	bd38      	pop	{r3, r4, r5, pc}
 8011f62:	bf00      	nop
 8011f64:	2000181c 	.word	0x2000181c

08011f68 <_isatty_r>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	4d06      	ldr	r5, [pc, #24]	@ (8011f84 <_isatty_r+0x1c>)
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	4604      	mov	r4, r0
 8011f70:	4608      	mov	r0, r1
 8011f72:	602b      	str	r3, [r5, #0]
 8011f74:	f7f3 fe74 	bl	8005c60 <_isatty>
 8011f78:	1c43      	adds	r3, r0, #1
 8011f7a:	d102      	bne.n	8011f82 <_isatty_r+0x1a>
 8011f7c:	682b      	ldr	r3, [r5, #0]
 8011f7e:	b103      	cbz	r3, 8011f82 <_isatty_r+0x1a>
 8011f80:	6023      	str	r3, [r4, #0]
 8011f82:	bd38      	pop	{r3, r4, r5, pc}
 8011f84:	2000181c 	.word	0x2000181c

08011f88 <pow>:
 8011f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f8a:	ed2d 8b02 	vpush	{d8}
 8011f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8011f92:	eef0 8a60 	vmov.f32	s17, s1
 8011f96:	ec55 4b11 	vmov	r4, r5, d1
 8011f9a:	f000 fa9d 	bl	80124d8 <__ieee754_pow>
 8011f9e:	4622      	mov	r2, r4
 8011fa0:	462b      	mov	r3, r5
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	ec57 6b10 	vmov	r6, r7, d0
 8011faa:	f7ee fddf 	bl	8000b6c <__aeabi_dcmpun>
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d13b      	bne.n	801202a <pow+0xa2>
 8011fb2:	ec51 0b18 	vmov	r0, r1, d8
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	2300      	movs	r3, #0
 8011fba:	f7ee fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8011fbe:	b1b8      	cbz	r0, 8011ff0 <pow+0x68>
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	4629      	mov	r1, r5
 8011fc8:	f7ee fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d146      	bne.n	801205e <pow+0xd6>
 8011fd0:	ec45 4b10 	vmov	d0, r4, r5
 8011fd4:	f000 f8c5 	bl	8012162 <finite>
 8011fd8:	b338      	cbz	r0, 801202a <pow+0xa2>
 8011fda:	2200      	movs	r2, #0
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4620      	mov	r0, r4
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	f7ee fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8011fe6:	b300      	cbz	r0, 801202a <pow+0xa2>
 8011fe8:	f7fc f91a 	bl	800e220 <__errno>
 8011fec:	2322      	movs	r3, #34	@ 0x22
 8011fee:	e01b      	b.n	8012028 <pow+0xa0>
 8011ff0:	ec47 6b10 	vmov	d0, r6, r7
 8011ff4:	f000 f8b5 	bl	8012162 <finite>
 8011ff8:	b9e0      	cbnz	r0, 8012034 <pow+0xac>
 8011ffa:	eeb0 0a48 	vmov.f32	s0, s16
 8011ffe:	eef0 0a68 	vmov.f32	s1, s17
 8012002:	f000 f8ae 	bl	8012162 <finite>
 8012006:	b1a8      	cbz	r0, 8012034 <pow+0xac>
 8012008:	ec45 4b10 	vmov	d0, r4, r5
 801200c:	f000 f8a9 	bl	8012162 <finite>
 8012010:	b180      	cbz	r0, 8012034 <pow+0xac>
 8012012:	4632      	mov	r2, r6
 8012014:	463b      	mov	r3, r7
 8012016:	4630      	mov	r0, r6
 8012018:	4639      	mov	r1, r7
 801201a:	f7ee fda7 	bl	8000b6c <__aeabi_dcmpun>
 801201e:	2800      	cmp	r0, #0
 8012020:	d0e2      	beq.n	8011fe8 <pow+0x60>
 8012022:	f7fc f8fd 	bl	800e220 <__errno>
 8012026:	2321      	movs	r3, #33	@ 0x21
 8012028:	6003      	str	r3, [r0, #0]
 801202a:	ecbd 8b02 	vpop	{d8}
 801202e:	ec47 6b10 	vmov	d0, r6, r7
 8012032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012034:	2200      	movs	r2, #0
 8012036:	2300      	movs	r3, #0
 8012038:	4630      	mov	r0, r6
 801203a:	4639      	mov	r1, r7
 801203c:	f7ee fd64 	bl	8000b08 <__aeabi_dcmpeq>
 8012040:	2800      	cmp	r0, #0
 8012042:	d0f2      	beq.n	801202a <pow+0xa2>
 8012044:	eeb0 0a48 	vmov.f32	s0, s16
 8012048:	eef0 0a68 	vmov.f32	s1, s17
 801204c:	f000 f889 	bl	8012162 <finite>
 8012050:	2800      	cmp	r0, #0
 8012052:	d0ea      	beq.n	801202a <pow+0xa2>
 8012054:	ec45 4b10 	vmov	d0, r4, r5
 8012058:	f000 f883 	bl	8012162 <finite>
 801205c:	e7c3      	b.n	8011fe6 <pow+0x5e>
 801205e:	4f01      	ldr	r7, [pc, #4]	@ (8012064 <pow+0xdc>)
 8012060:	2600      	movs	r6, #0
 8012062:	e7e2      	b.n	801202a <pow+0xa2>
 8012064:	3ff00000 	.word	0x3ff00000

08012068 <sqrt>:
 8012068:	b538      	push	{r3, r4, r5, lr}
 801206a:	ed2d 8b02 	vpush	{d8}
 801206e:	ec55 4b10 	vmov	r4, r5, d0
 8012072:	f000 f8d7 	bl	8012224 <__ieee754_sqrt>
 8012076:	4622      	mov	r2, r4
 8012078:	462b      	mov	r3, r5
 801207a:	4620      	mov	r0, r4
 801207c:	4629      	mov	r1, r5
 801207e:	eeb0 8a40 	vmov.f32	s16, s0
 8012082:	eef0 8a60 	vmov.f32	s17, s1
 8012086:	f7ee fd71 	bl	8000b6c <__aeabi_dcmpun>
 801208a:	b990      	cbnz	r0, 80120b2 <sqrt+0x4a>
 801208c:	2200      	movs	r2, #0
 801208e:	2300      	movs	r3, #0
 8012090:	4620      	mov	r0, r4
 8012092:	4629      	mov	r1, r5
 8012094:	f7ee fd42 	bl	8000b1c <__aeabi_dcmplt>
 8012098:	b158      	cbz	r0, 80120b2 <sqrt+0x4a>
 801209a:	f7fc f8c1 	bl	800e220 <__errno>
 801209e:	2321      	movs	r3, #33	@ 0x21
 80120a0:	6003      	str	r3, [r0, #0]
 80120a2:	2200      	movs	r2, #0
 80120a4:	2300      	movs	r3, #0
 80120a6:	4610      	mov	r0, r2
 80120a8:	4619      	mov	r1, r3
 80120aa:	f7ee fbef 	bl	800088c <__aeabi_ddiv>
 80120ae:	ec41 0b18 	vmov	d8, r0, r1
 80120b2:	eeb0 0a48 	vmov.f32	s0, s16
 80120b6:	eef0 0a68 	vmov.f32	s1, s17
 80120ba:	ecbd 8b02 	vpop	{d8}
 80120be:	bd38      	pop	{r3, r4, r5, pc}

080120c0 <acosf>:
 80120c0:	b508      	push	{r3, lr}
 80120c2:	ed2d 8b02 	vpush	{d8}
 80120c6:	eeb0 8a40 	vmov.f32	s16, s0
 80120ca:	f000 ff51 	bl	8012f70 <__ieee754_acosf>
 80120ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80120d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d6:	eef0 8a40 	vmov.f32	s17, s0
 80120da:	d615      	bvs.n	8012108 <acosf+0x48>
 80120dc:	eeb0 0a48 	vmov.f32	s0, s16
 80120e0:	f000 f838 	bl	8012154 <fabsf>
 80120e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80120e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80120ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f0:	dd0a      	ble.n	8012108 <acosf+0x48>
 80120f2:	f7fc f895 	bl	800e220 <__errno>
 80120f6:	ecbd 8b02 	vpop	{d8}
 80120fa:	2321      	movs	r3, #33	@ 0x21
 80120fc:	6003      	str	r3, [r0, #0]
 80120fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012102:	4804      	ldr	r0, [pc, #16]	@ (8012114 <acosf+0x54>)
 8012104:	f7fc b8c8 	b.w	800e298 <nanf>
 8012108:	eeb0 0a68 	vmov.f32	s0, s17
 801210c:	ecbd 8b02 	vpop	{d8}
 8012110:	bd08      	pop	{r3, pc}
 8012112:	bf00      	nop
 8012114:	08013878 	.word	0x08013878

08012118 <sqrtf>:
 8012118:	b508      	push	{r3, lr}
 801211a:	ed2d 8b02 	vpush	{d8}
 801211e:	eeb0 8a40 	vmov.f32	s16, s0
 8012122:	f000 f959 	bl	80123d8 <__ieee754_sqrtf>
 8012126:	eeb4 8a48 	vcmp.f32	s16, s16
 801212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212e:	d60c      	bvs.n	801214a <sqrtf+0x32>
 8012130:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012150 <sqrtf+0x38>
 8012134:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213c:	d505      	bpl.n	801214a <sqrtf+0x32>
 801213e:	f7fc f86f 	bl	800e220 <__errno>
 8012142:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012146:	2321      	movs	r3, #33	@ 0x21
 8012148:	6003      	str	r3, [r0, #0]
 801214a:	ecbd 8b02 	vpop	{d8}
 801214e:	bd08      	pop	{r3, pc}
 8012150:	00000000 	.word	0x00000000

08012154 <fabsf>:
 8012154:	ee10 3a10 	vmov	r3, s0
 8012158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801215c:	ee00 3a10 	vmov	s0, r3
 8012160:	4770      	bx	lr

08012162 <finite>:
 8012162:	b082      	sub	sp, #8
 8012164:	ed8d 0b00 	vstr	d0, [sp]
 8012168:	9801      	ldr	r0, [sp, #4]
 801216a:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801216e:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012172:	0fc0      	lsrs	r0, r0, #31
 8012174:	b002      	add	sp, #8
 8012176:	4770      	bx	lr

08012178 <fmaxf>:
 8012178:	b508      	push	{r3, lr}
 801217a:	ed2d 8b02 	vpush	{d8}
 801217e:	eeb0 8a40 	vmov.f32	s16, s0
 8012182:	eef0 8a60 	vmov.f32	s17, s1
 8012186:	f000 f831 	bl	80121ec <__fpclassifyf>
 801218a:	b930      	cbnz	r0, 801219a <fmaxf+0x22>
 801218c:	eeb0 8a68 	vmov.f32	s16, s17
 8012190:	eeb0 0a48 	vmov.f32	s0, s16
 8012194:	ecbd 8b02 	vpop	{d8}
 8012198:	bd08      	pop	{r3, pc}
 801219a:	eeb0 0a68 	vmov.f32	s0, s17
 801219e:	f000 f825 	bl	80121ec <__fpclassifyf>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d0f4      	beq.n	8012190 <fmaxf+0x18>
 80121a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80121aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ae:	dded      	ble.n	801218c <fmaxf+0x14>
 80121b0:	e7ee      	b.n	8012190 <fmaxf+0x18>

080121b2 <fminf>:
 80121b2:	b508      	push	{r3, lr}
 80121b4:	ed2d 8b02 	vpush	{d8}
 80121b8:	eeb0 8a40 	vmov.f32	s16, s0
 80121bc:	eef0 8a60 	vmov.f32	s17, s1
 80121c0:	f000 f814 	bl	80121ec <__fpclassifyf>
 80121c4:	b930      	cbnz	r0, 80121d4 <fminf+0x22>
 80121c6:	eeb0 8a68 	vmov.f32	s16, s17
 80121ca:	eeb0 0a48 	vmov.f32	s0, s16
 80121ce:	ecbd 8b02 	vpop	{d8}
 80121d2:	bd08      	pop	{r3, pc}
 80121d4:	eeb0 0a68 	vmov.f32	s0, s17
 80121d8:	f000 f808 	bl	80121ec <__fpclassifyf>
 80121dc:	2800      	cmp	r0, #0
 80121de:	d0f4      	beq.n	80121ca <fminf+0x18>
 80121e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80121e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e8:	d5ed      	bpl.n	80121c6 <fminf+0x14>
 80121ea:	e7ee      	b.n	80121ca <fminf+0x18>

080121ec <__fpclassifyf>:
 80121ec:	ee10 3a10 	vmov	r3, s0
 80121f0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80121f4:	d00d      	beq.n	8012212 <__fpclassifyf+0x26>
 80121f6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80121fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80121fe:	d30a      	bcc.n	8012216 <__fpclassifyf+0x2a>
 8012200:	4b07      	ldr	r3, [pc, #28]	@ (8012220 <__fpclassifyf+0x34>)
 8012202:	1e42      	subs	r2, r0, #1
 8012204:	429a      	cmp	r2, r3
 8012206:	d908      	bls.n	801221a <__fpclassifyf+0x2e>
 8012208:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801220c:	4258      	negs	r0, r3
 801220e:	4158      	adcs	r0, r3
 8012210:	4770      	bx	lr
 8012212:	2002      	movs	r0, #2
 8012214:	4770      	bx	lr
 8012216:	2004      	movs	r0, #4
 8012218:	4770      	bx	lr
 801221a:	2003      	movs	r0, #3
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	007ffffe 	.word	0x007ffffe

08012224 <__ieee754_sqrt>:
 8012224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012228:	4a68      	ldr	r2, [pc, #416]	@ (80123cc <__ieee754_sqrt+0x1a8>)
 801222a:	ec55 4b10 	vmov	r4, r5, d0
 801222e:	43aa      	bics	r2, r5
 8012230:	462b      	mov	r3, r5
 8012232:	4621      	mov	r1, r4
 8012234:	d110      	bne.n	8012258 <__ieee754_sqrt+0x34>
 8012236:	4622      	mov	r2, r4
 8012238:	4620      	mov	r0, r4
 801223a:	4629      	mov	r1, r5
 801223c:	f7ee f9fc 	bl	8000638 <__aeabi_dmul>
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	4620      	mov	r0, r4
 8012246:	4629      	mov	r1, r5
 8012248:	f7ee f840 	bl	80002cc <__adddf3>
 801224c:	4604      	mov	r4, r0
 801224e:	460d      	mov	r5, r1
 8012250:	ec45 4b10 	vmov	d0, r4, r5
 8012254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012258:	2d00      	cmp	r5, #0
 801225a:	dc0e      	bgt.n	801227a <__ieee754_sqrt+0x56>
 801225c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012260:	4322      	orrs	r2, r4
 8012262:	d0f5      	beq.n	8012250 <__ieee754_sqrt+0x2c>
 8012264:	b19d      	cbz	r5, 801228e <__ieee754_sqrt+0x6a>
 8012266:	4622      	mov	r2, r4
 8012268:	4620      	mov	r0, r4
 801226a:	4629      	mov	r1, r5
 801226c:	f7ee f82c 	bl	80002c8 <__aeabi_dsub>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	f7ee fb0a 	bl	800088c <__aeabi_ddiv>
 8012278:	e7e8      	b.n	801224c <__ieee754_sqrt+0x28>
 801227a:	152a      	asrs	r2, r5, #20
 801227c:	d115      	bne.n	80122aa <__ieee754_sqrt+0x86>
 801227e:	2000      	movs	r0, #0
 8012280:	e009      	b.n	8012296 <__ieee754_sqrt+0x72>
 8012282:	0acb      	lsrs	r3, r1, #11
 8012284:	3a15      	subs	r2, #21
 8012286:	0549      	lsls	r1, r1, #21
 8012288:	2b00      	cmp	r3, #0
 801228a:	d0fa      	beq.n	8012282 <__ieee754_sqrt+0x5e>
 801228c:	e7f7      	b.n	801227e <__ieee754_sqrt+0x5a>
 801228e:	462a      	mov	r2, r5
 8012290:	e7fa      	b.n	8012288 <__ieee754_sqrt+0x64>
 8012292:	005b      	lsls	r3, r3, #1
 8012294:	3001      	adds	r0, #1
 8012296:	02dc      	lsls	r4, r3, #11
 8012298:	d5fb      	bpl.n	8012292 <__ieee754_sqrt+0x6e>
 801229a:	1e44      	subs	r4, r0, #1
 801229c:	1b12      	subs	r2, r2, r4
 801229e:	f1c0 0420 	rsb	r4, r0, #32
 80122a2:	fa21 f404 	lsr.w	r4, r1, r4
 80122a6:	4323      	orrs	r3, r4
 80122a8:	4081      	lsls	r1, r0
 80122aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122ae:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80122b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80122b6:	07d2      	lsls	r2, r2, #31
 80122b8:	bf5c      	itt	pl
 80122ba:	005b      	lslpl	r3, r3, #1
 80122bc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80122c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80122c4:	bf58      	it	pl
 80122c6:	0049      	lslpl	r1, r1, #1
 80122c8:	2600      	movs	r6, #0
 80122ca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80122ce:	106d      	asrs	r5, r5, #1
 80122d0:	0049      	lsls	r1, r1, #1
 80122d2:	2016      	movs	r0, #22
 80122d4:	4632      	mov	r2, r6
 80122d6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80122da:	1917      	adds	r7, r2, r4
 80122dc:	429f      	cmp	r7, r3
 80122de:	bfde      	ittt	le
 80122e0:	193a      	addle	r2, r7, r4
 80122e2:	1bdb      	suble	r3, r3, r7
 80122e4:	1936      	addle	r6, r6, r4
 80122e6:	0fcf      	lsrs	r7, r1, #31
 80122e8:	3801      	subs	r0, #1
 80122ea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80122ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80122f2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80122f6:	d1f0      	bne.n	80122da <__ieee754_sqrt+0xb6>
 80122f8:	4604      	mov	r4, r0
 80122fa:	2720      	movs	r7, #32
 80122fc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012300:	429a      	cmp	r2, r3
 8012302:	eb00 0e0c 	add.w	lr, r0, ip
 8012306:	db02      	blt.n	801230e <__ieee754_sqrt+0xea>
 8012308:	d113      	bne.n	8012332 <__ieee754_sqrt+0x10e>
 801230a:	458e      	cmp	lr, r1
 801230c:	d811      	bhi.n	8012332 <__ieee754_sqrt+0x10e>
 801230e:	f1be 0f00 	cmp.w	lr, #0
 8012312:	eb0e 000c 	add.w	r0, lr, ip
 8012316:	da42      	bge.n	801239e <__ieee754_sqrt+0x17a>
 8012318:	2800      	cmp	r0, #0
 801231a:	db40      	blt.n	801239e <__ieee754_sqrt+0x17a>
 801231c:	f102 0801 	add.w	r8, r2, #1
 8012320:	1a9b      	subs	r3, r3, r2
 8012322:	458e      	cmp	lr, r1
 8012324:	bf88      	it	hi
 8012326:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801232a:	eba1 010e 	sub.w	r1, r1, lr
 801232e:	4464      	add	r4, ip
 8012330:	4642      	mov	r2, r8
 8012332:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012336:	3f01      	subs	r7, #1
 8012338:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801233c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012340:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012344:	d1dc      	bne.n	8012300 <__ieee754_sqrt+0xdc>
 8012346:	4319      	orrs	r1, r3
 8012348:	d01b      	beq.n	8012382 <__ieee754_sqrt+0x15e>
 801234a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80123d0 <__ieee754_sqrt+0x1ac>
 801234e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80123d4 <__ieee754_sqrt+0x1b0>
 8012352:	e9da 0100 	ldrd	r0, r1, [sl]
 8012356:	e9db 2300 	ldrd	r2, r3, [fp]
 801235a:	f7ed ffb5 	bl	80002c8 <__aeabi_dsub>
 801235e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012362:	4602      	mov	r2, r0
 8012364:	460b      	mov	r3, r1
 8012366:	4640      	mov	r0, r8
 8012368:	4649      	mov	r1, r9
 801236a:	f7ee fbe1 	bl	8000b30 <__aeabi_dcmple>
 801236e:	b140      	cbz	r0, 8012382 <__ieee754_sqrt+0x15e>
 8012370:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012374:	e9da 0100 	ldrd	r0, r1, [sl]
 8012378:	e9db 2300 	ldrd	r2, r3, [fp]
 801237c:	d111      	bne.n	80123a2 <__ieee754_sqrt+0x17e>
 801237e:	3601      	adds	r6, #1
 8012380:	463c      	mov	r4, r7
 8012382:	1072      	asrs	r2, r6, #1
 8012384:	0863      	lsrs	r3, r4, #1
 8012386:	07f1      	lsls	r1, r6, #31
 8012388:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801238c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012390:	bf48      	it	mi
 8012392:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012396:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801239a:	4618      	mov	r0, r3
 801239c:	e756      	b.n	801224c <__ieee754_sqrt+0x28>
 801239e:	4690      	mov	r8, r2
 80123a0:	e7be      	b.n	8012320 <__ieee754_sqrt+0xfc>
 80123a2:	f7ed ff93 	bl	80002cc <__adddf3>
 80123a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80123aa:	4602      	mov	r2, r0
 80123ac:	460b      	mov	r3, r1
 80123ae:	4640      	mov	r0, r8
 80123b0:	4649      	mov	r1, r9
 80123b2:	f7ee fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80123b6:	b120      	cbz	r0, 80123c2 <__ieee754_sqrt+0x19e>
 80123b8:	1ca0      	adds	r0, r4, #2
 80123ba:	bf08      	it	eq
 80123bc:	3601      	addeq	r6, #1
 80123be:	3402      	adds	r4, #2
 80123c0:	e7df      	b.n	8012382 <__ieee754_sqrt+0x15e>
 80123c2:	1c63      	adds	r3, r4, #1
 80123c4:	f023 0401 	bic.w	r4, r3, #1
 80123c8:	e7db      	b.n	8012382 <__ieee754_sqrt+0x15e>
 80123ca:	bf00      	nop
 80123cc:	7ff00000 	.word	0x7ff00000
 80123d0:	20000210 	.word	0x20000210
 80123d4:	20000208 	.word	0x20000208

080123d8 <__ieee754_sqrtf>:
 80123d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80123dc:	4770      	bx	lr
	...

080123e0 <floor>:
 80123e0:	ec51 0b10 	vmov	r0, r1, d0
 80123e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80123f0:	2e13      	cmp	r6, #19
 80123f2:	460c      	mov	r4, r1
 80123f4:	4605      	mov	r5, r0
 80123f6:	4680      	mov	r8, r0
 80123f8:	dc34      	bgt.n	8012464 <floor+0x84>
 80123fa:	2e00      	cmp	r6, #0
 80123fc:	da17      	bge.n	801242e <floor+0x4e>
 80123fe:	a332      	add	r3, pc, #200	@ (adr r3, 80124c8 <floor+0xe8>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ed ff62 	bl	80002cc <__adddf3>
 8012408:	2200      	movs	r2, #0
 801240a:	2300      	movs	r3, #0
 801240c:	f7ee fba4 	bl	8000b58 <__aeabi_dcmpgt>
 8012410:	b150      	cbz	r0, 8012428 <floor+0x48>
 8012412:	2c00      	cmp	r4, #0
 8012414:	da55      	bge.n	80124c2 <floor+0xe2>
 8012416:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801241a:	432c      	orrs	r4, r5
 801241c:	2500      	movs	r5, #0
 801241e:	42ac      	cmp	r4, r5
 8012420:	4c2b      	ldr	r4, [pc, #172]	@ (80124d0 <floor+0xf0>)
 8012422:	bf08      	it	eq
 8012424:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012428:	4621      	mov	r1, r4
 801242a:	4628      	mov	r0, r5
 801242c:	e023      	b.n	8012476 <floor+0x96>
 801242e:	4f29      	ldr	r7, [pc, #164]	@ (80124d4 <floor+0xf4>)
 8012430:	4137      	asrs	r7, r6
 8012432:	ea01 0307 	and.w	r3, r1, r7
 8012436:	4303      	orrs	r3, r0
 8012438:	d01d      	beq.n	8012476 <floor+0x96>
 801243a:	a323      	add	r3, pc, #140	@ (adr r3, 80124c8 <floor+0xe8>)
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ed ff44 	bl	80002cc <__adddf3>
 8012444:	2200      	movs	r2, #0
 8012446:	2300      	movs	r3, #0
 8012448:	f7ee fb86 	bl	8000b58 <__aeabi_dcmpgt>
 801244c:	2800      	cmp	r0, #0
 801244e:	d0eb      	beq.n	8012428 <floor+0x48>
 8012450:	2c00      	cmp	r4, #0
 8012452:	bfbe      	ittt	lt
 8012454:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012458:	4133      	asrlt	r3, r6
 801245a:	18e4      	addlt	r4, r4, r3
 801245c:	ea24 0407 	bic.w	r4, r4, r7
 8012460:	2500      	movs	r5, #0
 8012462:	e7e1      	b.n	8012428 <floor+0x48>
 8012464:	2e33      	cmp	r6, #51	@ 0x33
 8012466:	dd0a      	ble.n	801247e <floor+0x9e>
 8012468:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801246c:	d103      	bne.n	8012476 <floor+0x96>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	f7ed ff2b 	bl	80002cc <__adddf3>
 8012476:	ec41 0b10 	vmov	d0, r0, r1
 801247a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801247e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8012482:	f04f 37ff 	mov.w	r7, #4294967295
 8012486:	40df      	lsrs	r7, r3
 8012488:	4207      	tst	r7, r0
 801248a:	d0f4      	beq.n	8012476 <floor+0x96>
 801248c:	a30e      	add	r3, pc, #56	@ (adr r3, 80124c8 <floor+0xe8>)
 801248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012492:	f7ed ff1b 	bl	80002cc <__adddf3>
 8012496:	2200      	movs	r2, #0
 8012498:	2300      	movs	r3, #0
 801249a:	f7ee fb5d 	bl	8000b58 <__aeabi_dcmpgt>
 801249e:	2800      	cmp	r0, #0
 80124a0:	d0c2      	beq.n	8012428 <floor+0x48>
 80124a2:	2c00      	cmp	r4, #0
 80124a4:	da0a      	bge.n	80124bc <floor+0xdc>
 80124a6:	2e14      	cmp	r6, #20
 80124a8:	d101      	bne.n	80124ae <floor+0xce>
 80124aa:	3401      	adds	r4, #1
 80124ac:	e006      	b.n	80124bc <floor+0xdc>
 80124ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80124b2:	2301      	movs	r3, #1
 80124b4:	40b3      	lsls	r3, r6
 80124b6:	441d      	add	r5, r3
 80124b8:	4545      	cmp	r5, r8
 80124ba:	d3f6      	bcc.n	80124aa <floor+0xca>
 80124bc:	ea25 0507 	bic.w	r5, r5, r7
 80124c0:	e7b2      	b.n	8012428 <floor+0x48>
 80124c2:	2500      	movs	r5, #0
 80124c4:	462c      	mov	r4, r5
 80124c6:	e7af      	b.n	8012428 <floor+0x48>
 80124c8:	8800759c 	.word	0x8800759c
 80124cc:	7e37e43c 	.word	0x7e37e43c
 80124d0:	bff00000 	.word	0xbff00000
 80124d4:	000fffff 	.word	0x000fffff

080124d8 <__ieee754_pow>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	b091      	sub	sp, #68	@ 0x44
 80124de:	ed8d 1b00 	vstr	d1, [sp]
 80124e2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80124e6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80124ea:	ea5a 0001 	orrs.w	r0, sl, r1
 80124ee:	ec57 6b10 	vmov	r6, r7, d0
 80124f2:	d113      	bne.n	801251c <__ieee754_pow+0x44>
 80124f4:	19b3      	adds	r3, r6, r6
 80124f6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80124fa:	4152      	adcs	r2, r2
 80124fc:	4298      	cmp	r0, r3
 80124fe:	4b98      	ldr	r3, [pc, #608]	@ (8012760 <__ieee754_pow+0x288>)
 8012500:	4193      	sbcs	r3, r2
 8012502:	f080 84ea 	bcs.w	8012eda <__ieee754_pow+0xa02>
 8012506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801250a:	4630      	mov	r0, r6
 801250c:	4639      	mov	r1, r7
 801250e:	f7ed fedd 	bl	80002cc <__adddf3>
 8012512:	ec41 0b10 	vmov	d0, r0, r1
 8012516:	b011      	add	sp, #68	@ 0x44
 8012518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251c:	4a91      	ldr	r2, [pc, #580]	@ (8012764 <__ieee754_pow+0x28c>)
 801251e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012522:	4590      	cmp	r8, r2
 8012524:	463d      	mov	r5, r7
 8012526:	4633      	mov	r3, r6
 8012528:	d806      	bhi.n	8012538 <__ieee754_pow+0x60>
 801252a:	d101      	bne.n	8012530 <__ieee754_pow+0x58>
 801252c:	2e00      	cmp	r6, #0
 801252e:	d1ea      	bne.n	8012506 <__ieee754_pow+0x2e>
 8012530:	4592      	cmp	sl, r2
 8012532:	d801      	bhi.n	8012538 <__ieee754_pow+0x60>
 8012534:	d10e      	bne.n	8012554 <__ieee754_pow+0x7c>
 8012536:	b169      	cbz	r1, 8012554 <__ieee754_pow+0x7c>
 8012538:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801253c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012540:	431d      	orrs	r5, r3
 8012542:	d1e0      	bne.n	8012506 <__ieee754_pow+0x2e>
 8012544:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012548:	18db      	adds	r3, r3, r3
 801254a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801254e:	4152      	adcs	r2, r2
 8012550:	429d      	cmp	r5, r3
 8012552:	e7d4      	b.n	80124fe <__ieee754_pow+0x26>
 8012554:	2d00      	cmp	r5, #0
 8012556:	46c3      	mov	fp, r8
 8012558:	da3a      	bge.n	80125d0 <__ieee754_pow+0xf8>
 801255a:	4a83      	ldr	r2, [pc, #524]	@ (8012768 <__ieee754_pow+0x290>)
 801255c:	4592      	cmp	sl, r2
 801255e:	d84d      	bhi.n	80125fc <__ieee754_pow+0x124>
 8012560:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012564:	4592      	cmp	sl, r2
 8012566:	f240 84c7 	bls.w	8012ef8 <__ieee754_pow+0xa20>
 801256a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801256e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012572:	2a14      	cmp	r2, #20
 8012574:	dd0f      	ble.n	8012596 <__ieee754_pow+0xbe>
 8012576:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801257a:	fa21 f402 	lsr.w	r4, r1, r2
 801257e:	fa04 f202 	lsl.w	r2, r4, r2
 8012582:	428a      	cmp	r2, r1
 8012584:	f040 84b8 	bne.w	8012ef8 <__ieee754_pow+0xa20>
 8012588:	f004 0401 	and.w	r4, r4, #1
 801258c:	f1c4 0402 	rsb	r4, r4, #2
 8012590:	2900      	cmp	r1, #0
 8012592:	d158      	bne.n	8012646 <__ieee754_pow+0x16e>
 8012594:	e00e      	b.n	80125b4 <__ieee754_pow+0xdc>
 8012596:	2900      	cmp	r1, #0
 8012598:	d154      	bne.n	8012644 <__ieee754_pow+0x16c>
 801259a:	f1c2 0214 	rsb	r2, r2, #20
 801259e:	fa4a f402 	asr.w	r4, sl, r2
 80125a2:	fa04 f202 	lsl.w	r2, r4, r2
 80125a6:	4552      	cmp	r2, sl
 80125a8:	f040 84a3 	bne.w	8012ef2 <__ieee754_pow+0xa1a>
 80125ac:	f004 0401 	and.w	r4, r4, #1
 80125b0:	f1c4 0402 	rsb	r4, r4, #2
 80125b4:	4a6d      	ldr	r2, [pc, #436]	@ (801276c <__ieee754_pow+0x294>)
 80125b6:	4592      	cmp	sl, r2
 80125b8:	d12e      	bne.n	8012618 <__ieee754_pow+0x140>
 80125ba:	f1b9 0f00 	cmp.w	r9, #0
 80125be:	f280 8494 	bge.w	8012eea <__ieee754_pow+0xa12>
 80125c2:	496a      	ldr	r1, [pc, #424]	@ (801276c <__ieee754_pow+0x294>)
 80125c4:	4632      	mov	r2, r6
 80125c6:	463b      	mov	r3, r7
 80125c8:	2000      	movs	r0, #0
 80125ca:	f7ee f95f 	bl	800088c <__aeabi_ddiv>
 80125ce:	e7a0      	b.n	8012512 <__ieee754_pow+0x3a>
 80125d0:	2400      	movs	r4, #0
 80125d2:	bbc1      	cbnz	r1, 8012646 <__ieee754_pow+0x16e>
 80125d4:	4a63      	ldr	r2, [pc, #396]	@ (8012764 <__ieee754_pow+0x28c>)
 80125d6:	4592      	cmp	sl, r2
 80125d8:	d1ec      	bne.n	80125b4 <__ieee754_pow+0xdc>
 80125da:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80125de:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80125e2:	431a      	orrs	r2, r3
 80125e4:	f000 8479 	beq.w	8012eda <__ieee754_pow+0xa02>
 80125e8:	4b61      	ldr	r3, [pc, #388]	@ (8012770 <__ieee754_pow+0x298>)
 80125ea:	4598      	cmp	r8, r3
 80125ec:	d908      	bls.n	8012600 <__ieee754_pow+0x128>
 80125ee:	f1b9 0f00 	cmp.w	r9, #0
 80125f2:	f2c0 8476 	blt.w	8012ee2 <__ieee754_pow+0xa0a>
 80125f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125fa:	e78a      	b.n	8012512 <__ieee754_pow+0x3a>
 80125fc:	2402      	movs	r4, #2
 80125fe:	e7e8      	b.n	80125d2 <__ieee754_pow+0xfa>
 8012600:	f1b9 0f00 	cmp.w	r9, #0
 8012604:	f04f 0000 	mov.w	r0, #0
 8012608:	f04f 0100 	mov.w	r1, #0
 801260c:	da81      	bge.n	8012512 <__ieee754_pow+0x3a>
 801260e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012612:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012616:	e77c      	b.n	8012512 <__ieee754_pow+0x3a>
 8012618:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801261c:	d106      	bne.n	801262c <__ieee754_pow+0x154>
 801261e:	4632      	mov	r2, r6
 8012620:	463b      	mov	r3, r7
 8012622:	4630      	mov	r0, r6
 8012624:	4639      	mov	r1, r7
 8012626:	f7ee f807 	bl	8000638 <__aeabi_dmul>
 801262a:	e772      	b.n	8012512 <__ieee754_pow+0x3a>
 801262c:	4a51      	ldr	r2, [pc, #324]	@ (8012774 <__ieee754_pow+0x29c>)
 801262e:	4591      	cmp	r9, r2
 8012630:	d109      	bne.n	8012646 <__ieee754_pow+0x16e>
 8012632:	2d00      	cmp	r5, #0
 8012634:	db07      	blt.n	8012646 <__ieee754_pow+0x16e>
 8012636:	ec47 6b10 	vmov	d0, r6, r7
 801263a:	b011      	add	sp, #68	@ 0x44
 801263c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012640:	f7ff bdf0 	b.w	8012224 <__ieee754_sqrt>
 8012644:	2400      	movs	r4, #0
 8012646:	ec47 6b10 	vmov	d0, r6, r7
 801264a:	9302      	str	r3, [sp, #8]
 801264c:	f000 fc88 	bl	8012f60 <fabs>
 8012650:	9b02      	ldr	r3, [sp, #8]
 8012652:	ec51 0b10 	vmov	r0, r1, d0
 8012656:	bb53      	cbnz	r3, 80126ae <__ieee754_pow+0x1d6>
 8012658:	4b44      	ldr	r3, [pc, #272]	@ (801276c <__ieee754_pow+0x294>)
 801265a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801265e:	429a      	cmp	r2, r3
 8012660:	d002      	beq.n	8012668 <__ieee754_pow+0x190>
 8012662:	f1b8 0f00 	cmp.w	r8, #0
 8012666:	d122      	bne.n	80126ae <__ieee754_pow+0x1d6>
 8012668:	f1b9 0f00 	cmp.w	r9, #0
 801266c:	da05      	bge.n	801267a <__ieee754_pow+0x1a2>
 801266e:	4602      	mov	r2, r0
 8012670:	460b      	mov	r3, r1
 8012672:	2000      	movs	r0, #0
 8012674:	493d      	ldr	r1, [pc, #244]	@ (801276c <__ieee754_pow+0x294>)
 8012676:	f7ee f909 	bl	800088c <__aeabi_ddiv>
 801267a:	2d00      	cmp	r5, #0
 801267c:	f6bf af49 	bge.w	8012512 <__ieee754_pow+0x3a>
 8012680:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012684:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012688:	ea58 0804 	orrs.w	r8, r8, r4
 801268c:	d108      	bne.n	80126a0 <__ieee754_pow+0x1c8>
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4610      	mov	r0, r2
 8012694:	4619      	mov	r1, r3
 8012696:	f7ed fe17 	bl	80002c8 <__aeabi_dsub>
 801269a:	4602      	mov	r2, r0
 801269c:	460b      	mov	r3, r1
 801269e:	e794      	b.n	80125ca <__ieee754_pow+0xf2>
 80126a0:	2c01      	cmp	r4, #1
 80126a2:	f47f af36 	bne.w	8012512 <__ieee754_pow+0x3a>
 80126a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80126aa:	4619      	mov	r1, r3
 80126ac:	e731      	b.n	8012512 <__ieee754_pow+0x3a>
 80126ae:	0feb      	lsrs	r3, r5, #31
 80126b0:	3b01      	subs	r3, #1
 80126b2:	ea53 0204 	orrs.w	r2, r3, r4
 80126b6:	d102      	bne.n	80126be <__ieee754_pow+0x1e6>
 80126b8:	4632      	mov	r2, r6
 80126ba:	463b      	mov	r3, r7
 80126bc:	e7e9      	b.n	8012692 <__ieee754_pow+0x1ba>
 80126be:	3c01      	subs	r4, #1
 80126c0:	431c      	orrs	r4, r3
 80126c2:	d016      	beq.n	80126f2 <__ieee754_pow+0x21a>
 80126c4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012750 <__ieee754_pow+0x278>
 80126c8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80126cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126d0:	f240 8112 	bls.w	80128f8 <__ieee754_pow+0x420>
 80126d4:	4b28      	ldr	r3, [pc, #160]	@ (8012778 <__ieee754_pow+0x2a0>)
 80126d6:	459a      	cmp	sl, r3
 80126d8:	4b25      	ldr	r3, [pc, #148]	@ (8012770 <__ieee754_pow+0x298>)
 80126da:	d916      	bls.n	801270a <__ieee754_pow+0x232>
 80126dc:	4598      	cmp	r8, r3
 80126de:	d80b      	bhi.n	80126f8 <__ieee754_pow+0x220>
 80126e0:	f1b9 0f00 	cmp.w	r9, #0
 80126e4:	da0b      	bge.n	80126fe <__ieee754_pow+0x226>
 80126e6:	2000      	movs	r0, #0
 80126e8:	b011      	add	sp, #68	@ 0x44
 80126ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ee:	f000 bdeb 	b.w	80132c8 <__math_oflow>
 80126f2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8012758 <__ieee754_pow+0x280>
 80126f6:	e7e7      	b.n	80126c8 <__ieee754_pow+0x1f0>
 80126f8:	f1b9 0f00 	cmp.w	r9, #0
 80126fc:	dcf3      	bgt.n	80126e6 <__ieee754_pow+0x20e>
 80126fe:	2000      	movs	r0, #0
 8012700:	b011      	add	sp, #68	@ 0x44
 8012702:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012706:	f000 bdd7 	b.w	80132b8 <__math_uflow>
 801270a:	4598      	cmp	r8, r3
 801270c:	d20c      	bcs.n	8012728 <__ieee754_pow+0x250>
 801270e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012712:	2200      	movs	r2, #0
 8012714:	2300      	movs	r3, #0
 8012716:	f7ee fa01 	bl	8000b1c <__aeabi_dcmplt>
 801271a:	3800      	subs	r0, #0
 801271c:	bf18      	it	ne
 801271e:	2001      	movne	r0, #1
 8012720:	f1b9 0f00 	cmp.w	r9, #0
 8012724:	daec      	bge.n	8012700 <__ieee754_pow+0x228>
 8012726:	e7df      	b.n	80126e8 <__ieee754_pow+0x210>
 8012728:	4b10      	ldr	r3, [pc, #64]	@ (801276c <__ieee754_pow+0x294>)
 801272a:	4598      	cmp	r8, r3
 801272c:	f04f 0200 	mov.w	r2, #0
 8012730:	d924      	bls.n	801277c <__ieee754_pow+0x2a4>
 8012732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012736:	2300      	movs	r3, #0
 8012738:	f7ee f9f0 	bl	8000b1c <__aeabi_dcmplt>
 801273c:	3800      	subs	r0, #0
 801273e:	bf18      	it	ne
 8012740:	2001      	movne	r0, #1
 8012742:	f1b9 0f00 	cmp.w	r9, #0
 8012746:	dccf      	bgt.n	80126e8 <__ieee754_pow+0x210>
 8012748:	e7da      	b.n	8012700 <__ieee754_pow+0x228>
 801274a:	bf00      	nop
 801274c:	f3af 8000 	nop.w
 8012750:	00000000 	.word	0x00000000
 8012754:	3ff00000 	.word	0x3ff00000
 8012758:	00000000 	.word	0x00000000
 801275c:	bff00000 	.word	0xbff00000
 8012760:	fff00000 	.word	0xfff00000
 8012764:	7ff00000 	.word	0x7ff00000
 8012768:	433fffff 	.word	0x433fffff
 801276c:	3ff00000 	.word	0x3ff00000
 8012770:	3fefffff 	.word	0x3fefffff
 8012774:	3fe00000 	.word	0x3fe00000
 8012778:	43f00000 	.word	0x43f00000
 801277c:	4b5a      	ldr	r3, [pc, #360]	@ (80128e8 <__ieee754_pow+0x410>)
 801277e:	f7ed fda3 	bl	80002c8 <__aeabi_dsub>
 8012782:	a351      	add	r3, pc, #324	@ (adr r3, 80128c8 <__ieee754_pow+0x3f0>)
 8012784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012788:	4604      	mov	r4, r0
 801278a:	460d      	mov	r5, r1
 801278c:	f7ed ff54 	bl	8000638 <__aeabi_dmul>
 8012790:	a34f      	add	r3, pc, #316	@ (adr r3, 80128d0 <__ieee754_pow+0x3f8>)
 8012792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012796:	4606      	mov	r6, r0
 8012798:	460f      	mov	r7, r1
 801279a:	4620      	mov	r0, r4
 801279c:	4629      	mov	r1, r5
 801279e:	f7ed ff4b 	bl	8000638 <__aeabi_dmul>
 80127a2:	4b52      	ldr	r3, [pc, #328]	@ (80128ec <__ieee754_pow+0x414>)
 80127a4:	4682      	mov	sl, r0
 80127a6:	468b      	mov	fp, r1
 80127a8:	2200      	movs	r2, #0
 80127aa:	4620      	mov	r0, r4
 80127ac:	4629      	mov	r1, r5
 80127ae:	f7ed ff43 	bl	8000638 <__aeabi_dmul>
 80127b2:	4602      	mov	r2, r0
 80127b4:	460b      	mov	r3, r1
 80127b6:	a148      	add	r1, pc, #288	@ (adr r1, 80128d8 <__ieee754_pow+0x400>)
 80127b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127bc:	f7ed fd84 	bl	80002c8 <__aeabi_dsub>
 80127c0:	4622      	mov	r2, r4
 80127c2:	462b      	mov	r3, r5
 80127c4:	f7ed ff38 	bl	8000638 <__aeabi_dmul>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	2000      	movs	r0, #0
 80127ce:	4948      	ldr	r1, [pc, #288]	@ (80128f0 <__ieee754_pow+0x418>)
 80127d0:	f7ed fd7a 	bl	80002c8 <__aeabi_dsub>
 80127d4:	4622      	mov	r2, r4
 80127d6:	4680      	mov	r8, r0
 80127d8:	4689      	mov	r9, r1
 80127da:	462b      	mov	r3, r5
 80127dc:	4620      	mov	r0, r4
 80127de:	4629      	mov	r1, r5
 80127e0:	f7ed ff2a 	bl	8000638 <__aeabi_dmul>
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	4640      	mov	r0, r8
 80127ea:	4649      	mov	r1, r9
 80127ec:	f7ed ff24 	bl	8000638 <__aeabi_dmul>
 80127f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80128e0 <__ieee754_pow+0x408>)
 80127f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f6:	f7ed ff1f 	bl	8000638 <__aeabi_dmul>
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	4650      	mov	r0, sl
 8012800:	4659      	mov	r1, fp
 8012802:	f7ed fd61 	bl	80002c8 <__aeabi_dsub>
 8012806:	4602      	mov	r2, r0
 8012808:	460b      	mov	r3, r1
 801280a:	4680      	mov	r8, r0
 801280c:	4689      	mov	r9, r1
 801280e:	4630      	mov	r0, r6
 8012810:	4639      	mov	r1, r7
 8012812:	f7ed fd5b 	bl	80002cc <__adddf3>
 8012816:	2400      	movs	r4, #0
 8012818:	4632      	mov	r2, r6
 801281a:	463b      	mov	r3, r7
 801281c:	4620      	mov	r0, r4
 801281e:	460d      	mov	r5, r1
 8012820:	f7ed fd52 	bl	80002c8 <__aeabi_dsub>
 8012824:	4602      	mov	r2, r0
 8012826:	460b      	mov	r3, r1
 8012828:	4640      	mov	r0, r8
 801282a:	4649      	mov	r1, r9
 801282c:	f7ed fd4c 	bl	80002c8 <__aeabi_dsub>
 8012830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012834:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012838:	2300      	movs	r3, #0
 801283a:	9304      	str	r3, [sp, #16]
 801283c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012840:	4606      	mov	r6, r0
 8012842:	460f      	mov	r7, r1
 8012844:	4652      	mov	r2, sl
 8012846:	465b      	mov	r3, fp
 8012848:	e9dd 0100 	ldrd	r0, r1, [sp]
 801284c:	f7ed fd3c 	bl	80002c8 <__aeabi_dsub>
 8012850:	4622      	mov	r2, r4
 8012852:	462b      	mov	r3, r5
 8012854:	f7ed fef0 	bl	8000638 <__aeabi_dmul>
 8012858:	e9dd 2300 	ldrd	r2, r3, [sp]
 801285c:	4680      	mov	r8, r0
 801285e:	4689      	mov	r9, r1
 8012860:	4630      	mov	r0, r6
 8012862:	4639      	mov	r1, r7
 8012864:	f7ed fee8 	bl	8000638 <__aeabi_dmul>
 8012868:	4602      	mov	r2, r0
 801286a:	460b      	mov	r3, r1
 801286c:	4640      	mov	r0, r8
 801286e:	4649      	mov	r1, r9
 8012870:	f7ed fd2c 	bl	80002cc <__adddf3>
 8012874:	4652      	mov	r2, sl
 8012876:	465b      	mov	r3, fp
 8012878:	4606      	mov	r6, r0
 801287a:	460f      	mov	r7, r1
 801287c:	4620      	mov	r0, r4
 801287e:	4629      	mov	r1, r5
 8012880:	f7ed feda 	bl	8000638 <__aeabi_dmul>
 8012884:	460b      	mov	r3, r1
 8012886:	4602      	mov	r2, r0
 8012888:	4680      	mov	r8, r0
 801288a:	4689      	mov	r9, r1
 801288c:	4630      	mov	r0, r6
 801288e:	4639      	mov	r1, r7
 8012890:	f7ed fd1c 	bl	80002cc <__adddf3>
 8012894:	4b17      	ldr	r3, [pc, #92]	@ (80128f4 <__ieee754_pow+0x41c>)
 8012896:	4299      	cmp	r1, r3
 8012898:	4604      	mov	r4, r0
 801289a:	460d      	mov	r5, r1
 801289c:	468a      	mov	sl, r1
 801289e:	468b      	mov	fp, r1
 80128a0:	f340 82ef 	ble.w	8012e82 <__ieee754_pow+0x9aa>
 80128a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80128a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80128ac:	4303      	orrs	r3, r0
 80128ae:	f000 81e8 	beq.w	8012c82 <__ieee754_pow+0x7aa>
 80128b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128b6:	2200      	movs	r2, #0
 80128b8:	2300      	movs	r3, #0
 80128ba:	f7ee f92f 	bl	8000b1c <__aeabi_dcmplt>
 80128be:	3800      	subs	r0, #0
 80128c0:	bf18      	it	ne
 80128c2:	2001      	movne	r0, #1
 80128c4:	e710      	b.n	80126e8 <__ieee754_pow+0x210>
 80128c6:	bf00      	nop
 80128c8:	60000000 	.word	0x60000000
 80128cc:	3ff71547 	.word	0x3ff71547
 80128d0:	f85ddf44 	.word	0xf85ddf44
 80128d4:	3e54ae0b 	.word	0x3e54ae0b
 80128d8:	55555555 	.word	0x55555555
 80128dc:	3fd55555 	.word	0x3fd55555
 80128e0:	652b82fe 	.word	0x652b82fe
 80128e4:	3ff71547 	.word	0x3ff71547
 80128e8:	3ff00000 	.word	0x3ff00000
 80128ec:	3fd00000 	.word	0x3fd00000
 80128f0:	3fe00000 	.word	0x3fe00000
 80128f4:	408fffff 	.word	0x408fffff
 80128f8:	4bd5      	ldr	r3, [pc, #852]	@ (8012c50 <__ieee754_pow+0x778>)
 80128fa:	402b      	ands	r3, r5
 80128fc:	2200      	movs	r2, #0
 80128fe:	b92b      	cbnz	r3, 801290c <__ieee754_pow+0x434>
 8012900:	4bd4      	ldr	r3, [pc, #848]	@ (8012c54 <__ieee754_pow+0x77c>)
 8012902:	f7ed fe99 	bl	8000638 <__aeabi_dmul>
 8012906:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801290a:	468b      	mov	fp, r1
 801290c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012910:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012914:	4413      	add	r3, r2
 8012916:	930a      	str	r3, [sp, #40]	@ 0x28
 8012918:	4bcf      	ldr	r3, [pc, #828]	@ (8012c58 <__ieee754_pow+0x780>)
 801291a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801291e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012922:	459b      	cmp	fp, r3
 8012924:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012928:	dd08      	ble.n	801293c <__ieee754_pow+0x464>
 801292a:	4bcc      	ldr	r3, [pc, #816]	@ (8012c5c <__ieee754_pow+0x784>)
 801292c:	459b      	cmp	fp, r3
 801292e:	f340 81a5 	ble.w	8012c7c <__ieee754_pow+0x7a4>
 8012932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012934:	3301      	adds	r3, #1
 8012936:	930a      	str	r3, [sp, #40]	@ 0x28
 8012938:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801293c:	f04f 0a00 	mov.w	sl, #0
 8012940:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012944:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012946:	4bc6      	ldr	r3, [pc, #792]	@ (8012c60 <__ieee754_pow+0x788>)
 8012948:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801294c:	ed93 7b00 	vldr	d7, [r3]
 8012950:	4629      	mov	r1, r5
 8012952:	ec53 2b17 	vmov	r2, r3, d7
 8012956:	ed8d 7b06 	vstr	d7, [sp, #24]
 801295a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801295e:	f7ed fcb3 	bl	80002c8 <__aeabi_dsub>
 8012962:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012966:	4606      	mov	r6, r0
 8012968:	460f      	mov	r7, r1
 801296a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801296e:	f7ed fcad 	bl	80002cc <__adddf3>
 8012972:	4602      	mov	r2, r0
 8012974:	460b      	mov	r3, r1
 8012976:	2000      	movs	r0, #0
 8012978:	49ba      	ldr	r1, [pc, #744]	@ (8012c64 <__ieee754_pow+0x78c>)
 801297a:	f7ed ff87 	bl	800088c <__aeabi_ddiv>
 801297e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012982:	4602      	mov	r2, r0
 8012984:	460b      	mov	r3, r1
 8012986:	4630      	mov	r0, r6
 8012988:	4639      	mov	r1, r7
 801298a:	f7ed fe55 	bl	8000638 <__aeabi_dmul>
 801298e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012992:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012996:	106d      	asrs	r5, r5, #1
 8012998:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801299c:	f04f 0b00 	mov.w	fp, #0
 80129a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80129a4:	4661      	mov	r1, ip
 80129a6:	2200      	movs	r2, #0
 80129a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80129ac:	4658      	mov	r0, fp
 80129ae:	46e1      	mov	r9, ip
 80129b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80129b4:	4614      	mov	r4, r2
 80129b6:	461d      	mov	r5, r3
 80129b8:	f7ed fe3e 	bl	8000638 <__aeabi_dmul>
 80129bc:	4602      	mov	r2, r0
 80129be:	460b      	mov	r3, r1
 80129c0:	4630      	mov	r0, r6
 80129c2:	4639      	mov	r1, r7
 80129c4:	f7ed fc80 	bl	80002c8 <__aeabi_dsub>
 80129c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129cc:	4606      	mov	r6, r0
 80129ce:	460f      	mov	r7, r1
 80129d0:	4620      	mov	r0, r4
 80129d2:	4629      	mov	r1, r5
 80129d4:	f7ed fc78 	bl	80002c8 <__aeabi_dsub>
 80129d8:	4602      	mov	r2, r0
 80129da:	460b      	mov	r3, r1
 80129dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80129e0:	f7ed fc72 	bl	80002c8 <__aeabi_dsub>
 80129e4:	465a      	mov	r2, fp
 80129e6:	464b      	mov	r3, r9
 80129e8:	f7ed fe26 	bl	8000638 <__aeabi_dmul>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	4630      	mov	r0, r6
 80129f2:	4639      	mov	r1, r7
 80129f4:	f7ed fc68 	bl	80002c8 <__aeabi_dsub>
 80129f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80129fc:	f7ed fe1c 	bl	8000638 <__aeabi_dmul>
 8012a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a08:	4610      	mov	r0, r2
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	f7ed fe14 	bl	8000638 <__aeabi_dmul>
 8012a10:	a37d      	add	r3, pc, #500	@ (adr r3, 8012c08 <__ieee754_pow+0x730>)
 8012a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a16:	4604      	mov	r4, r0
 8012a18:	460d      	mov	r5, r1
 8012a1a:	f7ed fe0d 	bl	8000638 <__aeabi_dmul>
 8012a1e:	a37c      	add	r3, pc, #496	@ (adr r3, 8012c10 <__ieee754_pow+0x738>)
 8012a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a24:	f7ed fc52 	bl	80002cc <__adddf3>
 8012a28:	4622      	mov	r2, r4
 8012a2a:	462b      	mov	r3, r5
 8012a2c:	f7ed fe04 	bl	8000638 <__aeabi_dmul>
 8012a30:	a379      	add	r3, pc, #484	@ (adr r3, 8012c18 <__ieee754_pow+0x740>)
 8012a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a36:	f7ed fc49 	bl	80002cc <__adddf3>
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	462b      	mov	r3, r5
 8012a3e:	f7ed fdfb 	bl	8000638 <__aeabi_dmul>
 8012a42:	a377      	add	r3, pc, #476	@ (adr r3, 8012c20 <__ieee754_pow+0x748>)
 8012a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a48:	f7ed fc40 	bl	80002cc <__adddf3>
 8012a4c:	4622      	mov	r2, r4
 8012a4e:	462b      	mov	r3, r5
 8012a50:	f7ed fdf2 	bl	8000638 <__aeabi_dmul>
 8012a54:	a374      	add	r3, pc, #464	@ (adr r3, 8012c28 <__ieee754_pow+0x750>)
 8012a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5a:	f7ed fc37 	bl	80002cc <__adddf3>
 8012a5e:	4622      	mov	r2, r4
 8012a60:	462b      	mov	r3, r5
 8012a62:	f7ed fde9 	bl	8000638 <__aeabi_dmul>
 8012a66:	a372      	add	r3, pc, #456	@ (adr r3, 8012c30 <__ieee754_pow+0x758>)
 8012a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6c:	f7ed fc2e 	bl	80002cc <__adddf3>
 8012a70:	4622      	mov	r2, r4
 8012a72:	4606      	mov	r6, r0
 8012a74:	460f      	mov	r7, r1
 8012a76:	462b      	mov	r3, r5
 8012a78:	4620      	mov	r0, r4
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	f7ed fddc 	bl	8000638 <__aeabi_dmul>
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	4630      	mov	r0, r6
 8012a86:	4639      	mov	r1, r7
 8012a88:	f7ed fdd6 	bl	8000638 <__aeabi_dmul>
 8012a8c:	465a      	mov	r2, fp
 8012a8e:	4604      	mov	r4, r0
 8012a90:	460d      	mov	r5, r1
 8012a92:	464b      	mov	r3, r9
 8012a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a98:	f7ed fc18 	bl	80002cc <__adddf3>
 8012a9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012aa0:	f7ed fdca 	bl	8000638 <__aeabi_dmul>
 8012aa4:	4622      	mov	r2, r4
 8012aa6:	462b      	mov	r3, r5
 8012aa8:	f7ed fc10 	bl	80002cc <__adddf3>
 8012aac:	465a      	mov	r2, fp
 8012aae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ab2:	464b      	mov	r3, r9
 8012ab4:	4658      	mov	r0, fp
 8012ab6:	4649      	mov	r1, r9
 8012ab8:	f7ed fdbe 	bl	8000638 <__aeabi_dmul>
 8012abc:	4b6a      	ldr	r3, [pc, #424]	@ (8012c68 <__ieee754_pow+0x790>)
 8012abe:	2200      	movs	r2, #0
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	460f      	mov	r7, r1
 8012ac4:	f7ed fc02 	bl	80002cc <__adddf3>
 8012ac8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012acc:	f7ed fbfe 	bl	80002cc <__adddf3>
 8012ad0:	46d8      	mov	r8, fp
 8012ad2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012ad6:	460d      	mov	r5, r1
 8012ad8:	465a      	mov	r2, fp
 8012ada:	460b      	mov	r3, r1
 8012adc:	4640      	mov	r0, r8
 8012ade:	4649      	mov	r1, r9
 8012ae0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012ae4:	f7ed fda8 	bl	8000638 <__aeabi_dmul>
 8012ae8:	465c      	mov	r4, fp
 8012aea:	4680      	mov	r8, r0
 8012aec:	4689      	mov	r9, r1
 8012aee:	4b5e      	ldr	r3, [pc, #376]	@ (8012c68 <__ieee754_pow+0x790>)
 8012af0:	2200      	movs	r2, #0
 8012af2:	4620      	mov	r0, r4
 8012af4:	4629      	mov	r1, r5
 8012af6:	f7ed fbe7 	bl	80002c8 <__aeabi_dsub>
 8012afa:	4632      	mov	r2, r6
 8012afc:	463b      	mov	r3, r7
 8012afe:	f7ed fbe3 	bl	80002c8 <__aeabi_dsub>
 8012b02:	4602      	mov	r2, r0
 8012b04:	460b      	mov	r3, r1
 8012b06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012b0a:	f7ed fbdd 	bl	80002c8 <__aeabi_dsub>
 8012b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b12:	f7ed fd91 	bl	8000638 <__aeabi_dmul>
 8012b16:	4622      	mov	r2, r4
 8012b18:	4606      	mov	r6, r0
 8012b1a:	460f      	mov	r7, r1
 8012b1c:	462b      	mov	r3, r5
 8012b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b22:	f7ed fd89 	bl	8000638 <__aeabi_dmul>
 8012b26:	4602      	mov	r2, r0
 8012b28:	460b      	mov	r3, r1
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	4639      	mov	r1, r7
 8012b2e:	f7ed fbcd 	bl	80002cc <__adddf3>
 8012b32:	4606      	mov	r6, r0
 8012b34:	460f      	mov	r7, r1
 8012b36:	4602      	mov	r2, r0
 8012b38:	460b      	mov	r3, r1
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	4649      	mov	r1, r9
 8012b3e:	f7ed fbc5 	bl	80002cc <__adddf3>
 8012b42:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012b46:	a33c      	add	r3, pc, #240	@ (adr r3, 8012c38 <__ieee754_pow+0x760>)
 8012b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4c:	4658      	mov	r0, fp
 8012b4e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012b52:	460d      	mov	r5, r1
 8012b54:	f7ed fd70 	bl	8000638 <__aeabi_dmul>
 8012b58:	465c      	mov	r4, fp
 8012b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b5e:	4642      	mov	r2, r8
 8012b60:	464b      	mov	r3, r9
 8012b62:	4620      	mov	r0, r4
 8012b64:	4629      	mov	r1, r5
 8012b66:	f7ed fbaf 	bl	80002c8 <__aeabi_dsub>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	4630      	mov	r0, r6
 8012b70:	4639      	mov	r1, r7
 8012b72:	f7ed fba9 	bl	80002c8 <__aeabi_dsub>
 8012b76:	a332      	add	r3, pc, #200	@ (adr r3, 8012c40 <__ieee754_pow+0x768>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	f7ed fd5c 	bl	8000638 <__aeabi_dmul>
 8012b80:	a331      	add	r3, pc, #196	@ (adr r3, 8012c48 <__ieee754_pow+0x770>)
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	4606      	mov	r6, r0
 8012b88:	460f      	mov	r7, r1
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	f7ed fd53 	bl	8000638 <__aeabi_dmul>
 8012b92:	4602      	mov	r2, r0
 8012b94:	460b      	mov	r3, r1
 8012b96:	4630      	mov	r0, r6
 8012b98:	4639      	mov	r1, r7
 8012b9a:	f7ed fb97 	bl	80002cc <__adddf3>
 8012b9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ba0:	4b32      	ldr	r3, [pc, #200]	@ (8012c6c <__ieee754_pow+0x794>)
 8012ba2:	4413      	add	r3, r2
 8012ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba8:	f7ed fb90 	bl	80002cc <__adddf3>
 8012bac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012bb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012bb2:	f7ed fcd7 	bl	8000564 <__aeabi_i2d>
 8012bb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8012c70 <__ieee754_pow+0x798>)
 8012bba:	4413      	add	r3, r2
 8012bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bc0:	4606      	mov	r6, r0
 8012bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012bc6:	460f      	mov	r7, r1
 8012bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bcc:	f7ed fb7e 	bl	80002cc <__adddf3>
 8012bd0:	4642      	mov	r2, r8
 8012bd2:	464b      	mov	r3, r9
 8012bd4:	f7ed fb7a 	bl	80002cc <__adddf3>
 8012bd8:	4632      	mov	r2, r6
 8012bda:	463b      	mov	r3, r7
 8012bdc:	f7ed fb76 	bl	80002cc <__adddf3>
 8012be0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012be4:	4632      	mov	r2, r6
 8012be6:	463b      	mov	r3, r7
 8012be8:	4658      	mov	r0, fp
 8012bea:	460d      	mov	r5, r1
 8012bec:	f7ed fb6c 	bl	80002c8 <__aeabi_dsub>
 8012bf0:	4642      	mov	r2, r8
 8012bf2:	464b      	mov	r3, r9
 8012bf4:	f7ed fb68 	bl	80002c8 <__aeabi_dsub>
 8012bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bfc:	f7ed fb64 	bl	80002c8 <__aeabi_dsub>
 8012c00:	465c      	mov	r4, fp
 8012c02:	4602      	mov	r2, r0
 8012c04:	e036      	b.n	8012c74 <__ieee754_pow+0x79c>
 8012c06:	bf00      	nop
 8012c08:	4a454eef 	.word	0x4a454eef
 8012c0c:	3fca7e28 	.word	0x3fca7e28
 8012c10:	93c9db65 	.word	0x93c9db65
 8012c14:	3fcd864a 	.word	0x3fcd864a
 8012c18:	a91d4101 	.word	0xa91d4101
 8012c1c:	3fd17460 	.word	0x3fd17460
 8012c20:	518f264d 	.word	0x518f264d
 8012c24:	3fd55555 	.word	0x3fd55555
 8012c28:	db6fabff 	.word	0xdb6fabff
 8012c2c:	3fdb6db6 	.word	0x3fdb6db6
 8012c30:	33333303 	.word	0x33333303
 8012c34:	3fe33333 	.word	0x3fe33333
 8012c38:	e0000000 	.word	0xe0000000
 8012c3c:	3feec709 	.word	0x3feec709
 8012c40:	dc3a03fd 	.word	0xdc3a03fd
 8012c44:	3feec709 	.word	0x3feec709
 8012c48:	145b01f5 	.word	0x145b01f5
 8012c4c:	be3e2fe0 	.word	0xbe3e2fe0
 8012c50:	7ff00000 	.word	0x7ff00000
 8012c54:	43400000 	.word	0x43400000
 8012c58:	0003988e 	.word	0x0003988e
 8012c5c:	000bb679 	.word	0x000bb679
 8012c60:	08013900 	.word	0x08013900
 8012c64:	3ff00000 	.word	0x3ff00000
 8012c68:	40080000 	.word	0x40080000
 8012c6c:	080138e0 	.word	0x080138e0
 8012c70:	080138f0 	.word	0x080138f0
 8012c74:	460b      	mov	r3, r1
 8012c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c7a:	e5d7      	b.n	801282c <__ieee754_pow+0x354>
 8012c7c:	f04f 0a01 	mov.w	sl, #1
 8012c80:	e65e      	b.n	8012940 <__ieee754_pow+0x468>
 8012c82:	a3b4      	add	r3, pc, #720	@ (adr r3, 8012f54 <__ieee754_pow+0xa7c>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	4630      	mov	r0, r6
 8012c8a:	4639      	mov	r1, r7
 8012c8c:	f7ed fb1e 	bl	80002cc <__adddf3>
 8012c90:	4642      	mov	r2, r8
 8012c92:	e9cd 0100 	strd	r0, r1, [sp]
 8012c96:	464b      	mov	r3, r9
 8012c98:	4620      	mov	r0, r4
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	f7ed fb14 	bl	80002c8 <__aeabi_dsub>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ca8:	f7ed ff56 	bl	8000b58 <__aeabi_dcmpgt>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	f47f ae00 	bne.w	80128b2 <__ieee754_pow+0x3da>
 8012cb2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8012cb6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012cba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012cbe:	fa43 fa0a 	asr.w	sl, r3, sl
 8012cc2:	44da      	add	sl, fp
 8012cc4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012cc8:	489d      	ldr	r0, [pc, #628]	@ (8012f40 <__ieee754_pow+0xa68>)
 8012cca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012cce:	4108      	asrs	r0, r1
 8012cd0:	ea00 030a 	and.w	r3, r0, sl
 8012cd4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012cd8:	f1c1 0114 	rsb	r1, r1, #20
 8012cdc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012ce0:	fa4a fa01 	asr.w	sl, sl, r1
 8012ce4:	f1bb 0f00 	cmp.w	fp, #0
 8012ce8:	4640      	mov	r0, r8
 8012cea:	4649      	mov	r1, r9
 8012cec:	f04f 0200 	mov.w	r2, #0
 8012cf0:	bfb8      	it	lt
 8012cf2:	f1ca 0a00 	rsblt	sl, sl, #0
 8012cf6:	f7ed fae7 	bl	80002c8 <__aeabi_dsub>
 8012cfa:	4680      	mov	r8, r0
 8012cfc:	4689      	mov	r9, r1
 8012cfe:	4632      	mov	r2, r6
 8012d00:	463b      	mov	r3, r7
 8012d02:	4640      	mov	r0, r8
 8012d04:	4649      	mov	r1, r9
 8012d06:	f7ed fae1 	bl	80002cc <__adddf3>
 8012d0a:	2400      	movs	r4, #0
 8012d0c:	a37c      	add	r3, pc, #496	@ (adr r3, 8012f00 <__ieee754_pow+0xa28>)
 8012d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d12:	4620      	mov	r0, r4
 8012d14:	460d      	mov	r5, r1
 8012d16:	f7ed fc8f 	bl	8000638 <__aeabi_dmul>
 8012d1a:	4642      	mov	r2, r8
 8012d1c:	e9cd 0100 	strd	r0, r1, [sp]
 8012d20:	464b      	mov	r3, r9
 8012d22:	4620      	mov	r0, r4
 8012d24:	4629      	mov	r1, r5
 8012d26:	f7ed facf 	bl	80002c8 <__aeabi_dsub>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	4630      	mov	r0, r6
 8012d30:	4639      	mov	r1, r7
 8012d32:	f7ed fac9 	bl	80002c8 <__aeabi_dsub>
 8012d36:	a374      	add	r3, pc, #464	@ (adr r3, 8012f08 <__ieee754_pow+0xa30>)
 8012d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3c:	f7ed fc7c 	bl	8000638 <__aeabi_dmul>
 8012d40:	a373      	add	r3, pc, #460	@ (adr r3, 8012f10 <__ieee754_pow+0xa38>)
 8012d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d46:	4680      	mov	r8, r0
 8012d48:	4689      	mov	r9, r1
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	f7ed fc73 	bl	8000638 <__aeabi_dmul>
 8012d52:	4602      	mov	r2, r0
 8012d54:	460b      	mov	r3, r1
 8012d56:	4640      	mov	r0, r8
 8012d58:	4649      	mov	r1, r9
 8012d5a:	f7ed fab7 	bl	80002cc <__adddf3>
 8012d5e:	4604      	mov	r4, r0
 8012d60:	460d      	mov	r5, r1
 8012d62:	4602      	mov	r2, r0
 8012d64:	460b      	mov	r3, r1
 8012d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d6a:	f7ed faaf 	bl	80002cc <__adddf3>
 8012d6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d72:	4680      	mov	r8, r0
 8012d74:	4689      	mov	r9, r1
 8012d76:	f7ed faa7 	bl	80002c8 <__aeabi_dsub>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	4620      	mov	r0, r4
 8012d80:	4629      	mov	r1, r5
 8012d82:	f7ed faa1 	bl	80002c8 <__aeabi_dsub>
 8012d86:	4642      	mov	r2, r8
 8012d88:	4606      	mov	r6, r0
 8012d8a:	460f      	mov	r7, r1
 8012d8c:	464b      	mov	r3, r9
 8012d8e:	4640      	mov	r0, r8
 8012d90:	4649      	mov	r1, r9
 8012d92:	f7ed fc51 	bl	8000638 <__aeabi_dmul>
 8012d96:	a360      	add	r3, pc, #384	@ (adr r3, 8012f18 <__ieee754_pow+0xa40>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	460d      	mov	r5, r1
 8012da0:	f7ed fc4a 	bl	8000638 <__aeabi_dmul>
 8012da4:	a35e      	add	r3, pc, #376	@ (adr r3, 8012f20 <__ieee754_pow+0xa48>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	f7ed fa8d 	bl	80002c8 <__aeabi_dsub>
 8012dae:	4622      	mov	r2, r4
 8012db0:	462b      	mov	r3, r5
 8012db2:	f7ed fc41 	bl	8000638 <__aeabi_dmul>
 8012db6:	a35c      	add	r3, pc, #368	@ (adr r3, 8012f28 <__ieee754_pow+0xa50>)
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	f7ed fa86 	bl	80002cc <__adddf3>
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	f7ed fc38 	bl	8000638 <__aeabi_dmul>
 8012dc8:	a359      	add	r3, pc, #356	@ (adr r3, 8012f30 <__ieee754_pow+0xa58>)
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	f7ed fa7b 	bl	80002c8 <__aeabi_dsub>
 8012dd2:	4622      	mov	r2, r4
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	f7ed fc2f 	bl	8000638 <__aeabi_dmul>
 8012dda:	a357      	add	r3, pc, #348	@ (adr r3, 8012f38 <__ieee754_pow+0xa60>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	f7ed fa74 	bl	80002cc <__adddf3>
 8012de4:	4622      	mov	r2, r4
 8012de6:	462b      	mov	r3, r5
 8012de8:	f7ed fc26 	bl	8000638 <__aeabi_dmul>
 8012dec:	4602      	mov	r2, r0
 8012dee:	460b      	mov	r3, r1
 8012df0:	4640      	mov	r0, r8
 8012df2:	4649      	mov	r1, r9
 8012df4:	f7ed fa68 	bl	80002c8 <__aeabi_dsub>
 8012df8:	4604      	mov	r4, r0
 8012dfa:	460d      	mov	r5, r1
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4640      	mov	r0, r8
 8012e02:	4649      	mov	r1, r9
 8012e04:	f7ed fc18 	bl	8000638 <__aeabi_dmul>
 8012e08:	2200      	movs	r2, #0
 8012e0a:	e9cd 0100 	strd	r0, r1, [sp]
 8012e0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012e12:	4620      	mov	r0, r4
 8012e14:	4629      	mov	r1, r5
 8012e16:	f7ed fa57 	bl	80002c8 <__aeabi_dsub>
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e22:	f7ed fd33 	bl	800088c <__aeabi_ddiv>
 8012e26:	4632      	mov	r2, r6
 8012e28:	4604      	mov	r4, r0
 8012e2a:	460d      	mov	r5, r1
 8012e2c:	463b      	mov	r3, r7
 8012e2e:	4640      	mov	r0, r8
 8012e30:	4649      	mov	r1, r9
 8012e32:	f7ed fc01 	bl	8000638 <__aeabi_dmul>
 8012e36:	4632      	mov	r2, r6
 8012e38:	463b      	mov	r3, r7
 8012e3a:	f7ed fa47 	bl	80002cc <__adddf3>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	4620      	mov	r0, r4
 8012e44:	4629      	mov	r1, r5
 8012e46:	f7ed fa3f 	bl	80002c8 <__aeabi_dsub>
 8012e4a:	4642      	mov	r2, r8
 8012e4c:	464b      	mov	r3, r9
 8012e4e:	f7ed fa3b 	bl	80002c8 <__aeabi_dsub>
 8012e52:	460b      	mov	r3, r1
 8012e54:	4602      	mov	r2, r0
 8012e56:	493b      	ldr	r1, [pc, #236]	@ (8012f44 <__ieee754_pow+0xa6c>)
 8012e58:	2000      	movs	r0, #0
 8012e5a:	f7ed fa35 	bl	80002c8 <__aeabi_dsub>
 8012e5e:	ec41 0b10 	vmov	d0, r0, r1
 8012e62:	ee10 3a90 	vmov	r3, s1
 8012e66:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012e6e:	da30      	bge.n	8012ed2 <__ieee754_pow+0x9fa>
 8012e70:	4650      	mov	r0, sl
 8012e72:	f000 f975 	bl	8013160 <scalbn>
 8012e76:	ec51 0b10 	vmov	r0, r1, d0
 8012e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e7e:	f7ff bbd2 	b.w	8012626 <__ieee754_pow+0x14e>
 8012e82:	4c31      	ldr	r4, [pc, #196]	@ (8012f48 <__ieee754_pow+0xa70>)
 8012e84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012e88:	42a3      	cmp	r3, r4
 8012e8a:	d91a      	bls.n	8012ec2 <__ieee754_pow+0x9ea>
 8012e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8012f4c <__ieee754_pow+0xa74>)
 8012e8e:	440b      	add	r3, r1
 8012e90:	4303      	orrs	r3, r0
 8012e92:	d009      	beq.n	8012ea8 <__ieee754_pow+0x9d0>
 8012e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	f7ed fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8012ea0:	3800      	subs	r0, #0
 8012ea2:	bf18      	it	ne
 8012ea4:	2001      	movne	r0, #1
 8012ea6:	e42b      	b.n	8012700 <__ieee754_pow+0x228>
 8012ea8:	4642      	mov	r2, r8
 8012eaa:	464b      	mov	r3, r9
 8012eac:	f7ed fa0c 	bl	80002c8 <__aeabi_dsub>
 8012eb0:	4632      	mov	r2, r6
 8012eb2:	463b      	mov	r3, r7
 8012eb4:	f7ed fe46 	bl	8000b44 <__aeabi_dcmpge>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d1eb      	bne.n	8012e94 <__ieee754_pow+0x9bc>
 8012ebc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8012f5c <__ieee754_pow+0xa84>
 8012ec0:	e6f7      	b.n	8012cb2 <__ieee754_pow+0x7da>
 8012ec2:	469a      	mov	sl, r3
 8012ec4:	4b22      	ldr	r3, [pc, #136]	@ (8012f50 <__ieee754_pow+0xa78>)
 8012ec6:	459a      	cmp	sl, r3
 8012ec8:	f63f aef3 	bhi.w	8012cb2 <__ieee754_pow+0x7da>
 8012ecc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012ed0:	e715      	b.n	8012cfe <__ieee754_pow+0x826>
 8012ed2:	ec51 0b10 	vmov	r0, r1, d0
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	e7cf      	b.n	8012e7a <__ieee754_pow+0x9a2>
 8012eda:	491a      	ldr	r1, [pc, #104]	@ (8012f44 <__ieee754_pow+0xa6c>)
 8012edc:	2000      	movs	r0, #0
 8012ede:	f7ff bb18 	b.w	8012512 <__ieee754_pow+0x3a>
 8012ee2:	2000      	movs	r0, #0
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	f7ff bb14 	b.w	8012512 <__ieee754_pow+0x3a>
 8012eea:	4630      	mov	r0, r6
 8012eec:	4639      	mov	r1, r7
 8012eee:	f7ff bb10 	b.w	8012512 <__ieee754_pow+0x3a>
 8012ef2:	460c      	mov	r4, r1
 8012ef4:	f7ff bb5e 	b.w	80125b4 <__ieee754_pow+0xdc>
 8012ef8:	2400      	movs	r4, #0
 8012efa:	f7ff bb49 	b.w	8012590 <__ieee754_pow+0xb8>
 8012efe:	bf00      	nop
 8012f00:	00000000 	.word	0x00000000
 8012f04:	3fe62e43 	.word	0x3fe62e43
 8012f08:	fefa39ef 	.word	0xfefa39ef
 8012f0c:	3fe62e42 	.word	0x3fe62e42
 8012f10:	0ca86c39 	.word	0x0ca86c39
 8012f14:	be205c61 	.word	0xbe205c61
 8012f18:	72bea4d0 	.word	0x72bea4d0
 8012f1c:	3e663769 	.word	0x3e663769
 8012f20:	c5d26bf1 	.word	0xc5d26bf1
 8012f24:	3ebbbd41 	.word	0x3ebbbd41
 8012f28:	af25de2c 	.word	0xaf25de2c
 8012f2c:	3f11566a 	.word	0x3f11566a
 8012f30:	16bebd93 	.word	0x16bebd93
 8012f34:	3f66c16c 	.word	0x3f66c16c
 8012f38:	5555553e 	.word	0x5555553e
 8012f3c:	3fc55555 	.word	0x3fc55555
 8012f40:	fff00000 	.word	0xfff00000
 8012f44:	3ff00000 	.word	0x3ff00000
 8012f48:	4090cbff 	.word	0x4090cbff
 8012f4c:	3f6f3400 	.word	0x3f6f3400
 8012f50:	3fe00000 	.word	0x3fe00000
 8012f54:	652b82fe 	.word	0x652b82fe
 8012f58:	3c971547 	.word	0x3c971547
 8012f5c:	4090cc00 	.word	0x4090cc00

08012f60 <fabs>:
 8012f60:	ec51 0b10 	vmov	r0, r1, d0
 8012f64:	4602      	mov	r2, r0
 8012f66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012f6a:	ec43 2b10 	vmov	d0, r2, r3
 8012f6e:	4770      	bx	lr

08012f70 <__ieee754_acosf>:
 8012f70:	b508      	push	{r3, lr}
 8012f72:	ee10 3a10 	vmov	r3, s0
 8012f76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012f7a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012f7e:	ed2d 8b0c 	vpush	{d8-d13}
 8012f82:	d10a      	bne.n	8012f9a <__ieee754_acosf+0x2a>
 8012f84:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801311c <__ieee754_acosf+0x1ac>
 8012f88:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8013120 <__ieee754_acosf+0x1b0>
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	bfc8      	it	gt
 8012f90:	eeb0 0a67 	vmovgt.f32	s0, s15
 8012f94:	ecbd 8b0c 	vpop	{d8-d13}
 8012f98:	bd08      	pop	{r3, pc}
 8012f9a:	d904      	bls.n	8012fa6 <__ieee754_acosf+0x36>
 8012f9c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8012fa0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012fa4:	e7f6      	b.n	8012f94 <__ieee754_acosf+0x24>
 8012fa6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8012faa:	d23c      	bcs.n	8013026 <__ieee754_acosf+0xb6>
 8012fac:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8012fb0:	f240 80b1 	bls.w	8013116 <__ieee754_acosf+0x1a6>
 8012fb4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012fb8:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8013124 <__ieee754_acosf+0x1b4>
 8012fbc:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8013128 <__ieee754_acosf+0x1b8>
 8012fc0:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801312c <__ieee754_acosf+0x1bc>
 8012fc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012fc8:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8013130 <__ieee754_acosf+0x1c0>
 8012fcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012fd0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8013134 <__ieee754_acosf+0x1c4>
 8012fd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012fd8:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8013138 <__ieee754_acosf+0x1c8>
 8012fdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012fe0:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801313c <__ieee754_acosf+0x1cc>
 8012fe4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012fe8:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8013140 <__ieee754_acosf+0x1d0>
 8012fec:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8012ff0:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8013144 <__ieee754_acosf+0x1d4>
 8012ff4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012ff8:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8013148 <__ieee754_acosf+0x1d8>
 8012ffc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013004:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013008:	ee27 7a27 	vmul.f32	s14, s14, s15
 801300c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801314c <__ieee754_acosf+0x1dc>
 8013010:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8013014:	eee0 7a46 	vfms.f32	s15, s0, s12
 8013018:	ee70 7a67 	vsub.f32	s15, s0, s15
 801301c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8013150 <__ieee754_acosf+0x1e0>
 8013020:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013024:	e7b6      	b.n	8012f94 <__ieee754_acosf+0x24>
 8013026:	2b00      	cmp	r3, #0
 8013028:	eddf da3e 	vldr	s27, [pc, #248]	@ 8013124 <__ieee754_acosf+0x1b4>
 801302c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8013128 <__ieee754_acosf+0x1b8>
 8013030:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8013130 <__ieee754_acosf+0x1c0>
 8013034:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8013134 <__ieee754_acosf+0x1c4>
 8013038:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8013138 <__ieee754_acosf+0x1c8>
 801303c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801313c <__ieee754_acosf+0x1cc>
 8013040:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8013140 <__ieee754_acosf+0x1d0>
 8013044:	eddf aa39 	vldr	s21, [pc, #228]	@ 801312c <__ieee754_acosf+0x1bc>
 8013048:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8013144 <__ieee754_acosf+0x1d4>
 801304c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8013148 <__ieee754_acosf+0x1d8>
 8013050:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8013054:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013058:	da28      	bge.n	80130ac <__ieee754_acosf+0x13c>
 801305a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801305e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8013062:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8013066:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801306a:	eeac ca80 	vfma.f32	s24, s25, s0
 801306e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8013072:	eeec ba00 	vfma.f32	s23, s24, s0
 8013076:	eeea 9a00 	vfma.f32	s19, s20, s0
 801307a:	eeab ba80 	vfma.f32	s22, s23, s0
 801307e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8013082:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013086:	ee68 8a80 	vmul.f32	s17, s17, s0
 801308a:	f7ff f9a5 	bl	80123d8 <__ieee754_sqrtf>
 801308e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8013092:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8013154 <__ieee754_acosf+0x1e4>
 8013096:	eee0 7a07 	vfma.f32	s15, s0, s14
 801309a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801309e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80130a2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8013158 <__ieee754_acosf+0x1e8>
 80130a6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80130aa:	e773      	b.n	8012f94 <__ieee754_acosf+0x24>
 80130ac:	ee39 8a40 	vsub.f32	s16, s18, s0
 80130b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80130b4:	eeb0 0a48 	vmov.f32	s0, s16
 80130b8:	f7ff f98e 	bl	80123d8 <__ieee754_sqrtf>
 80130bc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80130c0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80130c4:	eeac ca88 	vfma.f32	s24, s25, s16
 80130c8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80130cc:	eeec ba08 	vfma.f32	s23, s24, s16
 80130d0:	ee10 3a10 	vmov	r3, s0
 80130d4:	eeab ba88 	vfma.f32	s22, s23, s16
 80130d8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80130dc:	f023 030f 	bic.w	r3, r3, #15
 80130e0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80130e4:	ee07 3a90 	vmov	s15, r3
 80130e8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80130ec:	eeb0 6a48 	vmov.f32	s12, s16
 80130f0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80130f4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80130f8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80130fc:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013100:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013104:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013108:	eea0 7a26 	vfma.f32	s14, s0, s13
 801310c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013110:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013114:	e73e      	b.n	8012f94 <__ieee754_acosf+0x24>
 8013116:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801315c <__ieee754_acosf+0x1ec>
 801311a:	e73b      	b.n	8012f94 <__ieee754_acosf+0x24>
 801311c:	40490fdb 	.word	0x40490fdb
 8013120:	00000000 	.word	0x00000000
 8013124:	3811ef08 	.word	0x3811ef08
 8013128:	3a4f7f04 	.word	0x3a4f7f04
 801312c:	bf303361 	.word	0xbf303361
 8013130:	bd241146 	.word	0xbd241146
 8013134:	3e4e0aa8 	.word	0x3e4e0aa8
 8013138:	bea6b090 	.word	0xbea6b090
 801313c:	3e2aaaab 	.word	0x3e2aaaab
 8013140:	3d9dc62e 	.word	0x3d9dc62e
 8013144:	4001572d 	.word	0x4001572d
 8013148:	c019d139 	.word	0xc019d139
 801314c:	33a22168 	.word	0x33a22168
 8013150:	3fc90fda 	.word	0x3fc90fda
 8013154:	b3a22168 	.word	0xb3a22168
 8013158:	40490fda 	.word	0x40490fda
 801315c:	3fc90fdb 	.word	0x3fc90fdb

08013160 <scalbn>:
 8013160:	b570      	push	{r4, r5, r6, lr}
 8013162:	ec55 4b10 	vmov	r4, r5, d0
 8013166:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801316a:	4606      	mov	r6, r0
 801316c:	462b      	mov	r3, r5
 801316e:	b991      	cbnz	r1, 8013196 <scalbn+0x36>
 8013170:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013174:	4323      	orrs	r3, r4
 8013176:	d03d      	beq.n	80131f4 <scalbn+0x94>
 8013178:	4b35      	ldr	r3, [pc, #212]	@ (8013250 <scalbn+0xf0>)
 801317a:	4620      	mov	r0, r4
 801317c:	4629      	mov	r1, r5
 801317e:	2200      	movs	r2, #0
 8013180:	f7ed fa5a 	bl	8000638 <__aeabi_dmul>
 8013184:	4b33      	ldr	r3, [pc, #204]	@ (8013254 <scalbn+0xf4>)
 8013186:	429e      	cmp	r6, r3
 8013188:	4604      	mov	r4, r0
 801318a:	460d      	mov	r5, r1
 801318c:	da0f      	bge.n	80131ae <scalbn+0x4e>
 801318e:	a328      	add	r3, pc, #160	@ (adr r3, 8013230 <scalbn+0xd0>)
 8013190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013194:	e01e      	b.n	80131d4 <scalbn+0x74>
 8013196:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801319a:	4291      	cmp	r1, r2
 801319c:	d10b      	bne.n	80131b6 <scalbn+0x56>
 801319e:	4622      	mov	r2, r4
 80131a0:	4620      	mov	r0, r4
 80131a2:	4629      	mov	r1, r5
 80131a4:	f7ed f892 	bl	80002cc <__adddf3>
 80131a8:	4604      	mov	r4, r0
 80131aa:	460d      	mov	r5, r1
 80131ac:	e022      	b.n	80131f4 <scalbn+0x94>
 80131ae:	460b      	mov	r3, r1
 80131b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80131b4:	3936      	subs	r1, #54	@ 0x36
 80131b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80131ba:	4296      	cmp	r6, r2
 80131bc:	dd0d      	ble.n	80131da <scalbn+0x7a>
 80131be:	2d00      	cmp	r5, #0
 80131c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013238 <scalbn+0xd8>)
 80131c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131c6:	da02      	bge.n	80131ce <scalbn+0x6e>
 80131c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013240 <scalbn+0xe0>)
 80131ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8013238 <scalbn+0xd8>)
 80131d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d4:	f7ed fa30 	bl	8000638 <__aeabi_dmul>
 80131d8:	e7e6      	b.n	80131a8 <scalbn+0x48>
 80131da:	1872      	adds	r2, r6, r1
 80131dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80131e0:	428a      	cmp	r2, r1
 80131e2:	dcec      	bgt.n	80131be <scalbn+0x5e>
 80131e4:	2a00      	cmp	r2, #0
 80131e6:	dd08      	ble.n	80131fa <scalbn+0x9a>
 80131e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80131ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80131f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80131f4:	ec45 4b10 	vmov	d0, r4, r5
 80131f8:	bd70      	pop	{r4, r5, r6, pc}
 80131fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80131fe:	da08      	bge.n	8013212 <scalbn+0xb2>
 8013200:	2d00      	cmp	r5, #0
 8013202:	a10b      	add	r1, pc, #44	@ (adr r1, 8013230 <scalbn+0xd0>)
 8013204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013208:	dac1      	bge.n	801318e <scalbn+0x2e>
 801320a:	a10f      	add	r1, pc, #60	@ (adr r1, 8013248 <scalbn+0xe8>)
 801320c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013210:	e7bd      	b.n	801318e <scalbn+0x2e>
 8013212:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013216:	3236      	adds	r2, #54	@ 0x36
 8013218:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801321c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013220:	4620      	mov	r0, r4
 8013222:	4b0d      	ldr	r3, [pc, #52]	@ (8013258 <scalbn+0xf8>)
 8013224:	4629      	mov	r1, r5
 8013226:	2200      	movs	r2, #0
 8013228:	e7d4      	b.n	80131d4 <scalbn+0x74>
 801322a:	bf00      	nop
 801322c:	f3af 8000 	nop.w
 8013230:	c2f8f359 	.word	0xc2f8f359
 8013234:	01a56e1f 	.word	0x01a56e1f
 8013238:	8800759c 	.word	0x8800759c
 801323c:	7e37e43c 	.word	0x7e37e43c
 8013240:	8800759c 	.word	0x8800759c
 8013244:	fe37e43c 	.word	0xfe37e43c
 8013248:	c2f8f359 	.word	0xc2f8f359
 801324c:	81a56e1f 	.word	0x81a56e1f
 8013250:	43500000 	.word	0x43500000
 8013254:	ffff3cb0 	.word	0xffff3cb0
 8013258:	3c900000 	.word	0x3c900000

0801325c <with_errno>:
 801325c:	b510      	push	{r4, lr}
 801325e:	ed2d 8b02 	vpush	{d8}
 8013262:	eeb0 8a40 	vmov.f32	s16, s0
 8013266:	eef0 8a60 	vmov.f32	s17, s1
 801326a:	4604      	mov	r4, r0
 801326c:	f7fa ffd8 	bl	800e220 <__errno>
 8013270:	eeb0 0a48 	vmov.f32	s0, s16
 8013274:	eef0 0a68 	vmov.f32	s1, s17
 8013278:	ecbd 8b02 	vpop	{d8}
 801327c:	6004      	str	r4, [r0, #0]
 801327e:	bd10      	pop	{r4, pc}

08013280 <xflow>:
 8013280:	4603      	mov	r3, r0
 8013282:	b507      	push	{r0, r1, r2, lr}
 8013284:	ec51 0b10 	vmov	r0, r1, d0
 8013288:	b183      	cbz	r3, 80132ac <xflow+0x2c>
 801328a:	4602      	mov	r2, r0
 801328c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013290:	e9cd 2300 	strd	r2, r3, [sp]
 8013294:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013298:	f7ed f9ce 	bl	8000638 <__aeabi_dmul>
 801329c:	ec41 0b10 	vmov	d0, r0, r1
 80132a0:	2022      	movs	r0, #34	@ 0x22
 80132a2:	b003      	add	sp, #12
 80132a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80132a8:	f7ff bfd8 	b.w	801325c <with_errno>
 80132ac:	4602      	mov	r2, r0
 80132ae:	460b      	mov	r3, r1
 80132b0:	e7ee      	b.n	8013290 <xflow+0x10>
 80132b2:	0000      	movs	r0, r0
 80132b4:	0000      	movs	r0, r0
	...

080132b8 <__math_uflow>:
 80132b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80132c0 <__math_uflow+0x8>
 80132bc:	f7ff bfe0 	b.w	8013280 <xflow>
 80132c0:	00000000 	.word	0x00000000
 80132c4:	10000000 	.word	0x10000000

080132c8 <__math_oflow>:
 80132c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80132d0 <__math_oflow+0x8>
 80132cc:	f7ff bfd8 	b.w	8013280 <xflow>
 80132d0:	00000000 	.word	0x00000000
 80132d4:	70000000 	.word	0x70000000

080132d8 <_init>:
 80132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132da:	bf00      	nop
 80132dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132de:	bc08      	pop	{r3}
 80132e0:	469e      	mov	lr, r3
 80132e2:	4770      	bx	lr

080132e4 <_fini>:
 80132e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e6:	bf00      	nop
 80132e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ea:	bc08      	pop	{r3}
 80132ec:	469e      	mov	lr, r3
 80132ee:	4770      	bx	lr
