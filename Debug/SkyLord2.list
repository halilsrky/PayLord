
SkyLord2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08011f20  08011f20  00012f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012548  08012548  00014210  2**0
                  CONTENTS
  4 .ARM          00000008  08012548  08012548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012550  08012550  00014210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012550  08012550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012554  08012554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08012558  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001668  20000210  08012768  00014210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001878  08012768  00014878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3bb  00000000  00000000  00014240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0c  00000000  00000000  0002e5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001095  00000000  00000000  00033618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002692e  00000000  00000000  000346ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d90f  00000000  00000000  0005afdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e54f7  00000000  00000000  000788ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dde1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  0015de24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00165548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011f08 	.word	0x08011f08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08011f08 	.word	0x08011f08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f006 ff6b 	bl	80081d8 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f006 ff47 	bl	80081d8 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fa62 	bl	800c82a <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000022c 	.word	0x2000022c
 80013dc:	20000230 	.word	0x20000230
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f00f f943 	bl	80106a0 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000230 	.word	0x20000230
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fd6f 	bl	8007f84 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f004 fe66 	bl	8006178 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 fc23 	bl	8007cfc <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f004 fe5e 	bl	8006178 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f006 fe81 	bl	80081d8 <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f006 fde8 	bl	80081d8 <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f006 fca7 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f006 fc82 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000230 	.word	0x20000230
 80016fc:	2000022c 	.word	0x2000022c
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f006 fc5e 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f004 fd20 	bl	8006178 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f004 fd0e 	bl	8006178 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000022c 	.word	0x2000022c
 800178c:	20000230 	.word	0x20000230
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f006 fd02 	bl	80081d8 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000230 	.word	0x20000230
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	20001548 	.word	0x20001548
 80017fc:	20000234 	.word	0x20000234
 8001800:	2000164c 	.word	0x2000164c

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f004 fc98 	bl	8006160 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f004 fc88 	bl	8006160 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000230 	.word	0x20000230
 8001890:	20000234 	.word	0x20000234
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000230 	.word	0x20000230
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000230 	.word	0x20000230
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <bmi088_init+0xa8>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <bmi088_init+0xac>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2018      	movs	r0, #24
 8002088:	f009 fb14 	bl	800b6b4 <calloc>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68d8      	ldr	r0, [r3, #12]
 8002098:	2332      	movs	r3, #50	@ 0x32
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2200      	movs	r2, #0
 80020aa:	2130      	movs	r1, #48	@ 0x30
 80020ac:	f006 f894 	bl	80081d8 <HAL_I2C_Mem_Read>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68d8      	ldr	r0, [r3, #12]
 80020b8:	2332      	movs	r3, #50	@ 0x32
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	2301      	movs	r3, #1
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	3301      	adds	r3, #1
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2301      	movs	r3, #1
 80020ca:	2200      	movs	r2, #0
 80020cc:	21d0      	movs	r1, #208	@ 0xd0
 80020ce:	f006 f883 	bl	80081d8 <HAL_I2C_Mem_Read>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	2b1e      	cmp	r3, #30
 80020da:	d003      	beq.n	80020e4 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d003      	beq.n	80020f2 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000235 	.word	0x20000235
 8002100:	20000236 	.word	0x20000236

08002104 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af04      	add	r7, sp, #16
 800210a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 febd 	bl	8006e92 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 feb7 	bl	8006e92 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002128:	2301      	movs	r3, #1
 800212a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d8      	ldr	r0, [r3, #12]
 8002130:	2364      	movs	r3, #100	@ 0x64
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	227c      	movs	r2, #124	@ 0x7c
 8002142:	2130      	movs	r1, #48	@ 0x30
 8002144:	f005 ff4e 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	4313      	orrs	r3, r2
 8002150:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d8      	ldr	r0, [r3, #12]
 800215a:	2364      	movs	r3, #100	@ 0x64
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2301      	movs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	227d      	movs	r2, #125	@ 0x7d
 800216c:	2130      	movs	r1, #48	@ 0x30
 800216e:	f005 ff39 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4313      	orrs	r3, r2
 800217a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f003 fffb 	bl	8006178 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002182:	23b6      	movs	r3, #182	@ 0xb6
 8002184:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68d8      	ldr	r0, [r3, #12]
 800218a:	2364      	movs	r3, #100	@ 0x64
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2301      	movs	r3, #1
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	227e      	movs	r2, #126	@ 0x7e
 800219c:	2130      	movs	r1, #48	@ 0x30
 800219e:	f005 ff21 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <bmi088_config+0xb4>
 80021b2:	4bb4      	ldr	r3, [pc, #720]	@ (8002484 <bmi088_config+0x380>)
 80021b4:	22a1      	movs	r2, #161	@ 0xa1
 80021b6:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021b8:	200a      	movs	r0, #10
 80021ba:	f003 ffdd 	bl	8006178 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021be:	23b0      	movs	r3, #176	@ 0xb0
 80021c0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68d8      	ldr	r0, [r3, #12]
 80021c6:	2364      	movs	r3, #100	@ 0x64
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	227e      	movs	r2, #126	@ 0x7e
 80021d8:	2130      	movs	r1, #48	@ 0x30
 80021da:	f005 ff03 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <bmi088_config+0xf0>
 80021ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002484 <bmi088_config+0x380>)
 80021f0:	22a6      	movs	r2, #166	@ 0xa6
 80021f2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f003 ffbf 	bl	8006178 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80021fa:	23b6      	movs	r3, #182	@ 0xb6
 80021fc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68d8      	ldr	r0, [r3, #12]
 8002202:	2364      	movs	r3, #100	@ 0x64
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	2214      	movs	r2, #20
 8002214:	21d0      	movs	r1, #208	@ 0xd0
 8002216:	f005 fee5 	bl	8007fe4 <HAL_I2C_Mem_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4313      	orrs	r3, r2
 8002222:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <bmi088_config+0x12c>
 800222a:	4b96      	ldr	r3, [pc, #600]	@ (8002484 <bmi088_config+0x380>)
 800222c:	22ab      	movs	r2, #171	@ 0xab
 800222e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002230:	200a      	movs	r0, #10
 8002232:	f003 ffa1 	bl	8006178 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68d8      	ldr	r0, [r3, #12]
 8002240:	2364      	movs	r3, #100	@ 0x64
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	2301      	movs	r3, #1
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	220f      	movs	r2, #15
 8002252:	21d0      	movs	r1, #208	@ 0xd0
 8002254:	f005 fec6 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	4313      	orrs	r3, r2
 8002260:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <bmi088_config+0x16a>
 8002268:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <bmi088_config+0x380>)
 800226a:	22b1      	movs	r2, #177	@ 0xb1
 800226c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7a5b      	ldrb	r3, [r3, #9]
 8002272:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68d8      	ldr	r0, [r3, #12]
 8002278:	2314      	movs	r3, #20
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2301      	movs	r3, #1
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	2210      	movs	r2, #16
 800228a:	21d0      	movs	r1, #208	@ 0xd0
 800228c:	f005 feaa 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <bmi088_config+0x1a2>
 80022a0:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <bmi088_config+0x380>)
 80022a2:	22b5      	movs	r2, #181	@ 0xb5
 80022a4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	2314      	movs	r3, #20
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	2211      	movs	r2, #17
 80022c2:	21d0      	movs	r1, #208	@ 0xd0
 80022c4:	f005 fe8e 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <bmi088_config+0x1da>
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <bmi088_config+0x380>)
 80022da:	22b9      	movs	r2, #185	@ 0xb9
 80022dc:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022de:	2014      	movs	r0, #20
 80022e0:	f003 ff4a 	bl	8006178 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68d8      	ldr	r0, [r3, #12]
 80022ec:	2314      	movs	r3, #20
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	2215      	movs	r2, #21
 80022fe:	21d0      	movs	r1, #208	@ 0xd0
 8002300:	f005 fe70 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4313      	orrs	r3, r2
 800230c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <bmi088_config+0x216>
 8002314:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <bmi088_config+0x380>)
 8002316:	22bf      	movs	r2, #191	@ 0xbf
 8002318:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800231a:	2305      	movs	r3, #5
 800231c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68d8      	ldr	r0, [r3, #12]
 8002322:	2314      	movs	r3, #20
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	2216      	movs	r2, #22
 8002334:	21d0      	movs	r1, #208	@ 0xd0
 8002336:	f005 fe55 	bl	8007fe4 <HAL_I2C_Mem_Write>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	4313      	orrs	r3, r2
 8002342:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <bmi088_config+0x24c>
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <bmi088_config+0x380>)
 800234c:	22c3      	movs	r2, #195	@ 0xc3
 800234e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002350:	2381      	movs	r3, #129	@ 0x81
 8002352:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68d8      	ldr	r0, [r3, #12]
 8002358:	2314      	movs	r3, #20
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2218      	movs	r2, #24
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	f005 fe3a 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4313      	orrs	r3, r2
 8002378:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <bmi088_config+0x282>
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <bmi088_config+0x380>)
 8002382:	22c7      	movs	r2, #199	@ 0xc7
 8002384:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002386:	2304      	movs	r3, #4
 8002388:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68d8      	ldr	r0, [r3, #12]
 800238e:	2314      	movs	r3, #20
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2301      	movs	r3, #1
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	227d      	movs	r2, #125	@ 0x7d
 80023a0:	2130      	movs	r1, #48	@ 0x30
 80023a2:	f005 fe1f 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <bmi088_config+0x2b8>
 80023b6:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <bmi088_config+0x380>)
 80023b8:	22cc      	movs	r2, #204	@ 0xcc
 80023ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023bc:	2008      	movs	r0, #8
 80023be:	f003 fedb 	bl	8006178 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68d8      	ldr	r0, [r3, #12]
 80023cc:	2314      	movs	r3, #20
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	227c      	movs	r2, #124	@ 0x7c
 80023de:	2130      	movs	r1, #48	@ 0x30
 80023e0:	f005 fe00 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <bmi088_config+0x2f6>
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <bmi088_config+0x380>)
 80023f6:	22d1      	movs	r2, #209	@ 0xd1
 80023f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023fa:	2008      	movs	r0, #8
 80023fc:	f003 febc 	bl	8006178 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	799b      	ldrb	r3, [r3, #6]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	b25a      	sxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	79db      	ldrb	r3, [r3, #7]
 800240c:	b25b      	sxtb	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b25b      	sxtb	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68d8      	ldr	r0, [r3, #12]
 800241a:	2314      	movs	r3, #20
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	2301      	movs	r3, #1
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2130      	movs	r1, #48	@ 0x30
 800242e:	f005 fdd9 	bl	8007fe4 <HAL_I2C_Mem_Write>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	4313      	orrs	r3, r2
 800243a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <bmi088_config+0x344>
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <bmi088_config+0x380>)
 8002444:	22d6      	movs	r2, #214	@ 0xd6
 8002446:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68d8      	ldr	r0, [r3, #12]
 8002452:	2314      	movs	r3, #20
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2301      	movs	r3, #1
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2241      	movs	r2, #65	@ 0x41
 8002464:	2130      	movs	r1, #48	@ 0x30
 8002466:	f005 fdbd 	bl	8007fe4 <HAL_I2C_Mem_Write>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4313      	orrs	r3, r2
 8002472:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <bmi088_config+0x384>
 800247a:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <bmi088_config+0x380>)
 800247c:	22da      	movs	r2, #218	@ 0xda
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <bmi088_config+0x384>
 8002482:	bf00      	nop
 8002484:	20000238 	.word	0x20000238

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002488:	230a      	movs	r3, #10
 800248a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68d8      	ldr	r0, [r3, #12]
 8002490:	2314      	movs	r3, #20
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2301      	movs	r3, #1
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2253      	movs	r2, #83	@ 0x53
 80024a2:	2130      	movs	r1, #48	@ 0x30
 80024a4:	f005 fd9e 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024b2:	2304      	movs	r3, #4
 80024b4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68d8      	ldr	r0, [r3, #12]
 80024ba:	2314      	movs	r3, #20
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2258      	movs	r2, #88	@ 0x58
 80024cc:	2130      	movs	r1, #48	@ 0x30
 80024ce:	f005 fd89 	bl	8007fe4 <HAL_I2C_Mem_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4313      	orrs	r3, r2
 80024da:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fcc7 	bl	8006e76 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fcc1 	bl	8006e76 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 80024f4:	2046      	movs	r0, #70	@ 0x46
 80024f6:	f003 fe3f 	bl	8006178 <HAL_Delay>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0000      	movs	r0, r0
	...

08002508 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b092      	sub	sp, #72	@ 0x48
 800250c:	af04      	add	r7, sp, #16
 800250e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 820d 	beq.w	800293a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68d8      	ldr	r0, [r3, #12]
 8002524:	2314      	movs	r3, #20
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	2309      	movs	r3, #9
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	2212      	movs	r2, #18
 8002536:	2130      	movs	r1, #48	@ 0x30
 8002538:	f005 fe4e 	bl	80081d8 <HAL_I2C_Mem_Read>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68d8      	ldr	r0, [r3, #12]
 8002546:	2314      	movs	r3, #20
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2302      	movs	r3, #2
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	2222      	movs	r2, #34	@ 0x22
 8002558:	2130      	movs	r1, #48	@ 0x30
 800255a:	f005 fe3d 	bl	80081d8 <HAL_I2C_Mem_Read>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 8002564:	7c3b      	ldrb	r3, [r7, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	b21a      	sxth	r2, r3
 800256a:	7c7b      	ldrb	r3, [r7, #17]
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b21b      	sxth	r3, r3
 8002576:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800257c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d305      	bcc.n	8002590 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 8002584:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002586:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800258a:	b29b      	uxth	r3, r3
 800258c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800258e:	e023      	b.n	80025d8 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 8002590:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002592:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8002594:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80025b0:	f7fe f842 	bl	8000638 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4bcf      	ldr	r3, [pc, #828]	@ (8002900 <bmi088_update+0x3f8>)
 80025c2:	f7fd fe83 	bl	80002cc <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb2b 	bl	8000c28 <__aeabi_d2f>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 80025d8:	7f3b      	ldrb	r3, [r7, #28]
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	7efb      	ldrb	r3, [r7, #27]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4313      	orrs	r3, r2
 80025e2:	7eba      	ldrb	r2, [r7, #26]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffc7 	bl	8000588 <__aeabi_f2d>
 80025fa:	a3b9      	add	r3, pc, #740	@ (adr r3, 80028e0 <bmi088_update+0x3d8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f81a 	bl	8000638 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	a3b6      	add	r3, pc, #728	@ (adr r3, 80028e8 <bmi088_update+0x3e0>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fe f93b 	bl	800088c <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fb03 	bl	8000c28 <__aeabi_d2f>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002628:	7e7b      	ldrb	r3, [r7, #25]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21a      	sxth	r2, r3
 800262e:	7e3b      	ldrb	r3, [r7, #24]
 8002630:	b21b      	sxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002644:	7d7b      	ldrb	r3, [r7, #21]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7d3b      	ldrb	r3, [r7, #20]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 8002652:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4ba6      	ldr	r3, [pc, #664]	@ (8002904 <bmi088_update+0x3fc>)
 800266c:	f7fe f90e 	bl	800088c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4ba2      	ldr	r3, [pc, #648]	@ (8002908 <bmi088_update+0x400>)
 800267e:	f7fd ffdb 	bl	8000638 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b9f      	ldr	r3, [pc, #636]	@ (800290c <bmi088_update+0x404>)
 8002690:	f7fd ffd2 	bl	8000638 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	795b      	ldrb	r3, [r3, #5]
 80026a0:	3301      	adds	r3, #1
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fd ff6b 	bl	8000588 <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ec43 2b11 	vmov	d1, r2, r3
 80026ba:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80028f0 <bmi088_update+0x3e8>
 80026be:	f00d ffef 	bl	80106a0 <pow>
 80026c2:	ec53 2b10 	vmov	r2, r3, d0
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd ffb5 	bl	8000638 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b8d      	ldr	r3, [pc, #564]	@ (8002910 <bmi088_update+0x408>)
 80026dc:	f7fd fdf4 	bl	80002c8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	a383      	add	r3, pc, #524	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <bmi088_update+0x400>)
 8002700:	f7fe f8c4 	bl	800088c <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa8c 	bl	8000c28 <__aeabi_d2f>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002716:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd ff2f 	bl	8000588 <__aeabi_f2d>
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <bmi088_update+0x3fc>)
 8002730:	f7fe f8ac 	bl	800088c <__aeabi_ddiv>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <bmi088_update+0x400>)
 8002742:	f7fd ff79 	bl	8000638 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <bmi088_update+0x404>)
 8002754:	f7fd ff70 	bl	8000638 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	795b      	ldrb	r3, [r3, #5]
 8002764:	3301      	adds	r3, #1
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276e:	ee17 0a90 	vmov	r0, s15
 8002772:	f7fd ff09 	bl	8000588 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b11 	vmov	d1, r2, r3
 800277e:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 80028f0 <bmi088_update+0x3e8>
 8002782:	f00d ff8d 	bl	80106a0 <pow>
 8002786:	ec53 2b10 	vmov	r2, r3, d0
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd ff53 	bl	8000638 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <bmi088_update+0x40c>)
 80027a0:	f7fd fd94 	bl	80002cc <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	a352      	add	r3, pc, #328	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <bmi088_update+0x400>)
 80027c4:	f7fe f862 	bl	800088c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe fa2a 	bl	8000c28 <__aeabi_d2f>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 80027da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	ee17 0a90 	vmov	r0, s15
 80027ea:	f7fd fecd 	bl	8000588 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <bmi088_update+0x3fc>)
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <bmi088_update+0x400>)
 8002806:	f7fd ff17 	bl	8000638 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <bmi088_update+0x404>)
 8002818:	f7fd ff0e 	bl	8000638 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	795b      	ldrb	r3, [r3, #5]
 8002828:	3301      	adds	r3, #1
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fea7 	bl	8000588 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b11 	vmov	d1, r2, r3
 8002842:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 80028f0 <bmi088_update+0x3e8>
 8002846:	f00d ff2b 	bl	80106a0 <pow>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd fef1 	bl	8000638 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <bmi088_update+0x408>)
 8002864:	f7fd fd32 	bl	80002cc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a321      	add	r3, pc, #132	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <bmi088_update+0x400>)
 8002888:	f7fe f800 	bl	800088c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f9c8 	bl	8000c28 <__aeabi_d2f>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <bmi088_update+0x410>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03c      	beq.n	8002920 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d502      	bpl.n	80028c6 <bmi088_update+0x3be>
 80028c0:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800291c <bmi088_update+0x414>
 80028c4:	e007      	b.n	80028d6 <bmi088_update+0x3ce>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 80028dc:	e023      	b.n	8002926 <bmi088_update+0x41e>
 80028de:	bf00      	nop
 80028e0:	00000000 	.word	0x00000000
 80028e4:	40438800 	.word	0x40438800
 80028e8:	00000000 	.word	0x00000000
 80028ec:	412e8480 	.word	0x412e8480
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40000000 	.word	0x40000000
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	40239eb8 	.word	0x40239eb8
 8002900:	40370000 	.word	0x40370000
 8002904:	40e00000 	.word	0x40e00000
 8002908:	408f4000 	.word	0x408f4000
 800290c:	3ff80000 	.word	0x3ff80000
 8002910:	40100000 	.word	0x40100000
 8002914:	402e0000 	.word	0x402e0000
 8002918:	20000236 	.word	0x20000236
 800291c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002920:	4bd1      	ldr	r3, [pc, #836]	@ (8002c68 <bmi088_update+0x760>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002934:	4bcd      	ldr	r3, [pc, #820]	@ (8002c6c <bmi088_update+0x764>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81b1 	beq.w	8002ca6 <bmi088_update+0x79e>
 8002944:	4bc9      	ldr	r3, [pc, #804]	@ (8002c6c <bmi088_update+0x764>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81ac 	beq.w	8002ca6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800294e:	4bc6      	ldr	r3, [pc, #792]	@ (8002c68 <bmi088_update+0x760>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 819f 	beq.w	8002c96 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68d8      	ldr	r0, [r3, #12]
 800295c:	230a      	movs	r3, #10
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2306      	movs	r3, #6
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2301      	movs	r3, #1
 800296c:	2202      	movs	r2, #2
 800296e:	21d0      	movs	r1, #208	@ 0xd0
 8002970:	f005 fc32 	bl	80081d8 <HAL_I2C_Mem_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800297a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8190 	bne.w	8002ca4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b21a      	sxth	r2, r3
 800298a:	7a3b      	ldrb	r3, [r7, #8]
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	ee17 0a90 	vmov	r0, s15
 80029be:	f7fd fde3 	bl	8000588 <__aeabi_f2d>
 80029c2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd ff60 	bl	800088c <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7a9b      	ldrb	r3, [r3, #10]
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029de:	4113      	asrs	r3, r2
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	ee17 0a90 	vmov	r0, s15
 80029ec:	f7fd fdcc 	bl	8000588 <__aeabi_f2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fe1e 	bl	8000638 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fdbc 	bl	8000588 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fc56 	bl	80002c8 <__aeabi_dsub>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	a38e      	add	r3, pc, #568	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fe05 	bl	8000638 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8f7 	bl	8000c28 <__aeabi_d2f>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	ee17 0a90 	vmov	r0, s15
 8002a50:	f7fd fd9a 	bl	8000588 <__aeabi_f2d>
 8002a54:	a380      	add	r3, pc, #512	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd ff17 	bl	800088c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7a9b      	ldrb	r3, [r3, #10]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a70:	4113      	asrs	r3, r2
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fdd5 	bl	8000638 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	461d      	mov	r5, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd73 	bl	8000588 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd fc0d 	bl	80002c8 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	a36a      	add	r3, pc, #424	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdbc 	bl	8000638 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f8ae 	bl	8000c28 <__aeabi_d2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	a35c      	add	r3, pc, #368	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fece 	bl	800088c <__aeabi_ddiv>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7a9b      	ldrb	r3, [r3, #10]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b02:	4113      	asrs	r3, r2
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fd3a 	bl	8000588 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fd8c 	bl	8000638 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd2a 	bl	8000588 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	f7fd fbc4 	bl	80002c8 <__aeabi_dsub>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	a345      	add	r3, pc, #276	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd73 	bl	8000638 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f865 	bl	8000c28 <__aeabi_d2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b70:	eef1 6a67 	vneg.f32	s13, s15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002b86:	eef1 7a67 	vneg.f32	s15, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002b96:	eeb0 3a64 	vmov.f32	s6, s9
 8002b9a:	eef0 2a45 	vmov.f32	s5, s10
 8002b9e:	eeb0 2a67 	vmov.f32	s4, s15
 8002ba2:	eef0 1a65 	vmov.f32	s3, s11
 8002ba6:	eeb0 1a46 	vmov.f32	s2, s12
 8002baa:	eef0 0a66 	vmov.f32	s1, s13
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	f001 fe01 	bl	80047b8 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002bb6:	f002 fb9b 	bl	80052f0 <quaternionToYaw>
 8002bba:	eef0 7a40 	vmov.f32	s15, s0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002bc4:	f002 fbf2 	bl	80053ac <quaternionToPitch>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002bd2:	f002 fc23 	bl	800541c <quaternionToRoll>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002be0:	f002 fa5e 	bl	80050a0 <quaternionToThetaZ>
 8002be4:	eef0 7a40 	vmov.f32	s15, s0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002bee:	f001 fbcf 	bl	8004390 <quaternionToYawDegree1>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002bfc:	f002 fae0 	bl	80051c0 <quaternionToPitchDegree>
 8002c00:	eef0 7a40 	vmov.f32	s15, s0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002c0a:	f002 fb29 	bl	8005260 <quaternionToRollDegree>
 8002c0e:	eef0 7a40 	vmov.f32	s15, s0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c24:	eef1 7a67 	vneg.f32	s15, s15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002c34:	eef0 1a46 	vmov.f32	s3, s12
 8002c38:	eeb0 1a66 	vmov.f32	s2, s13
 8002c3c:	eef0 0a67 	vmov.f32	s1, s15
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	f001 f98a 	bl	8003f5c <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002c48:	f001 faae 	bl	80041a8 <quaternionToYaw1>
 8002c4c:	eef0 7a40 	vmov.f32	s15, s0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e00d      	b.n	8002c70 <bmi088_update+0x768>
 8002c54:	f3af 8000 	nop.w
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40dfffc0 	.word	0x40dfffc0
 8002c60:	a0000000 	.word	0xa0000000
 8002c64:	3f91df46 	.word	0x3f91df46
 8002c68:	20000236 	.word	0x20000236
 8002c6c:	20000235 	.word	0x20000235
 8002c70:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002c74:	f001 faf6 	bl	8004264 <quaternionToPitch1>
 8002c78:	eef0 7a40 	vmov.f32	s15, s0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002c82:	f001 fb27 	bl	80042d4 <quaternionToRoll1>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <bmi088_update+0x7a4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <bmi088_update+0x7a8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <bmi088_update+0x79e>
					return;
 8002ca4:	bf00      	nop
		}
}
 8002ca6:	3738      	adds	r7, #56	@ 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cac:	20000237 	.word	0x20000237
 8002cb0:	20000235 	.word	0x20000235

08002cb4 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e01f      	b.n	8002d4e <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	e016      	b.n	8002d42 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d101      	bne.n	8002d20 <KalmanFilter_Init+0x38>
 8002d1c:	491b      	ldr	r1, [pc, #108]	@ (8002d8c <KalmanFilter_Init+0xa4>)
 8002d1e:	e001      	b.n	8002d24 <KalmanFilter_Init+0x3c>
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4413      	add	r3, r2
 8002d32:	3302      	adds	r3, #2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4403      	add	r3, r0
 8002d38:	3304      	adds	r3, #4
 8002d3a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	dde5      	ble.n	8002d14 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	dddc      	ble.n	8002d0e <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <KalmanFilter_Init+0xa8>)
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <KalmanFilter_Init+0xac>)
 8002d5e:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <KalmanFilter_Init+0xb0>)
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	42c80000 	.word	0x42c80000
 8002d90:	3c23d70a 	.word	0x3c23d70a
 8002d94:	3ba3d70a 	.word	0x3ba3d70a
 8002d98:	40a00000 	.word	0x40a00000

08002d9c <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_, L86_GNSS_BAUD_RATE baud_rate)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	huart_gnss = huart_gnss_;
 8002da6:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <L86_GNSS_Init+0x30>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6013      	str	r3, [r2, #0]
	set_baud_rate(baud_rate);
 8002dac:	6838      	ldr	r0, [r7, #0]
 8002dae:	f000 f905 	bl	8002fbc <set_baud_rate>
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <L86_GNSS_Init+0x30>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002dba:	4905      	ldr	r1, [pc, #20]	@ (8002dd0 <L86_GNSS_Init+0x34>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f007 fb56 	bl	800a46e <HAL_UART_Receive_DMA>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000023c 	.word	0x2000023c
 8002dd0:	20000240 	.word	0x20000240

08002dd4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_UART_RxHalfCpltCallback+0x24>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d104      	bne.n	8002df0 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 8002de6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002dea:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <HAL_UART_RxHalfCpltCallback+0x28>)
 8002dec:	f000 f97a 	bl	80030e4 <process_data>
	}
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2000023c 	.word	0x2000023c
 8002dfc:	20000240 	.word	0x20000240

08002e00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_UART_RxCpltCallback+0x24>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 8002e12:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002e16:	4804      	ldr	r0, [pc, #16]	@ (8002e28 <HAL_UART_RxCpltCallback+0x28>)
 8002e18:	f000 f964 	bl	80030e4 <process_data>
	}
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000023c 	.word	0x2000023c
 8002e28:	200006f0 	.word	0x200006f0

08002e2c <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f967 	bl	8003108 <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9e8 	bl	8003210 <get_GPGGA_data>
	format_data(gps_data_);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa57 	bl	80032f4 <format_data>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <L86_GNSS_Print_Info>:

void L86_GNSS_Print_Info(gps_data_t *gps_data_, UART_HandleTypeDef *huart_Seri_Port)
{
 8002e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e54:	b0af      	sub	sp, #188	@ 0xbc
 8002e56:	af1c      	add	r7, sp, #112	@ 0x70
 8002e58:	6478      	str	r0, [r7, #68]	@ 0x44
 8002e5a:	6439      	str	r1, [r7, #64]	@ 0x40
	memset(msg, 0, MSG_SIZE);
 8002e5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002e60:	2100      	movs	r1, #0
 8002e62:	4853      	ldr	r0, [pc, #332]	@ (8002fb0 <L86_GNSS_Print_Info+0x160>)
 8002e64:	f009 fcf1 	bl	800c84a <memset>

	if(gps_data_->is_valid == VALID)
 8002e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6a:	791b      	ldrb	r3, [r3, #4]
 8002e6c:	2b41      	cmp	r3, #65	@ 0x41
 8002e6e:	f040 808a 	bne.w	8002f86 <L86_GNSS_Print_Info+0x136>
	{
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
					"Speed: %f, Course: %f, Satellites in use: %u, HDOP: %f, Altitude: %f, Geoid height: %f, Orthometric height: %f\r\n",
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fb86 	bl	8000588 <__aeabi_f2d>
 8002e7c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb7c 	bl	8000588 <__aeabi_f2d>
 8002e90:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					gps_data_->latitude, gps_data_->N_S, gps_data_->longitude, gps_data_->E_W,
 8002e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e96:	7d1b      	ldrb	r3, [r3, #20]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ea8:	623b      	str	r3, [r7, #32]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002eb0:	61fb      	str	r3, [r7, #28]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002eb8:	61bb      	str	r3, [r7, #24]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ec0:	617b      	str	r3, [r7, #20]
					gps_data_->time[0], gps_data_->time[1], gps_data_->time[2], gps_data_->date[0], gps_data_->date[1], gps_data_->date[2],
 8002ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ec8:	613b      	str	r3, [r7, #16]
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ecc:	699b      	ldr	r3, [r3, #24]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fb5a 	bl	8000588 <__aeabi_f2d>
 8002ed4:	e9c7 0102 	strd	r0, r1, [r7, #8]
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eda:	69db      	ldr	r3, [r3, #28]
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fb53 	bl	8000588 <__aeabi_f2d>
 8002ee2:	e9c7 0100 	strd	r0, r1, [r7]
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002eec:	461e      	mov	r6, r3
					gps_data_->speed_over_ground, gps_data_->course_over_ground, gps_data_->satellites_in_use, gps_data_->HDOP,
 8002eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fb48 	bl	8000588 <__aeabi_f2d>
 8002ef8:	4682      	mov	sl, r0
 8002efa:	468b      	mov	fp, r1
					gps_data_->altitude, gps_data_->geoid_height, gps_data_->orthometric_height);
 8002efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fb41 	bl	8000588 <__aeabi_f2d>
 8002f06:	4680      	mov	r8, r0
 8002f08:	4689      	mov	r9, r1
					gps_data_->altitude, gps_data_->geoid_height, gps_data_->orthometric_height);
 8002f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fb3a 	bl	8000588 <__aeabi_f2d>
 8002f14:	4604      	mov	r4, r0
 8002f16:	460d      	mov	r5, r1
					gps_data_->altitude, gps_data_->geoid_height, gps_data_->orthometric_height);
 8002f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
		snprintf(msg, MSG_SIZE, "Latitude: %f %c, Longitude: %f %c, Time: %u.%u.%u, Date: %u/%u/%u\r\n"
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb33 	bl	8000588 <__aeabi_f2d>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8002f2a:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8002f2e:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 8002f32:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8002f36:	9612      	str	r6, [sp, #72]	@ 0x48
 8002f38:	ed97 7b00 	vldr	d7, [r7]
 8002f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8002f40:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	920c      	str	r2, [sp, #48]	@ 0x30
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	920a      	str	r2, [sp, #40]	@ 0x28
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	9208      	str	r2, [sp, #32]
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	9207      	str	r2, [sp, #28]
 8002f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f62:	9206      	str	r2, [sp, #24]
 8002f64:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002f68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6e:	9302      	str	r3, [sp, #8]
 8002f70:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002f74:	ed8d 7b00 	vstr	d7, [sp]
 8002f78:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb4 <L86_GNSS_Print_Info+0x164>)
 8002f7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002f7e:	480c      	ldr	r0, [pc, #48]	@ (8002fb0 <L86_GNSS_Print_Info+0x160>)
 8002f80:	f009 fb90 	bl	800c6a4 <sniprintf>
 8002f84:	e004      	b.n	8002f90 <L86_GNSS_Print_Info+0x140>
	}
	else
	{
		memcpy(msg, "Invalid Data!\r\n", 15);
 8002f86:	220f      	movs	r2, #15
 8002f88:	490b      	ldr	r1, [pc, #44]	@ (8002fb8 <L86_GNSS_Print_Info+0x168>)
 8002f8a:	4809      	ldr	r0, [pc, #36]	@ (8002fb0 <L86_GNSS_Print_Info+0x160>)
 8002f8c:	f009 fd03 	bl	800c996 <memcpy>
	}

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002f90:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <L86_GNSS_Print_Info+0x160>)
 8002f92:	f7fd f98d 	bl	80002b0 <strlen>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	4904      	ldr	r1, [pc, #16]	@ (8002fb0 <L86_GNSS_Print_Info+0x160>)
 8002fa0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002fa2:	f007 f9d9 	bl	800a358 <HAL_UART_Transmit>
}
 8002fa6:	bf00      	nop
 8002fa8:	374c      	adds	r7, #76	@ 0x4c
 8002faa:	46bd      	mov	sp, r7
 8002fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb0:	200010dc 	.word	0x200010dc
 8002fb4:	08011f20 	.word	0x08011f20
 8002fb8:	08011fd4 	.word	0x08011fd4

08002fbc <set_baud_rate>:

static void set_baud_rate(L86_GNSS_BAUD_RATE baud_rate)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b093      	sub	sp, #76	@ 0x4c
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	6078      	str	r0, [r7, #4]
	char commend_buffer[COMMEND_BUFFER_SIZE];

	memset(commend_buffer, 0, COMMEND_BUFFER_SIZE);
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	2232      	movs	r2, #50	@ 0x32
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f009 fc3c 	bl	800c84a <memset>
	snprintf(commend_buffer, COMMEND_BUFFER_SIZE, "PMTK251,%ul", baud_rate);
 8002fd2:	f107 000c 	add.w	r0, r7, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <set_baud_rate+0xd8>)
 8002fda:	2132      	movs	r1, #50	@ 0x32
 8002fdc:	f009 fb62 	bl	800c6a4 <sniprintf>
	uint8_t checksum = calculate_checksum(commend_buffer);
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f85d 	bl	80030a4 <calculate_checksum>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	memset(commend_buffer, 0, COMMEND_BUFFER_SIZE);
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	2232      	movs	r2, #50	@ 0x32
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f009 fc26 	bl	800c84a <memset>
	snprintf(commend_buffer, COMMEND_BUFFER_SIZE, "$PMTK251,%ul*%02X\r\n", baud_rate, checksum);
 8002ffe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003002:	f107 000c 	add.w	r0, r7, #12
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <set_baud_rate+0xdc>)
 800300c:	2132      	movs	r1, #50	@ 0x32
 800300e:	f009 fb49 	bl	800c6a4 <sniprintf>

	HAL_UART_Transmit(huart_gnss, (uint8_t *)commend_buffer, strlen(commend_buffer), 100);
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <set_baud_rate+0xe0>)
 8003014:	681c      	ldr	r4, [r3, #0]
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd f948 	bl	80002b0 <strlen>
 8003020:	4603      	mov	r3, r0
 8003022:	b29a      	uxth	r2, r3
 8003024:	f107 010c 	add.w	r1, r7, #12
 8003028:	2364      	movs	r3, #100	@ 0x64
 800302a:	4620      	mov	r0, r4
 800302c:	f007 f994 	bl	800a358 <HAL_UART_Transmit>
	HAL_Delay(100);
 8003030:	2064      	movs	r0, #100	@ 0x64
 8003032:	f003 f8a1 	bl	8006178 <HAL_Delay>

	HAL_UART_DeInit(huart_gnss);
 8003036:	4b19      	ldr	r3, [pc, #100]	@ (800309c <set_baud_rate+0xe0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f007 f95a 	bl	800a2f4 <HAL_UART_DeInit>
	huart_gnss->Instance = GNSS_UART;
 8003040:	4b16      	ldr	r3, [pc, #88]	@ (800309c <set_baud_rate+0xe0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <set_baud_rate+0xe4>)
 8003046:	601a      	str	r2, [r3, #0]
	huart_gnss->Init.BaudRate = baud_rate;
 8003048:	4b14      	ldr	r3, [pc, #80]	@ (800309c <set_baud_rate+0xe0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]
	huart_gnss->Init.WordLength = UART_WORDLENGTH_8B;
 8003050:	4b12      	ldr	r3, [pc, #72]	@ (800309c <set_baud_rate+0xe0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
	huart_gnss->Init.StopBits = UART_STOPBITS_1;
 8003058:	4b10      	ldr	r3, [pc, #64]	@ (800309c <set_baud_rate+0xe0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
	huart_gnss->Init.Parity = UART_PARITY_NONE;
 8003060:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <set_baud_rate+0xe0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
	huart_gnss->Init.Mode = UART_MODE_TX_RX;
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <set_baud_rate+0xe0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	220c      	movs	r2, #12
 800306e:	615a      	str	r2, [r3, #20]
	huart_gnss->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003070:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <set_baud_rate+0xe0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
	huart_gnss->Init.OverSampling = UART_OVERSAMPLING_16;
 8003078:	4b08      	ldr	r3, [pc, #32]	@ (800309c <set_baud_rate+0xe0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(huart_gnss);
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <set_baud_rate+0xe0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f007 f8e5 	bl	800a254 <HAL_UART_Init>
}
 800308a:	bf00      	nop
 800308c:	3744      	adds	r7, #68	@ 0x44
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	bf00      	nop
 8003094:	08011fe4 	.word	0x08011fe4
 8003098:	08011ff0 	.word	0x08011ff0
 800309c:	2000023c 	.word	0x2000023c
 80030a0:	40011400 	.word	0x40011400

080030a4 <calculate_checksum>:

static uint8_t calculate_checksum(const char *data)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    uint8_t check_sum = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
	while(data[i] != '\0')
 80030b4:	e009      	b.n	80030ca <calculate_checksum+0x26>
	{
        check_sum ^= data[i];
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	4053      	eors	r3, r2
 80030c2:	73fb      	strb	r3, [r7, #15]
        i++;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
	while(data[i] != '\0')
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ef      	bne.n	80030b6 <calculate_checksum+0x12>
	}
	return check_sum;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <process_data>:

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4803      	ldr	r0, [pc, #12]	@ (8003104 <process_data+0x20>)
 80030f8:	f009 fc4d 	bl	800c996 <memcpy>
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000ba0 	.word	0x20000ba0

08003108 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b08d      	sub	sp, #52	@ 0x34
 800310c:	af08      	add	r7, sp, #32
 800310e:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 8003110:	4937      	ldr	r1, [pc, #220]	@ (80031f0 <get_GNRMC_data+0xe8>)
 8003112:	4838      	ldr	r0, [pc, #224]	@ (80031f4 <get_GNRMC_data+0xec>)
 8003114:	f009 fba1 	bl	800c85a <strstr>
 8003118:	4603      	mov	r3, r0
 800311a:	4a37      	ldr	r2, [pc, #220]	@ (80031f8 <get_GNRMC_data+0xf0>)
 800311c:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 800311e:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <get_GNRMC_data+0xf0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <get_GNRMC_data+0x32>
 8003126:	4b34      	ldr	r3, [pc, #208]	@ (80031f8 <get_GNRMC_data+0xf0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3311      	adds	r3, #17
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b41      	cmp	r3, #65	@ 0x41
 8003130:	d103      	bne.n	800313a <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 8003132:	4b32      	ldr	r3, [pc, #200]	@ (80031fc <get_GNRMC_data+0xf4>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e005      	b.n	8003146 <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 800313a:	4b30      	ldr	r3, [pc, #192]	@ (80031fc <get_GNRMC_data+0xf4>)
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2256      	movs	r2, #86	@ 0x56
 8003144:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 8003146:	4b2d      	ldr	r3, [pc, #180]	@ (80031fc <get_GNRMC_data+0xf4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d148      	bne.n	80031e0 <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 800314e:	2278      	movs	r2, #120	@ 0x78
 8003150:	2100      	movs	r1, #0
 8003152:	482b      	ldr	r0, [pc, #172]	@ (8003200 <get_GNRMC_data+0xf8>)
 8003154:	f009 fb79 	bl	800c84a <memset>
		counter = 0;
 8003158:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <get_GNRMC_data+0xfc>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 800315e:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <get_GNRMC_data+0xf0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <get_GNRMC_data+0x100>)
 8003164:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8003166:	e011      	b.n	800318c <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 8003168:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <get_GNRMC_data+0x100>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a25      	ldr	r2, [pc, #148]	@ (8003204 <get_GNRMC_data+0xfc>)
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	7819      	ldrb	r1, [r3, #0]
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <get_GNRMC_data+0xf8>)
 8003174:	5499      	strb	r1, [r3, r2]
			counter++;
 8003176:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <get_GNRMC_data+0xfc>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <get_GNRMC_data+0xfc>)
 8003180:	701a      	strb	r2, [r3, #0]
			current_char++;
 8003182:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <get_GNRMC_data+0x100>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a1f      	ldr	r2, [pc, #124]	@ (8003208 <get_GNRMC_data+0x100>)
 800318a:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 800318c:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <get_GNRMC_data+0x100>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b2a      	cmp	r3, #42	@ 0x2a
 8003194:	d1e8      	bne.n	8003168 <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f103 0c04 	add.w	ip, r3, #4
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3308      	adds	r3, #8
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	320c      	adds	r2, #12
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	3110      	adds	r1, #16
 80031ac:	6079      	str	r1, [r7, #4]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	3014      	adds	r0, #20
 80031b2:	68fc      	ldr	r4, [r7, #12]
 80031b4:	3418      	adds	r4, #24
 80031b6:	68fd      	ldr	r5, [r7, #12]
 80031b8:	351c      	adds	r5, #28
 80031ba:	68fe      	ldr	r6, [r7, #12]
 80031bc:	3620      	adds	r6, #32
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	3124      	adds	r1, #36	@ 0x24
 80031c2:	9107      	str	r1, [sp, #28]
 80031c4:	9606      	str	r6, [sp, #24]
 80031c6:	9505      	str	r5, [sp, #20]
 80031c8:	9404      	str	r4, [sp, #16]
 80031ca:	9003      	str	r0, [sp, #12]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	9102      	str	r1, [sp, #8]
 80031d0:	9201      	str	r2, [sp, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4663      	mov	r3, ip
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	490c      	ldr	r1, [pc, #48]	@ (800320c <get_GNRMC_data+0x104>)
 80031da:	4809      	ldr	r0, [pc, #36]	@ (8003200 <get_GNRMC_data+0xf8>)
 80031dc:	f009 fab6 	bl	800c74c <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <get_GNRMC_data+0xf0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08012004 	.word	0x08012004
 80031f4:	20000ba0 	.word	0x20000ba0
 80031f8:	20001050 	.word	0x20001050
 80031fc:	20001058 	.word	0x20001058
 8003200:	20001060 	.word	0x20001060
 8003204:	200010d8 	.word	0x200010d8
 8003208:	2000105c 	.word	0x2000105c
 800320c:	0801200c 	.word	0x0801200c

08003210 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	b08d      	sub	sp, #52	@ 0x34
 8003214:	af08      	add	r7, sp, #32
 8003216:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8003218:	492f      	ldr	r1, [pc, #188]	@ (80032d8 <get_GPGGA_data+0xc8>)
 800321a:	4830      	ldr	r0, [pc, #192]	@ (80032dc <get_GPGGA_data+0xcc>)
 800321c:	f009 fb1d 	bl	800c85a <strstr>
 8003220:	4603      	mov	r3, r0
 8003222:	4a2f      	ldr	r2, [pc, #188]	@ (80032e0 <get_GPGGA_data+0xd0>)
 8003224:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 8003226:	4b2e      	ldr	r3, [pc, #184]	@ (80032e0 <get_GPGGA_data+0xd0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04f      	beq.n	80032ce <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	791b      	ldrb	r3, [r3, #4]
 8003232:	2b41      	cmp	r3, #65	@ 0x41
 8003234:	d148      	bne.n	80032c8 <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 8003236:	2278      	movs	r2, #120	@ 0x78
 8003238:	2100      	movs	r1, #0
 800323a:	482a      	ldr	r0, [pc, #168]	@ (80032e4 <get_GPGGA_data+0xd4>)
 800323c:	f009 fb05 	bl	800c84a <memset>
			counter = 0;
 8003240:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <get_GPGGA_data+0xd8>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8003246:	4b26      	ldr	r3, [pc, #152]	@ (80032e0 <get_GPGGA_data+0xd0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a28      	ldr	r2, [pc, #160]	@ (80032ec <get_GPGGA_data+0xdc>)
 800324c:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 800324e:	e011      	b.n	8003274 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8003250:	4b26      	ldr	r3, [pc, #152]	@ (80032ec <get_GPGGA_data+0xdc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a24      	ldr	r2, [pc, #144]	@ (80032e8 <get_GPGGA_data+0xd8>)
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	7819      	ldrb	r1, [r3, #0]
 800325a:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <get_GPGGA_data+0xd4>)
 800325c:	5499      	strb	r1, [r3, r2]
				counter++;
 800325e:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <get_GPGGA_data+0xd8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <get_GPGGA_data+0xd8>)
 8003268:	701a      	strb	r2, [r3, #0]
				current_char++;
 800326a:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <get_GPGGA_data+0xdc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <get_GPGGA_data+0xdc>)
 8003272:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8003274:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <get_GPGGA_data+0xdc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b2a      	cmp	r3, #42	@ 0x2a
 800327c:	d1e8      	bne.n	8003250 <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f103 0c08 	add.w	ip, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	330c      	adds	r3, #12
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	3210      	adds	r2, #16
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	3114      	adds	r1, #20
 8003294:	6079      	str	r1, [r7, #4]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	3025      	adds	r0, #37	@ 0x25
 800329a:	68fc      	ldr	r4, [r7, #12]
 800329c:	3426      	adds	r4, #38	@ 0x26
 800329e:	68fd      	ldr	r5, [r7, #12]
 80032a0:	3528      	adds	r5, #40	@ 0x28
 80032a2:	68fe      	ldr	r6, [r7, #12]
 80032a4:	362c      	adds	r6, #44	@ 0x2c
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	3130      	adds	r1, #48	@ 0x30
 80032aa:	9107      	str	r1, [sp, #28]
 80032ac:	9606      	str	r6, [sp, #24]
 80032ae:	9505      	str	r5, [sp, #20]
 80032b0:	9404      	str	r4, [sp, #16]
 80032b2:	9003      	str	r0, [sp, #12]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	9102      	str	r1, [sp, #8]
 80032b8:	9201      	str	r2, [sp, #4]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4663      	mov	r3, ip
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	490b      	ldr	r1, [pc, #44]	@ (80032f0 <get_GPGGA_data+0xe0>)
 80032c2:	4808      	ldr	r0, [pc, #32]	@ (80032e4 <get_GPGGA_data+0xd4>)
 80032c4:	f009 fa42 	bl	800c74c <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <get_GPGGA_data+0xd0>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
	}
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	08012034 	.word	0x08012034
 80032dc:	20000ba0 	.word	0x20000ba0
 80032e0:	20001054 	.word	0x20001054
 80032e4:	20001060 	.word	0x20001060
 80032e8:	200010d8 	.word	0x200010d8
 80032ec:	2000105c 	.word	0x2000105c
 80032f0:	0801203c 	.word	0x0801203c

080032f4 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	791b      	ldrb	r3, [r3, #4]
 8003300:	2b41      	cmp	r3, #65	@ 0x41
 8003302:	f040 8154 	bne.w	80035ae <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4aab      	ldr	r2, [pc, #684]	@ (80035b8 <format_data+0x2c4>)
 800330c:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 800330e:	4baa      	ldr	r3, [pc, #680]	@ (80035b8 <format_data+0x2c4>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80035bc <format_data+0x2c8>
 8003318:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800331c:	ee16 0a90 	vmov	r0, s13
 8003320:	f7fd f932 	bl	8000588 <__aeabi_f2d>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	ec43 2b10 	vmov	d0, r2, r3
 800332c:	f00d fc14 	bl	8010b58 <floor>
 8003330:	ec53 2b10 	vmov	r2, r3, d0
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fc76 	bl	8000c28 <__aeabi_d2f>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8003342:	4b9d      	ldr	r3, [pc, #628]	@ (80035b8 <format_data+0x2c4>)
 8003344:	ed93 7a00 	vldr	s14, [r3]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800334e:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80035bc <format_data+0x2c8>
 8003352:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335a:	4b97      	ldr	r3, [pc, #604]	@ (80035b8 <format_data+0x2c4>)
 800335c:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8003360:	4b95      	ldr	r3, [pc, #596]	@ (80035b8 <format_data+0x2c4>)
 8003362:	ed93 7a00 	vldr	s14, [r3]
 8003366:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80035c0 <format_data+0x2cc>
 800336a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336e:	4b92      	ldr	r3, [pc, #584]	@ (80035b8 <format_data+0x2c4>)
 8003370:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800337a:	4b8f      	ldr	r3, [pc, #572]	@ (80035b8 <format_data+0x2c4>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	4a8d      	ldr	r2, [pc, #564]	@ (80035c4 <format_data+0x2d0>)
 8003390:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8003392:	4b8c      	ldr	r3, [pc, #560]	@ (80035c4 <format_data+0x2d0>)
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80035bc <format_data+0x2c8>
 800339c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033a0:	ee16 0a90 	vmov	r0, s13
 80033a4:	f7fd f8f0 	bl	8000588 <__aeabi_f2d>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	ec43 2b10 	vmov	d0, r2, r3
 80033b0:	f00d fbd2 	bl	8010b58 <floor>
 80033b4:	ec53 2b10 	vmov	r2, r3, d0
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fd fc34 	bl	8000c28 <__aeabi_d2f>
 80033c0:	4602      	mov	r2, r0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <format_data+0x2d0>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033d2:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80035bc <format_data+0x2c8>
 80033d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033de:	4b79      	ldr	r3, [pc, #484]	@ (80035c4 <format_data+0x2d0>)
 80033e0:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 80033e4:	4b77      	ldr	r3, [pc, #476]	@ (80035c4 <format_data+0x2d0>)
 80033e6:	ed93 7a00 	vldr	s14, [r3]
 80033ea:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80035c0 <format_data+0x2cc>
 80033ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f2:	4b74      	ldr	r3, [pc, #464]	@ (80035c4 <format_data+0x2d0>)
 80033f4:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80033fe:	4b71      	ldr	r3, [pc, #452]	@ (80035c4 <format_data+0x2d0>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6d      	ldr	r2, [pc, #436]	@ (80035c8 <format_data+0x2d4>)
 8003414:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8003416:	4b6c      	ldr	r3, [pc, #432]	@ (80035c8 <format_data+0x2d4>)
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80035cc <format_data+0x2d8>
 8003420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003424:	ee16 0a90 	vmov	r0, s13
 8003428:	f7fd f8ae 	bl	8000588 <__aeabi_f2d>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	ec43 2b10 	vmov	d0, r2, r3
 8003434:	f00d fb90 	bl	8010b58 <floor>
 8003438:	ec53 2b10 	vmov	r2, r3, d0
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f7fd fbd2 	bl	8000be8 <__aeabi_d2uiz>
 8003444:	4603      	mov	r3, r0
 8003446:	b2da      	uxtb	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 800344e:	4b5e      	ldr	r3, [pc, #376]	@ (80035c8 <format_data+0x2d4>)
 8003450:	ed93 7a00 	vldr	s14, [r3]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800345a:	461a      	mov	r2, r3
 800345c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003470:	4b55      	ldr	r3, [pc, #340]	@ (80035c8 <format_data+0x2d4>)
 8003472:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347c:	3303      	adds	r3, #3
 800347e:	b2da      	uxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348c:	2b17      	cmp	r3, #23
 800348e:	d907      	bls.n	80034a0 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003496:	3b18      	subs	r3, #24
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 80034a0:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <format_data+0x2d4>)
 80034a2:	edd3 7a00 	vldr	s15, [r3]
 80034a6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80035bc <format_data+0x2c8>
 80034aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80034ae:	ee16 0a90 	vmov	r0, s13
 80034b2:	f7fd f869 	bl	8000588 <__aeabi_f2d>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	ec43 2b10 	vmov	d0, r2, r3
 80034be:	f00d fb4b 	bl	8010b58 <floor>
 80034c2:	ec53 2b10 	vmov	r2, r3, d0
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fd fb8d 	bl	8000be8 <__aeabi_d2uiz>
 80034ce:	4603      	mov	r3, r0
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 80034d8:	4b3b      	ldr	r3, [pc, #236]	@ (80035c8 <format_data+0x2d4>)
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e4:	461a      	mov	r2, r3
 80034e6:	2364      	movs	r3, #100	@ 0x64
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f8:	4b33      	ldr	r3, [pc, #204]	@ (80035c8 <format_data+0x2d4>)
 80034fa:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 80034fe:	4b32      	ldr	r3, [pc, #200]	@ (80035c8 <format_data+0x2d4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f840 	bl	8000588 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	ec43 2b10 	vmov	d0, r2, r3
 8003510:	f00d fb22 	bl	8010b58 <floor>
 8003514:	ec53 2b10 	vmov	r2, r3, d0
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd fb64 	bl	8000be8 <__aeabi_d2uiz>
 8003520:	4603      	mov	r3, r0
 8003522:	b2da      	uxtb	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a28      	ldr	r2, [pc, #160]	@ (80035d0 <format_data+0x2dc>)
 8003530:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8003532:	4b27      	ldr	r3, [pc, #156]	@ (80035d0 <format_data+0x2dc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a27      	ldr	r2, [pc, #156]	@ (80035d4 <format_data+0x2e0>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	0b5b      	lsrs	r3, r3, #13
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8003546:	4b22      	ldr	r3, [pc, #136]	@ (80035d0 <format_data+0x2dc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8003550:	4611      	mov	r1, r2
 8003552:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003556:	fb01 f202 	mul.w	r2, r1, r2
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <format_data+0x2dc>)
 800355e:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8003560:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <format_data+0x2dc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <format_data+0x2e4>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	b2da      	uxtb	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8003574:	4b16      	ldr	r3, [pc, #88]	@ (80035d0 <format_data+0x2dc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800357e:	4611      	mov	r1, r2
 8003580:	2264      	movs	r2, #100	@ 0x64
 8003582:	fb01 f202 	mul.w	r2, r1, r2
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	4a11      	ldr	r2, [pc, #68]	@ (80035d0 <format_data+0x2dc>)
 800358a:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 800358c:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <format_data+0x2dc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000126c 	.word	0x2000126c
 80035bc:	42c80000 	.word	0x42c80000
 80035c0:	42700000 	.word	0x42700000
 80035c4:	20001270 	.word	0x20001270
 80035c8:	20001274 	.word	0x20001274
 80035cc:	461c4000 	.word	0x461c4000
 80035d0:	20001278 	.word	0x20001278
 80035d4:	d1b71759 	.word	0xd1b71759
 80035d8:	51eb851f 	.word	0x51eb851f

080035dc <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
 80035e8:	460b      	mov	r3, r1
 80035ea:	71bb      	strb	r3, [r7, #6]
 80035ec:	4613      	mov	r3, r2
 80035ee:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80035f4:	79bb      	ldrb	r3, [r7, #6]
 80035f6:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80035f8:	797b      	ldrb	r3, [r7, #5]
 80035fa:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e00c      	b.n	800361c <send_command+0x40>
        command[3 + i] = data[i];
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	441a      	add	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3303      	adds	r3, #3
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	3318      	adds	r3, #24
 8003610:	443b      	add	r3, r7
 8003612:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b08      	cmp	r3, #8
 8003620:	ddef      	ble.n	8003602 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 8003622:	f107 0108 	add.w	r1, r7, #8
 8003626:	2364      	movs	r3, #100	@ 0x64
 8003628:	220c      	movs	r2, #12
 800362a:	4803      	ldr	r0, [pc, #12]	@ (8003638 <send_command+0x5c>)
 800362c:	f006 fe94 	bl	800a358 <HAL_UART_Transmit>
}
 8003630:	bf00      	nop
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20001414 	.word	0x20001414

0800363c <lora_activate>:

void lora_activate()
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8003640:	2200      	movs	r2, #0
 8003642:	2104      	movs	r1, #4
 8003644:	4804      	ldr	r0, [pc, #16]	@ (8003658 <lora_activate+0x1c>)
 8003646:	f004 fb27 	bl	8007c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 800364a:	2200      	movs	r2, #0
 800364c:	2108      	movs	r1, #8
 800364e:	4802      	ldr	r0, [pc, #8]	@ (8003658 <lora_activate+0x1c>)
 8003650:	f004 fb22 	bl	8007c98 <HAL_GPIO_WritePin>
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40020800 	.word	0x40020800

0800365c <lora_deactivate>:

void lora_deactivate()
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 8003660:	2201      	movs	r2, #1
 8003662:	2104      	movs	r1, #4
 8003664:	4804      	ldr	r0, [pc, #16]	@ (8003678 <lora_deactivate+0x1c>)
 8003666:	f004 fb17 	bl	8007c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 800366a:	2201      	movs	r2, #1
 800366c:	2108      	movs	r1, #8
 800366e:	4802      	ldr	r0, [pc, #8]	@ (8003678 <lora_deactivate+0x1c>)
 8003670:	f004 fb12 	bl	8007c98 <HAL_GPIO_WritePin>
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40020800 	.word	0x40020800

0800367c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2208      	movs	r2, #8
 80036b2:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2207      	movs	r2, #7
 80036b8:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	79db      	ldrb	r3, [r3, #7]
 80036be:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	799b      	ldrb	r3, [r3, #6]
 80036c4:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7a5b      	ldrb	r3, [r3, #9]
 80036ca:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7c5b      	ldrb	r3, [r3, #17]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	785b      	ldrb	r3, [r3, #1]
 80036dc:	4313      	orrs	r3, r2
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	789a      	ldrb	r2, [r3, #2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7a9b      	ldrb	r3, [r3, #10]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	78db      	ldrb	r3, [r3, #3]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7a1b      	ldrb	r3, [r3, #8]
 80036fc:	2b53      	cmp	r3, #83	@ 0x53
 80036fe:	d902      	bls.n	8003706 <lora_configure+0x8a>
    	config->channel = 83;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2253      	movs	r2, #83	@ 0x53
 8003704:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7a1b      	ldrb	r3, [r3, #8]
 800370a:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7ada      	ldrb	r2, [r3, #11]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7b1b      	ldrb	r3, [r3, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	b2da      	uxtb	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7b5b      	ldrb	r3, [r3, #13]
 800371c:	4313      	orrs	r3, r2
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7b9b      	ldrb	r3, [r3, #14]
 8003724:	4313      	orrs	r3, r2
 8003726:	b2da      	uxtb	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7bdb      	ldrb	r3, [r3, #15]
 800372c:	4313      	orrs	r3, r2
 800372e:	b2da      	uxtb	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7c1b      	ldrb	r3, [r3, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	795b      	ldrb	r3, [r3, #5]
 800373e:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	791b      	ldrb	r3, [r3, #4]
 8003744:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	2209      	movs	r2, #9
 800374c:	2100      	movs	r1, #0
 800374e:	20c0      	movs	r0, #192	@ 0xc0
 8003750:	f7ff ff44 	bl	80035dc <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 8003754:	bf00      	nop
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003760:	f002 fc98 	bl	8006094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003764:	f000 f88c 	bl	8003880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003768:	f000 fa6e 	bl	8003c48 <MX_GPIO_Init>
  MX_DMA_Init();
 800376c:	f000 fa44 	bl	8003bf8 <MX_DMA_Init>
  MX_I2C1_Init();
 8003770:	f000 f944 	bl	80039fc <MX_I2C1_Init>
  MX_I2C3_Init();
 8003774:	f000 f970 	bl	8003a58 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003778:	f000 f99c 	bl	8003ab4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800377c:	f000 f9e8 	bl	8003b50 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003780:	f000 f8ea 	bl	8003958 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8003784:	f000 fa0e 	bl	8003ba4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8003788:	f000 f994 	bl	8003ab4 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800378c:	4831      	ldr	r0, [pc, #196]	@ (8003854 <main+0xf8>)
 800378e:	f006 f941 	bl	8009a14 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2101      	movs	r1, #1
 8003796:	201c      	movs	r0, #28
 8003798:	f003 fb51 	bl	8006e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800379c:	201c      	movs	r0, #28
 800379e:	f003 fb6a 	bl	8006e76 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 80037a2:	2201      	movs	r2, #1
 80037a4:	2100      	movs	r1, #0
 80037a6:	2009      	movs	r0, #9
 80037a8:	f003 fb49 	bl	8006e3e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 80037ac:	2201      	movs	r2, #1
 80037ae:	2100      	movs	r1, #0
 80037b0:	200a      	movs	r0, #10
 80037b2:	f003 fb44 	bl	8006e3e <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80037b6:	200a      	movs	r0, #10
 80037b8:	f003 fb5d 	bl	8006e76 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80037bc:	2009      	movs	r0, #9
 80037be:	f003 fb5a 	bl	8006e76 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 80037c2:	f000 fad3 	bl	8003d6c <bme280_begin>
	HAL_Delay(1000);
 80037c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037ca:	f002 fcd5 	bl	8006178 <HAL_Delay>
	bme280_config();
 80037ce:	f7fd fe5d 	bl	800148c <bme280_config>
	bme280_update();
 80037d2:	f7fe f817 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 80037d6:	f000 fae1 	bl	8003d9c <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 80037da:	481f      	ldr	r0, [pc, #124]	@ (8003858 <main+0xfc>)
 80037dc:	f7fe fc92 	bl	8002104 <bmi088_config>
	//get_offset(&BMI_sensor);

	// Initialize HMC1021 ADC DMA for single-axis magnetometer readings
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)hmc1021_adc_buffer, 1);
 80037e0:	2201      	movs	r2, #1
 80037e2:	491e      	ldr	r1, [pc, #120]	@ (800385c <main+0x100>)
 80037e4:	481e      	ldr	r0, [pc, #120]	@ (8003860 <main+0x104>)
 80037e6:	f002 fe3f 	bl	8006468 <HAL_ADC_Start_DMA>


	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 80037ea:	f001 fe75 	bl	80054d8 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 80037ee:	481d      	ldr	r0, [pc, #116]	@ (8003864 <main+0x108>)
 80037f0:	f001 ffea 	bl	80057c8 <sensor_fusion_init>

	/* ==== LORA COMMUNICATION SETUP ==== */
	lora_deactivate();
 80037f4:	f7ff ff32 	bl	800365c <lora_deactivate>
	loraBegin();
 80037f8:	f000 fafe 	bl	8003df8 <loraBegin>
	lora_activate();
 80037fc:	f7ff ff1e 	bl	800363c <lora_activate>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize UART5 and DMA for GPS communication
	L86_GPIO_Init();
 8003800:	f000 fb2e 	bl	8003e60 <L86_GPIO_Init>
	HAL_Delay(50);
 8003804:	2032      	movs	r0, #50	@ 0x32
 8003806:	f002 fcb7 	bl	8006178 <HAL_Delay>
	HAL_DMA_Init(&hdma_usart6_rx);
 800380a:	4817      	ldr	r0, [pc, #92]	@ (8003868 <main+0x10c>)
 800380c:	f003 fb5c 	bl	8006ec8 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6, BAUD_RATE_9600);
 8003810:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8003814:	4815      	ldr	r0, [pc, #84]	@ (800386c <main+0x110>)
 8003816:	f7ff fac1 	bl	8002d9c <L86_GNSS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 800381a:	480f      	ldr	r0, [pc, #60]	@ (8003858 <main+0xfc>)
 800381c:	f7fe fe74 	bl	8002508 <bmi088_update>
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 8003820:	f7fd fff0 	bl	8001804 <bme280_update>
		//read_value();	// Transmit current sensor readings


		/*PERIODIC OPERATIONS (100ms)*/
		// Execute operations every 100ms
		if (tx_timer_flag_100ms >= 1) {
 8003824:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <main+0x114>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <main+0xe6>
		  tx_timer_flag_100ms = 0;
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <main+0x114>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]

		  // Update sensor readings and transmit data
		  //read_value();

		  // Update GPS/GNSS data
		  L86_GNSS_Update(&gnss_data);
 8003834:	480f      	ldr	r0, [pc, #60]	@ (8003874 <main+0x118>)
 8003836:	f7ff faf9 	bl	8002e2c <L86_GNSS_Update>
		  L86_GNSS_Print_Info(&gnss_data,&huart2);
 800383a:	490f      	ldr	r1, [pc, #60]	@ (8003878 <main+0x11c>)
 800383c:	480d      	ldr	r0, [pc, #52]	@ (8003874 <main+0x118>)
 800383e:	f7ff fb07 	bl	8002e50 <L86_GNSS_Print_Info>
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 8003842:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <main+0x120>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b09      	cmp	r3, #9
 800384a:	d9e6      	bls.n	800381a <main+0xbe>
		  tx_timer_flag_1s = 0;
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <main+0x120>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8003852:	e7e2      	b.n	800381a <main+0xbe>
 8003854:	200013cc 	.word	0x200013cc
 8003858:	2000156c 	.word	0x2000156c
 800385c:	20001650 	.word	0x20001650
 8003860:	2000127c 	.word	0x2000127c
 8003864:	20001504 	.word	0x20001504
 8003868:	200014a4 	.word	0x200014a4
 800386c:	2000145c 	.word	0x2000145c
 8003870:	20001646 	.word	0x20001646
 8003874:	200015ec 	.word	0x200015ec
 8003878:	20001414 	.word	0x20001414
 800387c:	20001647 	.word	0x20001647

08003880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b094      	sub	sp, #80	@ 0x50
 8003884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	2234      	movs	r2, #52	@ 0x34
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f008 ffdb 	bl	800c84a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003894:	f107 0308 	add.w	r3, r7, #8
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <SystemClock_Config+0xd0>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	4a28      	ldr	r2, [pc, #160]	@ (8003950 <SystemClock_Config+0xd0>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b4:	4b26      	ldr	r3, [pc, #152]	@ (8003950 <SystemClock_Config+0xd0>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c0:	2300      	movs	r3, #0
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <SystemClock_Config+0xd4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a22      	ldr	r2, [pc, #136]	@ (8003954 <SystemClock_Config+0xd4>)
 80038ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <SystemClock_Config+0xd4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038dc:	2301      	movs	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038e6:	2302      	movs	r3, #2
 80038e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038f0:	2308      	movs	r3, #8
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80038f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80038f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038fa:	2302      	movs	r3, #2
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038fe:	2302      	movs	r3, #2
 8003900:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003902:	2302      	movs	r3, #2
 8003904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4618      	mov	r0, r3
 800390c:	f005 fd94 	bl	8009438 <HAL_RCC_OscConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003916:	f000 fb1b 	bl	8003f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800391a:	230f      	movs	r3, #15
 800391c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800391e:	2302      	movs	r3, #2
 8003920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003926:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800392a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800392c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003930:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	2105      	movs	r1, #5
 8003938:	4618      	mov	r0, r3
 800393a:	f005 fa33 	bl	8008da4 <HAL_RCC_ClockConfig>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003944:	f000 fb04 	bl	8003f50 <Error_Handler>
  }
}
 8003948:	bf00      	nop
 800394a:	3750      	adds	r7, #80	@ 0x50
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000

08003958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800395e:	463b      	mov	r3, r7
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800396a:	4b21      	ldr	r3, [pc, #132]	@ (80039f0 <MX_ADC1_Init+0x98>)
 800396c:	4a21      	ldr	r2, [pc, #132]	@ (80039f4 <MX_ADC1_Init+0x9c>)
 800396e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003970:	4b1f      	ldr	r3, [pc, #124]	@ (80039f0 <MX_ADC1_Init+0x98>)
 8003972:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003976:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003978:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <MX_ADC1_Init+0x98>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800397e:	4b1c      	ldr	r3, [pc, #112]	@ (80039f0 <MX_ADC1_Init+0x98>)
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003984:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <MX_ADC1_Init+0x98>)
 8003986:	2201      	movs	r2, #1
 8003988:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800398a:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <MX_ADC1_Init+0x98>)
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003992:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <MX_ADC1_Init+0x98>)
 8003994:	2200      	movs	r2, #0
 8003996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003998:	4b15      	ldr	r3, [pc, #84]	@ (80039f0 <MX_ADC1_Init+0x98>)
 800399a:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <MX_ADC1_Init+0xa0>)
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <MX_ADC1_Init+0x98>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <MX_ADC1_Init+0x98>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80039aa:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <MX_ADC1_Init+0x98>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039b2:	4b0f      	ldr	r3, [pc, #60]	@ (80039f0 <MX_ADC1_Init+0x98>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039b8:	480d      	ldr	r0, [pc, #52]	@ (80039f0 <MX_ADC1_Init+0x98>)
 80039ba:	f002 fc01 	bl	80061c0 <HAL_ADC_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80039c4:	f000 fac4 	bl	8003f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80039c8:	2309      	movs	r3, #9
 80039ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80039d0:	2301      	movs	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039d4:	463b      	mov	r3, r7
 80039d6:	4619      	mov	r1, r3
 80039d8:	4805      	ldr	r0, [pc, #20]	@ (80039f0 <MX_ADC1_Init+0x98>)
 80039da:	f002 fe77 	bl	80066cc <HAL_ADC_ConfigChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80039e4:	f000 fab4 	bl	8003f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	2000127c 	.word	0x2000127c
 80039f4:	40012000 	.word	0x40012000
 80039f8:	0f000001 	.word	0x0f000001

080039fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a00:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a02:	4a13      	ldr	r2, [pc, #76]	@ (8003a50 <MX_I2C1_Init+0x54>)
 8003a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a08:	4a12      	ldr	r2, [pc, #72]	@ (8003a54 <MX_I2C1_Init+0x58>)
 8003a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a12:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a2c:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a38:	4804      	ldr	r0, [pc, #16]	@ (8003a4c <MX_I2C1_Init+0x50>)
 8003a3a:	f004 f95f 	bl	8007cfc <HAL_I2C_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a44:	f000 fa84 	bl	8003f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20001324 	.word	0x20001324
 8003a50:	40005400 	.word	0x40005400
 8003a54:	000186a0 	.word	0x000186a0

08003a58 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a5c:	4b12      	ldr	r3, [pc, #72]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a5e:	4a13      	ldr	r2, [pc, #76]	@ (8003aac <MX_I2C3_Init+0x54>)
 8003a60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003a62:	4b11      	ldr	r3, [pc, #68]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a64:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <MX_I2C3_Init+0x58>)
 8003a66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a68:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a74:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a82:	4b09      	ldr	r3, [pc, #36]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a88:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a94:	4804      	ldr	r0, [pc, #16]	@ (8003aa8 <MX_I2C3_Init+0x50>)
 8003a96:	f004 f931 	bl	8007cfc <HAL_I2C_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003aa0:	f000 fa56 	bl	8003f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20001378 	.word	0x20001378
 8003aac:	40005c00 	.word	0x40005c00
 8003ab0:	000186a0 	.word	0x000186a0

08003ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac8:	463b      	mov	r3, r7
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003ad2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003ada:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003ae6:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003ae8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aee:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003af4:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003afa:	4814      	ldr	r0, [pc, #80]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003afc:	f005 ff3a 	bl	8009974 <HAL_TIM_Base_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003b06:	f000 fa23 	bl	8003f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	4619      	mov	r1, r3
 8003b16:	480d      	ldr	r0, [pc, #52]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003b18:	f006 f8dc 	bl	8009cd4 <HAL_TIM_ConfigClockSource>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003b22:	f000 fa15 	bl	8003f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b2e:	463b      	mov	r3, r7
 8003b30:	4619      	mov	r1, r3
 8003b32:	4806      	ldr	r0, [pc, #24]	@ (8003b4c <MX_TIM2_Init+0x98>)
 8003b34:	f006 fafe 	bl	800a134 <HAL_TIMEx_MasterConfigSynchronization>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003b3e:	f000 fa07 	bl	8003f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200013cc 	.word	0x200013cc

08003b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b56:	4a12      	ldr	r2, [pc, #72]	@ (8003ba0 <MX_USART2_UART_Init+0x50>)
 8003b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b86:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <MX_USART2_UART_Init+0x4c>)
 8003b88:	f006 fb64 	bl	800a254 <HAL_UART_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b92:	f000 f9dd 	bl	8003f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20001414 	.word	0x20001414
 8003ba0:	40004400 	.word	0x40004400

08003ba4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <MX_USART6_UART_Init+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bce:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bdc:	f006 fb3a 	bl	800a254 <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003be6:	f000 f9b3 	bl	8003f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000145c 	.word	0x2000145c
 8003bf4:	40011400 	.word	0x40011400

08003bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <MX_DMA_Init+0x4c>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	4a0f      	ldr	r2, [pc, #60]	@ (8003c44 <MX_DMA_Init+0x4c>)
 8003c08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <MX_DMA_Init+0x4c>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	2038      	movs	r0, #56	@ 0x38
 8003c20:	f003 f90d 	bl	8006e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c24:	2038      	movs	r0, #56	@ 0x38
 8003c26:	f003 f926 	bl	8006e76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	203a      	movs	r0, #58	@ 0x3a
 8003c30:	f003 f905 	bl	8006e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c34:	203a      	movs	r0, #58	@ 0x3a
 8003c36:	f003 f91e 	bl	8006e76 <HAL_NVIC_EnableIRQ>

}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800

08003c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	4b3f      	ldr	r3, [pc, #252]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	4a3e      	ldr	r2, [pc, #248]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b38      	ldr	r3, [pc, #224]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	4a37      	ldr	r2, [pc, #220]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c8a:	4b35      	ldr	r3, [pc, #212]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	4b31      	ldr	r3, [pc, #196]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	4a30      	ldr	r2, [pc, #192]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	4a29      	ldr	r2, [pc, #164]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc2:	4b27      	ldr	r3, [pc, #156]	@ (8003d60 <MX_GPIO_Init+0x118>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	210c      	movs	r1, #12
 8003cd2:	4824      	ldr	r0, [pc, #144]	@ (8003d64 <MX_GPIO_Init+0x11c>)
 8003cd4:	f003 ffe0 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cde:	4822      	ldr	r0, [pc, #136]	@ (8003d68 <MX_GPIO_Init+0x120>)
 8003ce0:	f003 ffda 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	481a      	ldr	r0, [pc, #104]	@ (8003d64 <MX_GPIO_Init+0x11c>)
 8003cfc:	f003 fd44 	bl	8007788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d12:	f107 0314 	add.w	r3, r7, #20
 8003d16:	4619      	mov	r1, r3
 8003d18:	4813      	ldr	r0, [pc, #76]	@ (8003d68 <MX_GPIO_Init+0x120>)
 8003d1a:	f003 fd35 	bl	8007788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003d1e:	2318      	movs	r3, #24
 8003d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4619      	mov	r1, r3
 8003d32:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <MX_GPIO_Init+0x120>)
 8003d34:	f003 fd28 	bl	8007788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2009      	movs	r0, #9
 8003d3e:	f003 f87e 	bl	8006e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d42:	2009      	movs	r0, #9
 8003d44:	f003 f897 	bl	8006e76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	200a      	movs	r0, #10
 8003d4e:	f003 f876 	bl	8006e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003d52:	200a      	movs	r0, #10
 8003d54:	f003 f88f 	bl	8006e76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d58:	bf00      	nop
 8003d5a:	3728      	adds	r7, #40	@ 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020800 	.word	0x40020800
 8003d68:	40020400 	.word	0x40020400

08003d6c <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_8;
 8003d70:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <bme280_begin+0x28>)
 8003d72:	2203      	movs	r2, #3
 8003d74:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <bme280_begin+0x28>)
 8003d78:	2203      	movs	r2, #3
 8003d7a:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_8;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <bme280_begin+0x28>)
 8003d7e:	2204      	movs	r2, #4
 8003d80:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_20;
 8003d82:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <bme280_begin+0x28>)
 8003d84:	2207      	movs	r2, #7
 8003d86:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8003d88:	4903      	ldr	r1, [pc, #12]	@ (8003d98 <bme280_begin+0x2c>)
 8003d8a:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <bme280_begin+0x28>)
 8003d8c:	f7fd fd02 	bl	8001794 <bme280_init>
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20001504 	.word	0x20001504
 8003d98:	20001378 	.word	0x20001378

08003d9c <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8003da0:	4b13      	ldr	r3, [pc, #76]	@ (8003df0 <bmi_imu_init+0x54>)
 8003da2:	2208      	movs	r2, #8
 8003da4:	719a      	strb	r2, [r3, #6]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8003da6:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <bmi_imu_init+0x54>)
 8003da8:	2209      	movs	r2, #9
 8003daa:	71da      	strb	r2, [r3, #7]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003dac:	4b10      	ldr	r3, [pc, #64]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	711a      	strb	r2, [r3, #4]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <bmi_imu_init+0x54>)
 8003db4:	2203      	movs	r2, #3
 8003db6:	715a      	strb	r2, [r3, #5]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dba:	2202      	movs	r2, #2
 8003dbc:	725a      	strb	r2, [r3, #9]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	721a      	strb	r2, [r3, #8]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dcc:	2209      	movs	r2, #9
 8003dce:	741a      	strb	r2, [r3, #16]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8003dd0:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dd2:	220a      	movs	r2, #10
 8003dd4:	745a      	strb	r2, [r3, #17]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dd8:	4a06      	ldr	r2, [pc, #24]	@ (8003df4 <bmi_imu_init+0x58>)
 8003dda:	60da      	str	r2, [r3, #12]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8003ddc:	4b04      	ldr	r3, [pc, #16]	@ (8003df0 <bmi_imu_init+0x54>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	615a      	str	r2, [r3, #20]

  return bmi088_init(&BMI_sensor);
 8003de2:	4803      	ldr	r0, [pc, #12]	@ (8003df0 <bmi_imu_init+0x54>)
 8003de4:	f7fe f936 	bl	8002054 <bmi088_init>
 8003de8:	4603      	mov	r3, r0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000156c 	.word	0x2000156c
 8003df4:	20001324 	.word	0x20001324

08003df8 <loraBegin>:
/**
 * @brief Initialize LoRa communication module
 * @note Configures E22 LoRa module with communication parameters
 */
void loraBegin()
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	f002 f9bb 	bl	8006178 <HAL_Delay>

  // Set LoRa module to configuration mode
  HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8003e02:	2200      	movs	r2, #0
 8003e04:	2104      	movs	r1, #4
 8003e06:	4814      	ldr	r0, [pc, #80]	@ (8003e58 <loraBegin+0x60>)
 8003e08:	f003 ff46 	bl	8007c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	2108      	movs	r1, #8
 8003e10:	4811      	ldr	r0, [pc, #68]	@ (8003e58 <loraBegin+0x60>)
 8003e12:	f003 ff41 	bl	8007c98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e16:	2064      	movs	r0, #100	@ 0x64
 8003e18:	f002 f9ae 	bl	8006178 <HAL_Delay>

  // Configure LoRa parameters
  e22_lora.baudRate = LORA_BAUD_115200;
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <loraBegin+0x64>)
 8003e1e:	22e0      	movs	r2, #224	@ 0xe0
 8003e20:	701a      	strb	r2, [r3, #0]
  e22_lora.airRate = LORA_AIR_RATE_2_4k;
 8003e22:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <loraBegin+0x64>)
 8003e24:	2202      	movs	r2, #2
 8003e26:	705a      	strb	r2, [r3, #1]
  e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8003e28:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <loraBegin+0x64>)
 8003e2a:	2280      	movs	r2, #128	@ 0x80
 8003e2c:	709a      	strb	r2, [r3, #2]
  e22_lora.power = LORA_POWER_37dbm;
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <loraBegin+0x64>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	70da      	strb	r2, [r3, #3]
  e22_lora.loraAddress.address16 = 0x0000;
 8003e34:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <loraBegin+0x64>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	80da      	strh	r2, [r3, #6]
  e22_lora.loraKey.key16 = 0x0000;
 8003e3a:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <loraBegin+0x64>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	809a      	strh	r2, [r3, #4]
  e22_lora.channel = ROCKET_TELEM_FREQ;
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <loraBegin+0x64>)
 8003e42:	2219      	movs	r2, #25
 8003e44:	721a      	strb	r2, [r3, #8]

  lora_configure(&e22_lora);
 8003e46:	4805      	ldr	r0, [pc, #20]	@ (8003e5c <loraBegin+0x64>)
 8003e48:	f7ff fc18 	bl	800367c <lora_configure>
  HAL_Delay(1000);
 8003e4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e50:	f002 f992 	bl	8006178 <HAL_Delay>
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	20001634 	.word	0x20001634

08003e60 <L86_GPIO_Init>:
/**
 * @brief Initialize L86 GPS/GNSS GPIO pins
 * @note Configures UART5 pins for GPS communication
 */
static void L86_GPIO_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct_UART6_TX;
  GPIO_InitTypeDef GPIO_InitStruct_UART6_RX;

  // Configure UART5 TX pin
  GPIO_InitStruct_UART6_TX.Pin = L86_TX_Pin;
 8003e66:	2340      	movs	r3, #64	@ 0x40
 8003e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct_UART6_TX.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct_UART6_TX.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct_UART6_TX.Speed = GPIO_SPEED_FREQ_LOW;
 8003e72:	2300      	movs	r3, #0
 8003e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct_UART6_TX.Alternate = GPIO_AF8_USART6;
 8003e76:	2308      	movs	r3, #8
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(L86_TX_GPIO_Port, &GPIO_InitStruct_UART6_TX);
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4619      	mov	r1, r3
 8003e80:	480a      	ldr	r0, [pc, #40]	@ (8003eac <L86_GPIO_Init+0x4c>)
 8003e82:	f003 fc81 	bl	8007788 <HAL_GPIO_Init>

  // Configure UART5 RX pin
  GPIO_InitStruct_UART6_RX.Pin = L86_RX_Pin;
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct_UART6_RX.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct_UART6_RX.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct_UART6_RX.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct_UART6_RX.Alternate = GPIO_AF8_USART6;
 8003e96:	2308      	movs	r3, #8
 8003e98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(L86_RX_GPIO_Port, &GPIO_InitStruct_UART6_RX);
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4803      	ldr	r0, [pc, #12]	@ (8003eac <L86_GPIO_Init+0x4c>)
 8003ea0:	f003 fc72 	bl	8007788 <HAL_GPIO_Init>
}
 8003ea4:	bf00      	nop
 8003ea6:	3728      	adds	r7, #40	@ 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40020800 	.word	0x40020800

08003eb0 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d102      	bne.n	8003ec6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8003ec0:	4806      	ldr	r0, [pc, #24]	@ (8003edc <HAL_GPIO_EXTI_Callback+0x2c>)
 8003ec2:	f7fe fef7 	bl	8002cb4 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d102      	bne.n	8003ed2 <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8003ecc:	4803      	ldr	r0, [pc, #12]	@ (8003edc <HAL_GPIO_EXTI_Callback+0x2c>)
 8003ece:	f7fe fefe 	bl	8002cce <bmi088_set_gyro_INT>
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2000156c 	.word	0x2000156c

08003ee0 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef0:	d10d      	bne.n	8003f0e <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003efe:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003f0c:	701a      	strb	r2, [r3, #0]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20001646 	.word	0x20001646
 8003f20:	20001647 	.word	0x20001647

08003f24 <HAL_ADC_ConvCpltCallback>:
 * @brief ADC DMA conversion complete callback
 * @param hadc ADC handle
 * @note Sets flag when magnetometer ADC conversion is complete
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a05      	ldr	r2, [pc, #20]	@ (8003f48 <HAL_ADC_ConvCpltCallback+0x24>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d102      	bne.n	8003f3c <HAL_ADC_ConvCpltCallback+0x18>
  {
    adc_conversion_complete = 1;
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_ADC_ConvCpltCallback+0x28>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40012000 	.word	0x40012000
 8003f4c:	20001648 	.word	0x20001648

08003f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f54:	b672      	cpsid	i
}
 8003f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <Error_Handler+0x8>

08003f5c <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b09e      	sub	sp, #120	@ 0x78
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f66:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f6a:	ed87 1a01 	vstr	s2, [r7, #4]
 8003f6e:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8003f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f7c:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003f80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8003f84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f88:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003f8c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8003f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f94:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003f98:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8003faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fae:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003fb2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8003fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fbe:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003fc2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8003fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fdc:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003fe0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8003fea:	f107 0310 	add.w	r3, r7, #16
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ffc:	e043      	b.n	8004086 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8003ffe:	2300      	movs	r3, #0
 8004000:	673b      	str	r3, [r7, #112]	@ 0x70
 8004002:	e024      	b.n	800404e <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 8004004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	3378      	adds	r3, #120	@ 0x78
 800400a:	443b      	add	r3, r7
 800400c:	3b68      	subs	r3, #104	@ 0x68
 800400e:	ed93 7a00 	vldr	s14, [r3]
 8004012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004014:	009a      	lsls	r2, r3, #2
 8004016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3378      	adds	r3, #120	@ 0x78
 800401e:	443b      	add	r3, r7
 8004020:	3b58      	subs	r3, #88	@ 0x58
 8004022:	edd3 6a00 	vldr	s13, [r3]
 8004026:	4a5d      	ldr	r2, [pc, #372]	@ (800419c <ekf_predict+0x240>)
 8004028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	edd3 7a00 	vldr	s15, [r3]
 8004032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800403a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	3378      	adds	r3, #120	@ 0x78
 8004040:	443b      	add	r3, r7
 8004042:	3b68      	subs	r3, #104	@ 0x68
 8004044:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8004048:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800404a:	3301      	adds	r3, #1
 800404c:	673b      	str	r3, [r7, #112]	@ 0x70
 800404e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004050:	2b03      	cmp	r3, #3
 8004052:	ddd7      	ble.n	8004004 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8004054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	3378      	adds	r3, #120	@ 0x78
 800405a:	443b      	add	r3, r7
 800405c:	3b68      	subs	r3, #104	@ 0x68
 800405e:	ed93 7a00 	vldr	s14, [r3]
 8004062:	edd7 7a00 	vldr	s15, [r7]
 8004066:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800406a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	3378      	adds	r3, #120	@ 0x78
 8004078:	443b      	add	r3, r7
 800407a:	3b68      	subs	r3, #104	@ 0x68
 800407c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8004080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004082:	3301      	adds	r3, #1
 8004084:	677b      	str	r3, [r7, #116]	@ 0x74
 8004086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004088:	2b03      	cmp	r3, #3
 800408a:	ddb8      	ble.n	8003ffe <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004090:	e017      	b.n	80040c2 <ekf_predict+0x166>
        q[i] += dq[i];
 8004092:	4a42      	ldr	r2, [pc, #264]	@ (800419c <ekf_predict+0x240>)
 8004094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	3378      	adds	r3, #120	@ 0x78
 80040a4:	443b      	add	r3, r7
 80040a6:	3b68      	subs	r3, #104	@ 0x68
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b0:	4a3a      	ldr	r2, [pc, #232]	@ (800419c <ekf_predict+0x240>)
 80040b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80040bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040be:	3301      	adds	r3, #1
 80040c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	dde4      	ble.n	8004092 <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80040c8:	4b34      	ldr	r3, [pc, #208]	@ (800419c <ekf_predict+0x240>)
 80040ca:	ed93 7a00 	vldr	s14, [r3]
 80040ce:	4b33      	ldr	r3, [pc, #204]	@ (800419c <ekf_predict+0x240>)
 80040d0:	edd3 7a00 	vldr	s15, [r3]
 80040d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d8:	4b30      	ldr	r3, [pc, #192]	@ (800419c <ekf_predict+0x240>)
 80040da:	edd3 6a01 	vldr	s13, [r3, #4]
 80040de:	4b2f      	ldr	r3, [pc, #188]	@ (800419c <ekf_predict+0x240>)
 80040e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80040e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040ec:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <ekf_predict+0x240>)
 80040ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <ekf_predict+0x240>)
 80040f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80040f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004100:	4b26      	ldr	r3, [pc, #152]	@ (800419c <ekf_predict+0x240>)
 8004102:	edd3 6a03 	vldr	s13, [r3, #12]
 8004106:	4b25      	ldr	r3, [pc, #148]	@ (800419c <ekf_predict+0x240>)
 8004108:	edd3 7a03 	vldr	s15, [r3, #12]
 800410c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004114:	eeb0 0a67 	vmov.f32	s0, s15
 8004118:	f00c fbb8 	bl	801088c <sqrtf>
 800411c:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004124:	e012      	b.n	800414c <ekf_predict+0x1f0>
        q[i] /= norm;
 8004126:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <ekf_predict+0x240>)
 8004128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	edd3 6a00 	vldr	s13, [r3]
 8004132:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413a:	4a18      	ldr	r2, [pc, #96]	@ (800419c <ekf_predict+0x240>)
 800413c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004148:	3301      	adds	r3, #1
 800414a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800414c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800414e:	2b03      	cmp	r3, #3
 8004150:	dde9      	ble.n	8004126 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 8004152:	2300      	movs	r3, #0
 8004154:	667b      	str	r3, [r7, #100]	@ 0x64
 8004156:	e018      	b.n	800418a <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8004158:	4911      	ldr	r1, [pc, #68]	@ (80041a0 <ekf_predict+0x244>)
 800415a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	edd3 7a00 	vldr	s15, [r3]
 800416a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80041a4 <ekf_predict+0x248>
 800416e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004172:	490b      	ldr	r1, [pc, #44]	@ (80041a0 <ekf_predict+0x244>)
 8004174:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004186:	3301      	adds	r3, #1
 8004188:	667b      	str	r3, [r7, #100]	@ 0x64
 800418a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418c:	2b03      	cmp	r3, #3
 800418e:	dde3      	ble.n	8004158 <ekf_predict+0x1fc>
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3778      	adds	r7, #120	@ 0x78
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000004 	.word	0x20000004
 80041a0:	20001654 	.word	0x20001654
 80041a4:	3727c5ac 	.word	0x3727c5ac

080041a8 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80041ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80041b4:	4b28      	ldr	r3, [pc, #160]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041be:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041c0:	edd3 6a00 	vldr	s13, [r3]
 80041c4:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80041ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80041d6:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041d8:	ed93 7a00 	vldr	s14, [r3]
 80041dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80041ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80041f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041fa:	4b17      	ldr	r3, [pc, #92]	@ (8004258 <quaternionToYaw1+0xb0>)
 80041fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004200:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <quaternionToYaw1+0xb0>)
 8004202:	edd3 7a02 	vldr	s15, [r3, #8]
 8004206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800420e:	4b12      	ldr	r3, [pc, #72]	@ (8004258 <quaternionToYaw1+0xb0>)
 8004210:	edd3 6a03 	vldr	s13, [r3, #12]
 8004214:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <quaternionToYaw1+0xb0>)
 8004216:	edd3 7a03 	vldr	s15, [r3, #12]
 800421a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800421e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004222:	eef0 0a67 	vmov.f32	s1, s15
 8004226:	eeb0 0a46 	vmov.f32	s0, s12
 800422a:	f00c fb2d 	bl	8010888 <atan2f>
 800422e:	eef0 7a40 	vmov.f32	s15, s0
 8004232:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800425c <quaternionToYaw1+0xb4>
 8004236:	ee27 7a87 	vmul.f32	s14, s15, s14
 800423a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004260 <quaternionToYaw1+0xb8>
 800423e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004242:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	ee07 3a90 	vmov	s15, r3
}
 800424c:	eeb0 0a67 	vmov.f32	s0, s15
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000004 	.word	0x20000004
 800425c:	43340000 	.word	0x43340000
 8004260:	40490fd0 	.word	0x40490fd0

08004264 <quaternionToPitch1>:

float quaternionToPitch1(){
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <quaternionToPitch1+0x64>)
 800426c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004270:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <quaternionToPitch1+0x64>)
 8004272:	edd3 7a03 	vldr	s15, [r3, #12]
 8004276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800427a:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <quaternionToPitch1+0x64>)
 800427c:	edd3 6a00 	vldr	s13, [r3]
 8004280:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <quaternionToPitch1+0x64>)
 8004282:	edd3 7a02 	vldr	s15, [r3, #8]
 8004286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800428e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004292:	eeb0 0a67 	vmov.f32	s0, s15
 8004296:	f00c facb 	bl	8010830 <asinf>
 800429a:	eef0 7a40 	vmov.f32	s15, s0
 800429e:	eef1 7a67 	vneg.f32	s15, s15
 80042a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80042cc <quaternionToPitch1+0x68>
 80042a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042aa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80042d0 <quaternionToPitch1+0x6c>
 80042ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042b2:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	ee07 3a90 	vmov	s15, r3
}
 80042bc:	eeb0 0a67 	vmov.f32	s0, s15
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000004 	.word	0x20000004
 80042cc:	43340000 	.word	0x43340000
 80042d0:	40490fd0 	.word	0x40490fd0

080042d4 <quaternionToRoll1>:

float quaternionToRoll1(){
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 80042da:	4b2a      	ldr	r3, [pc, #168]	@ (8004384 <quaternionToRoll1+0xb0>)
 80042dc:	ed93 7a00 	vldr	s14, [r3]
 80042e0:	4b28      	ldr	r3, [pc, #160]	@ (8004384 <quaternionToRoll1+0xb0>)
 80042e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80042e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <quaternionToRoll1+0xb0>)
 80042ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80042f0:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <quaternionToRoll1+0xb0>)
 80042f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80042f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042fe:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004302:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <quaternionToRoll1+0xb0>)
 8004304:	ed93 7a00 	vldr	s14, [r3]
 8004308:	4b1e      	ldr	r3, [pc, #120]	@ (8004384 <quaternionToRoll1+0xb0>)
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004312:	4b1c      	ldr	r3, [pc, #112]	@ (8004384 <quaternionToRoll1+0xb0>)
 8004314:	edd3 6a01 	vldr	s13, [r3, #4]
 8004318:	4b1a      	ldr	r3, [pc, #104]	@ (8004384 <quaternionToRoll1+0xb0>)
 800431a:	edd3 7a01 	vldr	s15, [r3, #4]
 800431e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004326:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <quaternionToRoll1+0xb0>)
 8004328:	edd3 6a02 	vldr	s13, [r3, #8]
 800432c:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <quaternionToRoll1+0xb0>)
 800432e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800433a:	4b12      	ldr	r3, [pc, #72]	@ (8004384 <quaternionToRoll1+0xb0>)
 800433c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004340:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <quaternionToRoll1+0xb0>)
 8004342:	edd3 7a03 	vldr	s15, [r3, #12]
 8004346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800434a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800434e:	eef0 0a67 	vmov.f32	s1, s15
 8004352:	eeb0 0a46 	vmov.f32	s0, s12
 8004356:	f00c fa97 	bl	8010888 <atan2f>
 800435a:	eef0 7a40 	vmov.f32	s15, s0
 800435e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004388 <quaternionToRoll1+0xb4>
 8004362:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004366:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800438c <quaternionToRoll1+0xb8>
 800436a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800436e:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	ee07 3a90 	vmov	s15, r3
}
 8004378:	eeb0 0a67 	vmov.f32	s0, s15
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000004 	.word	0x20000004
 8004388:	43340000 	.word	0x43340000
 800438c:	40490fd0 	.word	0x40490fd0

08004390 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8004396:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <quaternionToYawDegree1+0x88>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <quaternionToYawDegree1+0x88>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004418 <quaternionToYawDegree1+0x88>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <quaternionToYawDegree1+0x88>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 80043ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80043b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80043b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80043be:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043ce:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 80043d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80043da:	edd7 7a02 	vldr	s15, [r7, #8]
 80043de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f2:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 80043f6:	edd7 0a00 	vldr	s1, [r7]
 80043fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80043fe:	f00c fa43 	bl	8010888 <atan2f>
 8004402:	eef0 7a40 	vmov.f32	s15, s0
 8004406:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800441c <quaternionToYawDegree1+0x8c>
 800440a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800440e:	eeb0 0a67 	vmov.f32	s0, s15
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000004 	.word	0x20000004
 800441c:	42652ee0 	.word	0x42652ee0

08004420 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	@ 0x30
 8004424:	af00      	add	r7, sp, #0
 8004426:	ed87 0a03 	vstr	s0, [r7, #12]
 800442a:	edc7 0a02 	vstr	s1, [r7, #8]
 800442e:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004432:	4bd5      	ldr	r3, [pc, #852]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004434:	ed93 7a00 	vldr	s14, [r3]
 8004438:	4bd3      	ldr	r3, [pc, #844]	@ (8004788 <UpdateMahonyGains+0x368>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004442:	4bd1      	ldr	r3, [pc, #836]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004444:	edd3 6a01 	vldr	s13, [r3, #4]
 8004448:	4bcf      	ldr	r3, [pc, #828]	@ (8004788 <UpdateMahonyGains+0x368>)
 800444a:	edd3 7a01 	vldr	s15, [r3, #4]
 800444e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004456:	4bcc      	ldr	r3, [pc, #816]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004458:	edd3 6a02 	vldr	s13, [r3, #8]
 800445c:	4bca      	ldr	r3, [pc, #808]	@ (8004788 <UpdateMahonyGains+0x368>)
 800445e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800446a:	4bc7      	ldr	r3, [pc, #796]	@ (8004788 <UpdateMahonyGains+0x368>)
 800446c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004470:	4bc5      	ldr	r3, [pc, #788]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004472:	edd3 7a03 	vldr	s15, [r3, #12]
 8004476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800447a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447e:	eeb0 0a67 	vmov.f32	s0, s15
 8004482:	f00c fa03 	bl	801088c <sqrtf>
 8004486:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 800448a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800448e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	f000 8172 	beq.w	800477e <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 800449a:	4bbb      	ldr	r3, [pc, #748]	@ (8004788 <UpdateMahonyGains+0x368>)
 800449c:	edd3 6a00 	vldr	s13, [r3]
 80044a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	4bb7      	ldr	r3, [pc, #732]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044aa:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 80044ae:	4bb6      	ldr	r3, [pc, #728]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80044b4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80044b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044bc:	4bb2      	ldr	r3, [pc, #712]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044be:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80044c2:	4bb1      	ldr	r3, [pc, #708]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80044c8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80044cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d0:	4bad      	ldr	r3, [pc, #692]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044d2:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 80044d6:	4bac      	ldr	r3, [pc, #688]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80044dc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80044e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e4:	4ba8      	ldr	r3, [pc, #672]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044e6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 80044ea:	4ba7      	ldr	r3, [pc, #668]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80044f0:	4ba5      	ldr	r3, [pc, #660]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80044f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044fa:	4ba3      	ldr	r3, [pc, #652]	@ (8004788 <UpdateMahonyGains+0x368>)
 80044fc:	edd3 6a00 	vldr	s13, [r3]
 8004500:	4ba1      	ldr	r3, [pc, #644]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004502:	edd3 7a02 	vldr	s15, [r3, #8]
 8004506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800450a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004512:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8004516:	4b9c      	ldr	r3, [pc, #624]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004518:	ed93 7a00 	vldr	s14, [r3]
 800451c:	4b9a      	ldr	r3, [pc, #616]	@ (8004788 <UpdateMahonyGains+0x368>)
 800451e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004526:	4b98      	ldr	r3, [pc, #608]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004528:	edd3 6a02 	vldr	s13, [r3, #8]
 800452c:	4b96      	ldr	r3, [pc, #600]	@ (8004788 <UpdateMahonyGains+0x368>)
 800452e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800453e:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8004542:	4b91      	ldr	r3, [pc, #580]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004544:	ed93 7a00 	vldr	s14, [r3]
 8004548:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <UpdateMahonyGains+0x368>)
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004552:	4b8d      	ldr	r3, [pc, #564]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004554:	edd3 6a01 	vldr	s13, [r3, #4]
 8004558:	4b8b      	ldr	r3, [pc, #556]	@ (8004788 <UpdateMahonyGains+0x368>)
 800455a:	edd3 7a01 	vldr	s15, [r3, #4]
 800455e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004562:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004566:	4b88      	ldr	r3, [pc, #544]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004568:	edd3 6a02 	vldr	s13, [r3, #8]
 800456c:	4b86      	ldr	r3, [pc, #536]	@ (8004788 <UpdateMahonyGains+0x368>)
 800456e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004576:	ee37 7a67 	vsub.f32	s14, s14, s15
 800457a:	4b83      	ldr	r3, [pc, #524]	@ (8004788 <UpdateMahonyGains+0x368>)
 800457c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004580:	4b81      	ldr	r3, [pc, #516]	@ (8004788 <UpdateMahonyGains+0x368>)
 8004582:	edd3 7a03 	vldr	s15, [r3, #12]
 8004586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800458a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8004592:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004596:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800459a:	edd7 7a08 	vldr	s15, [r7, #32]
 800459e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80045a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80045aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80045ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b2:	eeb0 0a67 	vmov.f32	s0, s15
 80045b6:	f001 f8cb 	bl	8005750 <invSqrt>
 80045ba:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80045be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80045c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 80045ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80045d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80045d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045da:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 80045de:	ed97 7a07 	vldr	s14, [r7, #28]
 80045e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80045e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ea:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 80045ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80045f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80045fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80045fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004602:	edd7 7a01 	vldr	s15, [r7, #4]
 8004606:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800460a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460e:	eeb0 0a67 	vmov.f32	s0, s15
 8004612:	f001 f89d 	bl	8005750 <invSqrt>
 8004616:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 800461a:	ed97 7a03 	vldr	s14, [r7, #12]
 800461e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 800462a:	ed97 7a02 	vldr	s14, [r7, #8]
 800462e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800463a:	ed97 7a01 	vldr	s14, [r7, #4]
 800463e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800464a:	ed97 7a03 	vldr	s14, [r7, #12]
 800464e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004656:	edd7 6a02 	vldr	s13, [r7, #8]
 800465a:	edd7 7a08 	vldr	s15, [r7, #32]
 800465e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004666:	edd7 6a01 	vldr	s13, [r7, #4]
 800466a:	edd7 7a07 	vldr	s15, [r7, #28]
 800466e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004676:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800467a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800467e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	dd02      	ble.n	8004692 <UpdateMahonyGains+0x272>
 800468c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8004692:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004696:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800469a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a2:	d501      	bpl.n	80046a8 <UpdateMahonyGains+0x288>
 80046a4:	4b39      	ldr	r3, [pc, #228]	@ (800478c <UpdateMahonyGains+0x36c>)
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80046a8:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80046ac:	f00c f894 	bl	80107d8 <acosf>
 80046b0:	eef0 7a40 	vmov.f32	s15, s0
 80046b4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004790 <UpdateMahonyGains+0x370>
 80046b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046bc:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80046c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80046c4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80046c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	dd0a      	ble.n	80046e8 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 80046d2:	4b30      	ldr	r3, [pc, #192]	@ (8004794 <UpdateMahonyGains+0x374>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80046d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004798 <UpdateMahonyGains+0x378>)
 80046da:	4a30      	ldr	r2, [pc, #192]	@ (800479c <UpdateMahonyGains+0x37c>)
 80046dc:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 80046de:	4b30      	ldr	r3, [pc, #192]	@ (80047a0 <UpdateMahonyGains+0x380>)
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e01d      	b.n	8004724 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 80046e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80046ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80046f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	dd0a      	ble.n	8004710 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80046fa:	4b26      	ldr	r3, [pc, #152]	@ (8004794 <UpdateMahonyGains+0x374>)
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <UpdateMahonyGains+0x378>)
 8004702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004706:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8004708:	4b25      	ldr	r3, [pc, #148]	@ (80047a0 <UpdateMahonyGains+0x380>)
 800470a:	4a26      	ldr	r2, [pc, #152]	@ (80047a4 <UpdateMahonyGains+0x384>)
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e009      	b.n	8004724 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <UpdateMahonyGains+0x374>)
 8004712:	2203      	movs	r2, #3
 8004714:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8004716:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <UpdateMahonyGains+0x378>)
 8004718:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800471c:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 800471e:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <UpdateMahonyGains+0x380>)
 8004720:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <UpdateMahonyGains+0x388>)
 8004722:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8004724:	4b1c      	ldr	r3, [pc, #112]	@ (8004798 <UpdateMahonyGains+0x378>)
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 800472e:	eeb0 0a67 	vmov.f32	s0, s15
 8004732:	f00c f8f8 	bl	8010926 <fminf>
 8004736:	eef0 7a40 	vmov.f32	s15, s0
 800473a:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80047ac <UpdateMahonyGains+0x38c>
 800473e:	eeb0 0a67 	vmov.f32	s0, s15
 8004742:	f00c f8d3 	bl	80108ec <fmaxf>
 8004746:	eef0 7a40 	vmov.f32	s15, s0
 800474a:	4b13      	ldr	r3, [pc, #76]	@ (8004798 <UpdateMahonyGains+0x378>)
 800474c:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <UpdateMahonyGains+0x380>)
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80047b0 <UpdateMahonyGains+0x390>
 800475a:	eeb0 0a67 	vmov.f32	s0, s15
 800475e:	f00c f8e2 	bl	8010926 <fminf>
 8004762:	eef0 7a40 	vmov.f32	s15, s0
 8004766:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80047b4 <UpdateMahonyGains+0x394>
 800476a:	eeb0 0a67 	vmov.f32	s0, s15
 800476e:	f00c f8bd 	bl	80108ec <fmaxf>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <UpdateMahonyGains+0x380>)
 8004778:	edc3 7a00 	vstr	s15, [r3]
 800477c:	e000      	b.n	8004780 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 800477e:	bf00      	nop
}
 8004780:	3730      	adds	r7, #48	@ 0x30
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000014 	.word	0x20000014
 800478c:	bf800000 	.word	0xbf800000
 8004790:	42652ee2 	.word	0x42652ee2
 8004794:	200016a0 	.word	0x200016a0
 8004798:	20000024 	.word	0x20000024
 800479c:	3e4ccccd 	.word	0x3e4ccccd
 80047a0:	20000028 	.word	0x20000028
 80047a4:	3c23d70a 	.word	0x3c23d70a
 80047a8:	3d4ccccd 	.word	0x3d4ccccd
 80047ac:	3dcccccd 	.word	0x3dcccccd
 80047b0:	3d4ccccd 	.word	0x3d4ccccd
 80047b4:	00000000 	.word	0x00000000

080047b8 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	ed87 0a07 	vstr	s0, [r7, #28]
 80047c2:	edc7 0a06 	vstr	s1, [r7, #24]
 80047c6:	ed87 1a05 	vstr	s2, [r7, #20]
 80047ca:	edc7 1a04 	vstr	s3, [r7, #16]
 80047ce:	ed87 2a03 	vstr	s4, [r7, #12]
 80047d2:	edc7 2a02 	vstr	s5, [r7, #8]
 80047d6:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 80047da:	4b60      	ldr	r3, [pc, #384]	@ (800495c <Orientation_Update+0x1a4>)
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 80047de:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80047e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80047e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80047f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004960 <Orientation_Update+0x1a8>)
 80047f8:	edd3 7a00 	vldr	s15, [r3]
 80047fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004804:	4b56      	ldr	r3, [pc, #344]	@ (8004960 <Orientation_Update+0x1a8>)
 8004806:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 800480a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800480e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800481e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004822:	4b50      	ldr	r3, [pc, #320]	@ (8004964 <Orientation_Update+0x1ac>)
 8004824:	edd3 7a00 	vldr	s15, [r3]
 8004828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800482c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004830:	4b4c      	ldr	r3, [pc, #304]	@ (8004964 <Orientation_Update+0x1ac>)
 8004832:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8004836:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800483a:	edd7 7a02 	vldr	s15, [r7, #8]
 800483e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004846:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800484a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800484e:	4b46      	ldr	r3, [pc, #280]	@ (8004968 <Orientation_Update+0x1b0>)
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485c:	4b42      	ldr	r3, [pc, #264]	@ (8004968 <Orientation_Update+0x1b0>)
 800485e:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8004862:	4b3f      	ldr	r3, [pc, #252]	@ (8004960 <Orientation_Update+0x1a8>)
 8004864:	edd3 7a00 	vldr	s15, [r3]
 8004868:	4b3e      	ldr	r3, [pc, #248]	@ (8004964 <Orientation_Update+0x1ac>)
 800486a:	ed93 7a00 	vldr	s14, [r3]
 800486e:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <Orientation_Update+0x1b0>)
 8004870:	edd3 6a00 	vldr	s13, [r3]
 8004874:	eeb0 1a66 	vmov.f32	s2, s13
 8004878:	eef0 0a47 	vmov.f32	s1, s14
 800487c:	eeb0 0a67 	vmov.f32	s0, s15
 8004880:	f7ff fdce 	bl	8004420 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8004884:	4b36      	ldr	r3, [pc, #216]	@ (8004960 <Orientation_Update+0x1a8>)
 8004886:	ed93 7a00 	vldr	s14, [r3]
 800488a:	4b35      	ldr	r3, [pc, #212]	@ (8004960 <Orientation_Update+0x1a8>)
 800488c:	edd3 7a00 	vldr	s15, [r3]
 8004890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004894:	4b33      	ldr	r3, [pc, #204]	@ (8004964 <Orientation_Update+0x1ac>)
 8004896:	edd3 6a00 	vldr	s13, [r3]
 800489a:	4b32      	ldr	r3, [pc, #200]	@ (8004964 <Orientation_Update+0x1ac>)
 800489c:	edd3 7a00 	vldr	s15, [r3]
 80048a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004968 <Orientation_Update+0x1b0>)
 80048aa:	edd3 6a00 	vldr	s13, [r3]
 80048ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004968 <Orientation_Update+0x1b0>)
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048bc:	eeb0 0a67 	vmov.f32	s0, s15
 80048c0:	f00b ffe4 	bl	801088c <sqrtf>
 80048c4:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 80048c8:	4b28      	ldr	r3, [pc, #160]	@ (800496c <Orientation_Update+0x1b4>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00c      	beq.n	80048ea <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 80048d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80048d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004970 <Orientation_Update+0x1b8>
 80048d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	d50f      	bpl.n	8004902 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 80048e2:	4b22      	ldr	r3, [pc, #136]	@ (800496c <Orientation_Update+0x1b4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	e00b      	b.n	8004902 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 80048ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80048ee:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004974 <Orientation_Update+0x1bc>
 80048f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	dd02      	ble.n	8004902 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <Orientation_Update+0x1b4>)
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8004902:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <Orientation_Update+0x1b4>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 800490a:	edd7 1a01 	vldr	s3, [r7, #4]
 800490e:	ed97 1a05 	vldr	s2, [r7, #20]
 8004912:	edd7 0a06 	vldr	s1, [r7, #24]
 8004916:	ed97 0a07 	vldr	s0, [r7, #28]
 800491a:	f000 f82d 	bl	8004978 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 800491e:	e018      	b.n	8004952 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <Orientation_Update+0x1a8>)
 8004922:	edd3 7a00 	vldr	s15, [r3]
 8004926:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <Orientation_Update+0x1ac>)
 8004928:	ed93 7a00 	vldr	s14, [r3]
 800492c:	4b0e      	ldr	r3, [pc, #56]	@ (8004968 <Orientation_Update+0x1b0>)
 800492e:	edd3 6a00 	vldr	s13, [r3]
 8004932:	ed97 3a01 	vldr	s6, [r7, #4]
 8004936:	eef0 2a66 	vmov.f32	s5, s13
 800493a:	eeb0 2a47 	vmov.f32	s4, s14
 800493e:	eef0 1a67 	vmov.f32	s3, s15
 8004942:	ed97 1a05 	vldr	s2, [r7, #20]
 8004946:	edd7 0a06 	vldr	s1, [r7, #24]
 800494a:	ed97 0a07 	vldr	s0, [r7, #28]
 800494e:	f000 f93b 	bl	8004bc8 <MahonyAHRSupdateIMU>
}
 8004952:	bf00      	nop
 8004954:	3728      	adds	r7, #40	@ 0x28
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	3e99999a 	.word	0x3e99999a
 8004960:	200016a4 	.word	0x200016a4
 8004964:	200016a8 	.word	0x200016a8
 8004968:	200016ac 	.word	0x200016ac
 800496c:	200016a1 	.word	0x200016a1
 8004970:	41d3d2db 	.word	0x41d3d2db
 8004974:	420172a2 	.word	0x420172a2

08004978 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004982:	edc7 0a02 	vstr	s1, [r7, #8]
 8004986:	ed87 1a01 	vstr	s2, [r7, #4]
 800498a:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 800498e:	4b8c      	ldr	r3, [pc, #560]	@ (8004bc0 <updateQuaternion+0x248>)
 8004990:	edd3 7a01 	vldr	s15, [r3, #4]
 8004994:	eeb1 7a67 	vneg.f32	s14, s15
 8004998:	edd7 7a03 	vldr	s15, [r7, #12]
 800499c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049a0:	4b87      	ldr	r3, [pc, #540]	@ (8004bc0 <updateQuaternion+0x248>)
 80049a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80049a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80049aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049b2:	4b83      	ldr	r3, [pc, #524]	@ (8004bc0 <updateQuaternion+0x248>)
 80049b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80049b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80049bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80049d0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc0 <updateQuaternion+0x248>)
 80049d2:	ed93 7a00 	vldr	s14, [r3]
 80049d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80049da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049de:	4b78      	ldr	r3, [pc, #480]	@ (8004bc0 <updateQuaternion+0x248>)
 80049e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80049e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049f0:	4b73      	ldr	r3, [pc, #460]	@ (8004bc0 <updateQuaternion+0x248>)
 80049f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80049f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80049fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a02:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a0a:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a10:	ed93 7a00 	vldr	s14, [r3]
 8004a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a1c:	4b68      	ldr	r3, [pc, #416]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a2e:	4b64      	ldr	r3, [pc, #400]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a30:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a40:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a48:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8004a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a4e:	ed93 7a00 	vldr	s14, [r3]
 8004a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a5a:	4b59      	ldr	r3, [pc, #356]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a6c:	4b54      	ldr	r3, [pc, #336]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a86:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8004a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc0 <updateQuaternion+0x248>)
 8004a8c:	ed93 7a00 	vldr	s14, [r3]
 8004a90:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004a94:	edd7 7a00 	vldr	s15, [r7]
 8004a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aa0:	4b47      	ldr	r3, [pc, #284]	@ (8004bc0 <updateQuaternion+0x248>)
 8004aa2:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8004aa6:	4b46      	ldr	r3, [pc, #280]	@ (8004bc0 <updateQuaternion+0x248>)
 8004aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8004aac:	edd7 6a08 	vldr	s13, [r7, #32]
 8004ab0:	edd7 7a00 	vldr	s15, [r7]
 8004ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004abc:	4b40      	ldr	r3, [pc, #256]	@ (8004bc0 <updateQuaternion+0x248>)
 8004abe:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc0 <updateQuaternion+0x248>)
 8004ac4:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004acc:	edd7 7a00 	vldr	s15, [r7]
 8004ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad8:	4b39      	ldr	r3, [pc, #228]	@ (8004bc0 <updateQuaternion+0x248>)
 8004ada:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8004ade:	4b38      	ldr	r3, [pc, #224]	@ (8004bc0 <updateQuaternion+0x248>)
 8004ae0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ae4:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ae8:	edd7 7a00 	vldr	s15, [r7]
 8004aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af4:	4b32      	ldr	r3, [pc, #200]	@ (8004bc0 <updateQuaternion+0x248>)
 8004af6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004afa:	4b31      	ldr	r3, [pc, #196]	@ (8004bc0 <updateQuaternion+0x248>)
 8004afc:	ed93 7a00 	vldr	s14, [r3]
 8004b00:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b02:	edd3 7a00 	vldr	s15, [r3]
 8004b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b10:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b1e:	4b28      	ldr	r3, [pc, #160]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b20:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b24:	4b26      	ldr	r3, [pc, #152]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b32:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b34:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b38:	4b21      	ldr	r3, [pc, #132]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b46:	eeb0 0a67 	vmov.f32	s0, s15
 8004b4a:	f00b fe9f 	bl	801088c <sqrtf>
 8004b4e:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8004b52:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b56:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004bc4 <updateQuaternion+0x24c>
 8004b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b62:	dc00      	bgt.n	8004b66 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8004b64:	e027      	b.n	8004bb6 <updateQuaternion+0x23e>
        q[0] /= norm;
 8004b66:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b68:	edd3 6a00 	vldr	s13, [r3]
 8004b6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b74:	4b12      	ldr	r3, [pc, #72]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b76:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8004b7a:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b80:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b88:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b8a:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b90:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9c:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <updateQuaternion+0x248>)
 8004b9e:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8004ba2:	4b07      	ldr	r3, [pc, #28]	@ (8004bc0 <updateQuaternion+0x248>)
 8004ba4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ba8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <updateQuaternion+0x248>)
 8004bb2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004bb6:	bf00      	nop
 8004bb8:	3728      	adds	r7, #40	@ 0x28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000014 	.word	0x20000014
 8004bc4:	358637bd 	.word	0x358637bd

08004bc8 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b092      	sub	sp, #72	@ 0x48
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	ed87 0a07 	vstr	s0, [r7, #28]
 8004bd2:	edc7 0a06 	vstr	s1, [r7, #24]
 8004bd6:	ed87 1a05 	vstr	s2, [r7, #20]
 8004bda:	edc7 1a04 	vstr	s3, [r7, #16]
 8004bde:	ed87 2a03 	vstr	s4, [r7, #12]
 8004be2:	edc7 2a02 	vstr	s5, [r7, #8]
 8004be6:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8004bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf6:	d10e      	bne.n	8004c16 <MahonyAHRSupdateIMU+0x4e>
 8004bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	d107      	bne.n	8004c16 <MahonyAHRSupdateIMU+0x4e>
 8004c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	f000 8138 	beq.w	8004e86 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8004c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c1a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c36:	eeb0 0a67 	vmov.f32	s0, s15
 8004c3a:	f000 fd89 	bl	8005750 <invSqrt>
 8004c3e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8004c42:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8004c52:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c56:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5e:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8004c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c66:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8004c72:	4b66      	ldr	r3, [pc, #408]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004c74:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c78:	4b64      	ldr	r3, [pc, #400]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004c7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c82:	4b62      	ldr	r3, [pc, #392]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004c84:	edd3 6a00 	vldr	s13, [r3]
 8004c88:	4b60      	ldr	r3, [pc, #384]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004c8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c96:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004c9c:	ed93 7a00 	vldr	s14, [r3]
 8004ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004caa:	4b58      	ldr	r3, [pc, #352]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004cac:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cb0:	4b56      	ldr	r3, [pc, #344]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004cb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cbe:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8004cc2:	4b52      	ldr	r3, [pc, #328]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004cc4:	ed93 7a00 	vldr	s14, [r3]
 8004cc8:	4b50      	ldr	r3, [pc, #320]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004cca:	edd3 7a00 	vldr	s15, [r3]
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004cd6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004cda:	4b4c      	ldr	r3, [pc, #304]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004cdc:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8004e0c <MahonyAHRSupdateIMU+0x244>)
 8004ce2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cee:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8004cf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cf6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cfe:	edd7 6a02 	vldr	s13, [r7, #8]
 8004d02:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d0e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8004d12:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d16:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d1e:	edd7 6a04 	vldr	s13, [r7, #16]
 8004d22:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d2e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8004d32:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d36:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8004d42:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d4e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8004d52:	4b2f      	ldr	r3, [pc, #188]	@ (8004e10 <MahonyAHRSupdateIMU+0x248>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	dd5e      	ble.n	8004e20 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8004d62:	4b2b      	ldr	r3, [pc, #172]	@ (8004e10 <MahonyAHRSupdateIMU+0x248>)
 8004d64:	ed93 7a00 	vldr	s14, [r3]
 8004d68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d78:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <MahonyAHRSupdateIMU+0x24c>)
 8004d7a:	edd3 7a00 	vldr	s15, [r3]
 8004d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d82:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <MahonyAHRSupdateIMU+0x24c>)
 8004d84:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8004d88:	4b21      	ldr	r3, [pc, #132]	@ (8004e10 <MahonyAHRSupdateIMU+0x248>)
 8004d8a:	ed93 7a00 	vldr	s14, [r3]
 8004d8e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e18 <MahonyAHRSupdateIMU+0x250>)
 8004da0:	edd3 7a00 	vldr	s15, [r3]
 8004da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e18 <MahonyAHRSupdateIMU+0x250>)
 8004daa:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8004dae:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <MahonyAHRSupdateIMU+0x248>)
 8004db0:	ed93 7a00 	vldr	s14, [r3]
 8004db4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dc4:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <MahonyAHRSupdateIMU+0x254>)
 8004dc6:	edd3 7a00 	vldr	s15, [r3]
 8004dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dce:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <MahonyAHRSupdateIMU+0x254>)
 8004dd0:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e14 <MahonyAHRSupdateIMU+0x24c>)
 8004dd6:	edd3 7a00 	vldr	s15, [r3]
 8004dda:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <MahonyAHRSupdateIMU+0x250>)
 8004de8:	edd3 7a00 	vldr	s15, [r3]
 8004dec:	ed97 7a06 	vldr	s14, [r7, #24]
 8004df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df4:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8004df8:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <MahonyAHRSupdateIMU+0x254>)
 8004dfa:	edd3 7a00 	vldr	s15, [r3]
 8004dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e06:	edc7 7a05 	vstr	s15, [r7, #20]
 8004e0a:	e015      	b.n	8004e38 <MahonyAHRSupdateIMU+0x270>
 8004e0c:	20000014 	.word	0x20000014
 8004e10:	20000028 	.word	0x20000028
 8004e14:	20001694 	.word	0x20001694
 8004e18:	20001698 	.word	0x20001698
 8004e1c:	2000169c 	.word	0x2000169c
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8004e20:	4b9a      	ldr	r3, [pc, #616]	@ (800508c <MahonyAHRSupdateIMU+0x4c4>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8004e28:	4b99      	ldr	r3, [pc, #612]	@ (8005090 <MahonyAHRSupdateIMU+0x4c8>)
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8004e30:	4b98      	ldr	r3, [pc, #608]	@ (8005094 <MahonyAHRSupdateIMU+0x4cc>)
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004e38:	4b97      	ldr	r3, [pc, #604]	@ (8005098 <MahonyAHRSupdateIMU+0x4d0>)
 8004e3a:	ed93 7a00 	vldr	s14, [r3]
 8004e3e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4e:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8004e52:	4b91      	ldr	r3, [pc, #580]	@ (8005098 <MahonyAHRSupdateIMU+0x4d0>)
 8004e54:	ed93 7a00 	vldr	s14, [r3]
 8004e58:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e60:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e68:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8004e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8005098 <MahonyAHRSupdateIMU+0x4d0>)
 8004e6e:	ed93 7a00 	vldr	s14, [r3]
 8004e72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e82:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8004e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e92:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8004e9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ea2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8004eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec2:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8004ece:	4b73      	ldr	r3, [pc, #460]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8004ed4:	4b71      	ldr	r3, [pc, #452]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8004eda:	4b70      	ldr	r3, [pc, #448]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8004ee0:	4b6e      	ldr	r3, [pc, #440]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004ee2:	ed93 7a00 	vldr	s14, [r3]
 8004ee6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004eea:	eef1 6a67 	vneg.f32	s13, s15
 8004eee:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ef6:	ed97 6a08 	vldr	s12, [r7, #32]
 8004efa:	edd7 7a06 	vldr	s15, [r7, #24]
 8004efe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f06:	4b65      	ldr	r3, [pc, #404]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f08:	ed93 6a03 	vldr	s12, [r3, #12]
 8004f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f1e:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8004f22:	4b5e      	ldr	r3, [pc, #376]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f24:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f28:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f34:	ed97 6a08 	vldr	s12, [r7, #32]
 8004f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004f44:	4b55      	ldr	r3, [pc, #340]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f46:	ed93 6a03 	vldr	s12, [r3, #12]
 8004f4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f4e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f5a:	4b50      	ldr	r3, [pc, #320]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f5c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8004f60:	4b4e      	ldr	r3, [pc, #312]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f62:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f66:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004f6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f72:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8004f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f82:	4b46      	ldr	r3, [pc, #280]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f84:	ed93 6a03 	vldr	s12, [r3, #12]
 8004f88:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f98:	4b40      	ldr	r3, [pc, #256]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004f9a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004fa0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004fa4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fb0:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8004fb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004fbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004fc0:	ed97 6a08 	vldr	s12, [r7, #32]
 8004fc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004fcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd4:	4b31      	ldr	r3, [pc, #196]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004fd6:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8004fda:	4b30      	ldr	r3, [pc, #192]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004fdc:	ed93 7a00 	vldr	s14, [r3]
 8004fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004fe2:	edd3 7a00 	vldr	s15, [r3]
 8004fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fea:	4b2c      	ldr	r3, [pc, #176]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004fec:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8004ff2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ffe:	4b27      	ldr	r3, [pc, #156]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005000:	edd3 6a02 	vldr	s13, [r3, #8]
 8005004:	4b25      	ldr	r3, [pc, #148]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005006:	edd3 7a02 	vldr	s15, [r3, #8]
 800500a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800500e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005012:	4b22      	ldr	r3, [pc, #136]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005014:	edd3 6a03 	vldr	s13, [r3, #12]
 8005018:	4b20      	ldr	r3, [pc, #128]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 800501a:	edd3 7a03 	vldr	s15, [r3, #12]
 800501e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005026:	eeb0 0a67 	vmov.f32	s0, s15
 800502a:	f000 fb91 	bl	8005750 <invSqrt>
 800502e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8005032:	4b1a      	ldr	r3, [pc, #104]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005034:	ed93 7a00 	vldr	s14, [r3]
 8005038:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800503c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005040:	4b16      	ldr	r3, [pc, #88]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005042:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8005046:	4b15      	ldr	r3, [pc, #84]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005048:	ed93 7a01 	vldr	s14, [r3, #4]
 800504c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005054:	4b11      	ldr	r3, [pc, #68]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005056:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 800505a:	4b10      	ldr	r3, [pc, #64]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 800505c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005060:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005068:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 800506a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 800506e:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 8005070:	ed93 7a03 	vldr	s14, [r3, #12]
 8005074:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507c:	4b07      	ldr	r3, [pc, #28]	@ (800509c <MahonyAHRSupdateIMU+0x4d4>)
 800507e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005082:	bf00      	nop
 8005084:	3748      	adds	r7, #72	@ 0x48
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20001694 	.word	0x20001694
 8005090:	20001698 	.word	0x20001698
 8005094:	2000169c 	.word	0x2000169c
 8005098:	20000024 	.word	0x20000024
 800509c:	20000014 	.word	0x20000014

080050a0 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 80050a6:	4b44      	ldr	r3, [pc, #272]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80050ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80050b0:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80050b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050ba:	4b3f      	ldr	r3, [pc, #252]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80050c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80050c4:	4b3c      	ldr	r3, [pc, #240]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050c6:	edd3 7a00 	vldr	s15, [r3]
 80050ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d2:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 80050d6:	4b38      	ldr	r3, [pc, #224]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80050dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80050e0:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80050e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050ea:	4b33      	ldr	r3, [pc, #204]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80050f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80050f4:	4b30      	ldr	r3, [pc, #192]	@ (80051b8 <quaternionToThetaZ+0x118>)
 80050f6:	edd3 7a00 	vldr	s15, [r3]
 80050fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005102:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8005106:	4b2c      	ldr	r3, [pc, #176]	@ (80051b8 <quaternionToThetaZ+0x118>)
 8005108:	edd3 7a01 	vldr	s15, [r3, #4]
 800510c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005110:	4b29      	ldr	r3, [pc, #164]	@ (80051b8 <quaternionToThetaZ+0x118>)
 8005112:	edd3 7a01 	vldr	s15, [r3, #4]
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800511e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <quaternionToThetaZ+0x118>)
 8005124:	edd3 7a02 	vldr	s15, [r3, #8]
 8005128:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <quaternionToThetaZ+0x118>)
 800512e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800513a:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8005142:	edd7 7a05 	vldr	s15, [r7, #20]
 8005146:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800514a:	edd7 7a04 	vldr	s15, [r7, #16]
 800514e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005156:	edd7 7a03 	vldr	s15, [r7, #12]
 800515a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800515e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005162:	eeb0 0a67 	vmov.f32	s0, s15
 8005166:	f00b fb91 	bl	801088c <sqrtf>
 800516a:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 800516e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005172:	edd7 7a01 	vldr	s15, [r7, #4]
 8005176:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800517a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800517e:	eeb0 0a66 	vmov.f32	s0, s13
 8005182:	f00b fbd0 	bl	8010926 <fminf>
 8005186:	eef0 7a40 	vmov.f32	s15, s0
 800518a:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800518e:	eeb0 0a67 	vmov.f32	s0, s15
 8005192:	f00b fbab 	bl	80108ec <fmaxf>
 8005196:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 800519a:	ed97 0a00 	vldr	s0, [r7]
 800519e:	f00b fb1b 	bl	80107d8 <acosf>
 80051a2:	eef0 7a40 	vmov.f32	s15, s0
 80051a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80051bc <quaternionToThetaZ+0x11c>
 80051aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80051ae:	eeb0 0a67 	vmov.f32	s0, s15
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000014 	.word	0x20000014
 80051bc:	42654ca3 	.word	0x42654ca3

080051c0 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80051c6:	4b22      	ldr	r3, [pc, #136]	@ (8005250 <quaternionToPitchDegree+0x90>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	4b20      	ldr	r3, [pc, #128]	@ (8005250 <quaternionToPitchDegree+0x90>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005250 <quaternionToPitchDegree+0x90>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005250 <quaternionToPitchDegree+0x90>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 80051de:	ed97 7a05 	vldr	s14, [r7, #20]
 80051e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80051e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80051ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80051f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051fe:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 8005202:	edd7 7a01 	vldr	s15, [r7, #4]
 8005206:	eef0 7ae7 	vabs.f32	s15, s15
 800520a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800520e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	db0c      	blt.n	8005232 <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8005218:	edd7 7a01 	vldr	s15, [r7, #4]
 800521c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	dd02      	ble.n	800522c <quaternionToPitchDegree+0x6c>
 8005226:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8005254 <quaternionToPitchDegree+0x94>
 800522a:	e00c      	b.n	8005246 <quaternionToPitchDegree+0x86>
 800522c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005258 <quaternionToPitchDegree+0x98>
 8005230:	e009      	b.n	8005246 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 8005232:	ed97 0a01 	vldr	s0, [r7, #4]
 8005236:	f00b fafb 	bl	8010830 <asinf>
 800523a:	eef0 7a40 	vmov.f32	s15, s0
 800523e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800525c <quaternionToPitchDegree+0x9c>
 8005242:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005246:	eeb0 0a67 	vmov.f32	s0, s15
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000014 	.word	0x20000014
 8005254:	42b40000 	.word	0x42b40000
 8005258:	c2b40000 	.word	0xc2b40000
 800525c:	42652ee0 	.word	0x42652ee0

08005260 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005266:	4b20      	ldr	r3, [pc, #128]	@ (80052e8 <quaternionToRollDegree+0x88>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	4b1e      	ldr	r3, [pc, #120]	@ (80052e8 <quaternionToRollDegree+0x88>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <quaternionToRollDegree+0x88>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	4b1b      	ldr	r3, [pc, #108]	@ (80052e8 <quaternionToRollDegree+0x88>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 800527e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005282:	edd7 7a04 	vldr	s15, [r7, #16]
 8005286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800528a:	edd7 6a03 	vldr	s13, [r7, #12]
 800528e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800529e:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80052a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80052aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80052ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80052b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c2:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 80052c6:	edd7 0a00 	vldr	s1, [r7]
 80052ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80052ce:	f00b fadb 	bl	8010888 <atan2f>
 80052d2:	eef0 7a40 	vmov.f32	s15, s0
 80052d6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80052ec <quaternionToRollDegree+0x8c>
 80052da:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80052de:	eeb0 0a67 	vmov.f32	s0, s15
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000014 	.word	0x20000014
 80052ec:	42652ee0 	.word	0x42652ee0

080052f0 <quaternionToYaw>:


float quaternionToYaw(){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80052f6:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <quaternionToYaw+0xb0>)
 80052f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052fc:	4b28      	ldr	r3, [pc, #160]	@ (80053a0 <quaternionToYaw+0xb0>)
 80052fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005308:	edd3 6a00 	vldr	s13, [r3]
 800530c:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <quaternionToYaw+0xb0>)
 800530e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800531a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005320:	ed93 7a00 	vldr	s14, [r3]
 8005324:	4b1e      	ldr	r3, [pc, #120]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005326:	edd3 7a00 	vldr	s15, [r3]
 800532a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800532e:	4b1c      	ldr	r3, [pc, #112]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005330:	edd3 6a01 	vldr	s13, [r3, #4]
 8005334:	4b1a      	ldr	r3, [pc, #104]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005336:	edd3 7a01 	vldr	s15, [r3, #4]
 800533a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800533e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005342:	4b17      	ldr	r3, [pc, #92]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005344:	edd3 6a02 	vldr	s13, [r3, #8]
 8005348:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <quaternionToYaw+0xb0>)
 800534a:	edd3 7a02 	vldr	s15, [r3, #8]
 800534e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005356:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <quaternionToYaw+0xb0>)
 8005358:	edd3 6a03 	vldr	s13, [r3, #12]
 800535c:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <quaternionToYaw+0xb0>)
 800535e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536a:	eef0 0a67 	vmov.f32	s1, s15
 800536e:	eeb0 0a46 	vmov.f32	s0, s12
 8005372:	f00b fa89 	bl	8010888 <atan2f>
 8005376:	eef0 7a40 	vmov.f32	s15, s0
 800537a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80053a4 <quaternionToYaw+0xb4>
 800537e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005382:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80053a8 <quaternionToYaw+0xb8>
 8005386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800538a:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	ee07 3a90 	vmov	s15, r3
}
 8005394:	eeb0 0a67 	vmov.f32	s0, s15
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000014 	.word	0x20000014
 80053a4:	43340000 	.word	0x43340000
 80053a8:	40490fd0 	.word	0x40490fd0

080053ac <quaternionToPitch>:

float quaternionToPitch(){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80053b2:	4b17      	ldr	r3, [pc, #92]	@ (8005410 <quaternionToPitch+0x64>)
 80053b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80053b8:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <quaternionToPitch+0x64>)
 80053ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80053be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053c2:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <quaternionToPitch+0x64>)
 80053c4:	edd3 6a00 	vldr	s13, [r3]
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <quaternionToPitch+0x64>)
 80053ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053da:	eeb0 0a67 	vmov.f32	s0, s15
 80053de:	f00b fa27 	bl	8010830 <asinf>
 80053e2:	eef0 7a40 	vmov.f32	s15, s0
 80053e6:	eef1 7a67 	vneg.f32	s15, s15
 80053ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005414 <quaternionToPitch+0x68>
 80053ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005418 <quaternionToPitch+0x6c>
 80053f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053fa:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	ee07 3a90 	vmov	s15, r3
}
 8005404:	eeb0 0a67 	vmov.f32	s0, s15
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000014 	.word	0x20000014
 8005414:	43340000 	.word	0x43340000
 8005418:	40490fd0 	.word	0x40490fd0

0800541c <quaternionToRoll>:

float quaternionToRoll(){
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8005422:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <quaternionToRoll+0xb0>)
 8005424:	ed93 7a00 	vldr	s14, [r3]
 8005428:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <quaternionToRoll+0xb0>)
 800542a:	edd3 7a01 	vldr	s15, [r3, #4]
 800542e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005432:	4b26      	ldr	r3, [pc, #152]	@ (80054cc <quaternionToRoll+0xb0>)
 8005434:	edd3 6a02 	vldr	s13, [r3, #8]
 8005438:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <quaternionToRoll+0xb0>)
 800543a:	edd3 7a03 	vldr	s15, [r3, #12]
 800543e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005446:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800544a:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <quaternionToRoll+0xb0>)
 800544c:	ed93 7a00 	vldr	s14, [r3]
 8005450:	4b1e      	ldr	r3, [pc, #120]	@ (80054cc <quaternionToRoll+0xb0>)
 8005452:	edd3 7a00 	vldr	s15, [r3]
 8005456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800545a:	4b1c      	ldr	r3, [pc, #112]	@ (80054cc <quaternionToRoll+0xb0>)
 800545c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005460:	4b1a      	ldr	r3, [pc, #104]	@ (80054cc <quaternionToRoll+0xb0>)
 8005462:	edd3 7a01 	vldr	s15, [r3, #4]
 8005466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800546a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800546e:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <quaternionToRoll+0xb0>)
 8005470:	edd3 6a02 	vldr	s13, [r3, #8]
 8005474:	4b15      	ldr	r3, [pc, #84]	@ (80054cc <quaternionToRoll+0xb0>)
 8005476:	edd3 7a02 	vldr	s15, [r3, #8]
 800547a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800547e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <quaternionToRoll+0xb0>)
 8005484:	edd3 6a03 	vldr	s13, [r3, #12]
 8005488:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <quaternionToRoll+0xb0>)
 800548a:	edd3 7a03 	vldr	s15, [r3, #12]
 800548e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005496:	eef0 0a67 	vmov.f32	s1, s15
 800549a:	eeb0 0a46 	vmov.f32	s0, s12
 800549e:	f00b f9f3 	bl	8010888 <atan2f>
 80054a2:	eef0 7a40 	vmov.f32	s15, s0
 80054a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80054d0 <quaternionToRoll+0xb4>
 80054aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054ae:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80054d4 <quaternionToRoll+0xb8>
 80054b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054b6:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	ee07 3a90 	vmov	s15, r3
}
 80054c0:	eeb0 0a67 	vmov.f32	s0, s15
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000014 	.word	0x20000014
 80054d0:	43340000 	.word	0x43340000
 80054d4:	40490fd0 	.word	0x40490fd0

080054d8 <getInitialQuaternion>:

void getInitialQuaternion() {
 80054d8:	b5b0      	push	{r4, r5, r7, lr}
 80054da:	b092      	sub	sp, #72	@ 0x48
 80054dc:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 80054de:	4b98      	ldr	r3, [pc, #608]	@ (8005740 <getInitialQuaternion+0x268>)
 80054e0:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80054e4:	4b96      	ldr	r3, [pc, #600]	@ (8005740 <getInitialQuaternion+0x268>)
 80054e6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80054ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ee:	4b94      	ldr	r3, [pc, #592]	@ (8005740 <getInitialQuaternion+0x268>)
 80054f0:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80054f4:	4b92      	ldr	r3, [pc, #584]	@ (8005740 <getInitialQuaternion+0x268>)
 80054f6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005502:	4b8f      	ldr	r3, [pc, #572]	@ (8005740 <getInitialQuaternion+0x268>)
 8005504:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8005508:	4b8d      	ldr	r3, [pc, #564]	@ (8005740 <getInitialQuaternion+0x268>)
 800550a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800550e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005516:	ee17 0a90 	vmov	r0, s15
 800551a:	f7fb f835 	bl	8000588 <__aeabi_f2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	ec43 2b10 	vmov	d0, r2, r3
 8005526:	f00b f92b 	bl	8010780 <sqrt>
 800552a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 800552e:	4b84      	ldr	r3, [pc, #528]	@ (8005740 <getInitialQuaternion+0x268>)
 8005530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005532:	4618      	mov	r0, r3
 8005534:	f7fb f828 	bl	8000588 <__aeabi_f2d>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8005540:	4b7f      	ldr	r3, [pc, #508]	@ (8005740 <getInitialQuaternion+0x268>)
 8005542:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8005546:	eef1 7a67 	vneg.f32	s15, s15
 800554a:	ee17 3a90 	vmov	r3, s15
 800554e:	4618      	mov	r0, r3
 8005550:	f7fb f81a 	bl	8000588 <__aeabi_f2d>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 800555c:	4b78      	ldr	r3, [pc, #480]	@ (8005740 <getInitialQuaternion+0x268>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	4618      	mov	r0, r3
 8005562:	f7fb f811 	bl	8000588 <__aeabi_f2d>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 800556e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005576:	f7fb f989 	bl	800088c <__aeabi_ddiv>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8005582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800558a:	f7fb f97f 	bl	800088c <__aeabi_ddiv>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8005596:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800559a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800559e:	f7fb f975 	bl	800088c <__aeabi_ddiv>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80055aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	4964      	ldr	r1, [pc, #400]	@ (8005744 <getInitialQuaternion+0x26c>)
 80055b4:	f7fa fe88 	bl	80002c8 <__aeabi_dsub>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	ec43 2b17 	vmov	d7, r2, r3
 80055c0:	eeb0 0a47 	vmov.f32	s0, s14
 80055c4:	eef0 0a67 	vmov.f32	s1, s15
 80055c8:	f00b f8da 	bl	8010780 <sqrt>
 80055cc:	ec51 0b10 	vmov	r0, r1, d0
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005748 <getInitialQuaternion+0x270>)
 80055d6:	f7fb f82f 	bl	8000638 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 80055e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e6:	f04f 0000 	mov.w	r0, #0
 80055ea:	4957      	ldr	r1, [pc, #348]	@ (8005748 <getInitialQuaternion+0x270>)
 80055ec:	f7fb f94e 	bl	800088c <__aeabi_ddiv>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 80055f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80055fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005600:	f7fb f81a 	bl	8000638 <__aeabi_dmul>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	4b4d      	ldr	r3, [pc, #308]	@ (8005748 <getInitialQuaternion+0x270>)
 8005612:	f7fb f811 	bl	8000638 <__aeabi_dmul>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 800561e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005622:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005626:	f7fb f807 	bl	8000638 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4610      	mov	r0, r2
 8005630:	4619      	mov	r1, r3
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	4b44      	ldr	r3, [pc, #272]	@ (8005748 <getInitialQuaternion+0x270>)
 8005638:	f7fa fffe 	bl	8000638 <__aeabi_dmul>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8005650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005658:	f7fa ffee 	bl	8000638 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4614      	mov	r4, r2
 8005662:	461d      	mov	r5, r3
 8005664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800566c:	f7fa ffe4 	bl	8000638 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4620      	mov	r0, r4
 8005676:	4629      	mov	r1, r5
 8005678:	f7fa fe28 	bl	80002cc <__adddf3>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4614      	mov	r4, r2
 8005682:	461d      	mov	r5, r3
 8005684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800568c:	f7fa ffd4 	bl	8000638 <__aeabi_dmul>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4620      	mov	r0, r4
 8005696:	4629      	mov	r1, r5
 8005698:	f7fa fe18 	bl	80002cc <__adddf3>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4614      	mov	r4, r2
 80056a2:	461d      	mov	r5, r3
 80056a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ac:	f7fa ffc4 	bl	8000638 <__aeabi_dmul>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4620      	mov	r0, r4
 80056b6:	4629      	mov	r1, r5
 80056b8:	f7fa fe08 	bl	80002cc <__adddf3>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	ec43 2b17 	vmov	d7, r2, r3
 80056c4:	eeb0 0a47 	vmov.f32	s0, s14
 80056c8:	eef0 0a67 	vmov.f32	s1, s15
 80056cc:	f00b f858 	bl	8010780 <sqrt>
 80056d0:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 80056d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056dc:	f7fb f8d6 	bl	800088c <__aeabi_ddiv>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	f7fb fa9e 	bl	8000c28 <__aeabi_d2f>
 80056ec:	4603      	mov	r3, r0
 80056ee:	4a17      	ldr	r2, [pc, #92]	@ (800574c <getInitialQuaternion+0x274>)
 80056f0:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 80056f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056fa:	f7fb f8c7 	bl	800088c <__aeabi_ddiv>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f7fb fa8f 	bl	8000c28 <__aeabi_d2f>
 800570a:	4603      	mov	r3, r0
 800570c:	4a0f      	ldr	r2, [pc, #60]	@ (800574c <getInitialQuaternion+0x274>)
 800570e:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8005710:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005714:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005718:	f7fb f8b8 	bl	800088c <__aeabi_ddiv>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	f7fb fa80 	bl	8000c28 <__aeabi_d2f>
 8005728:	4603      	mov	r3, r0
 800572a:	4a08      	ldr	r2, [pc, #32]	@ (800574c <getInitialQuaternion+0x274>)
 800572c:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 800572e:	4b07      	ldr	r3, [pc, #28]	@ (800574c <getInitialQuaternion+0x274>)
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	60da      	str	r2, [r3, #12]
}
 8005736:	bf00      	nop
 8005738:	3748      	adds	r7, #72	@ 0x48
 800573a:	46bd      	mov	sp, r7
 800573c:	bdb0      	pop	{r4, r5, r7, pc}
 800573e:	bf00      	nop
 8005740:	2000156c 	.word	0x2000156c
 8005744:	3ff00000 	.word	0x3ff00000
 8005748:	3fe00000 	.word	0x3fe00000
 800574c:	20000014 	.word	0x20000014

08005750 <invSqrt>:

float invSqrt(float x) {
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800575a:	edd7 7a01 	vldr	s15, [r7, #4]
 800575e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005766:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800576e:	f107 0310 	add.w	r3, r7, #16
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	105a      	asrs	r2, r3, #1
 800577a:	4b12      	ldr	r3, [pc, #72]	@ (80057c4 <invSqrt+0x74>)
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8005780:	f107 030c 	add.w	r3, r7, #12
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8005788:	ed97 7a04 	vldr	s14, [r7, #16]
 800578c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005794:	edd7 7a04 	vldr	s15, [r7, #16]
 8005798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80057a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80057a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ac:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
}
 80057b6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	5f3759df 	.word	0x5f3759df

080057c8 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 80057d0:	481b      	ldr	r0, [pc, #108]	@ (8005840 <sensor_fusion_init+0x78>)
 80057d2:	f7fd fa89 	bl	8002ce8 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 80057d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <sensor_fusion_init+0x78>)
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <sensor_fusion_init+0x7c>)
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 80057dc:	4b18      	ldr	r3, [pc, #96]	@ (8005840 <sensor_fusion_init+0x78>)
 80057de:	4a1a      	ldr	r2, [pc, #104]	@ (8005848 <sensor_fusion_init+0x80>)
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 80057e2:	4b17      	ldr	r3, [pc, #92]	@ (8005840 <sensor_fusion_init+0x78>)
 80057e4:	4a19      	ldr	r2, [pc, #100]	@ (800584c <sensor_fusion_init+0x84>)
 80057e6:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e009      	b.n	8005802 <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <sensor_fusion_init+0x88>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b04      	cmp	r3, #4
 8005806:	ddf2      	ble.n	80057ee <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8005808:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <sensor_fusion_init+0x8c>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 800580e:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <sensor_fusion_init+0x90>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8005814:	4b11      	ldr	r3, [pc, #68]	@ (800585c <sensor_fusion_init+0x94>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 800581a:	4b11      	ldr	r3, [pc, #68]	@ (8005860 <sensor_fusion_init+0x98>)
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	4a0f      	ldr	r2, [pc, #60]	@ (8005864 <sensor_fusion_init+0x9c>)
 8005826:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8005828:	f000 fc9a 	bl	8006160 <HAL_GetTick>
 800582c:	4603      	mov	r3, r0
 800582e:	4a0e      	ldr	r2, [pc, #56]	@ (8005868 <sensor_fusion_init+0xa0>)
 8005830:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <sensor_fusion_init+0xa4>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200016b0 	.word	0x200016b0
 8005844:	3dcccccd 	.word	0x3dcccccd
 8005848:	3ba3d70a 	.word	0x3ba3d70a
 800584c:	40a00000 	.word	0x40a00000
 8005850:	2000170c 	.word	0x2000170c
 8005854:	20001720 	.word	0x20001720
 8005858:	20001721 	.word	0x20001721
 800585c:	20001722 	.word	0x20001722
 8005860:	200016fc 	.word	0x200016fc
 8005864:	20001700 	.word	0x20001700
 8005868:	20001704 	.word	0x20001704
 800586c:	20001708 	.word	0x20001708

08005870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <HAL_MspInit+0x4c>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	4a0f      	ldr	r2, [pc, #60]	@ (80058bc <HAL_MspInit+0x4c>)
 8005880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005884:	6453      	str	r3, [r2, #68]	@ 0x44
 8005886:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <HAL_MspInit+0x4c>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <HAL_MspInit+0x4c>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	4a08      	ldr	r2, [pc, #32]	@ (80058bc <HAL_MspInit+0x4c>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_MspInit+0x4c>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800

080058c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08a      	sub	sp, #40	@ 0x28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a33      	ldr	r2, [pc, #204]	@ (80059ac <HAL_ADC_MspInit+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d15f      	bne.n	80059a2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	4b32      	ldr	r3, [pc, #200]	@ (80059b0 <HAL_ADC_MspInit+0xf0>)
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	4a31      	ldr	r2, [pc, #196]	@ (80059b0 <HAL_ADC_MspInit+0xf0>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80058f2:	4b2f      	ldr	r3, [pc, #188]	@ (80059b0 <HAL_ADC_MspInit+0xf0>)
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	4b2b      	ldr	r3, [pc, #172]	@ (80059b0 <HAL_ADC_MspInit+0xf0>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <HAL_ADC_MspInit+0xf0>)
 8005908:	f043 0302 	orr.w	r3, r3, #2
 800590c:	6313      	str	r3, [r2, #48]	@ 0x30
 800590e:	4b28      	ldr	r3, [pc, #160]	@ (80059b0 <HAL_ADC_MspInit+0xf0>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800591a:	2302      	movs	r3, #2
 800591c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800591e:	2303      	movs	r3, #3
 8005920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005926:	f107 0314 	add.w	r3, r7, #20
 800592a:	4619      	mov	r1, r3
 800592c:	4821      	ldr	r0, [pc, #132]	@ (80059b4 <HAL_ADC_MspInit+0xf4>)
 800592e:	f001 ff2b 	bl	8007788 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005932:	4b21      	ldr	r3, [pc, #132]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005934:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <HAL_ADC_MspInit+0xfc>)
 8005936:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005938:	4b1f      	ldr	r3, [pc, #124]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800593e:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005940:	2200      	movs	r2, #0
 8005942:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005944:	4b1c      	ldr	r3, [pc, #112]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800594a:	4b1b      	ldr	r3, [pc, #108]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 800594c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005950:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005952:	4b19      	ldr	r3, [pc, #100]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005958:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800595a:	4b17      	ldr	r3, [pc, #92]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 800595c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005960:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005962:	4b15      	ldr	r3, [pc, #84]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005968:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800596a:	4b13      	ldr	r3, [pc, #76]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 800596c:	2200      	movs	r2, #0
 800596e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005970:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005972:	2200      	movs	r2, #0
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005976:	4810      	ldr	r0, [pc, #64]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 8005978:	f001 faa6 	bl	8006ec8 <HAL_DMA_Init>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005982:	f7fe fae5 	bl	8003f50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a0b      	ldr	r2, [pc, #44]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38
 800598c:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <HAL_ADC_MspInit+0xf8>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	2012      	movs	r0, #18
 8005998:	f001 fa51 	bl	8006e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800599c:	2012      	movs	r0, #18
 800599e:	f001 fa6a 	bl	8006e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80059a2:	bf00      	nop
 80059a4:	3728      	adds	r7, #40	@ 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40012000 	.word	0x40012000
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40020400 	.word	0x40020400
 80059b8:	200012c4 	.word	0x200012c4
 80059bc:	40026410 	.word	0x40026410

080059c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08c      	sub	sp, #48	@ 0x30
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c8:	f107 031c 	add.w	r3, r7, #28
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a42      	ldr	r2, [pc, #264]	@ (8005ae8 <HAL_I2C_MspInit+0x128>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d12d      	bne.n	8005a3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	4b41      	ldr	r3, [pc, #260]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	4a40      	ldr	r2, [pc, #256]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80059f2:	4b3e      	ldr	r3, [pc, #248]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80059fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a04:	2312      	movs	r3, #18
 8005a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a10:	2304      	movs	r3, #4
 8005a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a14:	f107 031c 	add.w	r3, r7, #28
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4835      	ldr	r0, [pc, #212]	@ (8005af0 <HAL_I2C_MspInit+0x130>)
 8005a1c:	f001 feb4 	bl	8007788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a28:	4a30      	ldr	r2, [pc, #192]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a30:	4b2e      	ldr	r3, [pc, #184]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005a3c:	e050      	b.n	8005ae0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <HAL_I2C_MspInit+0x134>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d14b      	bne.n	8005ae0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	4a26      	ldr	r2, [pc, #152]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a58:	4b24      	ldr	r3, [pc, #144]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a74:	4b1d      	ldr	r3, [pc, #116]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a86:	2312      	movs	r3, #18
 8005a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005a92:	2304      	movs	r3, #4
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a96:	f107 031c 	add.w	r3, r7, #28
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4816      	ldr	r0, [pc, #88]	@ (8005af8 <HAL_I2C_MspInit+0x138>)
 8005a9e:	f001 fe73 	bl	8007788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005aa8:	2312      	movs	r3, #18
 8005aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab8:	f107 031c 	add.w	r3, r7, #28
 8005abc:	4619      	mov	r1, r3
 8005abe:	480f      	ldr	r0, [pc, #60]	@ (8005afc <HAL_I2C_MspInit+0x13c>)
 8005ac0:	f001 fe62 	bl	8007788 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	4a07      	ldr	r2, [pc, #28]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005ace:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <HAL_I2C_MspInit+0x12c>)
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	3730      	adds	r7, #48	@ 0x30
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40005400 	.word	0x40005400
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40020400 	.word	0x40020400
 8005af4:	40005c00 	.word	0x40005c00
 8005af8:	40020800 	.word	0x40020800
 8005afc:	40020000 	.word	0x40020000

08005b00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <HAL_I2C_MspDeInit+0x68>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d110      	bne.n	8005b34 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005b12:	4b16      	ldr	r3, [pc, #88]	@ (8005b6c <HAL_I2C_MspDeInit+0x6c>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <HAL_I2C_MspDeInit+0x6c>)
 8005b18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b1c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005b1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b22:	4813      	ldr	r0, [pc, #76]	@ (8005b70 <HAL_I2C_MspDeInit+0x70>)
 8005b24:	f001 ffc4 	bl	8007ab0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005b28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b2c:	4810      	ldr	r0, [pc, #64]	@ (8005b70 <HAL_I2C_MspDeInit+0x70>)
 8005b2e:	f001 ffbf 	bl	8007ab0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005b32:	e014      	b.n	8005b5e <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C3)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a0e      	ldr	r2, [pc, #56]	@ (8005b74 <HAL_I2C_MspDeInit+0x74>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10f      	bne.n	8005b5e <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <HAL_I2C_MspDeInit+0x6c>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	4a0a      	ldr	r2, [pc, #40]	@ (8005b6c <HAL_I2C_MspDeInit+0x6c>)
 8005b44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005b48:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005b4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b4e:	480a      	ldr	r0, [pc, #40]	@ (8005b78 <HAL_I2C_MspDeInit+0x78>)
 8005b50:	f001 ffae 	bl	8007ab0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005b54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b58:	4808      	ldr	r0, [pc, #32]	@ (8005b7c <HAL_I2C_MspDeInit+0x7c>)
 8005b5a:	f001 ffa9 	bl	8007ab0 <HAL_GPIO_DeInit>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40005400 	.word	0x40005400
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	40020400 	.word	0x40020400
 8005b74:	40005c00 	.word	0x40005c00
 8005b78:	40020800 	.word	0x40020800
 8005b7c:	40020000 	.word	0x40020000

08005b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b90:	d115      	bne.n	8005bbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <HAL_TIM_Base_MspInit+0x48>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc8 <HAL_TIM_Base_MspInit+0x48>)
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ba2:	4b09      	ldr	r3, [pc, #36]	@ (8005bc8 <HAL_TIM_Base_MspInit+0x48>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	201c      	movs	r0, #28
 8005bb4:	f001 f943 	bl	8006e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005bb8:	201c      	movs	r0, #28
 8005bba:	f001 f95c 	bl	8006e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023800 	.word	0x40023800

08005bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	@ 0x30
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd4:	f107 031c 	add.w	r3, r7, #28
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	609a      	str	r2, [r3, #8]
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4d      	ldr	r2, [pc, #308]	@ (8005d20 <HAL_UART_MspInit+0x154>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d12c      	bne.n	8005c48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	4a4b      	ldr	r2, [pc, #300]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bfe:	4b49      	ldr	r3, [pc, #292]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c06:	61bb      	str	r3, [r7, #24]
 8005c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	4b45      	ldr	r3, [pc, #276]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	4a44      	ldr	r2, [pc, #272]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c1a:	4b42      	ldr	r3, [pc, #264]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c26:	230c      	movs	r3, #12
 8005c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c32:	2303      	movs	r3, #3
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c36:	2307      	movs	r3, #7
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c3a:	f107 031c 	add.w	r3, r7, #28
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4839      	ldr	r0, [pc, #228]	@ (8005d28 <HAL_UART_MspInit+0x15c>)
 8005c42:	f001 fda1 	bl	8007788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005c46:	e067      	b.n	8005d18 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a37      	ldr	r2, [pc, #220]	@ (8005d2c <HAL_UART_MspInit+0x160>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d162      	bne.n	8005d18 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	4b33      	ldr	r3, [pc, #204]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	4a32      	ldr	r2, [pc, #200]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c5c:	f043 0320 	orr.w	r3, r3, #32
 8005c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c62:	4b30      	ldr	r3, [pc, #192]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b2c      	ldr	r3, [pc, #176]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	4a2b      	ldr	r2, [pc, #172]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c7e:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <HAL_UART_MspInit+0x158>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c8a:	23c0      	movs	r3, #192	@ 0xc0
 8005c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c96:	2303      	movs	r3, #3
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c9e:	f107 031c 	add.w	r3, r7, #28
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4822      	ldr	r0, [pc, #136]	@ (8005d30 <HAL_UART_MspInit+0x164>)
 8005ca6:	f001 fd6f 	bl	8007788 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8005caa:	4b22      	ldr	r3, [pc, #136]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cac:	4a22      	ldr	r2, [pc, #136]	@ (8005d38 <HAL_UART_MspInit+0x16c>)
 8005cae:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005cb0:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cb2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005cb6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cca:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ccc:	4b19      	ldr	r3, [pc, #100]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cd2:	4b18      	ldr	r3, [pc, #96]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005cd8:	4b16      	ldr	r3, [pc, #88]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cde:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ce0:	4b14      	ldr	r3, [pc, #80]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ce6:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005cec:	4811      	ldr	r0, [pc, #68]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005cee:	f001 f8eb 	bl	8006ec8 <HAL_DMA_Init>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_UART_MspInit+0x130>
      Error_Handler();
 8005cf8:	f7fe f92a 	bl	8003f50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005d00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d02:	4a0c      	ldr	r2, [pc, #48]	@ (8005d34 <HAL_UART_MspInit+0x168>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2047      	movs	r0, #71	@ 0x47
 8005d0e:	f001 f896 	bl	8006e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005d12:	2047      	movs	r0, #71	@ 0x47
 8005d14:	f001 f8af 	bl	8006e76 <HAL_NVIC_EnableIRQ>
}
 8005d18:	bf00      	nop
 8005d1a:	3730      	adds	r7, #48	@ 0x30
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40004400 	.word	0x40004400
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40020000 	.word	0x40020000
 8005d2c:	40011400 	.word	0x40011400
 8005d30:	40020800 	.word	0x40020800
 8005d34:	200014a4 	.word	0x200014a4
 8005d38:	40026440 	.word	0x40026440

08005d3c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a14      	ldr	r2, [pc, #80]	@ (8005d9c <HAL_UART_MspDeInit+0x60>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10a      	bne.n	8005d64 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8005d4e:	4b14      	ldr	r3, [pc, #80]	@ (8005da0 <HAL_UART_MspDeInit+0x64>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	4a13      	ldr	r2, [pc, #76]	@ (8005da0 <HAL_UART_MspDeInit+0x64>)
 8005d54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d58:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8005d5a:	210c      	movs	r1, #12
 8005d5c:	4811      	ldr	r0, [pc, #68]	@ (8005da4 <HAL_UART_MspDeInit+0x68>)
 8005d5e:	f001 fea7 	bl	8007ab0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8005d62:	e016      	b.n	8005d92 <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART6)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0f      	ldr	r2, [pc, #60]	@ (8005da8 <HAL_UART_MspDeInit+0x6c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART6_CLK_DISABLE();
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <HAL_UART_MspDeInit+0x64>)
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	4a0b      	ldr	r2, [pc, #44]	@ (8005da0 <HAL_UART_MspDeInit+0x64>)
 8005d74:	f023 0320 	bic.w	r3, r3, #32
 8005d78:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8005d7a:	21c0      	movs	r1, #192	@ 0xc0
 8005d7c:	480b      	ldr	r0, [pc, #44]	@ (8005dac <HAL_UART_MspDeInit+0x70>)
 8005d7e:	f001 fe97 	bl	8007ab0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 f94c 	bl	8007024 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8005d8c:	2047      	movs	r0, #71	@ 0x47
 8005d8e:	f001 f880 	bl	8006e92 <HAL_NVIC_DisableIRQ>
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40004400 	.word	0x40004400
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40020000 	.word	0x40020000
 8005da8:	40011400 	.word	0x40011400
 8005dac:	40020800 	.word	0x40020800

08005db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <NMI_Handler+0x4>

08005db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <HardFault_Handler+0x4>

08005dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <MemManage_Handler+0x4>

08005dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <BusFault_Handler+0x4>

08005dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <UsageFault_Handler+0x4>

08005dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ddc:	bf00      	nop
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005df8:	bf00      	nop
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e06:	f000 f997 	bl	8006138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005e12:	2008      	movs	r0, #8
 8005e14:	f001 ff5a 	bl	8007ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005e18:	bf00      	nop
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005e20:	2010      	movs	r0, #16
 8005e22:	f001 ff53 	bl	8007ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005e30:	4802      	ldr	r0, [pc, #8]	@ (8005e3c <ADC_IRQHandler+0x10>)
 8005e32:	f000 fa08 	bl	8006246 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2000127c 	.word	0x2000127c

08005e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005e44:	4802      	ldr	r0, [pc, #8]	@ (8005e50 <TIM2_IRQHandler+0x10>)
 8005e46:	f003 fe55 	bl	8009af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200013cc 	.word	0x200013cc

08005e54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005e58:	4802      	ldr	r0, [pc, #8]	@ (8005e64 <DMA2_Stream0_IRQHandler+0x10>)
 8005e5a:	f001 fa2b 	bl	80072b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200012c4 	.word	0x200012c4

08005e68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005e6c:	4802      	ldr	r0, [pc, #8]	@ (8005e78 <DMA2_Stream2_IRQHandler+0x10>)
 8005e6e:	f001 fa21 	bl	80072b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200014a4 	.word	0x200014a4

08005e7c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005e80:	4802      	ldr	r0, [pc, #8]	@ (8005e8c <USART6_IRQHandler+0x10>)
 8005e82:	f004 fb19 	bl	800a4b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005e86:	bf00      	nop
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000145c 	.word	0x2000145c

08005e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return 1;
 8005e94:	2301      	movs	r3, #1
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <_kill>:

int _kill(int pid, int sig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005eaa:	f006 fd47 	bl	800c93c <__errno>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2216      	movs	r2, #22
 8005eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_exit>:

void _exit (int status)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ffe7 	bl	8005ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <_exit+0x12>

08005ed6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e00a      	b.n	8005efe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ee8:	f3af 8000 	nop.w
 8005eec:	4601      	mov	r1, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	60ba      	str	r2, [r7, #8]
 8005ef4:	b2ca      	uxtb	r2, r1
 8005ef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3301      	adds	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	dbf0      	blt.n	8005ee8 <_read+0x12>
  }

  return len;
 8005f06:	687b      	ldr	r3, [r7, #4]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e009      	b.n	8005f36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	60ba      	str	r2, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3301      	adds	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	dbf1      	blt.n	8005f22 <_write+0x12>
  }
  return len;
 8005f3e:	687b      	ldr	r3, [r7, #4]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <_close>:

int _close(int file)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f70:	605a      	str	r2, [r3, #4]
  return 0;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <_isatty>:

int _isatty(int file)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f88:	2301      	movs	r3, #1
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005fb8:	4a14      	ldr	r2, [pc, #80]	@ (800600c <_sbrk+0x5c>)
 8005fba:	4b15      	ldr	r3, [pc, #84]	@ (8006010 <_sbrk+0x60>)
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005fc4:	4b13      	ldr	r3, [pc, #76]	@ (8006014 <_sbrk+0x64>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005fcc:	4b11      	ldr	r3, [pc, #68]	@ (8006014 <_sbrk+0x64>)
 8005fce:	4a12      	ldr	r2, [pc, #72]	@ (8006018 <_sbrk+0x68>)
 8005fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <_sbrk+0x64>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d207      	bcs.n	8005ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fe0:	f006 fcac 	bl	800c93c <__errno>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	220c      	movs	r2, #12
 8005fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	e009      	b.n	8006004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ff0:	4b08      	ldr	r3, [pc, #32]	@ (8006014 <_sbrk+0x64>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ff6:	4b07      	ldr	r3, [pc, #28]	@ (8006014 <_sbrk+0x64>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	4a05      	ldr	r2, [pc, #20]	@ (8006014 <_sbrk+0x64>)
 8006000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20020000 	.word	0x20020000
 8006010:	00000400 	.word	0x00000400
 8006014:	20001724 	.word	0x20001724
 8006018:	20001878 	.word	0x20001878

0800601c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006020:	4b06      	ldr	r3, [pc, #24]	@ (800603c <SystemInit+0x20>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006026:	4a05      	ldr	r2, [pc, #20]	@ (800603c <SystemInit+0x20>)
 8006028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800602c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006030:	bf00      	nop
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006078 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006044:	f7ff ffea 	bl	800601c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006048:	480c      	ldr	r0, [pc, #48]	@ (800607c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800604a:	490d      	ldr	r1, [pc, #52]	@ (8006080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800604c:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800604e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006050:	e002      	b.n	8006058 <LoopCopyDataInit>

08006052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006056:	3304      	adds	r3, #4

08006058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800605a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800605c:	d3f9      	bcc.n	8006052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800605e:	4a0a      	ldr	r2, [pc, #40]	@ (8006088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006060:	4c0a      	ldr	r4, [pc, #40]	@ (800608c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006064:	e001      	b.n	800606a <LoopFillZerobss>

08006066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006068:	3204      	adds	r2, #4

0800606a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800606a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800606c:	d3fb      	bcc.n	8006066 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800606e:	f006 fc6b 	bl	800c948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006072:	f7fd fb73 	bl	800375c <main>
  bx  lr    
 8006076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800607c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006080:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8006084:	08012558 	.word	0x08012558
  ldr r2, =_sbss
 8006088:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800608c:	20001878 	.word	0x20001878

08006090 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006090:	e7fe      	b.n	8006090 <CAN1_RX0_IRQHandler>
	...

08006094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006098:	4b0e      	ldr	r3, [pc, #56]	@ (80060d4 <HAL_Init+0x40>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a0d      	ldr	r2, [pc, #52]	@ (80060d4 <HAL_Init+0x40>)
 800609e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060a4:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <HAL_Init+0x40>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a0a      	ldr	r2, [pc, #40]	@ (80060d4 <HAL_Init+0x40>)
 80060aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060b0:	4b08      	ldr	r3, [pc, #32]	@ (80060d4 <HAL_Init+0x40>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a07      	ldr	r2, [pc, #28]	@ (80060d4 <HAL_Init+0x40>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060bc:	2003      	movs	r0, #3
 80060be:	f000 feb3 	bl	8006e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060c2:	200f      	movs	r0, #15
 80060c4:	f000 f808 	bl	80060d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060c8:	f7ff fbd2 	bl	8005870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40023c00 	.word	0x40023c00

080060d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060e0:	4b12      	ldr	r3, [pc, #72]	@ (800612c <HAL_InitTick+0x54>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b12      	ldr	r3, [pc, #72]	@ (8006130 <HAL_InitTick+0x58>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fed9 	bl	8006eae <HAL_SYSTICK_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e00e      	b.n	8006124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b0f      	cmp	r3, #15
 800610a:	d80a      	bhi.n	8006122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800610c:	2200      	movs	r2, #0
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	f000 fe93 	bl	8006e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006118:	4a06      	ldr	r2, [pc, #24]	@ (8006134 <HAL_InitTick+0x5c>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e000      	b.n	8006124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	2000002c 	.word	0x2000002c
 8006130:	20000034 	.word	0x20000034
 8006134:	20000030 	.word	0x20000030

08006138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800613c:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <HAL_IncTick+0x20>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	4b06      	ldr	r3, [pc, #24]	@ (800615c <HAL_IncTick+0x24>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4413      	add	r3, r2
 8006148:	4a04      	ldr	r2, [pc, #16]	@ (800615c <HAL_IncTick+0x24>)
 800614a:	6013      	str	r3, [r2, #0]
}
 800614c:	bf00      	nop
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000034 	.word	0x20000034
 800615c:	20001728 	.word	0x20001728

08006160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return uwTick;
 8006164:	4b03      	ldr	r3, [pc, #12]	@ (8006174 <HAL_GetTick+0x14>)
 8006166:	681b      	ldr	r3, [r3, #0]
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20001728 	.word	0x20001728

08006178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006180:	f7ff ffee 	bl	8006160 <HAL_GetTick>
 8006184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d005      	beq.n	800619e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <HAL_Delay+0x44>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800619e:	bf00      	nop
 80061a0:	f7ff ffde 	bl	8006160 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d8f7      	bhi.n	80061a0 <HAL_Delay+0x28>
  {
  }
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000034 	.word	0x20000034

080061c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e033      	b.n	800623e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff fb6e 	bl	80058c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d118      	bne.n	8006230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006206:	f023 0302 	bic.w	r3, r3, #2
 800620a:	f043 0202 	orr.w	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fb8c 	bl	8006930 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	@ 0x40
 800622e:	e001      	b.n	8006234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d049      	beq.n	8006310 <HAL_ADC_IRQHandler+0xca>
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d046      	beq.n	8006310 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d12b      	bne.n	8006300 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d127      	bne.n	8006300 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d119      	bne.n	8006300 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0220 	bic.w	r2, r2, #32
 80062da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fd fe0f 	bl	8003f24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f06f 0212 	mvn.w	r2, #18
 800630e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d057      	beq.n	80063d6 <HAL_ADC_IRQHandler+0x190>
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d054      	beq.n	80063d6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d105      	bne.n	8006344 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d139      	bne.n	80063c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12b      	bne.n	80063c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006378:	2b00      	cmp	r3, #0
 800637a:	d124      	bne.n	80063c6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11d      	bne.n	80063c6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800638e:	2b00      	cmp	r3, #0
 8006390:	d119      	bne.n	80063c6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d105      	bne.n	80063c6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc30 	bl	8006c2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 020c 	mvn.w	r2, #12
 80063d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_ADC_IRQHandler+0x1d6>
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d014      	beq.n	800641c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10d      	bne.n	800641c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006404:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f949 	bl	80066a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0201 	mvn.w	r2, #1
 800641a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800642a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d015      	beq.n	800645e <HAL_ADC_IRQHandler+0x218>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643c:	f043 0202 	orr.w	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0220 	mvn.w	r2, #32
 800644c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f932 	bl	80066b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0220 	mvn.w	r2, #32
 800645c:	601a      	str	r2, [r3, #0]
  }
}
 800645e:	bf00      	nop
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_ADC_Start_DMA+0x22>
 8006486:	2302      	movs	r3, #2
 8006488:	e0eb      	b.n	8006662 <HAL_ADC_Start_DMA+0x1fa>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d018      	beq.n	80064d2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80064b0:	4b6e      	ldr	r3, [pc, #440]	@ (800666c <HAL_ADC_Start_DMA+0x204>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006670 <HAL_ADC_Start_DMA+0x208>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	0c9a      	lsrs	r2, r3, #18
 80064bc:	4613      	mov	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4413      	add	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80064c4:	e002      	b.n	80064cc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f9      	bne.n	80064c6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e0:	d107      	bne.n	80064f2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064f0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	f040 80a3 	bne.w	8006648 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800652c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006540:	d106      	bne.n	8006550 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006546:	f023 0206 	bic.w	r2, r3, #6
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	645a      	str	r2, [r3, #68]	@ 0x44
 800654e:	e002      	b.n	8006556 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800655e:	4b45      	ldr	r3, [pc, #276]	@ (8006674 <HAL_ADC_Start_DMA+0x20c>)
 8006560:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	4a44      	ldr	r2, [pc, #272]	@ (8006678 <HAL_ADC_Start_DMA+0x210>)
 8006568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	4a43      	ldr	r2, [pc, #268]	@ (800667c <HAL_ADC_Start_DMA+0x214>)
 8006570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	4a42      	ldr	r2, [pc, #264]	@ (8006680 <HAL_ADC_Start_DMA+0x218>)
 8006578:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006582:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006592:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	334c      	adds	r3, #76	@ 0x4c
 80065ae:	4619      	mov	r1, r3
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f000 fd94 	bl	80070e0 <HAL_DMA_Start_IT>
 80065b8:	4603      	mov	r3, r0
 80065ba:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d12a      	bne.n	800661e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006684 <HAL_ADC_Start_DMA+0x21c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d015      	beq.n	80065fe <HAL_ADC_Start_DMA+0x196>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006688 <HAL_ADC_Start_DMA+0x220>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d105      	bne.n	80065e8 <HAL_ADC_Start_DMA+0x180>
 80065dc:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <HAL_ADC_Start_DMA+0x20c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a27      	ldr	r2, [pc, #156]	@ (800668c <HAL_ADC_Start_DMA+0x224>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d136      	bne.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
 80065f2:	4b20      	ldr	r3, [pc, #128]	@ (8006674 <HAL_ADC_Start_DMA+0x20c>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 0310 	and.w	r3, r3, #16
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d130      	bne.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d129      	bne.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	e020      	b.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	@ (8006684 <HAL_ADC_Start_DMA+0x21c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d11b      	bne.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d114      	bne.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006644:	609a      	str	r2, [r3, #8]
 8006646:	e00b      	b.n	8006660 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	f043 0210 	orr.w	r2, r3, #16
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	f043 0201 	orr.w	r2, r3, #1
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8006660:	7ffb      	ldrb	r3, [r7, #31]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	2000002c 	.word	0x2000002c
 8006670:	431bde83 	.word	0x431bde83
 8006674:	40012300 	.word	0x40012300
 8006678:	08006b29 	.word	0x08006b29
 800667c:	08006be3 	.word	0x08006be3
 8006680:	08006bff 	.word	0x08006bff
 8006684:	40012000 	.word	0x40012000
 8006688:	40012100 	.word	0x40012100
 800668c:	40012200 	.word	0x40012200

08006690 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x1c>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e113      	b.n	8006910 <HAL_ADC_ConfigChannel+0x244>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b09      	cmp	r3, #9
 80066f6:	d925      	bls.n	8006744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68d9      	ldr	r1, [r3, #12]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	3b1e      	subs	r3, #30
 800670e:	2207      	movs	r2, #7
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	43da      	mvns	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	400a      	ands	r2, r1
 800671c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68d9      	ldr	r1, [r3, #12]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	4618      	mov	r0, r3
 8006730:	4603      	mov	r3, r0
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4403      	add	r3, r0
 8006736:	3b1e      	subs	r3, #30
 8006738:	409a      	lsls	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	e022      	b.n	800678a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6919      	ldr	r1, [r3, #16]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	4613      	mov	r3, r2
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	4413      	add	r3, r2
 8006758:	2207      	movs	r2, #7
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43da      	mvns	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	400a      	ands	r2, r1
 8006766:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6919      	ldr	r1, [r3, #16]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	4618      	mov	r0, r3
 800677a:	4603      	mov	r3, r0
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	4403      	add	r3, r0
 8006780:	409a      	lsls	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b06      	cmp	r3, #6
 8006790:	d824      	bhi.n	80067dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	3b05      	subs	r3, #5
 80067a4:	221f      	movs	r2, #31
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	400a      	ands	r2, r1
 80067b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	3b05      	subs	r3, #5
 80067ce:	fa00 f203 	lsl.w	r2, r0, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80067da:	e04c      	b.n	8006876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b0c      	cmp	r3, #12
 80067e2:	d824      	bhi.n	800682e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	3b23      	subs	r3, #35	@ 0x23
 80067f6:	221f      	movs	r2, #31
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	43da      	mvns	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	400a      	ands	r2, r1
 8006804:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	4618      	mov	r0, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	3b23      	subs	r3, #35	@ 0x23
 8006820:	fa00 f203 	lsl.w	r2, r0, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30
 800682c:	e023      	b.n	8006876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	3b41      	subs	r3, #65	@ 0x41
 8006840:	221f      	movs	r2, #31
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43da      	mvns	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	400a      	ands	r2, r1
 800684e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	4618      	mov	r0, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	3b41      	subs	r3, #65	@ 0x41
 800686a:	fa00 f203 	lsl.w	r2, r0, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006876:	4b29      	ldr	r3, [pc, #164]	@ (800691c <HAL_ADC_ConfigChannel+0x250>)
 8006878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a28      	ldr	r2, [pc, #160]	@ (8006920 <HAL_ADC_ConfigChannel+0x254>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10f      	bne.n	80068a4 <HAL_ADC_ConfigChannel+0x1d8>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b12      	cmp	r3, #18
 800688a:	d10b      	bne.n	80068a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <HAL_ADC_ConfigChannel+0x254>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d12b      	bne.n	8006906 <HAL_ADC_ConfigChannel+0x23a>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006924 <HAL_ADC_ConfigChannel+0x258>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <HAL_ADC_ConfigChannel+0x1f4>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b11      	cmp	r3, #17
 80068be:	d122      	bne.n	8006906 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a11      	ldr	r2, [pc, #68]	@ (8006924 <HAL_ADC_ConfigChannel+0x258>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d111      	bne.n	8006906 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80068e2:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <HAL_ADC_ConfigChannel+0x25c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a11      	ldr	r2, [pc, #68]	@ (800692c <HAL_ADC_ConfigChannel+0x260>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	0c9a      	lsrs	r2, r3, #18
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80068f8:	e002      	b.n	8006900 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f9      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	40012300 	.word	0x40012300
 8006920:	40012000 	.word	0x40012000
 8006924:	10000012 	.word	0x10000012
 8006928:	2000002c 	.word	0x2000002c
 800692c:	431bde83 	.word	0x431bde83

08006930 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006938:	4b79      	ldr	r3, [pc, #484]	@ (8006b20 <ADC_Init+0x1f0>)
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	431a      	orrs	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	021a      	lsls	r2, r3, #8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	4a58      	ldr	r2, [pc, #352]	@ (8006b24 <ADC_Init+0x1f4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d022      	beq.n	8006a0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6899      	ldr	r1, [r3, #8]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80069f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6899      	ldr	r1, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	e00f      	b.n	8006a2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0202 	bic.w	r2, r2, #2
 8006a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6899      	ldr	r1, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7e1b      	ldrb	r3, [r3, #24]
 8006a48:	005a      	lsls	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006a7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	3b01      	subs	r3, #1
 8006a88:	035a      	lsls	r2, r3, #13
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e007      	b.n	8006aa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aa2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	051a      	lsls	r2, r3, #20
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6899      	ldr	r1, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ae6:	025a      	lsls	r2, r3, #9
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6899      	ldr	r1, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	029a      	lsls	r2, r3, #10
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	609a      	str	r2, [r3, #8]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40012300 	.word	0x40012300
 8006b24:	0f000001 	.word	0x0f000001

08006b28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d13c      	bne.n	8006bbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d12b      	bne.n	8006bb4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d127      	bne.n	8006bb4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d119      	bne.n	8006bb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0220 	bic.w	r2, r2, #32
 8006b8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	f043 0201 	orr.w	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7fd f9b5 	bl	8003f24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006bba:	e00e      	b.n	8006bda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff fd75 	bl	80066b8 <HAL_ADC_ErrorCallback>
}
 8006bce:	e004      	b.n	8006bda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff fd4d 	bl	8006690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2240      	movs	r2, #64	@ 0x40
 8006c10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	f043 0204 	orr.w	r2, r3, #4
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff fd4a 	bl	80066b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c50:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <__NVIC_SetPriorityGrouping+0x44>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c72:	4a04      	ldr	r2, [pc, #16]	@ (8006c84 <__NVIC_SetPriorityGrouping+0x44>)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	60d3      	str	r3, [r2, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	e000ed00 	.word	0xe000ed00

08006c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	f003 0307 	and.w	r3, r3, #7
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	e000ed00 	.word	0xe000ed00

08006ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	db0b      	blt.n	8006cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	f003 021f 	and.w	r2, r3, #31
 8006cbc:	4907      	ldr	r1, [pc, #28]	@ (8006cdc <__NVIC_EnableIRQ+0x38>)
 8006cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8006cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	e000e100 	.word	0xe000e100

08006ce0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	db12      	blt.n	8006d18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	f003 021f 	and.w	r2, r3, #31
 8006cf8:	490a      	ldr	r1, [pc, #40]	@ (8006d24 <__NVIC_DisableIRQ+0x44>)
 8006cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	2001      	movs	r0, #1
 8006d02:	fa00 f202 	lsl.w	r2, r0, r2
 8006d06:	3320      	adds	r3, #32
 8006d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d0c:	f3bf 8f4f 	dsb	sy
}
 8006d10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006d12:	f3bf 8f6f 	isb	sy
}
 8006d16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	e000e100 	.word	0xe000e100

08006d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	6039      	str	r1, [r7, #0]
 8006d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db0a      	blt.n	8006d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	490c      	ldr	r1, [pc, #48]	@ (8006d74 <__NVIC_SetPriority+0x4c>)
 8006d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d46:	0112      	lsls	r2, r2, #4
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d50:	e00a      	b.n	8006d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4908      	ldr	r1, [pc, #32]	@ (8006d78 <__NVIC_SetPriority+0x50>)
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	3b04      	subs	r3, #4
 8006d60:	0112      	lsls	r2, r2, #4
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	440b      	add	r3, r1
 8006d66:	761a      	strb	r2, [r3, #24]
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	e000e100 	.word	0xe000e100
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	@ 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f1c3 0307 	rsb	r3, r3, #7
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	bf28      	it	cs
 8006d9a:	2304      	movcs	r3, #4
 8006d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3304      	adds	r3, #4
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d902      	bls.n	8006dac <NVIC_EncodePriority+0x30>
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	3b03      	subs	r3, #3
 8006daa:	e000      	b.n	8006dae <NVIC_EncodePriority+0x32>
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	fa01 f303 	lsl.w	r3, r1, r3
 8006dce:	43d9      	mvns	r1, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dd4:	4313      	orrs	r3, r2
         );
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3724      	adds	r7, #36	@ 0x24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006df4:	d301      	bcc.n	8006dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006df6:	2301      	movs	r3, #1
 8006df8:	e00f      	b.n	8006e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8006e24 <SysTick_Config+0x40>)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e02:	210f      	movs	r1, #15
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	f7ff ff8e 	bl	8006d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e0c:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <SysTick_Config+0x40>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e12:	4b04      	ldr	r3, [pc, #16]	@ (8006e24 <SysTick_Config+0x40>)
 8006e14:	2207      	movs	r2, #7
 8006e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	e000e010 	.word	0xe000e010

08006e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff05 	bl	8006c40 <__NVIC_SetPriorityGrouping>
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e50:	f7ff ff1a 	bl	8006c88 <__NVIC_GetPriorityGrouping>
 8006e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f7ff ff8e 	bl	8006d7c <NVIC_EncodePriority>
 8006e60:	4602      	mov	r2, r0
 8006e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff5d 	bl	8006d28 <__NVIC_SetPriority>
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ff0d 	bl	8006ca4 <__NVIC_EnableIRQ>
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	4603      	mov	r3, r0
 8006e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff ff1d 	bl	8006ce0 <__NVIC_DisableIRQ>
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ff94 	bl	8006de4 <SysTick_Config>
 8006ebc:	4603      	mov	r3, r0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ed4:	f7ff f944 	bl	8006160 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e099      	b.n	8007018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f04:	e00f      	b.n	8006f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f06:	f7ff f92b 	bl	8006160 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b05      	cmp	r3, #5
 8006f12:	d908      	bls.n	8006f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e078      	b.n	8007018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e8      	bne.n	8006f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4b38      	ldr	r3, [pc, #224]	@ (8007020 <HAL_DMA_Init+0x158>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d107      	bne.n	8006f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d117      	bne.n	8006fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fb5f 	bl	8007690 <DMA_CheckFifoParam>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2240      	movs	r2, #64	@ 0x40
 8006fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e016      	b.n	8007018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb16 	bl	8007624 <DMA_CalcBaseAndBitshift>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007000:	223f      	movs	r2, #63	@ 0x3f
 8007002:	409a      	lsls	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	f010803f 	.word	0xf010803f

08007024 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e050      	b.n	80070d8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d101      	bne.n	8007046 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007042:	2302      	movs	r3, #2
 8007044:	e048      	b.n	80070d8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2200      	movs	r2, #0
 800707c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2221      	movs	r2, #33	@ 0x21
 8007084:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 facc 	bl	8007624 <DMA_CalcBaseAndBitshift>
 800708c:	4603      	mov	r3, r0
 800708e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b8:	223f      	movs	r2, #63	@ 0x3f
 80070ba:	409a      	lsls	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_DMA_Start_IT+0x26>
 8007102:	2302      	movs	r3, #2
 8007104:	e040      	b.n	8007188 <HAL_DMA_Start_IT+0xa8>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b01      	cmp	r3, #1
 8007118:	d12f      	bne.n	800717a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2202      	movs	r2, #2
 800711e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fa4a 	bl	80075c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007138:	223f      	movs	r2, #63	@ 0x3f
 800713a:	409a      	lsls	r2, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0216 	orr.w	r2, r2, #22
 800714e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0208 	orr.w	r2, r2, #8
 8007166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e005      	b.n	8007186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007182:	2302      	movs	r3, #2
 8007184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800719e:	f7fe ffdf 	bl	8006160 <HAL_GetTick>
 80071a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d008      	beq.n	80071c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2280      	movs	r2, #128	@ 0x80
 80071b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e052      	b.n	8007268 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0216 	bic.w	r2, r2, #22
 80071d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <HAL_DMA_Abort+0x62>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0208 	bic.w	r2, r2, #8
 8007200:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007212:	e013      	b.n	800723c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007214:	f7fe ffa4 	bl	8006160 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b05      	cmp	r3, #5
 8007220:	d90c      	bls.n	800723c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2203      	movs	r2, #3
 800722c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e015      	b.n	8007268 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e4      	bne.n	8007214 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800724e:	223f      	movs	r2, #63	@ 0x3f
 8007250:	409a      	lsls	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d004      	beq.n	800728e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2280      	movs	r2, #128	@ 0x80
 8007288:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e00c      	b.n	80072a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2205      	movs	r2, #5
 8007292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0201 	bic.w	r2, r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072c0:	4b8e      	ldr	r3, [pc, #568]	@ (80074fc <HAL_DMA_IRQHandler+0x248>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007500 <HAL_DMA_IRQHandler+0x24c>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	0a9b      	lsrs	r3, r3, #10
 80072cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072de:	2208      	movs	r2, #8
 80072e0:	409a      	lsls	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01a      	beq.n	8007320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d013      	beq.n	8007320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0204 	bic.w	r2, r2, #4
 8007306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730c:	2208      	movs	r2, #8
 800730e:	409a      	lsls	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007318:	f043 0201 	orr.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007324:	2201      	movs	r2, #1
 8007326:	409a      	lsls	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d012      	beq.n	8007356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007342:	2201      	movs	r2, #1
 8007344:	409a      	lsls	r2, r3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734e:	f043 0202 	orr.w	r2, r3, #2
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	2204      	movs	r2, #4
 800735c:	409a      	lsls	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d012      	beq.n	800738c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007378:	2204      	movs	r2, #4
 800737a:	409a      	lsls	r2, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007384:	f043 0204 	orr.w	r2, r3, #4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007390:	2210      	movs	r2, #16
 8007392:	409a      	lsls	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d043      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d03c      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ae:	2210      	movs	r2, #16
 80073b0:	409a      	lsls	r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d018      	beq.n	80073f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d108      	bne.n	80073e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d024      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	e01f      	b.n	8007424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
 80073f4:	e016      	b.n	8007424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d107      	bne.n	8007414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0208 	bic.w	r2, r2, #8
 8007412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007428:	2220      	movs	r2, #32
 800742a:	409a      	lsls	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 808f 	beq.w	8007554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8087 	beq.w	8007554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800744a:	2220      	movs	r2, #32
 800744c:	409a      	lsls	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b05      	cmp	r3, #5
 800745c:	d136      	bne.n	80074cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0216 	bic.w	r2, r2, #22
 800746c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800747c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <HAL_DMA_IRQHandler+0x1da>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0208 	bic.w	r2, r2, #8
 800749c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a2:	223f      	movs	r2, #63	@ 0x3f
 80074a4:	409a      	lsls	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d07e      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
        }
        return;
 80074ca:	e079      	b.n	80075c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01d      	beq.n	8007516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d031      	beq.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
 80074f8:	e02c      	b.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
 80074fa:	bf00      	nop
 80074fc:	2000002c 	.word	0x2000002c
 8007500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d023      	beq.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	e01e      	b.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10f      	bne.n	8007544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0210 	bic.w	r2, r2, #16
 8007532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007558:	2b00      	cmp	r3, #0
 800755a:	d032      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d022      	beq.n	80075ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2205      	movs	r2, #5
 800756c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3301      	adds	r3, #1
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d307      	bcc.n	800759c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f2      	bne.n	8007580 <HAL_DMA_IRQHandler+0x2cc>
 800759a:	e000      	b.n	800759e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800759c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
 80075be:	e000      	b.n	80075c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80075c0:	bf00      	nop
    }
  }
}
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b40      	cmp	r3, #64	@ 0x40
 80075f4:	d108      	bne.n	8007608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007606:	e007      	b.n	8007618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]
}
 8007618:	bf00      	nop
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3b10      	subs	r3, #16
 8007634:	4a14      	ldr	r2, [pc, #80]	@ (8007688 <DMA_CalcBaseAndBitshift+0x64>)
 8007636:	fba2 2303 	umull	r2, r3, r2, r3
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800763e:	4a13      	ldr	r2, [pc, #76]	@ (800768c <DMA_CalcBaseAndBitshift+0x68>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d909      	bls.n	8007666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800765a:	f023 0303 	bic.w	r3, r3, #3
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	659a      	str	r2, [r3, #88]	@ 0x58
 8007664:	e007      	b.n	8007676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	aaaaaaab 	.word	0xaaaaaaab
 800768c:	0801208c 	.word	0x0801208c

08007690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d11f      	bne.n	80076ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d856      	bhi.n	800775e <DMA_CheckFifoParam+0xce>
 80076b0:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <DMA_CheckFifoParam+0x28>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076db 	.word	0x080076db
 80076c0:	080076c9 	.word	0x080076c9
 80076c4:	0800775f 	.word	0x0800775f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d046      	beq.n	8007762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d8:	e043      	b.n	8007762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076e2:	d140      	bne.n	8007766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e8:	e03d      	b.n	8007766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f2:	d121      	bne.n	8007738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d837      	bhi.n	800776a <DMA_CheckFifoParam+0xda>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <DMA_CheckFifoParam+0x70>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007711 	.word	0x08007711
 8007704:	08007717 	.word	0x08007717
 8007708:	08007711 	.word	0x08007711
 800770c:	08007729 	.word	0x08007729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	e030      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d025      	beq.n	800776e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007726:	e022      	b.n	800776e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007730:	d11f      	bne.n	8007772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007736:	e01c      	b.n	8007772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d903      	bls.n	8007746 <DMA_CheckFifoParam+0xb6>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d003      	beq.n	800774c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007744:	e018      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
      break;
 800774a:	e015      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e00b      	b.n	8007776 <DMA_CheckFifoParam+0xe6>
      break;
 800775e:	bf00      	nop
 8007760:	e00a      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 8007762:	bf00      	nop
 8007764:	e008      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 8007766:	bf00      	nop
 8007768:	e006      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 800776a:	bf00      	nop
 800776c:	e004      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 800776e:	bf00      	nop
 8007770:	e002      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;   
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 8007776:	bf00      	nop
    }
  } 
  
  return status; 
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007788:	b480      	push	{r7}
 800778a:	b089      	sub	sp, #36	@ 0x24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800779a:	2300      	movs	r3, #0
 800779c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	e165      	b.n	8007a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077a4:	2201      	movs	r2, #1
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4013      	ands	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	429a      	cmp	r2, r3
 80077be:	f040 8154 	bne.w	8007a6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d005      	beq.n	80077da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d130      	bne.n	800783c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	2203      	movs	r2, #3
 80077e6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ea:	43db      	mvns	r3, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4013      	ands	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	fa02 f303 	lsl.w	r3, r2, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4313      	orrs	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007810:	2201      	movs	r2, #1
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	43db      	mvns	r3, r3
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4013      	ands	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	091b      	lsrs	r3, r3, #4
 8007826:	f003 0201 	and.w	r2, r3, #1
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	fa02 f303 	lsl.w	r3, r2, r3
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	4313      	orrs	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	2b03      	cmp	r3, #3
 8007846:	d017      	beq.n	8007878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	2203      	movs	r2, #3
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d123      	bne.n	80078cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	08da      	lsrs	r2, r3, #3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3208      	adds	r2, #8
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	220f      	movs	r2, #15
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	08da      	lsrs	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3208      	adds	r2, #8
 80078c6:	69b9      	ldr	r1, [r7, #24]
 80078c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	2203      	movs	r2, #3
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4013      	ands	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 0203 	and.w	r2, r3, #3
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80ae 	beq.w	8007a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	4b5d      	ldr	r3, [pc, #372]	@ (8007a88 <HAL_GPIO_Init+0x300>)
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	4a5c      	ldr	r2, [pc, #368]	@ (8007a88 <HAL_GPIO_Init+0x300>)
 8007918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800791c:	6453      	str	r3, [r2, #68]	@ 0x44
 800791e:	4b5a      	ldr	r3, [pc, #360]	@ (8007a88 <HAL_GPIO_Init+0x300>)
 8007920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800792a:	4a58      	ldr	r2, [pc, #352]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	3302      	adds	r3, #2
 8007932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	220f      	movs	r2, #15
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a4f      	ldr	r2, [pc, #316]	@ (8007a90 <HAL_GPIO_Init+0x308>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d025      	beq.n	80079a2 <HAL_GPIO_Init+0x21a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a4e      	ldr	r2, [pc, #312]	@ (8007a94 <HAL_GPIO_Init+0x30c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01f      	beq.n	800799e <HAL_GPIO_Init+0x216>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a4d      	ldr	r2, [pc, #308]	@ (8007a98 <HAL_GPIO_Init+0x310>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d019      	beq.n	800799a <HAL_GPIO_Init+0x212>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a4c      	ldr	r2, [pc, #304]	@ (8007a9c <HAL_GPIO_Init+0x314>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_GPIO_Init+0x20e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a4b      	ldr	r2, [pc, #300]	@ (8007aa0 <HAL_GPIO_Init+0x318>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00d      	beq.n	8007992 <HAL_GPIO_Init+0x20a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a4a      	ldr	r2, [pc, #296]	@ (8007aa4 <HAL_GPIO_Init+0x31c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d007      	beq.n	800798e <HAL_GPIO_Init+0x206>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a49      	ldr	r2, [pc, #292]	@ (8007aa8 <HAL_GPIO_Init+0x320>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d101      	bne.n	800798a <HAL_GPIO_Init+0x202>
 8007986:	2306      	movs	r3, #6
 8007988:	e00c      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 800798a:	2307      	movs	r3, #7
 800798c:	e00a      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 800798e:	2305      	movs	r3, #5
 8007990:	e008      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 8007992:	2304      	movs	r3, #4
 8007994:	e006      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 8007996:	2303      	movs	r3, #3
 8007998:	e004      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 800799a:	2302      	movs	r3, #2
 800799c:	e002      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <HAL_GPIO_Init+0x21c>
 80079a2:	2300      	movs	r3, #0
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	f002 0203 	and.w	r2, r2, #3
 80079aa:	0092      	lsls	r2, r2, #2
 80079ac:	4093      	lsls	r3, r2
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079b4:	4935      	ldr	r1, [pc, #212]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	089b      	lsrs	r3, r3, #2
 80079ba:	3302      	adds	r3, #2
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079c2:	4b3a      	ldr	r3, [pc, #232]	@ (8007aac <HAL_GPIO_Init+0x324>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	43db      	mvns	r3, r3
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079e6:	4a31      	ldr	r2, [pc, #196]	@ (8007aac <HAL_GPIO_Init+0x324>)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079ec:	4b2f      	ldr	r3, [pc, #188]	@ (8007aac <HAL_GPIO_Init+0x324>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	43db      	mvns	r3, r3
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	4013      	ands	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a10:	4a26      	ldr	r2, [pc, #152]	@ (8007aac <HAL_GPIO_Init+0x324>)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a16:	4b25      	ldr	r3, [pc, #148]	@ (8007aac <HAL_GPIO_Init+0x324>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007aac <HAL_GPIO_Init+0x324>)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a40:	4b1a      	ldr	r3, [pc, #104]	@ (8007aac <HAL_GPIO_Init+0x324>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a64:	4a11      	ldr	r2, [pc, #68]	@ (8007aac <HAL_GPIO_Init+0x324>)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b0f      	cmp	r3, #15
 8007a74:	f67f ae96 	bls.w	80077a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	3724      	adds	r7, #36	@ 0x24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	40013800 	.word	0x40013800
 8007a90:	40020000 	.word	0x40020000
 8007a94:	40020400 	.word	0x40020400
 8007a98:	40020800 	.word	0x40020800
 8007a9c:	40020c00 	.word	0x40020c00
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	40021400 	.word	0x40021400
 8007aa8:	40021800 	.word	0x40021800
 8007aac:	40013c00 	.word	0x40013c00

08007ab0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	e0c7      	b.n	8007c5c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007acc:	2201      	movs	r2, #1
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4013      	ands	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	f040 80b7 	bne.w	8007c56 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ae8:	4a62      	ldr	r2, [pc, #392]	@ (8007c74 <HAL_GPIO_DeInit+0x1c4>)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	3302      	adds	r3, #2
 8007af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	220f      	movs	r2, #15
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4013      	ands	r3, r2
 8007b08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8007c78 <HAL_GPIO_DeInit+0x1c8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d025      	beq.n	8007b5e <HAL_GPIO_DeInit+0xae>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a59      	ldr	r2, [pc, #356]	@ (8007c7c <HAL_GPIO_DeInit+0x1cc>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d01f      	beq.n	8007b5a <HAL_GPIO_DeInit+0xaa>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a58      	ldr	r2, [pc, #352]	@ (8007c80 <HAL_GPIO_DeInit+0x1d0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d019      	beq.n	8007b56 <HAL_GPIO_DeInit+0xa6>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a57      	ldr	r2, [pc, #348]	@ (8007c84 <HAL_GPIO_DeInit+0x1d4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d013      	beq.n	8007b52 <HAL_GPIO_DeInit+0xa2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a56      	ldr	r2, [pc, #344]	@ (8007c88 <HAL_GPIO_DeInit+0x1d8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00d      	beq.n	8007b4e <HAL_GPIO_DeInit+0x9e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a55      	ldr	r2, [pc, #340]	@ (8007c8c <HAL_GPIO_DeInit+0x1dc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d007      	beq.n	8007b4a <HAL_GPIO_DeInit+0x9a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a54      	ldr	r2, [pc, #336]	@ (8007c90 <HAL_GPIO_DeInit+0x1e0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d101      	bne.n	8007b46 <HAL_GPIO_DeInit+0x96>
 8007b42:	2306      	movs	r3, #6
 8007b44:	e00c      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b46:	2307      	movs	r3, #7
 8007b48:	e00a      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b4a:	2305      	movs	r3, #5
 8007b4c:	e008      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b4e:	2304      	movs	r3, #4
 8007b50:	e006      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b52:	2303      	movs	r3, #3
 8007b54:	e004      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e002      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <HAL_GPIO_DeInit+0xb0>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	f002 0203 	and.w	r2, r2, #3
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	4093      	lsls	r3, r2
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d132      	bne.n	8007bd6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b70:	4b48      	ldr	r3, [pc, #288]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	43db      	mvns	r3, r3
 8007b78:	4946      	ldr	r1, [pc, #280]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b7e:	4b45      	ldr	r3, [pc, #276]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	43db      	mvns	r3, r3
 8007b86:	4943      	ldr	r1, [pc, #268]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b8c:	4b41      	ldr	r3, [pc, #260]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	43db      	mvns	r3, r3
 8007b94:	493f      	ldr	r1, [pc, #252]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b96:	4013      	ands	r3, r2
 8007b98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	493c      	ldr	r1, [pc, #240]	@ (8007c94 <HAL_GPIO_DeInit+0x1e4>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	220f      	movs	r2, #15
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007c74 <HAL_GPIO_DeInit+0x1c4>)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	089b      	lsrs	r3, r3, #2
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	43da      	mvns	r2, r3
 8007bc8:	482a      	ldr	r0, [pc, #168]	@ (8007c74 <HAL_GPIO_DeInit+0x1c4>)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	089b      	lsrs	r3, r3, #2
 8007bce:	400a      	ands	r2, r1
 8007bd0:	3302      	adds	r3, #2
 8007bd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	2103      	movs	r1, #3
 8007be0:	fa01 f303 	lsl.w	r3, r1, r3
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	08da      	lsrs	r2, r3, #3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3208      	adds	r2, #8
 8007bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	220f      	movs	r2, #15
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	43db      	mvns	r3, r3
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	08d2      	lsrs	r2, r2, #3
 8007c0c:	4019      	ands	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3208      	adds	r2, #8
 8007c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	2103      	movs	r1, #3
 8007c20:	fa01 f303 	lsl.w	r3, r1, r3
 8007c24:	43db      	mvns	r3, r3
 8007c26:	401a      	ands	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	2101      	movs	r1, #1
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	fa01 f303 	lsl.w	r3, r1, r3
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	401a      	ands	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	2103      	movs	r1, #3
 8007c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	401a      	ands	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2b0f      	cmp	r3, #15
 8007c60:	f67f af34 	bls.w	8007acc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40013800 	.word	0x40013800
 8007c78:	40020000 	.word	0x40020000
 8007c7c:	40020400 	.word	0x40020400
 8007c80:	40020800 	.word	0x40020800
 8007c84:	40020c00 	.word	0x40020c00
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40021400 	.word	0x40021400
 8007c90:	40021800 	.word	0x40021800
 8007c94:	40013c00 	.word	0x40013c00

08007c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ca8:	787b      	ldrb	r3, [r7, #1]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cae:	887a      	ldrh	r2, [r7, #2]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007cb4:	e003      	b.n	8007cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007cb6:	887b      	ldrh	r3, [r7, #2]
 8007cb8:	041a      	lsls	r2, r3, #16
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	619a      	str	r2, [r3, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007cd6:	4b08      	ldr	r3, [pc, #32]	@ (8007cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d006      	beq.n	8007cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ce2:	4a05      	ldr	r2, [pc, #20]	@ (8007cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fc f8e0 	bl	8003eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	40013c00 	.word	0x40013c00

08007cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e12b      	b.n	8007f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fd fe4c 	bl	80059c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	@ 0x24
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d60:	f001 f912 	bl	8008f88 <HAL_RCC_GetPCLK1Freq>
 8007d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4a81      	ldr	r2, [pc, #516]	@ (8007f70 <HAL_I2C_Init+0x274>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d807      	bhi.n	8007d80 <HAL_I2C_Init+0x84>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a80      	ldr	r2, [pc, #512]	@ (8007f74 <HAL_I2C_Init+0x278>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	bf94      	ite	ls
 8007d78:	2301      	movls	r3, #1
 8007d7a:	2300      	movhi	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	e006      	b.n	8007d8e <HAL_I2C_Init+0x92>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4a7d      	ldr	r2, [pc, #500]	@ (8007f78 <HAL_I2C_Init+0x27c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bf94      	ite	ls
 8007d88:	2301      	movls	r3, #1
 8007d8a:	2300      	movhi	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e0e7      	b.n	8007f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a78      	ldr	r2, [pc, #480]	@ (8007f7c <HAL_I2C_Init+0x280>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	0c9b      	lsrs	r3, r3, #18
 8007da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8007f70 <HAL_I2C_Init+0x274>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d802      	bhi.n	8007dd0 <HAL_I2C_Init+0xd4>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	e009      	b.n	8007de4 <HAL_I2C_Init+0xe8>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007dd6:	fb02 f303 	mul.w	r3, r2, r3
 8007dda:	4a69      	ldr	r2, [pc, #420]	@ (8007f80 <HAL_I2C_Init+0x284>)
 8007ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8007de0:	099b      	lsrs	r3, r3, #6
 8007de2:	3301      	adds	r3, #1
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6812      	ldr	r2, [r2, #0]
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007df6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	495c      	ldr	r1, [pc, #368]	@ (8007f70 <HAL_I2C_Init+0x274>)
 8007e00:	428b      	cmp	r3, r1
 8007e02:	d819      	bhi.n	8007e38 <HAL_I2C_Init+0x13c>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	1e59      	subs	r1, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e12:	1c59      	adds	r1, r3, #1
 8007e14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007e18:	400b      	ands	r3, r1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <HAL_I2C_Init+0x138>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1e59      	subs	r1, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e32:	e051      	b.n	8007ed8 <HAL_I2C_Init+0x1dc>
 8007e34:	2304      	movs	r3, #4
 8007e36:	e04f      	b.n	8007ed8 <HAL_I2C_Init+0x1dc>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d111      	bne.n	8007e64 <HAL_I2C_Init+0x168>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	1e58      	subs	r0, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6859      	ldr	r1, [r3, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	440b      	add	r3, r1
 8007e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e52:	3301      	adds	r3, #1
 8007e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bf0c      	ite	eq
 8007e5c:	2301      	moveq	r3, #1
 8007e5e:	2300      	movne	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	e012      	b.n	8007e8a <HAL_I2C_Init+0x18e>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1e58      	subs	r0, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6859      	ldr	r1, [r3, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	0099      	lsls	r1, r3, #2
 8007e74:	440b      	add	r3, r1
 8007e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_I2C_Init+0x196>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e022      	b.n	8007ed8 <HAL_I2C_Init+0x1dc>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10e      	bne.n	8007eb8 <HAL_I2C_Init+0x1bc>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1e58      	subs	r0, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6859      	ldr	r1, [r3, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	440b      	add	r3, r1
 8007ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eac:	3301      	adds	r3, #1
 8007eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eb6:	e00f      	b.n	8007ed8 <HAL_I2C_Init+0x1dc>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	1e58      	subs	r0, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6859      	ldr	r1, [r3, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	0099      	lsls	r1, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	6809      	ldr	r1, [r1, #0]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69da      	ldr	r2, [r3, #28]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007f06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6911      	ldr	r1, [r2, #16]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	68d2      	ldr	r2, [r2, #12]
 8007f12:	4311      	orrs	r1, r2
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695a      	ldr	r2, [r3, #20]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	000186a0 	.word	0x000186a0
 8007f74:	001e847f 	.word	0x001e847f
 8007f78:	003d08ff 	.word	0x003d08ff
 8007f7c:	431bde83 	.word	0x431bde83
 8007f80:	10624dd3 	.word	0x10624dd3

08007f84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e021      	b.n	8007fda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2224      	movs	r2, #36	@ 0x24
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fd fda6 	bl	8005b00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	4608      	mov	r0, r1
 8007fee:	4611      	mov	r1, r2
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	817b      	strh	r3, [r7, #10]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	813b      	strh	r3, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ffe:	f7fe f8af 	bl	8006160 <HAL_GetTick>
 8008002:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b20      	cmp	r3, #32
 800800e:	f040 80d9 	bne.w	80081c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	2319      	movs	r3, #25
 8008018:	2201      	movs	r2, #1
 800801a:	496d      	ldr	r1, [pc, #436]	@ (80081d0 <HAL_I2C_Mem_Write+0x1ec>)
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fc8b 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008028:	2302      	movs	r3, #2
 800802a:	e0cc      	b.n	80081c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_I2C_Mem_Write+0x56>
 8008036:	2302      	movs	r3, #2
 8008038:	e0c5      	b.n	80081c6 <HAL_I2C_Mem_Write+0x1e2>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b01      	cmp	r3, #1
 800804e:	d007      	beq.n	8008060 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800806e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2221      	movs	r2, #33	@ 0x21
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2240      	movs	r2, #64	@ 0x40
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a4d      	ldr	r2, [pc, #308]	@ (80081d4 <HAL_I2C_Mem_Write+0x1f0>)
 80080a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080a2:	88f8      	ldrh	r0, [r7, #6]
 80080a4:	893a      	ldrh	r2, [r7, #8]
 80080a6:	8979      	ldrh	r1, [r7, #10]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4603      	mov	r3, r0
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fac2 	bl	800863c <I2C_RequestMemoryWrite>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d052      	beq.n	8008164 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e081      	b.n	80081c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fd50 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d107      	bne.n	80080ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e06b      	b.n	80081c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	781a      	ldrb	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b04      	cmp	r3, #4
 800812a:	d11b      	bne.n	8008164 <HAL_I2C_Mem_Write+0x180>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008130:	2b00      	cmp	r3, #0
 8008132:	d017      	beq.n	8008164 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800814e:	3b01      	subs	r3, #1
 8008150:	b29a      	uxth	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1aa      	bne.n	80080c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 fd43 	bl	8008bfc <I2C_WaitOnBTFFlagUntilTimeout>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00d      	beq.n	8008198 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008180:	2b04      	cmp	r3, #4
 8008182:	d107      	bne.n	8008194 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008192:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e016      	b.n	80081c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e000      	b.n	80081c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80081c4:	2302      	movs	r3, #2
  }
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	00100002 	.word	0x00100002
 80081d4:	ffff0000 	.word	0xffff0000

080081d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08c      	sub	sp, #48	@ 0x30
 80081dc:	af02      	add	r7, sp, #8
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	4603      	mov	r3, r0
 80081e8:	817b      	strh	r3, [r7, #10]
 80081ea:	460b      	mov	r3, r1
 80081ec:	813b      	strh	r3, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081f2:	f7fd ffb5 	bl	8006160 <HAL_GetTick>
 80081f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b20      	cmp	r3, #32
 8008202:	f040 8214 	bne.w	800862e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	2319      	movs	r3, #25
 800820c:	2201      	movs	r2, #1
 800820e:	497b      	ldr	r1, [pc, #492]	@ (80083fc <HAL_I2C_Mem_Read+0x224>)
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 fb91 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
 800821e:	e207      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_I2C_Mem_Read+0x56>
 800822a:	2302      	movs	r3, #2
 800822c:	e200      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b01      	cmp	r3, #1
 8008242:	d007      	beq.n	8008254 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2222      	movs	r2, #34	@ 0x22
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2240      	movs	r2, #64	@ 0x40
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800828a:	b29a      	uxth	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a5b      	ldr	r2, [pc, #364]	@ (8008400 <HAL_I2C_Mem_Read+0x228>)
 8008294:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008296:	88f8      	ldrh	r0, [r7, #6]
 8008298:	893a      	ldrh	r2, [r7, #8]
 800829a:	8979      	ldrh	r1, [r7, #10]
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	4603      	mov	r3, r0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fa5e 	bl	8008768 <I2C_RequestMemoryRead>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e1bc      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d113      	bne.n	80082e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082be:	2300      	movs	r3, #0
 80082c0:	623b      	str	r3, [r7, #32]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	623b      	str	r3, [r7, #32]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	623b      	str	r3, [r7, #32]
 80082d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e190      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d11b      	bne.n	8008326 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e170      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800832a:	2b02      	cmp	r3, #2
 800832c:	d11b      	bne.n	8008366 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800833c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800834c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	e150      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800837c:	e144      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008382:	2b03      	cmp	r3, #3
 8008384:	f200 80f1 	bhi.w	800856a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800838c:	2b01      	cmp	r3, #1
 800838e:	d123      	bne.n	80083d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fc79 	bl	8008c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e145      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083d6:	e117      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d14e      	bne.n	800847e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e6:	2200      	movs	r2, #0
 80083e8:	4906      	ldr	r1, [pc, #24]	@ (8008404 <HAL_I2C_Mem_Read+0x22c>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 faa4 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d008      	beq.n	8008408 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e11a      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
 80083fa:	bf00      	nop
 80083fc:	00100002 	.word	0x00100002
 8008400:	ffff0000 	.word	0xffff0000
 8008404:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008434:	3b01      	subs	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008440:	b29b      	uxth	r3, r3
 8008442:	3b01      	subs	r3, #1
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800847c:	e0c4      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008484:	2200      	movs	r2, #0
 8008486:	496c      	ldr	r1, [pc, #432]	@ (8008638 <HAL_I2C_Mem_Read+0x460>)
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fa55 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e0cb      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	2200      	movs	r2, #0
 80084e2:	4955      	ldr	r1, [pc, #340]	@ (8008638 <HAL_I2C_Mem_Read+0x460>)
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fa27 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e09d      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008568:	e04e      	b.n	8008608 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fb8c 	bl	8008c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e058      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008588:	b2d2      	uxtb	r2, r2
 800858a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800859a:	3b01      	subs	r3, #1
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d124      	bne.n	8008608 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d107      	bne.n	80085d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800860c:	2b00      	cmp	r3, #0
 800860e:	f47f aeb6 	bne.w	800837e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e000      	b.n	8008630 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800862e:	2302      	movs	r3, #2
  }
}
 8008630:	4618      	mov	r0, r3
 8008632:	3728      	adds	r7, #40	@ 0x28
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	00010004 	.word	0x00010004

0800863c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af02      	add	r7, sp, #8
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4603      	mov	r3, r0
 800864c:	817b      	strh	r3, [r7, #10]
 800864e:	460b      	mov	r3, r1
 8008650:	813b      	strh	r3, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	2200      	movs	r2, #0
 800866e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f960 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00d      	beq.n	800869a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800868c:	d103      	bne.n	8008696 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008694:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e05f      	b.n	800875a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800869a:	897b      	ldrh	r3, [r7, #10]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80086a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	6a3a      	ldr	r2, [r7, #32]
 80086ae:	492d      	ldr	r1, [pc, #180]	@ (8008764 <I2C_RequestMemoryWrite+0x128>)
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f9bb 	bl	8008a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e04c      	b.n	800875a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d8:	6a39      	ldr	r1, [r7, #32]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 fa46 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00d      	beq.n	8008702 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d107      	bne.n	80086fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e02b      	b.n	800875a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d105      	bne.n	8008714 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008708:	893b      	ldrh	r3, [r7, #8]
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	611a      	str	r2, [r3, #16]
 8008712:	e021      	b.n	8008758 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008714:	893b      	ldrh	r3, [r7, #8]
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b29b      	uxth	r3, r3
 800871a:	b2da      	uxtb	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008724:	6a39      	ldr	r1, [r7, #32]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fa20 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	2b04      	cmp	r3, #4
 8008738:	d107      	bne.n	800874a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008748:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e005      	b.n	800875a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800874e:	893b      	ldrh	r3, [r7, #8]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	00010002 	.word	0x00010002

08008768 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	461a      	mov	r2, r3
 8008776:	4603      	mov	r3, r0
 8008778:	817b      	strh	r3, [r7, #10]
 800877a:	460b      	mov	r3, r1
 800877c:	813b      	strh	r3, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008790:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f8c2 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c8:	d103      	bne.n	80087d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e0aa      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087d6:	897b      	ldrh	r3, [r7, #10]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80087e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	6a3a      	ldr	r2, [r7, #32]
 80087ea:	4952      	ldr	r1, [pc, #328]	@ (8008934 <I2C_RequestMemoryRead+0x1cc>)
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f91d 	bl	8008a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e097      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008814:	6a39      	ldr	r1, [r7, #32]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f9a8 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00d      	beq.n	800883e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008826:	2b04      	cmp	r3, #4
 8008828:	d107      	bne.n	800883a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e076      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d105      	bne.n	8008850 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008844:	893b      	ldrh	r3, [r7, #8]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	611a      	str	r2, [r3, #16]
 800884e:	e021      	b.n	8008894 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008850:	893b      	ldrh	r3, [r7, #8]
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	b29b      	uxth	r3, r3
 8008856:	b2da      	uxtb	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800885e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008860:	6a39      	ldr	r1, [r7, #32]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f982 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00d      	beq.n	800888a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008872:	2b04      	cmp	r3, #4
 8008874:	d107      	bne.n	8008886 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e050      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800888a:	893b      	ldrh	r3, [r7, #8]
 800888c:	b2da      	uxtb	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008896:	6a39      	ldr	r1, [r7, #32]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 f967 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00d      	beq.n	80088c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d107      	bne.n	80088bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e035      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f82b 	bl	8008938 <I2C_WaitOnFlagUntilTimeout>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f6:	d103      	bne.n	8008900 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e013      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008904:	897b      	ldrh	r3, [r7, #10]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f043 0301 	orr.w	r3, r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	6a3a      	ldr	r2, [r7, #32]
 8008918:	4906      	ldr	r1, [pc, #24]	@ (8008934 <I2C_RequestMemoryRead+0x1cc>)
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f886 	bl	8008a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	00010002 	.word	0x00010002

08008938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008948:	e048      	b.n	80089dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d044      	beq.n	80089dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008952:	f7fd fc05 	bl	8006160 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d302      	bcc.n	8008968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d139      	bne.n	80089dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10d      	bne.n	800898e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	43da      	mvns	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	bf0c      	ite	eq
 8008984:	2301      	moveq	r3, #1
 8008986:	2300      	movne	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	e00c      	b.n	80089a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	43da      	mvns	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4013      	ands	r3, r2
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d116      	bne.n	80089dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c8:	f043 0220 	orr.w	r2, r3, #32
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e023      	b.n	8008a24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d10d      	bne.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0xca>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	43da      	mvns	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4013      	ands	r3, r2
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	e00c      	b.n	8008a1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	43da      	mvns	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d093      	beq.n	800894a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a3a:	e071      	b.n	8008b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a4a:	d123      	bne.n	8008a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	f043 0204 	orr.w	r2, r3, #4
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e067      	b.n	8008b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d041      	beq.n	8008b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9c:	f7fd fb60 	bl	8006160 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d136      	bne.n	8008b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d10c      	bne.n	8008ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	43da      	mvns	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bf14      	ite	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	2300      	moveq	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	e00b      	b.n	8008aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	43da      	mvns	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf14      	ite	ne
 8008ae8:	2301      	movne	r3, #1
 8008aea:	2300      	moveq	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d016      	beq.n	8008b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0c:	f043 0220 	orr.w	r2, r3, #32
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e021      	b.n	8008b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d10c      	bne.n	8008b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	43da      	mvns	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4013      	ands	r3, r2
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e00b      	b.n	8008b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	43da      	mvns	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bf14      	ite	ne
 8008b56:	2301      	movne	r3, #1
 8008b58:	2300      	moveq	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f af6d 	bne.w	8008a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b78:	e034      	b.n	8008be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 f8e3 	bl	8008d46 <I2C_IsAcknowledgeFailed>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e034      	b.n	8008bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d028      	beq.n	8008be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b92:	f7fd fae5 	bl	8006160 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d11d      	bne.n	8008be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb2:	2b80      	cmp	r3, #128	@ 0x80
 8008bb4:	d016      	beq.n	8008be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd0:	f043 0220 	orr.w	r2, r3, #32
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e007      	b.n	8008bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bee:	2b80      	cmp	r3, #128	@ 0x80
 8008bf0:	d1c3      	bne.n	8008b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c08:	e034      	b.n	8008c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 f89b 	bl	8008d46 <I2C_IsAcknowledgeFailed>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e034      	b.n	8008c84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d028      	beq.n	8008c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c22:	f7fd fa9d 	bl	8006160 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d302      	bcc.n	8008c38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d11d      	bne.n	8008c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d016      	beq.n	8008c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c60:	f043 0220 	orr.w	r2, r3, #32
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e007      	b.n	8008c84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d1c3      	bne.n	8008c0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c98:	e049      	b.n	8008d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d119      	bne.n	8008cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0210 	mvn.w	r2, #16
 8008cb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e030      	b.n	8008d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cdc:	f7fd fa40 	bl	8006160 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d302      	bcc.n	8008cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d11d      	bne.n	8008d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cfc:	2b40      	cmp	r3, #64	@ 0x40
 8008cfe:	d016      	beq.n	8008d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1a:	f043 0220 	orr.w	r2, r3, #32
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e007      	b.n	8008d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d38:	2b40      	cmp	r3, #64	@ 0x40
 8008d3a:	d1ae      	bne.n	8008c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d5c:	d11b      	bne.n	8008d96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	f043 0204 	orr.w	r2, r3, #4
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e000      	b.n	8008d98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e0cc      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008db8:	4b68      	ldr	r3, [pc, #416]	@ (8008f5c <HAL_RCC_ClockConfig+0x1b8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 030f 	and.w	r3, r3, #15
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d90c      	bls.n	8008de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dc6:	4b65      	ldr	r3, [pc, #404]	@ (8008f5c <HAL_RCC_ClockConfig+0x1b8>)
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dce:	4b63      	ldr	r3, [pc, #396]	@ (8008f5c <HAL_RCC_ClockConfig+0x1b8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d001      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0b8      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d020      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008df8:	4b59      	ldr	r3, [pc, #356]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	4a58      	ldr	r2, [pc, #352]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0308 	and.w	r3, r3, #8
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d005      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e10:	4b53      	ldr	r3, [pc, #332]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	4a52      	ldr	r2, [pc, #328]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e1c:	4b50      	ldr	r3, [pc, #320]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	494d      	ldr	r1, [pc, #308]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d044      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d107      	bne.n	8008e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e42:	4b47      	ldr	r3, [pc, #284]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d119      	bne.n	8008e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e07f      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d003      	beq.n	8008e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d107      	bne.n	8008e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e62:	4b3f      	ldr	r3, [pc, #252]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e06f      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e72:	4b3b      	ldr	r3, [pc, #236]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e067      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e82:	4b37      	ldr	r3, [pc, #220]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f023 0203 	bic.w	r2, r3, #3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	4934      	ldr	r1, [pc, #208]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e94:	f7fd f964 	bl	8006160 <HAL_GetTick>
 8008e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e9a:	e00a      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e9c:	f7fd f960 	bl	8006160 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e04f      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 020c 	and.w	r2, r3, #12
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d1eb      	bne.n	8008e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ec4:	4b25      	ldr	r3, [pc, #148]	@ (8008f5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d20c      	bcs.n	8008eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ed2:	4b22      	ldr	r3, [pc, #136]	@ (8008f5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eda:	4b20      	ldr	r3, [pc, #128]	@ (8008f5c <HAL_RCC_ClockConfig+0x1b8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 030f 	and.w	r3, r3, #15
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d001      	beq.n	8008eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e032      	b.n	8008f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ef8:	4b19      	ldr	r3, [pc, #100]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	4916      	ldr	r1, [pc, #88]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f16:	4b12      	ldr	r3, [pc, #72]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	490e      	ldr	r1, [pc, #56]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f2a:	f000 f855 	bl	8008fd8 <HAL_RCC_GetSysClockFreq>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b0b      	ldr	r3, [pc, #44]	@ (8008f60 <HAL_RCC_ClockConfig+0x1bc>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	091b      	lsrs	r3, r3, #4
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	490a      	ldr	r1, [pc, #40]	@ (8008f64 <HAL_RCC_ClockConfig+0x1c0>)
 8008f3c:	5ccb      	ldrb	r3, [r1, r3]
 8008f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f42:	4a09      	ldr	r2, [pc, #36]	@ (8008f68 <HAL_RCC_ClockConfig+0x1c4>)
 8008f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008f46:	4b09      	ldr	r3, [pc, #36]	@ (8008f6c <HAL_RCC_ClockConfig+0x1c8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fd f8c4 	bl	80060d8 <HAL_InitTick>

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40023c00 	.word	0x40023c00
 8008f60:	40023800 	.word	0x40023800
 8008f64:	08012074 	.word	0x08012074
 8008f68:	2000002c 	.word	0x2000002c
 8008f6c:	20000030 	.word	0x20000030

08008f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f74:	4b03      	ldr	r3, [pc, #12]	@ (8008f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f76:	681b      	ldr	r3, [r3, #0]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2000002c 	.word	0x2000002c

08008f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f8c:	f7ff fff0 	bl	8008f70 <HAL_RCC_GetHCLKFreq>
 8008f90:	4602      	mov	r2, r0
 8008f92:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	0a9b      	lsrs	r3, r3, #10
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	4903      	ldr	r1, [pc, #12]	@ (8008fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f9e:	5ccb      	ldrb	r3, [r1, r3]
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	08012084 	.word	0x08012084

08008fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fb4:	f7ff ffdc 	bl	8008f70 <HAL_RCC_GetHCLKFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	0b5b      	lsrs	r3, r3, #13
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	4903      	ldr	r1, [pc, #12]	@ (8008fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	08012084 	.word	0x08012084

08008fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fdc:	b0ae      	sub	sp, #184	@ 0xb8
 8008fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ffe:	4bcb      	ldr	r3, [pc, #812]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 030c 	and.w	r3, r3, #12
 8009006:	2b0c      	cmp	r3, #12
 8009008:	f200 8206 	bhi.w	8009418 <HAL_RCC_GetSysClockFreq+0x440>
 800900c:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <HAL_RCC_GetSysClockFreq+0x3c>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	08009049 	.word	0x08009049
 8009018:	08009419 	.word	0x08009419
 800901c:	08009419 	.word	0x08009419
 8009020:	08009419 	.word	0x08009419
 8009024:	08009051 	.word	0x08009051
 8009028:	08009419 	.word	0x08009419
 800902c:	08009419 	.word	0x08009419
 8009030:	08009419 	.word	0x08009419
 8009034:	08009059 	.word	0x08009059
 8009038:	08009419 	.word	0x08009419
 800903c:	08009419 	.word	0x08009419
 8009040:	08009419 	.word	0x08009419
 8009044:	08009249 	.word	0x08009249
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009048:	4bb9      	ldr	r3, [pc, #740]	@ (8009330 <HAL_RCC_GetSysClockFreq+0x358>)
 800904a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800904e:	e1e7      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009050:	4bb8      	ldr	r3, [pc, #736]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009056:	e1e3      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009058:	4bb4      	ldr	r3, [pc, #720]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009064:	4bb1      	ldr	r3, [pc, #708]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d071      	beq.n	8009154 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009070:	4bae      	ldr	r3, [pc, #696]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	099b      	lsrs	r3, r3, #6
 8009076:	2200      	movs	r2, #0
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800907c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800908c:	2300      	movs	r3, #0
 800908e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009092:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009096:	4622      	mov	r2, r4
 8009098:	462b      	mov	r3, r5
 800909a:	f04f 0000 	mov.w	r0, #0
 800909e:	f04f 0100 	mov.w	r1, #0
 80090a2:	0159      	lsls	r1, r3, #5
 80090a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090a8:	0150      	lsls	r0, r2, #5
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4621      	mov	r1, r4
 80090b0:	1a51      	subs	r1, r2, r1
 80090b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80090b4:	4629      	mov	r1, r5
 80090b6:	eb63 0301 	sbc.w	r3, r3, r1
 80090ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80090c8:	4649      	mov	r1, r9
 80090ca:	018b      	lsls	r3, r1, #6
 80090cc:	4641      	mov	r1, r8
 80090ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090d2:	4641      	mov	r1, r8
 80090d4:	018a      	lsls	r2, r1, #6
 80090d6:	4641      	mov	r1, r8
 80090d8:	1a51      	subs	r1, r2, r1
 80090da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80090dc:	4649      	mov	r1, r9
 80090de:	eb63 0301 	sbc.w	r3, r3, r1
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80090f0:	4649      	mov	r1, r9
 80090f2:	00cb      	lsls	r3, r1, #3
 80090f4:	4641      	mov	r1, r8
 80090f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090fa:	4641      	mov	r1, r8
 80090fc:	00ca      	lsls	r2, r1, #3
 80090fe:	4610      	mov	r0, r2
 8009100:	4619      	mov	r1, r3
 8009102:	4603      	mov	r3, r0
 8009104:	4622      	mov	r2, r4
 8009106:	189b      	adds	r3, r3, r2
 8009108:	633b      	str	r3, [r7, #48]	@ 0x30
 800910a:	462b      	mov	r3, r5
 800910c:	460a      	mov	r2, r1
 800910e:	eb42 0303 	adc.w	r3, r2, r3
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009120:	4629      	mov	r1, r5
 8009122:	024b      	lsls	r3, r1, #9
 8009124:	4621      	mov	r1, r4
 8009126:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800912a:	4621      	mov	r1, r4
 800912c:	024a      	lsls	r2, r1, #9
 800912e:	4610      	mov	r0, r2
 8009130:	4619      	mov	r1, r3
 8009132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009136:	2200      	movs	r2, #0
 8009138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800913c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009140:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009144:	f7f7 ff1e 	bl	8000f84 <__aeabi_uldivmod>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4613      	mov	r3, r2
 800914e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009152:	e067      	b.n	8009224 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009154:	4b75      	ldr	r3, [pc, #468]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	099b      	lsrs	r3, r3, #6
 800915a:	2200      	movs	r2, #0
 800915c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009160:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800916e:	2300      	movs	r3, #0
 8009170:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009172:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009176:	4622      	mov	r2, r4
 8009178:	462b      	mov	r3, r5
 800917a:	f04f 0000 	mov.w	r0, #0
 800917e:	f04f 0100 	mov.w	r1, #0
 8009182:	0159      	lsls	r1, r3, #5
 8009184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009188:	0150      	lsls	r0, r2, #5
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4621      	mov	r1, r4
 8009190:	1a51      	subs	r1, r2, r1
 8009192:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009194:	4629      	mov	r1, r5
 8009196:	eb63 0301 	sbc.w	r3, r3, r1
 800919a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80091a8:	4649      	mov	r1, r9
 80091aa:	018b      	lsls	r3, r1, #6
 80091ac:	4641      	mov	r1, r8
 80091ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091b2:	4641      	mov	r1, r8
 80091b4:	018a      	lsls	r2, r1, #6
 80091b6:	4641      	mov	r1, r8
 80091b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80091bc:	4649      	mov	r1, r9
 80091be:	eb63 0b01 	sbc.w	fp, r3, r1
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091d6:	4692      	mov	sl, r2
 80091d8:	469b      	mov	fp, r3
 80091da:	4623      	mov	r3, r4
 80091dc:	eb1a 0303 	adds.w	r3, sl, r3
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	462b      	mov	r3, r5
 80091e4:	eb4b 0303 	adc.w	r3, fp, r3
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80091f6:	4629      	mov	r1, r5
 80091f8:	028b      	lsls	r3, r1, #10
 80091fa:	4621      	mov	r1, r4
 80091fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009200:	4621      	mov	r1, r4
 8009202:	028a      	lsls	r2, r1, #10
 8009204:	4610      	mov	r0, r2
 8009206:	4619      	mov	r1, r3
 8009208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800920c:	2200      	movs	r2, #0
 800920e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009210:	677a      	str	r2, [r7, #116]	@ 0x74
 8009212:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009216:	f7f7 feb5 	bl	8000f84 <__aeabi_uldivmod>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4613      	mov	r3, r2
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009224:	4b41      	ldr	r3, [pc, #260]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	0c1b      	lsrs	r3, r3, #16
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	3301      	adds	r3, #1
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800923a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009246:	e0eb      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009248:	4b38      	ldr	r3, [pc, #224]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009254:	4b35      	ldr	r3, [pc, #212]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d06b      	beq.n	8009338 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009260:	4b32      	ldr	r3, [pc, #200]	@ (800932c <HAL_RCC_GetSysClockFreq+0x354>)
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	099b      	lsrs	r3, r3, #6
 8009266:	2200      	movs	r2, #0
 8009268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800926a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800926c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800926e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009272:	663b      	str	r3, [r7, #96]	@ 0x60
 8009274:	2300      	movs	r3, #0
 8009276:	667b      	str	r3, [r7, #100]	@ 0x64
 8009278:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800927c:	4622      	mov	r2, r4
 800927e:	462b      	mov	r3, r5
 8009280:	f04f 0000 	mov.w	r0, #0
 8009284:	f04f 0100 	mov.w	r1, #0
 8009288:	0159      	lsls	r1, r3, #5
 800928a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800928e:	0150      	lsls	r0, r2, #5
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4621      	mov	r1, r4
 8009296:	1a51      	subs	r1, r2, r1
 8009298:	61b9      	str	r1, [r7, #24]
 800929a:	4629      	mov	r1, r5
 800929c:	eb63 0301 	sbc.w	r3, r3, r1
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	f04f 0200 	mov.w	r2, #0
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80092ae:	4659      	mov	r1, fp
 80092b0:	018b      	lsls	r3, r1, #6
 80092b2:	4651      	mov	r1, sl
 80092b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092b8:	4651      	mov	r1, sl
 80092ba:	018a      	lsls	r2, r1, #6
 80092bc:	4651      	mov	r1, sl
 80092be:	ebb2 0801 	subs.w	r8, r2, r1
 80092c2:	4659      	mov	r1, fp
 80092c4:	eb63 0901 	sbc.w	r9, r3, r1
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092dc:	4690      	mov	r8, r2
 80092de:	4699      	mov	r9, r3
 80092e0:	4623      	mov	r3, r4
 80092e2:	eb18 0303 	adds.w	r3, r8, r3
 80092e6:	613b      	str	r3, [r7, #16]
 80092e8:	462b      	mov	r3, r5
 80092ea:	eb49 0303 	adc.w	r3, r9, r3
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	f04f 0200 	mov.w	r2, #0
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80092fc:	4629      	mov	r1, r5
 80092fe:	024b      	lsls	r3, r1, #9
 8009300:	4621      	mov	r1, r4
 8009302:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009306:	4621      	mov	r1, r4
 8009308:	024a      	lsls	r2, r1, #9
 800930a:	4610      	mov	r0, r2
 800930c:	4619      	mov	r1, r3
 800930e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009312:	2200      	movs	r2, #0
 8009314:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009316:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009318:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800931c:	f7f7 fe32 	bl	8000f84 <__aeabi_uldivmod>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4613      	mov	r3, r2
 8009326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800932a:	e065      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x420>
 800932c:	40023800 	.word	0x40023800
 8009330:	00f42400 	.word	0x00f42400
 8009334:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009338:	4b3d      	ldr	r3, [pc, #244]	@ (8009430 <HAL_RCC_GetSysClockFreq+0x458>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	099b      	lsrs	r3, r3, #6
 800933e:	2200      	movs	r2, #0
 8009340:	4618      	mov	r0, r3
 8009342:	4611      	mov	r1, r2
 8009344:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009348:	653b      	str	r3, [r7, #80]	@ 0x50
 800934a:	2300      	movs	r3, #0
 800934c:	657b      	str	r3, [r7, #84]	@ 0x54
 800934e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009352:	4642      	mov	r2, r8
 8009354:	464b      	mov	r3, r9
 8009356:	f04f 0000 	mov.w	r0, #0
 800935a:	f04f 0100 	mov.w	r1, #0
 800935e:	0159      	lsls	r1, r3, #5
 8009360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009364:	0150      	lsls	r0, r2, #5
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4641      	mov	r1, r8
 800936c:	1a51      	subs	r1, r2, r1
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	4649      	mov	r1, r9
 8009372:	eb63 0301 	sbc.w	r3, r3, r1
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	f04f 0300 	mov.w	r3, #0
 8009380:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009384:	4659      	mov	r1, fp
 8009386:	018b      	lsls	r3, r1, #6
 8009388:	4651      	mov	r1, sl
 800938a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800938e:	4651      	mov	r1, sl
 8009390:	018a      	lsls	r2, r1, #6
 8009392:	4651      	mov	r1, sl
 8009394:	1a54      	subs	r4, r2, r1
 8009396:	4659      	mov	r1, fp
 8009398:	eb63 0501 	sbc.w	r5, r3, r1
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	00eb      	lsls	r3, r5, #3
 80093a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093aa:	00e2      	lsls	r2, r4, #3
 80093ac:	4614      	mov	r4, r2
 80093ae:	461d      	mov	r5, r3
 80093b0:	4643      	mov	r3, r8
 80093b2:	18e3      	adds	r3, r4, r3
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	464b      	mov	r3, r9
 80093b8:	eb45 0303 	adc.w	r3, r5, r3
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093ca:	4629      	mov	r1, r5
 80093cc:	028b      	lsls	r3, r1, #10
 80093ce:	4621      	mov	r1, r4
 80093d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093d4:	4621      	mov	r1, r4
 80093d6:	028a      	lsls	r2, r1, #10
 80093d8:	4610      	mov	r0, r2
 80093da:	4619      	mov	r1, r3
 80093dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093e0:	2200      	movs	r2, #0
 80093e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80093e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093ea:	f7f7 fdcb 	bl	8000f84 <__aeabi_uldivmod>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4613      	mov	r3, r2
 80093f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80093f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009430 <HAL_RCC_GetSysClockFreq+0x458>)
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	0f1b      	lsrs	r3, r3, #28
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800940a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800940e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009416:	e003      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009418:	4b06      	ldr	r3, [pc, #24]	@ (8009434 <HAL_RCC_GetSysClockFreq+0x45c>)
 800941a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800941e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009424:	4618      	mov	r0, r3
 8009426:	37b8      	adds	r7, #184	@ 0xb8
 8009428:	46bd      	mov	sp, r7
 800942a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942e:	bf00      	nop
 8009430:	40023800 	.word	0x40023800
 8009434:	00f42400 	.word	0x00f42400

08009438 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e28d      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8083 	beq.w	800955e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009458:	4b94      	ldr	r3, [pc, #592]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 030c 	and.w	r3, r3, #12
 8009460:	2b04      	cmp	r3, #4
 8009462:	d019      	beq.n	8009498 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009464:	4b91      	ldr	r3, [pc, #580]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f003 030c 	and.w	r3, r3, #12
        || \
 800946c:	2b08      	cmp	r3, #8
 800946e:	d106      	bne.n	800947e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009470:	4b8e      	ldr	r3, [pc, #568]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800947c:	d00c      	beq.n	8009498 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800947e:	4b8b      	ldr	r3, [pc, #556]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009486:	2b0c      	cmp	r3, #12
 8009488:	d112      	bne.n	80094b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800948a:	4b88      	ldr	r3, [pc, #544]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009496:	d10b      	bne.n	80094b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009498:	4b84      	ldr	r3, [pc, #528]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d05b      	beq.n	800955c <HAL_RCC_OscConfig+0x124>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d157      	bne.n	800955c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e25a      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b8:	d106      	bne.n	80094c8 <HAL_RCC_OscConfig+0x90>
 80094ba:	4b7c      	ldr	r3, [pc, #496]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a7b      	ldr	r2, [pc, #492]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	e01d      	b.n	8009504 <HAL_RCC_OscConfig+0xcc>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094d0:	d10c      	bne.n	80094ec <HAL_RCC_OscConfig+0xb4>
 80094d2:	4b76      	ldr	r3, [pc, #472]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a75      	ldr	r2, [pc, #468]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	4b73      	ldr	r3, [pc, #460]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a72      	ldr	r2, [pc, #456]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	e00b      	b.n	8009504 <HAL_RCC_OscConfig+0xcc>
 80094ec:	4b6f      	ldr	r3, [pc, #444]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a6e      	ldr	r2, [pc, #440]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	4b6c      	ldr	r3, [pc, #432]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a6b      	ldr	r2, [pc, #428]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80094fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d013      	beq.n	8009534 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950c:	f7fc fe28 	bl	8006160 <HAL_GetTick>
 8009510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009512:	e008      	b.n	8009526 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009514:	f7fc fe24 	bl	8006160 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b64      	cmp	r3, #100	@ 0x64
 8009520:	d901      	bls.n	8009526 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e21f      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009526:	4b61      	ldr	r3, [pc, #388]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <HAL_RCC_OscConfig+0xdc>
 8009532:	e014      	b.n	800955e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009534:	f7fc fe14 	bl	8006160 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800953c:	f7fc fe10 	bl	8006160 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b64      	cmp	r3, #100	@ 0x64
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e20b      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800954e:	4b57      	ldr	r3, [pc, #348]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f0      	bne.n	800953c <HAL_RCC_OscConfig+0x104>
 800955a:	e000      	b.n	800955e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800955c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d06f      	beq.n	800964a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800956a:	4b50      	ldr	r3, [pc, #320]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f003 030c 	and.w	r3, r3, #12
 8009572:	2b00      	cmp	r3, #0
 8009574:	d017      	beq.n	80095a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009576:	4b4d      	ldr	r3, [pc, #308]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f003 030c 	and.w	r3, r3, #12
        || \
 800957e:	2b08      	cmp	r3, #8
 8009580:	d105      	bne.n	800958e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009582:	4b4a      	ldr	r3, [pc, #296]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00b      	beq.n	80095a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800958e:	4b47      	ldr	r3, [pc, #284]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009596:	2b0c      	cmp	r3, #12
 8009598:	d11c      	bne.n	80095d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800959a:	4b44      	ldr	r3, [pc, #272]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d116      	bne.n	80095d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095a6:	4b41      	ldr	r3, [pc, #260]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_RCC_OscConfig+0x186>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d001      	beq.n	80095be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e1d3      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095be:	4b3b      	ldr	r3, [pc, #236]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4937      	ldr	r1, [pc, #220]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095d2:	e03a      	b.n	800964a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d020      	beq.n	800961e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095dc:	4b34      	ldr	r3, [pc, #208]	@ (80096b0 <HAL_RCC_OscConfig+0x278>)
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e2:	f7fc fdbd 	bl	8006160 <HAL_GetTick>
 80095e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095e8:	e008      	b.n	80095fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095ea:	f7fc fdb9 	bl	8006160 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d901      	bls.n	80095fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e1b4      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095fc:	4b2b      	ldr	r3, [pc, #172]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0302 	and.w	r3, r3, #2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0f0      	beq.n	80095ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009608:	4b28      	ldr	r3, [pc, #160]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	4925      	ldr	r1, [pc, #148]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009618:	4313      	orrs	r3, r2
 800961a:	600b      	str	r3, [r1, #0]
 800961c:	e015      	b.n	800964a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800961e:	4b24      	ldr	r3, [pc, #144]	@ (80096b0 <HAL_RCC_OscConfig+0x278>)
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009624:	f7fc fd9c 	bl	8006160 <HAL_GetTick>
 8009628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800962a:	e008      	b.n	800963e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800962c:	f7fc fd98 	bl	8006160 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	2b02      	cmp	r3, #2
 8009638:	d901      	bls.n	800963e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e193      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800963e:	4b1b      	ldr	r3, [pc, #108]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1f0      	bne.n	800962c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d036      	beq.n	80096c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d016      	beq.n	800968c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800965e:	4b15      	ldr	r3, [pc, #84]	@ (80096b4 <HAL_RCC_OscConfig+0x27c>)
 8009660:	2201      	movs	r2, #1
 8009662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009664:	f7fc fd7c 	bl	8006160 <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800966c:	f7fc fd78 	bl	8006160 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e173      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800967e:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <HAL_RCC_OscConfig+0x274>)
 8009680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f0      	beq.n	800966c <HAL_RCC_OscConfig+0x234>
 800968a:	e01b      	b.n	80096c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800968c:	4b09      	ldr	r3, [pc, #36]	@ (80096b4 <HAL_RCC_OscConfig+0x27c>)
 800968e:	2200      	movs	r2, #0
 8009690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009692:	f7fc fd65 	bl	8006160 <HAL_GetTick>
 8009696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009698:	e00e      	b.n	80096b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800969a:	f7fc fd61 	bl	8006160 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d907      	bls.n	80096b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e15c      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
 80096ac:	40023800 	.word	0x40023800
 80096b0:	42470000 	.word	0x42470000
 80096b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096b8:	4b8a      	ldr	r3, [pc, #552]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80096ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1ea      	bne.n	800969a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8097 	beq.w	8009800 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096d6:	4b83      	ldr	r3, [pc, #524]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80096d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10f      	bne.n	8009702 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096e2:	2300      	movs	r3, #0
 80096e4:	60bb      	str	r3, [r7, #8]
 80096e6:	4b7f      	ldr	r3, [pc, #508]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80096e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ea:	4a7e      	ldr	r2, [pc, #504]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80096ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80096f2:	4b7c      	ldr	r3, [pc, #496]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096fa:	60bb      	str	r3, [r7, #8]
 80096fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096fe:	2301      	movs	r3, #1
 8009700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009702:	4b79      	ldr	r3, [pc, #484]	@ (80098e8 <HAL_RCC_OscConfig+0x4b0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800970a:	2b00      	cmp	r3, #0
 800970c:	d118      	bne.n	8009740 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800970e:	4b76      	ldr	r3, [pc, #472]	@ (80098e8 <HAL_RCC_OscConfig+0x4b0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a75      	ldr	r2, [pc, #468]	@ (80098e8 <HAL_RCC_OscConfig+0x4b0>)
 8009714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800971a:	f7fc fd21 	bl	8006160 <HAL_GetTick>
 800971e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009720:	e008      	b.n	8009734 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009722:	f7fc fd1d 	bl	8006160 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	2b02      	cmp	r3, #2
 800972e:	d901      	bls.n	8009734 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e118      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009734:	4b6c      	ldr	r3, [pc, #432]	@ (80098e8 <HAL_RCC_OscConfig+0x4b0>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0f0      	beq.n	8009722 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d106      	bne.n	8009756 <HAL_RCC_OscConfig+0x31e>
 8009748:	4b66      	ldr	r3, [pc, #408]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800974a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800974c:	4a65      	ldr	r2, [pc, #404]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800974e:	f043 0301 	orr.w	r3, r3, #1
 8009752:	6713      	str	r3, [r2, #112]	@ 0x70
 8009754:	e01c      	b.n	8009790 <HAL_RCC_OscConfig+0x358>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	2b05      	cmp	r3, #5
 800975c:	d10c      	bne.n	8009778 <HAL_RCC_OscConfig+0x340>
 800975e:	4b61      	ldr	r3, [pc, #388]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 8009760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009762:	4a60      	ldr	r2, [pc, #384]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 8009764:	f043 0304 	orr.w	r3, r3, #4
 8009768:	6713      	str	r3, [r2, #112]	@ 0x70
 800976a:	4b5e      	ldr	r3, [pc, #376]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800976c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800976e:	4a5d      	ldr	r2, [pc, #372]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	6713      	str	r3, [r2, #112]	@ 0x70
 8009776:	e00b      	b.n	8009790 <HAL_RCC_OscConfig+0x358>
 8009778:	4b5a      	ldr	r3, [pc, #360]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800977a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800977c:	4a59      	ldr	r2, [pc, #356]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800977e:	f023 0301 	bic.w	r3, r3, #1
 8009782:	6713      	str	r3, [r2, #112]	@ 0x70
 8009784:	4b57      	ldr	r3, [pc, #348]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 8009786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009788:	4a56      	ldr	r2, [pc, #344]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800978a:	f023 0304 	bic.w	r3, r3, #4
 800978e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d015      	beq.n	80097c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009798:	f7fc fce2 	bl	8006160 <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800979e:	e00a      	b.n	80097b6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a0:	f7fc fcde 	bl	8006160 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d901      	bls.n	80097b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e0d7      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097b6:	4b4b      	ldr	r3, [pc, #300]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80097b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0ee      	beq.n	80097a0 <HAL_RCC_OscConfig+0x368>
 80097c2:	e014      	b.n	80097ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c4:	f7fc fccc 	bl	8006160 <HAL_GetTick>
 80097c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097ca:	e00a      	b.n	80097e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097cc:	f7fc fcc8 	bl	8006160 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e0c1      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097e2:	4b40      	ldr	r3, [pc, #256]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80097e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1ee      	bne.n	80097cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d105      	bne.n	8009800 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097f4:	4b3b      	ldr	r3, [pc, #236]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80097f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f8:	4a3a      	ldr	r2, [pc, #232]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80097fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80ad 	beq.w	8009964 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800980a:	4b36      	ldr	r3, [pc, #216]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f003 030c 	and.w	r3, r3, #12
 8009812:	2b08      	cmp	r3, #8
 8009814:	d060      	beq.n	80098d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d145      	bne.n	80098aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800981e:	4b33      	ldr	r3, [pc, #204]	@ (80098ec <HAL_RCC_OscConfig+0x4b4>)
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009824:	f7fc fc9c 	bl	8006160 <HAL_GetTick>
 8009828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800982a:	e008      	b.n	800983e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800982c:	f7fc fc98 	bl	8006160 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e093      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800983e:	4b29      	ldr	r3, [pc, #164]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1f0      	bne.n	800982c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	69da      	ldr	r2, [r3, #28]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	019b      	lsls	r3, r3, #6
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	3b01      	subs	r3, #1
 8009864:	041b      	lsls	r3, r3, #16
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986c:	061b      	lsls	r3, r3, #24
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009874:	071b      	lsls	r3, r3, #28
 8009876:	491b      	ldr	r1, [pc, #108]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 8009878:	4313      	orrs	r3, r2
 800987a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800987c:	4b1b      	ldr	r3, [pc, #108]	@ (80098ec <HAL_RCC_OscConfig+0x4b4>)
 800987e:	2201      	movs	r2, #1
 8009880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009882:	f7fc fc6d 	bl	8006160 <HAL_GetTick>
 8009886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009888:	e008      	b.n	800989c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800988a:	f7fc fc69 	bl	8006160 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d901      	bls.n	800989c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e064      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800989c:	4b11      	ldr	r3, [pc, #68]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0f0      	beq.n	800988a <HAL_RCC_OscConfig+0x452>
 80098a8:	e05c      	b.n	8009964 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098aa:	4b10      	ldr	r3, [pc, #64]	@ (80098ec <HAL_RCC_OscConfig+0x4b4>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b0:	f7fc fc56 	bl	8006160 <HAL_GetTick>
 80098b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098b6:	e008      	b.n	80098ca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098b8:	f7fc fc52 	bl	8006160 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d901      	bls.n	80098ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e04d      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ca:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <HAL_RCC_OscConfig+0x4ac>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1f0      	bne.n	80098b8 <HAL_RCC_OscConfig+0x480>
 80098d6:	e045      	b.n	8009964 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d107      	bne.n	80098f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e040      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
 80098e4:	40023800 	.word	0x40023800
 80098e8:	40007000 	.word	0x40007000
 80098ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80098f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009970 <HAL_RCC_OscConfig+0x538>)
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d030      	beq.n	8009960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009908:	429a      	cmp	r2, r3
 800990a:	d129      	bne.n	8009960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009916:	429a      	cmp	r2, r3
 8009918:	d122      	bne.n	8009960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009920:	4013      	ands	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009928:	4293      	cmp	r3, r2
 800992a:	d119      	bne.n	8009960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	3b01      	subs	r3, #1
 800993a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800993c:	429a      	cmp	r2, r3
 800993e:	d10f      	bne.n	8009960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800994c:	429a      	cmp	r2, r3
 800994e:	d107      	bne.n	8009960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800995c:	429a      	cmp	r2, r3
 800995e:	d001      	beq.n	8009964 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	40023800 	.word	0x40023800

08009974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e041      	b.n	8009a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fc f8f0 	bl	8005b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2202      	movs	r2, #2
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f000 fa7e 	bl	8009eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d001      	beq.n	8009a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e04e      	b.n	8009aca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f042 0201 	orr.w	r2, r2, #1
 8009a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a23      	ldr	r2, [pc, #140]	@ (8009ad8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d022      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a56:	d01d      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009adc <HAL_TIM_Base_Start_IT+0xc8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d018      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00e      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <HAL_TIM_Base_Start_IT+0xd8>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x80>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d111      	bne.n	8009ab8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b06      	cmp	r3, #6
 8009aa4:	d010      	beq.n	8009ac8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab6:	e007      	b.n	8009ac8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000
 8009adc:	40000400 	.word	0x40000400
 8009ae0:	40000800 	.word	0x40000800
 8009ae4:	40000c00 	.word	0x40000c00
 8009ae8:	40010400 	.word	0x40010400
 8009aec:	40014000 	.word	0x40014000
 8009af0:	40001800 	.word	0x40001800

08009af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d020      	beq.n	8009b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01b      	beq.n	8009b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0202 	mvn.w	r2, #2
 8009b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f999 	bl	8009e76 <HAL_TIM_IC_CaptureCallback>
 8009b44:	e005      	b.n	8009b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f98b 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f99c 	bl	8009e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f003 0304 	and.w	r3, r3, #4
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d020      	beq.n	8009ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01b      	beq.n	8009ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f06f 0204 	mvn.w	r2, #4
 8009b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f973 	bl	8009e76 <HAL_TIM_IC_CaptureCallback>
 8009b90:	e005      	b.n	8009b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f965 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f976 	bl	8009e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d020      	beq.n	8009bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f003 0308 	and.w	r3, r3, #8
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01b      	beq.n	8009bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f06f 0208 	mvn.w	r2, #8
 8009bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2204      	movs	r2, #4
 8009bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f003 0303 	and.w	r3, r3, #3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f94d 	bl	8009e76 <HAL_TIM_IC_CaptureCallback>
 8009bdc:	e005      	b.n	8009bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f93f 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f950 	bl	8009e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f003 0310 	and.w	r3, r3, #16
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d020      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f003 0310 	and.w	r3, r3, #16
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01b      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f06f 0210 	mvn.w	r2, #16
 8009c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2208      	movs	r2, #8
 8009c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f927 	bl	8009e76 <HAL_TIM_IC_CaptureCallback>
 8009c28:	e005      	b.n	8009c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f919 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f92a 	bl	8009e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00c      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f06f 0201 	mvn.w	r2, #1
 8009c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7fa f940 	bl	8003ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fade 	bl	800a240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00c      	beq.n	8009ca8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d007      	beq.n	8009ca8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f8fb 	bl	8009e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00c      	beq.n	8009ccc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d007      	beq.n	8009ccc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f06f 0220 	mvn.w	r2, #32
 8009cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fab0 	bl	800a22c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e0b4      	b.n	8009e5a <HAL_TIM_ConfigClockSource+0x186>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d28:	d03e      	beq.n	8009da8 <HAL_TIM_ConfigClockSource+0xd4>
 8009d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d2e:	f200 8087 	bhi.w	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d36:	f000 8086 	beq.w	8009e46 <HAL_TIM_ConfigClockSource+0x172>
 8009d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d3e:	d87f      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d40:	2b70      	cmp	r3, #112	@ 0x70
 8009d42:	d01a      	beq.n	8009d7a <HAL_TIM_ConfigClockSource+0xa6>
 8009d44:	2b70      	cmp	r3, #112	@ 0x70
 8009d46:	d87b      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d48:	2b60      	cmp	r3, #96	@ 0x60
 8009d4a:	d050      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x11a>
 8009d4c:	2b60      	cmp	r3, #96	@ 0x60
 8009d4e:	d877      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d50:	2b50      	cmp	r3, #80	@ 0x50
 8009d52:	d03c      	beq.n	8009dce <HAL_TIM_ConfigClockSource+0xfa>
 8009d54:	2b50      	cmp	r3, #80	@ 0x50
 8009d56:	d873      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	d058      	beq.n	8009e0e <HAL_TIM_ConfigClockSource+0x13a>
 8009d5c:	2b40      	cmp	r3, #64	@ 0x40
 8009d5e:	d86f      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d60:	2b30      	cmp	r3, #48	@ 0x30
 8009d62:	d064      	beq.n	8009e2e <HAL_TIM_ConfigClockSource+0x15a>
 8009d64:	2b30      	cmp	r3, #48	@ 0x30
 8009d66:	d86b      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	d060      	beq.n	8009e2e <HAL_TIM_ConfigClockSource+0x15a>
 8009d6c:	2b20      	cmp	r3, #32
 8009d6e:	d867      	bhi.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d05c      	beq.n	8009e2e <HAL_TIM_ConfigClockSource+0x15a>
 8009d74:	2b10      	cmp	r3, #16
 8009d76:	d05a      	beq.n	8009e2e <HAL_TIM_ConfigClockSource+0x15a>
 8009d78:	e062      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d8a:	f000 f9b3 	bl	800a0f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	609a      	str	r2, [r3, #8]
      break;
 8009da6:	e04f      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009db8:	f000 f99c 	bl	800a0f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689a      	ldr	r2, [r3, #8]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dca:	609a      	str	r2, [r3, #8]
      break;
 8009dcc:	e03c      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f000 f910 	bl	800a000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2150      	movs	r1, #80	@ 0x50
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 f969 	bl	800a0be <TIM_ITRx_SetConfig>
      break;
 8009dec:	e02c      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f000 f92f 	bl	800a05e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2160      	movs	r1, #96	@ 0x60
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 f959 	bl	800a0be <TIM_ITRx_SetConfig>
      break;
 8009e0c:	e01c      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f000 f8f0 	bl	800a000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2140      	movs	r1, #64	@ 0x40
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f949 	bl	800a0be <TIM_ITRx_SetConfig>
      break;
 8009e2c:	e00c      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4619      	mov	r1, r3
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f000 f940 	bl	800a0be <TIM_ITRx_SetConfig>
      break;
 8009e3e:	e003      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	73fb      	strb	r3, [r7, #15]
      break;
 8009e44:	e000      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
	...

08009eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a43      	ldr	r2, [pc, #268]	@ (8009fd4 <TIM_Base_SetConfig+0x120>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d013      	beq.n	8009ef4 <TIM_Base_SetConfig+0x40>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ed2:	d00f      	beq.n	8009ef4 <TIM_Base_SetConfig+0x40>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a40      	ldr	r2, [pc, #256]	@ (8009fd8 <TIM_Base_SetConfig+0x124>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00b      	beq.n	8009ef4 <TIM_Base_SetConfig+0x40>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a3f      	ldr	r2, [pc, #252]	@ (8009fdc <TIM_Base_SetConfig+0x128>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d007      	beq.n	8009ef4 <TIM_Base_SetConfig+0x40>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8009fe0 <TIM_Base_SetConfig+0x12c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d003      	beq.n	8009ef4 <TIM_Base_SetConfig+0x40>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a3d      	ldr	r2, [pc, #244]	@ (8009fe4 <TIM_Base_SetConfig+0x130>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d108      	bne.n	8009f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a32      	ldr	r2, [pc, #200]	@ (8009fd4 <TIM_Base_SetConfig+0x120>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d02b      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f14:	d027      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a2f      	ldr	r2, [pc, #188]	@ (8009fd8 <TIM_Base_SetConfig+0x124>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d023      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2e      	ldr	r2, [pc, #184]	@ (8009fdc <TIM_Base_SetConfig+0x128>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d01f      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a2d      	ldr	r2, [pc, #180]	@ (8009fe0 <TIM_Base_SetConfig+0x12c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d01b      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a2c      	ldr	r2, [pc, #176]	@ (8009fe4 <TIM_Base_SetConfig+0x130>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d017      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a2b      	ldr	r2, [pc, #172]	@ (8009fe8 <TIM_Base_SetConfig+0x134>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d013      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a2a      	ldr	r2, [pc, #168]	@ (8009fec <TIM_Base_SetConfig+0x138>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00f      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a29      	ldr	r2, [pc, #164]	@ (8009ff0 <TIM_Base_SetConfig+0x13c>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00b      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a28      	ldr	r2, [pc, #160]	@ (8009ff4 <TIM_Base_SetConfig+0x140>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d007      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a27      	ldr	r2, [pc, #156]	@ (8009ff8 <TIM_Base_SetConfig+0x144>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_Base_SetConfig+0xb2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a26      	ldr	r2, [pc, #152]	@ (8009ffc <TIM_Base_SetConfig+0x148>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d108      	bne.n	8009f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a0e      	ldr	r2, [pc, #56]	@ (8009fd4 <TIM_Base_SetConfig+0x120>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d003      	beq.n	8009fa6 <TIM_Base_SetConfig+0xf2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a10      	ldr	r2, [pc, #64]	@ (8009fe4 <TIM_Base_SetConfig+0x130>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d103      	bne.n	8009fae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	691a      	ldr	r2, [r3, #16]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f043 0204 	orr.w	r2, r3, #4
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	601a      	str	r2, [r3, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40000400 	.word	0x40000400
 8009fdc:	40000800 	.word	0x40000800
 8009fe0:	40000c00 	.word	0x40000c00
 8009fe4:	40010400 	.word	0x40010400
 8009fe8:	40014000 	.word	0x40014000
 8009fec:	40014400 	.word	0x40014400
 8009ff0:	40014800 	.word	0x40014800
 8009ff4:	40001800 	.word	0x40001800
 8009ff8:	40001c00 	.word	0x40001c00
 8009ffc:	40002000 	.word	0x40002000

0800a000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a000:	b480      	push	{r7}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	f023 0201 	bic.w	r2, r3, #1
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a02a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	4313      	orrs	r3, r2
 800a034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f023 030a 	bic.w	r3, r3, #10
 800a03c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	4313      	orrs	r3, r2
 800a044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a05e:	b480      	push	{r7}
 800a060:	b087      	sub	sp, #28
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	f023 0210 	bic.w	r2, r3, #16
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	031b      	lsls	r3, r3, #12
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a09a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	621a      	str	r2, [r3, #32]
}
 800a0b2:	bf00      	nop
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	f043 0307 	orr.w	r3, r3, #7
 800a0e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	609a      	str	r2, [r3, #8]
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a10e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	021a      	lsls	r2, r3, #8
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	431a      	orrs	r2, r3
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	4313      	orrs	r3, r2
 800a120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	609a      	str	r2, [r3, #8]
}
 800a128:	bf00      	nop
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a144:	2b01      	cmp	r3, #1
 800a146:	d101      	bne.n	800a14c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a148:	2302      	movs	r3, #2
 800a14a:	e05a      	b.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a21      	ldr	r2, [pc, #132]	@ (800a210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d022      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a198:	d01d      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a1d      	ldr	r2, [pc, #116]	@ (800a214 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d018      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d013      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a1a      	ldr	r2, [pc, #104]	@ (800a21c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d00e      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a18      	ldr	r2, [pc, #96]	@ (800a220 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d009      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a17      	ldr	r2, [pc, #92]	@ (800a224 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d004      	beq.n	800a1d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a15      	ldr	r2, [pc, #84]	@ (800a228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d10c      	bne.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	40010000 	.word	0x40010000
 800a214:	40000400 	.word	0x40000400
 800a218:	40000800 	.word	0x40000800
 800a21c:	40000c00 	.word	0x40000c00
 800a220:	40010400 	.word	0x40010400
 800a224:	40014000 	.word	0x40014000
 800a228:	40001800 	.word	0x40001800

0800a22c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e042      	b.n	800a2ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7fb fca6 	bl	8005bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2224      	movs	r2, #36	@ 0x24
 800a284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 ff97 	bl	800b1cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	691a      	ldr	r2, [r3, #16]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	695a      	ldr	r2, [r3, #20]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e024      	b.n	800a350 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2224      	movs	r2, #36	@ 0x24
 800a30a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a31c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7fb fd0c 	bl	8005d3c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	@ 0x28
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	4613      	mov	r3, r2
 800a366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b20      	cmp	r3, #32
 800a376:	d175      	bne.n	800a464 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <HAL_UART_Transmit+0x2c>
 800a37e:	88fb      	ldrh	r3, [r7, #6]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e06e      	b.n	800a466 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2221      	movs	r2, #33	@ 0x21
 800a392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a396:	f7fb fee3 	bl	8006160 <HAL_GetTick>
 800a39a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	88fa      	ldrh	r2, [r7, #6]
 800a3a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	88fa      	ldrh	r2, [r7, #6]
 800a3a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b0:	d108      	bne.n	800a3c4 <HAL_UART_Transmit+0x6c>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d104      	bne.n	800a3c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	e003      	b.n	800a3cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3cc:	e02e      	b.n	800a42c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2180      	movs	r1, #128	@ 0x80
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fc35 	bl	800ac48 <UART_WaitOnFlagUntilTimeout>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e03a      	b.n	800a466 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	3302      	adds	r3, #2
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e007      	b.n	800a41e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	3301      	adds	r3, #1
 800a41c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a422:	b29b      	uxth	r3, r3
 800a424:	3b01      	subs	r3, #1
 800a426:	b29a      	uxth	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a430:	b29b      	uxth	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1cb      	bne.n	800a3ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2200      	movs	r2, #0
 800a43e:	2140      	movs	r1, #64	@ 0x40
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 fc01 	bl	800ac48 <UART_WaitOnFlagUntilTimeout>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e006      	b.n	800a466 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	e000      	b.n	800a466 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a464:	2302      	movs	r3, #2
  }
}
 800a466:	4618      	mov	r0, r3
 800a468:	3720      	adds	r7, #32
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	4613      	mov	r3, r2
 800a47a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b20      	cmp	r3, #32
 800a486:	d112      	bne.n	800a4ae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <HAL_UART_Receive_DMA+0x26>
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e00b      	b.n	800a4b0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a49e:	88fb      	ldrh	r3, [r7, #6]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 fc29 	bl	800acfc <UART_Start_Receive_DMA>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	e000      	b.n	800a4b0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a4ae:	2302      	movs	r3, #2
  }
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b0ba      	sub	sp, #232	@ 0xe8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a4f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10f      	bne.n	800a51e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <HAL_UART_IRQHandler+0x66>
 800a50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fd9a 	bl	800b050 <UART_Receive_IT>
      return;
 800a51c:	e273      	b.n	800aa06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a51e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 80de 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x22c>
 800a528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80d1 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00b      	beq.n	800a566 <HAL_UART_IRQHandler+0xae>
 800a54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a55e:	f043 0201 	orr.w	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <HAL_UART_IRQHandler+0xd2>
 800a572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a582:	f043 0202 	orr.w	r2, r3, #2
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <HAL_UART_IRQHandler+0xf6>
 800a596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5a6:	f043 0204 	orr.w	r2, r3, #4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d011      	beq.n	800a5de <HAL_UART_IRQHandler+0x126>
 800a5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d105      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d6:	f043 0208 	orr.w	r2, r3, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 820a 	beq.w	800a9fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d008      	beq.n	800a606 <HAL_UART_IRQHandler+0x14e>
 800a5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fd25 	bl	800b050 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a610:	2b40      	cmp	r3, #64	@ 0x40
 800a612:	bf0c      	ite	eq
 800a614:	2301      	moveq	r3, #1
 800a616:	2300      	movne	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <HAL_UART_IRQHandler+0x17a>
 800a62a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04f      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fc30 	bl	800ae98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a642:	2b40      	cmp	r3, #64	@ 0x40
 800a644:	d141      	bne.n	800a6ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3314      	adds	r3, #20
 800a64c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a65c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3314      	adds	r3, #20
 800a66e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a67e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a68a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1d9      	bne.n	800a646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d013      	beq.n	800a6c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a69e:	4a8a      	ldr	r2, [pc, #552]	@ (800a8c8 <HAL_UART_IRQHandler+0x410>)
 800a6a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fc fde2 	bl	8007270 <HAL_DMA_Abort_IT>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d016      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	e00e      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f9ac 	bl	800aa20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	e00a      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f9a8 	bl	800aa20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d0:	e006      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f9a4 	bl	800aa20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a6de:	e18d      	b.n	800a9fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e0:	bf00      	nop
    return;
 800a6e2:	e18b      	b.n	800a9fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 8167 	bne.w	800a9bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8160 	beq.w	800a9bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8159 	beq.w	800a9bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a70a:	2300      	movs	r3, #0
 800a70c:	60bb      	str	r3, [r7, #8]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	60bb      	str	r3, [r7, #8]
 800a71e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72a:	2b40      	cmp	r3, #64	@ 0x40
 800a72c:	f040 80ce 	bne.w	800a8cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a73c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 80a9 	beq.w	800a898 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a74a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a74e:	429a      	cmp	r2, r3
 800a750:	f080 80a2 	bcs.w	800a898 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a75a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a766:	f000 8088 	beq.w	800a87a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a79a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1d9      	bne.n	800a76a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e1      	bne.n	800a7b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3314      	adds	r3, #20
 800a7f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3314      	adds	r3, #20
 800a812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a81c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e3      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a84a:	f023 0310 	bic.w	r3, r3, #16
 800a84e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a85c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a85e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a862:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a86a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e3      	bne.n	800a838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a874:	4618      	mov	r0, r3
 800a876:	f7fc fc8b 	bl	8007190 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2202      	movs	r2, #2
 800a87e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a888:	b29b      	uxth	r3, r3
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f8cf 	bl	800aa34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a896:	e0b3      	b.n	800aa00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a89c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	f040 80ad 	bne.w	800aa00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b0:	f040 80a6 	bne.w	800aa00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f8b7 	bl	800aa34 <HAL_UARTEx_RxEventCallback>
      return;
 800a8c6:	e09b      	b.n	800aa00 <HAL_UART_IRQHandler+0x548>
 800a8c8:	0800af5f 	.word	0x0800af5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 808e 	beq.w	800aa04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a8e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 8089 	beq.w	800aa04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	330c      	adds	r3, #12
 800a8f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fc:	e853 3f00 	ldrex	r3, [r3]
 800a900:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	330c      	adds	r3, #12
 800a912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a916:	647a      	str	r2, [r7, #68]	@ 0x44
 800a918:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a91c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e3      	bne.n	800a8f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3314      	adds	r3, #20
 800a930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	623b      	str	r3, [r7, #32]
   return(result);
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3314      	adds	r3, #20
 800a94a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a94e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e3      	bne.n	800a92a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2220      	movs	r2, #32
 800a966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	330c      	adds	r3, #12
 800a976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0310 	bic.w	r3, r3, #16
 800a986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	330c      	adds	r3, #12
 800a990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a994:	61fa      	str	r2, [r7, #28]
 800a996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	69b9      	ldr	r1, [r7, #24]
 800a99a:	69fa      	ldr	r2, [r7, #28]
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e3      	bne.n	800a970 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f83d 	bl	800aa34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9ba:	e023      	b.n	800aa04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <HAL_UART_IRQHandler+0x524>
 800a9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fad3 	bl	800af80 <UART_Transmit_IT>
    return;
 800a9da:	e014      	b.n	800aa06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <HAL_UART_IRQHandler+0x54e>
 800a9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fb13 	bl	800b020 <UART_EndTransmit_IT>
    return;
 800a9fa:	e004      	b.n	800aa06 <HAL_UART_IRQHandler+0x54e>
    return;
 800a9fc:	bf00      	nop
 800a9fe:	e002      	b.n	800aa06 <HAL_UART_IRQHandler+0x54e>
      return;
 800aa00:	bf00      	nop
 800aa02:	e000      	b.n	800aa06 <HAL_UART_IRQHandler+0x54e>
      return;
 800aa04:	bf00      	nop
  }
}
 800aa06:	37e8      	adds	r7, #232	@ 0xe8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b09c      	sub	sp, #112	@ 0x70
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa58:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d172      	bne.n	800ab4e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	330c      	adds	r3, #12
 800aa74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e5      	bne.n	800aa6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3314      	adds	r3, #20
 800aaa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	667b      	str	r3, [r7, #100]	@ 0x64
 800aaba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3314      	adds	r3, #20
 800aac0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aac2:	647a      	str	r2, [r7, #68]	@ 0x44
 800aac4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e5      	bne.n	800aaa2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3314      	adds	r3, #20
 800aadc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	623b      	str	r3, [r7, #32]
   return(result);
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaec:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3314      	adds	r3, #20
 800aaf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aaf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800aaf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aafe:	e841 2300 	strex	r3, r2, [r1]
 800ab02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1e5      	bne.n	800aad6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d119      	bne.n	800ab4e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	330c      	adds	r3, #12
 800ab20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f023 0310 	bic.w	r3, r3, #16
 800ab30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	330c      	adds	r3, #12
 800ab38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab3a:	61fa      	str	r2, [r7, #28]
 800ab3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	69b9      	ldr	r1, [r7, #24]
 800ab40:	69fa      	ldr	r2, [r7, #28]
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	617b      	str	r3, [r7, #20]
   return(result);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e5      	bne.n	800ab1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab50:	2200      	movs	r2, #0
 800ab52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d106      	bne.n	800ab6a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab60:	4619      	mov	r1, r3
 800ab62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab64:	f7ff ff66 	bl	800aa34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab68:	e002      	b.n	800ab70 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ab6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab6c:	f7f8 f948 	bl	8002e00 <HAL_UART_RxCpltCallback>
}
 800ab70:	bf00      	nop
 800ab72:	3770      	adds	r7, #112	@ 0x70
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d108      	bne.n	800aba6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7ff ff48 	bl	800aa34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aba4:	e002      	b.n	800abac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7f8 f914 	bl	8002dd4 <HAL_UART_RxHalfCpltCallback>
}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd0:	2b80      	cmp	r3, #128	@ 0x80
 800abd2:	bf0c      	ite	eq
 800abd4:	2301      	moveq	r3, #1
 800abd6:	2300      	movne	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b21      	cmp	r3, #33	@ 0x21
 800abe6:	d108      	bne.n	800abfa <UART_DMAError+0x46>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d005      	beq.n	800abfa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f000 f927 	bl	800ae48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac04:	2b40      	cmp	r3, #64	@ 0x40
 800ac06:	bf0c      	ite	eq
 800ac08:	2301      	moveq	r3, #1
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b22      	cmp	r3, #34	@ 0x22
 800ac1a:	d108      	bne.n	800ac2e <UART_DMAError+0x7a>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2200      	movs	r2, #0
 800ac26:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ac28:	68b8      	ldr	r0, [r7, #8]
 800ac2a:	f000 f935 	bl	800ae98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac32:	f043 0210 	orr.w	r2, r3, #16
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f7ff fef0 	bl	800aa20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	603b      	str	r3, [r7, #0]
 800ac54:	4613      	mov	r3, r2
 800ac56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac58:	e03b      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac60:	d037      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac62:	f7fb fa7d 	bl	8006160 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	6a3a      	ldr	r2, [r7, #32]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d302      	bcc.n	800ac78 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e03a      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f003 0304 	and.w	r3, r3, #4
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d023      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b80      	cmp	r3, #128	@ 0x80
 800ac8e:	d020      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b40      	cmp	r3, #64	@ 0x40
 800ac94:	d01d      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d116      	bne.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aca4:	2300      	movs	r3, #0
 800aca6:	617b      	str	r3, [r7, #20]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f8ec 	bl	800ae98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2208      	movs	r2, #8
 800acc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e00f      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	4013      	ands	r3, r2
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	429a      	cmp	r2, r3
 800ace0:	bf0c      	ite	eq
 800ace2:	2301      	moveq	r3, #1
 800ace4:	2300      	movne	r3, #0
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	461a      	mov	r2, r3
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	429a      	cmp	r2, r3
 800acee:	d0b4      	beq.n	800ac5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b098      	sub	sp, #96	@ 0x60
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	4613      	mov	r3, r2
 800ad08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	88fa      	ldrh	r2, [r7, #6]
 800ad14:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2222      	movs	r2, #34	@ 0x22
 800ad20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad28:	4a44      	ldr	r2, [pc, #272]	@ (800ae3c <UART_Start_Receive_DMA+0x140>)
 800ad2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad30:	4a43      	ldr	r2, [pc, #268]	@ (800ae40 <UART_Start_Receive_DMA+0x144>)
 800ad32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad38:	4a42      	ldr	r2, [pc, #264]	@ (800ae44 <UART_Start_Receive_DMA+0x148>)
 800ad3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad40:	2200      	movs	r2, #0
 800ad42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad44:	f107 0308 	add.w	r3, r7, #8
 800ad48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	f7fc f9c0 	bl	80070e0 <HAL_DMA_Start_IT>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d008      	beq.n	800ad78 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2210      	movs	r2, #16
 800ad6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e05d      	b.n	800ae34 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d019      	beq.n	800adca <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	330c      	adds	r3, #12
 800ad9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ada6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	330c      	adds	r3, #12
 800adb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adb6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800adb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800adbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adbe:	e841 2300 	strex	r3, r2, [r1]
 800adc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800adc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e5      	bne.n	800ad96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3314      	adds	r3, #20
 800add0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800addc:	f043 0301 	orr.w	r3, r3, #1
 800ade0:	657b      	str	r3, [r7, #84]	@ 0x54
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3314      	adds	r3, #20
 800ade8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adea:	63ba      	str	r2, [r7, #56]	@ 0x38
 800adec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800adf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adf2:	e841 2300 	strex	r3, r2, [r1]
 800adf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e5      	bne.n	800adca <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3314      	adds	r3, #20
 800ae04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae14:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3314      	adds	r3, #20
 800ae1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	6a39      	ldr	r1, [r7, #32]
 800ae24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e5      	bne.n	800adfe <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3760      	adds	r7, #96	@ 0x60
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	0800aa4d 	.word	0x0800aa4d
 800ae40:	0800ab79 	.word	0x0800ab79
 800ae44:	0800abb5 	.word	0x0800abb5

0800ae48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b089      	sub	sp, #36	@ 0x24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	330c      	adds	r3, #12
 800ae56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	e853 3f00 	ldrex	r3, [r3]
 800ae5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae66:	61fb      	str	r3, [r7, #28]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	61ba      	str	r2, [r7, #24]
 800ae72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6979      	ldr	r1, [r7, #20]
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e5      	bne.n	800ae50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ae8c:	bf00      	nop
 800ae8e:	3724      	adds	r7, #36	@ 0x24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b095      	sub	sp, #84	@ 0x54
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	330c      	adds	r3, #12
 800aea6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeaa:	e853 3f00 	ldrex	r3, [r3]
 800aeae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aeb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	330c      	adds	r3, #12
 800aebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aec0:	643a      	str	r2, [r7, #64]	@ 0x40
 800aec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aec8:	e841 2300 	strex	r3, r2, [r1]
 800aecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e5      	bne.n	800aea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	3314      	adds	r3, #20
 800aeda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	e853 3f00 	ldrex	r3, [r3]
 800aee2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	f023 0301 	bic.w	r3, r3, #1
 800aeea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3314      	adds	r3, #20
 800aef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aefa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aefc:	e841 2300 	strex	r3, r2, [r1]
 800af00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1e5      	bne.n	800aed4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d119      	bne.n	800af44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	330c      	adds	r3, #12
 800af16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f023 0310 	bic.w	r3, r3, #16
 800af26:	647b      	str	r3, [r7, #68]	@ 0x44
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	330c      	adds	r3, #12
 800af2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af30:	61ba      	str	r2, [r7, #24]
 800af32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af34:	6979      	ldr	r1, [r7, #20]
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	e841 2300 	strex	r3, r2, [r1]
 800af3c:	613b      	str	r3, [r7, #16]
   return(result);
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1e5      	bne.n	800af10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2220      	movs	r2, #32
 800af48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800af52:	bf00      	nop
 800af54:	3754      	adds	r7, #84	@ 0x54
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f7ff fd54 	bl	800aa20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af78:	bf00      	nop
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b21      	cmp	r3, #33	@ 0x21
 800af92:	d13e      	bne.n	800b012 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af9c:	d114      	bne.n	800afc8 <UART_Transmit_IT+0x48>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d110      	bne.n	800afc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	461a      	mov	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	1c9a      	adds	r2, r3, #2
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	621a      	str	r2, [r3, #32]
 800afc6:	e008      	b.n	800afda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a1b      	ldr	r3, [r3, #32]
 800afcc:	1c59      	adds	r1, r3, #1
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6211      	str	r1, [r2, #32]
 800afd2:	781a      	ldrb	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800afde:	b29b      	uxth	r3, r3
 800afe0:	3b01      	subs	r3, #1
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	4619      	mov	r1, r3
 800afe8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10f      	bne.n	800b00e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800affc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b00c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	e000      	b.n	800b014 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b012:	2302      	movs	r3, #2
  }
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b036:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2220      	movs	r2, #32
 800b03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff fce3 	bl	800aa0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08c      	sub	sp, #48	@ 0x30
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b22      	cmp	r3, #34	@ 0x22
 800b06a:	f040 80aa 	bne.w	800b1c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b076:	d115      	bne.n	800b0a4 <UART_Receive_IT+0x54>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d111      	bne.n	800b0a4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b092:	b29a      	uxth	r2, r3
 800b094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b096:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09c:	1c9a      	adds	r2, r3, #2
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	629a      	str	r2, [r3, #40]	@ 0x28
 800b0a2:	e024      	b.n	800b0ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0b2:	d007      	beq.n	800b0c4 <UART_Receive_IT+0x74>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <UART_Receive_IT+0x82>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	e008      	b.n	800b0e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d15d      	bne.n	800b1be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f022 0220 	bic.w	r2, r2, #32
 800b110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b120:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	695a      	ldr	r2, [r3, #20]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0201 	bic.w	r2, r2, #1
 800b130:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b144:	2b01      	cmp	r3, #1
 800b146:	d135      	bne.n	800b1b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	330c      	adds	r3, #12
 800b154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	613b      	str	r3, [r7, #16]
   return(result);
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	f023 0310 	bic.w	r3, r3, #16
 800b164:	627b      	str	r3, [r7, #36]	@ 0x24
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	330c      	adds	r3, #12
 800b16c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b16e:	623a      	str	r2, [r7, #32]
 800b170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	69f9      	ldr	r1, [r7, #28]
 800b174:	6a3a      	ldr	r2, [r7, #32]
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e5      	bne.n	800b14e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0310 	and.w	r3, r3, #16
 800b18c:	2b10      	cmp	r3, #16
 800b18e:	d10a      	bne.n	800b1a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff fc41 	bl	800aa34 <HAL_UARTEx_RxEventCallback>
 800b1b2:	e002      	b.n	800b1ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7f7 fe23 	bl	8002e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e002      	b.n	800b1c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e000      	b.n	800b1c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b1c2:	2302      	movs	r3, #2
  }
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3730      	adds	r7, #48	@ 0x30
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1d0:	b0c0      	sub	sp, #256	@ 0x100
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1e8:	68d9      	ldr	r1, [r3, #12]
 800b1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	ea40 0301 	orr.w	r3, r0, r1
 800b1f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	431a      	orrs	r2, r3
 800b204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	431a      	orrs	r2, r3
 800b20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	4313      	orrs	r3, r2
 800b214:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b224:	f021 010c 	bic.w	r1, r1, #12
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b232:	430b      	orrs	r3, r1
 800b234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	695b      	ldr	r3, [r3, #20]
 800b23e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b246:	6999      	ldr	r1, [r3, #24]
 800b248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	ea40 0301 	orr.w	r3, r0, r1
 800b252:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b8f      	ldr	r3, [pc, #572]	@ (800b498 <UART_SetConfig+0x2cc>)
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d005      	beq.n	800b26c <UART_SetConfig+0xa0>
 800b260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	4b8d      	ldr	r3, [pc, #564]	@ (800b49c <UART_SetConfig+0x2d0>)
 800b268:	429a      	cmp	r2, r3
 800b26a:	d104      	bne.n	800b276 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b26c:	f7fd fea0 	bl	8008fb0 <HAL_RCC_GetPCLK2Freq>
 800b270:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b274:	e003      	b.n	800b27e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b276:	f7fd fe87 	bl	8008f88 <HAL_RCC_GetPCLK1Freq>
 800b27a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b288:	f040 810c 	bne.w	800b4a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b28c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b290:	2200      	movs	r2, #0
 800b292:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b296:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b29a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b29e:	4622      	mov	r2, r4
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	1891      	adds	r1, r2, r2
 800b2a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b2a6:	415b      	adcs	r3, r3
 800b2a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	eb12 0801 	adds.w	r8, r2, r1
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	eb43 0901 	adc.w	r9, r3, r1
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	f04f 0300 	mov.w	r3, #0
 800b2c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2ce:	4690      	mov	r8, r2
 800b2d0:	4699      	mov	r9, r3
 800b2d2:	4623      	mov	r3, r4
 800b2d4:	eb18 0303 	adds.w	r3, r8, r3
 800b2d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2dc:	462b      	mov	r3, r5
 800b2de:	eb49 0303 	adc.w	r3, r9, r3
 800b2e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b2f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b2f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	18db      	adds	r3, r3, r3
 800b2fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800b300:	4613      	mov	r3, r2
 800b302:	eb42 0303 	adc.w	r3, r2, r3
 800b306:	657b      	str	r3, [r7, #84]	@ 0x54
 800b308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b30c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b310:	f7f5 fe38 	bl	8000f84 <__aeabi_uldivmod>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4b61      	ldr	r3, [pc, #388]	@ (800b4a0 <UART_SetConfig+0x2d4>)
 800b31a:	fba3 2302 	umull	r2, r3, r3, r2
 800b31e:	095b      	lsrs	r3, r3, #5
 800b320:	011c      	lsls	r4, r3, #4
 800b322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b326:	2200      	movs	r2, #0
 800b328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b32c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b330:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b334:	4642      	mov	r2, r8
 800b336:	464b      	mov	r3, r9
 800b338:	1891      	adds	r1, r2, r2
 800b33a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b33c:	415b      	adcs	r3, r3
 800b33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b340:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b344:	4641      	mov	r1, r8
 800b346:	eb12 0a01 	adds.w	sl, r2, r1
 800b34a:	4649      	mov	r1, r9
 800b34c:	eb43 0b01 	adc.w	fp, r3, r1
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	f04f 0300 	mov.w	r3, #0
 800b358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b35c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b364:	4692      	mov	sl, r2
 800b366:	469b      	mov	fp, r3
 800b368:	4643      	mov	r3, r8
 800b36a:	eb1a 0303 	adds.w	r3, sl, r3
 800b36e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b372:	464b      	mov	r3, r9
 800b374:	eb4b 0303 	adc.w	r3, fp, r3
 800b378:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b388:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b38c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b390:	460b      	mov	r3, r1
 800b392:	18db      	adds	r3, r3, r3
 800b394:	643b      	str	r3, [r7, #64]	@ 0x40
 800b396:	4613      	mov	r3, r2
 800b398:	eb42 0303 	adc.w	r3, r2, r3
 800b39c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b3a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b3a6:	f7f5 fded 	bl	8000f84 <__aeabi_uldivmod>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b4a0 <UART_SetConfig+0x2d4>)
 800b3b2:	fba3 2301 	umull	r2, r3, r3, r1
 800b3b6:	095b      	lsrs	r3, r3, #5
 800b3b8:	2264      	movs	r2, #100	@ 0x64
 800b3ba:	fb02 f303 	mul.w	r3, r2, r3
 800b3be:	1acb      	subs	r3, r1, r3
 800b3c0:	00db      	lsls	r3, r3, #3
 800b3c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b3c6:	4b36      	ldr	r3, [pc, #216]	@ (800b4a0 <UART_SetConfig+0x2d4>)
 800b3c8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3cc:	095b      	lsrs	r3, r3, #5
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b3d4:	441c      	add	r4, r3
 800b3d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b3e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	464b      	mov	r3, r9
 800b3ec:	1891      	adds	r1, r2, r2
 800b3ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b3f0:	415b      	adcs	r3, r3
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	1851      	adds	r1, r2, r1
 800b3fc:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3fe:	4649      	mov	r1, r9
 800b400:	414b      	adcs	r3, r1
 800b402:	637b      	str	r3, [r7, #52]	@ 0x34
 800b404:	f04f 0200 	mov.w	r2, #0
 800b408:	f04f 0300 	mov.w	r3, #0
 800b40c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b410:	4659      	mov	r1, fp
 800b412:	00cb      	lsls	r3, r1, #3
 800b414:	4651      	mov	r1, sl
 800b416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b41a:	4651      	mov	r1, sl
 800b41c:	00ca      	lsls	r2, r1, #3
 800b41e:	4610      	mov	r0, r2
 800b420:	4619      	mov	r1, r3
 800b422:	4603      	mov	r3, r0
 800b424:	4642      	mov	r2, r8
 800b426:	189b      	adds	r3, r3, r2
 800b428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b42c:	464b      	mov	r3, r9
 800b42e:	460a      	mov	r2, r1
 800b430:	eb42 0303 	adc.w	r3, r2, r3
 800b434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b444:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b44c:	460b      	mov	r3, r1
 800b44e:	18db      	adds	r3, r3, r3
 800b450:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b452:	4613      	mov	r3, r2
 800b454:	eb42 0303 	adc.w	r3, r2, r3
 800b458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b45a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b45e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b462:	f7f5 fd8f 	bl	8000f84 <__aeabi_uldivmod>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a0 <UART_SetConfig+0x2d4>)
 800b46c:	fba3 1302 	umull	r1, r3, r3, r2
 800b470:	095b      	lsrs	r3, r3, #5
 800b472:	2164      	movs	r1, #100	@ 0x64
 800b474:	fb01 f303 	mul.w	r3, r1, r3
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	3332      	adds	r3, #50	@ 0x32
 800b47e:	4a08      	ldr	r2, [pc, #32]	@ (800b4a0 <UART_SetConfig+0x2d4>)
 800b480:	fba2 2303 	umull	r2, r3, r2, r3
 800b484:	095b      	lsrs	r3, r3, #5
 800b486:	f003 0207 	and.w	r2, r3, #7
 800b48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4422      	add	r2, r4
 800b492:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b494:	e106      	b.n	800b6a4 <UART_SetConfig+0x4d8>
 800b496:	bf00      	nop
 800b498:	40011000 	.word	0x40011000
 800b49c:	40011400 	.word	0x40011400
 800b4a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b4ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b4b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	1891      	adds	r1, r2, r2
 800b4bc:	6239      	str	r1, [r7, #32]
 800b4be:	415b      	adcs	r3, r3
 800b4c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	1854      	adds	r4, r2, r1
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	eb43 0501 	adc.w	r5, r3, r1
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	f04f 0300 	mov.w	r3, #0
 800b4d8:	00eb      	lsls	r3, r5, #3
 800b4da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4de:	00e2      	lsls	r2, r4, #3
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	461d      	mov	r5, r3
 800b4e4:	4643      	mov	r3, r8
 800b4e6:	18e3      	adds	r3, r4, r3
 800b4e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4ec:	464b      	mov	r3, r9
 800b4ee:	eb45 0303 	adc.w	r3, r5, r3
 800b4f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b502:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b506:	f04f 0200 	mov.w	r2, #0
 800b50a:	f04f 0300 	mov.w	r3, #0
 800b50e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b512:	4629      	mov	r1, r5
 800b514:	008b      	lsls	r3, r1, #2
 800b516:	4621      	mov	r1, r4
 800b518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b51c:	4621      	mov	r1, r4
 800b51e:	008a      	lsls	r2, r1, #2
 800b520:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b524:	f7f5 fd2e 	bl	8000f84 <__aeabi_uldivmod>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4b60      	ldr	r3, [pc, #384]	@ (800b6b0 <UART_SetConfig+0x4e4>)
 800b52e:	fba3 2302 	umull	r2, r3, r3, r2
 800b532:	095b      	lsrs	r3, r3, #5
 800b534:	011c      	lsls	r4, r3, #4
 800b536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b540:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b544:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b548:	4642      	mov	r2, r8
 800b54a:	464b      	mov	r3, r9
 800b54c:	1891      	adds	r1, r2, r2
 800b54e:	61b9      	str	r1, [r7, #24]
 800b550:	415b      	adcs	r3, r3
 800b552:	61fb      	str	r3, [r7, #28]
 800b554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b558:	4641      	mov	r1, r8
 800b55a:	1851      	adds	r1, r2, r1
 800b55c:	6139      	str	r1, [r7, #16]
 800b55e:	4649      	mov	r1, r9
 800b560:	414b      	adcs	r3, r1
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b570:	4659      	mov	r1, fp
 800b572:	00cb      	lsls	r3, r1, #3
 800b574:	4651      	mov	r1, sl
 800b576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b57a:	4651      	mov	r1, sl
 800b57c:	00ca      	lsls	r2, r1, #3
 800b57e:	4610      	mov	r0, r2
 800b580:	4619      	mov	r1, r3
 800b582:	4603      	mov	r3, r0
 800b584:	4642      	mov	r2, r8
 800b586:	189b      	adds	r3, r3, r2
 800b588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b58c:	464b      	mov	r3, r9
 800b58e:	460a      	mov	r2, r1
 800b590:	eb42 0303 	adc.w	r3, r2, r3
 800b594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b5a4:	f04f 0200 	mov.w	r2, #0
 800b5a8:	f04f 0300 	mov.w	r3, #0
 800b5ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	008b      	lsls	r3, r1, #2
 800b5b4:	4641      	mov	r1, r8
 800b5b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5ba:	4641      	mov	r1, r8
 800b5bc:	008a      	lsls	r2, r1, #2
 800b5be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b5c2:	f7f5 fcdf 	bl	8000f84 <__aeabi_uldivmod>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	4b38      	ldr	r3, [pc, #224]	@ (800b6b0 <UART_SetConfig+0x4e4>)
 800b5ce:	fba3 2301 	umull	r2, r3, r3, r1
 800b5d2:	095b      	lsrs	r3, r3, #5
 800b5d4:	2264      	movs	r2, #100	@ 0x64
 800b5d6:	fb02 f303 	mul.w	r3, r2, r3
 800b5da:	1acb      	subs	r3, r1, r3
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	3332      	adds	r3, #50	@ 0x32
 800b5e0:	4a33      	ldr	r2, [pc, #204]	@ (800b6b0 <UART_SetConfig+0x4e4>)
 800b5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e6:	095b      	lsrs	r3, r3, #5
 800b5e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5ec:	441c      	add	r4, r3
 800b5ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5f6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b5f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b5fc:	4642      	mov	r2, r8
 800b5fe:	464b      	mov	r3, r9
 800b600:	1891      	adds	r1, r2, r2
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	415b      	adcs	r3, r3
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b60c:	4641      	mov	r1, r8
 800b60e:	1851      	adds	r1, r2, r1
 800b610:	6039      	str	r1, [r7, #0]
 800b612:	4649      	mov	r1, r9
 800b614:	414b      	adcs	r3, r1
 800b616:	607b      	str	r3, [r7, #4]
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b624:	4659      	mov	r1, fp
 800b626:	00cb      	lsls	r3, r1, #3
 800b628:	4651      	mov	r1, sl
 800b62a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b62e:	4651      	mov	r1, sl
 800b630:	00ca      	lsls	r2, r1, #3
 800b632:	4610      	mov	r0, r2
 800b634:	4619      	mov	r1, r3
 800b636:	4603      	mov	r3, r0
 800b638:	4642      	mov	r2, r8
 800b63a:	189b      	adds	r3, r3, r2
 800b63c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b63e:	464b      	mov	r3, r9
 800b640:	460a      	mov	r2, r1
 800b642:	eb42 0303 	adc.w	r3, r2, r3
 800b646:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	663b      	str	r3, [r7, #96]	@ 0x60
 800b652:	667a      	str	r2, [r7, #100]	@ 0x64
 800b654:	f04f 0200 	mov.w	r2, #0
 800b658:	f04f 0300 	mov.w	r3, #0
 800b65c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b660:	4649      	mov	r1, r9
 800b662:	008b      	lsls	r3, r1, #2
 800b664:	4641      	mov	r1, r8
 800b666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b66a:	4641      	mov	r1, r8
 800b66c:	008a      	lsls	r2, r1, #2
 800b66e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b672:	f7f5 fc87 	bl	8000f84 <__aeabi_uldivmod>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b0 <UART_SetConfig+0x4e4>)
 800b67c:	fba3 1302 	umull	r1, r3, r3, r2
 800b680:	095b      	lsrs	r3, r3, #5
 800b682:	2164      	movs	r1, #100	@ 0x64
 800b684:	fb01 f303 	mul.w	r3, r1, r3
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	3332      	adds	r3, #50	@ 0x32
 800b68e:	4a08      	ldr	r2, [pc, #32]	@ (800b6b0 <UART_SetConfig+0x4e4>)
 800b690:	fba2 2303 	umull	r2, r3, r2, r3
 800b694:	095b      	lsrs	r3, r3, #5
 800b696:	f003 020f 	and.w	r2, r3, #15
 800b69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4422      	add	r2, r4
 800b6a2:	609a      	str	r2, [r3, #8]
}
 800b6a4:	bf00      	nop
 800b6a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6b0:	51eb851f 	.word	0x51eb851f

0800b6b4 <calloc>:
 800b6b4:	4b02      	ldr	r3, [pc, #8]	@ (800b6c0 <calloc+0xc>)
 800b6b6:	460a      	mov	r2, r1
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	6818      	ldr	r0, [r3, #0]
 800b6bc:	f000 b802 	b.w	800b6c4 <_calloc_r>
 800b6c0:	20000044 	.word	0x20000044

0800b6c4 <_calloc_r>:
 800b6c4:	b570      	push	{r4, r5, r6, lr}
 800b6c6:	fba1 5402 	umull	r5, r4, r1, r2
 800b6ca:	b93c      	cbnz	r4, 800b6dc <_calloc_r+0x18>
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f000 f82f 	bl	800b730 <_malloc_r>
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	b928      	cbnz	r0, 800b6e2 <_calloc_r+0x1e>
 800b6d6:	2600      	movs	r6, #0
 800b6d8:	4630      	mov	r0, r6
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	220c      	movs	r2, #12
 800b6de:	6002      	str	r2, [r0, #0]
 800b6e0:	e7f9      	b.n	800b6d6 <_calloc_r+0x12>
 800b6e2:	462a      	mov	r2, r5
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	f001 f8b0 	bl	800c84a <memset>
 800b6ea:	e7f5      	b.n	800b6d8 <_calloc_r+0x14>

0800b6ec <sbrk_aligned>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	4e0f      	ldr	r6, [pc, #60]	@ (800b72c <sbrk_aligned+0x40>)
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	6831      	ldr	r1, [r6, #0]
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	b911      	cbnz	r1, 800b6fe <sbrk_aligned+0x12>
 800b6f8:	f001 f8fe 	bl	800c8f8 <_sbrk_r>
 800b6fc:	6030      	str	r0, [r6, #0]
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	f001 f8f9 	bl	800c8f8 <_sbrk_r>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	d103      	bne.n	800b712 <sbrk_aligned+0x26>
 800b70a:	f04f 34ff 	mov.w	r4, #4294967295
 800b70e:	4620      	mov	r0, r4
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	1cc4      	adds	r4, r0, #3
 800b714:	f024 0403 	bic.w	r4, r4, #3
 800b718:	42a0      	cmp	r0, r4
 800b71a:	d0f8      	beq.n	800b70e <sbrk_aligned+0x22>
 800b71c:	1a21      	subs	r1, r4, r0
 800b71e:	4628      	mov	r0, r5
 800b720:	f001 f8ea 	bl	800c8f8 <_sbrk_r>
 800b724:	3001      	adds	r0, #1
 800b726:	d1f2      	bne.n	800b70e <sbrk_aligned+0x22>
 800b728:	e7ef      	b.n	800b70a <sbrk_aligned+0x1e>
 800b72a:	bf00      	nop
 800b72c:	2000172c 	.word	0x2000172c

0800b730 <_malloc_r>:
 800b730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b734:	1ccd      	adds	r5, r1, #3
 800b736:	f025 0503 	bic.w	r5, r5, #3
 800b73a:	3508      	adds	r5, #8
 800b73c:	2d0c      	cmp	r5, #12
 800b73e:	bf38      	it	cc
 800b740:	250c      	movcc	r5, #12
 800b742:	2d00      	cmp	r5, #0
 800b744:	4606      	mov	r6, r0
 800b746:	db01      	blt.n	800b74c <_malloc_r+0x1c>
 800b748:	42a9      	cmp	r1, r5
 800b74a:	d904      	bls.n	800b756 <_malloc_r+0x26>
 800b74c:	230c      	movs	r3, #12
 800b74e:	6033      	str	r3, [r6, #0]
 800b750:	2000      	movs	r0, #0
 800b752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b82c <_malloc_r+0xfc>
 800b75a:	f000 f869 	bl	800b830 <__malloc_lock>
 800b75e:	f8d8 3000 	ldr.w	r3, [r8]
 800b762:	461c      	mov	r4, r3
 800b764:	bb44      	cbnz	r4, 800b7b8 <_malloc_r+0x88>
 800b766:	4629      	mov	r1, r5
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff ffbf 	bl	800b6ec <sbrk_aligned>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	4604      	mov	r4, r0
 800b772:	d158      	bne.n	800b826 <_malloc_r+0xf6>
 800b774:	f8d8 4000 	ldr.w	r4, [r8]
 800b778:	4627      	mov	r7, r4
 800b77a:	2f00      	cmp	r7, #0
 800b77c:	d143      	bne.n	800b806 <_malloc_r+0xd6>
 800b77e:	2c00      	cmp	r4, #0
 800b780:	d04b      	beq.n	800b81a <_malloc_r+0xea>
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	4639      	mov	r1, r7
 800b786:	4630      	mov	r0, r6
 800b788:	eb04 0903 	add.w	r9, r4, r3
 800b78c:	f001 f8b4 	bl	800c8f8 <_sbrk_r>
 800b790:	4581      	cmp	r9, r0
 800b792:	d142      	bne.n	800b81a <_malloc_r+0xea>
 800b794:	6821      	ldr	r1, [r4, #0]
 800b796:	1a6d      	subs	r5, r5, r1
 800b798:	4629      	mov	r1, r5
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7ff ffa6 	bl	800b6ec <sbrk_aligned>
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d03a      	beq.n	800b81a <_malloc_r+0xea>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	442b      	add	r3, r5
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	bb62      	cbnz	r2, 800b80c <_malloc_r+0xdc>
 800b7b2:	f8c8 7000 	str.w	r7, [r8]
 800b7b6:	e00f      	b.n	800b7d8 <_malloc_r+0xa8>
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	1b52      	subs	r2, r2, r5
 800b7bc:	d420      	bmi.n	800b800 <_malloc_r+0xd0>
 800b7be:	2a0b      	cmp	r2, #11
 800b7c0:	d917      	bls.n	800b7f2 <_malloc_r+0xc2>
 800b7c2:	1961      	adds	r1, r4, r5
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	6025      	str	r5, [r4, #0]
 800b7c8:	bf18      	it	ne
 800b7ca:	6059      	strne	r1, [r3, #4]
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	bf08      	it	eq
 800b7d0:	f8c8 1000 	streq.w	r1, [r8]
 800b7d4:	5162      	str	r2, [r4, r5]
 800b7d6:	604b      	str	r3, [r1, #4]
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f000 f82f 	bl	800b83c <__malloc_unlock>
 800b7de:	f104 000b 	add.w	r0, r4, #11
 800b7e2:	1d23      	adds	r3, r4, #4
 800b7e4:	f020 0007 	bic.w	r0, r0, #7
 800b7e8:	1ac2      	subs	r2, r0, r3
 800b7ea:	bf1c      	itt	ne
 800b7ec:	1a1b      	subne	r3, r3, r0
 800b7ee:	50a3      	strne	r3, [r4, r2]
 800b7f0:	e7af      	b.n	800b752 <_malloc_r+0x22>
 800b7f2:	6862      	ldr	r2, [r4, #4]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	bf0c      	ite	eq
 800b7f8:	f8c8 2000 	streq.w	r2, [r8]
 800b7fc:	605a      	strne	r2, [r3, #4]
 800b7fe:	e7eb      	b.n	800b7d8 <_malloc_r+0xa8>
 800b800:	4623      	mov	r3, r4
 800b802:	6864      	ldr	r4, [r4, #4]
 800b804:	e7ae      	b.n	800b764 <_malloc_r+0x34>
 800b806:	463c      	mov	r4, r7
 800b808:	687f      	ldr	r7, [r7, #4]
 800b80a:	e7b6      	b.n	800b77a <_malloc_r+0x4a>
 800b80c:	461a      	mov	r2, r3
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	42a3      	cmp	r3, r4
 800b812:	d1fb      	bne.n	800b80c <_malloc_r+0xdc>
 800b814:	2300      	movs	r3, #0
 800b816:	6053      	str	r3, [r2, #4]
 800b818:	e7de      	b.n	800b7d8 <_malloc_r+0xa8>
 800b81a:	230c      	movs	r3, #12
 800b81c:	6033      	str	r3, [r6, #0]
 800b81e:	4630      	mov	r0, r6
 800b820:	f000 f80c 	bl	800b83c <__malloc_unlock>
 800b824:	e794      	b.n	800b750 <_malloc_r+0x20>
 800b826:	6005      	str	r5, [r0, #0]
 800b828:	e7d6      	b.n	800b7d8 <_malloc_r+0xa8>
 800b82a:	bf00      	nop
 800b82c:	20001730 	.word	0x20001730

0800b830 <__malloc_lock>:
 800b830:	4801      	ldr	r0, [pc, #4]	@ (800b838 <__malloc_lock+0x8>)
 800b832:	f001 b8ae 	b.w	800c992 <__retarget_lock_acquire_recursive>
 800b836:	bf00      	nop
 800b838:	20001874 	.word	0x20001874

0800b83c <__malloc_unlock>:
 800b83c:	4801      	ldr	r0, [pc, #4]	@ (800b844 <__malloc_unlock+0x8>)
 800b83e:	f001 b8a9 	b.w	800c994 <__retarget_lock_release_recursive>
 800b842:	bf00      	nop
 800b844:	20001874 	.word	0x20001874

0800b848 <__cvt>:
 800b848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b84c:	ec57 6b10 	vmov	r6, r7, d0
 800b850:	2f00      	cmp	r7, #0
 800b852:	460c      	mov	r4, r1
 800b854:	4619      	mov	r1, r3
 800b856:	463b      	mov	r3, r7
 800b858:	bfbb      	ittet	lt
 800b85a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b85e:	461f      	movlt	r7, r3
 800b860:	2300      	movge	r3, #0
 800b862:	232d      	movlt	r3, #45	@ 0x2d
 800b864:	700b      	strb	r3, [r1, #0]
 800b866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b868:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b86c:	4691      	mov	r9, r2
 800b86e:	f023 0820 	bic.w	r8, r3, #32
 800b872:	bfbc      	itt	lt
 800b874:	4632      	movlt	r2, r6
 800b876:	4616      	movlt	r6, r2
 800b878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b87c:	d005      	beq.n	800b88a <__cvt+0x42>
 800b87e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b882:	d100      	bne.n	800b886 <__cvt+0x3e>
 800b884:	3401      	adds	r4, #1
 800b886:	2102      	movs	r1, #2
 800b888:	e000      	b.n	800b88c <__cvt+0x44>
 800b88a:	2103      	movs	r1, #3
 800b88c:	ab03      	add	r3, sp, #12
 800b88e:	9301      	str	r3, [sp, #4]
 800b890:	ab02      	add	r3, sp, #8
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	ec47 6b10 	vmov	d0, r6, r7
 800b898:	4653      	mov	r3, sl
 800b89a:	4622      	mov	r2, r4
 800b89c:	f001 f918 	bl	800cad0 <_dtoa_r>
 800b8a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	d119      	bne.n	800b8dc <__cvt+0x94>
 800b8a8:	f019 0f01 	tst.w	r9, #1
 800b8ac:	d00e      	beq.n	800b8cc <__cvt+0x84>
 800b8ae:	eb00 0904 	add.w	r9, r0, r4
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f5 f925 	bl	8000b08 <__aeabi_dcmpeq>
 800b8be:	b108      	cbz	r0, 800b8c4 <__cvt+0x7c>
 800b8c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8c4:	2230      	movs	r2, #48	@ 0x30
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	454b      	cmp	r3, r9
 800b8ca:	d31e      	bcc.n	800b90a <__cvt+0xc2>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8d0:	1b5b      	subs	r3, r3, r5
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	b004      	add	sp, #16
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8e0:	eb00 0904 	add.w	r9, r0, r4
 800b8e4:	d1e5      	bne.n	800b8b2 <__cvt+0x6a>
 800b8e6:	7803      	ldrb	r3, [r0, #0]
 800b8e8:	2b30      	cmp	r3, #48	@ 0x30
 800b8ea:	d10a      	bne.n	800b902 <__cvt+0xba>
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	f7f5 f908 	bl	8000b08 <__aeabi_dcmpeq>
 800b8f8:	b918      	cbnz	r0, 800b902 <__cvt+0xba>
 800b8fa:	f1c4 0401 	rsb	r4, r4, #1
 800b8fe:	f8ca 4000 	str.w	r4, [sl]
 800b902:	f8da 3000 	ldr.w	r3, [sl]
 800b906:	4499      	add	r9, r3
 800b908:	e7d3      	b.n	800b8b2 <__cvt+0x6a>
 800b90a:	1c59      	adds	r1, r3, #1
 800b90c:	9103      	str	r1, [sp, #12]
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	e7d9      	b.n	800b8c6 <__cvt+0x7e>

0800b912 <__exponent>:
 800b912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b914:	2900      	cmp	r1, #0
 800b916:	bfba      	itte	lt
 800b918:	4249      	neglt	r1, r1
 800b91a:	232d      	movlt	r3, #45	@ 0x2d
 800b91c:	232b      	movge	r3, #43	@ 0x2b
 800b91e:	2909      	cmp	r1, #9
 800b920:	7002      	strb	r2, [r0, #0]
 800b922:	7043      	strb	r3, [r0, #1]
 800b924:	dd29      	ble.n	800b97a <__exponent+0x68>
 800b926:	f10d 0307 	add.w	r3, sp, #7
 800b92a:	461d      	mov	r5, r3
 800b92c:	270a      	movs	r7, #10
 800b92e:	461a      	mov	r2, r3
 800b930:	fbb1 f6f7 	udiv	r6, r1, r7
 800b934:	fb07 1416 	mls	r4, r7, r6, r1
 800b938:	3430      	adds	r4, #48	@ 0x30
 800b93a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b93e:	460c      	mov	r4, r1
 800b940:	2c63      	cmp	r4, #99	@ 0x63
 800b942:	f103 33ff 	add.w	r3, r3, #4294967295
 800b946:	4631      	mov	r1, r6
 800b948:	dcf1      	bgt.n	800b92e <__exponent+0x1c>
 800b94a:	3130      	adds	r1, #48	@ 0x30
 800b94c:	1e94      	subs	r4, r2, #2
 800b94e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b952:	1c41      	adds	r1, r0, #1
 800b954:	4623      	mov	r3, r4
 800b956:	42ab      	cmp	r3, r5
 800b958:	d30a      	bcc.n	800b970 <__exponent+0x5e>
 800b95a:	f10d 0309 	add.w	r3, sp, #9
 800b95e:	1a9b      	subs	r3, r3, r2
 800b960:	42ac      	cmp	r4, r5
 800b962:	bf88      	it	hi
 800b964:	2300      	movhi	r3, #0
 800b966:	3302      	adds	r3, #2
 800b968:	4403      	add	r3, r0
 800b96a:	1a18      	subs	r0, r3, r0
 800b96c:	b003      	add	sp, #12
 800b96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b970:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b974:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b978:	e7ed      	b.n	800b956 <__exponent+0x44>
 800b97a:	2330      	movs	r3, #48	@ 0x30
 800b97c:	3130      	adds	r1, #48	@ 0x30
 800b97e:	7083      	strb	r3, [r0, #2]
 800b980:	70c1      	strb	r1, [r0, #3]
 800b982:	1d03      	adds	r3, r0, #4
 800b984:	e7f1      	b.n	800b96a <__exponent+0x58>
	...

0800b988 <_printf_float>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	b08d      	sub	sp, #52	@ 0x34
 800b98e:	460c      	mov	r4, r1
 800b990:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b994:	4616      	mov	r6, r2
 800b996:	461f      	mov	r7, r3
 800b998:	4605      	mov	r5, r0
 800b99a:	f000 ff75 	bl	800c888 <_localeconv_r>
 800b99e:	6803      	ldr	r3, [r0, #0]
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f4 fc84 	bl	80002b0 <strlen>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b0:	9005      	str	r0, [sp, #20]
 800b9b2:	3307      	adds	r3, #7
 800b9b4:	f023 0307 	bic.w	r3, r3, #7
 800b9b8:	f103 0208 	add.w	r2, r3, #8
 800b9bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b9c0:	f8d4 b000 	ldr.w	fp, [r4]
 800b9c4:	f8c8 2000 	str.w	r2, [r8]
 800b9c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b9d0:	9307      	str	r3, [sp, #28]
 800b9d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9de:	4b9c      	ldr	r3, [pc, #624]	@ (800bc50 <_printf_float+0x2c8>)
 800b9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e4:	f7f5 f8c2 	bl	8000b6c <__aeabi_dcmpun>
 800b9e8:	bb70      	cbnz	r0, 800ba48 <_printf_float+0xc0>
 800b9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9ee:	4b98      	ldr	r3, [pc, #608]	@ (800bc50 <_printf_float+0x2c8>)
 800b9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f4:	f7f5 f89c 	bl	8000b30 <__aeabi_dcmple>
 800b9f8:	bb30      	cbnz	r0, 800ba48 <_printf_float+0xc0>
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4640      	mov	r0, r8
 800ba00:	4649      	mov	r1, r9
 800ba02:	f7f5 f88b 	bl	8000b1c <__aeabi_dcmplt>
 800ba06:	b110      	cbz	r0, 800ba0e <_printf_float+0x86>
 800ba08:	232d      	movs	r3, #45	@ 0x2d
 800ba0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba0e:	4a91      	ldr	r2, [pc, #580]	@ (800bc54 <_printf_float+0x2cc>)
 800ba10:	4b91      	ldr	r3, [pc, #580]	@ (800bc58 <_printf_float+0x2d0>)
 800ba12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba16:	bf94      	ite	ls
 800ba18:	4690      	movls	r8, r2
 800ba1a:	4698      	movhi	r8, r3
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	f02b 0304 	bic.w	r3, fp, #4
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	f04f 0900 	mov.w	r9, #0
 800ba2a:	9700      	str	r7, [sp, #0]
 800ba2c:	4633      	mov	r3, r6
 800ba2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba30:	4621      	mov	r1, r4
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 f9d2 	bl	800bddc <_printf_common>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	f040 808d 	bne.w	800bb58 <_printf_float+0x1d0>
 800ba3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba42:	b00d      	add	sp, #52	@ 0x34
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4649      	mov	r1, r9
 800ba50:	f7f5 f88c 	bl	8000b6c <__aeabi_dcmpun>
 800ba54:	b140      	cbz	r0, 800ba68 <_printf_float+0xe0>
 800ba56:	464b      	mov	r3, r9
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfbc      	itt	lt
 800ba5c:	232d      	movlt	r3, #45	@ 0x2d
 800ba5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba62:	4a7e      	ldr	r2, [pc, #504]	@ (800bc5c <_printf_float+0x2d4>)
 800ba64:	4b7e      	ldr	r3, [pc, #504]	@ (800bc60 <_printf_float+0x2d8>)
 800ba66:	e7d4      	b.n	800ba12 <_printf_float+0x8a>
 800ba68:	6863      	ldr	r3, [r4, #4]
 800ba6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ba6e:	9206      	str	r2, [sp, #24]
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	d13b      	bne.n	800baec <_printf_float+0x164>
 800ba74:	2306      	movs	r3, #6
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	6022      	str	r2, [r4, #0]
 800ba80:	9303      	str	r3, [sp, #12]
 800ba82:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba84:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba88:	ab09      	add	r3, sp, #36	@ 0x24
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	6861      	ldr	r1, [r4, #4]
 800ba8e:	ec49 8b10 	vmov	d0, r8, r9
 800ba92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba96:	4628      	mov	r0, r5
 800ba98:	f7ff fed6 	bl	800b848 <__cvt>
 800ba9c:	9b06      	ldr	r3, [sp, #24]
 800ba9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800baa0:	2b47      	cmp	r3, #71	@ 0x47
 800baa2:	4680      	mov	r8, r0
 800baa4:	d129      	bne.n	800bafa <_printf_float+0x172>
 800baa6:	1cc8      	adds	r0, r1, #3
 800baa8:	db02      	blt.n	800bab0 <_printf_float+0x128>
 800baaa:	6863      	ldr	r3, [r4, #4]
 800baac:	4299      	cmp	r1, r3
 800baae:	dd41      	ble.n	800bb34 <_printf_float+0x1ac>
 800bab0:	f1aa 0a02 	sub.w	sl, sl, #2
 800bab4:	fa5f fa8a 	uxtb.w	sl, sl
 800bab8:	3901      	subs	r1, #1
 800baba:	4652      	mov	r2, sl
 800babc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bac0:	9109      	str	r1, [sp, #36]	@ 0x24
 800bac2:	f7ff ff26 	bl	800b912 <__exponent>
 800bac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bac8:	1813      	adds	r3, r2, r0
 800baca:	2a01      	cmp	r2, #1
 800bacc:	4681      	mov	r9, r0
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	dc02      	bgt.n	800bad8 <_printf_float+0x150>
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	07d2      	lsls	r2, r2, #31
 800bad6:	d501      	bpl.n	800badc <_printf_float+0x154>
 800bad8:	3301      	adds	r3, #1
 800bada:	6123      	str	r3, [r4, #16]
 800badc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d0a2      	beq.n	800ba2a <_printf_float+0xa2>
 800bae4:	232d      	movs	r3, #45	@ 0x2d
 800bae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baea:	e79e      	b.n	800ba2a <_printf_float+0xa2>
 800baec:	9a06      	ldr	r2, [sp, #24]
 800baee:	2a47      	cmp	r2, #71	@ 0x47
 800baf0:	d1c2      	bne.n	800ba78 <_printf_float+0xf0>
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1c0      	bne.n	800ba78 <_printf_float+0xf0>
 800baf6:	2301      	movs	r3, #1
 800baf8:	e7bd      	b.n	800ba76 <_printf_float+0xee>
 800bafa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bafe:	d9db      	bls.n	800bab8 <_printf_float+0x130>
 800bb00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb04:	d118      	bne.n	800bb38 <_printf_float+0x1b0>
 800bb06:	2900      	cmp	r1, #0
 800bb08:	6863      	ldr	r3, [r4, #4]
 800bb0a:	dd0b      	ble.n	800bb24 <_printf_float+0x19c>
 800bb0c:	6121      	str	r1, [r4, #16]
 800bb0e:	b913      	cbnz	r3, 800bb16 <_printf_float+0x18e>
 800bb10:	6822      	ldr	r2, [r4, #0]
 800bb12:	07d0      	lsls	r0, r2, #31
 800bb14:	d502      	bpl.n	800bb1c <_printf_float+0x194>
 800bb16:	3301      	adds	r3, #1
 800bb18:	440b      	add	r3, r1
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb1e:	f04f 0900 	mov.w	r9, #0
 800bb22:	e7db      	b.n	800badc <_printf_float+0x154>
 800bb24:	b913      	cbnz	r3, 800bb2c <_printf_float+0x1a4>
 800bb26:	6822      	ldr	r2, [r4, #0]
 800bb28:	07d2      	lsls	r2, r2, #31
 800bb2a:	d501      	bpl.n	800bb30 <_printf_float+0x1a8>
 800bb2c:	3302      	adds	r3, #2
 800bb2e:	e7f4      	b.n	800bb1a <_printf_float+0x192>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e7f2      	b.n	800bb1a <_printf_float+0x192>
 800bb34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	db05      	blt.n	800bb4a <_printf_float+0x1c2>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	6121      	str	r1, [r4, #16]
 800bb42:	07d8      	lsls	r0, r3, #31
 800bb44:	d5ea      	bpl.n	800bb1c <_printf_float+0x194>
 800bb46:	1c4b      	adds	r3, r1, #1
 800bb48:	e7e7      	b.n	800bb1a <_printf_float+0x192>
 800bb4a:	2900      	cmp	r1, #0
 800bb4c:	bfd4      	ite	le
 800bb4e:	f1c1 0202 	rsble	r2, r1, #2
 800bb52:	2201      	movgt	r2, #1
 800bb54:	4413      	add	r3, r2
 800bb56:	e7e0      	b.n	800bb1a <_printf_float+0x192>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	055a      	lsls	r2, r3, #21
 800bb5c:	d407      	bmi.n	800bb6e <_printf_float+0x1e6>
 800bb5e:	6923      	ldr	r3, [r4, #16]
 800bb60:	4642      	mov	r2, r8
 800bb62:	4631      	mov	r1, r6
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b8      	blx	r7
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d12b      	bne.n	800bbc4 <_printf_float+0x23c>
 800bb6c:	e767      	b.n	800ba3e <_printf_float+0xb6>
 800bb6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb72:	f240 80dd 	bls.w	800bd30 <_printf_float+0x3a8>
 800bb76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f7f4 ffc3 	bl	8000b08 <__aeabi_dcmpeq>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d033      	beq.n	800bbee <_printf_float+0x266>
 800bb86:	4a37      	ldr	r2, [pc, #220]	@ (800bc64 <_printf_float+0x2dc>)
 800bb88:	2301      	movs	r3, #1
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	47b8      	blx	r7
 800bb90:	3001      	adds	r0, #1
 800bb92:	f43f af54 	beq.w	800ba3e <_printf_float+0xb6>
 800bb96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb9a:	4543      	cmp	r3, r8
 800bb9c:	db02      	blt.n	800bba4 <_printf_float+0x21c>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	07d8      	lsls	r0, r3, #31
 800bba2:	d50f      	bpl.n	800bbc4 <_printf_float+0x23c>
 800bba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	47b8      	blx	r7
 800bbae:	3001      	adds	r0, #1
 800bbb0:	f43f af45 	beq.w	800ba3e <_printf_float+0xb6>
 800bbb4:	f04f 0900 	mov.w	r9, #0
 800bbb8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbbc:	f104 0a1a 	add.w	sl, r4, #26
 800bbc0:	45c8      	cmp	r8, r9
 800bbc2:	dc09      	bgt.n	800bbd8 <_printf_float+0x250>
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	079b      	lsls	r3, r3, #30
 800bbc8:	f100 8103 	bmi.w	800bdd2 <_printf_float+0x44a>
 800bbcc:	68e0      	ldr	r0, [r4, #12]
 800bbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd0:	4298      	cmp	r0, r3
 800bbd2:	bfb8      	it	lt
 800bbd4:	4618      	movlt	r0, r3
 800bbd6:	e734      	b.n	800ba42 <_printf_float+0xba>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	4652      	mov	r2, sl
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4628      	mov	r0, r5
 800bbe0:	47b8      	blx	r7
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	f43f af2b 	beq.w	800ba3e <_printf_float+0xb6>
 800bbe8:	f109 0901 	add.w	r9, r9, #1
 800bbec:	e7e8      	b.n	800bbc0 <_printf_float+0x238>
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc39      	bgt.n	800bc68 <_printf_float+0x2e0>
 800bbf4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc64 <_printf_float+0x2dc>)
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	47b8      	blx	r7
 800bbfe:	3001      	adds	r0, #1
 800bc00:	f43f af1d 	beq.w	800ba3e <_printf_float+0xb6>
 800bc04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc08:	ea59 0303 	orrs.w	r3, r9, r3
 800bc0c:	d102      	bne.n	800bc14 <_printf_float+0x28c>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	07d9      	lsls	r1, r3, #31
 800bc12:	d5d7      	bpl.n	800bbc4 <_printf_float+0x23c>
 800bc14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	47b8      	blx	r7
 800bc1e:	3001      	adds	r0, #1
 800bc20:	f43f af0d 	beq.w	800ba3e <_printf_float+0xb6>
 800bc24:	f04f 0a00 	mov.w	sl, #0
 800bc28:	f104 0b1a 	add.w	fp, r4, #26
 800bc2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc2e:	425b      	negs	r3, r3
 800bc30:	4553      	cmp	r3, sl
 800bc32:	dc01      	bgt.n	800bc38 <_printf_float+0x2b0>
 800bc34:	464b      	mov	r3, r9
 800bc36:	e793      	b.n	800bb60 <_printf_float+0x1d8>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	465a      	mov	r2, fp
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f aefb 	beq.w	800ba3e <_printf_float+0xb6>
 800bc48:	f10a 0a01 	add.w	sl, sl, #1
 800bc4c:	e7ee      	b.n	800bc2c <_printf_float+0x2a4>
 800bc4e:	bf00      	nop
 800bc50:	7fefffff 	.word	0x7fefffff
 800bc54:	08012094 	.word	0x08012094
 800bc58:	08012098 	.word	0x08012098
 800bc5c:	0801209c 	.word	0x0801209c
 800bc60:	080120a0 	.word	0x080120a0
 800bc64:	08012430 	.word	0x08012430
 800bc68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc6e:	4553      	cmp	r3, sl
 800bc70:	bfa8      	it	ge
 800bc72:	4653      	movge	r3, sl
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	4699      	mov	r9, r3
 800bc78:	dc36      	bgt.n	800bce8 <_printf_float+0x360>
 800bc7a:	f04f 0b00 	mov.w	fp, #0
 800bc7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc82:	f104 021a 	add.w	r2, r4, #26
 800bc86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc88:	9306      	str	r3, [sp, #24]
 800bc8a:	eba3 0309 	sub.w	r3, r3, r9
 800bc8e:	455b      	cmp	r3, fp
 800bc90:	dc31      	bgt.n	800bcf6 <_printf_float+0x36e>
 800bc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc94:	459a      	cmp	sl, r3
 800bc96:	dc3a      	bgt.n	800bd0e <_printf_float+0x386>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	07da      	lsls	r2, r3, #31
 800bc9c:	d437      	bmi.n	800bd0e <_printf_float+0x386>
 800bc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca0:	ebaa 0903 	sub.w	r9, sl, r3
 800bca4:	9b06      	ldr	r3, [sp, #24]
 800bca6:	ebaa 0303 	sub.w	r3, sl, r3
 800bcaa:	4599      	cmp	r9, r3
 800bcac:	bfa8      	it	ge
 800bcae:	4699      	movge	r9, r3
 800bcb0:	f1b9 0f00 	cmp.w	r9, #0
 800bcb4:	dc33      	bgt.n	800bd1e <_printf_float+0x396>
 800bcb6:	f04f 0800 	mov.w	r8, #0
 800bcba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcbe:	f104 0b1a 	add.w	fp, r4, #26
 800bcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc4:	ebaa 0303 	sub.w	r3, sl, r3
 800bcc8:	eba3 0309 	sub.w	r3, r3, r9
 800bccc:	4543      	cmp	r3, r8
 800bcce:	f77f af79 	ble.w	800bbc4 <_printf_float+0x23c>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	465a      	mov	r2, fp
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b8      	blx	r7
 800bcdc:	3001      	adds	r0, #1
 800bcde:	f43f aeae 	beq.w	800ba3e <_printf_float+0xb6>
 800bce2:	f108 0801 	add.w	r8, r8, #1
 800bce6:	e7ec      	b.n	800bcc2 <_printf_float+0x33a>
 800bce8:	4642      	mov	r2, r8
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d1c2      	bne.n	800bc7a <_printf_float+0x2f2>
 800bcf4:	e6a3      	b.n	800ba3e <_printf_float+0xb6>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	9206      	str	r2, [sp, #24]
 800bcfe:	47b8      	blx	r7
 800bd00:	3001      	adds	r0, #1
 800bd02:	f43f ae9c 	beq.w	800ba3e <_printf_float+0xb6>
 800bd06:	9a06      	ldr	r2, [sp, #24]
 800bd08:	f10b 0b01 	add.w	fp, fp, #1
 800bd0c:	e7bb      	b.n	800bc86 <_printf_float+0x2fe>
 800bd0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd12:	4631      	mov	r1, r6
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d1c0      	bne.n	800bc9e <_printf_float+0x316>
 800bd1c:	e68f      	b.n	800ba3e <_printf_float+0xb6>
 800bd1e:	9a06      	ldr	r2, [sp, #24]
 800bd20:	464b      	mov	r3, r9
 800bd22:	4442      	add	r2, r8
 800bd24:	4631      	mov	r1, r6
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b8      	blx	r7
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d1c3      	bne.n	800bcb6 <_printf_float+0x32e>
 800bd2e:	e686      	b.n	800ba3e <_printf_float+0xb6>
 800bd30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd34:	f1ba 0f01 	cmp.w	sl, #1
 800bd38:	dc01      	bgt.n	800bd3e <_printf_float+0x3b6>
 800bd3a:	07db      	lsls	r3, r3, #31
 800bd3c:	d536      	bpl.n	800bdac <_printf_float+0x424>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	4642      	mov	r2, r8
 800bd42:	4631      	mov	r1, r6
 800bd44:	4628      	mov	r0, r5
 800bd46:	47b8      	blx	r7
 800bd48:	3001      	adds	r0, #1
 800bd4a:	f43f ae78 	beq.w	800ba3e <_printf_float+0xb6>
 800bd4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd52:	4631      	mov	r1, r6
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	f43f ae70 	beq.w	800ba3e <_printf_float+0xb6>
 800bd5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd62:	2200      	movs	r2, #0
 800bd64:	2300      	movs	r3, #0
 800bd66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd6a:	f7f4 fecd 	bl	8000b08 <__aeabi_dcmpeq>
 800bd6e:	b9c0      	cbnz	r0, 800bda2 <_printf_float+0x41a>
 800bd70:	4653      	mov	r3, sl
 800bd72:	f108 0201 	add.w	r2, r8, #1
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b8      	blx	r7
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	d10c      	bne.n	800bd9a <_printf_float+0x412>
 800bd80:	e65d      	b.n	800ba3e <_printf_float+0xb6>
 800bd82:	2301      	movs	r3, #1
 800bd84:	465a      	mov	r2, fp
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b8      	blx	r7
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	f43f ae56 	beq.w	800ba3e <_printf_float+0xb6>
 800bd92:	f108 0801 	add.w	r8, r8, #1
 800bd96:	45d0      	cmp	r8, sl
 800bd98:	dbf3      	blt.n	800bd82 <_printf_float+0x3fa>
 800bd9a:	464b      	mov	r3, r9
 800bd9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bda0:	e6df      	b.n	800bb62 <_printf_float+0x1da>
 800bda2:	f04f 0800 	mov.w	r8, #0
 800bda6:	f104 0b1a 	add.w	fp, r4, #26
 800bdaa:	e7f4      	b.n	800bd96 <_printf_float+0x40e>
 800bdac:	2301      	movs	r3, #1
 800bdae:	4642      	mov	r2, r8
 800bdb0:	e7e1      	b.n	800bd76 <_printf_float+0x3ee>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	464a      	mov	r2, r9
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	f43f ae3e 	beq.w	800ba3e <_printf_float+0xb6>
 800bdc2:	f108 0801 	add.w	r8, r8, #1
 800bdc6:	68e3      	ldr	r3, [r4, #12]
 800bdc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdca:	1a5b      	subs	r3, r3, r1
 800bdcc:	4543      	cmp	r3, r8
 800bdce:	dcf0      	bgt.n	800bdb2 <_printf_float+0x42a>
 800bdd0:	e6fc      	b.n	800bbcc <_printf_float+0x244>
 800bdd2:	f04f 0800 	mov.w	r8, #0
 800bdd6:	f104 0919 	add.w	r9, r4, #25
 800bdda:	e7f4      	b.n	800bdc6 <_printf_float+0x43e>

0800bddc <_printf_common>:
 800bddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde0:	4616      	mov	r6, r2
 800bde2:	4698      	mov	r8, r3
 800bde4:	688a      	ldr	r2, [r1, #8]
 800bde6:	690b      	ldr	r3, [r1, #16]
 800bde8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdec:	4293      	cmp	r3, r2
 800bdee:	bfb8      	it	lt
 800bdf0:	4613      	movlt	r3, r2
 800bdf2:	6033      	str	r3, [r6, #0]
 800bdf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	460c      	mov	r4, r1
 800bdfc:	b10a      	cbz	r2, 800be02 <_printf_common+0x26>
 800bdfe:	3301      	adds	r3, #1
 800be00:	6033      	str	r3, [r6, #0]
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	0699      	lsls	r1, r3, #26
 800be06:	bf42      	ittt	mi
 800be08:	6833      	ldrmi	r3, [r6, #0]
 800be0a:	3302      	addmi	r3, #2
 800be0c:	6033      	strmi	r3, [r6, #0]
 800be0e:	6825      	ldr	r5, [r4, #0]
 800be10:	f015 0506 	ands.w	r5, r5, #6
 800be14:	d106      	bne.n	800be24 <_printf_common+0x48>
 800be16:	f104 0a19 	add.w	sl, r4, #25
 800be1a:	68e3      	ldr	r3, [r4, #12]
 800be1c:	6832      	ldr	r2, [r6, #0]
 800be1e:	1a9b      	subs	r3, r3, r2
 800be20:	42ab      	cmp	r3, r5
 800be22:	dc26      	bgt.n	800be72 <_printf_common+0x96>
 800be24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be28:	6822      	ldr	r2, [r4, #0]
 800be2a:	3b00      	subs	r3, #0
 800be2c:	bf18      	it	ne
 800be2e:	2301      	movne	r3, #1
 800be30:	0692      	lsls	r2, r2, #26
 800be32:	d42b      	bmi.n	800be8c <_printf_common+0xb0>
 800be34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be38:	4641      	mov	r1, r8
 800be3a:	4638      	mov	r0, r7
 800be3c:	47c8      	blx	r9
 800be3e:	3001      	adds	r0, #1
 800be40:	d01e      	beq.n	800be80 <_printf_common+0xa4>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	6922      	ldr	r2, [r4, #16]
 800be46:	f003 0306 	and.w	r3, r3, #6
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	bf02      	ittt	eq
 800be4e:	68e5      	ldreq	r5, [r4, #12]
 800be50:	6833      	ldreq	r3, [r6, #0]
 800be52:	1aed      	subeq	r5, r5, r3
 800be54:	68a3      	ldr	r3, [r4, #8]
 800be56:	bf0c      	ite	eq
 800be58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be5c:	2500      	movne	r5, #0
 800be5e:	4293      	cmp	r3, r2
 800be60:	bfc4      	itt	gt
 800be62:	1a9b      	subgt	r3, r3, r2
 800be64:	18ed      	addgt	r5, r5, r3
 800be66:	2600      	movs	r6, #0
 800be68:	341a      	adds	r4, #26
 800be6a:	42b5      	cmp	r5, r6
 800be6c:	d11a      	bne.n	800bea4 <_printf_common+0xc8>
 800be6e:	2000      	movs	r0, #0
 800be70:	e008      	b.n	800be84 <_printf_common+0xa8>
 800be72:	2301      	movs	r3, #1
 800be74:	4652      	mov	r2, sl
 800be76:	4641      	mov	r1, r8
 800be78:	4638      	mov	r0, r7
 800be7a:	47c8      	blx	r9
 800be7c:	3001      	adds	r0, #1
 800be7e:	d103      	bne.n	800be88 <_printf_common+0xac>
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be88:	3501      	adds	r5, #1
 800be8a:	e7c6      	b.n	800be1a <_printf_common+0x3e>
 800be8c:	18e1      	adds	r1, r4, r3
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	2030      	movs	r0, #48	@ 0x30
 800be92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be96:	4422      	add	r2, r4
 800be98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bea0:	3302      	adds	r3, #2
 800bea2:	e7c7      	b.n	800be34 <_printf_common+0x58>
 800bea4:	2301      	movs	r3, #1
 800bea6:	4622      	mov	r2, r4
 800bea8:	4641      	mov	r1, r8
 800beaa:	4638      	mov	r0, r7
 800beac:	47c8      	blx	r9
 800beae:	3001      	adds	r0, #1
 800beb0:	d0e6      	beq.n	800be80 <_printf_common+0xa4>
 800beb2:	3601      	adds	r6, #1
 800beb4:	e7d9      	b.n	800be6a <_printf_common+0x8e>
	...

0800beb8 <_printf_i>:
 800beb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bebc:	7e0f      	ldrb	r7, [r1, #24]
 800bebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bec0:	2f78      	cmp	r7, #120	@ 0x78
 800bec2:	4691      	mov	r9, r2
 800bec4:	4680      	mov	r8, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	469a      	mov	sl, r3
 800beca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bece:	d807      	bhi.n	800bee0 <_printf_i+0x28>
 800bed0:	2f62      	cmp	r7, #98	@ 0x62
 800bed2:	d80a      	bhi.n	800beea <_printf_i+0x32>
 800bed4:	2f00      	cmp	r7, #0
 800bed6:	f000 80d2 	beq.w	800c07e <_printf_i+0x1c6>
 800beda:	2f58      	cmp	r7, #88	@ 0x58
 800bedc:	f000 80b9 	beq.w	800c052 <_printf_i+0x19a>
 800bee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bee8:	e03a      	b.n	800bf60 <_printf_i+0xa8>
 800beea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800beee:	2b15      	cmp	r3, #21
 800bef0:	d8f6      	bhi.n	800bee0 <_printf_i+0x28>
 800bef2:	a101      	add	r1, pc, #4	@ (adr r1, 800bef8 <_printf_i+0x40>)
 800bef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bef8:	0800bf51 	.word	0x0800bf51
 800befc:	0800bf65 	.word	0x0800bf65
 800bf00:	0800bee1 	.word	0x0800bee1
 800bf04:	0800bee1 	.word	0x0800bee1
 800bf08:	0800bee1 	.word	0x0800bee1
 800bf0c:	0800bee1 	.word	0x0800bee1
 800bf10:	0800bf65 	.word	0x0800bf65
 800bf14:	0800bee1 	.word	0x0800bee1
 800bf18:	0800bee1 	.word	0x0800bee1
 800bf1c:	0800bee1 	.word	0x0800bee1
 800bf20:	0800bee1 	.word	0x0800bee1
 800bf24:	0800c065 	.word	0x0800c065
 800bf28:	0800bf8f 	.word	0x0800bf8f
 800bf2c:	0800c01f 	.word	0x0800c01f
 800bf30:	0800bee1 	.word	0x0800bee1
 800bf34:	0800bee1 	.word	0x0800bee1
 800bf38:	0800c087 	.word	0x0800c087
 800bf3c:	0800bee1 	.word	0x0800bee1
 800bf40:	0800bf8f 	.word	0x0800bf8f
 800bf44:	0800bee1 	.word	0x0800bee1
 800bf48:	0800bee1 	.word	0x0800bee1
 800bf4c:	0800c027 	.word	0x0800c027
 800bf50:	6833      	ldr	r3, [r6, #0]
 800bf52:	1d1a      	adds	r2, r3, #4
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6032      	str	r2, [r6, #0]
 800bf58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf60:	2301      	movs	r3, #1
 800bf62:	e09d      	b.n	800c0a0 <_printf_i+0x1e8>
 800bf64:	6833      	ldr	r3, [r6, #0]
 800bf66:	6820      	ldr	r0, [r4, #0]
 800bf68:	1d19      	adds	r1, r3, #4
 800bf6a:	6031      	str	r1, [r6, #0]
 800bf6c:	0606      	lsls	r6, r0, #24
 800bf6e:	d501      	bpl.n	800bf74 <_printf_i+0xbc>
 800bf70:	681d      	ldr	r5, [r3, #0]
 800bf72:	e003      	b.n	800bf7c <_printf_i+0xc4>
 800bf74:	0645      	lsls	r5, r0, #25
 800bf76:	d5fb      	bpl.n	800bf70 <_printf_i+0xb8>
 800bf78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf7c:	2d00      	cmp	r5, #0
 800bf7e:	da03      	bge.n	800bf88 <_printf_i+0xd0>
 800bf80:	232d      	movs	r3, #45	@ 0x2d
 800bf82:	426d      	negs	r5, r5
 800bf84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf88:	4859      	ldr	r0, [pc, #356]	@ (800c0f0 <_printf_i+0x238>)
 800bf8a:	230a      	movs	r3, #10
 800bf8c:	e011      	b.n	800bfb2 <_printf_i+0xfa>
 800bf8e:	6821      	ldr	r1, [r4, #0]
 800bf90:	6833      	ldr	r3, [r6, #0]
 800bf92:	0608      	lsls	r0, r1, #24
 800bf94:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf98:	d402      	bmi.n	800bfa0 <_printf_i+0xe8>
 800bf9a:	0649      	lsls	r1, r1, #25
 800bf9c:	bf48      	it	mi
 800bf9e:	b2ad      	uxthmi	r5, r5
 800bfa0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfa2:	4853      	ldr	r0, [pc, #332]	@ (800c0f0 <_printf_i+0x238>)
 800bfa4:	6033      	str	r3, [r6, #0]
 800bfa6:	bf14      	ite	ne
 800bfa8:	230a      	movne	r3, #10
 800bfaa:	2308      	moveq	r3, #8
 800bfac:	2100      	movs	r1, #0
 800bfae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfb2:	6866      	ldr	r6, [r4, #4]
 800bfb4:	60a6      	str	r6, [r4, #8]
 800bfb6:	2e00      	cmp	r6, #0
 800bfb8:	bfa2      	ittt	ge
 800bfba:	6821      	ldrge	r1, [r4, #0]
 800bfbc:	f021 0104 	bicge.w	r1, r1, #4
 800bfc0:	6021      	strge	r1, [r4, #0]
 800bfc2:	b90d      	cbnz	r5, 800bfc8 <_printf_i+0x110>
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	d04b      	beq.n	800c060 <_printf_i+0x1a8>
 800bfc8:	4616      	mov	r6, r2
 800bfca:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfce:	fb03 5711 	mls	r7, r3, r1, r5
 800bfd2:	5dc7      	ldrb	r7, [r0, r7]
 800bfd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfd8:	462f      	mov	r7, r5
 800bfda:	42bb      	cmp	r3, r7
 800bfdc:	460d      	mov	r5, r1
 800bfde:	d9f4      	bls.n	800bfca <_printf_i+0x112>
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d10b      	bne.n	800bffc <_printf_i+0x144>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	07df      	lsls	r7, r3, #31
 800bfe8:	d508      	bpl.n	800bffc <_printf_i+0x144>
 800bfea:	6923      	ldr	r3, [r4, #16]
 800bfec:	6861      	ldr	r1, [r4, #4]
 800bfee:	4299      	cmp	r1, r3
 800bff0:	bfde      	ittt	le
 800bff2:	2330      	movle	r3, #48	@ 0x30
 800bff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bff8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bffc:	1b92      	subs	r2, r2, r6
 800bffe:	6122      	str	r2, [r4, #16]
 800c000:	f8cd a000 	str.w	sl, [sp]
 800c004:	464b      	mov	r3, r9
 800c006:	aa03      	add	r2, sp, #12
 800c008:	4621      	mov	r1, r4
 800c00a:	4640      	mov	r0, r8
 800c00c:	f7ff fee6 	bl	800bddc <_printf_common>
 800c010:	3001      	adds	r0, #1
 800c012:	d14a      	bne.n	800c0aa <_printf_i+0x1f2>
 800c014:	f04f 30ff 	mov.w	r0, #4294967295
 800c018:	b004      	add	sp, #16
 800c01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	f043 0320 	orr.w	r3, r3, #32
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	4833      	ldr	r0, [pc, #204]	@ (800c0f4 <_printf_i+0x23c>)
 800c028:	2778      	movs	r7, #120	@ 0x78
 800c02a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	6831      	ldr	r1, [r6, #0]
 800c032:	061f      	lsls	r7, r3, #24
 800c034:	f851 5b04 	ldr.w	r5, [r1], #4
 800c038:	d402      	bmi.n	800c040 <_printf_i+0x188>
 800c03a:	065f      	lsls	r7, r3, #25
 800c03c:	bf48      	it	mi
 800c03e:	b2ad      	uxthmi	r5, r5
 800c040:	6031      	str	r1, [r6, #0]
 800c042:	07d9      	lsls	r1, r3, #31
 800c044:	bf44      	itt	mi
 800c046:	f043 0320 	orrmi.w	r3, r3, #32
 800c04a:	6023      	strmi	r3, [r4, #0]
 800c04c:	b11d      	cbz	r5, 800c056 <_printf_i+0x19e>
 800c04e:	2310      	movs	r3, #16
 800c050:	e7ac      	b.n	800bfac <_printf_i+0xf4>
 800c052:	4827      	ldr	r0, [pc, #156]	@ (800c0f0 <_printf_i+0x238>)
 800c054:	e7e9      	b.n	800c02a <_printf_i+0x172>
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	f023 0320 	bic.w	r3, r3, #32
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	e7f6      	b.n	800c04e <_printf_i+0x196>
 800c060:	4616      	mov	r6, r2
 800c062:	e7bd      	b.n	800bfe0 <_printf_i+0x128>
 800c064:	6833      	ldr	r3, [r6, #0]
 800c066:	6825      	ldr	r5, [r4, #0]
 800c068:	6961      	ldr	r1, [r4, #20]
 800c06a:	1d18      	adds	r0, r3, #4
 800c06c:	6030      	str	r0, [r6, #0]
 800c06e:	062e      	lsls	r6, r5, #24
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	d501      	bpl.n	800c078 <_printf_i+0x1c0>
 800c074:	6019      	str	r1, [r3, #0]
 800c076:	e002      	b.n	800c07e <_printf_i+0x1c6>
 800c078:	0668      	lsls	r0, r5, #25
 800c07a:	d5fb      	bpl.n	800c074 <_printf_i+0x1bc>
 800c07c:	8019      	strh	r1, [r3, #0]
 800c07e:	2300      	movs	r3, #0
 800c080:	6123      	str	r3, [r4, #16]
 800c082:	4616      	mov	r6, r2
 800c084:	e7bc      	b.n	800c000 <_printf_i+0x148>
 800c086:	6833      	ldr	r3, [r6, #0]
 800c088:	1d1a      	adds	r2, r3, #4
 800c08a:	6032      	str	r2, [r6, #0]
 800c08c:	681e      	ldr	r6, [r3, #0]
 800c08e:	6862      	ldr	r2, [r4, #4]
 800c090:	2100      	movs	r1, #0
 800c092:	4630      	mov	r0, r6
 800c094:	f7f4 f8bc 	bl	8000210 <memchr>
 800c098:	b108      	cbz	r0, 800c09e <_printf_i+0x1e6>
 800c09a:	1b80      	subs	r0, r0, r6
 800c09c:	6060      	str	r0, [r4, #4]
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	6123      	str	r3, [r4, #16]
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0a8:	e7aa      	b.n	800c000 <_printf_i+0x148>
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	4632      	mov	r2, r6
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	47d0      	blx	sl
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d0ad      	beq.n	800c014 <_printf_i+0x15c>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	079b      	lsls	r3, r3, #30
 800c0bc:	d413      	bmi.n	800c0e6 <_printf_i+0x22e>
 800c0be:	68e0      	ldr	r0, [r4, #12]
 800c0c0:	9b03      	ldr	r3, [sp, #12]
 800c0c2:	4298      	cmp	r0, r3
 800c0c4:	bfb8      	it	lt
 800c0c6:	4618      	movlt	r0, r3
 800c0c8:	e7a6      	b.n	800c018 <_printf_i+0x160>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4632      	mov	r2, r6
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	47d0      	blx	sl
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d09d      	beq.n	800c014 <_printf_i+0x15c>
 800c0d8:	3501      	adds	r5, #1
 800c0da:	68e3      	ldr	r3, [r4, #12]
 800c0dc:	9903      	ldr	r1, [sp, #12]
 800c0de:	1a5b      	subs	r3, r3, r1
 800c0e0:	42ab      	cmp	r3, r5
 800c0e2:	dcf2      	bgt.n	800c0ca <_printf_i+0x212>
 800c0e4:	e7eb      	b.n	800c0be <_printf_i+0x206>
 800c0e6:	2500      	movs	r5, #0
 800c0e8:	f104 0619 	add.w	r6, r4, #25
 800c0ec:	e7f5      	b.n	800c0da <_printf_i+0x222>
 800c0ee:	bf00      	nop
 800c0f0:	080120a4 	.word	0x080120a4
 800c0f4:	080120b5 	.word	0x080120b5

0800c0f8 <_scanf_float>:
 800c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	b087      	sub	sp, #28
 800c0fe:	4617      	mov	r7, r2
 800c100:	9303      	str	r3, [sp, #12]
 800c102:	688b      	ldr	r3, [r1, #8]
 800c104:	1e5a      	subs	r2, r3, #1
 800c106:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c10a:	bf81      	itttt	hi
 800c10c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c110:	eb03 0b05 	addhi.w	fp, r3, r5
 800c114:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c118:	608b      	strhi	r3, [r1, #8]
 800c11a:	680b      	ldr	r3, [r1, #0]
 800c11c:	460a      	mov	r2, r1
 800c11e:	f04f 0500 	mov.w	r5, #0
 800c122:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c126:	f842 3b1c 	str.w	r3, [r2], #28
 800c12a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c12e:	4680      	mov	r8, r0
 800c130:	460c      	mov	r4, r1
 800c132:	bf98      	it	ls
 800c134:	f04f 0b00 	movls.w	fp, #0
 800c138:	9201      	str	r2, [sp, #4]
 800c13a:	4616      	mov	r6, r2
 800c13c:	46aa      	mov	sl, r5
 800c13e:	46a9      	mov	r9, r5
 800c140:	9502      	str	r5, [sp, #8]
 800c142:	68a2      	ldr	r2, [r4, #8]
 800c144:	b152      	cbz	r2, 800c15c <_scanf_float+0x64>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c14c:	d864      	bhi.n	800c218 <_scanf_float+0x120>
 800c14e:	2b40      	cmp	r3, #64	@ 0x40
 800c150:	d83c      	bhi.n	800c1cc <_scanf_float+0xd4>
 800c152:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c156:	b2c8      	uxtb	r0, r1
 800c158:	280e      	cmp	r0, #14
 800c15a:	d93a      	bls.n	800c1d2 <_scanf_float+0xda>
 800c15c:	f1b9 0f00 	cmp.w	r9, #0
 800c160:	d003      	beq.n	800c16a <_scanf_float+0x72>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c16e:	f1ba 0f01 	cmp.w	sl, #1
 800c172:	f200 8117 	bhi.w	800c3a4 <_scanf_float+0x2ac>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	429e      	cmp	r6, r3
 800c17a:	f200 8108 	bhi.w	800c38e <_scanf_float+0x296>
 800c17e:	2001      	movs	r0, #1
 800c180:	b007      	add	sp, #28
 800c182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c186:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c18a:	2a0d      	cmp	r2, #13
 800c18c:	d8e6      	bhi.n	800c15c <_scanf_float+0x64>
 800c18e:	a101      	add	r1, pc, #4	@ (adr r1, 800c194 <_scanf_float+0x9c>)
 800c190:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c194:	0800c2db 	.word	0x0800c2db
 800c198:	0800c15d 	.word	0x0800c15d
 800c19c:	0800c15d 	.word	0x0800c15d
 800c1a0:	0800c15d 	.word	0x0800c15d
 800c1a4:	0800c33b 	.word	0x0800c33b
 800c1a8:	0800c313 	.word	0x0800c313
 800c1ac:	0800c15d 	.word	0x0800c15d
 800c1b0:	0800c15d 	.word	0x0800c15d
 800c1b4:	0800c2e9 	.word	0x0800c2e9
 800c1b8:	0800c15d 	.word	0x0800c15d
 800c1bc:	0800c15d 	.word	0x0800c15d
 800c1c0:	0800c15d 	.word	0x0800c15d
 800c1c4:	0800c15d 	.word	0x0800c15d
 800c1c8:	0800c2a1 	.word	0x0800c2a1
 800c1cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c1d0:	e7db      	b.n	800c18a <_scanf_float+0x92>
 800c1d2:	290e      	cmp	r1, #14
 800c1d4:	d8c2      	bhi.n	800c15c <_scanf_float+0x64>
 800c1d6:	a001      	add	r0, pc, #4	@ (adr r0, 800c1dc <_scanf_float+0xe4>)
 800c1d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c1dc:	0800c291 	.word	0x0800c291
 800c1e0:	0800c15d 	.word	0x0800c15d
 800c1e4:	0800c291 	.word	0x0800c291
 800c1e8:	0800c327 	.word	0x0800c327
 800c1ec:	0800c15d 	.word	0x0800c15d
 800c1f0:	0800c239 	.word	0x0800c239
 800c1f4:	0800c277 	.word	0x0800c277
 800c1f8:	0800c277 	.word	0x0800c277
 800c1fc:	0800c277 	.word	0x0800c277
 800c200:	0800c277 	.word	0x0800c277
 800c204:	0800c277 	.word	0x0800c277
 800c208:	0800c277 	.word	0x0800c277
 800c20c:	0800c277 	.word	0x0800c277
 800c210:	0800c277 	.word	0x0800c277
 800c214:	0800c277 	.word	0x0800c277
 800c218:	2b6e      	cmp	r3, #110	@ 0x6e
 800c21a:	d809      	bhi.n	800c230 <_scanf_float+0x138>
 800c21c:	2b60      	cmp	r3, #96	@ 0x60
 800c21e:	d8b2      	bhi.n	800c186 <_scanf_float+0x8e>
 800c220:	2b54      	cmp	r3, #84	@ 0x54
 800c222:	d07b      	beq.n	800c31c <_scanf_float+0x224>
 800c224:	2b59      	cmp	r3, #89	@ 0x59
 800c226:	d199      	bne.n	800c15c <_scanf_float+0x64>
 800c228:	2d07      	cmp	r5, #7
 800c22a:	d197      	bne.n	800c15c <_scanf_float+0x64>
 800c22c:	2508      	movs	r5, #8
 800c22e:	e02c      	b.n	800c28a <_scanf_float+0x192>
 800c230:	2b74      	cmp	r3, #116	@ 0x74
 800c232:	d073      	beq.n	800c31c <_scanf_float+0x224>
 800c234:	2b79      	cmp	r3, #121	@ 0x79
 800c236:	e7f6      	b.n	800c226 <_scanf_float+0x12e>
 800c238:	6821      	ldr	r1, [r4, #0]
 800c23a:	05c8      	lsls	r0, r1, #23
 800c23c:	d51b      	bpl.n	800c276 <_scanf_float+0x17e>
 800c23e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c242:	6021      	str	r1, [r4, #0]
 800c244:	f109 0901 	add.w	r9, r9, #1
 800c248:	f1bb 0f00 	cmp.w	fp, #0
 800c24c:	d003      	beq.n	800c256 <_scanf_float+0x15e>
 800c24e:	3201      	adds	r2, #1
 800c250:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c254:	60a2      	str	r2, [r4, #8]
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	3b01      	subs	r3, #1
 800c25a:	60a3      	str	r3, [r4, #8]
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	3301      	adds	r3, #1
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3b01      	subs	r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
 800c26a:	f340 8087 	ble.w	800c37c <_scanf_float+0x284>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	3301      	adds	r3, #1
 800c272:	603b      	str	r3, [r7, #0]
 800c274:	e765      	b.n	800c142 <_scanf_float+0x4a>
 800c276:	eb1a 0105 	adds.w	r1, sl, r5
 800c27a:	f47f af6f 	bne.w	800c15c <_scanf_float+0x64>
 800c27e:	6822      	ldr	r2, [r4, #0]
 800c280:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c284:	6022      	str	r2, [r4, #0]
 800c286:	460d      	mov	r5, r1
 800c288:	468a      	mov	sl, r1
 800c28a:	f806 3b01 	strb.w	r3, [r6], #1
 800c28e:	e7e2      	b.n	800c256 <_scanf_float+0x15e>
 800c290:	6822      	ldr	r2, [r4, #0]
 800c292:	0610      	lsls	r0, r2, #24
 800c294:	f57f af62 	bpl.w	800c15c <_scanf_float+0x64>
 800c298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c29c:	6022      	str	r2, [r4, #0]
 800c29e:	e7f4      	b.n	800c28a <_scanf_float+0x192>
 800c2a0:	f1ba 0f00 	cmp.w	sl, #0
 800c2a4:	d10e      	bne.n	800c2c4 <_scanf_float+0x1cc>
 800c2a6:	f1b9 0f00 	cmp.w	r9, #0
 800c2aa:	d10e      	bne.n	800c2ca <_scanf_float+0x1d2>
 800c2ac:	6822      	ldr	r2, [r4, #0]
 800c2ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c2b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c2b6:	d108      	bne.n	800c2ca <_scanf_float+0x1d2>
 800c2b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c2bc:	6022      	str	r2, [r4, #0]
 800c2be:	f04f 0a01 	mov.w	sl, #1
 800c2c2:	e7e2      	b.n	800c28a <_scanf_float+0x192>
 800c2c4:	f1ba 0f02 	cmp.w	sl, #2
 800c2c8:	d055      	beq.n	800c376 <_scanf_float+0x27e>
 800c2ca:	2d01      	cmp	r5, #1
 800c2cc:	d002      	beq.n	800c2d4 <_scanf_float+0x1dc>
 800c2ce:	2d04      	cmp	r5, #4
 800c2d0:	f47f af44 	bne.w	800c15c <_scanf_float+0x64>
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	b2ed      	uxtb	r5, r5
 800c2d8:	e7d7      	b.n	800c28a <_scanf_float+0x192>
 800c2da:	f1ba 0f01 	cmp.w	sl, #1
 800c2de:	f47f af3d 	bne.w	800c15c <_scanf_float+0x64>
 800c2e2:	f04f 0a02 	mov.w	sl, #2
 800c2e6:	e7d0      	b.n	800c28a <_scanf_float+0x192>
 800c2e8:	b97d      	cbnz	r5, 800c30a <_scanf_float+0x212>
 800c2ea:	f1b9 0f00 	cmp.w	r9, #0
 800c2ee:	f47f af38 	bne.w	800c162 <_scanf_float+0x6a>
 800c2f2:	6822      	ldr	r2, [r4, #0]
 800c2f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c2f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c2fc:	f040 8108 	bne.w	800c510 <_scanf_float+0x418>
 800c300:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c304:	6022      	str	r2, [r4, #0]
 800c306:	2501      	movs	r5, #1
 800c308:	e7bf      	b.n	800c28a <_scanf_float+0x192>
 800c30a:	2d03      	cmp	r5, #3
 800c30c:	d0e2      	beq.n	800c2d4 <_scanf_float+0x1dc>
 800c30e:	2d05      	cmp	r5, #5
 800c310:	e7de      	b.n	800c2d0 <_scanf_float+0x1d8>
 800c312:	2d02      	cmp	r5, #2
 800c314:	f47f af22 	bne.w	800c15c <_scanf_float+0x64>
 800c318:	2503      	movs	r5, #3
 800c31a:	e7b6      	b.n	800c28a <_scanf_float+0x192>
 800c31c:	2d06      	cmp	r5, #6
 800c31e:	f47f af1d 	bne.w	800c15c <_scanf_float+0x64>
 800c322:	2507      	movs	r5, #7
 800c324:	e7b1      	b.n	800c28a <_scanf_float+0x192>
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	0591      	lsls	r1, r2, #22
 800c32a:	f57f af17 	bpl.w	800c15c <_scanf_float+0x64>
 800c32e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	f8cd 9008 	str.w	r9, [sp, #8]
 800c338:	e7a7      	b.n	800c28a <_scanf_float+0x192>
 800c33a:	6822      	ldr	r2, [r4, #0]
 800c33c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c340:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c344:	d006      	beq.n	800c354 <_scanf_float+0x25c>
 800c346:	0550      	lsls	r0, r2, #21
 800c348:	f57f af08 	bpl.w	800c15c <_scanf_float+0x64>
 800c34c:	f1b9 0f00 	cmp.w	r9, #0
 800c350:	f000 80de 	beq.w	800c510 <_scanf_float+0x418>
 800c354:	0591      	lsls	r1, r2, #22
 800c356:	bf58      	it	pl
 800c358:	9902      	ldrpl	r1, [sp, #8]
 800c35a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c35e:	bf58      	it	pl
 800c360:	eba9 0101 	subpl.w	r1, r9, r1
 800c364:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c368:	bf58      	it	pl
 800c36a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c36e:	6022      	str	r2, [r4, #0]
 800c370:	f04f 0900 	mov.w	r9, #0
 800c374:	e789      	b.n	800c28a <_scanf_float+0x192>
 800c376:	f04f 0a03 	mov.w	sl, #3
 800c37a:	e786      	b.n	800c28a <_scanf_float+0x192>
 800c37c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c380:	4639      	mov	r1, r7
 800c382:	4640      	mov	r0, r8
 800c384:	4798      	blx	r3
 800c386:	2800      	cmp	r0, #0
 800c388:	f43f aedb 	beq.w	800c142 <_scanf_float+0x4a>
 800c38c:	e6e6      	b.n	800c15c <_scanf_float+0x64>
 800c38e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c396:	463a      	mov	r2, r7
 800c398:	4640      	mov	r0, r8
 800c39a:	4798      	blx	r3
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	6123      	str	r3, [r4, #16]
 800c3a2:	e6e8      	b.n	800c176 <_scanf_float+0x7e>
 800c3a4:	1e6b      	subs	r3, r5, #1
 800c3a6:	2b06      	cmp	r3, #6
 800c3a8:	d824      	bhi.n	800c3f4 <_scanf_float+0x2fc>
 800c3aa:	2d02      	cmp	r5, #2
 800c3ac:	d836      	bhi.n	800c41c <_scanf_float+0x324>
 800c3ae:	9b01      	ldr	r3, [sp, #4]
 800c3b0:	429e      	cmp	r6, r3
 800c3b2:	f67f aee4 	bls.w	800c17e <_scanf_float+0x86>
 800c3b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3be:	463a      	mov	r2, r7
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	4798      	blx	r3
 800c3c4:	6923      	ldr	r3, [r4, #16]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	6123      	str	r3, [r4, #16]
 800c3ca:	e7f0      	b.n	800c3ae <_scanf_float+0x2b6>
 800c3cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c3d4:	463a      	mov	r2, r7
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	4798      	blx	r3
 800c3da:	6923      	ldr	r3, [r4, #16]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3e4:	fa5f fa8a 	uxtb.w	sl, sl
 800c3e8:	f1ba 0f02 	cmp.w	sl, #2
 800c3ec:	d1ee      	bne.n	800c3cc <_scanf_float+0x2d4>
 800c3ee:	3d03      	subs	r5, #3
 800c3f0:	b2ed      	uxtb	r5, r5
 800c3f2:	1b76      	subs	r6, r6, r5
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	05da      	lsls	r2, r3, #23
 800c3f8:	d530      	bpl.n	800c45c <_scanf_float+0x364>
 800c3fa:	055b      	lsls	r3, r3, #21
 800c3fc:	d511      	bpl.n	800c422 <_scanf_float+0x32a>
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	429e      	cmp	r6, r3
 800c402:	f67f aebc 	bls.w	800c17e <_scanf_float+0x86>
 800c406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c40a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c40e:	463a      	mov	r2, r7
 800c410:	4640      	mov	r0, r8
 800c412:	4798      	blx	r3
 800c414:	6923      	ldr	r3, [r4, #16]
 800c416:	3b01      	subs	r3, #1
 800c418:	6123      	str	r3, [r4, #16]
 800c41a:	e7f0      	b.n	800c3fe <_scanf_float+0x306>
 800c41c:	46aa      	mov	sl, r5
 800c41e:	46b3      	mov	fp, r6
 800c420:	e7de      	b.n	800c3e0 <_scanf_float+0x2e8>
 800c422:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c426:	6923      	ldr	r3, [r4, #16]
 800c428:	2965      	cmp	r1, #101	@ 0x65
 800c42a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c42e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	d00c      	beq.n	800c450 <_scanf_float+0x358>
 800c436:	2945      	cmp	r1, #69	@ 0x45
 800c438:	d00a      	beq.n	800c450 <_scanf_float+0x358>
 800c43a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c43e:	463a      	mov	r2, r7
 800c440:	4640      	mov	r0, r8
 800c442:	4798      	blx	r3
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	1eb5      	subs	r5, r6, #2
 800c44e:	6123      	str	r3, [r4, #16]
 800c450:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c454:	463a      	mov	r2, r7
 800c456:	4640      	mov	r0, r8
 800c458:	4798      	blx	r3
 800c45a:	462e      	mov	r6, r5
 800c45c:	6822      	ldr	r2, [r4, #0]
 800c45e:	f012 0210 	ands.w	r2, r2, #16
 800c462:	d001      	beq.n	800c468 <_scanf_float+0x370>
 800c464:	2000      	movs	r0, #0
 800c466:	e68b      	b.n	800c180 <_scanf_float+0x88>
 800c468:	7032      	strb	r2, [r6, #0]
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c474:	d11c      	bne.n	800c4b0 <_scanf_float+0x3b8>
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	454b      	cmp	r3, r9
 800c47a:	eba3 0209 	sub.w	r2, r3, r9
 800c47e:	d123      	bne.n	800c4c8 <_scanf_float+0x3d0>
 800c480:	9901      	ldr	r1, [sp, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	4640      	mov	r0, r8
 800c486:	f002 fbef 	bl	800ec68 <_strtod_r>
 800c48a:	9b03      	ldr	r3, [sp, #12]
 800c48c:	6821      	ldr	r1, [r4, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f011 0f02 	tst.w	r1, #2
 800c494:	ec57 6b10 	vmov	r6, r7, d0
 800c498:	f103 0204 	add.w	r2, r3, #4
 800c49c:	d01f      	beq.n	800c4de <_scanf_float+0x3e6>
 800c49e:	9903      	ldr	r1, [sp, #12]
 800c4a0:	600a      	str	r2, [r1, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	e9c3 6700 	strd	r6, r7, [r3]
 800c4a8:	68e3      	ldr	r3, [r4, #12]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	60e3      	str	r3, [r4, #12]
 800c4ae:	e7d9      	b.n	800c464 <_scanf_float+0x36c>
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d0e4      	beq.n	800c480 <_scanf_float+0x388>
 800c4b6:	9905      	ldr	r1, [sp, #20]
 800c4b8:	230a      	movs	r3, #10
 800c4ba:	3101      	adds	r1, #1
 800c4bc:	4640      	mov	r0, r8
 800c4be:	f002 fc53 	bl	800ed68 <_strtol_r>
 800c4c2:	9b04      	ldr	r3, [sp, #16]
 800c4c4:	9e05      	ldr	r6, [sp, #20]
 800c4c6:	1ac2      	subs	r2, r0, r3
 800c4c8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c4cc:	429e      	cmp	r6, r3
 800c4ce:	bf28      	it	cs
 800c4d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c4d4:	4910      	ldr	r1, [pc, #64]	@ (800c518 <_scanf_float+0x420>)
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f000 f918 	bl	800c70c <siprintf>
 800c4dc:	e7d0      	b.n	800c480 <_scanf_float+0x388>
 800c4de:	f011 0f04 	tst.w	r1, #4
 800c4e2:	9903      	ldr	r1, [sp, #12]
 800c4e4:	600a      	str	r2, [r1, #0]
 800c4e6:	d1dc      	bne.n	800c4a2 <_scanf_float+0x3aa>
 800c4e8:	681d      	ldr	r5, [r3, #0]
 800c4ea:	4632      	mov	r2, r6
 800c4ec:	463b      	mov	r3, r7
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	f7f4 fb3b 	bl	8000b6c <__aeabi_dcmpun>
 800c4f6:	b128      	cbz	r0, 800c504 <_scanf_float+0x40c>
 800c4f8:	4808      	ldr	r0, [pc, #32]	@ (800c51c <_scanf_float+0x424>)
 800c4fa:	f000 fa5b 	bl	800c9b4 <nanf>
 800c4fe:	ed85 0a00 	vstr	s0, [r5]
 800c502:	e7d1      	b.n	800c4a8 <_scanf_float+0x3b0>
 800c504:	4630      	mov	r0, r6
 800c506:	4639      	mov	r1, r7
 800c508:	f7f4 fb8e 	bl	8000c28 <__aeabi_d2f>
 800c50c:	6028      	str	r0, [r5, #0]
 800c50e:	e7cb      	b.n	800c4a8 <_scanf_float+0x3b0>
 800c510:	f04f 0900 	mov.w	r9, #0
 800c514:	e629      	b.n	800c16a <_scanf_float+0x72>
 800c516:	bf00      	nop
 800c518:	080120c6 	.word	0x080120c6
 800c51c:	08012478 	.word	0x08012478

0800c520 <std>:
 800c520:	2300      	movs	r3, #0
 800c522:	b510      	push	{r4, lr}
 800c524:	4604      	mov	r4, r0
 800c526:	e9c0 3300 	strd	r3, r3, [r0]
 800c52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c52e:	6083      	str	r3, [r0, #8]
 800c530:	8181      	strh	r1, [r0, #12]
 800c532:	6643      	str	r3, [r0, #100]	@ 0x64
 800c534:	81c2      	strh	r2, [r0, #14]
 800c536:	6183      	str	r3, [r0, #24]
 800c538:	4619      	mov	r1, r3
 800c53a:	2208      	movs	r2, #8
 800c53c:	305c      	adds	r0, #92	@ 0x5c
 800c53e:	f000 f984 	bl	800c84a <memset>
 800c542:	4b0d      	ldr	r3, [pc, #52]	@ (800c578 <std+0x58>)
 800c544:	6263      	str	r3, [r4, #36]	@ 0x24
 800c546:	4b0d      	ldr	r3, [pc, #52]	@ (800c57c <std+0x5c>)
 800c548:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c54a:	4b0d      	ldr	r3, [pc, #52]	@ (800c580 <std+0x60>)
 800c54c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c54e:	4b0d      	ldr	r3, [pc, #52]	@ (800c584 <std+0x64>)
 800c550:	6323      	str	r3, [r4, #48]	@ 0x30
 800c552:	4b0d      	ldr	r3, [pc, #52]	@ (800c588 <std+0x68>)
 800c554:	6224      	str	r4, [r4, #32]
 800c556:	429c      	cmp	r4, r3
 800c558:	d006      	beq.n	800c568 <std+0x48>
 800c55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c55e:	4294      	cmp	r4, r2
 800c560:	d002      	beq.n	800c568 <std+0x48>
 800c562:	33d0      	adds	r3, #208	@ 0xd0
 800c564:	429c      	cmp	r4, r3
 800c566:	d105      	bne.n	800c574 <std+0x54>
 800c568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c570:	f000 ba0e 	b.w	800c990 <__retarget_lock_init_recursive>
 800c574:	bd10      	pop	{r4, pc}
 800c576:	bf00      	nop
 800c578:	0800c7a1 	.word	0x0800c7a1
 800c57c:	0800c7c7 	.word	0x0800c7c7
 800c580:	0800c7ff 	.word	0x0800c7ff
 800c584:	0800c823 	.word	0x0800c823
 800c588:	20001734 	.word	0x20001734

0800c58c <stdio_exit_handler>:
 800c58c:	4a02      	ldr	r2, [pc, #8]	@ (800c598 <stdio_exit_handler+0xc>)
 800c58e:	4903      	ldr	r1, [pc, #12]	@ (800c59c <stdio_exit_handler+0x10>)
 800c590:	4803      	ldr	r0, [pc, #12]	@ (800c5a0 <stdio_exit_handler+0x14>)
 800c592:	f000 b869 	b.w	800c668 <_fwalk_sglue>
 800c596:	bf00      	nop
 800c598:	20000038 	.word	0x20000038
 800c59c:	0800f759 	.word	0x0800f759
 800c5a0:	20000048 	.word	0x20000048

0800c5a4 <cleanup_stdio>:
 800c5a4:	6841      	ldr	r1, [r0, #4]
 800c5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <cleanup_stdio+0x34>)
 800c5a8:	4299      	cmp	r1, r3
 800c5aa:	b510      	push	{r4, lr}
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	d001      	beq.n	800c5b4 <cleanup_stdio+0x10>
 800c5b0:	f003 f8d2 	bl	800f758 <_fflush_r>
 800c5b4:	68a1      	ldr	r1, [r4, #8]
 800c5b6:	4b09      	ldr	r3, [pc, #36]	@ (800c5dc <cleanup_stdio+0x38>)
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	d002      	beq.n	800c5c2 <cleanup_stdio+0x1e>
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f003 f8cb 	bl	800f758 <_fflush_r>
 800c5c2:	68e1      	ldr	r1, [r4, #12]
 800c5c4:	4b06      	ldr	r3, [pc, #24]	@ (800c5e0 <cleanup_stdio+0x3c>)
 800c5c6:	4299      	cmp	r1, r3
 800c5c8:	d004      	beq.n	800c5d4 <cleanup_stdio+0x30>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d0:	f003 b8c2 	b.w	800f758 <_fflush_r>
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20001734 	.word	0x20001734
 800c5dc:	2000179c 	.word	0x2000179c
 800c5e0:	20001804 	.word	0x20001804

0800c5e4 <global_stdio_init.part.0>:
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c614 <global_stdio_init.part.0+0x30>)
 800c5e8:	4c0b      	ldr	r4, [pc, #44]	@ (800c618 <global_stdio_init.part.0+0x34>)
 800c5ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c61c <global_stdio_init.part.0+0x38>)
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2104      	movs	r1, #4
 800c5f4:	f7ff ff94 	bl	800c520 <std>
 800c5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	2109      	movs	r1, #9
 800c600:	f7ff ff8e 	bl	800c520 <std>
 800c604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c608:	2202      	movs	r2, #2
 800c60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c60e:	2112      	movs	r1, #18
 800c610:	f7ff bf86 	b.w	800c520 <std>
 800c614:	2000186c 	.word	0x2000186c
 800c618:	20001734 	.word	0x20001734
 800c61c:	0800c58d 	.word	0x0800c58d

0800c620 <__sfp_lock_acquire>:
 800c620:	4801      	ldr	r0, [pc, #4]	@ (800c628 <__sfp_lock_acquire+0x8>)
 800c622:	f000 b9b6 	b.w	800c992 <__retarget_lock_acquire_recursive>
 800c626:	bf00      	nop
 800c628:	20001875 	.word	0x20001875

0800c62c <__sfp_lock_release>:
 800c62c:	4801      	ldr	r0, [pc, #4]	@ (800c634 <__sfp_lock_release+0x8>)
 800c62e:	f000 b9b1 	b.w	800c994 <__retarget_lock_release_recursive>
 800c632:	bf00      	nop
 800c634:	20001875 	.word	0x20001875

0800c638 <__sinit>:
 800c638:	b510      	push	{r4, lr}
 800c63a:	4604      	mov	r4, r0
 800c63c:	f7ff fff0 	bl	800c620 <__sfp_lock_acquire>
 800c640:	6a23      	ldr	r3, [r4, #32]
 800c642:	b11b      	cbz	r3, 800c64c <__sinit+0x14>
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f7ff bff0 	b.w	800c62c <__sfp_lock_release>
 800c64c:	4b04      	ldr	r3, [pc, #16]	@ (800c660 <__sinit+0x28>)
 800c64e:	6223      	str	r3, [r4, #32]
 800c650:	4b04      	ldr	r3, [pc, #16]	@ (800c664 <__sinit+0x2c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1f5      	bne.n	800c644 <__sinit+0xc>
 800c658:	f7ff ffc4 	bl	800c5e4 <global_stdio_init.part.0>
 800c65c:	e7f2      	b.n	800c644 <__sinit+0xc>
 800c65e:	bf00      	nop
 800c660:	0800c5a5 	.word	0x0800c5a5
 800c664:	2000186c 	.word	0x2000186c

0800c668 <_fwalk_sglue>:
 800c668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	4607      	mov	r7, r0
 800c66e:	4688      	mov	r8, r1
 800c670:	4614      	mov	r4, r2
 800c672:	2600      	movs	r6, #0
 800c674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c678:	f1b9 0901 	subs.w	r9, r9, #1
 800c67c:	d505      	bpl.n	800c68a <_fwalk_sglue+0x22>
 800c67e:	6824      	ldr	r4, [r4, #0]
 800c680:	2c00      	cmp	r4, #0
 800c682:	d1f7      	bne.n	800c674 <_fwalk_sglue+0xc>
 800c684:	4630      	mov	r0, r6
 800c686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d907      	bls.n	800c6a0 <_fwalk_sglue+0x38>
 800c690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c694:	3301      	adds	r3, #1
 800c696:	d003      	beq.n	800c6a0 <_fwalk_sglue+0x38>
 800c698:	4629      	mov	r1, r5
 800c69a:	4638      	mov	r0, r7
 800c69c:	47c0      	blx	r8
 800c69e:	4306      	orrs	r6, r0
 800c6a0:	3568      	adds	r5, #104	@ 0x68
 800c6a2:	e7e9      	b.n	800c678 <_fwalk_sglue+0x10>

0800c6a4 <sniprintf>:
 800c6a4:	b40c      	push	{r2, r3}
 800c6a6:	b530      	push	{r4, r5, lr}
 800c6a8:	4b17      	ldr	r3, [pc, #92]	@ (800c708 <sniprintf+0x64>)
 800c6aa:	1e0c      	subs	r4, r1, #0
 800c6ac:	681d      	ldr	r5, [r3, #0]
 800c6ae:	b09d      	sub	sp, #116	@ 0x74
 800c6b0:	da08      	bge.n	800c6c4 <sniprintf+0x20>
 800c6b2:	238b      	movs	r3, #139	@ 0x8b
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ba:	b01d      	add	sp, #116	@ 0x74
 800c6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6c0:	b002      	add	sp, #8
 800c6c2:	4770      	bx	lr
 800c6c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c6c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c6cc:	bf14      	ite	ne
 800c6ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c6d2:	4623      	moveq	r3, r4
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	9307      	str	r3, [sp, #28]
 800c6d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6dc:	9002      	str	r0, [sp, #8]
 800c6de:	9006      	str	r0, [sp, #24]
 800c6e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c6e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c6e6:	ab21      	add	r3, sp, #132	@ 0x84
 800c6e8:	a902      	add	r1, sp, #8
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	f002 fb99 	bl	800ee24 <_svfiprintf_r>
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	bfbc      	itt	lt
 800c6f6:	238b      	movlt	r3, #139	@ 0x8b
 800c6f8:	602b      	strlt	r3, [r5, #0]
 800c6fa:	2c00      	cmp	r4, #0
 800c6fc:	d0dd      	beq.n	800c6ba <sniprintf+0x16>
 800c6fe:	9b02      	ldr	r3, [sp, #8]
 800c700:	2200      	movs	r2, #0
 800c702:	701a      	strb	r2, [r3, #0]
 800c704:	e7d9      	b.n	800c6ba <sniprintf+0x16>
 800c706:	bf00      	nop
 800c708:	20000044 	.word	0x20000044

0800c70c <siprintf>:
 800c70c:	b40e      	push	{r1, r2, r3}
 800c70e:	b500      	push	{lr}
 800c710:	b09c      	sub	sp, #112	@ 0x70
 800c712:	ab1d      	add	r3, sp, #116	@ 0x74
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	9006      	str	r0, [sp, #24]
 800c718:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c71c:	4809      	ldr	r0, [pc, #36]	@ (800c744 <siprintf+0x38>)
 800c71e:	9107      	str	r1, [sp, #28]
 800c720:	9104      	str	r1, [sp, #16]
 800c722:	4909      	ldr	r1, [pc, #36]	@ (800c748 <siprintf+0x3c>)
 800c724:	f853 2b04 	ldr.w	r2, [r3], #4
 800c728:	9105      	str	r1, [sp, #20]
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	a902      	add	r1, sp, #8
 800c730:	f002 fb78 	bl	800ee24 <_svfiprintf_r>
 800c734:	9b02      	ldr	r3, [sp, #8]
 800c736:	2200      	movs	r2, #0
 800c738:	701a      	strb	r2, [r3, #0]
 800c73a:	b01c      	add	sp, #112	@ 0x70
 800c73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c740:	b003      	add	sp, #12
 800c742:	4770      	bx	lr
 800c744:	20000044 	.word	0x20000044
 800c748:	ffff0208 	.word	0xffff0208

0800c74c <siscanf>:
 800c74c:	b40e      	push	{r1, r2, r3}
 800c74e:	b530      	push	{r4, r5, lr}
 800c750:	b09c      	sub	sp, #112	@ 0x70
 800c752:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c754:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c758:	f854 5b04 	ldr.w	r5, [r4], #4
 800c75c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c760:	9002      	str	r0, [sp, #8]
 800c762:	9006      	str	r0, [sp, #24]
 800c764:	f7f3 fda4 	bl	80002b0 <strlen>
 800c768:	4b0b      	ldr	r3, [pc, #44]	@ (800c798 <siscanf+0x4c>)
 800c76a:	9003      	str	r0, [sp, #12]
 800c76c:	9007      	str	r0, [sp, #28]
 800c76e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c770:	480a      	ldr	r0, [pc, #40]	@ (800c79c <siscanf+0x50>)
 800c772:	9401      	str	r4, [sp, #4]
 800c774:	2300      	movs	r3, #0
 800c776:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c778:	9314      	str	r3, [sp, #80]	@ 0x50
 800c77a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c77e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c782:	462a      	mov	r2, r5
 800c784:	4623      	mov	r3, r4
 800c786:	a902      	add	r1, sp, #8
 800c788:	6800      	ldr	r0, [r0, #0]
 800c78a:	f002 fc9f 	bl	800f0cc <__ssvfiscanf_r>
 800c78e:	b01c      	add	sp, #112	@ 0x70
 800c790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c794:	b003      	add	sp, #12
 800c796:	4770      	bx	lr
 800c798:	0800c7c3 	.word	0x0800c7c3
 800c79c:	20000044 	.word	0x20000044

0800c7a0 <__sread>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a8:	f000 f894 	bl	800c8d4 <_read_r>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	bfab      	itete	ge
 800c7b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c7b4:	181b      	addge	r3, r3, r0
 800c7b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7ba:	bfac      	ite	ge
 800c7bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7be:	81a3      	strhlt	r3, [r4, #12]
 800c7c0:	bd10      	pop	{r4, pc}

0800c7c2 <__seofread>:
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	4770      	bx	lr

0800c7c6 <__swrite>:
 800c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ca:	461f      	mov	r7, r3
 800c7cc:	898b      	ldrh	r3, [r1, #12]
 800c7ce:	05db      	lsls	r3, r3, #23
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	4616      	mov	r6, r2
 800c7d6:	d505      	bpl.n	800c7e4 <__swrite+0x1e>
 800c7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7dc:	2302      	movs	r3, #2
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f000 f866 	bl	800c8b0 <_lseek_r>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	463b      	mov	r3, r7
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fa:	f000 b88d 	b.w	800c918 <_write_r>

0800c7fe <__sseek>:
 800c7fe:	b510      	push	{r4, lr}
 800c800:	460c      	mov	r4, r1
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 f853 	bl	800c8b0 <_lseek_r>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	bf15      	itete	ne
 800c810:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c81a:	81a3      	strheq	r3, [r4, #12]
 800c81c:	bf18      	it	ne
 800c81e:	81a3      	strhne	r3, [r4, #12]
 800c820:	bd10      	pop	{r4, pc}

0800c822 <__sclose>:
 800c822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c826:	f000 b833 	b.w	800c890 <_close_r>

0800c82a <memcmp>:
 800c82a:	b510      	push	{r4, lr}
 800c82c:	3901      	subs	r1, #1
 800c82e:	4402      	add	r2, r0
 800c830:	4290      	cmp	r0, r2
 800c832:	d101      	bne.n	800c838 <memcmp+0xe>
 800c834:	2000      	movs	r0, #0
 800c836:	e005      	b.n	800c844 <memcmp+0x1a>
 800c838:	7803      	ldrb	r3, [r0, #0]
 800c83a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c83e:	42a3      	cmp	r3, r4
 800c840:	d001      	beq.n	800c846 <memcmp+0x1c>
 800c842:	1b18      	subs	r0, r3, r4
 800c844:	bd10      	pop	{r4, pc}
 800c846:	3001      	adds	r0, #1
 800c848:	e7f2      	b.n	800c830 <memcmp+0x6>

0800c84a <memset>:
 800c84a:	4402      	add	r2, r0
 800c84c:	4603      	mov	r3, r0
 800c84e:	4293      	cmp	r3, r2
 800c850:	d100      	bne.n	800c854 <memset+0xa>
 800c852:	4770      	bx	lr
 800c854:	f803 1b01 	strb.w	r1, [r3], #1
 800c858:	e7f9      	b.n	800c84e <memset+0x4>

0800c85a <strstr>:
 800c85a:	780a      	ldrb	r2, [r1, #0]
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	b96a      	cbnz	r2, 800c87c <strstr+0x22>
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	429a      	cmp	r2, r3
 800c864:	d109      	bne.n	800c87a <strstr+0x20>
 800c866:	460c      	mov	r4, r1
 800c868:	4605      	mov	r5, r0
 800c86a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0f6      	beq.n	800c860 <strstr+0x6>
 800c872:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c876:	429e      	cmp	r6, r3
 800c878:	d0f7      	beq.n	800c86a <strstr+0x10>
 800c87a:	3001      	adds	r0, #1
 800c87c:	7803      	ldrb	r3, [r0, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1ef      	bne.n	800c862 <strstr+0x8>
 800c882:	4618      	mov	r0, r3
 800c884:	e7ec      	b.n	800c860 <strstr+0x6>
	...

0800c888 <_localeconv_r>:
 800c888:	4800      	ldr	r0, [pc, #0]	@ (800c88c <_localeconv_r+0x4>)
 800c88a:	4770      	bx	lr
 800c88c:	20000184 	.word	0x20000184

0800c890 <_close_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d06      	ldr	r5, [pc, #24]	@ (800c8ac <_close_r+0x1c>)
 800c894:	2300      	movs	r3, #0
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f9 fb54 	bl	8005f48 <_close>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_close_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_close_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	20001870 	.word	0x20001870

0800c8b0 <_lseek_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	@ (800c8d0 <_lseek_r+0x20>)
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	4608      	mov	r0, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f7f9 fb69 	bl	8005f96 <_lseek>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_lseek_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_lseek_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	20001870 	.word	0x20001870

0800c8d4 <_read_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d07      	ldr	r5, [pc, #28]	@ (800c8f4 <_read_r+0x20>)
 800c8d8:	4604      	mov	r4, r0
 800c8da:	4608      	mov	r0, r1
 800c8dc:	4611      	mov	r1, r2
 800c8de:	2200      	movs	r2, #0
 800c8e0:	602a      	str	r2, [r5, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f7f9 faf7 	bl	8005ed6 <_read>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_read_r+0x1e>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_read_r+0x1e>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20001870 	.word	0x20001870

0800c8f8 <_sbrk_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d06      	ldr	r5, [pc, #24]	@ (800c914 <_sbrk_r+0x1c>)
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f9 fb54 	bl	8005fb0 <_sbrk>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_sbrk_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_sbrk_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20001870 	.word	0x20001870

0800c918 <_write_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d07      	ldr	r5, [pc, #28]	@ (800c938 <_write_r+0x20>)
 800c91c:	4604      	mov	r4, r0
 800c91e:	4608      	mov	r0, r1
 800c920:	4611      	mov	r1, r2
 800c922:	2200      	movs	r2, #0
 800c924:	602a      	str	r2, [r5, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	f7f9 faf2 	bl	8005f10 <_write>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_write_r+0x1e>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	b103      	cbz	r3, 800c936 <_write_r+0x1e>
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	20001870 	.word	0x20001870

0800c93c <__errno>:
 800c93c:	4b01      	ldr	r3, [pc, #4]	@ (800c944 <__errno+0x8>)
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	20000044 	.word	0x20000044

0800c948 <__libc_init_array>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4d0d      	ldr	r5, [pc, #52]	@ (800c980 <__libc_init_array+0x38>)
 800c94c:	4c0d      	ldr	r4, [pc, #52]	@ (800c984 <__libc_init_array+0x3c>)
 800c94e:	1b64      	subs	r4, r4, r5
 800c950:	10a4      	asrs	r4, r4, #2
 800c952:	2600      	movs	r6, #0
 800c954:	42a6      	cmp	r6, r4
 800c956:	d109      	bne.n	800c96c <__libc_init_array+0x24>
 800c958:	4d0b      	ldr	r5, [pc, #44]	@ (800c988 <__libc_init_array+0x40>)
 800c95a:	4c0c      	ldr	r4, [pc, #48]	@ (800c98c <__libc_init_array+0x44>)
 800c95c:	f005 fad4 	bl	8011f08 <_init>
 800c960:	1b64      	subs	r4, r4, r5
 800c962:	10a4      	asrs	r4, r4, #2
 800c964:	2600      	movs	r6, #0
 800c966:	42a6      	cmp	r6, r4
 800c968:	d105      	bne.n	800c976 <__libc_init_array+0x2e>
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c970:	4798      	blx	r3
 800c972:	3601      	adds	r6, #1
 800c974:	e7ee      	b.n	800c954 <__libc_init_array+0xc>
 800c976:	f855 3b04 	ldr.w	r3, [r5], #4
 800c97a:	4798      	blx	r3
 800c97c:	3601      	adds	r6, #1
 800c97e:	e7f2      	b.n	800c966 <__libc_init_array+0x1e>
 800c980:	08012550 	.word	0x08012550
 800c984:	08012550 	.word	0x08012550
 800c988:	08012550 	.word	0x08012550
 800c98c:	08012554 	.word	0x08012554

0800c990 <__retarget_lock_init_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_acquire_recursive>:
 800c992:	4770      	bx	lr

0800c994 <__retarget_lock_release_recursive>:
 800c994:	4770      	bx	lr

0800c996 <memcpy>:
 800c996:	440a      	add	r2, r1
 800c998:	4291      	cmp	r1, r2
 800c99a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c99e:	d100      	bne.n	800c9a2 <memcpy+0xc>
 800c9a0:	4770      	bx	lr
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ac:	4291      	cmp	r1, r2
 800c9ae:	d1f9      	bne.n	800c9a4 <memcpy+0xe>
 800c9b0:	bd10      	pop	{r4, pc}
	...

0800c9b4 <nanf>:
 800c9b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c9bc <nanf+0x8>
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	7fc00000 	.word	0x7fc00000

0800c9c0 <quorem>:
 800c9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	6903      	ldr	r3, [r0, #16]
 800c9c6:	690c      	ldr	r4, [r1, #16]
 800c9c8:	42a3      	cmp	r3, r4
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	db7e      	blt.n	800cacc <quorem+0x10c>
 800c9ce:	3c01      	subs	r4, #1
 800c9d0:	f101 0814 	add.w	r8, r1, #20
 800c9d4:	00a3      	lsls	r3, r4, #2
 800c9d6:	f100 0514 	add.w	r5, r0, #20
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9f6:	d32e      	bcc.n	800ca56 <quorem+0x96>
 800c9f8:	f04f 0a00 	mov.w	sl, #0
 800c9fc:	46c4      	mov	ip, r8
 800c9fe:	46ae      	mov	lr, r5
 800ca00:	46d3      	mov	fp, sl
 800ca02:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca06:	b298      	uxth	r0, r3
 800ca08:	fb06 a000 	mla	r0, r6, r0, sl
 800ca0c:	0c02      	lsrs	r2, r0, #16
 800ca0e:	0c1b      	lsrs	r3, r3, #16
 800ca10:	fb06 2303 	mla	r3, r6, r3, r2
 800ca14:	f8de 2000 	ldr.w	r2, [lr]
 800ca18:	b280      	uxth	r0, r0
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	1a12      	subs	r2, r2, r0
 800ca1e:	445a      	add	r2, fp
 800ca20:	f8de 0000 	ldr.w	r0, [lr]
 800ca24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca32:	b292      	uxth	r2, r2
 800ca34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca38:	45e1      	cmp	r9, ip
 800ca3a:	f84e 2b04 	str.w	r2, [lr], #4
 800ca3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca42:	d2de      	bcs.n	800ca02 <quorem+0x42>
 800ca44:	9b00      	ldr	r3, [sp, #0]
 800ca46:	58eb      	ldr	r3, [r5, r3]
 800ca48:	b92b      	cbnz	r3, 800ca56 <quorem+0x96>
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	3b04      	subs	r3, #4
 800ca4e:	429d      	cmp	r5, r3
 800ca50:	461a      	mov	r2, r3
 800ca52:	d32f      	bcc.n	800cab4 <quorem+0xf4>
 800ca54:	613c      	str	r4, [r7, #16]
 800ca56:	4638      	mov	r0, r7
 800ca58:	f001 f914 	bl	800dc84 <__mcmp>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	db25      	blt.n	800caac <quorem+0xec>
 800ca60:	4629      	mov	r1, r5
 800ca62:	2000      	movs	r0, #0
 800ca64:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca68:	f8d1 c000 	ldr.w	ip, [r1]
 800ca6c:	fa1f fe82 	uxth.w	lr, r2
 800ca70:	fa1f f38c 	uxth.w	r3, ip
 800ca74:	eba3 030e 	sub.w	r3, r3, lr
 800ca78:	4403      	add	r3, r0
 800ca7a:	0c12      	lsrs	r2, r2, #16
 800ca7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca8a:	45c1      	cmp	r9, r8
 800ca8c:	f841 3b04 	str.w	r3, [r1], #4
 800ca90:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca94:	d2e6      	bcs.n	800ca64 <quorem+0xa4>
 800ca96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca9e:	b922      	cbnz	r2, 800caaa <quorem+0xea>
 800caa0:	3b04      	subs	r3, #4
 800caa2:	429d      	cmp	r5, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	d30b      	bcc.n	800cac0 <quorem+0x100>
 800caa8:	613c      	str	r4, [r7, #16]
 800caaa:	3601      	adds	r6, #1
 800caac:	4630      	mov	r0, r6
 800caae:	b003      	add	sp, #12
 800cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab4:	6812      	ldr	r2, [r2, #0]
 800cab6:	3b04      	subs	r3, #4
 800cab8:	2a00      	cmp	r2, #0
 800caba:	d1cb      	bne.n	800ca54 <quorem+0x94>
 800cabc:	3c01      	subs	r4, #1
 800cabe:	e7c6      	b.n	800ca4e <quorem+0x8e>
 800cac0:	6812      	ldr	r2, [r2, #0]
 800cac2:	3b04      	subs	r3, #4
 800cac4:	2a00      	cmp	r2, #0
 800cac6:	d1ef      	bne.n	800caa8 <quorem+0xe8>
 800cac8:	3c01      	subs	r4, #1
 800caca:	e7ea      	b.n	800caa2 <quorem+0xe2>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7ee      	b.n	800caae <quorem+0xee>

0800cad0 <_dtoa_r>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	69c7      	ldr	r7, [r0, #28]
 800cad6:	b099      	sub	sp, #100	@ 0x64
 800cad8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cadc:	ec55 4b10 	vmov	r4, r5, d0
 800cae0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cae2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cae4:	4683      	mov	fp, r0
 800cae6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800caea:	b97f      	cbnz	r7, 800cb0c <_dtoa_r+0x3c>
 800caec:	2010      	movs	r0, #16
 800caee:	f000 fdfd 	bl	800d6ec <malloc>
 800caf2:	4602      	mov	r2, r0
 800caf4:	f8cb 001c 	str.w	r0, [fp, #28]
 800caf8:	b920      	cbnz	r0, 800cb04 <_dtoa_r+0x34>
 800cafa:	4ba7      	ldr	r3, [pc, #668]	@ (800cd98 <_dtoa_r+0x2c8>)
 800cafc:	21ef      	movs	r1, #239	@ 0xef
 800cafe:	48a7      	ldr	r0, [pc, #668]	@ (800cd9c <_dtoa_r+0x2cc>)
 800cb00:	f002 fefa 	bl	800f8f8 <__assert_func>
 800cb04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb08:	6007      	str	r7, [r0, #0]
 800cb0a:	60c7      	str	r7, [r0, #12]
 800cb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb10:	6819      	ldr	r1, [r3, #0]
 800cb12:	b159      	cbz	r1, 800cb2c <_dtoa_r+0x5c>
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	604a      	str	r2, [r1, #4]
 800cb18:	2301      	movs	r3, #1
 800cb1a:	4093      	lsls	r3, r2
 800cb1c:	608b      	str	r3, [r1, #8]
 800cb1e:	4658      	mov	r0, fp
 800cb20:	f000 fe2c 	bl	800d77c <_Bfree>
 800cb24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	1e2b      	subs	r3, r5, #0
 800cb2e:	bfb9      	ittee	lt
 800cb30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb34:	9303      	strlt	r3, [sp, #12]
 800cb36:	2300      	movge	r3, #0
 800cb38:	6033      	strge	r3, [r6, #0]
 800cb3a:	9f03      	ldr	r7, [sp, #12]
 800cb3c:	4b98      	ldr	r3, [pc, #608]	@ (800cda0 <_dtoa_r+0x2d0>)
 800cb3e:	bfbc      	itt	lt
 800cb40:	2201      	movlt	r2, #1
 800cb42:	6032      	strlt	r2, [r6, #0]
 800cb44:	43bb      	bics	r3, r7
 800cb46:	d112      	bne.n	800cb6e <_dtoa_r+0x9e>
 800cb48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb54:	4323      	orrs	r3, r4
 800cb56:	f000 854d 	beq.w	800d5f4 <_dtoa_r+0xb24>
 800cb5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cdb4 <_dtoa_r+0x2e4>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 854f 	beq.w	800d604 <_dtoa_r+0xb34>
 800cb66:	f10a 0303 	add.w	r3, sl, #3
 800cb6a:	f000 bd49 	b.w	800d600 <_dtoa_r+0xb30>
 800cb6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	ec51 0b17 	vmov	r0, r1, d7
 800cb78:	2300      	movs	r3, #0
 800cb7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cb7e:	f7f3 ffc3 	bl	8000b08 <__aeabi_dcmpeq>
 800cb82:	4680      	mov	r8, r0
 800cb84:	b158      	cbz	r0, 800cb9e <_dtoa_r+0xce>
 800cb86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb88:	2301      	movs	r3, #1
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb8e:	b113      	cbz	r3, 800cb96 <_dtoa_r+0xc6>
 800cb90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb92:	4b84      	ldr	r3, [pc, #528]	@ (800cda4 <_dtoa_r+0x2d4>)
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cdb8 <_dtoa_r+0x2e8>
 800cb9a:	f000 bd33 	b.w	800d604 <_dtoa_r+0xb34>
 800cb9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cba2:	aa16      	add	r2, sp, #88	@ 0x58
 800cba4:	a917      	add	r1, sp, #92	@ 0x5c
 800cba6:	4658      	mov	r0, fp
 800cba8:	f001 f98c 	bl	800dec4 <__d2b>
 800cbac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cbb0:	4681      	mov	r9, r0
 800cbb2:	2e00      	cmp	r6, #0
 800cbb4:	d077      	beq.n	800cca6 <_dtoa_r+0x1d6>
 800cbb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cbc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cbcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	4b74      	ldr	r3, [pc, #464]	@ (800cda8 <_dtoa_r+0x2d8>)
 800cbd6:	f7f3 fb77 	bl	80002c8 <__aeabi_dsub>
 800cbda:	a369      	add	r3, pc, #420	@ (adr r3, 800cd80 <_dtoa_r+0x2b0>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fd2a 	bl	8000638 <__aeabi_dmul>
 800cbe4:	a368      	add	r3, pc, #416	@ (adr r3, 800cd88 <_dtoa_r+0x2b8>)
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	f7f3 fb6f 	bl	80002cc <__adddf3>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	460d      	mov	r5, r1
 800cbf4:	f7f3 fcb6 	bl	8000564 <__aeabi_i2d>
 800cbf8:	a365      	add	r3, pc, #404	@ (adr r3, 800cd90 <_dtoa_r+0x2c0>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f3 fd1b 	bl	8000638 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fb5f 	bl	80002cc <__adddf3>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	f7f3 ffc1 	bl	8000b98 <__aeabi_d2iz>
 800cc16:	2200      	movs	r2, #0
 800cc18:	4607      	mov	r7, r0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f7f3 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 800cc24:	b140      	cbz	r0, 800cc38 <_dtoa_r+0x168>
 800cc26:	4638      	mov	r0, r7
 800cc28:	f7f3 fc9c 	bl	8000564 <__aeabi_i2d>
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	462b      	mov	r3, r5
 800cc30:	f7f3 ff6a 	bl	8000b08 <__aeabi_dcmpeq>
 800cc34:	b900      	cbnz	r0, 800cc38 <_dtoa_r+0x168>
 800cc36:	3f01      	subs	r7, #1
 800cc38:	2f16      	cmp	r7, #22
 800cc3a:	d851      	bhi.n	800cce0 <_dtoa_r+0x210>
 800cc3c:	4b5b      	ldr	r3, [pc, #364]	@ (800cdac <_dtoa_r+0x2dc>)
 800cc3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc4a:	f7f3 ff67 	bl	8000b1c <__aeabi_dcmplt>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d048      	beq.n	800cce4 <_dtoa_r+0x214>
 800cc52:	3f01      	subs	r7, #1
 800cc54:	2300      	movs	r3, #0
 800cc56:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc5a:	1b9b      	subs	r3, r3, r6
 800cc5c:	1e5a      	subs	r2, r3, #1
 800cc5e:	bf44      	itt	mi
 800cc60:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc64:	2300      	movmi	r3, #0
 800cc66:	9208      	str	r2, [sp, #32]
 800cc68:	bf54      	ite	pl
 800cc6a:	f04f 0800 	movpl.w	r8, #0
 800cc6e:	9308      	strmi	r3, [sp, #32]
 800cc70:	2f00      	cmp	r7, #0
 800cc72:	db39      	blt.n	800cce8 <_dtoa_r+0x218>
 800cc74:	9b08      	ldr	r3, [sp, #32]
 800cc76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cc78:	443b      	add	r3, r7
 800cc7a:	9308      	str	r3, [sp, #32]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	d864      	bhi.n	800cd50 <_dtoa_r+0x280>
 800cc86:	2b05      	cmp	r3, #5
 800cc88:	bfc4      	itt	gt
 800cc8a:	3b04      	subgt	r3, #4
 800cc8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc90:	f1a3 0302 	sub.w	r3, r3, #2
 800cc94:	bfcc      	ite	gt
 800cc96:	2400      	movgt	r4, #0
 800cc98:	2401      	movle	r4, #1
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d863      	bhi.n	800cd66 <_dtoa_r+0x296>
 800cc9e:	e8df f003 	tbb	[pc, r3]
 800cca2:	372a      	.short	0x372a
 800cca4:	5535      	.short	0x5535
 800cca6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ccaa:	441e      	add	r6, r3
 800ccac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ccb0:	2b20      	cmp	r3, #32
 800ccb2:	bfc1      	itttt	gt
 800ccb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ccb8:	409f      	lslgt	r7, r3
 800ccba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ccbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ccc2:	bfd6      	itet	le
 800ccc4:	f1c3 0320 	rsble	r3, r3, #32
 800ccc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cccc:	fa04 f003 	lslle.w	r0, r4, r3
 800ccd0:	f7f3 fc38 	bl	8000544 <__aeabi_ui2d>
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ccda:	3e01      	subs	r6, #1
 800ccdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800ccde:	e777      	b.n	800cbd0 <_dtoa_r+0x100>
 800cce0:	2301      	movs	r3, #1
 800cce2:	e7b8      	b.n	800cc56 <_dtoa_r+0x186>
 800cce4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cce6:	e7b7      	b.n	800cc58 <_dtoa_r+0x188>
 800cce8:	427b      	negs	r3, r7
 800ccea:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccec:	2300      	movs	r3, #0
 800ccee:	eba8 0807 	sub.w	r8, r8, r7
 800ccf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccf4:	e7c4      	b.n	800cc80 <_dtoa_r+0x1b0>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	dc35      	bgt.n	800cd6c <_dtoa_r+0x29c>
 800cd00:	2301      	movs	r3, #1
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	9307      	str	r3, [sp, #28]
 800cd06:	461a      	mov	r2, r3
 800cd08:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd0a:	e00b      	b.n	800cd24 <_dtoa_r+0x254>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e7f3      	b.n	800ccf8 <_dtoa_r+0x228>
 800cd10:	2300      	movs	r3, #0
 800cd12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd16:	18fb      	adds	r3, r7, r3
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	9307      	str	r3, [sp, #28]
 800cd20:	bfb8      	it	lt
 800cd22:	2301      	movlt	r3, #1
 800cd24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cd28:	2100      	movs	r1, #0
 800cd2a:	2204      	movs	r2, #4
 800cd2c:	f102 0514 	add.w	r5, r2, #20
 800cd30:	429d      	cmp	r5, r3
 800cd32:	d91f      	bls.n	800cd74 <_dtoa_r+0x2a4>
 800cd34:	6041      	str	r1, [r0, #4]
 800cd36:	4658      	mov	r0, fp
 800cd38:	f000 fce0 	bl	800d6fc <_Balloc>
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d13c      	bne.n	800cdbc <_dtoa_r+0x2ec>
 800cd42:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb0 <_dtoa_r+0x2e0>)
 800cd44:	4602      	mov	r2, r0
 800cd46:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd4a:	e6d8      	b.n	800cafe <_dtoa_r+0x2e>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e7e0      	b.n	800cd12 <_dtoa_r+0x242>
 800cd50:	2401      	movs	r4, #1
 800cd52:	2300      	movs	r3, #0
 800cd54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd58:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	9307      	str	r3, [sp, #28]
 800cd60:	2200      	movs	r2, #0
 800cd62:	2312      	movs	r3, #18
 800cd64:	e7d0      	b.n	800cd08 <_dtoa_r+0x238>
 800cd66:	2301      	movs	r3, #1
 800cd68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd6a:	e7f5      	b.n	800cd58 <_dtoa_r+0x288>
 800cd6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	9307      	str	r3, [sp, #28]
 800cd72:	e7d7      	b.n	800cd24 <_dtoa_r+0x254>
 800cd74:	3101      	adds	r1, #1
 800cd76:	0052      	lsls	r2, r2, #1
 800cd78:	e7d8      	b.n	800cd2c <_dtoa_r+0x25c>
 800cd7a:	bf00      	nop
 800cd7c:	f3af 8000 	nop.w
 800cd80:	636f4361 	.word	0x636f4361
 800cd84:	3fd287a7 	.word	0x3fd287a7
 800cd88:	8b60c8b3 	.word	0x8b60c8b3
 800cd8c:	3fc68a28 	.word	0x3fc68a28
 800cd90:	509f79fb 	.word	0x509f79fb
 800cd94:	3fd34413 	.word	0x3fd34413
 800cd98:	080120d8 	.word	0x080120d8
 800cd9c:	080120ef 	.word	0x080120ef
 800cda0:	7ff00000 	.word	0x7ff00000
 800cda4:	08012431 	.word	0x08012431
 800cda8:	3ff80000 	.word	0x3ff80000
 800cdac:	080121e8 	.word	0x080121e8
 800cdb0:	08012147 	.word	0x08012147
 800cdb4:	080120d4 	.word	0x080120d4
 800cdb8:	08012430 	.word	0x08012430
 800cdbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cdc0:	6018      	str	r0, [r3, #0]
 800cdc2:	9b07      	ldr	r3, [sp, #28]
 800cdc4:	2b0e      	cmp	r3, #14
 800cdc6:	f200 80a4 	bhi.w	800cf12 <_dtoa_r+0x442>
 800cdca:	2c00      	cmp	r4, #0
 800cdcc:	f000 80a1 	beq.w	800cf12 <_dtoa_r+0x442>
 800cdd0:	2f00      	cmp	r7, #0
 800cdd2:	dd33      	ble.n	800ce3c <_dtoa_r+0x36c>
 800cdd4:	4bad      	ldr	r3, [pc, #692]	@ (800d08c <_dtoa_r+0x5bc>)
 800cdd6:	f007 020f 	and.w	r2, r7, #15
 800cdda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdde:	ed93 7b00 	vldr	d7, [r3]
 800cde2:	05f8      	lsls	r0, r7, #23
 800cde4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cde8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cdec:	d516      	bpl.n	800ce1c <_dtoa_r+0x34c>
 800cdee:	4ba8      	ldr	r3, [pc, #672]	@ (800d090 <_dtoa_r+0x5c0>)
 800cdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdf8:	f7f3 fd48 	bl	800088c <__aeabi_ddiv>
 800cdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce00:	f004 040f 	and.w	r4, r4, #15
 800ce04:	2603      	movs	r6, #3
 800ce06:	4da2      	ldr	r5, [pc, #648]	@ (800d090 <_dtoa_r+0x5c0>)
 800ce08:	b954      	cbnz	r4, 800ce20 <_dtoa_r+0x350>
 800ce0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce12:	f7f3 fd3b 	bl	800088c <__aeabi_ddiv>
 800ce16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce1a:	e028      	b.n	800ce6e <_dtoa_r+0x39e>
 800ce1c:	2602      	movs	r6, #2
 800ce1e:	e7f2      	b.n	800ce06 <_dtoa_r+0x336>
 800ce20:	07e1      	lsls	r1, r4, #31
 800ce22:	d508      	bpl.n	800ce36 <_dtoa_r+0x366>
 800ce24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce2c:	f7f3 fc04 	bl	8000638 <__aeabi_dmul>
 800ce30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce34:	3601      	adds	r6, #1
 800ce36:	1064      	asrs	r4, r4, #1
 800ce38:	3508      	adds	r5, #8
 800ce3a:	e7e5      	b.n	800ce08 <_dtoa_r+0x338>
 800ce3c:	f000 80d2 	beq.w	800cfe4 <_dtoa_r+0x514>
 800ce40:	427c      	negs	r4, r7
 800ce42:	4b92      	ldr	r3, [pc, #584]	@ (800d08c <_dtoa_r+0x5bc>)
 800ce44:	4d92      	ldr	r5, [pc, #584]	@ (800d090 <_dtoa_r+0x5c0>)
 800ce46:	f004 020f 	and.w	r2, r4, #15
 800ce4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce56:	f7f3 fbef 	bl	8000638 <__aeabi_dmul>
 800ce5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5e:	1124      	asrs	r4, r4, #4
 800ce60:	2300      	movs	r3, #0
 800ce62:	2602      	movs	r6, #2
 800ce64:	2c00      	cmp	r4, #0
 800ce66:	f040 80b2 	bne.w	800cfce <_dtoa_r+0x4fe>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1d3      	bne.n	800ce16 <_dtoa_r+0x346>
 800ce6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 80b7 	beq.w	800cfe8 <_dtoa_r+0x518>
 800ce7a:	4b86      	ldr	r3, [pc, #536]	@ (800d094 <_dtoa_r+0x5c4>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fe4b 	bl	8000b1c <__aeabi_dcmplt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f000 80ae 	beq.w	800cfe8 <_dtoa_r+0x518>
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 80aa 	beq.w	800cfe8 <_dtoa_r+0x518>
 800ce94:	9b00      	ldr	r3, [sp, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	dd37      	ble.n	800cf0a <_dtoa_r+0x43a>
 800ce9a:	1e7b      	subs	r3, r7, #1
 800ce9c:	9304      	str	r3, [sp, #16]
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4b7d      	ldr	r3, [pc, #500]	@ (800d098 <_dtoa_r+0x5c8>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7f3 fbc7 	bl	8000638 <__aeabi_dmul>
 800ceaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceae:	9c00      	ldr	r4, [sp, #0]
 800ceb0:	3601      	adds	r6, #1
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7f3 fb56 	bl	8000564 <__aeabi_i2d>
 800ceb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cebc:	f7f3 fbbc 	bl	8000638 <__aeabi_dmul>
 800cec0:	4b76      	ldr	r3, [pc, #472]	@ (800d09c <_dtoa_r+0x5cc>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	f7f3 fa02 	bl	80002cc <__adddf3>
 800cec8:	4605      	mov	r5, r0
 800ceca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cece:	2c00      	cmp	r4, #0
 800ced0:	f040 808d 	bne.w	800cfee <_dtoa_r+0x51e>
 800ced4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced8:	4b71      	ldr	r3, [pc, #452]	@ (800d0a0 <_dtoa_r+0x5d0>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	f7f3 f9f4 	bl	80002c8 <__aeabi_dsub>
 800cee0:	4602      	mov	r2, r0
 800cee2:	460b      	mov	r3, r1
 800cee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cee8:	462a      	mov	r2, r5
 800ceea:	4633      	mov	r3, r6
 800ceec:	f7f3 fe34 	bl	8000b58 <__aeabi_dcmpgt>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	f040 828b 	bne.w	800d40c <_dtoa_r+0x93c>
 800cef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cefa:	462a      	mov	r2, r5
 800cefc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf00:	f7f3 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	f040 8128 	bne.w	800d15a <_dtoa_r+0x68a>
 800cf0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cf0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f2c0 815a 	blt.w	800d1ce <_dtoa_r+0x6fe>
 800cf1a:	2f0e      	cmp	r7, #14
 800cf1c:	f300 8157 	bgt.w	800d1ce <_dtoa_r+0x6fe>
 800cf20:	4b5a      	ldr	r3, [pc, #360]	@ (800d08c <_dtoa_r+0x5bc>)
 800cf22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf26:	ed93 7b00 	vldr	d7, [r3]
 800cf2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	ed8d 7b00 	vstr	d7, [sp]
 800cf32:	da03      	bge.n	800cf3c <_dtoa_r+0x46c>
 800cf34:	9b07      	ldr	r3, [sp, #28]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f340 8101 	ble.w	800d13e <_dtoa_r+0x66e>
 800cf3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf40:	4656      	mov	r6, sl
 800cf42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf46:	4620      	mov	r0, r4
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7f3 fc9f 	bl	800088c <__aeabi_ddiv>
 800cf4e:	f7f3 fe23 	bl	8000b98 <__aeabi_d2iz>
 800cf52:	4680      	mov	r8, r0
 800cf54:	f7f3 fb06 	bl	8000564 <__aeabi_i2d>
 800cf58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf5c:	f7f3 fb6c 	bl	8000638 <__aeabi_dmul>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	4620      	mov	r0, r4
 800cf66:	4629      	mov	r1, r5
 800cf68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf6c:	f7f3 f9ac 	bl	80002c8 <__aeabi_dsub>
 800cf70:	f806 4b01 	strb.w	r4, [r6], #1
 800cf74:	9d07      	ldr	r5, [sp, #28]
 800cf76:	eba6 040a 	sub.w	r4, r6, sl
 800cf7a:	42a5      	cmp	r5, r4
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	f040 8117 	bne.w	800d1b2 <_dtoa_r+0x6e2>
 800cf84:	f7f3 f9a2 	bl	80002cc <__adddf3>
 800cf88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	460d      	mov	r5, r1
 800cf90:	f7f3 fde2 	bl	8000b58 <__aeabi_dcmpgt>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	f040 80f9 	bne.w	800d18c <_dtoa_r+0x6bc>
 800cf9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fdb1 	bl	8000b08 <__aeabi_dcmpeq>
 800cfa6:	b118      	cbz	r0, 800cfb0 <_dtoa_r+0x4e0>
 800cfa8:	f018 0f01 	tst.w	r8, #1
 800cfac:	f040 80ee 	bne.w	800d18c <_dtoa_r+0x6bc>
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	4658      	mov	r0, fp
 800cfb4:	f000 fbe2 	bl	800d77c <_Bfree>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	7033      	strb	r3, [r6, #0]
 800cfbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfbe:	3701      	adds	r7, #1
 800cfc0:	601f      	str	r7, [r3, #0]
 800cfc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 831d 	beq.w	800d604 <_dtoa_r+0xb34>
 800cfca:	601e      	str	r6, [r3, #0]
 800cfcc:	e31a      	b.n	800d604 <_dtoa_r+0xb34>
 800cfce:	07e2      	lsls	r2, r4, #31
 800cfd0:	d505      	bpl.n	800cfde <_dtoa_r+0x50e>
 800cfd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfd6:	f7f3 fb2f 	bl	8000638 <__aeabi_dmul>
 800cfda:	3601      	adds	r6, #1
 800cfdc:	2301      	movs	r3, #1
 800cfde:	1064      	asrs	r4, r4, #1
 800cfe0:	3508      	adds	r5, #8
 800cfe2:	e73f      	b.n	800ce64 <_dtoa_r+0x394>
 800cfe4:	2602      	movs	r6, #2
 800cfe6:	e742      	b.n	800ce6e <_dtoa_r+0x39e>
 800cfe8:	9c07      	ldr	r4, [sp, #28]
 800cfea:	9704      	str	r7, [sp, #16]
 800cfec:	e761      	b.n	800ceb2 <_dtoa_r+0x3e2>
 800cfee:	4b27      	ldr	r3, [pc, #156]	@ (800d08c <_dtoa_r+0x5bc>)
 800cff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cff6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cffa:	4454      	add	r4, sl
 800cffc:	2900      	cmp	r1, #0
 800cffe:	d053      	beq.n	800d0a8 <_dtoa_r+0x5d8>
 800d000:	4928      	ldr	r1, [pc, #160]	@ (800d0a4 <_dtoa_r+0x5d4>)
 800d002:	2000      	movs	r0, #0
 800d004:	f7f3 fc42 	bl	800088c <__aeabi_ddiv>
 800d008:	4633      	mov	r3, r6
 800d00a:	462a      	mov	r2, r5
 800d00c:	f7f3 f95c 	bl	80002c8 <__aeabi_dsub>
 800d010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d014:	4656      	mov	r6, sl
 800d016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d01a:	f7f3 fdbd 	bl	8000b98 <__aeabi_d2iz>
 800d01e:	4605      	mov	r5, r0
 800d020:	f7f3 faa0 	bl	8000564 <__aeabi_i2d>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02c:	f7f3 f94c 	bl	80002c8 <__aeabi_dsub>
 800d030:	3530      	adds	r5, #48	@ 0x30
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d03a:	f806 5b01 	strb.w	r5, [r6], #1
 800d03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d042:	f7f3 fd6b 	bl	8000b1c <__aeabi_dcmplt>
 800d046:	2800      	cmp	r0, #0
 800d048:	d171      	bne.n	800d12e <_dtoa_r+0x65e>
 800d04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d04e:	4911      	ldr	r1, [pc, #68]	@ (800d094 <_dtoa_r+0x5c4>)
 800d050:	2000      	movs	r0, #0
 800d052:	f7f3 f939 	bl	80002c8 <__aeabi_dsub>
 800d056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d05a:	f7f3 fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800d05e:	2800      	cmp	r0, #0
 800d060:	f040 8095 	bne.w	800d18e <_dtoa_r+0x6be>
 800d064:	42a6      	cmp	r6, r4
 800d066:	f43f af50 	beq.w	800cf0a <_dtoa_r+0x43a>
 800d06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d06e:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <_dtoa_r+0x5c8>)
 800d070:	2200      	movs	r2, #0
 800d072:	f7f3 fae1 	bl	8000638 <__aeabi_dmul>
 800d076:	4b08      	ldr	r3, [pc, #32]	@ (800d098 <_dtoa_r+0x5c8>)
 800d078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d07c:	2200      	movs	r2, #0
 800d07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d082:	f7f3 fad9 	bl	8000638 <__aeabi_dmul>
 800d086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d08a:	e7c4      	b.n	800d016 <_dtoa_r+0x546>
 800d08c:	080121e8 	.word	0x080121e8
 800d090:	080121c0 	.word	0x080121c0
 800d094:	3ff00000 	.word	0x3ff00000
 800d098:	40240000 	.word	0x40240000
 800d09c:	401c0000 	.word	0x401c0000
 800d0a0:	40140000 	.word	0x40140000
 800d0a4:	3fe00000 	.word	0x3fe00000
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f7f3 fac4 	bl	8000638 <__aeabi_dmul>
 800d0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d0b6:	4656      	mov	r6, sl
 800d0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0bc:	f7f3 fd6c 	bl	8000b98 <__aeabi_d2iz>
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	f7f3 fa4f 	bl	8000564 <__aeabi_i2d>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ce:	f7f3 f8fb 	bl	80002c8 <__aeabi_dsub>
 800d0d2:	3530      	adds	r5, #48	@ 0x30
 800d0d4:	f806 5b01 	strb.w	r5, [r6], #1
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	42a6      	cmp	r6, r4
 800d0de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0e2:	f04f 0200 	mov.w	r2, #0
 800d0e6:	d124      	bne.n	800d132 <_dtoa_r+0x662>
 800d0e8:	4bac      	ldr	r3, [pc, #688]	@ (800d39c <_dtoa_r+0x8cc>)
 800d0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0ee:	f7f3 f8ed 	bl	80002cc <__adddf3>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0fa:	f7f3 fd2d 	bl	8000b58 <__aeabi_dcmpgt>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d145      	bne.n	800d18e <_dtoa_r+0x6be>
 800d102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d106:	49a5      	ldr	r1, [pc, #660]	@ (800d39c <_dtoa_r+0x8cc>)
 800d108:	2000      	movs	r0, #0
 800d10a:	f7f3 f8dd 	bl	80002c8 <__aeabi_dsub>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d116:	f7f3 fd01 	bl	8000b1c <__aeabi_dcmplt>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	f43f aef5 	beq.w	800cf0a <_dtoa_r+0x43a>
 800d120:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d122:	1e73      	subs	r3, r6, #1
 800d124:	9315      	str	r3, [sp, #84]	@ 0x54
 800d126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d12a:	2b30      	cmp	r3, #48	@ 0x30
 800d12c:	d0f8      	beq.n	800d120 <_dtoa_r+0x650>
 800d12e:	9f04      	ldr	r7, [sp, #16]
 800d130:	e73e      	b.n	800cfb0 <_dtoa_r+0x4e0>
 800d132:	4b9b      	ldr	r3, [pc, #620]	@ (800d3a0 <_dtoa_r+0x8d0>)
 800d134:	f7f3 fa80 	bl	8000638 <__aeabi_dmul>
 800d138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d13c:	e7bc      	b.n	800d0b8 <_dtoa_r+0x5e8>
 800d13e:	d10c      	bne.n	800d15a <_dtoa_r+0x68a>
 800d140:	4b98      	ldr	r3, [pc, #608]	@ (800d3a4 <_dtoa_r+0x8d4>)
 800d142:	2200      	movs	r2, #0
 800d144:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d148:	f7f3 fa76 	bl	8000638 <__aeabi_dmul>
 800d14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d150:	f7f3 fcf8 	bl	8000b44 <__aeabi_dcmpge>
 800d154:	2800      	cmp	r0, #0
 800d156:	f000 8157 	beq.w	800d408 <_dtoa_r+0x938>
 800d15a:	2400      	movs	r4, #0
 800d15c:	4625      	mov	r5, r4
 800d15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d160:	43db      	mvns	r3, r3
 800d162:	9304      	str	r3, [sp, #16]
 800d164:	4656      	mov	r6, sl
 800d166:	2700      	movs	r7, #0
 800d168:	4621      	mov	r1, r4
 800d16a:	4658      	mov	r0, fp
 800d16c:	f000 fb06 	bl	800d77c <_Bfree>
 800d170:	2d00      	cmp	r5, #0
 800d172:	d0dc      	beq.n	800d12e <_dtoa_r+0x65e>
 800d174:	b12f      	cbz	r7, 800d182 <_dtoa_r+0x6b2>
 800d176:	42af      	cmp	r7, r5
 800d178:	d003      	beq.n	800d182 <_dtoa_r+0x6b2>
 800d17a:	4639      	mov	r1, r7
 800d17c:	4658      	mov	r0, fp
 800d17e:	f000 fafd 	bl	800d77c <_Bfree>
 800d182:	4629      	mov	r1, r5
 800d184:	4658      	mov	r0, fp
 800d186:	f000 faf9 	bl	800d77c <_Bfree>
 800d18a:	e7d0      	b.n	800d12e <_dtoa_r+0x65e>
 800d18c:	9704      	str	r7, [sp, #16]
 800d18e:	4633      	mov	r3, r6
 800d190:	461e      	mov	r6, r3
 800d192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d196:	2a39      	cmp	r2, #57	@ 0x39
 800d198:	d107      	bne.n	800d1aa <_dtoa_r+0x6da>
 800d19a:	459a      	cmp	sl, r3
 800d19c:	d1f8      	bne.n	800d190 <_dtoa_r+0x6c0>
 800d19e:	9a04      	ldr	r2, [sp, #16]
 800d1a0:	3201      	adds	r2, #1
 800d1a2:	9204      	str	r2, [sp, #16]
 800d1a4:	2230      	movs	r2, #48	@ 0x30
 800d1a6:	f88a 2000 	strb.w	r2, [sl]
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	3201      	adds	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
 800d1b0:	e7bd      	b.n	800d12e <_dtoa_r+0x65e>
 800d1b2:	4b7b      	ldr	r3, [pc, #492]	@ (800d3a0 <_dtoa_r+0x8d0>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7f3 fa3f 	bl	8000638 <__aeabi_dmul>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 fca1 	bl	8000b08 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f43f aebb 	beq.w	800cf42 <_dtoa_r+0x472>
 800d1cc:	e6f0      	b.n	800cfb0 <_dtoa_r+0x4e0>
 800d1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	f000 80db 	beq.w	800d38c <_dtoa_r+0x8bc>
 800d1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1d8:	2a01      	cmp	r2, #1
 800d1da:	f300 80bf 	bgt.w	800d35c <_dtoa_r+0x88c>
 800d1de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	f000 80b7 	beq.w	800d354 <_dtoa_r+0x884>
 800d1e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d1ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1ec:	4646      	mov	r6, r8
 800d1ee:	9a08      	ldr	r2, [sp, #32]
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	441a      	add	r2, r3
 800d1f4:	4658      	mov	r0, fp
 800d1f6:	4498      	add	r8, r3
 800d1f8:	9208      	str	r2, [sp, #32]
 800d1fa:	f000 fbbd 	bl	800d978 <__i2b>
 800d1fe:	4605      	mov	r5, r0
 800d200:	b15e      	cbz	r6, 800d21a <_dtoa_r+0x74a>
 800d202:	9b08      	ldr	r3, [sp, #32]
 800d204:	2b00      	cmp	r3, #0
 800d206:	dd08      	ble.n	800d21a <_dtoa_r+0x74a>
 800d208:	42b3      	cmp	r3, r6
 800d20a:	9a08      	ldr	r2, [sp, #32]
 800d20c:	bfa8      	it	ge
 800d20e:	4633      	movge	r3, r6
 800d210:	eba8 0803 	sub.w	r8, r8, r3
 800d214:	1af6      	subs	r6, r6, r3
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	9308      	str	r3, [sp, #32]
 800d21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d21c:	b1f3      	cbz	r3, 800d25c <_dtoa_r+0x78c>
 800d21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 80b7 	beq.w	800d394 <_dtoa_r+0x8c4>
 800d226:	b18c      	cbz	r4, 800d24c <_dtoa_r+0x77c>
 800d228:	4629      	mov	r1, r5
 800d22a:	4622      	mov	r2, r4
 800d22c:	4658      	mov	r0, fp
 800d22e:	f000 fc63 	bl	800daf8 <__pow5mult>
 800d232:	464a      	mov	r2, r9
 800d234:	4601      	mov	r1, r0
 800d236:	4605      	mov	r5, r0
 800d238:	4658      	mov	r0, fp
 800d23a:	f000 fbb3 	bl	800d9a4 <__multiply>
 800d23e:	4649      	mov	r1, r9
 800d240:	9004      	str	r0, [sp, #16]
 800d242:	4658      	mov	r0, fp
 800d244:	f000 fa9a 	bl	800d77c <_Bfree>
 800d248:	9b04      	ldr	r3, [sp, #16]
 800d24a:	4699      	mov	r9, r3
 800d24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d24e:	1b1a      	subs	r2, r3, r4
 800d250:	d004      	beq.n	800d25c <_dtoa_r+0x78c>
 800d252:	4649      	mov	r1, r9
 800d254:	4658      	mov	r0, fp
 800d256:	f000 fc4f 	bl	800daf8 <__pow5mult>
 800d25a:	4681      	mov	r9, r0
 800d25c:	2101      	movs	r1, #1
 800d25e:	4658      	mov	r0, fp
 800d260:	f000 fb8a 	bl	800d978 <__i2b>
 800d264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d266:	4604      	mov	r4, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 81cf 	beq.w	800d60c <_dtoa_r+0xb3c>
 800d26e:	461a      	mov	r2, r3
 800d270:	4601      	mov	r1, r0
 800d272:	4658      	mov	r0, fp
 800d274:	f000 fc40 	bl	800daf8 <__pow5mult>
 800d278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	4604      	mov	r4, r0
 800d27e:	f300 8095 	bgt.w	800d3ac <_dtoa_r+0x8dc>
 800d282:	9b02      	ldr	r3, [sp, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f040 8087 	bne.w	800d398 <_dtoa_r+0x8c8>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 8089 	bne.w	800d3a8 <_dtoa_r+0x8d8>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d29c:	0d1b      	lsrs	r3, r3, #20
 800d29e:	051b      	lsls	r3, r3, #20
 800d2a0:	b12b      	cbz	r3, 800d2ae <_dtoa_r+0x7de>
 800d2a2:	9b08      	ldr	r3, [sp, #32]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	9308      	str	r3, [sp, #32]
 800d2a8:	f108 0801 	add.w	r8, r8, #1
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 81b0 	beq.w	800d618 <_dtoa_r+0xb48>
 800d2b8:	6923      	ldr	r3, [r4, #16]
 800d2ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2be:	6918      	ldr	r0, [r3, #16]
 800d2c0:	f000 fb0e 	bl	800d8e0 <__hi0bits>
 800d2c4:	f1c0 0020 	rsb	r0, r0, #32
 800d2c8:	9b08      	ldr	r3, [sp, #32]
 800d2ca:	4418      	add	r0, r3
 800d2cc:	f010 001f 	ands.w	r0, r0, #31
 800d2d0:	d077      	beq.n	800d3c2 <_dtoa_r+0x8f2>
 800d2d2:	f1c0 0320 	rsb	r3, r0, #32
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	dd6b      	ble.n	800d3b2 <_dtoa_r+0x8e2>
 800d2da:	9b08      	ldr	r3, [sp, #32]
 800d2dc:	f1c0 001c 	rsb	r0, r0, #28
 800d2e0:	4403      	add	r3, r0
 800d2e2:	4480      	add	r8, r0
 800d2e4:	4406      	add	r6, r0
 800d2e6:	9308      	str	r3, [sp, #32]
 800d2e8:	f1b8 0f00 	cmp.w	r8, #0
 800d2ec:	dd05      	ble.n	800d2fa <_dtoa_r+0x82a>
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	4642      	mov	r2, r8
 800d2f2:	4658      	mov	r0, fp
 800d2f4:	f000 fc5a 	bl	800dbac <__lshift>
 800d2f8:	4681      	mov	r9, r0
 800d2fa:	9b08      	ldr	r3, [sp, #32]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	dd05      	ble.n	800d30c <_dtoa_r+0x83c>
 800d300:	4621      	mov	r1, r4
 800d302:	461a      	mov	r2, r3
 800d304:	4658      	mov	r0, fp
 800d306:	f000 fc51 	bl	800dbac <__lshift>
 800d30a:	4604      	mov	r4, r0
 800d30c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d059      	beq.n	800d3c6 <_dtoa_r+0x8f6>
 800d312:	4621      	mov	r1, r4
 800d314:	4648      	mov	r0, r9
 800d316:	f000 fcb5 	bl	800dc84 <__mcmp>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	da53      	bge.n	800d3c6 <_dtoa_r+0x8f6>
 800d31e:	1e7b      	subs	r3, r7, #1
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	4649      	mov	r1, r9
 800d324:	2300      	movs	r3, #0
 800d326:	220a      	movs	r2, #10
 800d328:	4658      	mov	r0, fp
 800d32a:	f000 fa49 	bl	800d7c0 <__multadd>
 800d32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d330:	4681      	mov	r9, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 8172 	beq.w	800d61c <_dtoa_r+0xb4c>
 800d338:	2300      	movs	r3, #0
 800d33a:	4629      	mov	r1, r5
 800d33c:	220a      	movs	r2, #10
 800d33e:	4658      	mov	r0, fp
 800d340:	f000 fa3e 	bl	800d7c0 <__multadd>
 800d344:	9b00      	ldr	r3, [sp, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	4605      	mov	r5, r0
 800d34a:	dc67      	bgt.n	800d41c <_dtoa_r+0x94c>
 800d34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d34e:	2b02      	cmp	r3, #2
 800d350:	dc41      	bgt.n	800d3d6 <_dtoa_r+0x906>
 800d352:	e063      	b.n	800d41c <_dtoa_r+0x94c>
 800d354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d35a:	e746      	b.n	800d1ea <_dtoa_r+0x71a>
 800d35c:	9b07      	ldr	r3, [sp, #28]
 800d35e:	1e5c      	subs	r4, r3, #1
 800d360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d362:	42a3      	cmp	r3, r4
 800d364:	bfbf      	itttt	lt
 800d366:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d368:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d36a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d36c:	1ae3      	sublt	r3, r4, r3
 800d36e:	bfb4      	ite	lt
 800d370:	18d2      	addlt	r2, r2, r3
 800d372:	1b1c      	subge	r4, r3, r4
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	bfbc      	itt	lt
 800d378:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d37a:	2400      	movlt	r4, #0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	bfb5      	itete	lt
 800d380:	eba8 0603 	sublt.w	r6, r8, r3
 800d384:	9b07      	ldrge	r3, [sp, #28]
 800d386:	2300      	movlt	r3, #0
 800d388:	4646      	movge	r6, r8
 800d38a:	e730      	b.n	800d1ee <_dtoa_r+0x71e>
 800d38c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d38e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d390:	4646      	mov	r6, r8
 800d392:	e735      	b.n	800d200 <_dtoa_r+0x730>
 800d394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d396:	e75c      	b.n	800d252 <_dtoa_r+0x782>
 800d398:	2300      	movs	r3, #0
 800d39a:	e788      	b.n	800d2ae <_dtoa_r+0x7de>
 800d39c:	3fe00000 	.word	0x3fe00000
 800d3a0:	40240000 	.word	0x40240000
 800d3a4:	40140000 	.word	0x40140000
 800d3a8:	9b02      	ldr	r3, [sp, #8]
 800d3aa:	e780      	b.n	800d2ae <_dtoa_r+0x7de>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3b0:	e782      	b.n	800d2b8 <_dtoa_r+0x7e8>
 800d3b2:	d099      	beq.n	800d2e8 <_dtoa_r+0x818>
 800d3b4:	9a08      	ldr	r2, [sp, #32]
 800d3b6:	331c      	adds	r3, #28
 800d3b8:	441a      	add	r2, r3
 800d3ba:	4498      	add	r8, r3
 800d3bc:	441e      	add	r6, r3
 800d3be:	9208      	str	r2, [sp, #32]
 800d3c0:	e792      	b.n	800d2e8 <_dtoa_r+0x818>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	e7f6      	b.n	800d3b4 <_dtoa_r+0x8e4>
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	9704      	str	r7, [sp, #16]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dc20      	bgt.n	800d410 <_dtoa_r+0x940>
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	dd1e      	ble.n	800d414 <_dtoa_r+0x944>
 800d3d6:	9b00      	ldr	r3, [sp, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f47f aec0 	bne.w	800d15e <_dtoa_r+0x68e>
 800d3de:	4621      	mov	r1, r4
 800d3e0:	2205      	movs	r2, #5
 800d3e2:	4658      	mov	r0, fp
 800d3e4:	f000 f9ec 	bl	800d7c0 <__multadd>
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4648      	mov	r0, r9
 800d3ee:	f000 fc49 	bl	800dc84 <__mcmp>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	f77f aeb3 	ble.w	800d15e <_dtoa_r+0x68e>
 800d3f8:	4656      	mov	r6, sl
 800d3fa:	2331      	movs	r3, #49	@ 0x31
 800d3fc:	f806 3b01 	strb.w	r3, [r6], #1
 800d400:	9b04      	ldr	r3, [sp, #16]
 800d402:	3301      	adds	r3, #1
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	e6ae      	b.n	800d166 <_dtoa_r+0x696>
 800d408:	9c07      	ldr	r4, [sp, #28]
 800d40a:	9704      	str	r7, [sp, #16]
 800d40c:	4625      	mov	r5, r4
 800d40e:	e7f3      	b.n	800d3f8 <_dtoa_r+0x928>
 800d410:	9b07      	ldr	r3, [sp, #28]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 8104 	beq.w	800d624 <_dtoa_r+0xb54>
 800d41c:	2e00      	cmp	r6, #0
 800d41e:	dd05      	ble.n	800d42c <_dtoa_r+0x95c>
 800d420:	4629      	mov	r1, r5
 800d422:	4632      	mov	r2, r6
 800d424:	4658      	mov	r0, fp
 800d426:	f000 fbc1 	bl	800dbac <__lshift>
 800d42a:	4605      	mov	r5, r0
 800d42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d05a      	beq.n	800d4e8 <_dtoa_r+0xa18>
 800d432:	6869      	ldr	r1, [r5, #4]
 800d434:	4658      	mov	r0, fp
 800d436:	f000 f961 	bl	800d6fc <_Balloc>
 800d43a:	4606      	mov	r6, r0
 800d43c:	b928      	cbnz	r0, 800d44a <_dtoa_r+0x97a>
 800d43e:	4b84      	ldr	r3, [pc, #528]	@ (800d650 <_dtoa_r+0xb80>)
 800d440:	4602      	mov	r2, r0
 800d442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d446:	f7ff bb5a 	b.w	800cafe <_dtoa_r+0x2e>
 800d44a:	692a      	ldr	r2, [r5, #16]
 800d44c:	3202      	adds	r2, #2
 800d44e:	0092      	lsls	r2, r2, #2
 800d450:	f105 010c 	add.w	r1, r5, #12
 800d454:	300c      	adds	r0, #12
 800d456:	f7ff fa9e 	bl	800c996 <memcpy>
 800d45a:	2201      	movs	r2, #1
 800d45c:	4631      	mov	r1, r6
 800d45e:	4658      	mov	r0, fp
 800d460:	f000 fba4 	bl	800dbac <__lshift>
 800d464:	f10a 0301 	add.w	r3, sl, #1
 800d468:	9307      	str	r3, [sp, #28]
 800d46a:	9b00      	ldr	r3, [sp, #0]
 800d46c:	4453      	add	r3, sl
 800d46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d470:	9b02      	ldr	r3, [sp, #8]
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	462f      	mov	r7, r5
 800d478:	930a      	str	r3, [sp, #40]	@ 0x28
 800d47a:	4605      	mov	r5, r0
 800d47c:	9b07      	ldr	r3, [sp, #28]
 800d47e:	4621      	mov	r1, r4
 800d480:	3b01      	subs	r3, #1
 800d482:	4648      	mov	r0, r9
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	f7ff fa9b 	bl	800c9c0 <quorem>
 800d48a:	4639      	mov	r1, r7
 800d48c:	9002      	str	r0, [sp, #8]
 800d48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d492:	4648      	mov	r0, r9
 800d494:	f000 fbf6 	bl	800dc84 <__mcmp>
 800d498:	462a      	mov	r2, r5
 800d49a:	9008      	str	r0, [sp, #32]
 800d49c:	4621      	mov	r1, r4
 800d49e:	4658      	mov	r0, fp
 800d4a0:	f000 fc0c 	bl	800dcbc <__mdiff>
 800d4a4:	68c2      	ldr	r2, [r0, #12]
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	bb02      	cbnz	r2, 800d4ec <_dtoa_r+0xa1c>
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 fbe9 	bl	800dc84 <__mcmp>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4ba:	f000 f95f 	bl	800d77c <_Bfree>
 800d4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4c2:	9e07      	ldr	r6, [sp, #28]
 800d4c4:	ea43 0102 	orr.w	r1, r3, r2
 800d4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ca:	4319      	orrs	r1, r3
 800d4cc:	d110      	bne.n	800d4f0 <_dtoa_r+0xa20>
 800d4ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4d2:	d029      	beq.n	800d528 <_dtoa_r+0xa58>
 800d4d4:	9b08      	ldr	r3, [sp, #32]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	dd02      	ble.n	800d4e0 <_dtoa_r+0xa10>
 800d4da:	9b02      	ldr	r3, [sp, #8]
 800d4dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d4e0:	9b00      	ldr	r3, [sp, #0]
 800d4e2:	f883 8000 	strb.w	r8, [r3]
 800d4e6:	e63f      	b.n	800d168 <_dtoa_r+0x698>
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e7bb      	b.n	800d464 <_dtoa_r+0x994>
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	e7e1      	b.n	800d4b4 <_dtoa_r+0x9e4>
 800d4f0:	9b08      	ldr	r3, [sp, #32]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	db04      	blt.n	800d500 <_dtoa_r+0xa30>
 800d4f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4f8:	430b      	orrs	r3, r1
 800d4fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	d120      	bne.n	800d542 <_dtoa_r+0xa72>
 800d500:	2a00      	cmp	r2, #0
 800d502:	dded      	ble.n	800d4e0 <_dtoa_r+0xa10>
 800d504:	4649      	mov	r1, r9
 800d506:	2201      	movs	r2, #1
 800d508:	4658      	mov	r0, fp
 800d50a:	f000 fb4f 	bl	800dbac <__lshift>
 800d50e:	4621      	mov	r1, r4
 800d510:	4681      	mov	r9, r0
 800d512:	f000 fbb7 	bl	800dc84 <__mcmp>
 800d516:	2800      	cmp	r0, #0
 800d518:	dc03      	bgt.n	800d522 <_dtoa_r+0xa52>
 800d51a:	d1e1      	bne.n	800d4e0 <_dtoa_r+0xa10>
 800d51c:	f018 0f01 	tst.w	r8, #1
 800d520:	d0de      	beq.n	800d4e0 <_dtoa_r+0xa10>
 800d522:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d526:	d1d8      	bne.n	800d4da <_dtoa_r+0xa0a>
 800d528:	9a00      	ldr	r2, [sp, #0]
 800d52a:	2339      	movs	r3, #57	@ 0x39
 800d52c:	7013      	strb	r3, [r2, #0]
 800d52e:	4633      	mov	r3, r6
 800d530:	461e      	mov	r6, r3
 800d532:	3b01      	subs	r3, #1
 800d534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d538:	2a39      	cmp	r2, #57	@ 0x39
 800d53a:	d052      	beq.n	800d5e2 <_dtoa_r+0xb12>
 800d53c:	3201      	adds	r2, #1
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	e612      	b.n	800d168 <_dtoa_r+0x698>
 800d542:	2a00      	cmp	r2, #0
 800d544:	dd07      	ble.n	800d556 <_dtoa_r+0xa86>
 800d546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d54a:	d0ed      	beq.n	800d528 <_dtoa_r+0xa58>
 800d54c:	9a00      	ldr	r2, [sp, #0]
 800d54e:	f108 0301 	add.w	r3, r8, #1
 800d552:	7013      	strb	r3, [r2, #0]
 800d554:	e608      	b.n	800d168 <_dtoa_r+0x698>
 800d556:	9b07      	ldr	r3, [sp, #28]
 800d558:	9a07      	ldr	r2, [sp, #28]
 800d55a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d560:	4293      	cmp	r3, r2
 800d562:	d028      	beq.n	800d5b6 <_dtoa_r+0xae6>
 800d564:	4649      	mov	r1, r9
 800d566:	2300      	movs	r3, #0
 800d568:	220a      	movs	r2, #10
 800d56a:	4658      	mov	r0, fp
 800d56c:	f000 f928 	bl	800d7c0 <__multadd>
 800d570:	42af      	cmp	r7, r5
 800d572:	4681      	mov	r9, r0
 800d574:	f04f 0300 	mov.w	r3, #0
 800d578:	f04f 020a 	mov.w	r2, #10
 800d57c:	4639      	mov	r1, r7
 800d57e:	4658      	mov	r0, fp
 800d580:	d107      	bne.n	800d592 <_dtoa_r+0xac2>
 800d582:	f000 f91d 	bl	800d7c0 <__multadd>
 800d586:	4607      	mov	r7, r0
 800d588:	4605      	mov	r5, r0
 800d58a:	9b07      	ldr	r3, [sp, #28]
 800d58c:	3301      	adds	r3, #1
 800d58e:	9307      	str	r3, [sp, #28]
 800d590:	e774      	b.n	800d47c <_dtoa_r+0x9ac>
 800d592:	f000 f915 	bl	800d7c0 <__multadd>
 800d596:	4629      	mov	r1, r5
 800d598:	4607      	mov	r7, r0
 800d59a:	2300      	movs	r3, #0
 800d59c:	220a      	movs	r2, #10
 800d59e:	4658      	mov	r0, fp
 800d5a0:	f000 f90e 	bl	800d7c0 <__multadd>
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	e7f0      	b.n	800d58a <_dtoa_r+0xaba>
 800d5a8:	9b00      	ldr	r3, [sp, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfcc      	ite	gt
 800d5ae:	461e      	movgt	r6, r3
 800d5b0:	2601      	movle	r6, #1
 800d5b2:	4456      	add	r6, sl
 800d5b4:	2700      	movs	r7, #0
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	4658      	mov	r0, fp
 800d5bc:	f000 faf6 	bl	800dbac <__lshift>
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	4681      	mov	r9, r0
 800d5c4:	f000 fb5e 	bl	800dc84 <__mcmp>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	dcb0      	bgt.n	800d52e <_dtoa_r+0xa5e>
 800d5cc:	d102      	bne.n	800d5d4 <_dtoa_r+0xb04>
 800d5ce:	f018 0f01 	tst.w	r8, #1
 800d5d2:	d1ac      	bne.n	800d52e <_dtoa_r+0xa5e>
 800d5d4:	4633      	mov	r3, r6
 800d5d6:	461e      	mov	r6, r3
 800d5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5dc:	2a30      	cmp	r2, #48	@ 0x30
 800d5de:	d0fa      	beq.n	800d5d6 <_dtoa_r+0xb06>
 800d5e0:	e5c2      	b.n	800d168 <_dtoa_r+0x698>
 800d5e2:	459a      	cmp	sl, r3
 800d5e4:	d1a4      	bne.n	800d530 <_dtoa_r+0xa60>
 800d5e6:	9b04      	ldr	r3, [sp, #16]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	2331      	movs	r3, #49	@ 0x31
 800d5ee:	f88a 3000 	strb.w	r3, [sl]
 800d5f2:	e5b9      	b.n	800d168 <_dtoa_r+0x698>
 800d5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d654 <_dtoa_r+0xb84>
 800d5fa:	b11b      	cbz	r3, 800d604 <_dtoa_r+0xb34>
 800d5fc:	f10a 0308 	add.w	r3, sl, #8
 800d600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	4650      	mov	r0, sl
 800d606:	b019      	add	sp, #100	@ 0x64
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60e:	2b01      	cmp	r3, #1
 800d610:	f77f ae37 	ble.w	800d282 <_dtoa_r+0x7b2>
 800d614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d616:	930a      	str	r3, [sp, #40]	@ 0x28
 800d618:	2001      	movs	r0, #1
 800d61a:	e655      	b.n	800d2c8 <_dtoa_r+0x7f8>
 800d61c:	9b00      	ldr	r3, [sp, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f77f aed6 	ble.w	800d3d0 <_dtoa_r+0x900>
 800d624:	4656      	mov	r6, sl
 800d626:	4621      	mov	r1, r4
 800d628:	4648      	mov	r0, r9
 800d62a:	f7ff f9c9 	bl	800c9c0 <quorem>
 800d62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d632:	f806 8b01 	strb.w	r8, [r6], #1
 800d636:	9b00      	ldr	r3, [sp, #0]
 800d638:	eba6 020a 	sub.w	r2, r6, sl
 800d63c:	4293      	cmp	r3, r2
 800d63e:	ddb3      	ble.n	800d5a8 <_dtoa_r+0xad8>
 800d640:	4649      	mov	r1, r9
 800d642:	2300      	movs	r3, #0
 800d644:	220a      	movs	r2, #10
 800d646:	4658      	mov	r0, fp
 800d648:	f000 f8ba 	bl	800d7c0 <__multadd>
 800d64c:	4681      	mov	r9, r0
 800d64e:	e7ea      	b.n	800d626 <_dtoa_r+0xb56>
 800d650:	08012147 	.word	0x08012147
 800d654:	080120cb 	.word	0x080120cb

0800d658 <_free_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4605      	mov	r5, r0
 800d65c:	2900      	cmp	r1, #0
 800d65e:	d041      	beq.n	800d6e4 <_free_r+0x8c>
 800d660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d664:	1f0c      	subs	r4, r1, #4
 800d666:	2b00      	cmp	r3, #0
 800d668:	bfb8      	it	lt
 800d66a:	18e4      	addlt	r4, r4, r3
 800d66c:	f7fe f8e0 	bl	800b830 <__malloc_lock>
 800d670:	4a1d      	ldr	r2, [pc, #116]	@ (800d6e8 <_free_r+0x90>)
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	b933      	cbnz	r3, 800d684 <_free_r+0x2c>
 800d676:	6063      	str	r3, [r4, #4]
 800d678:	6014      	str	r4, [r2, #0]
 800d67a:	4628      	mov	r0, r5
 800d67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d680:	f7fe b8dc 	b.w	800b83c <__malloc_unlock>
 800d684:	42a3      	cmp	r3, r4
 800d686:	d908      	bls.n	800d69a <_free_r+0x42>
 800d688:	6820      	ldr	r0, [r4, #0]
 800d68a:	1821      	adds	r1, r4, r0
 800d68c:	428b      	cmp	r3, r1
 800d68e:	bf01      	itttt	eq
 800d690:	6819      	ldreq	r1, [r3, #0]
 800d692:	685b      	ldreq	r3, [r3, #4]
 800d694:	1809      	addeq	r1, r1, r0
 800d696:	6021      	streq	r1, [r4, #0]
 800d698:	e7ed      	b.n	800d676 <_free_r+0x1e>
 800d69a:	461a      	mov	r2, r3
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	b10b      	cbz	r3, 800d6a4 <_free_r+0x4c>
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	d9fa      	bls.n	800d69a <_free_r+0x42>
 800d6a4:	6811      	ldr	r1, [r2, #0]
 800d6a6:	1850      	adds	r0, r2, r1
 800d6a8:	42a0      	cmp	r0, r4
 800d6aa:	d10b      	bne.n	800d6c4 <_free_r+0x6c>
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	4401      	add	r1, r0
 800d6b0:	1850      	adds	r0, r2, r1
 800d6b2:	4283      	cmp	r3, r0
 800d6b4:	6011      	str	r1, [r2, #0]
 800d6b6:	d1e0      	bne.n	800d67a <_free_r+0x22>
 800d6b8:	6818      	ldr	r0, [r3, #0]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	6053      	str	r3, [r2, #4]
 800d6be:	4408      	add	r0, r1
 800d6c0:	6010      	str	r0, [r2, #0]
 800d6c2:	e7da      	b.n	800d67a <_free_r+0x22>
 800d6c4:	d902      	bls.n	800d6cc <_free_r+0x74>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	e7d6      	b.n	800d67a <_free_r+0x22>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	1821      	adds	r1, r4, r0
 800d6d0:	428b      	cmp	r3, r1
 800d6d2:	bf04      	itt	eq
 800d6d4:	6819      	ldreq	r1, [r3, #0]
 800d6d6:	685b      	ldreq	r3, [r3, #4]
 800d6d8:	6063      	str	r3, [r4, #4]
 800d6da:	bf04      	itt	eq
 800d6dc:	1809      	addeq	r1, r1, r0
 800d6de:	6021      	streq	r1, [r4, #0]
 800d6e0:	6054      	str	r4, [r2, #4]
 800d6e2:	e7ca      	b.n	800d67a <_free_r+0x22>
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20001730 	.word	0x20001730

0800d6ec <malloc>:
 800d6ec:	4b02      	ldr	r3, [pc, #8]	@ (800d6f8 <malloc+0xc>)
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	f7fe b81d 	b.w	800b730 <_malloc_r>
 800d6f6:	bf00      	nop
 800d6f8:	20000044 	.word	0x20000044

0800d6fc <_Balloc>:
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	69c6      	ldr	r6, [r0, #28]
 800d700:	4604      	mov	r4, r0
 800d702:	460d      	mov	r5, r1
 800d704:	b976      	cbnz	r6, 800d724 <_Balloc+0x28>
 800d706:	2010      	movs	r0, #16
 800d708:	f7ff fff0 	bl	800d6ec <malloc>
 800d70c:	4602      	mov	r2, r0
 800d70e:	61e0      	str	r0, [r4, #28]
 800d710:	b920      	cbnz	r0, 800d71c <_Balloc+0x20>
 800d712:	4b18      	ldr	r3, [pc, #96]	@ (800d774 <_Balloc+0x78>)
 800d714:	4818      	ldr	r0, [pc, #96]	@ (800d778 <_Balloc+0x7c>)
 800d716:	216b      	movs	r1, #107	@ 0x6b
 800d718:	f002 f8ee 	bl	800f8f8 <__assert_func>
 800d71c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d720:	6006      	str	r6, [r0, #0]
 800d722:	60c6      	str	r6, [r0, #12]
 800d724:	69e6      	ldr	r6, [r4, #28]
 800d726:	68f3      	ldr	r3, [r6, #12]
 800d728:	b183      	cbz	r3, 800d74c <_Balloc+0x50>
 800d72a:	69e3      	ldr	r3, [r4, #28]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d732:	b9b8      	cbnz	r0, 800d764 <_Balloc+0x68>
 800d734:	2101      	movs	r1, #1
 800d736:	fa01 f605 	lsl.w	r6, r1, r5
 800d73a:	1d72      	adds	r2, r6, #5
 800d73c:	0092      	lsls	r2, r2, #2
 800d73e:	4620      	mov	r0, r4
 800d740:	f7fd ffc0 	bl	800b6c4 <_calloc_r>
 800d744:	b160      	cbz	r0, 800d760 <_Balloc+0x64>
 800d746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d74a:	e00e      	b.n	800d76a <_Balloc+0x6e>
 800d74c:	2221      	movs	r2, #33	@ 0x21
 800d74e:	2104      	movs	r1, #4
 800d750:	4620      	mov	r0, r4
 800d752:	f7fd ffb7 	bl	800b6c4 <_calloc_r>
 800d756:	69e3      	ldr	r3, [r4, #28]
 800d758:	60f0      	str	r0, [r6, #12]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1e4      	bne.n	800d72a <_Balloc+0x2e>
 800d760:	2000      	movs	r0, #0
 800d762:	bd70      	pop	{r4, r5, r6, pc}
 800d764:	6802      	ldr	r2, [r0, #0]
 800d766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d76a:	2300      	movs	r3, #0
 800d76c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d770:	e7f7      	b.n	800d762 <_Balloc+0x66>
 800d772:	bf00      	nop
 800d774:	080120d8 	.word	0x080120d8
 800d778:	08012158 	.word	0x08012158

0800d77c <_Bfree>:
 800d77c:	b570      	push	{r4, r5, r6, lr}
 800d77e:	69c6      	ldr	r6, [r0, #28]
 800d780:	4605      	mov	r5, r0
 800d782:	460c      	mov	r4, r1
 800d784:	b976      	cbnz	r6, 800d7a4 <_Bfree+0x28>
 800d786:	2010      	movs	r0, #16
 800d788:	f7ff ffb0 	bl	800d6ec <malloc>
 800d78c:	4602      	mov	r2, r0
 800d78e:	61e8      	str	r0, [r5, #28]
 800d790:	b920      	cbnz	r0, 800d79c <_Bfree+0x20>
 800d792:	4b09      	ldr	r3, [pc, #36]	@ (800d7b8 <_Bfree+0x3c>)
 800d794:	4809      	ldr	r0, [pc, #36]	@ (800d7bc <_Bfree+0x40>)
 800d796:	218f      	movs	r1, #143	@ 0x8f
 800d798:	f002 f8ae 	bl	800f8f8 <__assert_func>
 800d79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7a0:	6006      	str	r6, [r0, #0]
 800d7a2:	60c6      	str	r6, [r0, #12]
 800d7a4:	b13c      	cbz	r4, 800d7b6 <_Bfree+0x3a>
 800d7a6:	69eb      	ldr	r3, [r5, #28]
 800d7a8:	6862      	ldr	r2, [r4, #4]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b0:	6021      	str	r1, [r4, #0]
 800d7b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	080120d8 	.word	0x080120d8
 800d7bc:	08012158 	.word	0x08012158

0800d7c0 <__multadd>:
 800d7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c4:	690d      	ldr	r5, [r1, #16]
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	461e      	mov	r6, r3
 800d7cc:	f101 0c14 	add.w	ip, r1, #20
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f8dc 3000 	ldr.w	r3, [ip]
 800d7d6:	b299      	uxth	r1, r3
 800d7d8:	fb02 6101 	mla	r1, r2, r1, r6
 800d7dc:	0c1e      	lsrs	r6, r3, #16
 800d7de:	0c0b      	lsrs	r3, r1, #16
 800d7e0:	fb02 3306 	mla	r3, r2, r6, r3
 800d7e4:	b289      	uxth	r1, r1
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7ec:	4285      	cmp	r5, r0
 800d7ee:	f84c 1b04 	str.w	r1, [ip], #4
 800d7f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7f6:	dcec      	bgt.n	800d7d2 <__multadd+0x12>
 800d7f8:	b30e      	cbz	r6, 800d83e <__multadd+0x7e>
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	42ab      	cmp	r3, r5
 800d7fe:	dc19      	bgt.n	800d834 <__multadd+0x74>
 800d800:	6861      	ldr	r1, [r4, #4]
 800d802:	4638      	mov	r0, r7
 800d804:	3101      	adds	r1, #1
 800d806:	f7ff ff79 	bl	800d6fc <_Balloc>
 800d80a:	4680      	mov	r8, r0
 800d80c:	b928      	cbnz	r0, 800d81a <__multadd+0x5a>
 800d80e:	4602      	mov	r2, r0
 800d810:	4b0c      	ldr	r3, [pc, #48]	@ (800d844 <__multadd+0x84>)
 800d812:	480d      	ldr	r0, [pc, #52]	@ (800d848 <__multadd+0x88>)
 800d814:	21ba      	movs	r1, #186	@ 0xba
 800d816:	f002 f86f 	bl	800f8f8 <__assert_func>
 800d81a:	6922      	ldr	r2, [r4, #16]
 800d81c:	3202      	adds	r2, #2
 800d81e:	f104 010c 	add.w	r1, r4, #12
 800d822:	0092      	lsls	r2, r2, #2
 800d824:	300c      	adds	r0, #12
 800d826:	f7ff f8b6 	bl	800c996 <memcpy>
 800d82a:	4621      	mov	r1, r4
 800d82c:	4638      	mov	r0, r7
 800d82e:	f7ff ffa5 	bl	800d77c <_Bfree>
 800d832:	4644      	mov	r4, r8
 800d834:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d838:	3501      	adds	r5, #1
 800d83a:	615e      	str	r6, [r3, #20]
 800d83c:	6125      	str	r5, [r4, #16]
 800d83e:	4620      	mov	r0, r4
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	08012147 	.word	0x08012147
 800d848:	08012158 	.word	0x08012158

0800d84c <__s2b>:
 800d84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d850:	460c      	mov	r4, r1
 800d852:	4615      	mov	r5, r2
 800d854:	461f      	mov	r7, r3
 800d856:	2209      	movs	r2, #9
 800d858:	3308      	adds	r3, #8
 800d85a:	4606      	mov	r6, r0
 800d85c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d860:	2100      	movs	r1, #0
 800d862:	2201      	movs	r2, #1
 800d864:	429a      	cmp	r2, r3
 800d866:	db09      	blt.n	800d87c <__s2b+0x30>
 800d868:	4630      	mov	r0, r6
 800d86a:	f7ff ff47 	bl	800d6fc <_Balloc>
 800d86e:	b940      	cbnz	r0, 800d882 <__s2b+0x36>
 800d870:	4602      	mov	r2, r0
 800d872:	4b19      	ldr	r3, [pc, #100]	@ (800d8d8 <__s2b+0x8c>)
 800d874:	4819      	ldr	r0, [pc, #100]	@ (800d8dc <__s2b+0x90>)
 800d876:	21d3      	movs	r1, #211	@ 0xd3
 800d878:	f002 f83e 	bl	800f8f8 <__assert_func>
 800d87c:	0052      	lsls	r2, r2, #1
 800d87e:	3101      	adds	r1, #1
 800d880:	e7f0      	b.n	800d864 <__s2b+0x18>
 800d882:	9b08      	ldr	r3, [sp, #32]
 800d884:	6143      	str	r3, [r0, #20]
 800d886:	2d09      	cmp	r5, #9
 800d888:	f04f 0301 	mov.w	r3, #1
 800d88c:	6103      	str	r3, [r0, #16]
 800d88e:	dd16      	ble.n	800d8be <__s2b+0x72>
 800d890:	f104 0909 	add.w	r9, r4, #9
 800d894:	46c8      	mov	r8, r9
 800d896:	442c      	add	r4, r5
 800d898:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d89c:	4601      	mov	r1, r0
 800d89e:	3b30      	subs	r3, #48	@ 0x30
 800d8a0:	220a      	movs	r2, #10
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ff8c 	bl	800d7c0 <__multadd>
 800d8a8:	45a0      	cmp	r8, r4
 800d8aa:	d1f5      	bne.n	800d898 <__s2b+0x4c>
 800d8ac:	f1a5 0408 	sub.w	r4, r5, #8
 800d8b0:	444c      	add	r4, r9
 800d8b2:	1b2d      	subs	r5, r5, r4
 800d8b4:	1963      	adds	r3, r4, r5
 800d8b6:	42bb      	cmp	r3, r7
 800d8b8:	db04      	blt.n	800d8c4 <__s2b+0x78>
 800d8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8be:	340a      	adds	r4, #10
 800d8c0:	2509      	movs	r5, #9
 800d8c2:	e7f6      	b.n	800d8b2 <__s2b+0x66>
 800d8c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8c8:	4601      	mov	r1, r0
 800d8ca:	3b30      	subs	r3, #48	@ 0x30
 800d8cc:	220a      	movs	r2, #10
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f7ff ff76 	bl	800d7c0 <__multadd>
 800d8d4:	e7ee      	b.n	800d8b4 <__s2b+0x68>
 800d8d6:	bf00      	nop
 800d8d8:	08012147 	.word	0x08012147
 800d8dc:	08012158 	.word	0x08012158

0800d8e0 <__hi0bits>:
 800d8e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	bf36      	itet	cc
 800d8e8:	0403      	lslcc	r3, r0, #16
 800d8ea:	2000      	movcs	r0, #0
 800d8ec:	2010      	movcc	r0, #16
 800d8ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d8f2:	bf3c      	itt	cc
 800d8f4:	021b      	lslcc	r3, r3, #8
 800d8f6:	3008      	addcc	r0, #8
 800d8f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8fc:	bf3c      	itt	cc
 800d8fe:	011b      	lslcc	r3, r3, #4
 800d900:	3004      	addcc	r0, #4
 800d902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d906:	bf3c      	itt	cc
 800d908:	009b      	lslcc	r3, r3, #2
 800d90a:	3002      	addcc	r0, #2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	db05      	blt.n	800d91c <__hi0bits+0x3c>
 800d910:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d914:	f100 0001 	add.w	r0, r0, #1
 800d918:	bf08      	it	eq
 800d91a:	2020      	moveq	r0, #32
 800d91c:	4770      	bx	lr

0800d91e <__lo0bits>:
 800d91e:	6803      	ldr	r3, [r0, #0]
 800d920:	4602      	mov	r2, r0
 800d922:	f013 0007 	ands.w	r0, r3, #7
 800d926:	d00b      	beq.n	800d940 <__lo0bits+0x22>
 800d928:	07d9      	lsls	r1, r3, #31
 800d92a:	d421      	bmi.n	800d970 <__lo0bits+0x52>
 800d92c:	0798      	lsls	r0, r3, #30
 800d92e:	bf49      	itett	mi
 800d930:	085b      	lsrmi	r3, r3, #1
 800d932:	089b      	lsrpl	r3, r3, #2
 800d934:	2001      	movmi	r0, #1
 800d936:	6013      	strmi	r3, [r2, #0]
 800d938:	bf5c      	itt	pl
 800d93a:	6013      	strpl	r3, [r2, #0]
 800d93c:	2002      	movpl	r0, #2
 800d93e:	4770      	bx	lr
 800d940:	b299      	uxth	r1, r3
 800d942:	b909      	cbnz	r1, 800d948 <__lo0bits+0x2a>
 800d944:	0c1b      	lsrs	r3, r3, #16
 800d946:	2010      	movs	r0, #16
 800d948:	b2d9      	uxtb	r1, r3
 800d94a:	b909      	cbnz	r1, 800d950 <__lo0bits+0x32>
 800d94c:	3008      	adds	r0, #8
 800d94e:	0a1b      	lsrs	r3, r3, #8
 800d950:	0719      	lsls	r1, r3, #28
 800d952:	bf04      	itt	eq
 800d954:	091b      	lsreq	r3, r3, #4
 800d956:	3004      	addeq	r0, #4
 800d958:	0799      	lsls	r1, r3, #30
 800d95a:	bf04      	itt	eq
 800d95c:	089b      	lsreq	r3, r3, #2
 800d95e:	3002      	addeq	r0, #2
 800d960:	07d9      	lsls	r1, r3, #31
 800d962:	d403      	bmi.n	800d96c <__lo0bits+0x4e>
 800d964:	085b      	lsrs	r3, r3, #1
 800d966:	f100 0001 	add.w	r0, r0, #1
 800d96a:	d003      	beq.n	800d974 <__lo0bits+0x56>
 800d96c:	6013      	str	r3, [r2, #0]
 800d96e:	4770      	bx	lr
 800d970:	2000      	movs	r0, #0
 800d972:	4770      	bx	lr
 800d974:	2020      	movs	r0, #32
 800d976:	4770      	bx	lr

0800d978 <__i2b>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	460c      	mov	r4, r1
 800d97c:	2101      	movs	r1, #1
 800d97e:	f7ff febd 	bl	800d6fc <_Balloc>
 800d982:	4602      	mov	r2, r0
 800d984:	b928      	cbnz	r0, 800d992 <__i2b+0x1a>
 800d986:	4b05      	ldr	r3, [pc, #20]	@ (800d99c <__i2b+0x24>)
 800d988:	4805      	ldr	r0, [pc, #20]	@ (800d9a0 <__i2b+0x28>)
 800d98a:	f240 1145 	movw	r1, #325	@ 0x145
 800d98e:	f001 ffb3 	bl	800f8f8 <__assert_func>
 800d992:	2301      	movs	r3, #1
 800d994:	6144      	str	r4, [r0, #20]
 800d996:	6103      	str	r3, [r0, #16]
 800d998:	bd10      	pop	{r4, pc}
 800d99a:	bf00      	nop
 800d99c:	08012147 	.word	0x08012147
 800d9a0:	08012158 	.word	0x08012158

0800d9a4 <__multiply>:
 800d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	690a      	ldr	r2, [r1, #16]
 800d9ac:	6923      	ldr	r3, [r4, #16]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	bfa8      	it	ge
 800d9b2:	4623      	movge	r3, r4
 800d9b4:	460f      	mov	r7, r1
 800d9b6:	bfa4      	itt	ge
 800d9b8:	460c      	movge	r4, r1
 800d9ba:	461f      	movge	r7, r3
 800d9bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d9c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d9c4:	68a3      	ldr	r3, [r4, #8]
 800d9c6:	6861      	ldr	r1, [r4, #4]
 800d9c8:	eb0a 0609 	add.w	r6, sl, r9
 800d9cc:	42b3      	cmp	r3, r6
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	bfb8      	it	lt
 800d9d2:	3101      	addlt	r1, #1
 800d9d4:	f7ff fe92 	bl	800d6fc <_Balloc>
 800d9d8:	b930      	cbnz	r0, 800d9e8 <__multiply+0x44>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	4b44      	ldr	r3, [pc, #272]	@ (800daf0 <__multiply+0x14c>)
 800d9de:	4845      	ldr	r0, [pc, #276]	@ (800daf4 <__multiply+0x150>)
 800d9e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d9e4:	f001 ff88 	bl	800f8f8 <__assert_func>
 800d9e8:	f100 0514 	add.w	r5, r0, #20
 800d9ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9f0:	462b      	mov	r3, r5
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	4543      	cmp	r3, r8
 800d9f6:	d321      	bcc.n	800da3c <__multiply+0x98>
 800d9f8:	f107 0114 	add.w	r1, r7, #20
 800d9fc:	f104 0214 	add.w	r2, r4, #20
 800da00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800da04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800da08:	9302      	str	r3, [sp, #8]
 800da0a:	1b13      	subs	r3, r2, r4
 800da0c:	3b15      	subs	r3, #21
 800da0e:	f023 0303 	bic.w	r3, r3, #3
 800da12:	3304      	adds	r3, #4
 800da14:	f104 0715 	add.w	r7, r4, #21
 800da18:	42ba      	cmp	r2, r7
 800da1a:	bf38      	it	cc
 800da1c:	2304      	movcc	r3, #4
 800da1e:	9301      	str	r3, [sp, #4]
 800da20:	9b02      	ldr	r3, [sp, #8]
 800da22:	9103      	str	r1, [sp, #12]
 800da24:	428b      	cmp	r3, r1
 800da26:	d80c      	bhi.n	800da42 <__multiply+0x9e>
 800da28:	2e00      	cmp	r6, #0
 800da2a:	dd03      	ble.n	800da34 <__multiply+0x90>
 800da2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da30:	2b00      	cmp	r3, #0
 800da32:	d05b      	beq.n	800daec <__multiply+0x148>
 800da34:	6106      	str	r6, [r0, #16]
 800da36:	b005      	add	sp, #20
 800da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3c:	f843 2b04 	str.w	r2, [r3], #4
 800da40:	e7d8      	b.n	800d9f4 <__multiply+0x50>
 800da42:	f8b1 a000 	ldrh.w	sl, [r1]
 800da46:	f1ba 0f00 	cmp.w	sl, #0
 800da4a:	d024      	beq.n	800da96 <__multiply+0xf2>
 800da4c:	f104 0e14 	add.w	lr, r4, #20
 800da50:	46a9      	mov	r9, r5
 800da52:	f04f 0c00 	mov.w	ip, #0
 800da56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da5a:	f8d9 3000 	ldr.w	r3, [r9]
 800da5e:	fa1f fb87 	uxth.w	fp, r7
 800da62:	b29b      	uxth	r3, r3
 800da64:	fb0a 330b 	mla	r3, sl, fp, r3
 800da68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800da6c:	f8d9 7000 	ldr.w	r7, [r9]
 800da70:	4463      	add	r3, ip
 800da72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da76:	fb0a c70b 	mla	r7, sl, fp, ip
 800da7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800da7e:	b29b      	uxth	r3, r3
 800da80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da84:	4572      	cmp	r2, lr
 800da86:	f849 3b04 	str.w	r3, [r9], #4
 800da8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da8e:	d8e2      	bhi.n	800da56 <__multiply+0xb2>
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	f845 c003 	str.w	ip, [r5, r3]
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da9c:	3104      	adds	r1, #4
 800da9e:	f1b9 0f00 	cmp.w	r9, #0
 800daa2:	d021      	beq.n	800dae8 <__multiply+0x144>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	f104 0c14 	add.w	ip, r4, #20
 800daaa:	46ae      	mov	lr, r5
 800daac:	f04f 0a00 	mov.w	sl, #0
 800dab0:	f8bc b000 	ldrh.w	fp, [ip]
 800dab4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dab8:	fb09 770b 	mla	r7, r9, fp, r7
 800dabc:	4457      	add	r7, sl
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dac4:	f84e 3b04 	str.w	r3, [lr], #4
 800dac8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dacc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dad0:	f8be 3000 	ldrh.w	r3, [lr]
 800dad4:	fb09 330a 	mla	r3, r9, sl, r3
 800dad8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dadc:	4562      	cmp	r2, ip
 800dade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dae2:	d8e5      	bhi.n	800dab0 <__multiply+0x10c>
 800dae4:	9f01      	ldr	r7, [sp, #4]
 800dae6:	51eb      	str	r3, [r5, r7]
 800dae8:	3504      	adds	r5, #4
 800daea:	e799      	b.n	800da20 <__multiply+0x7c>
 800daec:	3e01      	subs	r6, #1
 800daee:	e79b      	b.n	800da28 <__multiply+0x84>
 800daf0:	08012147 	.word	0x08012147
 800daf4:	08012158 	.word	0x08012158

0800daf8 <__pow5mult>:
 800daf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dafc:	4615      	mov	r5, r2
 800dafe:	f012 0203 	ands.w	r2, r2, #3
 800db02:	4607      	mov	r7, r0
 800db04:	460e      	mov	r6, r1
 800db06:	d007      	beq.n	800db18 <__pow5mult+0x20>
 800db08:	4c25      	ldr	r4, [pc, #148]	@ (800dba0 <__pow5mult+0xa8>)
 800db0a:	3a01      	subs	r2, #1
 800db0c:	2300      	movs	r3, #0
 800db0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db12:	f7ff fe55 	bl	800d7c0 <__multadd>
 800db16:	4606      	mov	r6, r0
 800db18:	10ad      	asrs	r5, r5, #2
 800db1a:	d03d      	beq.n	800db98 <__pow5mult+0xa0>
 800db1c:	69fc      	ldr	r4, [r7, #28]
 800db1e:	b97c      	cbnz	r4, 800db40 <__pow5mult+0x48>
 800db20:	2010      	movs	r0, #16
 800db22:	f7ff fde3 	bl	800d6ec <malloc>
 800db26:	4602      	mov	r2, r0
 800db28:	61f8      	str	r0, [r7, #28]
 800db2a:	b928      	cbnz	r0, 800db38 <__pow5mult+0x40>
 800db2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dba4 <__pow5mult+0xac>)
 800db2e:	481e      	ldr	r0, [pc, #120]	@ (800dba8 <__pow5mult+0xb0>)
 800db30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800db34:	f001 fee0 	bl	800f8f8 <__assert_func>
 800db38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db3c:	6004      	str	r4, [r0, #0]
 800db3e:	60c4      	str	r4, [r0, #12]
 800db40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db48:	b94c      	cbnz	r4, 800db5e <__pow5mult+0x66>
 800db4a:	f240 2171 	movw	r1, #625	@ 0x271
 800db4e:	4638      	mov	r0, r7
 800db50:	f7ff ff12 	bl	800d978 <__i2b>
 800db54:	2300      	movs	r3, #0
 800db56:	f8c8 0008 	str.w	r0, [r8, #8]
 800db5a:	4604      	mov	r4, r0
 800db5c:	6003      	str	r3, [r0, #0]
 800db5e:	f04f 0900 	mov.w	r9, #0
 800db62:	07eb      	lsls	r3, r5, #31
 800db64:	d50a      	bpl.n	800db7c <__pow5mult+0x84>
 800db66:	4631      	mov	r1, r6
 800db68:	4622      	mov	r2, r4
 800db6a:	4638      	mov	r0, r7
 800db6c:	f7ff ff1a 	bl	800d9a4 <__multiply>
 800db70:	4631      	mov	r1, r6
 800db72:	4680      	mov	r8, r0
 800db74:	4638      	mov	r0, r7
 800db76:	f7ff fe01 	bl	800d77c <_Bfree>
 800db7a:	4646      	mov	r6, r8
 800db7c:	106d      	asrs	r5, r5, #1
 800db7e:	d00b      	beq.n	800db98 <__pow5mult+0xa0>
 800db80:	6820      	ldr	r0, [r4, #0]
 800db82:	b938      	cbnz	r0, 800db94 <__pow5mult+0x9c>
 800db84:	4622      	mov	r2, r4
 800db86:	4621      	mov	r1, r4
 800db88:	4638      	mov	r0, r7
 800db8a:	f7ff ff0b 	bl	800d9a4 <__multiply>
 800db8e:	6020      	str	r0, [r4, #0]
 800db90:	f8c0 9000 	str.w	r9, [r0]
 800db94:	4604      	mov	r4, r0
 800db96:	e7e4      	b.n	800db62 <__pow5mult+0x6a>
 800db98:	4630      	mov	r0, r6
 800db9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9e:	bf00      	nop
 800dba0:	080121b4 	.word	0x080121b4
 800dba4:	080120d8 	.word	0x080120d8
 800dba8:	08012158 	.word	0x08012158

0800dbac <__lshift>:
 800dbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	6849      	ldr	r1, [r1, #4]
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbba:	68a3      	ldr	r3, [r4, #8]
 800dbbc:	4607      	mov	r7, r0
 800dbbe:	4691      	mov	r9, r2
 800dbc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbc4:	f108 0601 	add.w	r6, r8, #1
 800dbc8:	42b3      	cmp	r3, r6
 800dbca:	db0b      	blt.n	800dbe4 <__lshift+0x38>
 800dbcc:	4638      	mov	r0, r7
 800dbce:	f7ff fd95 	bl	800d6fc <_Balloc>
 800dbd2:	4605      	mov	r5, r0
 800dbd4:	b948      	cbnz	r0, 800dbea <__lshift+0x3e>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	4b28      	ldr	r3, [pc, #160]	@ (800dc7c <__lshift+0xd0>)
 800dbda:	4829      	ldr	r0, [pc, #164]	@ (800dc80 <__lshift+0xd4>)
 800dbdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dbe0:	f001 fe8a 	bl	800f8f8 <__assert_func>
 800dbe4:	3101      	adds	r1, #1
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	e7ee      	b.n	800dbc8 <__lshift+0x1c>
 800dbea:	2300      	movs	r3, #0
 800dbec:	f100 0114 	add.w	r1, r0, #20
 800dbf0:	f100 0210 	add.w	r2, r0, #16
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	4553      	cmp	r3, sl
 800dbf8:	db33      	blt.n	800dc62 <__lshift+0xb6>
 800dbfa:	6920      	ldr	r0, [r4, #16]
 800dbfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc00:	f104 0314 	add.w	r3, r4, #20
 800dc04:	f019 091f 	ands.w	r9, r9, #31
 800dc08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc10:	d02b      	beq.n	800dc6a <__lshift+0xbe>
 800dc12:	f1c9 0e20 	rsb	lr, r9, #32
 800dc16:	468a      	mov	sl, r1
 800dc18:	2200      	movs	r2, #0
 800dc1a:	6818      	ldr	r0, [r3, #0]
 800dc1c:	fa00 f009 	lsl.w	r0, r0, r9
 800dc20:	4310      	orrs	r0, r2
 800dc22:	f84a 0b04 	str.w	r0, [sl], #4
 800dc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2a:	459c      	cmp	ip, r3
 800dc2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc30:	d8f3      	bhi.n	800dc1a <__lshift+0x6e>
 800dc32:	ebac 0304 	sub.w	r3, ip, r4
 800dc36:	3b15      	subs	r3, #21
 800dc38:	f023 0303 	bic.w	r3, r3, #3
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	f104 0015 	add.w	r0, r4, #21
 800dc42:	4584      	cmp	ip, r0
 800dc44:	bf38      	it	cc
 800dc46:	2304      	movcc	r3, #4
 800dc48:	50ca      	str	r2, [r1, r3]
 800dc4a:	b10a      	cbz	r2, 800dc50 <__lshift+0xa4>
 800dc4c:	f108 0602 	add.w	r6, r8, #2
 800dc50:	3e01      	subs	r6, #1
 800dc52:	4638      	mov	r0, r7
 800dc54:	612e      	str	r6, [r5, #16]
 800dc56:	4621      	mov	r1, r4
 800dc58:	f7ff fd90 	bl	800d77c <_Bfree>
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc62:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc66:	3301      	adds	r3, #1
 800dc68:	e7c5      	b.n	800dbf6 <__lshift+0x4a>
 800dc6a:	3904      	subs	r1, #4
 800dc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc70:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc74:	459c      	cmp	ip, r3
 800dc76:	d8f9      	bhi.n	800dc6c <__lshift+0xc0>
 800dc78:	e7ea      	b.n	800dc50 <__lshift+0xa4>
 800dc7a:	bf00      	nop
 800dc7c:	08012147 	.word	0x08012147
 800dc80:	08012158 	.word	0x08012158

0800dc84 <__mcmp>:
 800dc84:	690a      	ldr	r2, [r1, #16]
 800dc86:	4603      	mov	r3, r0
 800dc88:	6900      	ldr	r0, [r0, #16]
 800dc8a:	1a80      	subs	r0, r0, r2
 800dc8c:	b530      	push	{r4, r5, lr}
 800dc8e:	d10e      	bne.n	800dcae <__mcmp+0x2a>
 800dc90:	3314      	adds	r3, #20
 800dc92:	3114      	adds	r1, #20
 800dc94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dca4:	4295      	cmp	r5, r2
 800dca6:	d003      	beq.n	800dcb0 <__mcmp+0x2c>
 800dca8:	d205      	bcs.n	800dcb6 <__mcmp+0x32>
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	bd30      	pop	{r4, r5, pc}
 800dcb0:	42a3      	cmp	r3, r4
 800dcb2:	d3f3      	bcc.n	800dc9c <__mcmp+0x18>
 800dcb4:	e7fb      	b.n	800dcae <__mcmp+0x2a>
 800dcb6:	2001      	movs	r0, #1
 800dcb8:	e7f9      	b.n	800dcae <__mcmp+0x2a>
	...

0800dcbc <__mdiff>:
 800dcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	4689      	mov	r9, r1
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	4648      	mov	r0, r9
 800dcc8:	4614      	mov	r4, r2
 800dcca:	f7ff ffdb 	bl	800dc84 <__mcmp>
 800dcce:	1e05      	subs	r5, r0, #0
 800dcd0:	d112      	bne.n	800dcf8 <__mdiff+0x3c>
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f7ff fd11 	bl	800d6fc <_Balloc>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	b928      	cbnz	r0, 800dcea <__mdiff+0x2e>
 800dcde:	4b3f      	ldr	r3, [pc, #252]	@ (800dddc <__mdiff+0x120>)
 800dce0:	f240 2137 	movw	r1, #567	@ 0x237
 800dce4:	483e      	ldr	r0, [pc, #248]	@ (800dde0 <__mdiff+0x124>)
 800dce6:	f001 fe07 	bl	800f8f8 <__assert_func>
 800dcea:	2301      	movs	r3, #1
 800dcec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	b003      	add	sp, #12
 800dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf8:	bfbc      	itt	lt
 800dcfa:	464b      	movlt	r3, r9
 800dcfc:	46a1      	movlt	r9, r4
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dd04:	bfba      	itte	lt
 800dd06:	461c      	movlt	r4, r3
 800dd08:	2501      	movlt	r5, #1
 800dd0a:	2500      	movge	r5, #0
 800dd0c:	f7ff fcf6 	bl	800d6fc <_Balloc>
 800dd10:	4602      	mov	r2, r0
 800dd12:	b918      	cbnz	r0, 800dd1c <__mdiff+0x60>
 800dd14:	4b31      	ldr	r3, [pc, #196]	@ (800dddc <__mdiff+0x120>)
 800dd16:	f240 2145 	movw	r1, #581	@ 0x245
 800dd1a:	e7e3      	b.n	800dce4 <__mdiff+0x28>
 800dd1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dd20:	6926      	ldr	r6, [r4, #16]
 800dd22:	60c5      	str	r5, [r0, #12]
 800dd24:	f109 0310 	add.w	r3, r9, #16
 800dd28:	f109 0514 	add.w	r5, r9, #20
 800dd2c:	f104 0e14 	add.w	lr, r4, #20
 800dd30:	f100 0b14 	add.w	fp, r0, #20
 800dd34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dd38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	46d9      	mov	r9, fp
 800dd40:	f04f 0c00 	mov.w	ip, #0
 800dd44:	9b01      	ldr	r3, [sp, #4]
 800dd46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	fa1f f38a 	uxth.w	r3, sl
 800dd54:	4619      	mov	r1, r3
 800dd56:	b283      	uxth	r3, r0
 800dd58:	1acb      	subs	r3, r1, r3
 800dd5a:	0c00      	lsrs	r0, r0, #16
 800dd5c:	4463      	add	r3, ip
 800dd5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd6c:	4576      	cmp	r6, lr
 800dd6e:	f849 3b04 	str.w	r3, [r9], #4
 800dd72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd76:	d8e5      	bhi.n	800dd44 <__mdiff+0x88>
 800dd78:	1b33      	subs	r3, r6, r4
 800dd7a:	3b15      	subs	r3, #21
 800dd7c:	f023 0303 	bic.w	r3, r3, #3
 800dd80:	3415      	adds	r4, #21
 800dd82:	3304      	adds	r3, #4
 800dd84:	42a6      	cmp	r6, r4
 800dd86:	bf38      	it	cc
 800dd88:	2304      	movcc	r3, #4
 800dd8a:	441d      	add	r5, r3
 800dd8c:	445b      	add	r3, fp
 800dd8e:	461e      	mov	r6, r3
 800dd90:	462c      	mov	r4, r5
 800dd92:	4544      	cmp	r4, r8
 800dd94:	d30e      	bcc.n	800ddb4 <__mdiff+0xf8>
 800dd96:	f108 0103 	add.w	r1, r8, #3
 800dd9a:	1b49      	subs	r1, r1, r5
 800dd9c:	f021 0103 	bic.w	r1, r1, #3
 800dda0:	3d03      	subs	r5, #3
 800dda2:	45a8      	cmp	r8, r5
 800dda4:	bf38      	it	cc
 800dda6:	2100      	movcc	r1, #0
 800dda8:	440b      	add	r3, r1
 800ddaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddae:	b191      	cbz	r1, 800ddd6 <__mdiff+0x11a>
 800ddb0:	6117      	str	r7, [r2, #16]
 800ddb2:	e79d      	b.n	800dcf0 <__mdiff+0x34>
 800ddb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800ddb8:	46e6      	mov	lr, ip
 800ddba:	0c08      	lsrs	r0, r1, #16
 800ddbc:	fa1c fc81 	uxtah	ip, ip, r1
 800ddc0:	4471      	add	r1, lr
 800ddc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ddc6:	b289      	uxth	r1, r1
 800ddc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ddcc:	f846 1b04 	str.w	r1, [r6], #4
 800ddd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ddd4:	e7dd      	b.n	800dd92 <__mdiff+0xd6>
 800ddd6:	3f01      	subs	r7, #1
 800ddd8:	e7e7      	b.n	800ddaa <__mdiff+0xee>
 800ddda:	bf00      	nop
 800dddc:	08012147 	.word	0x08012147
 800dde0:	08012158 	.word	0x08012158

0800dde4 <__ulp>:
 800dde4:	b082      	sub	sp, #8
 800dde6:	ed8d 0b00 	vstr	d0, [sp]
 800ddea:	9a01      	ldr	r2, [sp, #4]
 800ddec:	4b0f      	ldr	r3, [pc, #60]	@ (800de2c <__ulp+0x48>)
 800ddee:	4013      	ands	r3, r2
 800ddf0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	dc08      	bgt.n	800de0a <__ulp+0x26>
 800ddf8:	425b      	negs	r3, r3
 800ddfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ddfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800de02:	da04      	bge.n	800de0e <__ulp+0x2a>
 800de04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800de08:	4113      	asrs	r3, r2
 800de0a:	2200      	movs	r2, #0
 800de0c:	e008      	b.n	800de20 <__ulp+0x3c>
 800de0e:	f1a2 0314 	sub.w	r3, r2, #20
 800de12:	2b1e      	cmp	r3, #30
 800de14:	bfda      	itte	le
 800de16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800de1a:	40da      	lsrle	r2, r3
 800de1c:	2201      	movgt	r2, #1
 800de1e:	2300      	movs	r3, #0
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	ec41 0b10 	vmov	d0, r0, r1
 800de28:	b002      	add	sp, #8
 800de2a:	4770      	bx	lr
 800de2c:	7ff00000 	.word	0x7ff00000

0800de30 <__b2d>:
 800de30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de34:	6906      	ldr	r6, [r0, #16]
 800de36:	f100 0814 	add.w	r8, r0, #20
 800de3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800de3e:	1f37      	subs	r7, r6, #4
 800de40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de44:	4610      	mov	r0, r2
 800de46:	f7ff fd4b 	bl	800d8e0 <__hi0bits>
 800de4a:	f1c0 0320 	rsb	r3, r0, #32
 800de4e:	280a      	cmp	r0, #10
 800de50:	600b      	str	r3, [r1, #0]
 800de52:	491b      	ldr	r1, [pc, #108]	@ (800dec0 <__b2d+0x90>)
 800de54:	dc15      	bgt.n	800de82 <__b2d+0x52>
 800de56:	f1c0 0c0b 	rsb	ip, r0, #11
 800de5a:	fa22 f30c 	lsr.w	r3, r2, ip
 800de5e:	45b8      	cmp	r8, r7
 800de60:	ea43 0501 	orr.w	r5, r3, r1
 800de64:	bf34      	ite	cc
 800de66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de6a:	2300      	movcs	r3, #0
 800de6c:	3015      	adds	r0, #21
 800de6e:	fa02 f000 	lsl.w	r0, r2, r0
 800de72:	fa23 f30c 	lsr.w	r3, r3, ip
 800de76:	4303      	orrs	r3, r0
 800de78:	461c      	mov	r4, r3
 800de7a:	ec45 4b10 	vmov	d0, r4, r5
 800de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de82:	45b8      	cmp	r8, r7
 800de84:	bf3a      	itte	cc
 800de86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de8a:	f1a6 0708 	subcc.w	r7, r6, #8
 800de8e:	2300      	movcs	r3, #0
 800de90:	380b      	subs	r0, #11
 800de92:	d012      	beq.n	800deba <__b2d+0x8a>
 800de94:	f1c0 0120 	rsb	r1, r0, #32
 800de98:	fa23 f401 	lsr.w	r4, r3, r1
 800de9c:	4082      	lsls	r2, r0
 800de9e:	4322      	orrs	r2, r4
 800dea0:	4547      	cmp	r7, r8
 800dea2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dea6:	bf8c      	ite	hi
 800dea8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800deac:	2200      	movls	r2, #0
 800deae:	4083      	lsls	r3, r0
 800deb0:	40ca      	lsrs	r2, r1
 800deb2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800deb6:	4313      	orrs	r3, r2
 800deb8:	e7de      	b.n	800de78 <__b2d+0x48>
 800deba:	ea42 0501 	orr.w	r5, r2, r1
 800debe:	e7db      	b.n	800de78 <__b2d+0x48>
 800dec0:	3ff00000 	.word	0x3ff00000

0800dec4 <__d2b>:
 800dec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dec8:	460f      	mov	r7, r1
 800deca:	2101      	movs	r1, #1
 800decc:	ec59 8b10 	vmov	r8, r9, d0
 800ded0:	4616      	mov	r6, r2
 800ded2:	f7ff fc13 	bl	800d6fc <_Balloc>
 800ded6:	4604      	mov	r4, r0
 800ded8:	b930      	cbnz	r0, 800dee8 <__d2b+0x24>
 800deda:	4602      	mov	r2, r0
 800dedc:	4b23      	ldr	r3, [pc, #140]	@ (800df6c <__d2b+0xa8>)
 800dede:	4824      	ldr	r0, [pc, #144]	@ (800df70 <__d2b+0xac>)
 800dee0:	f240 310f 	movw	r1, #783	@ 0x30f
 800dee4:	f001 fd08 	bl	800f8f8 <__assert_func>
 800dee8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800deec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800def0:	b10d      	cbz	r5, 800def6 <__d2b+0x32>
 800def2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800def6:	9301      	str	r3, [sp, #4]
 800def8:	f1b8 0300 	subs.w	r3, r8, #0
 800defc:	d023      	beq.n	800df46 <__d2b+0x82>
 800defe:	4668      	mov	r0, sp
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	f7ff fd0c 	bl	800d91e <__lo0bits>
 800df06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800df0a:	b1d0      	cbz	r0, 800df42 <__d2b+0x7e>
 800df0c:	f1c0 0320 	rsb	r3, r0, #32
 800df10:	fa02 f303 	lsl.w	r3, r2, r3
 800df14:	430b      	orrs	r3, r1
 800df16:	40c2      	lsrs	r2, r0
 800df18:	6163      	str	r3, [r4, #20]
 800df1a:	9201      	str	r2, [sp, #4]
 800df1c:	9b01      	ldr	r3, [sp, #4]
 800df1e:	61a3      	str	r3, [r4, #24]
 800df20:	2b00      	cmp	r3, #0
 800df22:	bf0c      	ite	eq
 800df24:	2201      	moveq	r2, #1
 800df26:	2202      	movne	r2, #2
 800df28:	6122      	str	r2, [r4, #16]
 800df2a:	b1a5      	cbz	r5, 800df56 <__d2b+0x92>
 800df2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800df30:	4405      	add	r5, r0
 800df32:	603d      	str	r5, [r7, #0]
 800df34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800df38:	6030      	str	r0, [r6, #0]
 800df3a:	4620      	mov	r0, r4
 800df3c:	b003      	add	sp, #12
 800df3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df42:	6161      	str	r1, [r4, #20]
 800df44:	e7ea      	b.n	800df1c <__d2b+0x58>
 800df46:	a801      	add	r0, sp, #4
 800df48:	f7ff fce9 	bl	800d91e <__lo0bits>
 800df4c:	9b01      	ldr	r3, [sp, #4]
 800df4e:	6163      	str	r3, [r4, #20]
 800df50:	3020      	adds	r0, #32
 800df52:	2201      	movs	r2, #1
 800df54:	e7e8      	b.n	800df28 <__d2b+0x64>
 800df56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df5e:	6038      	str	r0, [r7, #0]
 800df60:	6918      	ldr	r0, [r3, #16]
 800df62:	f7ff fcbd 	bl	800d8e0 <__hi0bits>
 800df66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df6a:	e7e5      	b.n	800df38 <__d2b+0x74>
 800df6c:	08012147 	.word	0x08012147
 800df70:	08012158 	.word	0x08012158

0800df74 <__ratio>:
 800df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	b085      	sub	sp, #20
 800df7a:	e9cd 1000 	strd	r1, r0, [sp]
 800df7e:	a902      	add	r1, sp, #8
 800df80:	f7ff ff56 	bl	800de30 <__b2d>
 800df84:	9800      	ldr	r0, [sp, #0]
 800df86:	a903      	add	r1, sp, #12
 800df88:	ec55 4b10 	vmov	r4, r5, d0
 800df8c:	f7ff ff50 	bl	800de30 <__b2d>
 800df90:	9b01      	ldr	r3, [sp, #4]
 800df92:	6919      	ldr	r1, [r3, #16]
 800df94:	9b00      	ldr	r3, [sp, #0]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	1ac9      	subs	r1, r1, r3
 800df9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df9e:	1a9b      	subs	r3, r3, r2
 800dfa0:	ec5b ab10 	vmov	sl, fp, d0
 800dfa4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bfce      	itee	gt
 800dfac:	462a      	movgt	r2, r5
 800dfae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfb2:	465a      	movle	r2, fp
 800dfb4:	462f      	mov	r7, r5
 800dfb6:	46d9      	mov	r9, fp
 800dfb8:	bfcc      	ite	gt
 800dfba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfbe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dfc2:	464b      	mov	r3, r9
 800dfc4:	4652      	mov	r2, sl
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4639      	mov	r1, r7
 800dfca:	f7f2 fc5f 	bl	800088c <__aeabi_ddiv>
 800dfce:	ec41 0b10 	vmov	d0, r0, r1
 800dfd2:	b005      	add	sp, #20
 800dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfd8 <__copybits>:
 800dfd8:	3901      	subs	r1, #1
 800dfda:	b570      	push	{r4, r5, r6, lr}
 800dfdc:	1149      	asrs	r1, r1, #5
 800dfde:	6914      	ldr	r4, [r2, #16]
 800dfe0:	3101      	adds	r1, #1
 800dfe2:	f102 0314 	add.w	r3, r2, #20
 800dfe6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfee:	1f05      	subs	r5, r0, #4
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	d30c      	bcc.n	800e00e <__copybits+0x36>
 800dff4:	1aa3      	subs	r3, r4, r2
 800dff6:	3b11      	subs	r3, #17
 800dff8:	f023 0303 	bic.w	r3, r3, #3
 800dffc:	3211      	adds	r2, #17
 800dffe:	42a2      	cmp	r2, r4
 800e000:	bf88      	it	hi
 800e002:	2300      	movhi	r3, #0
 800e004:	4418      	add	r0, r3
 800e006:	2300      	movs	r3, #0
 800e008:	4288      	cmp	r0, r1
 800e00a:	d305      	bcc.n	800e018 <__copybits+0x40>
 800e00c:	bd70      	pop	{r4, r5, r6, pc}
 800e00e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e012:	f845 6f04 	str.w	r6, [r5, #4]!
 800e016:	e7eb      	b.n	800dff0 <__copybits+0x18>
 800e018:	f840 3b04 	str.w	r3, [r0], #4
 800e01c:	e7f4      	b.n	800e008 <__copybits+0x30>

0800e01e <__any_on>:
 800e01e:	f100 0214 	add.w	r2, r0, #20
 800e022:	6900      	ldr	r0, [r0, #16]
 800e024:	114b      	asrs	r3, r1, #5
 800e026:	4298      	cmp	r0, r3
 800e028:	b510      	push	{r4, lr}
 800e02a:	db11      	blt.n	800e050 <__any_on+0x32>
 800e02c:	dd0a      	ble.n	800e044 <__any_on+0x26>
 800e02e:	f011 011f 	ands.w	r1, r1, #31
 800e032:	d007      	beq.n	800e044 <__any_on+0x26>
 800e034:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e038:	fa24 f001 	lsr.w	r0, r4, r1
 800e03c:	fa00 f101 	lsl.w	r1, r0, r1
 800e040:	428c      	cmp	r4, r1
 800e042:	d10b      	bne.n	800e05c <__any_on+0x3e>
 800e044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e048:	4293      	cmp	r3, r2
 800e04a:	d803      	bhi.n	800e054 <__any_on+0x36>
 800e04c:	2000      	movs	r0, #0
 800e04e:	bd10      	pop	{r4, pc}
 800e050:	4603      	mov	r3, r0
 800e052:	e7f7      	b.n	800e044 <__any_on+0x26>
 800e054:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e058:	2900      	cmp	r1, #0
 800e05a:	d0f5      	beq.n	800e048 <__any_on+0x2a>
 800e05c:	2001      	movs	r0, #1
 800e05e:	e7f6      	b.n	800e04e <__any_on+0x30>

0800e060 <sulp>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	4604      	mov	r4, r0
 800e064:	460d      	mov	r5, r1
 800e066:	ec45 4b10 	vmov	d0, r4, r5
 800e06a:	4616      	mov	r6, r2
 800e06c:	f7ff feba 	bl	800dde4 <__ulp>
 800e070:	ec51 0b10 	vmov	r0, r1, d0
 800e074:	b17e      	cbz	r6, 800e096 <sulp+0x36>
 800e076:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e07a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e07e:	2b00      	cmp	r3, #0
 800e080:	dd09      	ble.n	800e096 <sulp+0x36>
 800e082:	051b      	lsls	r3, r3, #20
 800e084:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e088:	2400      	movs	r4, #0
 800e08a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e08e:	4622      	mov	r2, r4
 800e090:	462b      	mov	r3, r5
 800e092:	f7f2 fad1 	bl	8000638 <__aeabi_dmul>
 800e096:	ec41 0b10 	vmov	d0, r0, r1
 800e09a:	bd70      	pop	{r4, r5, r6, pc}
 800e09c:	0000      	movs	r0, r0
	...

0800e0a0 <_strtod_l>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	b09f      	sub	sp, #124	@ 0x7c
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800e0ae:	9005      	str	r0, [sp, #20]
 800e0b0:	f04f 0a00 	mov.w	sl, #0
 800e0b4:	f04f 0b00 	mov.w	fp, #0
 800e0b8:	460a      	mov	r2, r1
 800e0ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e0bc:	7811      	ldrb	r1, [r2, #0]
 800e0be:	292b      	cmp	r1, #43	@ 0x2b
 800e0c0:	d04a      	beq.n	800e158 <_strtod_l+0xb8>
 800e0c2:	d838      	bhi.n	800e136 <_strtod_l+0x96>
 800e0c4:	290d      	cmp	r1, #13
 800e0c6:	d832      	bhi.n	800e12e <_strtod_l+0x8e>
 800e0c8:	2908      	cmp	r1, #8
 800e0ca:	d832      	bhi.n	800e132 <_strtod_l+0x92>
 800e0cc:	2900      	cmp	r1, #0
 800e0ce:	d03b      	beq.n	800e148 <_strtod_l+0xa8>
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e0d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e0d6:	782a      	ldrb	r2, [r5, #0]
 800e0d8:	2a30      	cmp	r2, #48	@ 0x30
 800e0da:	f040 80b3 	bne.w	800e244 <_strtod_l+0x1a4>
 800e0de:	786a      	ldrb	r2, [r5, #1]
 800e0e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e0e4:	2a58      	cmp	r2, #88	@ 0x58
 800e0e6:	d16e      	bne.n	800e1c6 <_strtod_l+0x126>
 800e0e8:	9302      	str	r3, [sp, #8]
 800e0ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0ec:	9301      	str	r3, [sp, #4]
 800e0ee:	ab1a      	add	r3, sp, #104	@ 0x68
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	4a8e      	ldr	r2, [pc, #568]	@ (800e32c <_strtod_l+0x28c>)
 800e0f4:	9805      	ldr	r0, [sp, #20]
 800e0f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e0f8:	a919      	add	r1, sp, #100	@ 0x64
 800e0fa:	f001 fc83 	bl	800fa04 <__gethex>
 800e0fe:	f010 060f 	ands.w	r6, r0, #15
 800e102:	4604      	mov	r4, r0
 800e104:	d005      	beq.n	800e112 <_strtod_l+0x72>
 800e106:	2e06      	cmp	r6, #6
 800e108:	d128      	bne.n	800e15c <_strtod_l+0xbc>
 800e10a:	3501      	adds	r5, #1
 800e10c:	2300      	movs	r3, #0
 800e10e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e110:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e112:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e114:	2b00      	cmp	r3, #0
 800e116:	f040 858e 	bne.w	800ec36 <_strtod_l+0xb96>
 800e11a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e11c:	b1cb      	cbz	r3, 800e152 <_strtod_l+0xb2>
 800e11e:	4652      	mov	r2, sl
 800e120:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e124:	ec43 2b10 	vmov	d0, r2, r3
 800e128:	b01f      	add	sp, #124	@ 0x7c
 800e12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12e:	2920      	cmp	r1, #32
 800e130:	d1ce      	bne.n	800e0d0 <_strtod_l+0x30>
 800e132:	3201      	adds	r2, #1
 800e134:	e7c1      	b.n	800e0ba <_strtod_l+0x1a>
 800e136:	292d      	cmp	r1, #45	@ 0x2d
 800e138:	d1ca      	bne.n	800e0d0 <_strtod_l+0x30>
 800e13a:	2101      	movs	r1, #1
 800e13c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e13e:	1c51      	adds	r1, r2, #1
 800e140:	9119      	str	r1, [sp, #100]	@ 0x64
 800e142:	7852      	ldrb	r2, [r2, #1]
 800e144:	2a00      	cmp	r2, #0
 800e146:	d1c5      	bne.n	800e0d4 <_strtod_l+0x34>
 800e148:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e14a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f040 8570 	bne.w	800ec32 <_strtod_l+0xb92>
 800e152:	4652      	mov	r2, sl
 800e154:	465b      	mov	r3, fp
 800e156:	e7e5      	b.n	800e124 <_strtod_l+0x84>
 800e158:	2100      	movs	r1, #0
 800e15a:	e7ef      	b.n	800e13c <_strtod_l+0x9c>
 800e15c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e15e:	b13a      	cbz	r2, 800e170 <_strtod_l+0xd0>
 800e160:	2135      	movs	r1, #53	@ 0x35
 800e162:	a81c      	add	r0, sp, #112	@ 0x70
 800e164:	f7ff ff38 	bl	800dfd8 <__copybits>
 800e168:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e16a:	9805      	ldr	r0, [sp, #20]
 800e16c:	f7ff fb06 	bl	800d77c <_Bfree>
 800e170:	3e01      	subs	r6, #1
 800e172:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e174:	2e04      	cmp	r6, #4
 800e176:	d806      	bhi.n	800e186 <_strtod_l+0xe6>
 800e178:	e8df f006 	tbb	[pc, r6]
 800e17c:	201d0314 	.word	0x201d0314
 800e180:	14          	.byte	0x14
 800e181:	00          	.byte	0x00
 800e182:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e186:	05e1      	lsls	r1, r4, #23
 800e188:	bf48      	it	mi
 800e18a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e18e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e192:	0d1b      	lsrs	r3, r3, #20
 800e194:	051b      	lsls	r3, r3, #20
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1bb      	bne.n	800e112 <_strtod_l+0x72>
 800e19a:	f7fe fbcf 	bl	800c93c <__errno>
 800e19e:	2322      	movs	r3, #34	@ 0x22
 800e1a0:	6003      	str	r3, [r0, #0]
 800e1a2:	e7b6      	b.n	800e112 <_strtod_l+0x72>
 800e1a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e1a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e1ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e1b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e1b4:	e7e7      	b.n	800e186 <_strtod_l+0xe6>
 800e1b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e334 <_strtod_l+0x294>
 800e1ba:	e7e4      	b.n	800e186 <_strtod_l+0xe6>
 800e1bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e1c0:	f04f 3aff 	mov.w	sl, #4294967295
 800e1c4:	e7df      	b.n	800e186 <_strtod_l+0xe6>
 800e1c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1c8:	1c5a      	adds	r2, r3, #1
 800e1ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1cc:	785b      	ldrb	r3, [r3, #1]
 800e1ce:	2b30      	cmp	r3, #48	@ 0x30
 800e1d0:	d0f9      	beq.n	800e1c6 <_strtod_l+0x126>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d09d      	beq.n	800e112 <_strtod_l+0x72>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e1de:	2300      	movs	r3, #0
 800e1e0:	9308      	str	r3, [sp, #32]
 800e1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1e4:	461f      	mov	r7, r3
 800e1e6:	220a      	movs	r2, #10
 800e1e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e1ea:	7805      	ldrb	r5, [r0, #0]
 800e1ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e1f0:	b2d9      	uxtb	r1, r3
 800e1f2:	2909      	cmp	r1, #9
 800e1f4:	d928      	bls.n	800e248 <_strtod_l+0x1a8>
 800e1f6:	494e      	ldr	r1, [pc, #312]	@ (800e330 <_strtod_l+0x290>)
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f001 fb62 	bl	800f8c2 <strncmp>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d032      	beq.n	800e268 <_strtod_l+0x1c8>
 800e202:	2000      	movs	r0, #0
 800e204:	462a      	mov	r2, r5
 800e206:	4681      	mov	r9, r0
 800e208:	463d      	mov	r5, r7
 800e20a:	4603      	mov	r3, r0
 800e20c:	2a65      	cmp	r2, #101	@ 0x65
 800e20e:	d001      	beq.n	800e214 <_strtod_l+0x174>
 800e210:	2a45      	cmp	r2, #69	@ 0x45
 800e212:	d114      	bne.n	800e23e <_strtod_l+0x19e>
 800e214:	b91d      	cbnz	r5, 800e21e <_strtod_l+0x17e>
 800e216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e218:	4302      	orrs	r2, r0
 800e21a:	d095      	beq.n	800e148 <_strtod_l+0xa8>
 800e21c:	2500      	movs	r5, #0
 800e21e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e220:	1c62      	adds	r2, r4, #1
 800e222:	9219      	str	r2, [sp, #100]	@ 0x64
 800e224:	7862      	ldrb	r2, [r4, #1]
 800e226:	2a2b      	cmp	r2, #43	@ 0x2b
 800e228:	d077      	beq.n	800e31a <_strtod_l+0x27a>
 800e22a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e22c:	d07b      	beq.n	800e326 <_strtod_l+0x286>
 800e22e:	f04f 0c00 	mov.w	ip, #0
 800e232:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e236:	2909      	cmp	r1, #9
 800e238:	f240 8082 	bls.w	800e340 <_strtod_l+0x2a0>
 800e23c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e23e:	f04f 0800 	mov.w	r8, #0
 800e242:	e0a2      	b.n	800e38a <_strtod_l+0x2ea>
 800e244:	2300      	movs	r3, #0
 800e246:	e7c7      	b.n	800e1d8 <_strtod_l+0x138>
 800e248:	2f08      	cmp	r7, #8
 800e24a:	bfd5      	itete	le
 800e24c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e24e:	9908      	ldrgt	r1, [sp, #32]
 800e250:	fb02 3301 	mlale	r3, r2, r1, r3
 800e254:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e258:	f100 0001 	add.w	r0, r0, #1
 800e25c:	bfd4      	ite	le
 800e25e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e260:	9308      	strgt	r3, [sp, #32]
 800e262:	3701      	adds	r7, #1
 800e264:	9019      	str	r0, [sp, #100]	@ 0x64
 800e266:	e7bf      	b.n	800e1e8 <_strtod_l+0x148>
 800e268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e26a:	1c5a      	adds	r2, r3, #1
 800e26c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e26e:	785a      	ldrb	r2, [r3, #1]
 800e270:	b37f      	cbz	r7, 800e2d2 <_strtod_l+0x232>
 800e272:	4681      	mov	r9, r0
 800e274:	463d      	mov	r5, r7
 800e276:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e27a:	2b09      	cmp	r3, #9
 800e27c:	d912      	bls.n	800e2a4 <_strtod_l+0x204>
 800e27e:	2301      	movs	r3, #1
 800e280:	e7c4      	b.n	800e20c <_strtod_l+0x16c>
 800e282:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e284:	1c5a      	adds	r2, r3, #1
 800e286:	9219      	str	r2, [sp, #100]	@ 0x64
 800e288:	785a      	ldrb	r2, [r3, #1]
 800e28a:	3001      	adds	r0, #1
 800e28c:	2a30      	cmp	r2, #48	@ 0x30
 800e28e:	d0f8      	beq.n	800e282 <_strtod_l+0x1e2>
 800e290:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e294:	2b08      	cmp	r3, #8
 800e296:	f200 84d3 	bhi.w	800ec40 <_strtod_l+0xba0>
 800e29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e29c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e29e:	4681      	mov	r9, r0
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	3a30      	subs	r2, #48	@ 0x30
 800e2a6:	f100 0301 	add.w	r3, r0, #1
 800e2aa:	d02a      	beq.n	800e302 <_strtod_l+0x262>
 800e2ac:	4499      	add	r9, r3
 800e2ae:	eb00 0c05 	add.w	ip, r0, r5
 800e2b2:	462b      	mov	r3, r5
 800e2b4:	210a      	movs	r1, #10
 800e2b6:	4563      	cmp	r3, ip
 800e2b8:	d10d      	bne.n	800e2d6 <_strtod_l+0x236>
 800e2ba:	1c69      	adds	r1, r5, #1
 800e2bc:	4401      	add	r1, r0
 800e2be:	4428      	add	r0, r5
 800e2c0:	2808      	cmp	r0, #8
 800e2c2:	dc16      	bgt.n	800e2f2 <_strtod_l+0x252>
 800e2c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2c6:	230a      	movs	r3, #10
 800e2c8:	fb03 2300 	mla	r3, r3, r0, r2
 800e2cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e018      	b.n	800e304 <_strtod_l+0x264>
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	e7da      	b.n	800e28c <_strtod_l+0x1ec>
 800e2d6:	2b08      	cmp	r3, #8
 800e2d8:	f103 0301 	add.w	r3, r3, #1
 800e2dc:	dc03      	bgt.n	800e2e6 <_strtod_l+0x246>
 800e2de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e2e0:	434e      	muls	r6, r1
 800e2e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800e2e4:	e7e7      	b.n	800e2b6 <_strtod_l+0x216>
 800e2e6:	2b10      	cmp	r3, #16
 800e2e8:	bfde      	ittt	le
 800e2ea:	9e08      	ldrle	r6, [sp, #32]
 800e2ec:	434e      	mulle	r6, r1
 800e2ee:	9608      	strle	r6, [sp, #32]
 800e2f0:	e7e1      	b.n	800e2b6 <_strtod_l+0x216>
 800e2f2:	280f      	cmp	r0, #15
 800e2f4:	dceb      	bgt.n	800e2ce <_strtod_l+0x22e>
 800e2f6:	9808      	ldr	r0, [sp, #32]
 800e2f8:	230a      	movs	r3, #10
 800e2fa:	fb03 2300 	mla	r3, r3, r0, r2
 800e2fe:	9308      	str	r3, [sp, #32]
 800e300:	e7e5      	b.n	800e2ce <_strtod_l+0x22e>
 800e302:	4629      	mov	r1, r5
 800e304:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e306:	1c50      	adds	r0, r2, #1
 800e308:	9019      	str	r0, [sp, #100]	@ 0x64
 800e30a:	7852      	ldrb	r2, [r2, #1]
 800e30c:	4618      	mov	r0, r3
 800e30e:	460d      	mov	r5, r1
 800e310:	e7b1      	b.n	800e276 <_strtod_l+0x1d6>
 800e312:	f04f 0900 	mov.w	r9, #0
 800e316:	2301      	movs	r3, #1
 800e318:	e77d      	b.n	800e216 <_strtod_l+0x176>
 800e31a:	f04f 0c00 	mov.w	ip, #0
 800e31e:	1ca2      	adds	r2, r4, #2
 800e320:	9219      	str	r2, [sp, #100]	@ 0x64
 800e322:	78a2      	ldrb	r2, [r4, #2]
 800e324:	e785      	b.n	800e232 <_strtod_l+0x192>
 800e326:	f04f 0c01 	mov.w	ip, #1
 800e32a:	e7f8      	b.n	800e31e <_strtod_l+0x27e>
 800e32c:	080122c8 	.word	0x080122c8
 800e330:	080122b0 	.word	0x080122b0
 800e334:	7ff00000 	.word	0x7ff00000
 800e338:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e33a:	1c51      	adds	r1, r2, #1
 800e33c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e33e:	7852      	ldrb	r2, [r2, #1]
 800e340:	2a30      	cmp	r2, #48	@ 0x30
 800e342:	d0f9      	beq.n	800e338 <_strtod_l+0x298>
 800e344:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e348:	2908      	cmp	r1, #8
 800e34a:	f63f af78 	bhi.w	800e23e <_strtod_l+0x19e>
 800e34e:	3a30      	subs	r2, #48	@ 0x30
 800e350:	920e      	str	r2, [sp, #56]	@ 0x38
 800e352:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e354:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e356:	f04f 080a 	mov.w	r8, #10
 800e35a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e35c:	1c56      	adds	r6, r2, #1
 800e35e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e360:	7852      	ldrb	r2, [r2, #1]
 800e362:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e366:	f1be 0f09 	cmp.w	lr, #9
 800e36a:	d939      	bls.n	800e3e0 <_strtod_l+0x340>
 800e36c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e36e:	1a76      	subs	r6, r6, r1
 800e370:	2e08      	cmp	r6, #8
 800e372:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e376:	dc03      	bgt.n	800e380 <_strtod_l+0x2e0>
 800e378:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e37a:	4588      	cmp	r8, r1
 800e37c:	bfa8      	it	ge
 800e37e:	4688      	movge	r8, r1
 800e380:	f1bc 0f00 	cmp.w	ip, #0
 800e384:	d001      	beq.n	800e38a <_strtod_l+0x2ea>
 800e386:	f1c8 0800 	rsb	r8, r8, #0
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	d14e      	bne.n	800e42c <_strtod_l+0x38c>
 800e38e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e390:	4308      	orrs	r0, r1
 800e392:	f47f aebe 	bne.w	800e112 <_strtod_l+0x72>
 800e396:	2b00      	cmp	r3, #0
 800e398:	f47f aed6 	bne.w	800e148 <_strtod_l+0xa8>
 800e39c:	2a69      	cmp	r2, #105	@ 0x69
 800e39e:	d028      	beq.n	800e3f2 <_strtod_l+0x352>
 800e3a0:	dc25      	bgt.n	800e3ee <_strtod_l+0x34e>
 800e3a2:	2a49      	cmp	r2, #73	@ 0x49
 800e3a4:	d025      	beq.n	800e3f2 <_strtod_l+0x352>
 800e3a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800e3a8:	f47f aece 	bne.w	800e148 <_strtod_l+0xa8>
 800e3ac:	499b      	ldr	r1, [pc, #620]	@ (800e61c <_strtod_l+0x57c>)
 800e3ae:	a819      	add	r0, sp, #100	@ 0x64
 800e3b0:	f001 fd4a 	bl	800fe48 <__match>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f43f aec7 	beq.w	800e148 <_strtod_l+0xa8>
 800e3ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b28      	cmp	r3, #40	@ 0x28
 800e3c0:	d12e      	bne.n	800e420 <_strtod_l+0x380>
 800e3c2:	4997      	ldr	r1, [pc, #604]	@ (800e620 <_strtod_l+0x580>)
 800e3c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800e3c6:	a819      	add	r0, sp, #100	@ 0x64
 800e3c8:	f001 fd52 	bl	800fe70 <__hexnan>
 800e3cc:	2805      	cmp	r0, #5
 800e3ce:	d127      	bne.n	800e420 <_strtod_l+0x380>
 800e3d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e3d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e3d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e3da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e3de:	e698      	b.n	800e112 <_strtod_l+0x72>
 800e3e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3e2:	fb08 2101 	mla	r1, r8, r1, r2
 800e3e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e3ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3ec:	e7b5      	b.n	800e35a <_strtod_l+0x2ba>
 800e3ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800e3f0:	e7da      	b.n	800e3a8 <_strtod_l+0x308>
 800e3f2:	498c      	ldr	r1, [pc, #560]	@ (800e624 <_strtod_l+0x584>)
 800e3f4:	a819      	add	r0, sp, #100	@ 0x64
 800e3f6:	f001 fd27 	bl	800fe48 <__match>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	f43f aea4 	beq.w	800e148 <_strtod_l+0xa8>
 800e400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e402:	4989      	ldr	r1, [pc, #548]	@ (800e628 <_strtod_l+0x588>)
 800e404:	3b01      	subs	r3, #1
 800e406:	a819      	add	r0, sp, #100	@ 0x64
 800e408:	9319      	str	r3, [sp, #100]	@ 0x64
 800e40a:	f001 fd1d 	bl	800fe48 <__match>
 800e40e:	b910      	cbnz	r0, 800e416 <_strtod_l+0x376>
 800e410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e412:	3301      	adds	r3, #1
 800e414:	9319      	str	r3, [sp, #100]	@ 0x64
 800e416:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e638 <_strtod_l+0x598>
 800e41a:	f04f 0a00 	mov.w	sl, #0
 800e41e:	e678      	b.n	800e112 <_strtod_l+0x72>
 800e420:	4882      	ldr	r0, [pc, #520]	@ (800e62c <_strtod_l+0x58c>)
 800e422:	f001 fa61 	bl	800f8e8 <nan>
 800e426:	ec5b ab10 	vmov	sl, fp, d0
 800e42a:	e672      	b.n	800e112 <_strtod_l+0x72>
 800e42c:	eba8 0309 	sub.w	r3, r8, r9
 800e430:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e432:	9309      	str	r3, [sp, #36]	@ 0x24
 800e434:	2f00      	cmp	r7, #0
 800e436:	bf08      	it	eq
 800e438:	462f      	moveq	r7, r5
 800e43a:	2d10      	cmp	r5, #16
 800e43c:	462c      	mov	r4, r5
 800e43e:	bfa8      	it	ge
 800e440:	2410      	movge	r4, #16
 800e442:	f7f2 f87f 	bl	8000544 <__aeabi_ui2d>
 800e446:	2d09      	cmp	r5, #9
 800e448:	4682      	mov	sl, r0
 800e44a:	468b      	mov	fp, r1
 800e44c:	dc13      	bgt.n	800e476 <_strtod_l+0x3d6>
 800e44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e450:	2b00      	cmp	r3, #0
 800e452:	f43f ae5e 	beq.w	800e112 <_strtod_l+0x72>
 800e456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e458:	dd78      	ble.n	800e54c <_strtod_l+0x4ac>
 800e45a:	2b16      	cmp	r3, #22
 800e45c:	dc5f      	bgt.n	800e51e <_strtod_l+0x47e>
 800e45e:	4974      	ldr	r1, [pc, #464]	@ (800e630 <_strtod_l+0x590>)
 800e460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e464:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e468:	4652      	mov	r2, sl
 800e46a:	465b      	mov	r3, fp
 800e46c:	f7f2 f8e4 	bl	8000638 <__aeabi_dmul>
 800e470:	4682      	mov	sl, r0
 800e472:	468b      	mov	fp, r1
 800e474:	e64d      	b.n	800e112 <_strtod_l+0x72>
 800e476:	4b6e      	ldr	r3, [pc, #440]	@ (800e630 <_strtod_l+0x590>)
 800e478:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e47c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e480:	f7f2 f8da 	bl	8000638 <__aeabi_dmul>
 800e484:	4682      	mov	sl, r0
 800e486:	9808      	ldr	r0, [sp, #32]
 800e488:	468b      	mov	fp, r1
 800e48a:	f7f2 f85b 	bl	8000544 <__aeabi_ui2d>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	4650      	mov	r0, sl
 800e494:	4659      	mov	r1, fp
 800e496:	f7f1 ff19 	bl	80002cc <__adddf3>
 800e49a:	2d0f      	cmp	r5, #15
 800e49c:	4682      	mov	sl, r0
 800e49e:	468b      	mov	fp, r1
 800e4a0:	ddd5      	ble.n	800e44e <_strtod_l+0x3ae>
 800e4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a4:	1b2c      	subs	r4, r5, r4
 800e4a6:	441c      	add	r4, r3
 800e4a8:	2c00      	cmp	r4, #0
 800e4aa:	f340 8096 	ble.w	800e5da <_strtod_l+0x53a>
 800e4ae:	f014 030f 	ands.w	r3, r4, #15
 800e4b2:	d00a      	beq.n	800e4ca <_strtod_l+0x42a>
 800e4b4:	495e      	ldr	r1, [pc, #376]	@ (800e630 <_strtod_l+0x590>)
 800e4b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4ba:	4652      	mov	r2, sl
 800e4bc:	465b      	mov	r3, fp
 800e4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c2:	f7f2 f8b9 	bl	8000638 <__aeabi_dmul>
 800e4c6:	4682      	mov	sl, r0
 800e4c8:	468b      	mov	fp, r1
 800e4ca:	f034 040f 	bics.w	r4, r4, #15
 800e4ce:	d073      	beq.n	800e5b8 <_strtod_l+0x518>
 800e4d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e4d4:	dd48      	ble.n	800e568 <_strtod_l+0x4c8>
 800e4d6:	2400      	movs	r4, #0
 800e4d8:	46a0      	mov	r8, r4
 800e4da:	940a      	str	r4, [sp, #40]	@ 0x28
 800e4dc:	46a1      	mov	r9, r4
 800e4de:	9a05      	ldr	r2, [sp, #20]
 800e4e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e638 <_strtod_l+0x598>
 800e4e4:	2322      	movs	r3, #34	@ 0x22
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	f04f 0a00 	mov.w	sl, #0
 800e4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f43f ae0f 	beq.w	800e112 <_strtod_l+0x72>
 800e4f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4f6:	9805      	ldr	r0, [sp, #20]
 800e4f8:	f7ff f940 	bl	800d77c <_Bfree>
 800e4fc:	9805      	ldr	r0, [sp, #20]
 800e4fe:	4649      	mov	r1, r9
 800e500:	f7ff f93c 	bl	800d77c <_Bfree>
 800e504:	9805      	ldr	r0, [sp, #20]
 800e506:	4641      	mov	r1, r8
 800e508:	f7ff f938 	bl	800d77c <_Bfree>
 800e50c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e50e:	9805      	ldr	r0, [sp, #20]
 800e510:	f7ff f934 	bl	800d77c <_Bfree>
 800e514:	9805      	ldr	r0, [sp, #20]
 800e516:	4621      	mov	r1, r4
 800e518:	f7ff f930 	bl	800d77c <_Bfree>
 800e51c:	e5f9      	b.n	800e112 <_strtod_l+0x72>
 800e51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e520:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e524:	4293      	cmp	r3, r2
 800e526:	dbbc      	blt.n	800e4a2 <_strtod_l+0x402>
 800e528:	4c41      	ldr	r4, [pc, #260]	@ (800e630 <_strtod_l+0x590>)
 800e52a:	f1c5 050f 	rsb	r5, r5, #15
 800e52e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e532:	4652      	mov	r2, sl
 800e534:	465b      	mov	r3, fp
 800e536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e53a:	f7f2 f87d 	bl	8000638 <__aeabi_dmul>
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	1b5d      	subs	r5, r3, r5
 800e542:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e546:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e54a:	e78f      	b.n	800e46c <_strtod_l+0x3cc>
 800e54c:	3316      	adds	r3, #22
 800e54e:	dba8      	blt.n	800e4a2 <_strtod_l+0x402>
 800e550:	4b37      	ldr	r3, [pc, #220]	@ (800e630 <_strtod_l+0x590>)
 800e552:	eba9 0808 	sub.w	r8, r9, r8
 800e556:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e55a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e55e:	4650      	mov	r0, sl
 800e560:	4659      	mov	r1, fp
 800e562:	f7f2 f993 	bl	800088c <__aeabi_ddiv>
 800e566:	e783      	b.n	800e470 <_strtod_l+0x3d0>
 800e568:	4b32      	ldr	r3, [pc, #200]	@ (800e634 <_strtod_l+0x594>)
 800e56a:	9308      	str	r3, [sp, #32]
 800e56c:	2300      	movs	r3, #0
 800e56e:	1124      	asrs	r4, r4, #4
 800e570:	4650      	mov	r0, sl
 800e572:	4659      	mov	r1, fp
 800e574:	461e      	mov	r6, r3
 800e576:	2c01      	cmp	r4, #1
 800e578:	dc21      	bgt.n	800e5be <_strtod_l+0x51e>
 800e57a:	b10b      	cbz	r3, 800e580 <_strtod_l+0x4e0>
 800e57c:	4682      	mov	sl, r0
 800e57e:	468b      	mov	fp, r1
 800e580:	492c      	ldr	r1, [pc, #176]	@ (800e634 <_strtod_l+0x594>)
 800e582:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e586:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e58a:	4652      	mov	r2, sl
 800e58c:	465b      	mov	r3, fp
 800e58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e592:	f7f2 f851 	bl	8000638 <__aeabi_dmul>
 800e596:	4b28      	ldr	r3, [pc, #160]	@ (800e638 <_strtod_l+0x598>)
 800e598:	460a      	mov	r2, r1
 800e59a:	400b      	ands	r3, r1
 800e59c:	4927      	ldr	r1, [pc, #156]	@ (800e63c <_strtod_l+0x59c>)
 800e59e:	428b      	cmp	r3, r1
 800e5a0:	4682      	mov	sl, r0
 800e5a2:	d898      	bhi.n	800e4d6 <_strtod_l+0x436>
 800e5a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e5a8:	428b      	cmp	r3, r1
 800e5aa:	bf86      	itte	hi
 800e5ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e640 <_strtod_l+0x5a0>
 800e5b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e5b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	9308      	str	r3, [sp, #32]
 800e5bc:	e07a      	b.n	800e6b4 <_strtod_l+0x614>
 800e5be:	07e2      	lsls	r2, r4, #31
 800e5c0:	d505      	bpl.n	800e5ce <_strtod_l+0x52e>
 800e5c2:	9b08      	ldr	r3, [sp, #32]
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	f7f2 f836 	bl	8000638 <__aeabi_dmul>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	9a08      	ldr	r2, [sp, #32]
 800e5d0:	3208      	adds	r2, #8
 800e5d2:	3601      	adds	r6, #1
 800e5d4:	1064      	asrs	r4, r4, #1
 800e5d6:	9208      	str	r2, [sp, #32]
 800e5d8:	e7cd      	b.n	800e576 <_strtod_l+0x4d6>
 800e5da:	d0ed      	beq.n	800e5b8 <_strtod_l+0x518>
 800e5dc:	4264      	negs	r4, r4
 800e5de:	f014 020f 	ands.w	r2, r4, #15
 800e5e2:	d00a      	beq.n	800e5fa <_strtod_l+0x55a>
 800e5e4:	4b12      	ldr	r3, [pc, #72]	@ (800e630 <_strtod_l+0x590>)
 800e5e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5ea:	4650      	mov	r0, sl
 800e5ec:	4659      	mov	r1, fp
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	f7f2 f94b 	bl	800088c <__aeabi_ddiv>
 800e5f6:	4682      	mov	sl, r0
 800e5f8:	468b      	mov	fp, r1
 800e5fa:	1124      	asrs	r4, r4, #4
 800e5fc:	d0dc      	beq.n	800e5b8 <_strtod_l+0x518>
 800e5fe:	2c1f      	cmp	r4, #31
 800e600:	dd20      	ble.n	800e644 <_strtod_l+0x5a4>
 800e602:	2400      	movs	r4, #0
 800e604:	46a0      	mov	r8, r4
 800e606:	940a      	str	r4, [sp, #40]	@ 0x28
 800e608:	46a1      	mov	r9, r4
 800e60a:	9a05      	ldr	r2, [sp, #20]
 800e60c:	2322      	movs	r3, #34	@ 0x22
 800e60e:	f04f 0a00 	mov.w	sl, #0
 800e612:	f04f 0b00 	mov.w	fp, #0
 800e616:	6013      	str	r3, [r2, #0]
 800e618:	e768      	b.n	800e4ec <_strtod_l+0x44c>
 800e61a:	bf00      	nop
 800e61c:	080120a1 	.word	0x080120a1
 800e620:	080122b4 	.word	0x080122b4
 800e624:	08012099 	.word	0x08012099
 800e628:	080120ce 	.word	0x080120ce
 800e62c:	08012478 	.word	0x08012478
 800e630:	080121e8 	.word	0x080121e8
 800e634:	080121c0 	.word	0x080121c0
 800e638:	7ff00000 	.word	0x7ff00000
 800e63c:	7ca00000 	.word	0x7ca00000
 800e640:	7fefffff 	.word	0x7fefffff
 800e644:	f014 0310 	ands.w	r3, r4, #16
 800e648:	bf18      	it	ne
 800e64a:	236a      	movne	r3, #106	@ 0x6a
 800e64c:	4ea9      	ldr	r6, [pc, #676]	@ (800e8f4 <_strtod_l+0x854>)
 800e64e:	9308      	str	r3, [sp, #32]
 800e650:	4650      	mov	r0, sl
 800e652:	4659      	mov	r1, fp
 800e654:	2300      	movs	r3, #0
 800e656:	07e2      	lsls	r2, r4, #31
 800e658:	d504      	bpl.n	800e664 <_strtod_l+0x5c4>
 800e65a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e65e:	f7f1 ffeb 	bl	8000638 <__aeabi_dmul>
 800e662:	2301      	movs	r3, #1
 800e664:	1064      	asrs	r4, r4, #1
 800e666:	f106 0608 	add.w	r6, r6, #8
 800e66a:	d1f4      	bne.n	800e656 <_strtod_l+0x5b6>
 800e66c:	b10b      	cbz	r3, 800e672 <_strtod_l+0x5d2>
 800e66e:	4682      	mov	sl, r0
 800e670:	468b      	mov	fp, r1
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	b1b3      	cbz	r3, 800e6a4 <_strtod_l+0x604>
 800e676:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e67a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e67e:	2b00      	cmp	r3, #0
 800e680:	4659      	mov	r1, fp
 800e682:	dd0f      	ble.n	800e6a4 <_strtod_l+0x604>
 800e684:	2b1f      	cmp	r3, #31
 800e686:	dd55      	ble.n	800e734 <_strtod_l+0x694>
 800e688:	2b34      	cmp	r3, #52	@ 0x34
 800e68a:	bfde      	ittt	le
 800e68c:	f04f 33ff 	movle.w	r3, #4294967295
 800e690:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e694:	4093      	lslle	r3, r2
 800e696:	f04f 0a00 	mov.w	sl, #0
 800e69a:	bfcc      	ite	gt
 800e69c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e6a0:	ea03 0b01 	andle.w	fp, r3, r1
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4650      	mov	r0, sl
 800e6aa:	4659      	mov	r1, fp
 800e6ac:	f7f2 fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d1a6      	bne.n	800e602 <_strtod_l+0x562>
 800e6b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e6ba:	9805      	ldr	r0, [sp, #20]
 800e6bc:	462b      	mov	r3, r5
 800e6be:	463a      	mov	r2, r7
 800e6c0:	f7ff f8c4 	bl	800d84c <__s2b>
 800e6c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	f43f af05 	beq.w	800e4d6 <_strtod_l+0x436>
 800e6cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6ce:	2a00      	cmp	r2, #0
 800e6d0:	eba9 0308 	sub.w	r3, r9, r8
 800e6d4:	bfa8      	it	ge
 800e6d6:	2300      	movge	r3, #0
 800e6d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e6da:	2400      	movs	r4, #0
 800e6dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e6e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e6e2:	46a0      	mov	r8, r4
 800e6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6e6:	9805      	ldr	r0, [sp, #20]
 800e6e8:	6859      	ldr	r1, [r3, #4]
 800e6ea:	f7ff f807 	bl	800d6fc <_Balloc>
 800e6ee:	4681      	mov	r9, r0
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	f43f aef4 	beq.w	800e4de <_strtod_l+0x43e>
 800e6f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6f8:	691a      	ldr	r2, [r3, #16]
 800e6fa:	3202      	adds	r2, #2
 800e6fc:	f103 010c 	add.w	r1, r3, #12
 800e700:	0092      	lsls	r2, r2, #2
 800e702:	300c      	adds	r0, #12
 800e704:	f7fe f947 	bl	800c996 <memcpy>
 800e708:	ec4b ab10 	vmov	d0, sl, fp
 800e70c:	9805      	ldr	r0, [sp, #20]
 800e70e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e710:	a91b      	add	r1, sp, #108	@ 0x6c
 800e712:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e716:	f7ff fbd5 	bl	800dec4 <__d2b>
 800e71a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e71c:	2800      	cmp	r0, #0
 800e71e:	f43f aede 	beq.w	800e4de <_strtod_l+0x43e>
 800e722:	9805      	ldr	r0, [sp, #20]
 800e724:	2101      	movs	r1, #1
 800e726:	f7ff f927 	bl	800d978 <__i2b>
 800e72a:	4680      	mov	r8, r0
 800e72c:	b948      	cbnz	r0, 800e742 <_strtod_l+0x6a2>
 800e72e:	f04f 0800 	mov.w	r8, #0
 800e732:	e6d4      	b.n	800e4de <_strtod_l+0x43e>
 800e734:	f04f 32ff 	mov.w	r2, #4294967295
 800e738:	fa02 f303 	lsl.w	r3, r2, r3
 800e73c:	ea03 0a0a 	and.w	sl, r3, sl
 800e740:	e7b0      	b.n	800e6a4 <_strtod_l+0x604>
 800e742:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e744:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e746:	2d00      	cmp	r5, #0
 800e748:	bfab      	itete	ge
 800e74a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e74c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e74e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e750:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e752:	bfac      	ite	ge
 800e754:	18ef      	addge	r7, r5, r3
 800e756:	1b5e      	sublt	r6, r3, r5
 800e758:	9b08      	ldr	r3, [sp, #32]
 800e75a:	1aed      	subs	r5, r5, r3
 800e75c:	4415      	add	r5, r2
 800e75e:	4b66      	ldr	r3, [pc, #408]	@ (800e8f8 <_strtod_l+0x858>)
 800e760:	3d01      	subs	r5, #1
 800e762:	429d      	cmp	r5, r3
 800e764:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e768:	da50      	bge.n	800e80c <_strtod_l+0x76c>
 800e76a:	1b5b      	subs	r3, r3, r5
 800e76c:	2b1f      	cmp	r3, #31
 800e76e:	eba2 0203 	sub.w	r2, r2, r3
 800e772:	f04f 0101 	mov.w	r1, #1
 800e776:	dc3d      	bgt.n	800e7f4 <_strtod_l+0x754>
 800e778:	fa01 f303 	lsl.w	r3, r1, r3
 800e77c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e77e:	2300      	movs	r3, #0
 800e780:	9310      	str	r3, [sp, #64]	@ 0x40
 800e782:	18bd      	adds	r5, r7, r2
 800e784:	9b08      	ldr	r3, [sp, #32]
 800e786:	42af      	cmp	r7, r5
 800e788:	4416      	add	r6, r2
 800e78a:	441e      	add	r6, r3
 800e78c:	463b      	mov	r3, r7
 800e78e:	bfa8      	it	ge
 800e790:	462b      	movge	r3, r5
 800e792:	42b3      	cmp	r3, r6
 800e794:	bfa8      	it	ge
 800e796:	4633      	movge	r3, r6
 800e798:	2b00      	cmp	r3, #0
 800e79a:	bfc2      	ittt	gt
 800e79c:	1aed      	subgt	r5, r5, r3
 800e79e:	1af6      	subgt	r6, r6, r3
 800e7a0:	1aff      	subgt	r7, r7, r3
 800e7a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	dd16      	ble.n	800e7d6 <_strtod_l+0x736>
 800e7a8:	4641      	mov	r1, r8
 800e7aa:	9805      	ldr	r0, [sp, #20]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	f7ff f9a3 	bl	800daf8 <__pow5mult>
 800e7b2:	4680      	mov	r8, r0
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d0ba      	beq.n	800e72e <_strtod_l+0x68e>
 800e7b8:	4601      	mov	r1, r0
 800e7ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e7bc:	9805      	ldr	r0, [sp, #20]
 800e7be:	f7ff f8f1 	bl	800d9a4 <__multiply>
 800e7c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	f43f ae8a 	beq.w	800e4de <_strtod_l+0x43e>
 800e7ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7cc:	9805      	ldr	r0, [sp, #20]
 800e7ce:	f7fe ffd5 	bl	800d77c <_Bfree>
 800e7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	dc1d      	bgt.n	800e816 <_strtod_l+0x776>
 800e7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	dd23      	ble.n	800e828 <_strtod_l+0x788>
 800e7e0:	4649      	mov	r1, r9
 800e7e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e7e4:	9805      	ldr	r0, [sp, #20]
 800e7e6:	f7ff f987 	bl	800daf8 <__pow5mult>
 800e7ea:	4681      	mov	r9, r0
 800e7ec:	b9e0      	cbnz	r0, 800e828 <_strtod_l+0x788>
 800e7ee:	f04f 0900 	mov.w	r9, #0
 800e7f2:	e674      	b.n	800e4de <_strtod_l+0x43e>
 800e7f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e7f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e7fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e800:	35e2      	adds	r5, #226	@ 0xe2
 800e802:	fa01 f305 	lsl.w	r3, r1, r5
 800e806:	9310      	str	r3, [sp, #64]	@ 0x40
 800e808:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e80a:	e7ba      	b.n	800e782 <_strtod_l+0x6e2>
 800e80c:	2300      	movs	r3, #0
 800e80e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e810:	2301      	movs	r3, #1
 800e812:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e814:	e7b5      	b.n	800e782 <_strtod_l+0x6e2>
 800e816:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e818:	9805      	ldr	r0, [sp, #20]
 800e81a:	462a      	mov	r2, r5
 800e81c:	f7ff f9c6 	bl	800dbac <__lshift>
 800e820:	901a      	str	r0, [sp, #104]	@ 0x68
 800e822:	2800      	cmp	r0, #0
 800e824:	d1d9      	bne.n	800e7da <_strtod_l+0x73a>
 800e826:	e65a      	b.n	800e4de <_strtod_l+0x43e>
 800e828:	2e00      	cmp	r6, #0
 800e82a:	dd07      	ble.n	800e83c <_strtod_l+0x79c>
 800e82c:	4649      	mov	r1, r9
 800e82e:	9805      	ldr	r0, [sp, #20]
 800e830:	4632      	mov	r2, r6
 800e832:	f7ff f9bb 	bl	800dbac <__lshift>
 800e836:	4681      	mov	r9, r0
 800e838:	2800      	cmp	r0, #0
 800e83a:	d0d8      	beq.n	800e7ee <_strtod_l+0x74e>
 800e83c:	2f00      	cmp	r7, #0
 800e83e:	dd08      	ble.n	800e852 <_strtod_l+0x7b2>
 800e840:	4641      	mov	r1, r8
 800e842:	9805      	ldr	r0, [sp, #20]
 800e844:	463a      	mov	r2, r7
 800e846:	f7ff f9b1 	bl	800dbac <__lshift>
 800e84a:	4680      	mov	r8, r0
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f43f ae46 	beq.w	800e4de <_strtod_l+0x43e>
 800e852:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e854:	9805      	ldr	r0, [sp, #20]
 800e856:	464a      	mov	r2, r9
 800e858:	f7ff fa30 	bl	800dcbc <__mdiff>
 800e85c:	4604      	mov	r4, r0
 800e85e:	2800      	cmp	r0, #0
 800e860:	f43f ae3d 	beq.w	800e4de <_strtod_l+0x43e>
 800e864:	68c3      	ldr	r3, [r0, #12]
 800e866:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e868:	2300      	movs	r3, #0
 800e86a:	60c3      	str	r3, [r0, #12]
 800e86c:	4641      	mov	r1, r8
 800e86e:	f7ff fa09 	bl	800dc84 <__mcmp>
 800e872:	2800      	cmp	r0, #0
 800e874:	da46      	bge.n	800e904 <_strtod_l+0x864>
 800e876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e878:	ea53 030a 	orrs.w	r3, r3, sl
 800e87c:	d16c      	bne.n	800e958 <_strtod_l+0x8b8>
 800e87e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e882:	2b00      	cmp	r3, #0
 800e884:	d168      	bne.n	800e958 <_strtod_l+0x8b8>
 800e886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e88a:	0d1b      	lsrs	r3, r3, #20
 800e88c:	051b      	lsls	r3, r3, #20
 800e88e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e892:	d961      	bls.n	800e958 <_strtod_l+0x8b8>
 800e894:	6963      	ldr	r3, [r4, #20]
 800e896:	b913      	cbnz	r3, 800e89e <_strtod_l+0x7fe>
 800e898:	6923      	ldr	r3, [r4, #16]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	dd5c      	ble.n	800e958 <_strtod_l+0x8b8>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	9805      	ldr	r0, [sp, #20]
 800e8a4:	f7ff f982 	bl	800dbac <__lshift>
 800e8a8:	4641      	mov	r1, r8
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	f7ff f9ea 	bl	800dc84 <__mcmp>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	dd51      	ble.n	800e958 <_strtod_l+0x8b8>
 800e8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8b8:	9a08      	ldr	r2, [sp, #32]
 800e8ba:	0d1b      	lsrs	r3, r3, #20
 800e8bc:	051b      	lsls	r3, r3, #20
 800e8be:	2a00      	cmp	r2, #0
 800e8c0:	d06b      	beq.n	800e99a <_strtod_l+0x8fa>
 800e8c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e8c6:	d868      	bhi.n	800e99a <_strtod_l+0x8fa>
 800e8c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e8cc:	f67f ae9d 	bls.w	800e60a <_strtod_l+0x56a>
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e8fc <_strtod_l+0x85c>)
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	4659      	mov	r1, fp
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f7f1 feae 	bl	8000638 <__aeabi_dmul>
 800e8dc:	4b08      	ldr	r3, [pc, #32]	@ (800e900 <_strtod_l+0x860>)
 800e8de:	400b      	ands	r3, r1
 800e8e0:	4682      	mov	sl, r0
 800e8e2:	468b      	mov	fp, r1
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f47f ae05 	bne.w	800e4f4 <_strtod_l+0x454>
 800e8ea:	9a05      	ldr	r2, [sp, #20]
 800e8ec:	2322      	movs	r3, #34	@ 0x22
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	e600      	b.n	800e4f4 <_strtod_l+0x454>
 800e8f2:	bf00      	nop
 800e8f4:	080122e0 	.word	0x080122e0
 800e8f8:	fffffc02 	.word	0xfffffc02
 800e8fc:	39500000 	.word	0x39500000
 800e900:	7ff00000 	.word	0x7ff00000
 800e904:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e908:	d165      	bne.n	800e9d6 <_strtod_l+0x936>
 800e90a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e90c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e910:	b35a      	cbz	r2, 800e96a <_strtod_l+0x8ca>
 800e912:	4a9f      	ldr	r2, [pc, #636]	@ (800eb90 <_strtod_l+0xaf0>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d12b      	bne.n	800e970 <_strtod_l+0x8d0>
 800e918:	9b08      	ldr	r3, [sp, #32]
 800e91a:	4651      	mov	r1, sl
 800e91c:	b303      	cbz	r3, 800e960 <_strtod_l+0x8c0>
 800e91e:	4b9d      	ldr	r3, [pc, #628]	@ (800eb94 <_strtod_l+0xaf4>)
 800e920:	465a      	mov	r2, fp
 800e922:	4013      	ands	r3, r2
 800e924:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e928:	f04f 32ff 	mov.w	r2, #4294967295
 800e92c:	d81b      	bhi.n	800e966 <_strtod_l+0x8c6>
 800e92e:	0d1b      	lsrs	r3, r3, #20
 800e930:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e934:	fa02 f303 	lsl.w	r3, r2, r3
 800e938:	4299      	cmp	r1, r3
 800e93a:	d119      	bne.n	800e970 <_strtod_l+0x8d0>
 800e93c:	4b96      	ldr	r3, [pc, #600]	@ (800eb98 <_strtod_l+0xaf8>)
 800e93e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e940:	429a      	cmp	r2, r3
 800e942:	d102      	bne.n	800e94a <_strtod_l+0x8aa>
 800e944:	3101      	adds	r1, #1
 800e946:	f43f adca 	beq.w	800e4de <_strtod_l+0x43e>
 800e94a:	4b92      	ldr	r3, [pc, #584]	@ (800eb94 <_strtod_l+0xaf4>)
 800e94c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e94e:	401a      	ands	r2, r3
 800e950:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e954:	f04f 0a00 	mov.w	sl, #0
 800e958:	9b08      	ldr	r3, [sp, #32]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1b8      	bne.n	800e8d0 <_strtod_l+0x830>
 800e95e:	e5c9      	b.n	800e4f4 <_strtod_l+0x454>
 800e960:	f04f 33ff 	mov.w	r3, #4294967295
 800e964:	e7e8      	b.n	800e938 <_strtod_l+0x898>
 800e966:	4613      	mov	r3, r2
 800e968:	e7e6      	b.n	800e938 <_strtod_l+0x898>
 800e96a:	ea53 030a 	orrs.w	r3, r3, sl
 800e96e:	d0a1      	beq.n	800e8b4 <_strtod_l+0x814>
 800e970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e972:	b1db      	cbz	r3, 800e9ac <_strtod_l+0x90c>
 800e974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e976:	4213      	tst	r3, r2
 800e978:	d0ee      	beq.n	800e958 <_strtod_l+0x8b8>
 800e97a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e97c:	9a08      	ldr	r2, [sp, #32]
 800e97e:	4650      	mov	r0, sl
 800e980:	4659      	mov	r1, fp
 800e982:	b1bb      	cbz	r3, 800e9b4 <_strtod_l+0x914>
 800e984:	f7ff fb6c 	bl	800e060 <sulp>
 800e988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e98c:	ec53 2b10 	vmov	r2, r3, d0
 800e990:	f7f1 fc9c 	bl	80002cc <__adddf3>
 800e994:	4682      	mov	sl, r0
 800e996:	468b      	mov	fp, r1
 800e998:	e7de      	b.n	800e958 <_strtod_l+0x8b8>
 800e99a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e99e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e9a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e9a6:	f04f 3aff 	mov.w	sl, #4294967295
 800e9aa:	e7d5      	b.n	800e958 <_strtod_l+0x8b8>
 800e9ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9ae:	ea13 0f0a 	tst.w	r3, sl
 800e9b2:	e7e1      	b.n	800e978 <_strtod_l+0x8d8>
 800e9b4:	f7ff fb54 	bl	800e060 <sulp>
 800e9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9bc:	ec53 2b10 	vmov	r2, r3, d0
 800e9c0:	f7f1 fc82 	bl	80002c8 <__aeabi_dsub>
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	4682      	mov	sl, r0
 800e9ca:	468b      	mov	fp, r1
 800e9cc:	f7f2 f89c 	bl	8000b08 <__aeabi_dcmpeq>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d0c1      	beq.n	800e958 <_strtod_l+0x8b8>
 800e9d4:	e619      	b.n	800e60a <_strtod_l+0x56a>
 800e9d6:	4641      	mov	r1, r8
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f7ff facb 	bl	800df74 <__ratio>
 800e9de:	ec57 6b10 	vmov	r6, r7, d0
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	f7f2 f8a0 	bl	8000b30 <__aeabi_dcmple>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d06f      	beq.n	800ead4 <_strtod_l+0xa34>
 800e9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d17a      	bne.n	800eaf0 <_strtod_l+0xa50>
 800e9fa:	f1ba 0f00 	cmp.w	sl, #0
 800e9fe:	d158      	bne.n	800eab2 <_strtod_l+0xa12>
 800ea00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d15a      	bne.n	800eac0 <_strtod_l+0xa20>
 800ea0a:	4b64      	ldr	r3, [pc, #400]	@ (800eb9c <_strtod_l+0xafc>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4630      	mov	r0, r6
 800ea10:	4639      	mov	r1, r7
 800ea12:	f7f2 f883 	bl	8000b1c <__aeabi_dcmplt>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d159      	bne.n	800eace <_strtod_l+0xa2e>
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	4639      	mov	r1, r7
 800ea1e:	4b60      	ldr	r3, [pc, #384]	@ (800eba0 <_strtod_l+0xb00>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	f7f1 fe09 	bl	8000638 <__aeabi_dmul>
 800ea26:	4606      	mov	r6, r0
 800ea28:	460f      	mov	r7, r1
 800ea2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ea2e:	9606      	str	r6, [sp, #24]
 800ea30:	9307      	str	r3, [sp, #28]
 800ea32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea36:	4d57      	ldr	r5, [pc, #348]	@ (800eb94 <_strtod_l+0xaf4>)
 800ea38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ea3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea3e:	401d      	ands	r5, r3
 800ea40:	4b58      	ldr	r3, [pc, #352]	@ (800eba4 <_strtod_l+0xb04>)
 800ea42:	429d      	cmp	r5, r3
 800ea44:	f040 80b2 	bne.w	800ebac <_strtod_l+0xb0c>
 800ea48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ea4e:	ec4b ab10 	vmov	d0, sl, fp
 800ea52:	f7ff f9c7 	bl	800dde4 <__ulp>
 800ea56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea5a:	ec51 0b10 	vmov	r0, r1, d0
 800ea5e:	f7f1 fdeb 	bl	8000638 <__aeabi_dmul>
 800ea62:	4652      	mov	r2, sl
 800ea64:	465b      	mov	r3, fp
 800ea66:	f7f1 fc31 	bl	80002cc <__adddf3>
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4949      	ldr	r1, [pc, #292]	@ (800eb94 <_strtod_l+0xaf4>)
 800ea6e:	4a4e      	ldr	r2, [pc, #312]	@ (800eba8 <_strtod_l+0xb08>)
 800ea70:	4019      	ands	r1, r3
 800ea72:	4291      	cmp	r1, r2
 800ea74:	4682      	mov	sl, r0
 800ea76:	d942      	bls.n	800eafe <_strtod_l+0xa5e>
 800ea78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea7a:	4b47      	ldr	r3, [pc, #284]	@ (800eb98 <_strtod_l+0xaf8>)
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d103      	bne.n	800ea88 <_strtod_l+0x9e8>
 800ea80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea82:	3301      	adds	r3, #1
 800ea84:	f43f ad2b 	beq.w	800e4de <_strtod_l+0x43e>
 800ea88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800eb98 <_strtod_l+0xaf8>
 800ea8c:	f04f 3aff 	mov.w	sl, #4294967295
 800ea90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea92:	9805      	ldr	r0, [sp, #20]
 800ea94:	f7fe fe72 	bl	800d77c <_Bfree>
 800ea98:	9805      	ldr	r0, [sp, #20]
 800ea9a:	4649      	mov	r1, r9
 800ea9c:	f7fe fe6e 	bl	800d77c <_Bfree>
 800eaa0:	9805      	ldr	r0, [sp, #20]
 800eaa2:	4641      	mov	r1, r8
 800eaa4:	f7fe fe6a 	bl	800d77c <_Bfree>
 800eaa8:	9805      	ldr	r0, [sp, #20]
 800eaaa:	4621      	mov	r1, r4
 800eaac:	f7fe fe66 	bl	800d77c <_Bfree>
 800eab0:	e618      	b.n	800e6e4 <_strtod_l+0x644>
 800eab2:	f1ba 0f01 	cmp.w	sl, #1
 800eab6:	d103      	bne.n	800eac0 <_strtod_l+0xa20>
 800eab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f43f ada5 	beq.w	800e60a <_strtod_l+0x56a>
 800eac0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800eb70 <_strtod_l+0xad0>
 800eac4:	4f35      	ldr	r7, [pc, #212]	@ (800eb9c <_strtod_l+0xafc>)
 800eac6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eaca:	2600      	movs	r6, #0
 800eacc:	e7b1      	b.n	800ea32 <_strtod_l+0x992>
 800eace:	4f34      	ldr	r7, [pc, #208]	@ (800eba0 <_strtod_l+0xb00>)
 800ead0:	2600      	movs	r6, #0
 800ead2:	e7aa      	b.n	800ea2a <_strtod_l+0x98a>
 800ead4:	4b32      	ldr	r3, [pc, #200]	@ (800eba0 <_strtod_l+0xb00>)
 800ead6:	4630      	mov	r0, r6
 800ead8:	4639      	mov	r1, r7
 800eada:	2200      	movs	r2, #0
 800eadc:	f7f1 fdac 	bl	8000638 <__aeabi_dmul>
 800eae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eae2:	4606      	mov	r6, r0
 800eae4:	460f      	mov	r7, r1
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d09f      	beq.n	800ea2a <_strtod_l+0x98a>
 800eaea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eaee:	e7a0      	b.n	800ea32 <_strtod_l+0x992>
 800eaf0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eb78 <_strtod_l+0xad8>
 800eaf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eaf8:	ec57 6b17 	vmov	r6, r7, d7
 800eafc:	e799      	b.n	800ea32 <_strtod_l+0x992>
 800eafe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eb02:	9b08      	ldr	r3, [sp, #32]
 800eb04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1c1      	bne.n	800ea90 <_strtod_l+0x9f0>
 800eb0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb10:	0d1b      	lsrs	r3, r3, #20
 800eb12:	051b      	lsls	r3, r3, #20
 800eb14:	429d      	cmp	r5, r3
 800eb16:	d1bb      	bne.n	800ea90 <_strtod_l+0x9f0>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	f7f2 fa4a 	bl	8000fb4 <__aeabi_d2lz>
 800eb20:	f7f1 fd5c 	bl	80005dc <__aeabi_l2d>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	4630      	mov	r0, r6
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	f7f1 fbcc 	bl	80002c8 <__aeabi_dsub>
 800eb30:	460b      	mov	r3, r1
 800eb32:	4602      	mov	r2, r0
 800eb34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eb38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eb3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb3e:	ea46 060a 	orr.w	r6, r6, sl
 800eb42:	431e      	orrs	r6, r3
 800eb44:	d06f      	beq.n	800ec26 <_strtod_l+0xb86>
 800eb46:	a30e      	add	r3, pc, #56	@ (adr r3, 800eb80 <_strtod_l+0xae0>)
 800eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4c:	f7f1 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	f47f accf 	bne.w	800e4f4 <_strtod_l+0x454>
 800eb56:	a30c      	add	r3, pc, #48	@ (adr r3, 800eb88 <_strtod_l+0xae8>)
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb60:	f7f1 fffa 	bl	8000b58 <__aeabi_dcmpgt>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d093      	beq.n	800ea90 <_strtod_l+0x9f0>
 800eb68:	e4c4      	b.n	800e4f4 <_strtod_l+0x454>
 800eb6a:	bf00      	nop
 800eb6c:	f3af 8000 	nop.w
 800eb70:	00000000 	.word	0x00000000
 800eb74:	bff00000 	.word	0xbff00000
 800eb78:	00000000 	.word	0x00000000
 800eb7c:	3ff00000 	.word	0x3ff00000
 800eb80:	94a03595 	.word	0x94a03595
 800eb84:	3fdfffff 	.word	0x3fdfffff
 800eb88:	35afe535 	.word	0x35afe535
 800eb8c:	3fe00000 	.word	0x3fe00000
 800eb90:	000fffff 	.word	0x000fffff
 800eb94:	7ff00000 	.word	0x7ff00000
 800eb98:	7fefffff 	.word	0x7fefffff
 800eb9c:	3ff00000 	.word	0x3ff00000
 800eba0:	3fe00000 	.word	0x3fe00000
 800eba4:	7fe00000 	.word	0x7fe00000
 800eba8:	7c9fffff 	.word	0x7c9fffff
 800ebac:	9b08      	ldr	r3, [sp, #32]
 800ebae:	b323      	cbz	r3, 800ebfa <_strtod_l+0xb5a>
 800ebb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ebb4:	d821      	bhi.n	800ebfa <_strtod_l+0xb5a>
 800ebb6:	a328      	add	r3, pc, #160	@ (adr r3, 800ec58 <_strtod_l+0xbb8>)
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f7f1 ffb6 	bl	8000b30 <__aeabi_dcmple>
 800ebc4:	b1a0      	cbz	r0, 800ebf0 <_strtod_l+0xb50>
 800ebc6:	4639      	mov	r1, r7
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f7f2 f80d 	bl	8000be8 <__aeabi_d2uiz>
 800ebce:	2801      	cmp	r0, #1
 800ebd0:	bf38      	it	cc
 800ebd2:	2001      	movcc	r0, #1
 800ebd4:	f7f1 fcb6 	bl	8000544 <__aeabi_ui2d>
 800ebd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebda:	4606      	mov	r6, r0
 800ebdc:	460f      	mov	r7, r1
 800ebde:	b9fb      	cbnz	r3, 800ec20 <_strtod_l+0xb80>
 800ebe0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ebe4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ebe6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebe8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ebec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ebf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebf2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ebf6:	1b5b      	subs	r3, r3, r5
 800ebf8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ebfa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ebfe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ec02:	f7ff f8ef 	bl	800dde4 <__ulp>
 800ec06:	4650      	mov	r0, sl
 800ec08:	ec53 2b10 	vmov	r2, r3, d0
 800ec0c:	4659      	mov	r1, fp
 800ec0e:	f7f1 fd13 	bl	8000638 <__aeabi_dmul>
 800ec12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ec16:	f7f1 fb59 	bl	80002cc <__adddf3>
 800ec1a:	4682      	mov	sl, r0
 800ec1c:	468b      	mov	fp, r1
 800ec1e:	e770      	b.n	800eb02 <_strtod_l+0xa62>
 800ec20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ec24:	e7e0      	b.n	800ebe8 <_strtod_l+0xb48>
 800ec26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec60 <_strtod_l+0xbc0>)
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	f7f1 ff76 	bl	8000b1c <__aeabi_dcmplt>
 800ec30:	e798      	b.n	800eb64 <_strtod_l+0xac4>
 800ec32:	2300      	movs	r3, #0
 800ec34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ec38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec3a:	6013      	str	r3, [r2, #0]
 800ec3c:	f7ff ba6d 	b.w	800e11a <_strtod_l+0x7a>
 800ec40:	2a65      	cmp	r2, #101	@ 0x65
 800ec42:	f43f ab66 	beq.w	800e312 <_strtod_l+0x272>
 800ec46:	2a45      	cmp	r2, #69	@ 0x45
 800ec48:	f43f ab63 	beq.w	800e312 <_strtod_l+0x272>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f7ff bb9e 	b.w	800e38e <_strtod_l+0x2ee>
 800ec52:	bf00      	nop
 800ec54:	f3af 8000 	nop.w
 800ec58:	ffc00000 	.word	0xffc00000
 800ec5c:	41dfffff 	.word	0x41dfffff
 800ec60:	94a03595 	.word	0x94a03595
 800ec64:	3fcfffff 	.word	0x3fcfffff

0800ec68 <_strtod_r>:
 800ec68:	4b01      	ldr	r3, [pc, #4]	@ (800ec70 <_strtod_r+0x8>)
 800ec6a:	f7ff ba19 	b.w	800e0a0 <_strtod_l>
 800ec6e:	bf00      	nop
 800ec70:	20000094 	.word	0x20000094

0800ec74 <_strtol_l.constprop.0>:
 800ec74:	2b24      	cmp	r3, #36	@ 0x24
 800ec76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec7a:	4686      	mov	lr, r0
 800ec7c:	4690      	mov	r8, r2
 800ec7e:	d801      	bhi.n	800ec84 <_strtol_l.constprop.0+0x10>
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d106      	bne.n	800ec92 <_strtol_l.constprop.0+0x1e>
 800ec84:	f7fd fe5a 	bl	800c93c <__errno>
 800ec88:	2316      	movs	r3, #22
 800ec8a:	6003      	str	r3, [r0, #0]
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec92:	4834      	ldr	r0, [pc, #208]	@ (800ed64 <_strtol_l.constprop.0+0xf0>)
 800ec94:	460d      	mov	r5, r1
 800ec96:	462a      	mov	r2, r5
 800ec98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec9c:	5d06      	ldrb	r6, [r0, r4]
 800ec9e:	f016 0608 	ands.w	r6, r6, #8
 800eca2:	d1f8      	bne.n	800ec96 <_strtol_l.constprop.0+0x22>
 800eca4:	2c2d      	cmp	r4, #45	@ 0x2d
 800eca6:	d12d      	bne.n	800ed04 <_strtol_l.constprop.0+0x90>
 800eca8:	782c      	ldrb	r4, [r5, #0]
 800ecaa:	2601      	movs	r6, #1
 800ecac:	1c95      	adds	r5, r2, #2
 800ecae:	f033 0210 	bics.w	r2, r3, #16
 800ecb2:	d109      	bne.n	800ecc8 <_strtol_l.constprop.0+0x54>
 800ecb4:	2c30      	cmp	r4, #48	@ 0x30
 800ecb6:	d12a      	bne.n	800ed0e <_strtol_l.constprop.0+0x9a>
 800ecb8:	782a      	ldrb	r2, [r5, #0]
 800ecba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ecbe:	2a58      	cmp	r2, #88	@ 0x58
 800ecc0:	d125      	bne.n	800ed0e <_strtol_l.constprop.0+0x9a>
 800ecc2:	786c      	ldrb	r4, [r5, #1]
 800ecc4:	2310      	movs	r3, #16
 800ecc6:	3502      	adds	r5, #2
 800ecc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eccc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	fbbc f9f3 	udiv	r9, ip, r3
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	fb03 ca19 	mls	sl, r3, r9, ip
 800ecdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ece0:	2f09      	cmp	r7, #9
 800ece2:	d81b      	bhi.n	800ed1c <_strtol_l.constprop.0+0xa8>
 800ece4:	463c      	mov	r4, r7
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	dd27      	ble.n	800ed3a <_strtol_l.constprop.0+0xc6>
 800ecea:	1c57      	adds	r7, r2, #1
 800ecec:	d007      	beq.n	800ecfe <_strtol_l.constprop.0+0x8a>
 800ecee:	4581      	cmp	r9, r0
 800ecf0:	d320      	bcc.n	800ed34 <_strtol_l.constprop.0+0xc0>
 800ecf2:	d101      	bne.n	800ecf8 <_strtol_l.constprop.0+0x84>
 800ecf4:	45a2      	cmp	sl, r4
 800ecf6:	db1d      	blt.n	800ed34 <_strtol_l.constprop.0+0xc0>
 800ecf8:	fb00 4003 	mla	r0, r0, r3, r4
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed02:	e7eb      	b.n	800ecdc <_strtol_l.constprop.0+0x68>
 800ed04:	2c2b      	cmp	r4, #43	@ 0x2b
 800ed06:	bf04      	itt	eq
 800ed08:	782c      	ldrbeq	r4, [r5, #0]
 800ed0a:	1c95      	addeq	r5, r2, #2
 800ed0c:	e7cf      	b.n	800ecae <_strtol_l.constprop.0+0x3a>
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1da      	bne.n	800ecc8 <_strtol_l.constprop.0+0x54>
 800ed12:	2c30      	cmp	r4, #48	@ 0x30
 800ed14:	bf0c      	ite	eq
 800ed16:	2308      	moveq	r3, #8
 800ed18:	230a      	movne	r3, #10
 800ed1a:	e7d5      	b.n	800ecc8 <_strtol_l.constprop.0+0x54>
 800ed1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ed20:	2f19      	cmp	r7, #25
 800ed22:	d801      	bhi.n	800ed28 <_strtol_l.constprop.0+0xb4>
 800ed24:	3c37      	subs	r4, #55	@ 0x37
 800ed26:	e7de      	b.n	800ece6 <_strtol_l.constprop.0+0x72>
 800ed28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ed2c:	2f19      	cmp	r7, #25
 800ed2e:	d804      	bhi.n	800ed3a <_strtol_l.constprop.0+0xc6>
 800ed30:	3c57      	subs	r4, #87	@ 0x57
 800ed32:	e7d8      	b.n	800ece6 <_strtol_l.constprop.0+0x72>
 800ed34:	f04f 32ff 	mov.w	r2, #4294967295
 800ed38:	e7e1      	b.n	800ecfe <_strtol_l.constprop.0+0x8a>
 800ed3a:	1c53      	adds	r3, r2, #1
 800ed3c:	d108      	bne.n	800ed50 <_strtol_l.constprop.0+0xdc>
 800ed3e:	2322      	movs	r3, #34	@ 0x22
 800ed40:	f8ce 3000 	str.w	r3, [lr]
 800ed44:	4660      	mov	r0, ip
 800ed46:	f1b8 0f00 	cmp.w	r8, #0
 800ed4a:	d0a0      	beq.n	800ec8e <_strtol_l.constprop.0+0x1a>
 800ed4c:	1e69      	subs	r1, r5, #1
 800ed4e:	e006      	b.n	800ed5e <_strtol_l.constprop.0+0xea>
 800ed50:	b106      	cbz	r6, 800ed54 <_strtol_l.constprop.0+0xe0>
 800ed52:	4240      	negs	r0, r0
 800ed54:	f1b8 0f00 	cmp.w	r8, #0
 800ed58:	d099      	beq.n	800ec8e <_strtol_l.constprop.0+0x1a>
 800ed5a:	2a00      	cmp	r2, #0
 800ed5c:	d1f6      	bne.n	800ed4c <_strtol_l.constprop.0+0xd8>
 800ed5e:	f8c8 1000 	str.w	r1, [r8]
 800ed62:	e794      	b.n	800ec8e <_strtol_l.constprop.0+0x1a>
 800ed64:	08012309 	.word	0x08012309

0800ed68 <_strtol_r>:
 800ed68:	f7ff bf84 	b.w	800ec74 <_strtol_l.constprop.0>

0800ed6c <__ssputs_r>:
 800ed6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed70:	688e      	ldr	r6, [r1, #8]
 800ed72:	461f      	mov	r7, r3
 800ed74:	42be      	cmp	r6, r7
 800ed76:	680b      	ldr	r3, [r1, #0]
 800ed78:	4682      	mov	sl, r0
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	4690      	mov	r8, r2
 800ed7e:	d82d      	bhi.n	800eddc <__ssputs_r+0x70>
 800ed80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed88:	d026      	beq.n	800edd8 <__ssputs_r+0x6c>
 800ed8a:	6965      	ldr	r5, [r4, #20]
 800ed8c:	6909      	ldr	r1, [r1, #16]
 800ed8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed92:	eba3 0901 	sub.w	r9, r3, r1
 800ed96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed9a:	1c7b      	adds	r3, r7, #1
 800ed9c:	444b      	add	r3, r9
 800ed9e:	106d      	asrs	r5, r5, #1
 800eda0:	429d      	cmp	r5, r3
 800eda2:	bf38      	it	cc
 800eda4:	461d      	movcc	r5, r3
 800eda6:	0553      	lsls	r3, r2, #21
 800eda8:	d527      	bpl.n	800edfa <__ssputs_r+0x8e>
 800edaa:	4629      	mov	r1, r5
 800edac:	f7fc fcc0 	bl	800b730 <_malloc_r>
 800edb0:	4606      	mov	r6, r0
 800edb2:	b360      	cbz	r0, 800ee0e <__ssputs_r+0xa2>
 800edb4:	6921      	ldr	r1, [r4, #16]
 800edb6:	464a      	mov	r2, r9
 800edb8:	f7fd fded 	bl	800c996 <memcpy>
 800edbc:	89a3      	ldrh	r3, [r4, #12]
 800edbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edc6:	81a3      	strh	r3, [r4, #12]
 800edc8:	6126      	str	r6, [r4, #16]
 800edca:	6165      	str	r5, [r4, #20]
 800edcc:	444e      	add	r6, r9
 800edce:	eba5 0509 	sub.w	r5, r5, r9
 800edd2:	6026      	str	r6, [r4, #0]
 800edd4:	60a5      	str	r5, [r4, #8]
 800edd6:	463e      	mov	r6, r7
 800edd8:	42be      	cmp	r6, r7
 800edda:	d900      	bls.n	800edde <__ssputs_r+0x72>
 800eddc:	463e      	mov	r6, r7
 800edde:	6820      	ldr	r0, [r4, #0]
 800ede0:	4632      	mov	r2, r6
 800ede2:	4641      	mov	r1, r8
 800ede4:	f000 fd53 	bl	800f88e <memmove>
 800ede8:	68a3      	ldr	r3, [r4, #8]
 800edea:	1b9b      	subs	r3, r3, r6
 800edec:	60a3      	str	r3, [r4, #8]
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	4433      	add	r3, r6
 800edf2:	6023      	str	r3, [r4, #0]
 800edf4:	2000      	movs	r0, #0
 800edf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edfa:	462a      	mov	r2, r5
 800edfc:	f001 f8e5 	bl	800ffca <_realloc_r>
 800ee00:	4606      	mov	r6, r0
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d1e0      	bne.n	800edc8 <__ssputs_r+0x5c>
 800ee06:	6921      	ldr	r1, [r4, #16]
 800ee08:	4650      	mov	r0, sl
 800ee0a:	f7fe fc25 	bl	800d658 <_free_r>
 800ee0e:	230c      	movs	r3, #12
 800ee10:	f8ca 3000 	str.w	r3, [sl]
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	e7e9      	b.n	800edf6 <__ssputs_r+0x8a>
	...

0800ee24 <_svfiprintf_r>:
 800ee24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee28:	4698      	mov	r8, r3
 800ee2a:	898b      	ldrh	r3, [r1, #12]
 800ee2c:	061b      	lsls	r3, r3, #24
 800ee2e:	b09d      	sub	sp, #116	@ 0x74
 800ee30:	4607      	mov	r7, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	4614      	mov	r4, r2
 800ee36:	d510      	bpl.n	800ee5a <_svfiprintf_r+0x36>
 800ee38:	690b      	ldr	r3, [r1, #16]
 800ee3a:	b973      	cbnz	r3, 800ee5a <_svfiprintf_r+0x36>
 800ee3c:	2140      	movs	r1, #64	@ 0x40
 800ee3e:	f7fc fc77 	bl	800b730 <_malloc_r>
 800ee42:	6028      	str	r0, [r5, #0]
 800ee44:	6128      	str	r0, [r5, #16]
 800ee46:	b930      	cbnz	r0, 800ee56 <_svfiprintf_r+0x32>
 800ee48:	230c      	movs	r3, #12
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee50:	b01d      	add	sp, #116	@ 0x74
 800ee52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee56:	2340      	movs	r3, #64	@ 0x40
 800ee58:	616b      	str	r3, [r5, #20]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee5e:	2320      	movs	r3, #32
 800ee60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee68:	2330      	movs	r3, #48	@ 0x30
 800ee6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f008 <_svfiprintf_r+0x1e4>
 800ee6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee72:	f04f 0901 	mov.w	r9, #1
 800ee76:	4623      	mov	r3, r4
 800ee78:	469a      	mov	sl, r3
 800ee7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee7e:	b10a      	cbz	r2, 800ee84 <_svfiprintf_r+0x60>
 800ee80:	2a25      	cmp	r2, #37	@ 0x25
 800ee82:	d1f9      	bne.n	800ee78 <_svfiprintf_r+0x54>
 800ee84:	ebba 0b04 	subs.w	fp, sl, r4
 800ee88:	d00b      	beq.n	800eea2 <_svfiprintf_r+0x7e>
 800ee8a:	465b      	mov	r3, fp
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4629      	mov	r1, r5
 800ee90:	4638      	mov	r0, r7
 800ee92:	f7ff ff6b 	bl	800ed6c <__ssputs_r>
 800ee96:	3001      	adds	r0, #1
 800ee98:	f000 80a7 	beq.w	800efea <_svfiprintf_r+0x1c6>
 800ee9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee9e:	445a      	add	r2, fp
 800eea0:	9209      	str	r2, [sp, #36]	@ 0x24
 800eea2:	f89a 3000 	ldrb.w	r3, [sl]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f000 809f 	beq.w	800efea <_svfiprintf_r+0x1c6>
 800eeac:	2300      	movs	r3, #0
 800eeae:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeb6:	f10a 0a01 	add.w	sl, sl, #1
 800eeba:	9304      	str	r3, [sp, #16]
 800eebc:	9307      	str	r3, [sp, #28]
 800eebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eec2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eec4:	4654      	mov	r4, sl
 800eec6:	2205      	movs	r2, #5
 800eec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eecc:	484e      	ldr	r0, [pc, #312]	@ (800f008 <_svfiprintf_r+0x1e4>)
 800eece:	f7f1 f99f 	bl	8000210 <memchr>
 800eed2:	9a04      	ldr	r2, [sp, #16]
 800eed4:	b9d8      	cbnz	r0, 800ef0e <_svfiprintf_r+0xea>
 800eed6:	06d0      	lsls	r0, r2, #27
 800eed8:	bf44      	itt	mi
 800eeda:	2320      	movmi	r3, #32
 800eedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eee0:	0711      	lsls	r1, r2, #28
 800eee2:	bf44      	itt	mi
 800eee4:	232b      	movmi	r3, #43	@ 0x2b
 800eee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeea:	f89a 3000 	ldrb.w	r3, [sl]
 800eeee:	2b2a      	cmp	r3, #42	@ 0x2a
 800eef0:	d015      	beq.n	800ef1e <_svfiprintf_r+0xfa>
 800eef2:	9a07      	ldr	r2, [sp, #28]
 800eef4:	4654      	mov	r4, sl
 800eef6:	2000      	movs	r0, #0
 800eef8:	f04f 0c0a 	mov.w	ip, #10
 800eefc:	4621      	mov	r1, r4
 800eefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef02:	3b30      	subs	r3, #48	@ 0x30
 800ef04:	2b09      	cmp	r3, #9
 800ef06:	d94b      	bls.n	800efa0 <_svfiprintf_r+0x17c>
 800ef08:	b1b0      	cbz	r0, 800ef38 <_svfiprintf_r+0x114>
 800ef0a:	9207      	str	r2, [sp, #28]
 800ef0c:	e014      	b.n	800ef38 <_svfiprintf_r+0x114>
 800ef0e:	eba0 0308 	sub.w	r3, r0, r8
 800ef12:	fa09 f303 	lsl.w	r3, r9, r3
 800ef16:	4313      	orrs	r3, r2
 800ef18:	9304      	str	r3, [sp, #16]
 800ef1a:	46a2      	mov	sl, r4
 800ef1c:	e7d2      	b.n	800eec4 <_svfiprintf_r+0xa0>
 800ef1e:	9b03      	ldr	r3, [sp, #12]
 800ef20:	1d19      	adds	r1, r3, #4
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	9103      	str	r1, [sp, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	bfbb      	ittet	lt
 800ef2a:	425b      	neglt	r3, r3
 800ef2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ef30:	9307      	strge	r3, [sp, #28]
 800ef32:	9307      	strlt	r3, [sp, #28]
 800ef34:	bfb8      	it	lt
 800ef36:	9204      	strlt	r2, [sp, #16]
 800ef38:	7823      	ldrb	r3, [r4, #0]
 800ef3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef3c:	d10a      	bne.n	800ef54 <_svfiprintf_r+0x130>
 800ef3e:	7863      	ldrb	r3, [r4, #1]
 800ef40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef42:	d132      	bne.n	800efaa <_svfiprintf_r+0x186>
 800ef44:	9b03      	ldr	r3, [sp, #12]
 800ef46:	1d1a      	adds	r2, r3, #4
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	9203      	str	r2, [sp, #12]
 800ef4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef50:	3402      	adds	r4, #2
 800ef52:	9305      	str	r3, [sp, #20]
 800ef54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f018 <_svfiprintf_r+0x1f4>
 800ef58:	7821      	ldrb	r1, [r4, #0]
 800ef5a:	2203      	movs	r2, #3
 800ef5c:	4650      	mov	r0, sl
 800ef5e:	f7f1 f957 	bl	8000210 <memchr>
 800ef62:	b138      	cbz	r0, 800ef74 <_svfiprintf_r+0x150>
 800ef64:	9b04      	ldr	r3, [sp, #16]
 800ef66:	eba0 000a 	sub.w	r0, r0, sl
 800ef6a:	2240      	movs	r2, #64	@ 0x40
 800ef6c:	4082      	lsls	r2, r0
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	3401      	adds	r4, #1
 800ef72:	9304      	str	r3, [sp, #16]
 800ef74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef78:	4824      	ldr	r0, [pc, #144]	@ (800f00c <_svfiprintf_r+0x1e8>)
 800ef7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef7e:	2206      	movs	r2, #6
 800ef80:	f7f1 f946 	bl	8000210 <memchr>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d036      	beq.n	800eff6 <_svfiprintf_r+0x1d2>
 800ef88:	4b21      	ldr	r3, [pc, #132]	@ (800f010 <_svfiprintf_r+0x1ec>)
 800ef8a:	bb1b      	cbnz	r3, 800efd4 <_svfiprintf_r+0x1b0>
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	3307      	adds	r3, #7
 800ef90:	f023 0307 	bic.w	r3, r3, #7
 800ef94:	3308      	adds	r3, #8
 800ef96:	9303      	str	r3, [sp, #12]
 800ef98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef9a:	4433      	add	r3, r6
 800ef9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef9e:	e76a      	b.n	800ee76 <_svfiprintf_r+0x52>
 800efa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800efa4:	460c      	mov	r4, r1
 800efa6:	2001      	movs	r0, #1
 800efa8:	e7a8      	b.n	800eefc <_svfiprintf_r+0xd8>
 800efaa:	2300      	movs	r3, #0
 800efac:	3401      	adds	r4, #1
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	4619      	mov	r1, r3
 800efb2:	f04f 0c0a 	mov.w	ip, #10
 800efb6:	4620      	mov	r0, r4
 800efb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efbc:	3a30      	subs	r2, #48	@ 0x30
 800efbe:	2a09      	cmp	r2, #9
 800efc0:	d903      	bls.n	800efca <_svfiprintf_r+0x1a6>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d0c6      	beq.n	800ef54 <_svfiprintf_r+0x130>
 800efc6:	9105      	str	r1, [sp, #20]
 800efc8:	e7c4      	b.n	800ef54 <_svfiprintf_r+0x130>
 800efca:	fb0c 2101 	mla	r1, ip, r1, r2
 800efce:	4604      	mov	r4, r0
 800efd0:	2301      	movs	r3, #1
 800efd2:	e7f0      	b.n	800efb6 <_svfiprintf_r+0x192>
 800efd4:	ab03      	add	r3, sp, #12
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	462a      	mov	r2, r5
 800efda:	4b0e      	ldr	r3, [pc, #56]	@ (800f014 <_svfiprintf_r+0x1f0>)
 800efdc:	a904      	add	r1, sp, #16
 800efde:	4638      	mov	r0, r7
 800efe0:	f7fc fcd2 	bl	800b988 <_printf_float>
 800efe4:	1c42      	adds	r2, r0, #1
 800efe6:	4606      	mov	r6, r0
 800efe8:	d1d6      	bne.n	800ef98 <_svfiprintf_r+0x174>
 800efea:	89ab      	ldrh	r3, [r5, #12]
 800efec:	065b      	lsls	r3, r3, #25
 800efee:	f53f af2d 	bmi.w	800ee4c <_svfiprintf_r+0x28>
 800eff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eff4:	e72c      	b.n	800ee50 <_svfiprintf_r+0x2c>
 800eff6:	ab03      	add	r3, sp, #12
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	462a      	mov	r2, r5
 800effc:	4b05      	ldr	r3, [pc, #20]	@ (800f014 <_svfiprintf_r+0x1f0>)
 800effe:	a904      	add	r1, sp, #16
 800f000:	4638      	mov	r0, r7
 800f002:	f7fc ff59 	bl	800beb8 <_printf_i>
 800f006:	e7ed      	b.n	800efe4 <_svfiprintf_r+0x1c0>
 800f008:	08012409 	.word	0x08012409
 800f00c:	08012413 	.word	0x08012413
 800f010:	0800b989 	.word	0x0800b989
 800f014:	0800ed6d 	.word	0x0800ed6d
 800f018:	0801240f 	.word	0x0801240f

0800f01c <_sungetc_r>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	1c4b      	adds	r3, r1, #1
 800f020:	4614      	mov	r4, r2
 800f022:	d103      	bne.n	800f02c <_sungetc_r+0x10>
 800f024:	f04f 35ff 	mov.w	r5, #4294967295
 800f028:	4628      	mov	r0, r5
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	8993      	ldrh	r3, [r2, #12]
 800f02e:	f023 0320 	bic.w	r3, r3, #32
 800f032:	8193      	strh	r3, [r2, #12]
 800f034:	6853      	ldr	r3, [r2, #4]
 800f036:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f038:	b2cd      	uxtb	r5, r1
 800f03a:	b18a      	cbz	r2, 800f060 <_sungetc_r+0x44>
 800f03c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f03e:	429a      	cmp	r2, r3
 800f040:	dd08      	ble.n	800f054 <_sungetc_r+0x38>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	1e5a      	subs	r2, r3, #1
 800f046:	6022      	str	r2, [r4, #0]
 800f048:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f04c:	6863      	ldr	r3, [r4, #4]
 800f04e:	3301      	adds	r3, #1
 800f050:	6063      	str	r3, [r4, #4]
 800f052:	e7e9      	b.n	800f028 <_sungetc_r+0xc>
 800f054:	4621      	mov	r1, r4
 800f056:	f000 fbe0 	bl	800f81a <__submore>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d0f1      	beq.n	800f042 <_sungetc_r+0x26>
 800f05e:	e7e1      	b.n	800f024 <_sungetc_r+0x8>
 800f060:	6921      	ldr	r1, [r4, #16]
 800f062:	6822      	ldr	r2, [r4, #0]
 800f064:	b141      	cbz	r1, 800f078 <_sungetc_r+0x5c>
 800f066:	4291      	cmp	r1, r2
 800f068:	d206      	bcs.n	800f078 <_sungetc_r+0x5c>
 800f06a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f06e:	42a9      	cmp	r1, r5
 800f070:	d102      	bne.n	800f078 <_sungetc_r+0x5c>
 800f072:	3a01      	subs	r2, #1
 800f074:	6022      	str	r2, [r4, #0]
 800f076:	e7ea      	b.n	800f04e <_sungetc_r+0x32>
 800f078:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800f07c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f080:	6363      	str	r3, [r4, #52]	@ 0x34
 800f082:	2303      	movs	r3, #3
 800f084:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f086:	4623      	mov	r3, r4
 800f088:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	2301      	movs	r3, #1
 800f090:	e7de      	b.n	800f050 <_sungetc_r+0x34>

0800f092 <__ssrefill_r>:
 800f092:	b510      	push	{r4, lr}
 800f094:	460c      	mov	r4, r1
 800f096:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f098:	b169      	cbz	r1, 800f0b6 <__ssrefill_r+0x24>
 800f09a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f09e:	4299      	cmp	r1, r3
 800f0a0:	d001      	beq.n	800f0a6 <__ssrefill_r+0x14>
 800f0a2:	f7fe fad9 	bl	800d658 <_free_r>
 800f0a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0a8:	6063      	str	r3, [r4, #4]
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	6360      	str	r0, [r4, #52]	@ 0x34
 800f0ae:	b113      	cbz	r3, 800f0b6 <__ssrefill_r+0x24>
 800f0b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f0b2:	6023      	str	r3, [r4, #0]
 800f0b4:	bd10      	pop	{r4, pc}
 800f0b6:	6923      	ldr	r3, [r4, #16]
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6063      	str	r3, [r4, #4]
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f043 0320 	orr.w	r3, r3, #32
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ca:	e7f3      	b.n	800f0b4 <__ssrefill_r+0x22>

0800f0cc <__ssvfiscanf_r>:
 800f0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f0dc:	49a5      	ldr	r1, [pc, #660]	@ (800f374 <__ssvfiscanf_r+0x2a8>)
 800f0de:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f0e0:	f10d 0804 	add.w	r8, sp, #4
 800f0e4:	49a4      	ldr	r1, [pc, #656]	@ (800f378 <__ssvfiscanf_r+0x2ac>)
 800f0e6:	4fa5      	ldr	r7, [pc, #660]	@ (800f37c <__ssvfiscanf_r+0x2b0>)
 800f0e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	7813      	ldrb	r3, [r2, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f000 8158 	beq.w	800f3aa <__ssvfiscanf_r+0x2de>
 800f0fa:	5cf9      	ldrb	r1, [r7, r3]
 800f0fc:	f011 0108 	ands.w	r1, r1, #8
 800f100:	f102 0501 	add.w	r5, r2, #1
 800f104:	d019      	beq.n	800f13a <__ssvfiscanf_r+0x6e>
 800f106:	6863      	ldr	r3, [r4, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	dd0f      	ble.n	800f12c <__ssvfiscanf_r+0x60>
 800f10c:	6823      	ldr	r3, [r4, #0]
 800f10e:	781a      	ldrb	r2, [r3, #0]
 800f110:	5cba      	ldrb	r2, [r7, r2]
 800f112:	0712      	lsls	r2, r2, #28
 800f114:	d401      	bmi.n	800f11a <__ssvfiscanf_r+0x4e>
 800f116:	462a      	mov	r2, r5
 800f118:	e7eb      	b.n	800f0f2 <__ssvfiscanf_r+0x26>
 800f11a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f11c:	3201      	adds	r2, #1
 800f11e:	9245      	str	r2, [sp, #276]	@ 0x114
 800f120:	6862      	ldr	r2, [r4, #4]
 800f122:	3301      	adds	r3, #1
 800f124:	3a01      	subs	r2, #1
 800f126:	6062      	str	r2, [r4, #4]
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	e7ec      	b.n	800f106 <__ssvfiscanf_r+0x3a>
 800f12c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f12e:	4621      	mov	r1, r4
 800f130:	4630      	mov	r0, r6
 800f132:	4798      	blx	r3
 800f134:	2800      	cmp	r0, #0
 800f136:	d0e9      	beq.n	800f10c <__ssvfiscanf_r+0x40>
 800f138:	e7ed      	b.n	800f116 <__ssvfiscanf_r+0x4a>
 800f13a:	2b25      	cmp	r3, #37	@ 0x25
 800f13c:	d012      	beq.n	800f164 <__ssvfiscanf_r+0x98>
 800f13e:	4699      	mov	r9, r3
 800f140:	6863      	ldr	r3, [r4, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f340 8093 	ble.w	800f26e <__ssvfiscanf_r+0x1a2>
 800f148:	6822      	ldr	r2, [r4, #0]
 800f14a:	7813      	ldrb	r3, [r2, #0]
 800f14c:	454b      	cmp	r3, r9
 800f14e:	f040 812c 	bne.w	800f3aa <__ssvfiscanf_r+0x2de>
 800f152:	6863      	ldr	r3, [r4, #4]
 800f154:	3b01      	subs	r3, #1
 800f156:	6063      	str	r3, [r4, #4]
 800f158:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f15a:	3201      	adds	r2, #1
 800f15c:	3301      	adds	r3, #1
 800f15e:	6022      	str	r2, [r4, #0]
 800f160:	9345      	str	r3, [sp, #276]	@ 0x114
 800f162:	e7d8      	b.n	800f116 <__ssvfiscanf_r+0x4a>
 800f164:	9141      	str	r1, [sp, #260]	@ 0x104
 800f166:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f168:	7853      	ldrb	r3, [r2, #1]
 800f16a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f16c:	bf02      	ittt	eq
 800f16e:	2310      	moveq	r3, #16
 800f170:	1c95      	addeq	r5, r2, #2
 800f172:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f174:	220a      	movs	r2, #10
 800f176:	46a9      	mov	r9, r5
 800f178:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f17c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f180:	2b09      	cmp	r3, #9
 800f182:	d91e      	bls.n	800f1c2 <__ssvfiscanf_r+0xf6>
 800f184:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f380 <__ssvfiscanf_r+0x2b4>
 800f188:	2203      	movs	r2, #3
 800f18a:	4650      	mov	r0, sl
 800f18c:	f7f1 f840 	bl	8000210 <memchr>
 800f190:	b138      	cbz	r0, 800f1a2 <__ssvfiscanf_r+0xd6>
 800f192:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f194:	eba0 000a 	sub.w	r0, r0, sl
 800f198:	2301      	movs	r3, #1
 800f19a:	4083      	lsls	r3, r0
 800f19c:	4313      	orrs	r3, r2
 800f19e:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1a0:	464d      	mov	r5, r9
 800f1a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1a6:	2b78      	cmp	r3, #120	@ 0x78
 800f1a8:	d806      	bhi.n	800f1b8 <__ssvfiscanf_r+0xec>
 800f1aa:	2b57      	cmp	r3, #87	@ 0x57
 800f1ac:	d810      	bhi.n	800f1d0 <__ssvfiscanf_r+0x104>
 800f1ae:	2b25      	cmp	r3, #37	@ 0x25
 800f1b0:	d0c5      	beq.n	800f13e <__ssvfiscanf_r+0x72>
 800f1b2:	d857      	bhi.n	800f264 <__ssvfiscanf_r+0x198>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d065      	beq.n	800f284 <__ssvfiscanf_r+0x1b8>
 800f1b8:	2303      	movs	r3, #3
 800f1ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f1bc:	230a      	movs	r3, #10
 800f1be:	9342      	str	r3, [sp, #264]	@ 0x108
 800f1c0:	e078      	b.n	800f2b4 <__ssvfiscanf_r+0x1e8>
 800f1c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f1c4:	fb02 1103 	mla	r1, r2, r3, r1
 800f1c8:	3930      	subs	r1, #48	@ 0x30
 800f1ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f1cc:	464d      	mov	r5, r9
 800f1ce:	e7d2      	b.n	800f176 <__ssvfiscanf_r+0xaa>
 800f1d0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f1d4:	2a20      	cmp	r2, #32
 800f1d6:	d8ef      	bhi.n	800f1b8 <__ssvfiscanf_r+0xec>
 800f1d8:	a101      	add	r1, pc, #4	@ (adr r1, 800f1e0 <__ssvfiscanf_r+0x114>)
 800f1da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1de:	bf00      	nop
 800f1e0:	0800f293 	.word	0x0800f293
 800f1e4:	0800f1b9 	.word	0x0800f1b9
 800f1e8:	0800f1b9 	.word	0x0800f1b9
 800f1ec:	0800f2ed 	.word	0x0800f2ed
 800f1f0:	0800f1b9 	.word	0x0800f1b9
 800f1f4:	0800f1b9 	.word	0x0800f1b9
 800f1f8:	0800f1b9 	.word	0x0800f1b9
 800f1fc:	0800f1b9 	.word	0x0800f1b9
 800f200:	0800f1b9 	.word	0x0800f1b9
 800f204:	0800f1b9 	.word	0x0800f1b9
 800f208:	0800f1b9 	.word	0x0800f1b9
 800f20c:	0800f303 	.word	0x0800f303
 800f210:	0800f2e9 	.word	0x0800f2e9
 800f214:	0800f26b 	.word	0x0800f26b
 800f218:	0800f26b 	.word	0x0800f26b
 800f21c:	0800f26b 	.word	0x0800f26b
 800f220:	0800f1b9 	.word	0x0800f1b9
 800f224:	0800f2a5 	.word	0x0800f2a5
 800f228:	0800f1b9 	.word	0x0800f1b9
 800f22c:	0800f1b9 	.word	0x0800f1b9
 800f230:	0800f1b9 	.word	0x0800f1b9
 800f234:	0800f1b9 	.word	0x0800f1b9
 800f238:	0800f313 	.word	0x0800f313
 800f23c:	0800f2ad 	.word	0x0800f2ad
 800f240:	0800f28b 	.word	0x0800f28b
 800f244:	0800f1b9 	.word	0x0800f1b9
 800f248:	0800f1b9 	.word	0x0800f1b9
 800f24c:	0800f30f 	.word	0x0800f30f
 800f250:	0800f1b9 	.word	0x0800f1b9
 800f254:	0800f2e9 	.word	0x0800f2e9
 800f258:	0800f1b9 	.word	0x0800f1b9
 800f25c:	0800f1b9 	.word	0x0800f1b9
 800f260:	0800f293 	.word	0x0800f293
 800f264:	3b45      	subs	r3, #69	@ 0x45
 800f266:	2b02      	cmp	r3, #2
 800f268:	d8a6      	bhi.n	800f1b8 <__ssvfiscanf_r+0xec>
 800f26a:	2305      	movs	r3, #5
 800f26c:	e021      	b.n	800f2b2 <__ssvfiscanf_r+0x1e6>
 800f26e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f270:	4621      	mov	r1, r4
 800f272:	4630      	mov	r0, r6
 800f274:	4798      	blx	r3
 800f276:	2800      	cmp	r0, #0
 800f278:	f43f af66 	beq.w	800f148 <__ssvfiscanf_r+0x7c>
 800f27c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f27e:	2800      	cmp	r0, #0
 800f280:	f040 808b 	bne.w	800f39a <__ssvfiscanf_r+0x2ce>
 800f284:	f04f 30ff 	mov.w	r0, #4294967295
 800f288:	e08b      	b.n	800f3a2 <__ssvfiscanf_r+0x2d6>
 800f28a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f28c:	f042 0220 	orr.w	r2, r2, #32
 800f290:	9241      	str	r2, [sp, #260]	@ 0x104
 800f292:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f298:	9241      	str	r2, [sp, #260]	@ 0x104
 800f29a:	2210      	movs	r2, #16
 800f29c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f29e:	9242      	str	r2, [sp, #264]	@ 0x108
 800f2a0:	d902      	bls.n	800f2a8 <__ssvfiscanf_r+0x1dc>
 800f2a2:	e005      	b.n	800f2b0 <__ssvfiscanf_r+0x1e4>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e002      	b.n	800f2b2 <__ssvfiscanf_r+0x1e6>
 800f2ac:	2308      	movs	r3, #8
 800f2ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800f2b0:	2304      	movs	r3, #4
 800f2b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f2b4:	6863      	ldr	r3, [r4, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dd39      	ble.n	800f32e <__ssvfiscanf_r+0x262>
 800f2ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f2bc:	0659      	lsls	r1, r3, #25
 800f2be:	d404      	bmi.n	800f2ca <__ssvfiscanf_r+0x1fe>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	781a      	ldrb	r2, [r3, #0]
 800f2c4:	5cba      	ldrb	r2, [r7, r2]
 800f2c6:	0712      	lsls	r2, r2, #28
 800f2c8:	d438      	bmi.n	800f33c <__ssvfiscanf_r+0x270>
 800f2ca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f2cc:	2b02      	cmp	r3, #2
 800f2ce:	dc47      	bgt.n	800f360 <__ssvfiscanf_r+0x294>
 800f2d0:	466b      	mov	r3, sp
 800f2d2:	4622      	mov	r2, r4
 800f2d4:	a941      	add	r1, sp, #260	@ 0x104
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f000 f86c 	bl	800f3b4 <_scanf_chars>
 800f2dc:	2801      	cmp	r0, #1
 800f2de:	d064      	beq.n	800f3aa <__ssvfiscanf_r+0x2de>
 800f2e0:	2802      	cmp	r0, #2
 800f2e2:	f47f af18 	bne.w	800f116 <__ssvfiscanf_r+0x4a>
 800f2e6:	e7c9      	b.n	800f27c <__ssvfiscanf_r+0x1b0>
 800f2e8:	220a      	movs	r2, #10
 800f2ea:	e7d7      	b.n	800f29c <__ssvfiscanf_r+0x1d0>
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	f000 fa5a 	bl	800f7a8 <__sccl>
 800f2f4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2fa:	9341      	str	r3, [sp, #260]	@ 0x104
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	2301      	movs	r3, #1
 800f300:	e7d7      	b.n	800f2b2 <__ssvfiscanf_r+0x1e6>
 800f302:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f308:	9341      	str	r3, [sp, #260]	@ 0x104
 800f30a:	2300      	movs	r3, #0
 800f30c:	e7d1      	b.n	800f2b2 <__ssvfiscanf_r+0x1e6>
 800f30e:	2302      	movs	r3, #2
 800f310:	e7cf      	b.n	800f2b2 <__ssvfiscanf_r+0x1e6>
 800f312:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f314:	06c3      	lsls	r3, r0, #27
 800f316:	f53f aefe 	bmi.w	800f116 <__ssvfiscanf_r+0x4a>
 800f31a:	9b00      	ldr	r3, [sp, #0]
 800f31c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f31e:	1d19      	adds	r1, r3, #4
 800f320:	9100      	str	r1, [sp, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	07c0      	lsls	r0, r0, #31
 800f326:	bf4c      	ite	mi
 800f328:	801a      	strhmi	r2, [r3, #0]
 800f32a:	601a      	strpl	r2, [r3, #0]
 800f32c:	e6f3      	b.n	800f116 <__ssvfiscanf_r+0x4a>
 800f32e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f330:	4621      	mov	r1, r4
 800f332:	4630      	mov	r0, r6
 800f334:	4798      	blx	r3
 800f336:	2800      	cmp	r0, #0
 800f338:	d0bf      	beq.n	800f2ba <__ssvfiscanf_r+0x1ee>
 800f33a:	e79f      	b.n	800f27c <__ssvfiscanf_r+0x1b0>
 800f33c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f33e:	3201      	adds	r2, #1
 800f340:	9245      	str	r2, [sp, #276]	@ 0x114
 800f342:	6862      	ldr	r2, [r4, #4]
 800f344:	3a01      	subs	r2, #1
 800f346:	2a00      	cmp	r2, #0
 800f348:	6062      	str	r2, [r4, #4]
 800f34a:	dd02      	ble.n	800f352 <__ssvfiscanf_r+0x286>
 800f34c:	3301      	adds	r3, #1
 800f34e:	6023      	str	r3, [r4, #0]
 800f350:	e7b6      	b.n	800f2c0 <__ssvfiscanf_r+0x1f4>
 800f352:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f354:	4621      	mov	r1, r4
 800f356:	4630      	mov	r0, r6
 800f358:	4798      	blx	r3
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d0b0      	beq.n	800f2c0 <__ssvfiscanf_r+0x1f4>
 800f35e:	e78d      	b.n	800f27c <__ssvfiscanf_r+0x1b0>
 800f360:	2b04      	cmp	r3, #4
 800f362:	dc0f      	bgt.n	800f384 <__ssvfiscanf_r+0x2b8>
 800f364:	466b      	mov	r3, sp
 800f366:	4622      	mov	r2, r4
 800f368:	a941      	add	r1, sp, #260	@ 0x104
 800f36a:	4630      	mov	r0, r6
 800f36c:	f000 f87c 	bl	800f468 <_scanf_i>
 800f370:	e7b4      	b.n	800f2dc <__ssvfiscanf_r+0x210>
 800f372:	bf00      	nop
 800f374:	0800f01d 	.word	0x0800f01d
 800f378:	0800f093 	.word	0x0800f093
 800f37c:	08012309 	.word	0x08012309
 800f380:	0801240f 	.word	0x0801240f
 800f384:	4b0a      	ldr	r3, [pc, #40]	@ (800f3b0 <__ssvfiscanf_r+0x2e4>)
 800f386:	2b00      	cmp	r3, #0
 800f388:	f43f aec5 	beq.w	800f116 <__ssvfiscanf_r+0x4a>
 800f38c:	466b      	mov	r3, sp
 800f38e:	4622      	mov	r2, r4
 800f390:	a941      	add	r1, sp, #260	@ 0x104
 800f392:	4630      	mov	r0, r6
 800f394:	f7fc feb0 	bl	800c0f8 <_scanf_float>
 800f398:	e7a0      	b.n	800f2dc <__ssvfiscanf_r+0x210>
 800f39a:	89a3      	ldrh	r3, [r4, #12]
 800f39c:	065b      	lsls	r3, r3, #25
 800f39e:	f53f af71 	bmi.w	800f284 <__ssvfiscanf_r+0x1b8>
 800f3a2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3aa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f3ac:	e7f9      	b.n	800f3a2 <__ssvfiscanf_r+0x2d6>
 800f3ae:	bf00      	nop
 800f3b0:	0800c0f9 	.word	0x0800c0f9

0800f3b4 <_scanf_chars>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	4615      	mov	r5, r2
 800f3ba:	688a      	ldr	r2, [r1, #8]
 800f3bc:	4680      	mov	r8, r0
 800f3be:	460c      	mov	r4, r1
 800f3c0:	b932      	cbnz	r2, 800f3d0 <_scanf_chars+0x1c>
 800f3c2:	698a      	ldr	r2, [r1, #24]
 800f3c4:	2a00      	cmp	r2, #0
 800f3c6:	bf14      	ite	ne
 800f3c8:	f04f 32ff 	movne.w	r2, #4294967295
 800f3cc:	2201      	moveq	r2, #1
 800f3ce:	608a      	str	r2, [r1, #8]
 800f3d0:	6822      	ldr	r2, [r4, #0]
 800f3d2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f464 <_scanf_chars+0xb0>
 800f3d6:	06d1      	lsls	r1, r2, #27
 800f3d8:	bf5f      	itttt	pl
 800f3da:	681a      	ldrpl	r2, [r3, #0]
 800f3dc:	1d11      	addpl	r1, r2, #4
 800f3de:	6019      	strpl	r1, [r3, #0]
 800f3e0:	6816      	ldrpl	r6, [r2, #0]
 800f3e2:	2700      	movs	r7, #0
 800f3e4:	69a0      	ldr	r0, [r4, #24]
 800f3e6:	b188      	cbz	r0, 800f40c <_scanf_chars+0x58>
 800f3e8:	2801      	cmp	r0, #1
 800f3ea:	d107      	bne.n	800f3fc <_scanf_chars+0x48>
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	781a      	ldrb	r2, [r3, #0]
 800f3f0:	6963      	ldr	r3, [r4, #20]
 800f3f2:	5c9b      	ldrb	r3, [r3, r2]
 800f3f4:	b953      	cbnz	r3, 800f40c <_scanf_chars+0x58>
 800f3f6:	2f00      	cmp	r7, #0
 800f3f8:	d031      	beq.n	800f45e <_scanf_chars+0xaa>
 800f3fa:	e022      	b.n	800f442 <_scanf_chars+0x8e>
 800f3fc:	2802      	cmp	r0, #2
 800f3fe:	d120      	bne.n	800f442 <_scanf_chars+0x8e>
 800f400:	682b      	ldr	r3, [r5, #0]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f408:	071b      	lsls	r3, r3, #28
 800f40a:	d41a      	bmi.n	800f442 <_scanf_chars+0x8e>
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	06da      	lsls	r2, r3, #27
 800f410:	bf5e      	ittt	pl
 800f412:	682b      	ldrpl	r3, [r5, #0]
 800f414:	781b      	ldrbpl	r3, [r3, #0]
 800f416:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f41a:	682a      	ldr	r2, [r5, #0]
 800f41c:	686b      	ldr	r3, [r5, #4]
 800f41e:	3201      	adds	r2, #1
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	68a2      	ldr	r2, [r4, #8]
 800f424:	3b01      	subs	r3, #1
 800f426:	3a01      	subs	r2, #1
 800f428:	606b      	str	r3, [r5, #4]
 800f42a:	3701      	adds	r7, #1
 800f42c:	60a2      	str	r2, [r4, #8]
 800f42e:	b142      	cbz	r2, 800f442 <_scanf_chars+0x8e>
 800f430:	2b00      	cmp	r3, #0
 800f432:	dcd7      	bgt.n	800f3e4 <_scanf_chars+0x30>
 800f434:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f438:	4629      	mov	r1, r5
 800f43a:	4640      	mov	r0, r8
 800f43c:	4798      	blx	r3
 800f43e:	2800      	cmp	r0, #0
 800f440:	d0d0      	beq.n	800f3e4 <_scanf_chars+0x30>
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	f013 0310 	ands.w	r3, r3, #16
 800f448:	d105      	bne.n	800f456 <_scanf_chars+0xa2>
 800f44a:	68e2      	ldr	r2, [r4, #12]
 800f44c:	3201      	adds	r2, #1
 800f44e:	60e2      	str	r2, [r4, #12]
 800f450:	69a2      	ldr	r2, [r4, #24]
 800f452:	b102      	cbz	r2, 800f456 <_scanf_chars+0xa2>
 800f454:	7033      	strb	r3, [r6, #0]
 800f456:	6923      	ldr	r3, [r4, #16]
 800f458:	443b      	add	r3, r7
 800f45a:	6123      	str	r3, [r4, #16]
 800f45c:	2000      	movs	r0, #0
 800f45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f462:	bf00      	nop
 800f464:	08012309 	.word	0x08012309

0800f468 <_scanf_i>:
 800f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	4698      	mov	r8, r3
 800f46e:	4b74      	ldr	r3, [pc, #464]	@ (800f640 <_scanf_i+0x1d8>)
 800f470:	460c      	mov	r4, r1
 800f472:	4682      	mov	sl, r0
 800f474:	4616      	mov	r6, r2
 800f476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f47a:	b087      	sub	sp, #28
 800f47c:	ab03      	add	r3, sp, #12
 800f47e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f482:	4b70      	ldr	r3, [pc, #448]	@ (800f644 <_scanf_i+0x1dc>)
 800f484:	69a1      	ldr	r1, [r4, #24]
 800f486:	4a70      	ldr	r2, [pc, #448]	@ (800f648 <_scanf_i+0x1e0>)
 800f488:	2903      	cmp	r1, #3
 800f48a:	bf08      	it	eq
 800f48c:	461a      	moveq	r2, r3
 800f48e:	68a3      	ldr	r3, [r4, #8]
 800f490:	9201      	str	r2, [sp, #4]
 800f492:	1e5a      	subs	r2, r3, #1
 800f494:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f498:	bf88      	it	hi
 800f49a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f49e:	4627      	mov	r7, r4
 800f4a0:	bf82      	ittt	hi
 800f4a2:	eb03 0905 	addhi.w	r9, r3, r5
 800f4a6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f4aa:	60a3      	strhi	r3, [r4, #8]
 800f4ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f4b0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f4b4:	bf98      	it	ls
 800f4b6:	f04f 0900 	movls.w	r9, #0
 800f4ba:	6023      	str	r3, [r4, #0]
 800f4bc:	463d      	mov	r5, r7
 800f4be:	f04f 0b00 	mov.w	fp, #0
 800f4c2:	6831      	ldr	r1, [r6, #0]
 800f4c4:	ab03      	add	r3, sp, #12
 800f4c6:	7809      	ldrb	r1, [r1, #0]
 800f4c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f4cc:	2202      	movs	r2, #2
 800f4ce:	f7f0 fe9f 	bl	8000210 <memchr>
 800f4d2:	b328      	cbz	r0, 800f520 <_scanf_i+0xb8>
 800f4d4:	f1bb 0f01 	cmp.w	fp, #1
 800f4d8:	d159      	bne.n	800f58e <_scanf_i+0x126>
 800f4da:	6862      	ldr	r2, [r4, #4]
 800f4dc:	b92a      	cbnz	r2, 800f4ea <_scanf_i+0x82>
 800f4de:	6822      	ldr	r2, [r4, #0]
 800f4e0:	2108      	movs	r1, #8
 800f4e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f4e6:	6061      	str	r1, [r4, #4]
 800f4e8:	6022      	str	r2, [r4, #0]
 800f4ea:	6822      	ldr	r2, [r4, #0]
 800f4ec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f4f0:	6022      	str	r2, [r4, #0]
 800f4f2:	68a2      	ldr	r2, [r4, #8]
 800f4f4:	1e51      	subs	r1, r2, #1
 800f4f6:	60a1      	str	r1, [r4, #8]
 800f4f8:	b192      	cbz	r2, 800f520 <_scanf_i+0xb8>
 800f4fa:	6832      	ldr	r2, [r6, #0]
 800f4fc:	1c51      	adds	r1, r2, #1
 800f4fe:	6031      	str	r1, [r6, #0]
 800f500:	7812      	ldrb	r2, [r2, #0]
 800f502:	f805 2b01 	strb.w	r2, [r5], #1
 800f506:	6872      	ldr	r2, [r6, #4]
 800f508:	3a01      	subs	r2, #1
 800f50a:	2a00      	cmp	r2, #0
 800f50c:	6072      	str	r2, [r6, #4]
 800f50e:	dc07      	bgt.n	800f520 <_scanf_i+0xb8>
 800f510:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f514:	4631      	mov	r1, r6
 800f516:	4650      	mov	r0, sl
 800f518:	4790      	blx	r2
 800f51a:	2800      	cmp	r0, #0
 800f51c:	f040 8085 	bne.w	800f62a <_scanf_i+0x1c2>
 800f520:	f10b 0b01 	add.w	fp, fp, #1
 800f524:	f1bb 0f03 	cmp.w	fp, #3
 800f528:	d1cb      	bne.n	800f4c2 <_scanf_i+0x5a>
 800f52a:	6863      	ldr	r3, [r4, #4]
 800f52c:	b90b      	cbnz	r3, 800f532 <_scanf_i+0xca>
 800f52e:	230a      	movs	r3, #10
 800f530:	6063      	str	r3, [r4, #4]
 800f532:	6863      	ldr	r3, [r4, #4]
 800f534:	4945      	ldr	r1, [pc, #276]	@ (800f64c <_scanf_i+0x1e4>)
 800f536:	6960      	ldr	r0, [r4, #20]
 800f538:	1ac9      	subs	r1, r1, r3
 800f53a:	f000 f935 	bl	800f7a8 <__sccl>
 800f53e:	f04f 0b00 	mov.w	fp, #0
 800f542:	68a3      	ldr	r3, [r4, #8]
 800f544:	6822      	ldr	r2, [r4, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d03d      	beq.n	800f5c6 <_scanf_i+0x15e>
 800f54a:	6831      	ldr	r1, [r6, #0]
 800f54c:	6960      	ldr	r0, [r4, #20]
 800f54e:	f891 c000 	ldrb.w	ip, [r1]
 800f552:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f556:	2800      	cmp	r0, #0
 800f558:	d035      	beq.n	800f5c6 <_scanf_i+0x15e>
 800f55a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f55e:	d124      	bne.n	800f5aa <_scanf_i+0x142>
 800f560:	0510      	lsls	r0, r2, #20
 800f562:	d522      	bpl.n	800f5aa <_scanf_i+0x142>
 800f564:	f10b 0b01 	add.w	fp, fp, #1
 800f568:	f1b9 0f00 	cmp.w	r9, #0
 800f56c:	d003      	beq.n	800f576 <_scanf_i+0x10e>
 800f56e:	3301      	adds	r3, #1
 800f570:	f109 39ff 	add.w	r9, r9, #4294967295
 800f574:	60a3      	str	r3, [r4, #8]
 800f576:	6873      	ldr	r3, [r6, #4]
 800f578:	3b01      	subs	r3, #1
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	6073      	str	r3, [r6, #4]
 800f57e:	dd1b      	ble.n	800f5b8 <_scanf_i+0x150>
 800f580:	6833      	ldr	r3, [r6, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	6033      	str	r3, [r6, #0]
 800f586:	68a3      	ldr	r3, [r4, #8]
 800f588:	3b01      	subs	r3, #1
 800f58a:	60a3      	str	r3, [r4, #8]
 800f58c:	e7d9      	b.n	800f542 <_scanf_i+0xda>
 800f58e:	f1bb 0f02 	cmp.w	fp, #2
 800f592:	d1ae      	bne.n	800f4f2 <_scanf_i+0x8a>
 800f594:	6822      	ldr	r2, [r4, #0]
 800f596:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f59a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f59e:	d1bf      	bne.n	800f520 <_scanf_i+0xb8>
 800f5a0:	2110      	movs	r1, #16
 800f5a2:	6061      	str	r1, [r4, #4]
 800f5a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f5a8:	e7a2      	b.n	800f4f0 <_scanf_i+0x88>
 800f5aa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f5ae:	6022      	str	r2, [r4, #0]
 800f5b0:	780b      	ldrb	r3, [r1, #0]
 800f5b2:	f805 3b01 	strb.w	r3, [r5], #1
 800f5b6:	e7de      	b.n	800f576 <_scanf_i+0x10e>
 800f5b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f5bc:	4631      	mov	r1, r6
 800f5be:	4650      	mov	r0, sl
 800f5c0:	4798      	blx	r3
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d0df      	beq.n	800f586 <_scanf_i+0x11e>
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	05d9      	lsls	r1, r3, #23
 800f5ca:	d50d      	bpl.n	800f5e8 <_scanf_i+0x180>
 800f5cc:	42bd      	cmp	r5, r7
 800f5ce:	d909      	bls.n	800f5e4 <_scanf_i+0x17c>
 800f5d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f5d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5d8:	4632      	mov	r2, r6
 800f5da:	4650      	mov	r0, sl
 800f5dc:	4798      	blx	r3
 800f5de:	f105 39ff 	add.w	r9, r5, #4294967295
 800f5e2:	464d      	mov	r5, r9
 800f5e4:	42bd      	cmp	r5, r7
 800f5e6:	d028      	beq.n	800f63a <_scanf_i+0x1d2>
 800f5e8:	6822      	ldr	r2, [r4, #0]
 800f5ea:	f012 0210 	ands.w	r2, r2, #16
 800f5ee:	d113      	bne.n	800f618 <_scanf_i+0x1b0>
 800f5f0:	702a      	strb	r2, [r5, #0]
 800f5f2:	6863      	ldr	r3, [r4, #4]
 800f5f4:	9e01      	ldr	r6, [sp, #4]
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	4650      	mov	r0, sl
 800f5fa:	47b0      	blx	r6
 800f5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f600:	6821      	ldr	r1, [r4, #0]
 800f602:	1d1a      	adds	r2, r3, #4
 800f604:	f8c8 2000 	str.w	r2, [r8]
 800f608:	f011 0f20 	tst.w	r1, #32
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	d00f      	beq.n	800f630 <_scanf_i+0x1c8>
 800f610:	6018      	str	r0, [r3, #0]
 800f612:	68e3      	ldr	r3, [r4, #12]
 800f614:	3301      	adds	r3, #1
 800f616:	60e3      	str	r3, [r4, #12]
 800f618:	6923      	ldr	r3, [r4, #16]
 800f61a:	1bed      	subs	r5, r5, r7
 800f61c:	445d      	add	r5, fp
 800f61e:	442b      	add	r3, r5
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	2000      	movs	r0, #0
 800f624:	b007      	add	sp, #28
 800f626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62a:	f04f 0b00 	mov.w	fp, #0
 800f62e:	e7ca      	b.n	800f5c6 <_scanf_i+0x15e>
 800f630:	07ca      	lsls	r2, r1, #31
 800f632:	bf4c      	ite	mi
 800f634:	8018      	strhmi	r0, [r3, #0]
 800f636:	6018      	strpl	r0, [r3, #0]
 800f638:	e7eb      	b.n	800f612 <_scanf_i+0x1aa>
 800f63a:	2001      	movs	r0, #1
 800f63c:	e7f2      	b.n	800f624 <_scanf_i+0x1bc>
 800f63e:	bf00      	nop
 800f640:	08012068 	.word	0x08012068
 800f644:	0800ed69 	.word	0x0800ed69
 800f648:	08010105 	.word	0x08010105
 800f64c:	0801242a 	.word	0x0801242a

0800f650 <__sflush_r>:
 800f650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f658:	0716      	lsls	r6, r2, #28
 800f65a:	4605      	mov	r5, r0
 800f65c:	460c      	mov	r4, r1
 800f65e:	d454      	bmi.n	800f70a <__sflush_r+0xba>
 800f660:	684b      	ldr	r3, [r1, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	dc02      	bgt.n	800f66c <__sflush_r+0x1c>
 800f666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f668:	2b00      	cmp	r3, #0
 800f66a:	dd48      	ble.n	800f6fe <__sflush_r+0xae>
 800f66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f66e:	2e00      	cmp	r6, #0
 800f670:	d045      	beq.n	800f6fe <__sflush_r+0xae>
 800f672:	2300      	movs	r3, #0
 800f674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f678:	682f      	ldr	r7, [r5, #0]
 800f67a:	6a21      	ldr	r1, [r4, #32]
 800f67c:	602b      	str	r3, [r5, #0]
 800f67e:	d030      	beq.n	800f6e2 <__sflush_r+0x92>
 800f680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f682:	89a3      	ldrh	r3, [r4, #12]
 800f684:	0759      	lsls	r1, r3, #29
 800f686:	d505      	bpl.n	800f694 <__sflush_r+0x44>
 800f688:	6863      	ldr	r3, [r4, #4]
 800f68a:	1ad2      	subs	r2, r2, r3
 800f68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f68e:	b10b      	cbz	r3, 800f694 <__sflush_r+0x44>
 800f690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f692:	1ad2      	subs	r2, r2, r3
 800f694:	2300      	movs	r3, #0
 800f696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f698:	6a21      	ldr	r1, [r4, #32]
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b0      	blx	r6
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	d106      	bne.n	800f6b2 <__sflush_r+0x62>
 800f6a4:	6829      	ldr	r1, [r5, #0]
 800f6a6:	291d      	cmp	r1, #29
 800f6a8:	d82b      	bhi.n	800f702 <__sflush_r+0xb2>
 800f6aa:	4a2a      	ldr	r2, [pc, #168]	@ (800f754 <__sflush_r+0x104>)
 800f6ac:	410a      	asrs	r2, r1
 800f6ae:	07d6      	lsls	r6, r2, #31
 800f6b0:	d427      	bmi.n	800f702 <__sflush_r+0xb2>
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	6062      	str	r2, [r4, #4]
 800f6b6:	04d9      	lsls	r1, r3, #19
 800f6b8:	6922      	ldr	r2, [r4, #16]
 800f6ba:	6022      	str	r2, [r4, #0]
 800f6bc:	d504      	bpl.n	800f6c8 <__sflush_r+0x78>
 800f6be:	1c42      	adds	r2, r0, #1
 800f6c0:	d101      	bne.n	800f6c6 <__sflush_r+0x76>
 800f6c2:	682b      	ldr	r3, [r5, #0]
 800f6c4:	b903      	cbnz	r3, 800f6c8 <__sflush_r+0x78>
 800f6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ca:	602f      	str	r7, [r5, #0]
 800f6cc:	b1b9      	cbz	r1, 800f6fe <__sflush_r+0xae>
 800f6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6d2:	4299      	cmp	r1, r3
 800f6d4:	d002      	beq.n	800f6dc <__sflush_r+0x8c>
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f7fd ffbe 	bl	800d658 <_free_r>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6e0:	e00d      	b.n	800f6fe <__sflush_r+0xae>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	47b0      	blx	r6
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	1c50      	adds	r0, r2, #1
 800f6ec:	d1c9      	bne.n	800f682 <__sflush_r+0x32>
 800f6ee:	682b      	ldr	r3, [r5, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d0c6      	beq.n	800f682 <__sflush_r+0x32>
 800f6f4:	2b1d      	cmp	r3, #29
 800f6f6:	d001      	beq.n	800f6fc <__sflush_r+0xac>
 800f6f8:	2b16      	cmp	r3, #22
 800f6fa:	d11e      	bne.n	800f73a <__sflush_r+0xea>
 800f6fc:	602f      	str	r7, [r5, #0]
 800f6fe:	2000      	movs	r0, #0
 800f700:	e022      	b.n	800f748 <__sflush_r+0xf8>
 800f702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f706:	b21b      	sxth	r3, r3
 800f708:	e01b      	b.n	800f742 <__sflush_r+0xf2>
 800f70a:	690f      	ldr	r7, [r1, #16]
 800f70c:	2f00      	cmp	r7, #0
 800f70e:	d0f6      	beq.n	800f6fe <__sflush_r+0xae>
 800f710:	0793      	lsls	r3, r2, #30
 800f712:	680e      	ldr	r6, [r1, #0]
 800f714:	bf08      	it	eq
 800f716:	694b      	ldreq	r3, [r1, #20]
 800f718:	600f      	str	r7, [r1, #0]
 800f71a:	bf18      	it	ne
 800f71c:	2300      	movne	r3, #0
 800f71e:	eba6 0807 	sub.w	r8, r6, r7
 800f722:	608b      	str	r3, [r1, #8]
 800f724:	f1b8 0f00 	cmp.w	r8, #0
 800f728:	dde9      	ble.n	800f6fe <__sflush_r+0xae>
 800f72a:	6a21      	ldr	r1, [r4, #32]
 800f72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f72e:	4643      	mov	r3, r8
 800f730:	463a      	mov	r2, r7
 800f732:	4628      	mov	r0, r5
 800f734:	47b0      	blx	r6
 800f736:	2800      	cmp	r0, #0
 800f738:	dc08      	bgt.n	800f74c <__sflush_r+0xfc>
 800f73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f742:	81a3      	strh	r3, [r4, #12]
 800f744:	f04f 30ff 	mov.w	r0, #4294967295
 800f748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74c:	4407      	add	r7, r0
 800f74e:	eba8 0800 	sub.w	r8, r8, r0
 800f752:	e7e7      	b.n	800f724 <__sflush_r+0xd4>
 800f754:	dfbffffe 	.word	0xdfbffffe

0800f758 <_fflush_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	690b      	ldr	r3, [r1, #16]
 800f75c:	4605      	mov	r5, r0
 800f75e:	460c      	mov	r4, r1
 800f760:	b913      	cbnz	r3, 800f768 <_fflush_r+0x10>
 800f762:	2500      	movs	r5, #0
 800f764:	4628      	mov	r0, r5
 800f766:	bd38      	pop	{r3, r4, r5, pc}
 800f768:	b118      	cbz	r0, 800f772 <_fflush_r+0x1a>
 800f76a:	6a03      	ldr	r3, [r0, #32]
 800f76c:	b90b      	cbnz	r3, 800f772 <_fflush_r+0x1a>
 800f76e:	f7fc ff63 	bl	800c638 <__sinit>
 800f772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0f3      	beq.n	800f762 <_fflush_r+0xa>
 800f77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f77c:	07d0      	lsls	r0, r2, #31
 800f77e:	d404      	bmi.n	800f78a <_fflush_r+0x32>
 800f780:	0599      	lsls	r1, r3, #22
 800f782:	d402      	bmi.n	800f78a <_fflush_r+0x32>
 800f784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f786:	f7fd f904 	bl	800c992 <__retarget_lock_acquire_recursive>
 800f78a:	4628      	mov	r0, r5
 800f78c:	4621      	mov	r1, r4
 800f78e:	f7ff ff5f 	bl	800f650 <__sflush_r>
 800f792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f794:	07da      	lsls	r2, r3, #31
 800f796:	4605      	mov	r5, r0
 800f798:	d4e4      	bmi.n	800f764 <_fflush_r+0xc>
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	059b      	lsls	r3, r3, #22
 800f79e:	d4e1      	bmi.n	800f764 <_fflush_r+0xc>
 800f7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7a2:	f7fd f8f7 	bl	800c994 <__retarget_lock_release_recursive>
 800f7a6:	e7dd      	b.n	800f764 <_fflush_r+0xc>

0800f7a8 <__sccl>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	780b      	ldrb	r3, [r1, #0]
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	2b5e      	cmp	r3, #94	@ 0x5e
 800f7b0:	bf0b      	itete	eq
 800f7b2:	784b      	ldrbeq	r3, [r1, #1]
 800f7b4:	1c4a      	addne	r2, r1, #1
 800f7b6:	1c8a      	addeq	r2, r1, #2
 800f7b8:	2100      	movne	r1, #0
 800f7ba:	bf08      	it	eq
 800f7bc:	2101      	moveq	r1, #1
 800f7be:	3801      	subs	r0, #1
 800f7c0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f7c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f7c8:	42a8      	cmp	r0, r5
 800f7ca:	d1fb      	bne.n	800f7c4 <__sccl+0x1c>
 800f7cc:	b90b      	cbnz	r3, 800f7d2 <__sccl+0x2a>
 800f7ce:	1e50      	subs	r0, r2, #1
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	f081 0101 	eor.w	r1, r1, #1
 800f7d6:	54e1      	strb	r1, [r4, r3]
 800f7d8:	4610      	mov	r0, r2
 800f7da:	4602      	mov	r2, r0
 800f7dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f7e0:	2d2d      	cmp	r5, #45	@ 0x2d
 800f7e2:	d005      	beq.n	800f7f0 <__sccl+0x48>
 800f7e4:	2d5d      	cmp	r5, #93	@ 0x5d
 800f7e6:	d016      	beq.n	800f816 <__sccl+0x6e>
 800f7e8:	2d00      	cmp	r5, #0
 800f7ea:	d0f1      	beq.n	800f7d0 <__sccl+0x28>
 800f7ec:	462b      	mov	r3, r5
 800f7ee:	e7f2      	b.n	800f7d6 <__sccl+0x2e>
 800f7f0:	7846      	ldrb	r6, [r0, #1]
 800f7f2:	2e5d      	cmp	r6, #93	@ 0x5d
 800f7f4:	d0fa      	beq.n	800f7ec <__sccl+0x44>
 800f7f6:	42b3      	cmp	r3, r6
 800f7f8:	dcf8      	bgt.n	800f7ec <__sccl+0x44>
 800f7fa:	3002      	adds	r0, #2
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	3201      	adds	r2, #1
 800f800:	4296      	cmp	r6, r2
 800f802:	54a1      	strb	r1, [r4, r2]
 800f804:	dcfb      	bgt.n	800f7fe <__sccl+0x56>
 800f806:	1af2      	subs	r2, r6, r3
 800f808:	3a01      	subs	r2, #1
 800f80a:	1c5d      	adds	r5, r3, #1
 800f80c:	42b3      	cmp	r3, r6
 800f80e:	bfa8      	it	ge
 800f810:	2200      	movge	r2, #0
 800f812:	18ab      	adds	r3, r5, r2
 800f814:	e7e1      	b.n	800f7da <__sccl+0x32>
 800f816:	4610      	mov	r0, r2
 800f818:	e7da      	b.n	800f7d0 <__sccl+0x28>

0800f81a <__submore>:
 800f81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81e:	460c      	mov	r4, r1
 800f820:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f826:	4299      	cmp	r1, r3
 800f828:	d11d      	bne.n	800f866 <__submore+0x4c>
 800f82a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f82e:	f7fb ff7f 	bl	800b730 <_malloc_r>
 800f832:	b918      	cbnz	r0, 800f83c <__submore+0x22>
 800f834:	f04f 30ff 	mov.w	r0, #4294967295
 800f838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f840:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f842:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f846:	6360      	str	r0, [r4, #52]	@ 0x34
 800f848:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f84c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f850:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f854:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f858:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f85c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f860:	6020      	str	r0, [r4, #0]
 800f862:	2000      	movs	r0, #0
 800f864:	e7e8      	b.n	800f838 <__submore+0x1e>
 800f866:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f868:	0077      	lsls	r7, r6, #1
 800f86a:	463a      	mov	r2, r7
 800f86c:	f000 fbad 	bl	800ffca <_realloc_r>
 800f870:	4605      	mov	r5, r0
 800f872:	2800      	cmp	r0, #0
 800f874:	d0de      	beq.n	800f834 <__submore+0x1a>
 800f876:	eb00 0806 	add.w	r8, r0, r6
 800f87a:	4601      	mov	r1, r0
 800f87c:	4632      	mov	r2, r6
 800f87e:	4640      	mov	r0, r8
 800f880:	f7fd f889 	bl	800c996 <memcpy>
 800f884:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f888:	f8c4 8000 	str.w	r8, [r4]
 800f88c:	e7e9      	b.n	800f862 <__submore+0x48>

0800f88e <memmove>:
 800f88e:	4288      	cmp	r0, r1
 800f890:	b510      	push	{r4, lr}
 800f892:	eb01 0402 	add.w	r4, r1, r2
 800f896:	d902      	bls.n	800f89e <memmove+0x10>
 800f898:	4284      	cmp	r4, r0
 800f89a:	4623      	mov	r3, r4
 800f89c:	d807      	bhi.n	800f8ae <memmove+0x20>
 800f89e:	1e43      	subs	r3, r0, #1
 800f8a0:	42a1      	cmp	r1, r4
 800f8a2:	d008      	beq.n	800f8b6 <memmove+0x28>
 800f8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8ac:	e7f8      	b.n	800f8a0 <memmove+0x12>
 800f8ae:	4402      	add	r2, r0
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	428a      	cmp	r2, r1
 800f8b4:	d100      	bne.n	800f8b8 <memmove+0x2a>
 800f8b6:	bd10      	pop	{r4, pc}
 800f8b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8c0:	e7f7      	b.n	800f8b2 <memmove+0x24>

0800f8c2 <strncmp>:
 800f8c2:	b510      	push	{r4, lr}
 800f8c4:	b16a      	cbz	r2, 800f8e2 <strncmp+0x20>
 800f8c6:	3901      	subs	r1, #1
 800f8c8:	1884      	adds	r4, r0, r2
 800f8ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d103      	bne.n	800f8de <strncmp+0x1c>
 800f8d6:	42a0      	cmp	r0, r4
 800f8d8:	d001      	beq.n	800f8de <strncmp+0x1c>
 800f8da:	2a00      	cmp	r2, #0
 800f8dc:	d1f5      	bne.n	800f8ca <strncmp+0x8>
 800f8de:	1ad0      	subs	r0, r2, r3
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	4610      	mov	r0, r2
 800f8e4:	e7fc      	b.n	800f8e0 <strncmp+0x1e>
	...

0800f8e8 <nan>:
 800f8e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f8f0 <nan+0x8>
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	00000000 	.word	0x00000000
 800f8f4:	7ff80000 	.word	0x7ff80000

0800f8f8 <__assert_func>:
 800f8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8fa:	4614      	mov	r4, r2
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4b09      	ldr	r3, [pc, #36]	@ (800f924 <__assert_func+0x2c>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4605      	mov	r5, r0
 800f904:	68d8      	ldr	r0, [r3, #12]
 800f906:	b954      	cbnz	r4, 800f91e <__assert_func+0x26>
 800f908:	4b07      	ldr	r3, [pc, #28]	@ (800f928 <__assert_func+0x30>)
 800f90a:	461c      	mov	r4, r3
 800f90c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f910:	9100      	str	r1, [sp, #0]
 800f912:	462b      	mov	r3, r5
 800f914:	4905      	ldr	r1, [pc, #20]	@ (800f92c <__assert_func+0x34>)
 800f916:	f000 fc05 	bl	8010124 <fiprintf>
 800f91a:	f000 fc15 	bl	8010148 <abort>
 800f91e:	4b04      	ldr	r3, [pc, #16]	@ (800f930 <__assert_func+0x38>)
 800f920:	e7f4      	b.n	800f90c <__assert_func+0x14>
 800f922:	bf00      	nop
 800f924:	20000044 	.word	0x20000044
 800f928:	08012478 	.word	0x08012478
 800f92c:	0801244a 	.word	0x0801244a
 800f930:	0801243d 	.word	0x0801243d

0800f934 <rshift>:
 800f934:	6903      	ldr	r3, [r0, #16]
 800f936:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f93a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f93e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f942:	f100 0414 	add.w	r4, r0, #20
 800f946:	dd45      	ble.n	800f9d4 <rshift+0xa0>
 800f948:	f011 011f 	ands.w	r1, r1, #31
 800f94c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f950:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f954:	d10c      	bne.n	800f970 <rshift+0x3c>
 800f956:	f100 0710 	add.w	r7, r0, #16
 800f95a:	4629      	mov	r1, r5
 800f95c:	42b1      	cmp	r1, r6
 800f95e:	d334      	bcc.n	800f9ca <rshift+0x96>
 800f960:	1a9b      	subs	r3, r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	1eea      	subs	r2, r5, #3
 800f966:	4296      	cmp	r6, r2
 800f968:	bf38      	it	cc
 800f96a:	2300      	movcc	r3, #0
 800f96c:	4423      	add	r3, r4
 800f96e:	e015      	b.n	800f99c <rshift+0x68>
 800f970:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f974:	f1c1 0820 	rsb	r8, r1, #32
 800f978:	40cf      	lsrs	r7, r1
 800f97a:	f105 0e04 	add.w	lr, r5, #4
 800f97e:	46a1      	mov	r9, r4
 800f980:	4576      	cmp	r6, lr
 800f982:	46f4      	mov	ip, lr
 800f984:	d815      	bhi.n	800f9b2 <rshift+0x7e>
 800f986:	1a9a      	subs	r2, r3, r2
 800f988:	0092      	lsls	r2, r2, #2
 800f98a:	3a04      	subs	r2, #4
 800f98c:	3501      	adds	r5, #1
 800f98e:	42ae      	cmp	r6, r5
 800f990:	bf38      	it	cc
 800f992:	2200      	movcc	r2, #0
 800f994:	18a3      	adds	r3, r4, r2
 800f996:	50a7      	str	r7, [r4, r2]
 800f998:	b107      	cbz	r7, 800f99c <rshift+0x68>
 800f99a:	3304      	adds	r3, #4
 800f99c:	1b1a      	subs	r2, r3, r4
 800f99e:	42a3      	cmp	r3, r4
 800f9a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f9a4:	bf08      	it	eq
 800f9a6:	2300      	moveq	r3, #0
 800f9a8:	6102      	str	r2, [r0, #16]
 800f9aa:	bf08      	it	eq
 800f9ac:	6143      	streq	r3, [r0, #20]
 800f9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b2:	f8dc c000 	ldr.w	ip, [ip]
 800f9b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f9ba:	ea4c 0707 	orr.w	r7, ip, r7
 800f9be:	f849 7b04 	str.w	r7, [r9], #4
 800f9c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9c6:	40cf      	lsrs	r7, r1
 800f9c8:	e7da      	b.n	800f980 <rshift+0x4c>
 800f9ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9d2:	e7c3      	b.n	800f95c <rshift+0x28>
 800f9d4:	4623      	mov	r3, r4
 800f9d6:	e7e1      	b.n	800f99c <rshift+0x68>

0800f9d8 <__hexdig_fun>:
 800f9d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f9dc:	2b09      	cmp	r3, #9
 800f9de:	d802      	bhi.n	800f9e6 <__hexdig_fun+0xe>
 800f9e0:	3820      	subs	r0, #32
 800f9e2:	b2c0      	uxtb	r0, r0
 800f9e4:	4770      	bx	lr
 800f9e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f9ea:	2b05      	cmp	r3, #5
 800f9ec:	d801      	bhi.n	800f9f2 <__hexdig_fun+0x1a>
 800f9ee:	3847      	subs	r0, #71	@ 0x47
 800f9f0:	e7f7      	b.n	800f9e2 <__hexdig_fun+0xa>
 800f9f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f9f6:	2b05      	cmp	r3, #5
 800f9f8:	d801      	bhi.n	800f9fe <__hexdig_fun+0x26>
 800f9fa:	3827      	subs	r0, #39	@ 0x27
 800f9fc:	e7f1      	b.n	800f9e2 <__hexdig_fun+0xa>
 800f9fe:	2000      	movs	r0, #0
 800fa00:	4770      	bx	lr
	...

0800fa04 <__gethex>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	b085      	sub	sp, #20
 800fa0a:	468a      	mov	sl, r1
 800fa0c:	9302      	str	r3, [sp, #8]
 800fa0e:	680b      	ldr	r3, [r1, #0]
 800fa10:	9001      	str	r0, [sp, #4]
 800fa12:	4690      	mov	r8, r2
 800fa14:	1c9c      	adds	r4, r3, #2
 800fa16:	46a1      	mov	r9, r4
 800fa18:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fa1c:	2830      	cmp	r0, #48	@ 0x30
 800fa1e:	d0fa      	beq.n	800fa16 <__gethex+0x12>
 800fa20:	eba9 0303 	sub.w	r3, r9, r3
 800fa24:	f1a3 0b02 	sub.w	fp, r3, #2
 800fa28:	f7ff ffd6 	bl	800f9d8 <__hexdig_fun>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d168      	bne.n	800fb04 <__gethex+0x100>
 800fa32:	49a0      	ldr	r1, [pc, #640]	@ (800fcb4 <__gethex+0x2b0>)
 800fa34:	2201      	movs	r2, #1
 800fa36:	4648      	mov	r0, r9
 800fa38:	f7ff ff43 	bl	800f8c2 <strncmp>
 800fa3c:	4607      	mov	r7, r0
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d167      	bne.n	800fb12 <__gethex+0x10e>
 800fa42:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa46:	4626      	mov	r6, r4
 800fa48:	f7ff ffc6 	bl	800f9d8 <__hexdig_fun>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d062      	beq.n	800fb16 <__gethex+0x112>
 800fa50:	4623      	mov	r3, r4
 800fa52:	7818      	ldrb	r0, [r3, #0]
 800fa54:	2830      	cmp	r0, #48	@ 0x30
 800fa56:	4699      	mov	r9, r3
 800fa58:	f103 0301 	add.w	r3, r3, #1
 800fa5c:	d0f9      	beq.n	800fa52 <__gethex+0x4e>
 800fa5e:	f7ff ffbb 	bl	800f9d8 <__hexdig_fun>
 800fa62:	fab0 f580 	clz	r5, r0
 800fa66:	096d      	lsrs	r5, r5, #5
 800fa68:	f04f 0b01 	mov.w	fp, #1
 800fa6c:	464a      	mov	r2, r9
 800fa6e:	4616      	mov	r6, r2
 800fa70:	3201      	adds	r2, #1
 800fa72:	7830      	ldrb	r0, [r6, #0]
 800fa74:	f7ff ffb0 	bl	800f9d8 <__hexdig_fun>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d1f8      	bne.n	800fa6e <__gethex+0x6a>
 800fa7c:	498d      	ldr	r1, [pc, #564]	@ (800fcb4 <__gethex+0x2b0>)
 800fa7e:	2201      	movs	r2, #1
 800fa80:	4630      	mov	r0, r6
 800fa82:	f7ff ff1e 	bl	800f8c2 <strncmp>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d13f      	bne.n	800fb0a <__gethex+0x106>
 800fa8a:	b944      	cbnz	r4, 800fa9e <__gethex+0x9a>
 800fa8c:	1c74      	adds	r4, r6, #1
 800fa8e:	4622      	mov	r2, r4
 800fa90:	4616      	mov	r6, r2
 800fa92:	3201      	adds	r2, #1
 800fa94:	7830      	ldrb	r0, [r6, #0]
 800fa96:	f7ff ff9f 	bl	800f9d8 <__hexdig_fun>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d1f8      	bne.n	800fa90 <__gethex+0x8c>
 800fa9e:	1ba4      	subs	r4, r4, r6
 800faa0:	00a7      	lsls	r7, r4, #2
 800faa2:	7833      	ldrb	r3, [r6, #0]
 800faa4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800faa8:	2b50      	cmp	r3, #80	@ 0x50
 800faaa:	d13e      	bne.n	800fb2a <__gethex+0x126>
 800faac:	7873      	ldrb	r3, [r6, #1]
 800faae:	2b2b      	cmp	r3, #43	@ 0x2b
 800fab0:	d033      	beq.n	800fb1a <__gethex+0x116>
 800fab2:	2b2d      	cmp	r3, #45	@ 0x2d
 800fab4:	d034      	beq.n	800fb20 <__gethex+0x11c>
 800fab6:	1c71      	adds	r1, r6, #1
 800fab8:	2400      	movs	r4, #0
 800faba:	7808      	ldrb	r0, [r1, #0]
 800fabc:	f7ff ff8c 	bl	800f9d8 <__hexdig_fun>
 800fac0:	1e43      	subs	r3, r0, #1
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b18      	cmp	r3, #24
 800fac6:	d830      	bhi.n	800fb2a <__gethex+0x126>
 800fac8:	f1a0 0210 	sub.w	r2, r0, #16
 800facc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fad0:	f7ff ff82 	bl	800f9d8 <__hexdig_fun>
 800fad4:	f100 3cff 	add.w	ip, r0, #4294967295
 800fad8:	fa5f fc8c 	uxtb.w	ip, ip
 800fadc:	f1bc 0f18 	cmp.w	ip, #24
 800fae0:	f04f 030a 	mov.w	r3, #10
 800fae4:	d91e      	bls.n	800fb24 <__gethex+0x120>
 800fae6:	b104      	cbz	r4, 800faea <__gethex+0xe6>
 800fae8:	4252      	negs	r2, r2
 800faea:	4417      	add	r7, r2
 800faec:	f8ca 1000 	str.w	r1, [sl]
 800faf0:	b1ed      	cbz	r5, 800fb2e <__gethex+0x12a>
 800faf2:	f1bb 0f00 	cmp.w	fp, #0
 800faf6:	bf0c      	ite	eq
 800faf8:	2506      	moveq	r5, #6
 800fafa:	2500      	movne	r5, #0
 800fafc:	4628      	mov	r0, r5
 800fafe:	b005      	add	sp, #20
 800fb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb04:	2500      	movs	r5, #0
 800fb06:	462c      	mov	r4, r5
 800fb08:	e7b0      	b.n	800fa6c <__gethex+0x68>
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	d1c7      	bne.n	800fa9e <__gethex+0x9a>
 800fb0e:	4627      	mov	r7, r4
 800fb10:	e7c7      	b.n	800faa2 <__gethex+0x9e>
 800fb12:	464e      	mov	r6, r9
 800fb14:	462f      	mov	r7, r5
 800fb16:	2501      	movs	r5, #1
 800fb18:	e7c3      	b.n	800faa2 <__gethex+0x9e>
 800fb1a:	2400      	movs	r4, #0
 800fb1c:	1cb1      	adds	r1, r6, #2
 800fb1e:	e7cc      	b.n	800faba <__gethex+0xb6>
 800fb20:	2401      	movs	r4, #1
 800fb22:	e7fb      	b.n	800fb1c <__gethex+0x118>
 800fb24:	fb03 0002 	mla	r0, r3, r2, r0
 800fb28:	e7ce      	b.n	800fac8 <__gethex+0xc4>
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	e7de      	b.n	800faec <__gethex+0xe8>
 800fb2e:	eba6 0309 	sub.w	r3, r6, r9
 800fb32:	3b01      	subs	r3, #1
 800fb34:	4629      	mov	r1, r5
 800fb36:	2b07      	cmp	r3, #7
 800fb38:	dc0a      	bgt.n	800fb50 <__gethex+0x14c>
 800fb3a:	9801      	ldr	r0, [sp, #4]
 800fb3c:	f7fd fdde 	bl	800d6fc <_Balloc>
 800fb40:	4604      	mov	r4, r0
 800fb42:	b940      	cbnz	r0, 800fb56 <__gethex+0x152>
 800fb44:	4b5c      	ldr	r3, [pc, #368]	@ (800fcb8 <__gethex+0x2b4>)
 800fb46:	4602      	mov	r2, r0
 800fb48:	21e4      	movs	r1, #228	@ 0xe4
 800fb4a:	485c      	ldr	r0, [pc, #368]	@ (800fcbc <__gethex+0x2b8>)
 800fb4c:	f7ff fed4 	bl	800f8f8 <__assert_func>
 800fb50:	3101      	adds	r1, #1
 800fb52:	105b      	asrs	r3, r3, #1
 800fb54:	e7ef      	b.n	800fb36 <__gethex+0x132>
 800fb56:	f100 0a14 	add.w	sl, r0, #20
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	4655      	mov	r5, sl
 800fb5e:	469b      	mov	fp, r3
 800fb60:	45b1      	cmp	r9, r6
 800fb62:	d337      	bcc.n	800fbd4 <__gethex+0x1d0>
 800fb64:	f845 bb04 	str.w	fp, [r5], #4
 800fb68:	eba5 050a 	sub.w	r5, r5, sl
 800fb6c:	10ad      	asrs	r5, r5, #2
 800fb6e:	6125      	str	r5, [r4, #16]
 800fb70:	4658      	mov	r0, fp
 800fb72:	f7fd feb5 	bl	800d8e0 <__hi0bits>
 800fb76:	016d      	lsls	r5, r5, #5
 800fb78:	f8d8 6000 	ldr.w	r6, [r8]
 800fb7c:	1a2d      	subs	r5, r5, r0
 800fb7e:	42b5      	cmp	r5, r6
 800fb80:	dd54      	ble.n	800fc2c <__gethex+0x228>
 800fb82:	1bad      	subs	r5, r5, r6
 800fb84:	4629      	mov	r1, r5
 800fb86:	4620      	mov	r0, r4
 800fb88:	f7fe fa49 	bl	800e01e <__any_on>
 800fb8c:	4681      	mov	r9, r0
 800fb8e:	b178      	cbz	r0, 800fbb0 <__gethex+0x1ac>
 800fb90:	1e6b      	subs	r3, r5, #1
 800fb92:	1159      	asrs	r1, r3, #5
 800fb94:	f003 021f 	and.w	r2, r3, #31
 800fb98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb9c:	f04f 0901 	mov.w	r9, #1
 800fba0:	fa09 f202 	lsl.w	r2, r9, r2
 800fba4:	420a      	tst	r2, r1
 800fba6:	d003      	beq.n	800fbb0 <__gethex+0x1ac>
 800fba8:	454b      	cmp	r3, r9
 800fbaa:	dc36      	bgt.n	800fc1a <__gethex+0x216>
 800fbac:	f04f 0902 	mov.w	r9, #2
 800fbb0:	4629      	mov	r1, r5
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f7ff febe 	bl	800f934 <rshift>
 800fbb8:	442f      	add	r7, r5
 800fbba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fbbe:	42bb      	cmp	r3, r7
 800fbc0:	da42      	bge.n	800fc48 <__gethex+0x244>
 800fbc2:	9801      	ldr	r0, [sp, #4]
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	f7fd fdd9 	bl	800d77c <_Bfree>
 800fbca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbcc:	2300      	movs	r3, #0
 800fbce:	6013      	str	r3, [r2, #0]
 800fbd0:	25a3      	movs	r5, #163	@ 0xa3
 800fbd2:	e793      	b.n	800fafc <__gethex+0xf8>
 800fbd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fbd8:	2a2e      	cmp	r2, #46	@ 0x2e
 800fbda:	d012      	beq.n	800fc02 <__gethex+0x1fe>
 800fbdc:	2b20      	cmp	r3, #32
 800fbde:	d104      	bne.n	800fbea <__gethex+0x1e6>
 800fbe0:	f845 bb04 	str.w	fp, [r5], #4
 800fbe4:	f04f 0b00 	mov.w	fp, #0
 800fbe8:	465b      	mov	r3, fp
 800fbea:	7830      	ldrb	r0, [r6, #0]
 800fbec:	9303      	str	r3, [sp, #12]
 800fbee:	f7ff fef3 	bl	800f9d8 <__hexdig_fun>
 800fbf2:	9b03      	ldr	r3, [sp, #12]
 800fbf4:	f000 000f 	and.w	r0, r0, #15
 800fbf8:	4098      	lsls	r0, r3
 800fbfa:	ea4b 0b00 	orr.w	fp, fp, r0
 800fbfe:	3304      	adds	r3, #4
 800fc00:	e7ae      	b.n	800fb60 <__gethex+0x15c>
 800fc02:	45b1      	cmp	r9, r6
 800fc04:	d8ea      	bhi.n	800fbdc <__gethex+0x1d8>
 800fc06:	492b      	ldr	r1, [pc, #172]	@ (800fcb4 <__gethex+0x2b0>)
 800fc08:	9303      	str	r3, [sp, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	f7ff fe58 	bl	800f8c2 <strncmp>
 800fc12:	9b03      	ldr	r3, [sp, #12]
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d1e1      	bne.n	800fbdc <__gethex+0x1d8>
 800fc18:	e7a2      	b.n	800fb60 <__gethex+0x15c>
 800fc1a:	1ea9      	subs	r1, r5, #2
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f7fe f9fe 	bl	800e01e <__any_on>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d0c2      	beq.n	800fbac <__gethex+0x1a8>
 800fc26:	f04f 0903 	mov.w	r9, #3
 800fc2a:	e7c1      	b.n	800fbb0 <__gethex+0x1ac>
 800fc2c:	da09      	bge.n	800fc42 <__gethex+0x23e>
 800fc2e:	1b75      	subs	r5, r6, r5
 800fc30:	4621      	mov	r1, r4
 800fc32:	9801      	ldr	r0, [sp, #4]
 800fc34:	462a      	mov	r2, r5
 800fc36:	f7fd ffb9 	bl	800dbac <__lshift>
 800fc3a:	1b7f      	subs	r7, r7, r5
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	f100 0a14 	add.w	sl, r0, #20
 800fc42:	f04f 0900 	mov.w	r9, #0
 800fc46:	e7b8      	b.n	800fbba <__gethex+0x1b6>
 800fc48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc4c:	42bd      	cmp	r5, r7
 800fc4e:	dd6f      	ble.n	800fd30 <__gethex+0x32c>
 800fc50:	1bed      	subs	r5, r5, r7
 800fc52:	42ae      	cmp	r6, r5
 800fc54:	dc34      	bgt.n	800fcc0 <__gethex+0x2bc>
 800fc56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	d022      	beq.n	800fca4 <__gethex+0x2a0>
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d024      	beq.n	800fcac <__gethex+0x2a8>
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d115      	bne.n	800fc92 <__gethex+0x28e>
 800fc66:	42ae      	cmp	r6, r5
 800fc68:	d113      	bne.n	800fc92 <__gethex+0x28e>
 800fc6a:	2e01      	cmp	r6, #1
 800fc6c:	d10b      	bne.n	800fc86 <__gethex+0x282>
 800fc6e:	9a02      	ldr	r2, [sp, #8]
 800fc70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc74:	6013      	str	r3, [r2, #0]
 800fc76:	2301      	movs	r3, #1
 800fc78:	6123      	str	r3, [r4, #16]
 800fc7a:	f8ca 3000 	str.w	r3, [sl]
 800fc7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc80:	2562      	movs	r5, #98	@ 0x62
 800fc82:	601c      	str	r4, [r3, #0]
 800fc84:	e73a      	b.n	800fafc <__gethex+0xf8>
 800fc86:	1e71      	subs	r1, r6, #1
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f7fe f9c8 	bl	800e01e <__any_on>
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d1ed      	bne.n	800fc6e <__gethex+0x26a>
 800fc92:	9801      	ldr	r0, [sp, #4]
 800fc94:	4621      	mov	r1, r4
 800fc96:	f7fd fd71 	bl	800d77c <_Bfree>
 800fc9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6013      	str	r3, [r2, #0]
 800fca0:	2550      	movs	r5, #80	@ 0x50
 800fca2:	e72b      	b.n	800fafc <__gethex+0xf8>
 800fca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1f3      	bne.n	800fc92 <__gethex+0x28e>
 800fcaa:	e7e0      	b.n	800fc6e <__gethex+0x26a>
 800fcac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1dd      	bne.n	800fc6e <__gethex+0x26a>
 800fcb2:	e7ee      	b.n	800fc92 <__gethex+0x28e>
 800fcb4:	080122b0 	.word	0x080122b0
 800fcb8:	08012147 	.word	0x08012147
 800fcbc:	08012479 	.word	0x08012479
 800fcc0:	1e6f      	subs	r7, r5, #1
 800fcc2:	f1b9 0f00 	cmp.w	r9, #0
 800fcc6:	d130      	bne.n	800fd2a <__gethex+0x326>
 800fcc8:	b127      	cbz	r7, 800fcd4 <__gethex+0x2d0>
 800fcca:	4639      	mov	r1, r7
 800fccc:	4620      	mov	r0, r4
 800fcce:	f7fe f9a6 	bl	800e01e <__any_on>
 800fcd2:	4681      	mov	r9, r0
 800fcd4:	117a      	asrs	r2, r7, #5
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fcdc:	f007 071f 	and.w	r7, r7, #31
 800fce0:	40bb      	lsls	r3, r7
 800fce2:	4213      	tst	r3, r2
 800fce4:	4629      	mov	r1, r5
 800fce6:	4620      	mov	r0, r4
 800fce8:	bf18      	it	ne
 800fcea:	f049 0902 	orrne.w	r9, r9, #2
 800fcee:	f7ff fe21 	bl	800f934 <rshift>
 800fcf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fcf6:	1b76      	subs	r6, r6, r5
 800fcf8:	2502      	movs	r5, #2
 800fcfa:	f1b9 0f00 	cmp.w	r9, #0
 800fcfe:	d047      	beq.n	800fd90 <__gethex+0x38c>
 800fd00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d015      	beq.n	800fd34 <__gethex+0x330>
 800fd08:	2b03      	cmp	r3, #3
 800fd0a:	d017      	beq.n	800fd3c <__gethex+0x338>
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d109      	bne.n	800fd24 <__gethex+0x320>
 800fd10:	f019 0f02 	tst.w	r9, #2
 800fd14:	d006      	beq.n	800fd24 <__gethex+0x320>
 800fd16:	f8da 3000 	ldr.w	r3, [sl]
 800fd1a:	ea49 0903 	orr.w	r9, r9, r3
 800fd1e:	f019 0f01 	tst.w	r9, #1
 800fd22:	d10e      	bne.n	800fd42 <__gethex+0x33e>
 800fd24:	f045 0510 	orr.w	r5, r5, #16
 800fd28:	e032      	b.n	800fd90 <__gethex+0x38c>
 800fd2a:	f04f 0901 	mov.w	r9, #1
 800fd2e:	e7d1      	b.n	800fcd4 <__gethex+0x2d0>
 800fd30:	2501      	movs	r5, #1
 800fd32:	e7e2      	b.n	800fcfa <__gethex+0x2f6>
 800fd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd36:	f1c3 0301 	rsb	r3, r3, #1
 800fd3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d0f0      	beq.n	800fd24 <__gethex+0x320>
 800fd42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd46:	f104 0314 	add.w	r3, r4, #20
 800fd4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd52:	f04f 0c00 	mov.w	ip, #0
 800fd56:	4618      	mov	r0, r3
 800fd58:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd60:	d01b      	beq.n	800fd9a <__gethex+0x396>
 800fd62:	3201      	adds	r2, #1
 800fd64:	6002      	str	r2, [r0, #0]
 800fd66:	2d02      	cmp	r5, #2
 800fd68:	f104 0314 	add.w	r3, r4, #20
 800fd6c:	d13c      	bne.n	800fde8 <__gethex+0x3e4>
 800fd6e:	f8d8 2000 	ldr.w	r2, [r8]
 800fd72:	3a01      	subs	r2, #1
 800fd74:	42b2      	cmp	r2, r6
 800fd76:	d109      	bne.n	800fd8c <__gethex+0x388>
 800fd78:	1171      	asrs	r1, r6, #5
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd80:	f006 061f 	and.w	r6, r6, #31
 800fd84:	fa02 f606 	lsl.w	r6, r2, r6
 800fd88:	421e      	tst	r6, r3
 800fd8a:	d13a      	bne.n	800fe02 <__gethex+0x3fe>
 800fd8c:	f045 0520 	orr.w	r5, r5, #32
 800fd90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd92:	601c      	str	r4, [r3, #0]
 800fd94:	9b02      	ldr	r3, [sp, #8]
 800fd96:	601f      	str	r7, [r3, #0]
 800fd98:	e6b0      	b.n	800fafc <__gethex+0xf8>
 800fd9a:	4299      	cmp	r1, r3
 800fd9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fda0:	d8d9      	bhi.n	800fd56 <__gethex+0x352>
 800fda2:	68a3      	ldr	r3, [r4, #8]
 800fda4:	459b      	cmp	fp, r3
 800fda6:	db17      	blt.n	800fdd8 <__gethex+0x3d4>
 800fda8:	6861      	ldr	r1, [r4, #4]
 800fdaa:	9801      	ldr	r0, [sp, #4]
 800fdac:	3101      	adds	r1, #1
 800fdae:	f7fd fca5 	bl	800d6fc <_Balloc>
 800fdb2:	4681      	mov	r9, r0
 800fdb4:	b918      	cbnz	r0, 800fdbe <__gethex+0x3ba>
 800fdb6:	4b1a      	ldr	r3, [pc, #104]	@ (800fe20 <__gethex+0x41c>)
 800fdb8:	4602      	mov	r2, r0
 800fdba:	2184      	movs	r1, #132	@ 0x84
 800fdbc:	e6c5      	b.n	800fb4a <__gethex+0x146>
 800fdbe:	6922      	ldr	r2, [r4, #16]
 800fdc0:	3202      	adds	r2, #2
 800fdc2:	f104 010c 	add.w	r1, r4, #12
 800fdc6:	0092      	lsls	r2, r2, #2
 800fdc8:	300c      	adds	r0, #12
 800fdca:	f7fc fde4 	bl	800c996 <memcpy>
 800fdce:	4621      	mov	r1, r4
 800fdd0:	9801      	ldr	r0, [sp, #4]
 800fdd2:	f7fd fcd3 	bl	800d77c <_Bfree>
 800fdd6:	464c      	mov	r4, r9
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	1c5a      	adds	r2, r3, #1
 800fddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fde0:	6122      	str	r2, [r4, #16]
 800fde2:	2201      	movs	r2, #1
 800fde4:	615a      	str	r2, [r3, #20]
 800fde6:	e7be      	b.n	800fd66 <__gethex+0x362>
 800fde8:	6922      	ldr	r2, [r4, #16]
 800fdea:	455a      	cmp	r2, fp
 800fdec:	dd0b      	ble.n	800fe06 <__gethex+0x402>
 800fdee:	2101      	movs	r1, #1
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f7ff fd9f 	bl	800f934 <rshift>
 800fdf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdfa:	3701      	adds	r7, #1
 800fdfc:	42bb      	cmp	r3, r7
 800fdfe:	f6ff aee0 	blt.w	800fbc2 <__gethex+0x1be>
 800fe02:	2501      	movs	r5, #1
 800fe04:	e7c2      	b.n	800fd8c <__gethex+0x388>
 800fe06:	f016 061f 	ands.w	r6, r6, #31
 800fe0a:	d0fa      	beq.n	800fe02 <__gethex+0x3fe>
 800fe0c:	4453      	add	r3, sl
 800fe0e:	f1c6 0620 	rsb	r6, r6, #32
 800fe12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe16:	f7fd fd63 	bl	800d8e0 <__hi0bits>
 800fe1a:	42b0      	cmp	r0, r6
 800fe1c:	dbe7      	blt.n	800fdee <__gethex+0x3ea>
 800fe1e:	e7f0      	b.n	800fe02 <__gethex+0x3fe>
 800fe20:	08012147 	.word	0x08012147

0800fe24 <L_shift>:
 800fe24:	f1c2 0208 	rsb	r2, r2, #8
 800fe28:	0092      	lsls	r2, r2, #2
 800fe2a:	b570      	push	{r4, r5, r6, lr}
 800fe2c:	f1c2 0620 	rsb	r6, r2, #32
 800fe30:	6843      	ldr	r3, [r0, #4]
 800fe32:	6804      	ldr	r4, [r0, #0]
 800fe34:	fa03 f506 	lsl.w	r5, r3, r6
 800fe38:	432c      	orrs	r4, r5
 800fe3a:	40d3      	lsrs	r3, r2
 800fe3c:	6004      	str	r4, [r0, #0]
 800fe3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe42:	4288      	cmp	r0, r1
 800fe44:	d3f4      	bcc.n	800fe30 <L_shift+0xc>
 800fe46:	bd70      	pop	{r4, r5, r6, pc}

0800fe48 <__match>:
 800fe48:	b530      	push	{r4, r5, lr}
 800fe4a:	6803      	ldr	r3, [r0, #0]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe52:	b914      	cbnz	r4, 800fe5a <__match+0x12>
 800fe54:	6003      	str	r3, [r0, #0]
 800fe56:	2001      	movs	r0, #1
 800fe58:	bd30      	pop	{r4, r5, pc}
 800fe5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fe62:	2d19      	cmp	r5, #25
 800fe64:	bf98      	it	ls
 800fe66:	3220      	addls	r2, #32
 800fe68:	42a2      	cmp	r2, r4
 800fe6a:	d0f0      	beq.n	800fe4e <__match+0x6>
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	e7f3      	b.n	800fe58 <__match+0x10>

0800fe70 <__hexnan>:
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	680b      	ldr	r3, [r1, #0]
 800fe76:	6801      	ldr	r1, [r0, #0]
 800fe78:	115e      	asrs	r6, r3, #5
 800fe7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe7e:	f013 031f 	ands.w	r3, r3, #31
 800fe82:	b087      	sub	sp, #28
 800fe84:	bf18      	it	ne
 800fe86:	3604      	addne	r6, #4
 800fe88:	2500      	movs	r5, #0
 800fe8a:	1f37      	subs	r7, r6, #4
 800fe8c:	4682      	mov	sl, r0
 800fe8e:	4690      	mov	r8, r2
 800fe90:	9301      	str	r3, [sp, #4]
 800fe92:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe96:	46b9      	mov	r9, r7
 800fe98:	463c      	mov	r4, r7
 800fe9a:	9502      	str	r5, [sp, #8]
 800fe9c:	46ab      	mov	fp, r5
 800fe9e:	784a      	ldrb	r2, [r1, #1]
 800fea0:	1c4b      	adds	r3, r1, #1
 800fea2:	9303      	str	r3, [sp, #12]
 800fea4:	b342      	cbz	r2, 800fef8 <__hexnan+0x88>
 800fea6:	4610      	mov	r0, r2
 800fea8:	9105      	str	r1, [sp, #20]
 800feaa:	9204      	str	r2, [sp, #16]
 800feac:	f7ff fd94 	bl	800f9d8 <__hexdig_fun>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d151      	bne.n	800ff58 <__hexnan+0xe8>
 800feb4:	9a04      	ldr	r2, [sp, #16]
 800feb6:	9905      	ldr	r1, [sp, #20]
 800feb8:	2a20      	cmp	r2, #32
 800feba:	d818      	bhi.n	800feee <__hexnan+0x7e>
 800febc:	9b02      	ldr	r3, [sp, #8]
 800febe:	459b      	cmp	fp, r3
 800fec0:	dd13      	ble.n	800feea <__hexnan+0x7a>
 800fec2:	454c      	cmp	r4, r9
 800fec4:	d206      	bcs.n	800fed4 <__hexnan+0x64>
 800fec6:	2d07      	cmp	r5, #7
 800fec8:	dc04      	bgt.n	800fed4 <__hexnan+0x64>
 800feca:	462a      	mov	r2, r5
 800fecc:	4649      	mov	r1, r9
 800fece:	4620      	mov	r0, r4
 800fed0:	f7ff ffa8 	bl	800fe24 <L_shift>
 800fed4:	4544      	cmp	r4, r8
 800fed6:	d952      	bls.n	800ff7e <__hexnan+0x10e>
 800fed8:	2300      	movs	r3, #0
 800feda:	f1a4 0904 	sub.w	r9, r4, #4
 800fede:	f844 3c04 	str.w	r3, [r4, #-4]
 800fee2:	f8cd b008 	str.w	fp, [sp, #8]
 800fee6:	464c      	mov	r4, r9
 800fee8:	461d      	mov	r5, r3
 800feea:	9903      	ldr	r1, [sp, #12]
 800feec:	e7d7      	b.n	800fe9e <__hexnan+0x2e>
 800feee:	2a29      	cmp	r2, #41	@ 0x29
 800fef0:	d157      	bne.n	800ffa2 <__hexnan+0x132>
 800fef2:	3102      	adds	r1, #2
 800fef4:	f8ca 1000 	str.w	r1, [sl]
 800fef8:	f1bb 0f00 	cmp.w	fp, #0
 800fefc:	d051      	beq.n	800ffa2 <__hexnan+0x132>
 800fefe:	454c      	cmp	r4, r9
 800ff00:	d206      	bcs.n	800ff10 <__hexnan+0xa0>
 800ff02:	2d07      	cmp	r5, #7
 800ff04:	dc04      	bgt.n	800ff10 <__hexnan+0xa0>
 800ff06:	462a      	mov	r2, r5
 800ff08:	4649      	mov	r1, r9
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f7ff ff8a 	bl	800fe24 <L_shift>
 800ff10:	4544      	cmp	r4, r8
 800ff12:	d936      	bls.n	800ff82 <__hexnan+0x112>
 800ff14:	f1a8 0204 	sub.w	r2, r8, #4
 800ff18:	4623      	mov	r3, r4
 800ff1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff22:	429f      	cmp	r7, r3
 800ff24:	d2f9      	bcs.n	800ff1a <__hexnan+0xaa>
 800ff26:	1b3b      	subs	r3, r7, r4
 800ff28:	f023 0303 	bic.w	r3, r3, #3
 800ff2c:	3304      	adds	r3, #4
 800ff2e:	3401      	adds	r4, #1
 800ff30:	3e03      	subs	r6, #3
 800ff32:	42b4      	cmp	r4, r6
 800ff34:	bf88      	it	hi
 800ff36:	2304      	movhi	r3, #4
 800ff38:	4443      	add	r3, r8
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f843 2b04 	str.w	r2, [r3], #4
 800ff40:	429f      	cmp	r7, r3
 800ff42:	d2fb      	bcs.n	800ff3c <__hexnan+0xcc>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	b91b      	cbnz	r3, 800ff50 <__hexnan+0xe0>
 800ff48:	4547      	cmp	r7, r8
 800ff4a:	d128      	bne.n	800ff9e <__hexnan+0x12e>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	2005      	movs	r0, #5
 800ff52:	b007      	add	sp, #28
 800ff54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff58:	3501      	adds	r5, #1
 800ff5a:	2d08      	cmp	r5, #8
 800ff5c:	f10b 0b01 	add.w	fp, fp, #1
 800ff60:	dd06      	ble.n	800ff70 <__hexnan+0x100>
 800ff62:	4544      	cmp	r4, r8
 800ff64:	d9c1      	bls.n	800feea <__hexnan+0x7a>
 800ff66:	2300      	movs	r3, #0
 800ff68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff6c:	2501      	movs	r5, #1
 800ff6e:	3c04      	subs	r4, #4
 800ff70:	6822      	ldr	r2, [r4, #0]
 800ff72:	f000 000f 	and.w	r0, r0, #15
 800ff76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ff7a:	6020      	str	r0, [r4, #0]
 800ff7c:	e7b5      	b.n	800feea <__hexnan+0x7a>
 800ff7e:	2508      	movs	r5, #8
 800ff80:	e7b3      	b.n	800feea <__hexnan+0x7a>
 800ff82:	9b01      	ldr	r3, [sp, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d0dd      	beq.n	800ff44 <__hexnan+0xd4>
 800ff88:	f1c3 0320 	rsb	r3, r3, #32
 800ff8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff90:	40da      	lsrs	r2, r3
 800ff92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ff96:	4013      	ands	r3, r2
 800ff98:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff9c:	e7d2      	b.n	800ff44 <__hexnan+0xd4>
 800ff9e:	3f04      	subs	r7, #4
 800ffa0:	e7d0      	b.n	800ff44 <__hexnan+0xd4>
 800ffa2:	2004      	movs	r0, #4
 800ffa4:	e7d5      	b.n	800ff52 <__hexnan+0xe2>

0800ffa6 <__ascii_mbtowc>:
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	b901      	cbnz	r1, 800ffac <__ascii_mbtowc+0x6>
 800ffaa:	a901      	add	r1, sp, #4
 800ffac:	b142      	cbz	r2, 800ffc0 <__ascii_mbtowc+0x1a>
 800ffae:	b14b      	cbz	r3, 800ffc4 <__ascii_mbtowc+0x1e>
 800ffb0:	7813      	ldrb	r3, [r2, #0]
 800ffb2:	600b      	str	r3, [r1, #0]
 800ffb4:	7812      	ldrb	r2, [r2, #0]
 800ffb6:	1e10      	subs	r0, r2, #0
 800ffb8:	bf18      	it	ne
 800ffba:	2001      	movne	r0, #1
 800ffbc:	b002      	add	sp, #8
 800ffbe:	4770      	bx	lr
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	e7fb      	b.n	800ffbc <__ascii_mbtowc+0x16>
 800ffc4:	f06f 0001 	mvn.w	r0, #1
 800ffc8:	e7f8      	b.n	800ffbc <__ascii_mbtowc+0x16>

0800ffca <_realloc_r>:
 800ffca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffce:	4680      	mov	r8, r0
 800ffd0:	4615      	mov	r5, r2
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	b921      	cbnz	r1, 800ffe0 <_realloc_r+0x16>
 800ffd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffda:	4611      	mov	r1, r2
 800ffdc:	f7fb bba8 	b.w	800b730 <_malloc_r>
 800ffe0:	b92a      	cbnz	r2, 800ffee <_realloc_r+0x24>
 800ffe2:	f7fd fb39 	bl	800d658 <_free_r>
 800ffe6:	2400      	movs	r4, #0
 800ffe8:	4620      	mov	r0, r4
 800ffea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffee:	f000 f8b2 	bl	8010156 <_malloc_usable_size_r>
 800fff2:	4285      	cmp	r5, r0
 800fff4:	4606      	mov	r6, r0
 800fff6:	d802      	bhi.n	800fffe <_realloc_r+0x34>
 800fff8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fffc:	d8f4      	bhi.n	800ffe8 <_realloc_r+0x1e>
 800fffe:	4629      	mov	r1, r5
 8010000:	4640      	mov	r0, r8
 8010002:	f7fb fb95 	bl	800b730 <_malloc_r>
 8010006:	4607      	mov	r7, r0
 8010008:	2800      	cmp	r0, #0
 801000a:	d0ec      	beq.n	800ffe6 <_realloc_r+0x1c>
 801000c:	42b5      	cmp	r5, r6
 801000e:	462a      	mov	r2, r5
 8010010:	4621      	mov	r1, r4
 8010012:	bf28      	it	cs
 8010014:	4632      	movcs	r2, r6
 8010016:	f7fc fcbe 	bl	800c996 <memcpy>
 801001a:	4621      	mov	r1, r4
 801001c:	4640      	mov	r0, r8
 801001e:	f7fd fb1b 	bl	800d658 <_free_r>
 8010022:	463c      	mov	r4, r7
 8010024:	e7e0      	b.n	800ffe8 <_realloc_r+0x1e>
	...

08010028 <_strtoul_l.constprop.0>:
 8010028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801002c:	4e34      	ldr	r6, [pc, #208]	@ (8010100 <_strtoul_l.constprop.0+0xd8>)
 801002e:	4686      	mov	lr, r0
 8010030:	460d      	mov	r5, r1
 8010032:	4628      	mov	r0, r5
 8010034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010038:	5d37      	ldrb	r7, [r6, r4]
 801003a:	f017 0708 	ands.w	r7, r7, #8
 801003e:	d1f8      	bne.n	8010032 <_strtoul_l.constprop.0+0xa>
 8010040:	2c2d      	cmp	r4, #45	@ 0x2d
 8010042:	d12f      	bne.n	80100a4 <_strtoul_l.constprop.0+0x7c>
 8010044:	782c      	ldrb	r4, [r5, #0]
 8010046:	2701      	movs	r7, #1
 8010048:	1c85      	adds	r5, r0, #2
 801004a:	f033 0010 	bics.w	r0, r3, #16
 801004e:	d109      	bne.n	8010064 <_strtoul_l.constprop.0+0x3c>
 8010050:	2c30      	cmp	r4, #48	@ 0x30
 8010052:	d12c      	bne.n	80100ae <_strtoul_l.constprop.0+0x86>
 8010054:	7828      	ldrb	r0, [r5, #0]
 8010056:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801005a:	2858      	cmp	r0, #88	@ 0x58
 801005c:	d127      	bne.n	80100ae <_strtoul_l.constprop.0+0x86>
 801005e:	786c      	ldrb	r4, [r5, #1]
 8010060:	2310      	movs	r3, #16
 8010062:	3502      	adds	r5, #2
 8010064:	f04f 38ff 	mov.w	r8, #4294967295
 8010068:	2600      	movs	r6, #0
 801006a:	fbb8 f8f3 	udiv	r8, r8, r3
 801006e:	fb03 f908 	mul.w	r9, r3, r8
 8010072:	ea6f 0909 	mvn.w	r9, r9
 8010076:	4630      	mov	r0, r6
 8010078:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801007c:	f1bc 0f09 	cmp.w	ip, #9
 8010080:	d81c      	bhi.n	80100bc <_strtoul_l.constprop.0+0x94>
 8010082:	4664      	mov	r4, ip
 8010084:	42a3      	cmp	r3, r4
 8010086:	dd2a      	ble.n	80100de <_strtoul_l.constprop.0+0xb6>
 8010088:	f1b6 3fff 	cmp.w	r6, #4294967295
 801008c:	d007      	beq.n	801009e <_strtoul_l.constprop.0+0x76>
 801008e:	4580      	cmp	r8, r0
 8010090:	d322      	bcc.n	80100d8 <_strtoul_l.constprop.0+0xb0>
 8010092:	d101      	bne.n	8010098 <_strtoul_l.constprop.0+0x70>
 8010094:	45a1      	cmp	r9, r4
 8010096:	db1f      	blt.n	80100d8 <_strtoul_l.constprop.0+0xb0>
 8010098:	fb00 4003 	mla	r0, r0, r3, r4
 801009c:	2601      	movs	r6, #1
 801009e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100a2:	e7e9      	b.n	8010078 <_strtoul_l.constprop.0+0x50>
 80100a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80100a6:	bf04      	itt	eq
 80100a8:	782c      	ldrbeq	r4, [r5, #0]
 80100aa:	1c85      	addeq	r5, r0, #2
 80100ac:	e7cd      	b.n	801004a <_strtoul_l.constprop.0+0x22>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1d8      	bne.n	8010064 <_strtoul_l.constprop.0+0x3c>
 80100b2:	2c30      	cmp	r4, #48	@ 0x30
 80100b4:	bf0c      	ite	eq
 80100b6:	2308      	moveq	r3, #8
 80100b8:	230a      	movne	r3, #10
 80100ba:	e7d3      	b.n	8010064 <_strtoul_l.constprop.0+0x3c>
 80100bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80100c0:	f1bc 0f19 	cmp.w	ip, #25
 80100c4:	d801      	bhi.n	80100ca <_strtoul_l.constprop.0+0xa2>
 80100c6:	3c37      	subs	r4, #55	@ 0x37
 80100c8:	e7dc      	b.n	8010084 <_strtoul_l.constprop.0+0x5c>
 80100ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80100ce:	f1bc 0f19 	cmp.w	ip, #25
 80100d2:	d804      	bhi.n	80100de <_strtoul_l.constprop.0+0xb6>
 80100d4:	3c57      	subs	r4, #87	@ 0x57
 80100d6:	e7d5      	b.n	8010084 <_strtoul_l.constprop.0+0x5c>
 80100d8:	f04f 36ff 	mov.w	r6, #4294967295
 80100dc:	e7df      	b.n	801009e <_strtoul_l.constprop.0+0x76>
 80100de:	1c73      	adds	r3, r6, #1
 80100e0:	d106      	bne.n	80100f0 <_strtoul_l.constprop.0+0xc8>
 80100e2:	2322      	movs	r3, #34	@ 0x22
 80100e4:	f8ce 3000 	str.w	r3, [lr]
 80100e8:	4630      	mov	r0, r6
 80100ea:	b932      	cbnz	r2, 80100fa <_strtoul_l.constprop.0+0xd2>
 80100ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100f0:	b107      	cbz	r7, 80100f4 <_strtoul_l.constprop.0+0xcc>
 80100f2:	4240      	negs	r0, r0
 80100f4:	2a00      	cmp	r2, #0
 80100f6:	d0f9      	beq.n	80100ec <_strtoul_l.constprop.0+0xc4>
 80100f8:	b106      	cbz	r6, 80100fc <_strtoul_l.constprop.0+0xd4>
 80100fa:	1e69      	subs	r1, r5, #1
 80100fc:	6011      	str	r1, [r2, #0]
 80100fe:	e7f5      	b.n	80100ec <_strtoul_l.constprop.0+0xc4>
 8010100:	08012309 	.word	0x08012309

08010104 <_strtoul_r>:
 8010104:	f7ff bf90 	b.w	8010028 <_strtoul_l.constprop.0>

08010108 <__ascii_wctomb>:
 8010108:	4603      	mov	r3, r0
 801010a:	4608      	mov	r0, r1
 801010c:	b141      	cbz	r1, 8010120 <__ascii_wctomb+0x18>
 801010e:	2aff      	cmp	r2, #255	@ 0xff
 8010110:	d904      	bls.n	801011c <__ascii_wctomb+0x14>
 8010112:	228a      	movs	r2, #138	@ 0x8a
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	f04f 30ff 	mov.w	r0, #4294967295
 801011a:	4770      	bx	lr
 801011c:	700a      	strb	r2, [r1, #0]
 801011e:	2001      	movs	r0, #1
 8010120:	4770      	bx	lr
	...

08010124 <fiprintf>:
 8010124:	b40e      	push	{r1, r2, r3}
 8010126:	b503      	push	{r0, r1, lr}
 8010128:	4601      	mov	r1, r0
 801012a:	ab03      	add	r3, sp, #12
 801012c:	4805      	ldr	r0, [pc, #20]	@ (8010144 <fiprintf+0x20>)
 801012e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010132:	6800      	ldr	r0, [r0, #0]
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	f000 f83f 	bl	80101b8 <_vfiprintf_r>
 801013a:	b002      	add	sp, #8
 801013c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010140:	b003      	add	sp, #12
 8010142:	4770      	bx	lr
 8010144:	20000044 	.word	0x20000044

08010148 <abort>:
 8010148:	b508      	push	{r3, lr}
 801014a:	2006      	movs	r0, #6
 801014c:	f000 fa08 	bl	8010560 <raise>
 8010150:	2001      	movs	r0, #1
 8010152:	f7f5 feb5 	bl	8005ec0 <_exit>

08010156 <_malloc_usable_size_r>:
 8010156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801015a:	1f18      	subs	r0, r3, #4
 801015c:	2b00      	cmp	r3, #0
 801015e:	bfbc      	itt	lt
 8010160:	580b      	ldrlt	r3, [r1, r0]
 8010162:	18c0      	addlt	r0, r0, r3
 8010164:	4770      	bx	lr

08010166 <__sfputc_r>:
 8010166:	6893      	ldr	r3, [r2, #8]
 8010168:	3b01      	subs	r3, #1
 801016a:	2b00      	cmp	r3, #0
 801016c:	b410      	push	{r4}
 801016e:	6093      	str	r3, [r2, #8]
 8010170:	da08      	bge.n	8010184 <__sfputc_r+0x1e>
 8010172:	6994      	ldr	r4, [r2, #24]
 8010174:	42a3      	cmp	r3, r4
 8010176:	db01      	blt.n	801017c <__sfputc_r+0x16>
 8010178:	290a      	cmp	r1, #10
 801017a:	d103      	bne.n	8010184 <__sfputc_r+0x1e>
 801017c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010180:	f000 b932 	b.w	80103e8 <__swbuf_r>
 8010184:	6813      	ldr	r3, [r2, #0]
 8010186:	1c58      	adds	r0, r3, #1
 8010188:	6010      	str	r0, [r2, #0]
 801018a:	7019      	strb	r1, [r3, #0]
 801018c:	4608      	mov	r0, r1
 801018e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010192:	4770      	bx	lr

08010194 <__sfputs_r>:
 8010194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010196:	4606      	mov	r6, r0
 8010198:	460f      	mov	r7, r1
 801019a:	4614      	mov	r4, r2
 801019c:	18d5      	adds	r5, r2, r3
 801019e:	42ac      	cmp	r4, r5
 80101a0:	d101      	bne.n	80101a6 <__sfputs_r+0x12>
 80101a2:	2000      	movs	r0, #0
 80101a4:	e007      	b.n	80101b6 <__sfputs_r+0x22>
 80101a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101aa:	463a      	mov	r2, r7
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7ff ffda 	bl	8010166 <__sfputc_r>
 80101b2:	1c43      	adds	r3, r0, #1
 80101b4:	d1f3      	bne.n	801019e <__sfputs_r+0xa>
 80101b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101b8 <_vfiprintf_r>:
 80101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	460d      	mov	r5, r1
 80101be:	b09d      	sub	sp, #116	@ 0x74
 80101c0:	4614      	mov	r4, r2
 80101c2:	4698      	mov	r8, r3
 80101c4:	4606      	mov	r6, r0
 80101c6:	b118      	cbz	r0, 80101d0 <_vfiprintf_r+0x18>
 80101c8:	6a03      	ldr	r3, [r0, #32]
 80101ca:	b90b      	cbnz	r3, 80101d0 <_vfiprintf_r+0x18>
 80101cc:	f7fc fa34 	bl	800c638 <__sinit>
 80101d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101d2:	07d9      	lsls	r1, r3, #31
 80101d4:	d405      	bmi.n	80101e2 <_vfiprintf_r+0x2a>
 80101d6:	89ab      	ldrh	r3, [r5, #12]
 80101d8:	059a      	lsls	r2, r3, #22
 80101da:	d402      	bmi.n	80101e2 <_vfiprintf_r+0x2a>
 80101dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101de:	f7fc fbd8 	bl	800c992 <__retarget_lock_acquire_recursive>
 80101e2:	89ab      	ldrh	r3, [r5, #12]
 80101e4:	071b      	lsls	r3, r3, #28
 80101e6:	d501      	bpl.n	80101ec <_vfiprintf_r+0x34>
 80101e8:	692b      	ldr	r3, [r5, #16]
 80101ea:	b99b      	cbnz	r3, 8010214 <_vfiprintf_r+0x5c>
 80101ec:	4629      	mov	r1, r5
 80101ee:	4630      	mov	r0, r6
 80101f0:	f000 f938 	bl	8010464 <__swsetup_r>
 80101f4:	b170      	cbz	r0, 8010214 <_vfiprintf_r+0x5c>
 80101f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101f8:	07dc      	lsls	r4, r3, #31
 80101fa:	d504      	bpl.n	8010206 <_vfiprintf_r+0x4e>
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010200:	b01d      	add	sp, #116	@ 0x74
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	0598      	lsls	r0, r3, #22
 801020a:	d4f7      	bmi.n	80101fc <_vfiprintf_r+0x44>
 801020c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801020e:	f7fc fbc1 	bl	800c994 <__retarget_lock_release_recursive>
 8010212:	e7f3      	b.n	80101fc <_vfiprintf_r+0x44>
 8010214:	2300      	movs	r3, #0
 8010216:	9309      	str	r3, [sp, #36]	@ 0x24
 8010218:	2320      	movs	r3, #32
 801021a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801021e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010222:	2330      	movs	r3, #48	@ 0x30
 8010224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103d4 <_vfiprintf_r+0x21c>
 8010228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801022c:	f04f 0901 	mov.w	r9, #1
 8010230:	4623      	mov	r3, r4
 8010232:	469a      	mov	sl, r3
 8010234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010238:	b10a      	cbz	r2, 801023e <_vfiprintf_r+0x86>
 801023a:	2a25      	cmp	r2, #37	@ 0x25
 801023c:	d1f9      	bne.n	8010232 <_vfiprintf_r+0x7a>
 801023e:	ebba 0b04 	subs.w	fp, sl, r4
 8010242:	d00b      	beq.n	801025c <_vfiprintf_r+0xa4>
 8010244:	465b      	mov	r3, fp
 8010246:	4622      	mov	r2, r4
 8010248:	4629      	mov	r1, r5
 801024a:	4630      	mov	r0, r6
 801024c:	f7ff ffa2 	bl	8010194 <__sfputs_r>
 8010250:	3001      	adds	r0, #1
 8010252:	f000 80a7 	beq.w	80103a4 <_vfiprintf_r+0x1ec>
 8010256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010258:	445a      	add	r2, fp
 801025a:	9209      	str	r2, [sp, #36]	@ 0x24
 801025c:	f89a 3000 	ldrb.w	r3, [sl]
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 809f 	beq.w	80103a4 <_vfiprintf_r+0x1ec>
 8010266:	2300      	movs	r3, #0
 8010268:	f04f 32ff 	mov.w	r2, #4294967295
 801026c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010270:	f10a 0a01 	add.w	sl, sl, #1
 8010274:	9304      	str	r3, [sp, #16]
 8010276:	9307      	str	r3, [sp, #28]
 8010278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801027c:	931a      	str	r3, [sp, #104]	@ 0x68
 801027e:	4654      	mov	r4, sl
 8010280:	2205      	movs	r2, #5
 8010282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010286:	4853      	ldr	r0, [pc, #332]	@ (80103d4 <_vfiprintf_r+0x21c>)
 8010288:	f7ef ffc2 	bl	8000210 <memchr>
 801028c:	9a04      	ldr	r2, [sp, #16]
 801028e:	b9d8      	cbnz	r0, 80102c8 <_vfiprintf_r+0x110>
 8010290:	06d1      	lsls	r1, r2, #27
 8010292:	bf44      	itt	mi
 8010294:	2320      	movmi	r3, #32
 8010296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801029a:	0713      	lsls	r3, r2, #28
 801029c:	bf44      	itt	mi
 801029e:	232b      	movmi	r3, #43	@ 0x2b
 80102a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102a4:	f89a 3000 	ldrb.w	r3, [sl]
 80102a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80102aa:	d015      	beq.n	80102d8 <_vfiprintf_r+0x120>
 80102ac:	9a07      	ldr	r2, [sp, #28]
 80102ae:	4654      	mov	r4, sl
 80102b0:	2000      	movs	r0, #0
 80102b2:	f04f 0c0a 	mov.w	ip, #10
 80102b6:	4621      	mov	r1, r4
 80102b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102bc:	3b30      	subs	r3, #48	@ 0x30
 80102be:	2b09      	cmp	r3, #9
 80102c0:	d94b      	bls.n	801035a <_vfiprintf_r+0x1a2>
 80102c2:	b1b0      	cbz	r0, 80102f2 <_vfiprintf_r+0x13a>
 80102c4:	9207      	str	r2, [sp, #28]
 80102c6:	e014      	b.n	80102f2 <_vfiprintf_r+0x13a>
 80102c8:	eba0 0308 	sub.w	r3, r0, r8
 80102cc:	fa09 f303 	lsl.w	r3, r9, r3
 80102d0:	4313      	orrs	r3, r2
 80102d2:	9304      	str	r3, [sp, #16]
 80102d4:	46a2      	mov	sl, r4
 80102d6:	e7d2      	b.n	801027e <_vfiprintf_r+0xc6>
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	1d19      	adds	r1, r3, #4
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	9103      	str	r1, [sp, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	bfbb      	ittet	lt
 80102e4:	425b      	neglt	r3, r3
 80102e6:	f042 0202 	orrlt.w	r2, r2, #2
 80102ea:	9307      	strge	r3, [sp, #28]
 80102ec:	9307      	strlt	r3, [sp, #28]
 80102ee:	bfb8      	it	lt
 80102f0:	9204      	strlt	r2, [sp, #16]
 80102f2:	7823      	ldrb	r3, [r4, #0]
 80102f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80102f6:	d10a      	bne.n	801030e <_vfiprintf_r+0x156>
 80102f8:	7863      	ldrb	r3, [r4, #1]
 80102fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80102fc:	d132      	bne.n	8010364 <_vfiprintf_r+0x1ac>
 80102fe:	9b03      	ldr	r3, [sp, #12]
 8010300:	1d1a      	adds	r2, r3, #4
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	9203      	str	r2, [sp, #12]
 8010306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801030a:	3402      	adds	r4, #2
 801030c:	9305      	str	r3, [sp, #20]
 801030e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103e4 <_vfiprintf_r+0x22c>
 8010312:	7821      	ldrb	r1, [r4, #0]
 8010314:	2203      	movs	r2, #3
 8010316:	4650      	mov	r0, sl
 8010318:	f7ef ff7a 	bl	8000210 <memchr>
 801031c:	b138      	cbz	r0, 801032e <_vfiprintf_r+0x176>
 801031e:	9b04      	ldr	r3, [sp, #16]
 8010320:	eba0 000a 	sub.w	r0, r0, sl
 8010324:	2240      	movs	r2, #64	@ 0x40
 8010326:	4082      	lsls	r2, r0
 8010328:	4313      	orrs	r3, r2
 801032a:	3401      	adds	r4, #1
 801032c:	9304      	str	r3, [sp, #16]
 801032e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010332:	4829      	ldr	r0, [pc, #164]	@ (80103d8 <_vfiprintf_r+0x220>)
 8010334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010338:	2206      	movs	r2, #6
 801033a:	f7ef ff69 	bl	8000210 <memchr>
 801033e:	2800      	cmp	r0, #0
 8010340:	d03f      	beq.n	80103c2 <_vfiprintf_r+0x20a>
 8010342:	4b26      	ldr	r3, [pc, #152]	@ (80103dc <_vfiprintf_r+0x224>)
 8010344:	bb1b      	cbnz	r3, 801038e <_vfiprintf_r+0x1d6>
 8010346:	9b03      	ldr	r3, [sp, #12]
 8010348:	3307      	adds	r3, #7
 801034a:	f023 0307 	bic.w	r3, r3, #7
 801034e:	3308      	adds	r3, #8
 8010350:	9303      	str	r3, [sp, #12]
 8010352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010354:	443b      	add	r3, r7
 8010356:	9309      	str	r3, [sp, #36]	@ 0x24
 8010358:	e76a      	b.n	8010230 <_vfiprintf_r+0x78>
 801035a:	fb0c 3202 	mla	r2, ip, r2, r3
 801035e:	460c      	mov	r4, r1
 8010360:	2001      	movs	r0, #1
 8010362:	e7a8      	b.n	80102b6 <_vfiprintf_r+0xfe>
 8010364:	2300      	movs	r3, #0
 8010366:	3401      	adds	r4, #1
 8010368:	9305      	str	r3, [sp, #20]
 801036a:	4619      	mov	r1, r3
 801036c:	f04f 0c0a 	mov.w	ip, #10
 8010370:	4620      	mov	r0, r4
 8010372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010376:	3a30      	subs	r2, #48	@ 0x30
 8010378:	2a09      	cmp	r2, #9
 801037a:	d903      	bls.n	8010384 <_vfiprintf_r+0x1cc>
 801037c:	2b00      	cmp	r3, #0
 801037e:	d0c6      	beq.n	801030e <_vfiprintf_r+0x156>
 8010380:	9105      	str	r1, [sp, #20]
 8010382:	e7c4      	b.n	801030e <_vfiprintf_r+0x156>
 8010384:	fb0c 2101 	mla	r1, ip, r1, r2
 8010388:	4604      	mov	r4, r0
 801038a:	2301      	movs	r3, #1
 801038c:	e7f0      	b.n	8010370 <_vfiprintf_r+0x1b8>
 801038e:	ab03      	add	r3, sp, #12
 8010390:	9300      	str	r3, [sp, #0]
 8010392:	462a      	mov	r2, r5
 8010394:	4b12      	ldr	r3, [pc, #72]	@ (80103e0 <_vfiprintf_r+0x228>)
 8010396:	a904      	add	r1, sp, #16
 8010398:	4630      	mov	r0, r6
 801039a:	f7fb faf5 	bl	800b988 <_printf_float>
 801039e:	4607      	mov	r7, r0
 80103a0:	1c78      	adds	r0, r7, #1
 80103a2:	d1d6      	bne.n	8010352 <_vfiprintf_r+0x19a>
 80103a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103a6:	07d9      	lsls	r1, r3, #31
 80103a8:	d405      	bmi.n	80103b6 <_vfiprintf_r+0x1fe>
 80103aa:	89ab      	ldrh	r3, [r5, #12]
 80103ac:	059a      	lsls	r2, r3, #22
 80103ae:	d402      	bmi.n	80103b6 <_vfiprintf_r+0x1fe>
 80103b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103b2:	f7fc faef 	bl	800c994 <__retarget_lock_release_recursive>
 80103b6:	89ab      	ldrh	r3, [r5, #12]
 80103b8:	065b      	lsls	r3, r3, #25
 80103ba:	f53f af1f 	bmi.w	80101fc <_vfiprintf_r+0x44>
 80103be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103c0:	e71e      	b.n	8010200 <_vfiprintf_r+0x48>
 80103c2:	ab03      	add	r3, sp, #12
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	462a      	mov	r2, r5
 80103c8:	4b05      	ldr	r3, [pc, #20]	@ (80103e0 <_vfiprintf_r+0x228>)
 80103ca:	a904      	add	r1, sp, #16
 80103cc:	4630      	mov	r0, r6
 80103ce:	f7fb fd73 	bl	800beb8 <_printf_i>
 80103d2:	e7e4      	b.n	801039e <_vfiprintf_r+0x1e6>
 80103d4:	08012409 	.word	0x08012409
 80103d8:	08012413 	.word	0x08012413
 80103dc:	0800b989 	.word	0x0800b989
 80103e0:	08010195 	.word	0x08010195
 80103e4:	0801240f 	.word	0x0801240f

080103e8 <__swbuf_r>:
 80103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ea:	460e      	mov	r6, r1
 80103ec:	4614      	mov	r4, r2
 80103ee:	4605      	mov	r5, r0
 80103f0:	b118      	cbz	r0, 80103fa <__swbuf_r+0x12>
 80103f2:	6a03      	ldr	r3, [r0, #32]
 80103f4:	b90b      	cbnz	r3, 80103fa <__swbuf_r+0x12>
 80103f6:	f7fc f91f 	bl	800c638 <__sinit>
 80103fa:	69a3      	ldr	r3, [r4, #24]
 80103fc:	60a3      	str	r3, [r4, #8]
 80103fe:	89a3      	ldrh	r3, [r4, #12]
 8010400:	071a      	lsls	r2, r3, #28
 8010402:	d501      	bpl.n	8010408 <__swbuf_r+0x20>
 8010404:	6923      	ldr	r3, [r4, #16]
 8010406:	b943      	cbnz	r3, 801041a <__swbuf_r+0x32>
 8010408:	4621      	mov	r1, r4
 801040a:	4628      	mov	r0, r5
 801040c:	f000 f82a 	bl	8010464 <__swsetup_r>
 8010410:	b118      	cbz	r0, 801041a <__swbuf_r+0x32>
 8010412:	f04f 37ff 	mov.w	r7, #4294967295
 8010416:	4638      	mov	r0, r7
 8010418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	6922      	ldr	r2, [r4, #16]
 801041e:	1a98      	subs	r0, r3, r2
 8010420:	6963      	ldr	r3, [r4, #20]
 8010422:	b2f6      	uxtb	r6, r6
 8010424:	4283      	cmp	r3, r0
 8010426:	4637      	mov	r7, r6
 8010428:	dc05      	bgt.n	8010436 <__swbuf_r+0x4e>
 801042a:	4621      	mov	r1, r4
 801042c:	4628      	mov	r0, r5
 801042e:	f7ff f993 	bl	800f758 <_fflush_r>
 8010432:	2800      	cmp	r0, #0
 8010434:	d1ed      	bne.n	8010412 <__swbuf_r+0x2a>
 8010436:	68a3      	ldr	r3, [r4, #8]
 8010438:	3b01      	subs	r3, #1
 801043a:	60a3      	str	r3, [r4, #8]
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	1c5a      	adds	r2, r3, #1
 8010440:	6022      	str	r2, [r4, #0]
 8010442:	701e      	strb	r6, [r3, #0]
 8010444:	6962      	ldr	r2, [r4, #20]
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	429a      	cmp	r2, r3
 801044a:	d004      	beq.n	8010456 <__swbuf_r+0x6e>
 801044c:	89a3      	ldrh	r3, [r4, #12]
 801044e:	07db      	lsls	r3, r3, #31
 8010450:	d5e1      	bpl.n	8010416 <__swbuf_r+0x2e>
 8010452:	2e0a      	cmp	r6, #10
 8010454:	d1df      	bne.n	8010416 <__swbuf_r+0x2e>
 8010456:	4621      	mov	r1, r4
 8010458:	4628      	mov	r0, r5
 801045a:	f7ff f97d 	bl	800f758 <_fflush_r>
 801045e:	2800      	cmp	r0, #0
 8010460:	d0d9      	beq.n	8010416 <__swbuf_r+0x2e>
 8010462:	e7d6      	b.n	8010412 <__swbuf_r+0x2a>

08010464 <__swsetup_r>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	4b29      	ldr	r3, [pc, #164]	@ (801050c <__swsetup_r+0xa8>)
 8010468:	4605      	mov	r5, r0
 801046a:	6818      	ldr	r0, [r3, #0]
 801046c:	460c      	mov	r4, r1
 801046e:	b118      	cbz	r0, 8010478 <__swsetup_r+0x14>
 8010470:	6a03      	ldr	r3, [r0, #32]
 8010472:	b90b      	cbnz	r3, 8010478 <__swsetup_r+0x14>
 8010474:	f7fc f8e0 	bl	800c638 <__sinit>
 8010478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801047c:	0719      	lsls	r1, r3, #28
 801047e:	d422      	bmi.n	80104c6 <__swsetup_r+0x62>
 8010480:	06da      	lsls	r2, r3, #27
 8010482:	d407      	bmi.n	8010494 <__swsetup_r+0x30>
 8010484:	2209      	movs	r2, #9
 8010486:	602a      	str	r2, [r5, #0]
 8010488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801048c:	81a3      	strh	r3, [r4, #12]
 801048e:	f04f 30ff 	mov.w	r0, #4294967295
 8010492:	e033      	b.n	80104fc <__swsetup_r+0x98>
 8010494:	0758      	lsls	r0, r3, #29
 8010496:	d512      	bpl.n	80104be <__swsetup_r+0x5a>
 8010498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801049a:	b141      	cbz	r1, 80104ae <__swsetup_r+0x4a>
 801049c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104a0:	4299      	cmp	r1, r3
 80104a2:	d002      	beq.n	80104aa <__swsetup_r+0x46>
 80104a4:	4628      	mov	r0, r5
 80104a6:	f7fd f8d7 	bl	800d658 <_free_r>
 80104aa:	2300      	movs	r3, #0
 80104ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80104ae:	89a3      	ldrh	r3, [r4, #12]
 80104b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80104b4:	81a3      	strh	r3, [r4, #12]
 80104b6:	2300      	movs	r3, #0
 80104b8:	6063      	str	r3, [r4, #4]
 80104ba:	6923      	ldr	r3, [r4, #16]
 80104bc:	6023      	str	r3, [r4, #0]
 80104be:	89a3      	ldrh	r3, [r4, #12]
 80104c0:	f043 0308 	orr.w	r3, r3, #8
 80104c4:	81a3      	strh	r3, [r4, #12]
 80104c6:	6923      	ldr	r3, [r4, #16]
 80104c8:	b94b      	cbnz	r3, 80104de <__swsetup_r+0x7a>
 80104ca:	89a3      	ldrh	r3, [r4, #12]
 80104cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80104d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104d4:	d003      	beq.n	80104de <__swsetup_r+0x7a>
 80104d6:	4621      	mov	r1, r4
 80104d8:	4628      	mov	r0, r5
 80104da:	f000 f883 	bl	80105e4 <__smakebuf_r>
 80104de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e2:	f013 0201 	ands.w	r2, r3, #1
 80104e6:	d00a      	beq.n	80104fe <__swsetup_r+0x9a>
 80104e8:	2200      	movs	r2, #0
 80104ea:	60a2      	str	r2, [r4, #8]
 80104ec:	6962      	ldr	r2, [r4, #20]
 80104ee:	4252      	negs	r2, r2
 80104f0:	61a2      	str	r2, [r4, #24]
 80104f2:	6922      	ldr	r2, [r4, #16]
 80104f4:	b942      	cbnz	r2, 8010508 <__swsetup_r+0xa4>
 80104f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80104fa:	d1c5      	bne.n	8010488 <__swsetup_r+0x24>
 80104fc:	bd38      	pop	{r3, r4, r5, pc}
 80104fe:	0799      	lsls	r1, r3, #30
 8010500:	bf58      	it	pl
 8010502:	6962      	ldrpl	r2, [r4, #20]
 8010504:	60a2      	str	r2, [r4, #8]
 8010506:	e7f4      	b.n	80104f2 <__swsetup_r+0x8e>
 8010508:	2000      	movs	r0, #0
 801050a:	e7f7      	b.n	80104fc <__swsetup_r+0x98>
 801050c:	20000044 	.word	0x20000044

08010510 <_raise_r>:
 8010510:	291f      	cmp	r1, #31
 8010512:	b538      	push	{r3, r4, r5, lr}
 8010514:	4605      	mov	r5, r0
 8010516:	460c      	mov	r4, r1
 8010518:	d904      	bls.n	8010524 <_raise_r+0x14>
 801051a:	2316      	movs	r3, #22
 801051c:	6003      	str	r3, [r0, #0]
 801051e:	f04f 30ff 	mov.w	r0, #4294967295
 8010522:	bd38      	pop	{r3, r4, r5, pc}
 8010524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010526:	b112      	cbz	r2, 801052e <_raise_r+0x1e>
 8010528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801052c:	b94b      	cbnz	r3, 8010542 <_raise_r+0x32>
 801052e:	4628      	mov	r0, r5
 8010530:	f000 f830 	bl	8010594 <_getpid_r>
 8010534:	4622      	mov	r2, r4
 8010536:	4601      	mov	r1, r0
 8010538:	4628      	mov	r0, r5
 801053a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801053e:	f000 b817 	b.w	8010570 <_kill_r>
 8010542:	2b01      	cmp	r3, #1
 8010544:	d00a      	beq.n	801055c <_raise_r+0x4c>
 8010546:	1c59      	adds	r1, r3, #1
 8010548:	d103      	bne.n	8010552 <_raise_r+0x42>
 801054a:	2316      	movs	r3, #22
 801054c:	6003      	str	r3, [r0, #0]
 801054e:	2001      	movs	r0, #1
 8010550:	e7e7      	b.n	8010522 <_raise_r+0x12>
 8010552:	2100      	movs	r1, #0
 8010554:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010558:	4620      	mov	r0, r4
 801055a:	4798      	blx	r3
 801055c:	2000      	movs	r0, #0
 801055e:	e7e0      	b.n	8010522 <_raise_r+0x12>

08010560 <raise>:
 8010560:	4b02      	ldr	r3, [pc, #8]	@ (801056c <raise+0xc>)
 8010562:	4601      	mov	r1, r0
 8010564:	6818      	ldr	r0, [r3, #0]
 8010566:	f7ff bfd3 	b.w	8010510 <_raise_r>
 801056a:	bf00      	nop
 801056c:	20000044 	.word	0x20000044

08010570 <_kill_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4d07      	ldr	r5, [pc, #28]	@ (8010590 <_kill_r+0x20>)
 8010574:	2300      	movs	r3, #0
 8010576:	4604      	mov	r4, r0
 8010578:	4608      	mov	r0, r1
 801057a:	4611      	mov	r1, r2
 801057c:	602b      	str	r3, [r5, #0]
 801057e:	f7f5 fc8f 	bl	8005ea0 <_kill>
 8010582:	1c43      	adds	r3, r0, #1
 8010584:	d102      	bne.n	801058c <_kill_r+0x1c>
 8010586:	682b      	ldr	r3, [r5, #0]
 8010588:	b103      	cbz	r3, 801058c <_kill_r+0x1c>
 801058a:	6023      	str	r3, [r4, #0]
 801058c:	bd38      	pop	{r3, r4, r5, pc}
 801058e:	bf00      	nop
 8010590:	20001870 	.word	0x20001870

08010594 <_getpid_r>:
 8010594:	f7f5 bc7c 	b.w	8005e90 <_getpid>

08010598 <__swhatbuf_r>:
 8010598:	b570      	push	{r4, r5, r6, lr}
 801059a:	460c      	mov	r4, r1
 801059c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a0:	2900      	cmp	r1, #0
 80105a2:	b096      	sub	sp, #88	@ 0x58
 80105a4:	4615      	mov	r5, r2
 80105a6:	461e      	mov	r6, r3
 80105a8:	da0d      	bge.n	80105c6 <__swhatbuf_r+0x2e>
 80105aa:	89a3      	ldrh	r3, [r4, #12]
 80105ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80105b0:	f04f 0100 	mov.w	r1, #0
 80105b4:	bf14      	ite	ne
 80105b6:	2340      	movne	r3, #64	@ 0x40
 80105b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80105bc:	2000      	movs	r0, #0
 80105be:	6031      	str	r1, [r6, #0]
 80105c0:	602b      	str	r3, [r5, #0]
 80105c2:	b016      	add	sp, #88	@ 0x58
 80105c4:	bd70      	pop	{r4, r5, r6, pc}
 80105c6:	466a      	mov	r2, sp
 80105c8:	f000 f848 	bl	801065c <_fstat_r>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	dbec      	blt.n	80105aa <__swhatbuf_r+0x12>
 80105d0:	9901      	ldr	r1, [sp, #4]
 80105d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105da:	4259      	negs	r1, r3
 80105dc:	4159      	adcs	r1, r3
 80105de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105e2:	e7eb      	b.n	80105bc <__swhatbuf_r+0x24>

080105e4 <__smakebuf_r>:
 80105e4:	898b      	ldrh	r3, [r1, #12]
 80105e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105e8:	079d      	lsls	r5, r3, #30
 80105ea:	4606      	mov	r6, r0
 80105ec:	460c      	mov	r4, r1
 80105ee:	d507      	bpl.n	8010600 <__smakebuf_r+0x1c>
 80105f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105f4:	6023      	str	r3, [r4, #0]
 80105f6:	6123      	str	r3, [r4, #16]
 80105f8:	2301      	movs	r3, #1
 80105fa:	6163      	str	r3, [r4, #20]
 80105fc:	b003      	add	sp, #12
 80105fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010600:	ab01      	add	r3, sp, #4
 8010602:	466a      	mov	r2, sp
 8010604:	f7ff ffc8 	bl	8010598 <__swhatbuf_r>
 8010608:	9f00      	ldr	r7, [sp, #0]
 801060a:	4605      	mov	r5, r0
 801060c:	4639      	mov	r1, r7
 801060e:	4630      	mov	r0, r6
 8010610:	f7fb f88e 	bl	800b730 <_malloc_r>
 8010614:	b948      	cbnz	r0, 801062a <__smakebuf_r+0x46>
 8010616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801061a:	059a      	lsls	r2, r3, #22
 801061c:	d4ee      	bmi.n	80105fc <__smakebuf_r+0x18>
 801061e:	f023 0303 	bic.w	r3, r3, #3
 8010622:	f043 0302 	orr.w	r3, r3, #2
 8010626:	81a3      	strh	r3, [r4, #12]
 8010628:	e7e2      	b.n	80105f0 <__smakebuf_r+0xc>
 801062a:	89a3      	ldrh	r3, [r4, #12]
 801062c:	6020      	str	r0, [r4, #0]
 801062e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010632:	81a3      	strh	r3, [r4, #12]
 8010634:	9b01      	ldr	r3, [sp, #4]
 8010636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801063a:	b15b      	cbz	r3, 8010654 <__smakebuf_r+0x70>
 801063c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010640:	4630      	mov	r0, r6
 8010642:	f000 f81d 	bl	8010680 <_isatty_r>
 8010646:	b128      	cbz	r0, 8010654 <__smakebuf_r+0x70>
 8010648:	89a3      	ldrh	r3, [r4, #12]
 801064a:	f023 0303 	bic.w	r3, r3, #3
 801064e:	f043 0301 	orr.w	r3, r3, #1
 8010652:	81a3      	strh	r3, [r4, #12]
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	431d      	orrs	r5, r3
 8010658:	81a5      	strh	r5, [r4, #12]
 801065a:	e7cf      	b.n	80105fc <__smakebuf_r+0x18>

0801065c <_fstat_r>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4d07      	ldr	r5, [pc, #28]	@ (801067c <_fstat_r+0x20>)
 8010660:	2300      	movs	r3, #0
 8010662:	4604      	mov	r4, r0
 8010664:	4608      	mov	r0, r1
 8010666:	4611      	mov	r1, r2
 8010668:	602b      	str	r3, [r5, #0]
 801066a:	f7f5 fc79 	bl	8005f60 <_fstat>
 801066e:	1c43      	adds	r3, r0, #1
 8010670:	d102      	bne.n	8010678 <_fstat_r+0x1c>
 8010672:	682b      	ldr	r3, [r5, #0]
 8010674:	b103      	cbz	r3, 8010678 <_fstat_r+0x1c>
 8010676:	6023      	str	r3, [r4, #0]
 8010678:	bd38      	pop	{r3, r4, r5, pc}
 801067a:	bf00      	nop
 801067c:	20001870 	.word	0x20001870

08010680 <_isatty_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4d06      	ldr	r5, [pc, #24]	@ (801069c <_isatty_r+0x1c>)
 8010684:	2300      	movs	r3, #0
 8010686:	4604      	mov	r4, r0
 8010688:	4608      	mov	r0, r1
 801068a:	602b      	str	r3, [r5, #0]
 801068c:	f7f5 fc78 	bl	8005f80 <_isatty>
 8010690:	1c43      	adds	r3, r0, #1
 8010692:	d102      	bne.n	801069a <_isatty_r+0x1a>
 8010694:	682b      	ldr	r3, [r5, #0]
 8010696:	b103      	cbz	r3, 801069a <_isatty_r+0x1a>
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	20001870 	.word	0x20001870

080106a0 <pow>:
 80106a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a2:	ed2d 8b02 	vpush	{d8}
 80106a6:	eeb0 8a40 	vmov.f32	s16, s0
 80106aa:	eef0 8a60 	vmov.f32	s17, s1
 80106ae:	ec55 4b11 	vmov	r4, r5, d1
 80106b2:	f000 facd 	bl	8010c50 <__ieee754_pow>
 80106b6:	4622      	mov	r2, r4
 80106b8:	462b      	mov	r3, r5
 80106ba:	4620      	mov	r0, r4
 80106bc:	4629      	mov	r1, r5
 80106be:	ec57 6b10 	vmov	r6, r7, d0
 80106c2:	f7f0 fa53 	bl	8000b6c <__aeabi_dcmpun>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d13b      	bne.n	8010742 <pow+0xa2>
 80106ca:	ec51 0b18 	vmov	r0, r1, d8
 80106ce:	2200      	movs	r2, #0
 80106d0:	2300      	movs	r3, #0
 80106d2:	f7f0 fa19 	bl	8000b08 <__aeabi_dcmpeq>
 80106d6:	b1b8      	cbz	r0, 8010708 <pow+0x68>
 80106d8:	2200      	movs	r2, #0
 80106da:	2300      	movs	r3, #0
 80106dc:	4620      	mov	r0, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	f7f0 fa12 	bl	8000b08 <__aeabi_dcmpeq>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d146      	bne.n	8010776 <pow+0xd6>
 80106e8:	ec45 4b10 	vmov	d0, r4, r5
 80106ec:	f000 f8f3 	bl	80108d6 <finite>
 80106f0:	b338      	cbz	r0, 8010742 <pow+0xa2>
 80106f2:	2200      	movs	r2, #0
 80106f4:	2300      	movs	r3, #0
 80106f6:	4620      	mov	r0, r4
 80106f8:	4629      	mov	r1, r5
 80106fa:	f7f0 fa0f 	bl	8000b1c <__aeabi_dcmplt>
 80106fe:	b300      	cbz	r0, 8010742 <pow+0xa2>
 8010700:	f7fc f91c 	bl	800c93c <__errno>
 8010704:	2322      	movs	r3, #34	@ 0x22
 8010706:	e01b      	b.n	8010740 <pow+0xa0>
 8010708:	ec47 6b10 	vmov	d0, r6, r7
 801070c:	f000 f8e3 	bl	80108d6 <finite>
 8010710:	b9e0      	cbnz	r0, 801074c <pow+0xac>
 8010712:	eeb0 0a48 	vmov.f32	s0, s16
 8010716:	eef0 0a68 	vmov.f32	s1, s17
 801071a:	f000 f8dc 	bl	80108d6 <finite>
 801071e:	b1a8      	cbz	r0, 801074c <pow+0xac>
 8010720:	ec45 4b10 	vmov	d0, r4, r5
 8010724:	f000 f8d7 	bl	80108d6 <finite>
 8010728:	b180      	cbz	r0, 801074c <pow+0xac>
 801072a:	4632      	mov	r2, r6
 801072c:	463b      	mov	r3, r7
 801072e:	4630      	mov	r0, r6
 8010730:	4639      	mov	r1, r7
 8010732:	f7f0 fa1b 	bl	8000b6c <__aeabi_dcmpun>
 8010736:	2800      	cmp	r0, #0
 8010738:	d0e2      	beq.n	8010700 <pow+0x60>
 801073a:	f7fc f8ff 	bl	800c93c <__errno>
 801073e:	2321      	movs	r3, #33	@ 0x21
 8010740:	6003      	str	r3, [r0, #0]
 8010742:	ecbd 8b02 	vpop	{d8}
 8010746:	ec47 6b10 	vmov	d0, r6, r7
 801074a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801074c:	2200      	movs	r2, #0
 801074e:	2300      	movs	r3, #0
 8010750:	4630      	mov	r0, r6
 8010752:	4639      	mov	r1, r7
 8010754:	f7f0 f9d8 	bl	8000b08 <__aeabi_dcmpeq>
 8010758:	2800      	cmp	r0, #0
 801075a:	d0f2      	beq.n	8010742 <pow+0xa2>
 801075c:	eeb0 0a48 	vmov.f32	s0, s16
 8010760:	eef0 0a68 	vmov.f32	s1, s17
 8010764:	f000 f8b7 	bl	80108d6 <finite>
 8010768:	2800      	cmp	r0, #0
 801076a:	d0ea      	beq.n	8010742 <pow+0xa2>
 801076c:	ec45 4b10 	vmov	d0, r4, r5
 8010770:	f000 f8b1 	bl	80108d6 <finite>
 8010774:	e7c3      	b.n	80106fe <pow+0x5e>
 8010776:	4f01      	ldr	r7, [pc, #4]	@ (801077c <pow+0xdc>)
 8010778:	2600      	movs	r6, #0
 801077a:	e7e2      	b.n	8010742 <pow+0xa2>
 801077c:	3ff00000 	.word	0x3ff00000

08010780 <sqrt>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	ed2d 8b02 	vpush	{d8}
 8010786:	ec55 4b10 	vmov	r4, r5, d0
 801078a:	f000 f905 	bl	8010998 <__ieee754_sqrt>
 801078e:	4622      	mov	r2, r4
 8010790:	462b      	mov	r3, r5
 8010792:	4620      	mov	r0, r4
 8010794:	4629      	mov	r1, r5
 8010796:	eeb0 8a40 	vmov.f32	s16, s0
 801079a:	eef0 8a60 	vmov.f32	s17, s1
 801079e:	f7f0 f9e5 	bl	8000b6c <__aeabi_dcmpun>
 80107a2:	b990      	cbnz	r0, 80107ca <sqrt+0x4a>
 80107a4:	2200      	movs	r2, #0
 80107a6:	2300      	movs	r3, #0
 80107a8:	4620      	mov	r0, r4
 80107aa:	4629      	mov	r1, r5
 80107ac:	f7f0 f9b6 	bl	8000b1c <__aeabi_dcmplt>
 80107b0:	b158      	cbz	r0, 80107ca <sqrt+0x4a>
 80107b2:	f7fc f8c3 	bl	800c93c <__errno>
 80107b6:	2321      	movs	r3, #33	@ 0x21
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	2200      	movs	r2, #0
 80107bc:	2300      	movs	r3, #0
 80107be:	4610      	mov	r0, r2
 80107c0:	4619      	mov	r1, r3
 80107c2:	f7f0 f863 	bl	800088c <__aeabi_ddiv>
 80107c6:	ec41 0b18 	vmov	d8, r0, r1
 80107ca:	eeb0 0a48 	vmov.f32	s0, s16
 80107ce:	eef0 0a68 	vmov.f32	s1, s17
 80107d2:	ecbd 8b02 	vpop	{d8}
 80107d6:	bd38      	pop	{r3, r4, r5, pc}

080107d8 <acosf>:
 80107d8:	b508      	push	{r3, lr}
 80107da:	ed2d 8b02 	vpush	{d8}
 80107de:	eeb0 8a40 	vmov.f32	s16, s0
 80107e2:	f000 ff81 	bl	80116e8 <__ieee754_acosf>
 80107e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80107ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ee:	eef0 8a40 	vmov.f32	s17, s0
 80107f2:	d615      	bvs.n	8010820 <acosf+0x48>
 80107f4:	eeb0 0a48 	vmov.f32	s0, s16
 80107f8:	f000 f866 	bl	80108c8 <fabsf>
 80107fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010800:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010808:	dd0a      	ble.n	8010820 <acosf+0x48>
 801080a:	f7fc f897 	bl	800c93c <__errno>
 801080e:	ecbd 8b02 	vpop	{d8}
 8010812:	2321      	movs	r3, #33	@ 0x21
 8010814:	6003      	str	r3, [r0, #0]
 8010816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801081a:	4804      	ldr	r0, [pc, #16]	@ (801082c <acosf+0x54>)
 801081c:	f7fc b8ca 	b.w	800c9b4 <nanf>
 8010820:	eeb0 0a68 	vmov.f32	s0, s17
 8010824:	ecbd 8b02 	vpop	{d8}
 8010828:	bd08      	pop	{r3, pc}
 801082a:	bf00      	nop
 801082c:	08012478 	.word	0x08012478

08010830 <asinf>:
 8010830:	b508      	push	{r3, lr}
 8010832:	ed2d 8b02 	vpush	{d8}
 8010836:	eeb0 8a40 	vmov.f32	s16, s0
 801083a:	f001 f84d 	bl	80118d8 <__ieee754_asinf>
 801083e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	eef0 8a40 	vmov.f32	s17, s0
 801084a:	d615      	bvs.n	8010878 <asinf+0x48>
 801084c:	eeb0 0a48 	vmov.f32	s0, s16
 8010850:	f000 f83a 	bl	80108c8 <fabsf>
 8010854:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010858:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801085c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010860:	dd0a      	ble.n	8010878 <asinf+0x48>
 8010862:	f7fc f86b 	bl	800c93c <__errno>
 8010866:	ecbd 8b02 	vpop	{d8}
 801086a:	2321      	movs	r3, #33	@ 0x21
 801086c:	6003      	str	r3, [r0, #0]
 801086e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010872:	4804      	ldr	r0, [pc, #16]	@ (8010884 <asinf+0x54>)
 8010874:	f7fc b89e 	b.w	800c9b4 <nanf>
 8010878:	eeb0 0a68 	vmov.f32	s0, s17
 801087c:	ecbd 8b02 	vpop	{d8}
 8010880:	bd08      	pop	{r3, pc}
 8010882:	bf00      	nop
 8010884:	08012478 	.word	0x08012478

08010888 <atan2f>:
 8010888:	f001 b90c 	b.w	8011aa4 <__ieee754_atan2f>

0801088c <sqrtf>:
 801088c:	b508      	push	{r3, lr}
 801088e:	ed2d 8b02 	vpush	{d8}
 8010892:	eeb0 8a40 	vmov.f32	s16, s0
 8010896:	f000 f959 	bl	8010b4c <__ieee754_sqrtf>
 801089a:	eeb4 8a48 	vcmp.f32	s16, s16
 801089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a2:	d60c      	bvs.n	80108be <sqrtf+0x32>
 80108a4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80108c4 <sqrtf+0x38>
 80108a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80108ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b0:	d505      	bpl.n	80108be <sqrtf+0x32>
 80108b2:	f7fc f843 	bl	800c93c <__errno>
 80108b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80108ba:	2321      	movs	r3, #33	@ 0x21
 80108bc:	6003      	str	r3, [r0, #0]
 80108be:	ecbd 8b02 	vpop	{d8}
 80108c2:	bd08      	pop	{r3, pc}
 80108c4:	00000000 	.word	0x00000000

080108c8 <fabsf>:
 80108c8:	ee10 3a10 	vmov	r3, s0
 80108cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108d0:	ee00 3a10 	vmov	s0, r3
 80108d4:	4770      	bx	lr

080108d6 <finite>:
 80108d6:	b082      	sub	sp, #8
 80108d8:	ed8d 0b00 	vstr	d0, [sp]
 80108dc:	9801      	ldr	r0, [sp, #4]
 80108de:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80108e2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80108e6:	0fc0      	lsrs	r0, r0, #31
 80108e8:	b002      	add	sp, #8
 80108ea:	4770      	bx	lr

080108ec <fmaxf>:
 80108ec:	b508      	push	{r3, lr}
 80108ee:	ed2d 8b02 	vpush	{d8}
 80108f2:	eeb0 8a40 	vmov.f32	s16, s0
 80108f6:	eef0 8a60 	vmov.f32	s17, s1
 80108fa:	f000 f831 	bl	8010960 <__fpclassifyf>
 80108fe:	b930      	cbnz	r0, 801090e <fmaxf+0x22>
 8010900:	eeb0 8a68 	vmov.f32	s16, s17
 8010904:	eeb0 0a48 	vmov.f32	s0, s16
 8010908:	ecbd 8b02 	vpop	{d8}
 801090c:	bd08      	pop	{r3, pc}
 801090e:	eeb0 0a68 	vmov.f32	s0, s17
 8010912:	f000 f825 	bl	8010960 <__fpclassifyf>
 8010916:	2800      	cmp	r0, #0
 8010918:	d0f4      	beq.n	8010904 <fmaxf+0x18>
 801091a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010922:	dded      	ble.n	8010900 <fmaxf+0x14>
 8010924:	e7ee      	b.n	8010904 <fmaxf+0x18>

08010926 <fminf>:
 8010926:	b508      	push	{r3, lr}
 8010928:	ed2d 8b02 	vpush	{d8}
 801092c:	eeb0 8a40 	vmov.f32	s16, s0
 8010930:	eef0 8a60 	vmov.f32	s17, s1
 8010934:	f000 f814 	bl	8010960 <__fpclassifyf>
 8010938:	b930      	cbnz	r0, 8010948 <fminf+0x22>
 801093a:	eeb0 8a68 	vmov.f32	s16, s17
 801093e:	eeb0 0a48 	vmov.f32	s0, s16
 8010942:	ecbd 8b02 	vpop	{d8}
 8010946:	bd08      	pop	{r3, pc}
 8010948:	eeb0 0a68 	vmov.f32	s0, s17
 801094c:	f000 f808 	bl	8010960 <__fpclassifyf>
 8010950:	2800      	cmp	r0, #0
 8010952:	d0f4      	beq.n	801093e <fminf+0x18>
 8010954:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095c:	d5ed      	bpl.n	801093a <fminf+0x14>
 801095e:	e7ee      	b.n	801093e <fminf+0x18>

08010960 <__fpclassifyf>:
 8010960:	ee10 3a10 	vmov	r3, s0
 8010964:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010968:	d00d      	beq.n	8010986 <__fpclassifyf+0x26>
 801096a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801096e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010972:	d30a      	bcc.n	801098a <__fpclassifyf+0x2a>
 8010974:	4b07      	ldr	r3, [pc, #28]	@ (8010994 <__fpclassifyf+0x34>)
 8010976:	1e42      	subs	r2, r0, #1
 8010978:	429a      	cmp	r2, r3
 801097a:	d908      	bls.n	801098e <__fpclassifyf+0x2e>
 801097c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010980:	4258      	negs	r0, r3
 8010982:	4158      	adcs	r0, r3
 8010984:	4770      	bx	lr
 8010986:	2002      	movs	r0, #2
 8010988:	4770      	bx	lr
 801098a:	2004      	movs	r0, #4
 801098c:	4770      	bx	lr
 801098e:	2003      	movs	r0, #3
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	007ffffe 	.word	0x007ffffe

08010998 <__ieee754_sqrt>:
 8010998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099c:	4a68      	ldr	r2, [pc, #416]	@ (8010b40 <__ieee754_sqrt+0x1a8>)
 801099e:	ec55 4b10 	vmov	r4, r5, d0
 80109a2:	43aa      	bics	r2, r5
 80109a4:	462b      	mov	r3, r5
 80109a6:	4621      	mov	r1, r4
 80109a8:	d110      	bne.n	80109cc <__ieee754_sqrt+0x34>
 80109aa:	4622      	mov	r2, r4
 80109ac:	4620      	mov	r0, r4
 80109ae:	4629      	mov	r1, r5
 80109b0:	f7ef fe42 	bl	8000638 <__aeabi_dmul>
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	4620      	mov	r0, r4
 80109ba:	4629      	mov	r1, r5
 80109bc:	f7ef fc86 	bl	80002cc <__adddf3>
 80109c0:	4604      	mov	r4, r0
 80109c2:	460d      	mov	r5, r1
 80109c4:	ec45 4b10 	vmov	d0, r4, r5
 80109c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109cc:	2d00      	cmp	r5, #0
 80109ce:	dc0e      	bgt.n	80109ee <__ieee754_sqrt+0x56>
 80109d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80109d4:	4322      	orrs	r2, r4
 80109d6:	d0f5      	beq.n	80109c4 <__ieee754_sqrt+0x2c>
 80109d8:	b19d      	cbz	r5, 8010a02 <__ieee754_sqrt+0x6a>
 80109da:	4622      	mov	r2, r4
 80109dc:	4620      	mov	r0, r4
 80109de:	4629      	mov	r1, r5
 80109e0:	f7ef fc72 	bl	80002c8 <__aeabi_dsub>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	f7ef ff50 	bl	800088c <__aeabi_ddiv>
 80109ec:	e7e8      	b.n	80109c0 <__ieee754_sqrt+0x28>
 80109ee:	152a      	asrs	r2, r5, #20
 80109f0:	d115      	bne.n	8010a1e <__ieee754_sqrt+0x86>
 80109f2:	2000      	movs	r0, #0
 80109f4:	e009      	b.n	8010a0a <__ieee754_sqrt+0x72>
 80109f6:	0acb      	lsrs	r3, r1, #11
 80109f8:	3a15      	subs	r2, #21
 80109fa:	0549      	lsls	r1, r1, #21
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d0fa      	beq.n	80109f6 <__ieee754_sqrt+0x5e>
 8010a00:	e7f7      	b.n	80109f2 <__ieee754_sqrt+0x5a>
 8010a02:	462a      	mov	r2, r5
 8010a04:	e7fa      	b.n	80109fc <__ieee754_sqrt+0x64>
 8010a06:	005b      	lsls	r3, r3, #1
 8010a08:	3001      	adds	r0, #1
 8010a0a:	02dc      	lsls	r4, r3, #11
 8010a0c:	d5fb      	bpl.n	8010a06 <__ieee754_sqrt+0x6e>
 8010a0e:	1e44      	subs	r4, r0, #1
 8010a10:	1b12      	subs	r2, r2, r4
 8010a12:	f1c0 0420 	rsb	r4, r0, #32
 8010a16:	fa21 f404 	lsr.w	r4, r1, r4
 8010a1a:	4323      	orrs	r3, r4
 8010a1c:	4081      	lsls	r1, r0
 8010a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a22:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a2a:	07d2      	lsls	r2, r2, #31
 8010a2c:	bf5c      	itt	pl
 8010a2e:	005b      	lslpl	r3, r3, #1
 8010a30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010a34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a38:	bf58      	it	pl
 8010a3a:	0049      	lslpl	r1, r1, #1
 8010a3c:	2600      	movs	r6, #0
 8010a3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010a42:	106d      	asrs	r5, r5, #1
 8010a44:	0049      	lsls	r1, r1, #1
 8010a46:	2016      	movs	r0, #22
 8010a48:	4632      	mov	r2, r6
 8010a4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010a4e:	1917      	adds	r7, r2, r4
 8010a50:	429f      	cmp	r7, r3
 8010a52:	bfde      	ittt	le
 8010a54:	193a      	addle	r2, r7, r4
 8010a56:	1bdb      	suble	r3, r3, r7
 8010a58:	1936      	addle	r6, r6, r4
 8010a5a:	0fcf      	lsrs	r7, r1, #31
 8010a5c:	3801      	subs	r0, #1
 8010a5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010a62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010a66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010a6a:	d1f0      	bne.n	8010a4e <__ieee754_sqrt+0xb6>
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	2720      	movs	r7, #32
 8010a70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010a74:	429a      	cmp	r2, r3
 8010a76:	eb00 0e0c 	add.w	lr, r0, ip
 8010a7a:	db02      	blt.n	8010a82 <__ieee754_sqrt+0xea>
 8010a7c:	d113      	bne.n	8010aa6 <__ieee754_sqrt+0x10e>
 8010a7e:	458e      	cmp	lr, r1
 8010a80:	d811      	bhi.n	8010aa6 <__ieee754_sqrt+0x10e>
 8010a82:	f1be 0f00 	cmp.w	lr, #0
 8010a86:	eb0e 000c 	add.w	r0, lr, ip
 8010a8a:	da42      	bge.n	8010b12 <__ieee754_sqrt+0x17a>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	db40      	blt.n	8010b12 <__ieee754_sqrt+0x17a>
 8010a90:	f102 0801 	add.w	r8, r2, #1
 8010a94:	1a9b      	subs	r3, r3, r2
 8010a96:	458e      	cmp	lr, r1
 8010a98:	bf88      	it	hi
 8010a9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010a9e:	eba1 010e 	sub.w	r1, r1, lr
 8010aa2:	4464      	add	r4, ip
 8010aa4:	4642      	mov	r2, r8
 8010aa6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010aaa:	3f01      	subs	r7, #1
 8010aac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010ab0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010ab4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010ab8:	d1dc      	bne.n	8010a74 <__ieee754_sqrt+0xdc>
 8010aba:	4319      	orrs	r1, r3
 8010abc:	d01b      	beq.n	8010af6 <__ieee754_sqrt+0x15e>
 8010abe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010b44 <__ieee754_sqrt+0x1ac>
 8010ac2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010b48 <__ieee754_sqrt+0x1b0>
 8010ac6:	e9da 0100 	ldrd	r0, r1, [sl]
 8010aca:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ace:	f7ef fbfb 	bl	80002c8 <__aeabi_dsub>
 8010ad2:	e9da 8900 	ldrd	r8, r9, [sl]
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	460b      	mov	r3, r1
 8010ada:	4640      	mov	r0, r8
 8010adc:	4649      	mov	r1, r9
 8010ade:	f7f0 f827 	bl	8000b30 <__aeabi_dcmple>
 8010ae2:	b140      	cbz	r0, 8010af6 <__ieee754_sqrt+0x15e>
 8010ae4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010ae8:	e9da 0100 	ldrd	r0, r1, [sl]
 8010aec:	e9db 2300 	ldrd	r2, r3, [fp]
 8010af0:	d111      	bne.n	8010b16 <__ieee754_sqrt+0x17e>
 8010af2:	3601      	adds	r6, #1
 8010af4:	463c      	mov	r4, r7
 8010af6:	1072      	asrs	r2, r6, #1
 8010af8:	0863      	lsrs	r3, r4, #1
 8010afa:	07f1      	lsls	r1, r6, #31
 8010afc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010b00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010b04:	bf48      	it	mi
 8010b06:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010b0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010b0e:	4618      	mov	r0, r3
 8010b10:	e756      	b.n	80109c0 <__ieee754_sqrt+0x28>
 8010b12:	4690      	mov	r8, r2
 8010b14:	e7be      	b.n	8010a94 <__ieee754_sqrt+0xfc>
 8010b16:	f7ef fbd9 	bl	80002cc <__adddf3>
 8010b1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4640      	mov	r0, r8
 8010b24:	4649      	mov	r1, r9
 8010b26:	f7ef fff9 	bl	8000b1c <__aeabi_dcmplt>
 8010b2a:	b120      	cbz	r0, 8010b36 <__ieee754_sqrt+0x19e>
 8010b2c:	1ca0      	adds	r0, r4, #2
 8010b2e:	bf08      	it	eq
 8010b30:	3601      	addeq	r6, #1
 8010b32:	3402      	adds	r4, #2
 8010b34:	e7df      	b.n	8010af6 <__ieee754_sqrt+0x15e>
 8010b36:	1c63      	adds	r3, r4, #1
 8010b38:	f023 0401 	bic.w	r4, r3, #1
 8010b3c:	e7db      	b.n	8010af6 <__ieee754_sqrt+0x15e>
 8010b3e:	bf00      	nop
 8010b40:	7ff00000 	.word	0x7ff00000
 8010b44:	20000208 	.word	0x20000208
 8010b48:	20000200 	.word	0x20000200

08010b4c <__ieee754_sqrtf>:
 8010b4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010b50:	4770      	bx	lr
 8010b52:	0000      	movs	r0, r0
 8010b54:	0000      	movs	r0, r0
	...

08010b58 <floor>:
 8010b58:	ec51 0b10 	vmov	r0, r1, d0
 8010b5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010b68:	2e13      	cmp	r6, #19
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	4680      	mov	r8, r0
 8010b70:	dc34      	bgt.n	8010bdc <floor+0x84>
 8010b72:	2e00      	cmp	r6, #0
 8010b74:	da17      	bge.n	8010ba6 <floor+0x4e>
 8010b76:	a332      	add	r3, pc, #200	@ (adr r3, 8010c40 <floor+0xe8>)
 8010b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7c:	f7ef fba6 	bl	80002cc <__adddf3>
 8010b80:	2200      	movs	r2, #0
 8010b82:	2300      	movs	r3, #0
 8010b84:	f7ef ffe8 	bl	8000b58 <__aeabi_dcmpgt>
 8010b88:	b150      	cbz	r0, 8010ba0 <floor+0x48>
 8010b8a:	2c00      	cmp	r4, #0
 8010b8c:	da55      	bge.n	8010c3a <floor+0xe2>
 8010b8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010b92:	432c      	orrs	r4, r5
 8010b94:	2500      	movs	r5, #0
 8010b96:	42ac      	cmp	r4, r5
 8010b98:	4c2b      	ldr	r4, [pc, #172]	@ (8010c48 <floor+0xf0>)
 8010b9a:	bf08      	it	eq
 8010b9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	e023      	b.n	8010bee <floor+0x96>
 8010ba6:	4f29      	ldr	r7, [pc, #164]	@ (8010c4c <floor+0xf4>)
 8010ba8:	4137      	asrs	r7, r6
 8010baa:	ea01 0307 	and.w	r3, r1, r7
 8010bae:	4303      	orrs	r3, r0
 8010bb0:	d01d      	beq.n	8010bee <floor+0x96>
 8010bb2:	a323      	add	r3, pc, #140	@ (adr r3, 8010c40 <floor+0xe8>)
 8010bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb8:	f7ef fb88 	bl	80002cc <__adddf3>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f7ef ffca 	bl	8000b58 <__aeabi_dcmpgt>
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	d0eb      	beq.n	8010ba0 <floor+0x48>
 8010bc8:	2c00      	cmp	r4, #0
 8010bca:	bfbe      	ittt	lt
 8010bcc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010bd0:	4133      	asrlt	r3, r6
 8010bd2:	18e4      	addlt	r4, r4, r3
 8010bd4:	ea24 0407 	bic.w	r4, r4, r7
 8010bd8:	2500      	movs	r5, #0
 8010bda:	e7e1      	b.n	8010ba0 <floor+0x48>
 8010bdc:	2e33      	cmp	r6, #51	@ 0x33
 8010bde:	dd0a      	ble.n	8010bf6 <floor+0x9e>
 8010be0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010be4:	d103      	bne.n	8010bee <floor+0x96>
 8010be6:	4602      	mov	r2, r0
 8010be8:	460b      	mov	r3, r1
 8010bea:	f7ef fb6f 	bl	80002cc <__adddf3>
 8010bee:	ec41 0b10 	vmov	d0, r0, r1
 8010bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8010bfe:	40df      	lsrs	r7, r3
 8010c00:	4207      	tst	r7, r0
 8010c02:	d0f4      	beq.n	8010bee <floor+0x96>
 8010c04:	a30e      	add	r3, pc, #56	@ (adr r3, 8010c40 <floor+0xe8>)
 8010c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0a:	f7ef fb5f 	bl	80002cc <__adddf3>
 8010c0e:	2200      	movs	r2, #0
 8010c10:	2300      	movs	r3, #0
 8010c12:	f7ef ffa1 	bl	8000b58 <__aeabi_dcmpgt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d0c2      	beq.n	8010ba0 <floor+0x48>
 8010c1a:	2c00      	cmp	r4, #0
 8010c1c:	da0a      	bge.n	8010c34 <floor+0xdc>
 8010c1e:	2e14      	cmp	r6, #20
 8010c20:	d101      	bne.n	8010c26 <floor+0xce>
 8010c22:	3401      	adds	r4, #1
 8010c24:	e006      	b.n	8010c34 <floor+0xdc>
 8010c26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	40b3      	lsls	r3, r6
 8010c2e:	441d      	add	r5, r3
 8010c30:	4545      	cmp	r5, r8
 8010c32:	d3f6      	bcc.n	8010c22 <floor+0xca>
 8010c34:	ea25 0507 	bic.w	r5, r5, r7
 8010c38:	e7b2      	b.n	8010ba0 <floor+0x48>
 8010c3a:	2500      	movs	r5, #0
 8010c3c:	462c      	mov	r4, r5
 8010c3e:	e7af      	b.n	8010ba0 <floor+0x48>
 8010c40:	8800759c 	.word	0x8800759c
 8010c44:	7e37e43c 	.word	0x7e37e43c
 8010c48:	bff00000 	.word	0xbff00000
 8010c4c:	000fffff 	.word	0x000fffff

08010c50 <__ieee754_pow>:
 8010c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c54:	b091      	sub	sp, #68	@ 0x44
 8010c56:	ed8d 1b00 	vstr	d1, [sp]
 8010c5a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010c5e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010c62:	ea5a 0001 	orrs.w	r0, sl, r1
 8010c66:	ec57 6b10 	vmov	r6, r7, d0
 8010c6a:	d113      	bne.n	8010c94 <__ieee754_pow+0x44>
 8010c6c:	19b3      	adds	r3, r6, r6
 8010c6e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010c72:	4152      	adcs	r2, r2
 8010c74:	4298      	cmp	r0, r3
 8010c76:	4b98      	ldr	r3, [pc, #608]	@ (8010ed8 <__ieee754_pow+0x288>)
 8010c78:	4193      	sbcs	r3, r2
 8010c7a:	f080 84ea 	bcs.w	8011652 <__ieee754_pow+0xa02>
 8010c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c82:	4630      	mov	r0, r6
 8010c84:	4639      	mov	r1, r7
 8010c86:	f7ef fb21 	bl	80002cc <__adddf3>
 8010c8a:	ec41 0b10 	vmov	d0, r0, r1
 8010c8e:	b011      	add	sp, #68	@ 0x44
 8010c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c94:	4a91      	ldr	r2, [pc, #580]	@ (8010edc <__ieee754_pow+0x28c>)
 8010c96:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010c9a:	4590      	cmp	r8, r2
 8010c9c:	463d      	mov	r5, r7
 8010c9e:	4633      	mov	r3, r6
 8010ca0:	d806      	bhi.n	8010cb0 <__ieee754_pow+0x60>
 8010ca2:	d101      	bne.n	8010ca8 <__ieee754_pow+0x58>
 8010ca4:	2e00      	cmp	r6, #0
 8010ca6:	d1ea      	bne.n	8010c7e <__ieee754_pow+0x2e>
 8010ca8:	4592      	cmp	sl, r2
 8010caa:	d801      	bhi.n	8010cb0 <__ieee754_pow+0x60>
 8010cac:	d10e      	bne.n	8010ccc <__ieee754_pow+0x7c>
 8010cae:	b169      	cbz	r1, 8010ccc <__ieee754_pow+0x7c>
 8010cb0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010cb4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010cb8:	431d      	orrs	r5, r3
 8010cba:	d1e0      	bne.n	8010c7e <__ieee754_pow+0x2e>
 8010cbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cc0:	18db      	adds	r3, r3, r3
 8010cc2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010cc6:	4152      	adcs	r2, r2
 8010cc8:	429d      	cmp	r5, r3
 8010cca:	e7d4      	b.n	8010c76 <__ieee754_pow+0x26>
 8010ccc:	2d00      	cmp	r5, #0
 8010cce:	46c3      	mov	fp, r8
 8010cd0:	da3a      	bge.n	8010d48 <__ieee754_pow+0xf8>
 8010cd2:	4a83      	ldr	r2, [pc, #524]	@ (8010ee0 <__ieee754_pow+0x290>)
 8010cd4:	4592      	cmp	sl, r2
 8010cd6:	d84d      	bhi.n	8010d74 <__ieee754_pow+0x124>
 8010cd8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010cdc:	4592      	cmp	sl, r2
 8010cde:	f240 84c7 	bls.w	8011670 <__ieee754_pow+0xa20>
 8010ce2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010ce6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010cea:	2a14      	cmp	r2, #20
 8010cec:	dd0f      	ble.n	8010d0e <__ieee754_pow+0xbe>
 8010cee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010cf2:	fa21 f402 	lsr.w	r4, r1, r2
 8010cf6:	fa04 f202 	lsl.w	r2, r4, r2
 8010cfa:	428a      	cmp	r2, r1
 8010cfc:	f040 84b8 	bne.w	8011670 <__ieee754_pow+0xa20>
 8010d00:	f004 0401 	and.w	r4, r4, #1
 8010d04:	f1c4 0402 	rsb	r4, r4, #2
 8010d08:	2900      	cmp	r1, #0
 8010d0a:	d158      	bne.n	8010dbe <__ieee754_pow+0x16e>
 8010d0c:	e00e      	b.n	8010d2c <__ieee754_pow+0xdc>
 8010d0e:	2900      	cmp	r1, #0
 8010d10:	d154      	bne.n	8010dbc <__ieee754_pow+0x16c>
 8010d12:	f1c2 0214 	rsb	r2, r2, #20
 8010d16:	fa4a f402 	asr.w	r4, sl, r2
 8010d1a:	fa04 f202 	lsl.w	r2, r4, r2
 8010d1e:	4552      	cmp	r2, sl
 8010d20:	f040 84a3 	bne.w	801166a <__ieee754_pow+0xa1a>
 8010d24:	f004 0401 	and.w	r4, r4, #1
 8010d28:	f1c4 0402 	rsb	r4, r4, #2
 8010d2c:	4a6d      	ldr	r2, [pc, #436]	@ (8010ee4 <__ieee754_pow+0x294>)
 8010d2e:	4592      	cmp	sl, r2
 8010d30:	d12e      	bne.n	8010d90 <__ieee754_pow+0x140>
 8010d32:	f1b9 0f00 	cmp.w	r9, #0
 8010d36:	f280 8494 	bge.w	8011662 <__ieee754_pow+0xa12>
 8010d3a:	496a      	ldr	r1, [pc, #424]	@ (8010ee4 <__ieee754_pow+0x294>)
 8010d3c:	4632      	mov	r2, r6
 8010d3e:	463b      	mov	r3, r7
 8010d40:	2000      	movs	r0, #0
 8010d42:	f7ef fda3 	bl	800088c <__aeabi_ddiv>
 8010d46:	e7a0      	b.n	8010c8a <__ieee754_pow+0x3a>
 8010d48:	2400      	movs	r4, #0
 8010d4a:	bbc1      	cbnz	r1, 8010dbe <__ieee754_pow+0x16e>
 8010d4c:	4a63      	ldr	r2, [pc, #396]	@ (8010edc <__ieee754_pow+0x28c>)
 8010d4e:	4592      	cmp	sl, r2
 8010d50:	d1ec      	bne.n	8010d2c <__ieee754_pow+0xdc>
 8010d52:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8010d56:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010d5a:	431a      	orrs	r2, r3
 8010d5c:	f000 8479 	beq.w	8011652 <__ieee754_pow+0xa02>
 8010d60:	4b61      	ldr	r3, [pc, #388]	@ (8010ee8 <__ieee754_pow+0x298>)
 8010d62:	4598      	cmp	r8, r3
 8010d64:	d908      	bls.n	8010d78 <__ieee754_pow+0x128>
 8010d66:	f1b9 0f00 	cmp.w	r9, #0
 8010d6a:	f2c0 8476 	blt.w	801165a <__ieee754_pow+0xa0a>
 8010d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d72:	e78a      	b.n	8010c8a <__ieee754_pow+0x3a>
 8010d74:	2402      	movs	r4, #2
 8010d76:	e7e8      	b.n	8010d4a <__ieee754_pow+0xfa>
 8010d78:	f1b9 0f00 	cmp.w	r9, #0
 8010d7c:	f04f 0000 	mov.w	r0, #0
 8010d80:	f04f 0100 	mov.w	r1, #0
 8010d84:	da81      	bge.n	8010c8a <__ieee754_pow+0x3a>
 8010d86:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010d8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010d8e:	e77c      	b.n	8010c8a <__ieee754_pow+0x3a>
 8010d90:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010d94:	d106      	bne.n	8010da4 <__ieee754_pow+0x154>
 8010d96:	4632      	mov	r2, r6
 8010d98:	463b      	mov	r3, r7
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	4639      	mov	r1, r7
 8010d9e:	f7ef fc4b 	bl	8000638 <__aeabi_dmul>
 8010da2:	e772      	b.n	8010c8a <__ieee754_pow+0x3a>
 8010da4:	4a51      	ldr	r2, [pc, #324]	@ (8010eec <__ieee754_pow+0x29c>)
 8010da6:	4591      	cmp	r9, r2
 8010da8:	d109      	bne.n	8010dbe <__ieee754_pow+0x16e>
 8010daa:	2d00      	cmp	r5, #0
 8010dac:	db07      	blt.n	8010dbe <__ieee754_pow+0x16e>
 8010dae:	ec47 6b10 	vmov	d0, r6, r7
 8010db2:	b011      	add	sp, #68	@ 0x44
 8010db4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db8:	f7ff bdee 	b.w	8010998 <__ieee754_sqrt>
 8010dbc:	2400      	movs	r4, #0
 8010dbe:	ec47 6b10 	vmov	d0, r6, r7
 8010dc2:	9302      	str	r3, [sp, #8]
 8010dc4:	f000 fc88 	bl	80116d8 <fabs>
 8010dc8:	9b02      	ldr	r3, [sp, #8]
 8010dca:	ec51 0b10 	vmov	r0, r1, d0
 8010dce:	bb53      	cbnz	r3, 8010e26 <__ieee754_pow+0x1d6>
 8010dd0:	4b44      	ldr	r3, [pc, #272]	@ (8010ee4 <__ieee754_pow+0x294>)
 8010dd2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d002      	beq.n	8010de0 <__ieee754_pow+0x190>
 8010dda:	f1b8 0f00 	cmp.w	r8, #0
 8010dde:	d122      	bne.n	8010e26 <__ieee754_pow+0x1d6>
 8010de0:	f1b9 0f00 	cmp.w	r9, #0
 8010de4:	da05      	bge.n	8010df2 <__ieee754_pow+0x1a2>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	2000      	movs	r0, #0
 8010dec:	493d      	ldr	r1, [pc, #244]	@ (8010ee4 <__ieee754_pow+0x294>)
 8010dee:	f7ef fd4d 	bl	800088c <__aeabi_ddiv>
 8010df2:	2d00      	cmp	r5, #0
 8010df4:	f6bf af49 	bge.w	8010c8a <__ieee754_pow+0x3a>
 8010df8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010dfc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010e00:	ea58 0804 	orrs.w	r8, r8, r4
 8010e04:	d108      	bne.n	8010e18 <__ieee754_pow+0x1c8>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	f7ef fa5b 	bl	80002c8 <__aeabi_dsub>
 8010e12:	4602      	mov	r2, r0
 8010e14:	460b      	mov	r3, r1
 8010e16:	e794      	b.n	8010d42 <__ieee754_pow+0xf2>
 8010e18:	2c01      	cmp	r4, #1
 8010e1a:	f47f af36 	bne.w	8010c8a <__ieee754_pow+0x3a>
 8010e1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e22:	4619      	mov	r1, r3
 8010e24:	e731      	b.n	8010c8a <__ieee754_pow+0x3a>
 8010e26:	0feb      	lsrs	r3, r5, #31
 8010e28:	3b01      	subs	r3, #1
 8010e2a:	ea53 0204 	orrs.w	r2, r3, r4
 8010e2e:	d102      	bne.n	8010e36 <__ieee754_pow+0x1e6>
 8010e30:	4632      	mov	r2, r6
 8010e32:	463b      	mov	r3, r7
 8010e34:	e7e9      	b.n	8010e0a <__ieee754_pow+0x1ba>
 8010e36:	3c01      	subs	r4, #1
 8010e38:	431c      	orrs	r4, r3
 8010e3a:	d016      	beq.n	8010e6a <__ieee754_pow+0x21a>
 8010e3c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010ec8 <__ieee754_pow+0x278>
 8010e40:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010e44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e48:	f240 8112 	bls.w	8011070 <__ieee754_pow+0x420>
 8010e4c:	4b28      	ldr	r3, [pc, #160]	@ (8010ef0 <__ieee754_pow+0x2a0>)
 8010e4e:	459a      	cmp	sl, r3
 8010e50:	4b25      	ldr	r3, [pc, #148]	@ (8010ee8 <__ieee754_pow+0x298>)
 8010e52:	d916      	bls.n	8010e82 <__ieee754_pow+0x232>
 8010e54:	4598      	cmp	r8, r3
 8010e56:	d80b      	bhi.n	8010e70 <__ieee754_pow+0x220>
 8010e58:	f1b9 0f00 	cmp.w	r9, #0
 8010e5c:	da0b      	bge.n	8010e76 <__ieee754_pow+0x226>
 8010e5e:	2000      	movs	r0, #0
 8010e60:	b011      	add	sp, #68	@ 0x44
 8010e62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e66:	f001 b847 	b.w	8011ef8 <__math_oflow>
 8010e6a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010ed0 <__ieee754_pow+0x280>
 8010e6e:	e7e7      	b.n	8010e40 <__ieee754_pow+0x1f0>
 8010e70:	f1b9 0f00 	cmp.w	r9, #0
 8010e74:	dcf3      	bgt.n	8010e5e <__ieee754_pow+0x20e>
 8010e76:	2000      	movs	r0, #0
 8010e78:	b011      	add	sp, #68	@ 0x44
 8010e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7e:	f001 b833 	b.w	8011ee8 <__math_uflow>
 8010e82:	4598      	cmp	r8, r3
 8010e84:	d20c      	bcs.n	8010ea0 <__ieee754_pow+0x250>
 8010e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f7ef fe45 	bl	8000b1c <__aeabi_dcmplt>
 8010e92:	3800      	subs	r0, #0
 8010e94:	bf18      	it	ne
 8010e96:	2001      	movne	r0, #1
 8010e98:	f1b9 0f00 	cmp.w	r9, #0
 8010e9c:	daec      	bge.n	8010e78 <__ieee754_pow+0x228>
 8010e9e:	e7df      	b.n	8010e60 <__ieee754_pow+0x210>
 8010ea0:	4b10      	ldr	r3, [pc, #64]	@ (8010ee4 <__ieee754_pow+0x294>)
 8010ea2:	4598      	cmp	r8, r3
 8010ea4:	f04f 0200 	mov.w	r2, #0
 8010ea8:	d924      	bls.n	8010ef4 <__ieee754_pow+0x2a4>
 8010eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f7ef fe34 	bl	8000b1c <__aeabi_dcmplt>
 8010eb4:	3800      	subs	r0, #0
 8010eb6:	bf18      	it	ne
 8010eb8:	2001      	movne	r0, #1
 8010eba:	f1b9 0f00 	cmp.w	r9, #0
 8010ebe:	dccf      	bgt.n	8010e60 <__ieee754_pow+0x210>
 8010ec0:	e7da      	b.n	8010e78 <__ieee754_pow+0x228>
 8010ec2:	bf00      	nop
 8010ec4:	f3af 8000 	nop.w
 8010ec8:	00000000 	.word	0x00000000
 8010ecc:	3ff00000 	.word	0x3ff00000
 8010ed0:	00000000 	.word	0x00000000
 8010ed4:	bff00000 	.word	0xbff00000
 8010ed8:	fff00000 	.word	0xfff00000
 8010edc:	7ff00000 	.word	0x7ff00000
 8010ee0:	433fffff 	.word	0x433fffff
 8010ee4:	3ff00000 	.word	0x3ff00000
 8010ee8:	3fefffff 	.word	0x3fefffff
 8010eec:	3fe00000 	.word	0x3fe00000
 8010ef0:	43f00000 	.word	0x43f00000
 8010ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8011060 <__ieee754_pow+0x410>)
 8010ef6:	f7ef f9e7 	bl	80002c8 <__aeabi_dsub>
 8010efa:	a351      	add	r3, pc, #324	@ (adr r3, 8011040 <__ieee754_pow+0x3f0>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	4604      	mov	r4, r0
 8010f02:	460d      	mov	r5, r1
 8010f04:	f7ef fb98 	bl	8000638 <__aeabi_dmul>
 8010f08:	a34f      	add	r3, pc, #316	@ (adr r3, 8011048 <__ieee754_pow+0x3f8>)
 8010f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0e:	4606      	mov	r6, r0
 8010f10:	460f      	mov	r7, r1
 8010f12:	4620      	mov	r0, r4
 8010f14:	4629      	mov	r1, r5
 8010f16:	f7ef fb8f 	bl	8000638 <__aeabi_dmul>
 8010f1a:	4b52      	ldr	r3, [pc, #328]	@ (8011064 <__ieee754_pow+0x414>)
 8010f1c:	4682      	mov	sl, r0
 8010f1e:	468b      	mov	fp, r1
 8010f20:	2200      	movs	r2, #0
 8010f22:	4620      	mov	r0, r4
 8010f24:	4629      	mov	r1, r5
 8010f26:	f7ef fb87 	bl	8000638 <__aeabi_dmul>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	a148      	add	r1, pc, #288	@ (adr r1, 8011050 <__ieee754_pow+0x400>)
 8010f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f34:	f7ef f9c8 	bl	80002c8 <__aeabi_dsub>
 8010f38:	4622      	mov	r2, r4
 8010f3a:	462b      	mov	r3, r5
 8010f3c:	f7ef fb7c 	bl	8000638 <__aeabi_dmul>
 8010f40:	4602      	mov	r2, r0
 8010f42:	460b      	mov	r3, r1
 8010f44:	2000      	movs	r0, #0
 8010f46:	4948      	ldr	r1, [pc, #288]	@ (8011068 <__ieee754_pow+0x418>)
 8010f48:	f7ef f9be 	bl	80002c8 <__aeabi_dsub>
 8010f4c:	4622      	mov	r2, r4
 8010f4e:	4680      	mov	r8, r0
 8010f50:	4689      	mov	r9, r1
 8010f52:	462b      	mov	r3, r5
 8010f54:	4620      	mov	r0, r4
 8010f56:	4629      	mov	r1, r5
 8010f58:	f7ef fb6e 	bl	8000638 <__aeabi_dmul>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4640      	mov	r0, r8
 8010f62:	4649      	mov	r1, r9
 8010f64:	f7ef fb68 	bl	8000638 <__aeabi_dmul>
 8010f68:	a33b      	add	r3, pc, #236	@ (adr r3, 8011058 <__ieee754_pow+0x408>)
 8010f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6e:	f7ef fb63 	bl	8000638 <__aeabi_dmul>
 8010f72:	4602      	mov	r2, r0
 8010f74:	460b      	mov	r3, r1
 8010f76:	4650      	mov	r0, sl
 8010f78:	4659      	mov	r1, fp
 8010f7a:	f7ef f9a5 	bl	80002c8 <__aeabi_dsub>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	460b      	mov	r3, r1
 8010f82:	4680      	mov	r8, r0
 8010f84:	4689      	mov	r9, r1
 8010f86:	4630      	mov	r0, r6
 8010f88:	4639      	mov	r1, r7
 8010f8a:	f7ef f99f 	bl	80002cc <__adddf3>
 8010f8e:	2400      	movs	r4, #0
 8010f90:	4632      	mov	r2, r6
 8010f92:	463b      	mov	r3, r7
 8010f94:	4620      	mov	r0, r4
 8010f96:	460d      	mov	r5, r1
 8010f98:	f7ef f996 	bl	80002c8 <__aeabi_dsub>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	4640      	mov	r0, r8
 8010fa2:	4649      	mov	r1, r9
 8010fa4:	f7ef f990 	bl	80002c8 <__aeabi_dsub>
 8010fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010fb8:	4606      	mov	r6, r0
 8010fba:	460f      	mov	r7, r1
 8010fbc:	4652      	mov	r2, sl
 8010fbe:	465b      	mov	r3, fp
 8010fc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fc4:	f7ef f980 	bl	80002c8 <__aeabi_dsub>
 8010fc8:	4622      	mov	r2, r4
 8010fca:	462b      	mov	r3, r5
 8010fcc:	f7ef fb34 	bl	8000638 <__aeabi_dmul>
 8010fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fd4:	4680      	mov	r8, r0
 8010fd6:	4689      	mov	r9, r1
 8010fd8:	4630      	mov	r0, r6
 8010fda:	4639      	mov	r1, r7
 8010fdc:	f7ef fb2c 	bl	8000638 <__aeabi_dmul>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	4640      	mov	r0, r8
 8010fe6:	4649      	mov	r1, r9
 8010fe8:	f7ef f970 	bl	80002cc <__adddf3>
 8010fec:	4652      	mov	r2, sl
 8010fee:	465b      	mov	r3, fp
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	460f      	mov	r7, r1
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	f7ef fb1e 	bl	8000638 <__aeabi_dmul>
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	4602      	mov	r2, r0
 8011000:	4680      	mov	r8, r0
 8011002:	4689      	mov	r9, r1
 8011004:	4630      	mov	r0, r6
 8011006:	4639      	mov	r1, r7
 8011008:	f7ef f960 	bl	80002cc <__adddf3>
 801100c:	4b17      	ldr	r3, [pc, #92]	@ (801106c <__ieee754_pow+0x41c>)
 801100e:	4299      	cmp	r1, r3
 8011010:	4604      	mov	r4, r0
 8011012:	460d      	mov	r5, r1
 8011014:	468a      	mov	sl, r1
 8011016:	468b      	mov	fp, r1
 8011018:	f340 82ef 	ble.w	80115fa <__ieee754_pow+0x9aa>
 801101c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011020:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8011024:	4303      	orrs	r3, r0
 8011026:	f000 81e8 	beq.w	80113fa <__ieee754_pow+0x7aa>
 801102a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801102e:	2200      	movs	r2, #0
 8011030:	2300      	movs	r3, #0
 8011032:	f7ef fd73 	bl	8000b1c <__aeabi_dcmplt>
 8011036:	3800      	subs	r0, #0
 8011038:	bf18      	it	ne
 801103a:	2001      	movne	r0, #1
 801103c:	e710      	b.n	8010e60 <__ieee754_pow+0x210>
 801103e:	bf00      	nop
 8011040:	60000000 	.word	0x60000000
 8011044:	3ff71547 	.word	0x3ff71547
 8011048:	f85ddf44 	.word	0xf85ddf44
 801104c:	3e54ae0b 	.word	0x3e54ae0b
 8011050:	55555555 	.word	0x55555555
 8011054:	3fd55555 	.word	0x3fd55555
 8011058:	652b82fe 	.word	0x652b82fe
 801105c:	3ff71547 	.word	0x3ff71547
 8011060:	3ff00000 	.word	0x3ff00000
 8011064:	3fd00000 	.word	0x3fd00000
 8011068:	3fe00000 	.word	0x3fe00000
 801106c:	408fffff 	.word	0x408fffff
 8011070:	4bd5      	ldr	r3, [pc, #852]	@ (80113c8 <__ieee754_pow+0x778>)
 8011072:	402b      	ands	r3, r5
 8011074:	2200      	movs	r2, #0
 8011076:	b92b      	cbnz	r3, 8011084 <__ieee754_pow+0x434>
 8011078:	4bd4      	ldr	r3, [pc, #848]	@ (80113cc <__ieee754_pow+0x77c>)
 801107a:	f7ef fadd 	bl	8000638 <__aeabi_dmul>
 801107e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8011082:	468b      	mov	fp, r1
 8011084:	ea4f 532b 	mov.w	r3, fp, asr #20
 8011088:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801108c:	4413      	add	r3, r2
 801108e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011090:	4bcf      	ldr	r3, [pc, #828]	@ (80113d0 <__ieee754_pow+0x780>)
 8011092:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8011096:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801109a:	459b      	cmp	fp, r3
 801109c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80110a0:	dd08      	ble.n	80110b4 <__ieee754_pow+0x464>
 80110a2:	4bcc      	ldr	r3, [pc, #816]	@ (80113d4 <__ieee754_pow+0x784>)
 80110a4:	459b      	cmp	fp, r3
 80110a6:	f340 81a5 	ble.w	80113f4 <__ieee754_pow+0x7a4>
 80110aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110ac:	3301      	adds	r3, #1
 80110ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80110b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80110b4:	f04f 0a00 	mov.w	sl, #0
 80110b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80110bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110be:	4bc6      	ldr	r3, [pc, #792]	@ (80113d8 <__ieee754_pow+0x788>)
 80110c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80110c4:	ed93 7b00 	vldr	d7, [r3]
 80110c8:	4629      	mov	r1, r5
 80110ca:	ec53 2b17 	vmov	r2, r3, d7
 80110ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110d6:	f7ef f8f7 	bl	80002c8 <__aeabi_dsub>
 80110da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80110de:	4606      	mov	r6, r0
 80110e0:	460f      	mov	r7, r1
 80110e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110e6:	f7ef f8f1 	bl	80002cc <__adddf3>
 80110ea:	4602      	mov	r2, r0
 80110ec:	460b      	mov	r3, r1
 80110ee:	2000      	movs	r0, #0
 80110f0:	49ba      	ldr	r1, [pc, #744]	@ (80113dc <__ieee754_pow+0x78c>)
 80110f2:	f7ef fbcb 	bl	800088c <__aeabi_ddiv>
 80110f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	4630      	mov	r0, r6
 8011100:	4639      	mov	r1, r7
 8011102:	f7ef fa99 	bl	8000638 <__aeabi_dmul>
 8011106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801110a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801110e:	106d      	asrs	r5, r5, #1
 8011110:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8011114:	f04f 0b00 	mov.w	fp, #0
 8011118:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801111c:	4661      	mov	r1, ip
 801111e:	2200      	movs	r2, #0
 8011120:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011124:	4658      	mov	r0, fp
 8011126:	46e1      	mov	r9, ip
 8011128:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801112c:	4614      	mov	r4, r2
 801112e:	461d      	mov	r5, r3
 8011130:	f7ef fa82 	bl	8000638 <__aeabi_dmul>
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4630      	mov	r0, r6
 801113a:	4639      	mov	r1, r7
 801113c:	f7ef f8c4 	bl	80002c8 <__aeabi_dsub>
 8011140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011144:	4606      	mov	r6, r0
 8011146:	460f      	mov	r7, r1
 8011148:	4620      	mov	r0, r4
 801114a:	4629      	mov	r1, r5
 801114c:	f7ef f8bc 	bl	80002c8 <__aeabi_dsub>
 8011150:	4602      	mov	r2, r0
 8011152:	460b      	mov	r3, r1
 8011154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011158:	f7ef f8b6 	bl	80002c8 <__aeabi_dsub>
 801115c:	465a      	mov	r2, fp
 801115e:	464b      	mov	r3, r9
 8011160:	f7ef fa6a 	bl	8000638 <__aeabi_dmul>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	4630      	mov	r0, r6
 801116a:	4639      	mov	r1, r7
 801116c:	f7ef f8ac 	bl	80002c8 <__aeabi_dsub>
 8011170:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011174:	f7ef fa60 	bl	8000638 <__aeabi_dmul>
 8011178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801117c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011180:	4610      	mov	r0, r2
 8011182:	4619      	mov	r1, r3
 8011184:	f7ef fa58 	bl	8000638 <__aeabi_dmul>
 8011188:	a37d      	add	r3, pc, #500	@ (adr r3, 8011380 <__ieee754_pow+0x730>)
 801118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118e:	4604      	mov	r4, r0
 8011190:	460d      	mov	r5, r1
 8011192:	f7ef fa51 	bl	8000638 <__aeabi_dmul>
 8011196:	a37c      	add	r3, pc, #496	@ (adr r3, 8011388 <__ieee754_pow+0x738>)
 8011198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119c:	f7ef f896 	bl	80002cc <__adddf3>
 80111a0:	4622      	mov	r2, r4
 80111a2:	462b      	mov	r3, r5
 80111a4:	f7ef fa48 	bl	8000638 <__aeabi_dmul>
 80111a8:	a379      	add	r3, pc, #484	@ (adr r3, 8011390 <__ieee754_pow+0x740>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	f7ef f88d 	bl	80002cc <__adddf3>
 80111b2:	4622      	mov	r2, r4
 80111b4:	462b      	mov	r3, r5
 80111b6:	f7ef fa3f 	bl	8000638 <__aeabi_dmul>
 80111ba:	a377      	add	r3, pc, #476	@ (adr r3, 8011398 <__ieee754_pow+0x748>)
 80111bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c0:	f7ef f884 	bl	80002cc <__adddf3>
 80111c4:	4622      	mov	r2, r4
 80111c6:	462b      	mov	r3, r5
 80111c8:	f7ef fa36 	bl	8000638 <__aeabi_dmul>
 80111cc:	a374      	add	r3, pc, #464	@ (adr r3, 80113a0 <__ieee754_pow+0x750>)
 80111ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d2:	f7ef f87b 	bl	80002cc <__adddf3>
 80111d6:	4622      	mov	r2, r4
 80111d8:	462b      	mov	r3, r5
 80111da:	f7ef fa2d 	bl	8000638 <__aeabi_dmul>
 80111de:	a372      	add	r3, pc, #456	@ (adr r3, 80113a8 <__ieee754_pow+0x758>)
 80111e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e4:	f7ef f872 	bl	80002cc <__adddf3>
 80111e8:	4622      	mov	r2, r4
 80111ea:	4606      	mov	r6, r0
 80111ec:	460f      	mov	r7, r1
 80111ee:	462b      	mov	r3, r5
 80111f0:	4620      	mov	r0, r4
 80111f2:	4629      	mov	r1, r5
 80111f4:	f7ef fa20 	bl	8000638 <__aeabi_dmul>
 80111f8:	4602      	mov	r2, r0
 80111fa:	460b      	mov	r3, r1
 80111fc:	4630      	mov	r0, r6
 80111fe:	4639      	mov	r1, r7
 8011200:	f7ef fa1a 	bl	8000638 <__aeabi_dmul>
 8011204:	465a      	mov	r2, fp
 8011206:	4604      	mov	r4, r0
 8011208:	460d      	mov	r5, r1
 801120a:	464b      	mov	r3, r9
 801120c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011210:	f7ef f85c 	bl	80002cc <__adddf3>
 8011214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011218:	f7ef fa0e 	bl	8000638 <__aeabi_dmul>
 801121c:	4622      	mov	r2, r4
 801121e:	462b      	mov	r3, r5
 8011220:	f7ef f854 	bl	80002cc <__adddf3>
 8011224:	465a      	mov	r2, fp
 8011226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801122a:	464b      	mov	r3, r9
 801122c:	4658      	mov	r0, fp
 801122e:	4649      	mov	r1, r9
 8011230:	f7ef fa02 	bl	8000638 <__aeabi_dmul>
 8011234:	4b6a      	ldr	r3, [pc, #424]	@ (80113e0 <__ieee754_pow+0x790>)
 8011236:	2200      	movs	r2, #0
 8011238:	4606      	mov	r6, r0
 801123a:	460f      	mov	r7, r1
 801123c:	f7ef f846 	bl	80002cc <__adddf3>
 8011240:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011244:	f7ef f842 	bl	80002cc <__adddf3>
 8011248:	46d8      	mov	r8, fp
 801124a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801124e:	460d      	mov	r5, r1
 8011250:	465a      	mov	r2, fp
 8011252:	460b      	mov	r3, r1
 8011254:	4640      	mov	r0, r8
 8011256:	4649      	mov	r1, r9
 8011258:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801125c:	f7ef f9ec 	bl	8000638 <__aeabi_dmul>
 8011260:	465c      	mov	r4, fp
 8011262:	4680      	mov	r8, r0
 8011264:	4689      	mov	r9, r1
 8011266:	4b5e      	ldr	r3, [pc, #376]	@ (80113e0 <__ieee754_pow+0x790>)
 8011268:	2200      	movs	r2, #0
 801126a:	4620      	mov	r0, r4
 801126c:	4629      	mov	r1, r5
 801126e:	f7ef f82b 	bl	80002c8 <__aeabi_dsub>
 8011272:	4632      	mov	r2, r6
 8011274:	463b      	mov	r3, r7
 8011276:	f7ef f827 	bl	80002c8 <__aeabi_dsub>
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011282:	f7ef f821 	bl	80002c8 <__aeabi_dsub>
 8011286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801128a:	f7ef f9d5 	bl	8000638 <__aeabi_dmul>
 801128e:	4622      	mov	r2, r4
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	462b      	mov	r3, r5
 8011296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801129a:	f7ef f9cd 	bl	8000638 <__aeabi_dmul>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	4630      	mov	r0, r6
 80112a4:	4639      	mov	r1, r7
 80112a6:	f7ef f811 	bl	80002cc <__adddf3>
 80112aa:	4606      	mov	r6, r0
 80112ac:	460f      	mov	r7, r1
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	4640      	mov	r0, r8
 80112b4:	4649      	mov	r1, r9
 80112b6:	f7ef f809 	bl	80002cc <__adddf3>
 80112ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80112be:	a33c      	add	r3, pc, #240	@ (adr r3, 80113b0 <__ieee754_pow+0x760>)
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	4658      	mov	r0, fp
 80112c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80112ca:	460d      	mov	r5, r1
 80112cc:	f7ef f9b4 	bl	8000638 <__aeabi_dmul>
 80112d0:	465c      	mov	r4, fp
 80112d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112d6:	4642      	mov	r2, r8
 80112d8:	464b      	mov	r3, r9
 80112da:	4620      	mov	r0, r4
 80112dc:	4629      	mov	r1, r5
 80112de:	f7ee fff3 	bl	80002c8 <__aeabi_dsub>
 80112e2:	4602      	mov	r2, r0
 80112e4:	460b      	mov	r3, r1
 80112e6:	4630      	mov	r0, r6
 80112e8:	4639      	mov	r1, r7
 80112ea:	f7ee ffed 	bl	80002c8 <__aeabi_dsub>
 80112ee:	a332      	add	r3, pc, #200	@ (adr r3, 80113b8 <__ieee754_pow+0x768>)
 80112f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f4:	f7ef f9a0 	bl	8000638 <__aeabi_dmul>
 80112f8:	a331      	add	r3, pc, #196	@ (adr r3, 80113c0 <__ieee754_pow+0x770>)
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	4606      	mov	r6, r0
 8011300:	460f      	mov	r7, r1
 8011302:	4620      	mov	r0, r4
 8011304:	4629      	mov	r1, r5
 8011306:	f7ef f997 	bl	8000638 <__aeabi_dmul>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4630      	mov	r0, r6
 8011310:	4639      	mov	r1, r7
 8011312:	f7ee ffdb 	bl	80002cc <__adddf3>
 8011316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011318:	4b32      	ldr	r3, [pc, #200]	@ (80113e4 <__ieee754_pow+0x794>)
 801131a:	4413      	add	r3, r2
 801131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011320:	f7ee ffd4 	bl	80002cc <__adddf3>
 8011324:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011328:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801132a:	f7ef f91b 	bl	8000564 <__aeabi_i2d>
 801132e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011330:	4b2d      	ldr	r3, [pc, #180]	@ (80113e8 <__ieee754_pow+0x798>)
 8011332:	4413      	add	r3, r2
 8011334:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011338:	4606      	mov	r6, r0
 801133a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801133e:	460f      	mov	r7, r1
 8011340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011344:	f7ee ffc2 	bl	80002cc <__adddf3>
 8011348:	4642      	mov	r2, r8
 801134a:	464b      	mov	r3, r9
 801134c:	f7ee ffbe 	bl	80002cc <__adddf3>
 8011350:	4632      	mov	r2, r6
 8011352:	463b      	mov	r3, r7
 8011354:	f7ee ffba 	bl	80002cc <__adddf3>
 8011358:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801135c:	4632      	mov	r2, r6
 801135e:	463b      	mov	r3, r7
 8011360:	4658      	mov	r0, fp
 8011362:	460d      	mov	r5, r1
 8011364:	f7ee ffb0 	bl	80002c8 <__aeabi_dsub>
 8011368:	4642      	mov	r2, r8
 801136a:	464b      	mov	r3, r9
 801136c:	f7ee ffac 	bl	80002c8 <__aeabi_dsub>
 8011370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011374:	f7ee ffa8 	bl	80002c8 <__aeabi_dsub>
 8011378:	465c      	mov	r4, fp
 801137a:	4602      	mov	r2, r0
 801137c:	e036      	b.n	80113ec <__ieee754_pow+0x79c>
 801137e:	bf00      	nop
 8011380:	4a454eef 	.word	0x4a454eef
 8011384:	3fca7e28 	.word	0x3fca7e28
 8011388:	93c9db65 	.word	0x93c9db65
 801138c:	3fcd864a 	.word	0x3fcd864a
 8011390:	a91d4101 	.word	0xa91d4101
 8011394:	3fd17460 	.word	0x3fd17460
 8011398:	518f264d 	.word	0x518f264d
 801139c:	3fd55555 	.word	0x3fd55555
 80113a0:	db6fabff 	.word	0xdb6fabff
 80113a4:	3fdb6db6 	.word	0x3fdb6db6
 80113a8:	33333303 	.word	0x33333303
 80113ac:	3fe33333 	.word	0x3fe33333
 80113b0:	e0000000 	.word	0xe0000000
 80113b4:	3feec709 	.word	0x3feec709
 80113b8:	dc3a03fd 	.word	0xdc3a03fd
 80113bc:	3feec709 	.word	0x3feec709
 80113c0:	145b01f5 	.word	0x145b01f5
 80113c4:	be3e2fe0 	.word	0xbe3e2fe0
 80113c8:	7ff00000 	.word	0x7ff00000
 80113cc:	43400000 	.word	0x43400000
 80113d0:	0003988e 	.word	0x0003988e
 80113d4:	000bb679 	.word	0x000bb679
 80113d8:	08012500 	.word	0x08012500
 80113dc:	3ff00000 	.word	0x3ff00000
 80113e0:	40080000 	.word	0x40080000
 80113e4:	080124e0 	.word	0x080124e0
 80113e8:	080124f0 	.word	0x080124f0
 80113ec:	460b      	mov	r3, r1
 80113ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113f2:	e5d7      	b.n	8010fa4 <__ieee754_pow+0x354>
 80113f4:	f04f 0a01 	mov.w	sl, #1
 80113f8:	e65e      	b.n	80110b8 <__ieee754_pow+0x468>
 80113fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 80116cc <__ieee754_pow+0xa7c>)
 80113fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011400:	4630      	mov	r0, r6
 8011402:	4639      	mov	r1, r7
 8011404:	f7ee ff62 	bl	80002cc <__adddf3>
 8011408:	4642      	mov	r2, r8
 801140a:	e9cd 0100 	strd	r0, r1, [sp]
 801140e:	464b      	mov	r3, r9
 8011410:	4620      	mov	r0, r4
 8011412:	4629      	mov	r1, r5
 8011414:	f7ee ff58 	bl	80002c8 <__aeabi_dsub>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011420:	f7ef fb9a 	bl	8000b58 <__aeabi_dcmpgt>
 8011424:	2800      	cmp	r0, #0
 8011426:	f47f ae00 	bne.w	801102a <__ieee754_pow+0x3da>
 801142a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801142e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011432:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8011436:	fa43 fa0a 	asr.w	sl, r3, sl
 801143a:	44da      	add	sl, fp
 801143c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011440:	489d      	ldr	r0, [pc, #628]	@ (80116b8 <__ieee754_pow+0xa68>)
 8011442:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011446:	4108      	asrs	r0, r1
 8011448:	ea00 030a 	and.w	r3, r0, sl
 801144c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011450:	f1c1 0114 	rsb	r1, r1, #20
 8011454:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011458:	fa4a fa01 	asr.w	sl, sl, r1
 801145c:	f1bb 0f00 	cmp.w	fp, #0
 8011460:	4640      	mov	r0, r8
 8011462:	4649      	mov	r1, r9
 8011464:	f04f 0200 	mov.w	r2, #0
 8011468:	bfb8      	it	lt
 801146a:	f1ca 0a00 	rsblt	sl, sl, #0
 801146e:	f7ee ff2b 	bl	80002c8 <__aeabi_dsub>
 8011472:	4680      	mov	r8, r0
 8011474:	4689      	mov	r9, r1
 8011476:	4632      	mov	r2, r6
 8011478:	463b      	mov	r3, r7
 801147a:	4640      	mov	r0, r8
 801147c:	4649      	mov	r1, r9
 801147e:	f7ee ff25 	bl	80002cc <__adddf3>
 8011482:	2400      	movs	r4, #0
 8011484:	a37c      	add	r3, pc, #496	@ (adr r3, 8011678 <__ieee754_pow+0xa28>)
 8011486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148a:	4620      	mov	r0, r4
 801148c:	460d      	mov	r5, r1
 801148e:	f7ef f8d3 	bl	8000638 <__aeabi_dmul>
 8011492:	4642      	mov	r2, r8
 8011494:	e9cd 0100 	strd	r0, r1, [sp]
 8011498:	464b      	mov	r3, r9
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	f7ee ff13 	bl	80002c8 <__aeabi_dsub>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	4630      	mov	r0, r6
 80114a8:	4639      	mov	r1, r7
 80114aa:	f7ee ff0d 	bl	80002c8 <__aeabi_dsub>
 80114ae:	a374      	add	r3, pc, #464	@ (adr r3, 8011680 <__ieee754_pow+0xa30>)
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	f7ef f8c0 	bl	8000638 <__aeabi_dmul>
 80114b8:	a373      	add	r3, pc, #460	@ (adr r3, 8011688 <__ieee754_pow+0xa38>)
 80114ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114be:	4680      	mov	r8, r0
 80114c0:	4689      	mov	r9, r1
 80114c2:	4620      	mov	r0, r4
 80114c4:	4629      	mov	r1, r5
 80114c6:	f7ef f8b7 	bl	8000638 <__aeabi_dmul>
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	4640      	mov	r0, r8
 80114d0:	4649      	mov	r1, r9
 80114d2:	f7ee fefb 	bl	80002cc <__adddf3>
 80114d6:	4604      	mov	r4, r0
 80114d8:	460d      	mov	r5, r1
 80114da:	4602      	mov	r2, r0
 80114dc:	460b      	mov	r3, r1
 80114de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114e2:	f7ee fef3 	bl	80002cc <__adddf3>
 80114e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114ea:	4680      	mov	r8, r0
 80114ec:	4689      	mov	r9, r1
 80114ee:	f7ee feeb 	bl	80002c8 <__aeabi_dsub>
 80114f2:	4602      	mov	r2, r0
 80114f4:	460b      	mov	r3, r1
 80114f6:	4620      	mov	r0, r4
 80114f8:	4629      	mov	r1, r5
 80114fa:	f7ee fee5 	bl	80002c8 <__aeabi_dsub>
 80114fe:	4642      	mov	r2, r8
 8011500:	4606      	mov	r6, r0
 8011502:	460f      	mov	r7, r1
 8011504:	464b      	mov	r3, r9
 8011506:	4640      	mov	r0, r8
 8011508:	4649      	mov	r1, r9
 801150a:	f7ef f895 	bl	8000638 <__aeabi_dmul>
 801150e:	a360      	add	r3, pc, #384	@ (adr r3, 8011690 <__ieee754_pow+0xa40>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	4604      	mov	r4, r0
 8011516:	460d      	mov	r5, r1
 8011518:	f7ef f88e 	bl	8000638 <__aeabi_dmul>
 801151c:	a35e      	add	r3, pc, #376	@ (adr r3, 8011698 <__ieee754_pow+0xa48>)
 801151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011522:	f7ee fed1 	bl	80002c8 <__aeabi_dsub>
 8011526:	4622      	mov	r2, r4
 8011528:	462b      	mov	r3, r5
 801152a:	f7ef f885 	bl	8000638 <__aeabi_dmul>
 801152e:	a35c      	add	r3, pc, #368	@ (adr r3, 80116a0 <__ieee754_pow+0xa50>)
 8011530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011534:	f7ee feca 	bl	80002cc <__adddf3>
 8011538:	4622      	mov	r2, r4
 801153a:	462b      	mov	r3, r5
 801153c:	f7ef f87c 	bl	8000638 <__aeabi_dmul>
 8011540:	a359      	add	r3, pc, #356	@ (adr r3, 80116a8 <__ieee754_pow+0xa58>)
 8011542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011546:	f7ee febf 	bl	80002c8 <__aeabi_dsub>
 801154a:	4622      	mov	r2, r4
 801154c:	462b      	mov	r3, r5
 801154e:	f7ef f873 	bl	8000638 <__aeabi_dmul>
 8011552:	a357      	add	r3, pc, #348	@ (adr r3, 80116b0 <__ieee754_pow+0xa60>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	f7ee feb8 	bl	80002cc <__adddf3>
 801155c:	4622      	mov	r2, r4
 801155e:	462b      	mov	r3, r5
 8011560:	f7ef f86a 	bl	8000638 <__aeabi_dmul>
 8011564:	4602      	mov	r2, r0
 8011566:	460b      	mov	r3, r1
 8011568:	4640      	mov	r0, r8
 801156a:	4649      	mov	r1, r9
 801156c:	f7ee feac 	bl	80002c8 <__aeabi_dsub>
 8011570:	4604      	mov	r4, r0
 8011572:	460d      	mov	r5, r1
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	4640      	mov	r0, r8
 801157a:	4649      	mov	r1, r9
 801157c:	f7ef f85c 	bl	8000638 <__aeabi_dmul>
 8011580:	2200      	movs	r2, #0
 8011582:	e9cd 0100 	strd	r0, r1, [sp]
 8011586:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801158a:	4620      	mov	r0, r4
 801158c:	4629      	mov	r1, r5
 801158e:	f7ee fe9b 	bl	80002c8 <__aeabi_dsub>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	e9dd 0100 	ldrd	r0, r1, [sp]
 801159a:	f7ef f977 	bl	800088c <__aeabi_ddiv>
 801159e:	4632      	mov	r2, r6
 80115a0:	4604      	mov	r4, r0
 80115a2:	460d      	mov	r5, r1
 80115a4:	463b      	mov	r3, r7
 80115a6:	4640      	mov	r0, r8
 80115a8:	4649      	mov	r1, r9
 80115aa:	f7ef f845 	bl	8000638 <__aeabi_dmul>
 80115ae:	4632      	mov	r2, r6
 80115b0:	463b      	mov	r3, r7
 80115b2:	f7ee fe8b 	bl	80002cc <__adddf3>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4620      	mov	r0, r4
 80115bc:	4629      	mov	r1, r5
 80115be:	f7ee fe83 	bl	80002c8 <__aeabi_dsub>
 80115c2:	4642      	mov	r2, r8
 80115c4:	464b      	mov	r3, r9
 80115c6:	f7ee fe7f 	bl	80002c8 <__aeabi_dsub>
 80115ca:	460b      	mov	r3, r1
 80115cc:	4602      	mov	r2, r0
 80115ce:	493b      	ldr	r1, [pc, #236]	@ (80116bc <__ieee754_pow+0xa6c>)
 80115d0:	2000      	movs	r0, #0
 80115d2:	f7ee fe79 	bl	80002c8 <__aeabi_dsub>
 80115d6:	ec41 0b10 	vmov	d0, r0, r1
 80115da:	ee10 3a90 	vmov	r3, s1
 80115de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80115e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115e6:	da30      	bge.n	801164a <__ieee754_pow+0x9fa>
 80115e8:	4650      	mov	r0, sl
 80115ea:	f000 fbd1 	bl	8011d90 <scalbn>
 80115ee:	ec51 0b10 	vmov	r0, r1, d0
 80115f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115f6:	f7ff bbd2 	b.w	8010d9e <__ieee754_pow+0x14e>
 80115fa:	4c31      	ldr	r4, [pc, #196]	@ (80116c0 <__ieee754_pow+0xa70>)
 80115fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011600:	42a3      	cmp	r3, r4
 8011602:	d91a      	bls.n	801163a <__ieee754_pow+0x9ea>
 8011604:	4b2f      	ldr	r3, [pc, #188]	@ (80116c4 <__ieee754_pow+0xa74>)
 8011606:	440b      	add	r3, r1
 8011608:	4303      	orrs	r3, r0
 801160a:	d009      	beq.n	8011620 <__ieee754_pow+0x9d0>
 801160c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011610:	2200      	movs	r2, #0
 8011612:	2300      	movs	r3, #0
 8011614:	f7ef fa82 	bl	8000b1c <__aeabi_dcmplt>
 8011618:	3800      	subs	r0, #0
 801161a:	bf18      	it	ne
 801161c:	2001      	movne	r0, #1
 801161e:	e42b      	b.n	8010e78 <__ieee754_pow+0x228>
 8011620:	4642      	mov	r2, r8
 8011622:	464b      	mov	r3, r9
 8011624:	f7ee fe50 	bl	80002c8 <__aeabi_dsub>
 8011628:	4632      	mov	r2, r6
 801162a:	463b      	mov	r3, r7
 801162c:	f7ef fa8a 	bl	8000b44 <__aeabi_dcmpge>
 8011630:	2800      	cmp	r0, #0
 8011632:	d1eb      	bne.n	801160c <__ieee754_pow+0x9bc>
 8011634:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80116d4 <__ieee754_pow+0xa84>
 8011638:	e6f7      	b.n	801142a <__ieee754_pow+0x7da>
 801163a:	469a      	mov	sl, r3
 801163c:	4b22      	ldr	r3, [pc, #136]	@ (80116c8 <__ieee754_pow+0xa78>)
 801163e:	459a      	cmp	sl, r3
 8011640:	f63f aef3 	bhi.w	801142a <__ieee754_pow+0x7da>
 8011644:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011648:	e715      	b.n	8011476 <__ieee754_pow+0x826>
 801164a:	ec51 0b10 	vmov	r0, r1, d0
 801164e:	4619      	mov	r1, r3
 8011650:	e7cf      	b.n	80115f2 <__ieee754_pow+0x9a2>
 8011652:	491a      	ldr	r1, [pc, #104]	@ (80116bc <__ieee754_pow+0xa6c>)
 8011654:	2000      	movs	r0, #0
 8011656:	f7ff bb18 	b.w	8010c8a <__ieee754_pow+0x3a>
 801165a:	2000      	movs	r0, #0
 801165c:	2100      	movs	r1, #0
 801165e:	f7ff bb14 	b.w	8010c8a <__ieee754_pow+0x3a>
 8011662:	4630      	mov	r0, r6
 8011664:	4639      	mov	r1, r7
 8011666:	f7ff bb10 	b.w	8010c8a <__ieee754_pow+0x3a>
 801166a:	460c      	mov	r4, r1
 801166c:	f7ff bb5e 	b.w	8010d2c <__ieee754_pow+0xdc>
 8011670:	2400      	movs	r4, #0
 8011672:	f7ff bb49 	b.w	8010d08 <__ieee754_pow+0xb8>
 8011676:	bf00      	nop
 8011678:	00000000 	.word	0x00000000
 801167c:	3fe62e43 	.word	0x3fe62e43
 8011680:	fefa39ef 	.word	0xfefa39ef
 8011684:	3fe62e42 	.word	0x3fe62e42
 8011688:	0ca86c39 	.word	0x0ca86c39
 801168c:	be205c61 	.word	0xbe205c61
 8011690:	72bea4d0 	.word	0x72bea4d0
 8011694:	3e663769 	.word	0x3e663769
 8011698:	c5d26bf1 	.word	0xc5d26bf1
 801169c:	3ebbbd41 	.word	0x3ebbbd41
 80116a0:	af25de2c 	.word	0xaf25de2c
 80116a4:	3f11566a 	.word	0x3f11566a
 80116a8:	16bebd93 	.word	0x16bebd93
 80116ac:	3f66c16c 	.word	0x3f66c16c
 80116b0:	5555553e 	.word	0x5555553e
 80116b4:	3fc55555 	.word	0x3fc55555
 80116b8:	fff00000 	.word	0xfff00000
 80116bc:	3ff00000 	.word	0x3ff00000
 80116c0:	4090cbff 	.word	0x4090cbff
 80116c4:	3f6f3400 	.word	0x3f6f3400
 80116c8:	3fe00000 	.word	0x3fe00000
 80116cc:	652b82fe 	.word	0x652b82fe
 80116d0:	3c971547 	.word	0x3c971547
 80116d4:	4090cc00 	.word	0x4090cc00

080116d8 <fabs>:
 80116d8:	ec51 0b10 	vmov	r0, r1, d0
 80116dc:	4602      	mov	r2, r0
 80116de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80116e2:	ec43 2b10 	vmov	d0, r2, r3
 80116e6:	4770      	bx	lr

080116e8 <__ieee754_acosf>:
 80116e8:	b508      	push	{r3, lr}
 80116ea:	ee10 3a10 	vmov	r3, s0
 80116ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80116f2:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80116f6:	ed2d 8b0c 	vpush	{d8-d13}
 80116fa:	d10a      	bne.n	8011712 <__ieee754_acosf+0x2a>
 80116fc:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8011894 <__ieee754_acosf+0x1ac>
 8011700:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8011898 <__ieee754_acosf+0x1b0>
 8011704:	2b00      	cmp	r3, #0
 8011706:	bfc8      	it	gt
 8011708:	eeb0 0a67 	vmovgt.f32	s0, s15
 801170c:	ecbd 8b0c 	vpop	{d8-d13}
 8011710:	bd08      	pop	{r3, pc}
 8011712:	d904      	bls.n	801171e <__ieee754_acosf+0x36>
 8011714:	ee30 8a40 	vsub.f32	s16, s0, s0
 8011718:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801171c:	e7f6      	b.n	801170c <__ieee754_acosf+0x24>
 801171e:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8011722:	d23c      	bcs.n	801179e <__ieee754_acosf+0xb6>
 8011724:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8011728:	f240 80b1 	bls.w	801188e <__ieee754_acosf+0x1a6>
 801172c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011730:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801189c <__ieee754_acosf+0x1b4>
 8011734:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80118a0 <__ieee754_acosf+0x1b8>
 8011738:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80118a4 <__ieee754_acosf+0x1bc>
 801173c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011740:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80118a8 <__ieee754_acosf+0x1c0>
 8011744:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011748:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80118ac <__ieee754_acosf+0x1c4>
 801174c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011750:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80118b0 <__ieee754_acosf+0x1c8>
 8011754:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011758:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80118b4 <__ieee754_acosf+0x1cc>
 801175c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011760:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80118b8 <__ieee754_acosf+0x1d0>
 8011764:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011768:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80118bc <__ieee754_acosf+0x1d4>
 801176c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011770:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80118c0 <__ieee754_acosf+0x1d8>
 8011774:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801177c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011784:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80118c4 <__ieee754_acosf+0x1dc>
 8011788:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801178c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8011790:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011794:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80118c8 <__ieee754_acosf+0x1e0>
 8011798:	ee30 0a67 	vsub.f32	s0, s0, s15
 801179c:	e7b6      	b.n	801170c <__ieee754_acosf+0x24>
 801179e:	2b00      	cmp	r3, #0
 80117a0:	eddf da3e 	vldr	s27, [pc, #248]	@ 801189c <__ieee754_acosf+0x1b4>
 80117a4:	eddf ca3e 	vldr	s25, [pc, #248]	@ 80118a0 <__ieee754_acosf+0x1b8>
 80117a8:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 80118a8 <__ieee754_acosf+0x1c0>
 80117ac:	eddf ba3f 	vldr	s23, [pc, #252]	@ 80118ac <__ieee754_acosf+0x1c4>
 80117b0:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 80118b0 <__ieee754_acosf+0x1c8>
 80117b4:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 80118b4 <__ieee754_acosf+0x1cc>
 80117b8:	ed9f da3f 	vldr	s26, [pc, #252]	@ 80118b8 <__ieee754_acosf+0x1d0>
 80117bc:	eddf aa39 	vldr	s21, [pc, #228]	@ 80118a4 <__ieee754_acosf+0x1bc>
 80117c0:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80118bc <__ieee754_acosf+0x1d4>
 80117c4:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 80118c0 <__ieee754_acosf+0x1d8>
 80117c8:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80117cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80117d0:	da28      	bge.n	8011824 <__ieee754_acosf+0x13c>
 80117d2:	ee30 8a09 	vadd.f32	s16, s0, s18
 80117d6:	ee28 0a27 	vmul.f32	s0, s16, s15
 80117da:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80117de:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80117e2:	eeac ca80 	vfma.f32	s24, s25, s0
 80117e6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80117ea:	eeec ba00 	vfma.f32	s23, s24, s0
 80117ee:	eeea 9a00 	vfma.f32	s19, s20, s0
 80117f2:	eeab ba80 	vfma.f32	s22, s23, s0
 80117f6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80117fa:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80117fe:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011802:	f7ff f9a3 	bl	8010b4c <__ieee754_sqrtf>
 8011806:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801180a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80118cc <__ieee754_acosf+0x1e4>
 801180e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011812:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8011816:	ee77 7a80 	vadd.f32	s15, s15, s0
 801181a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80118d0 <__ieee754_acosf+0x1e8>
 801181e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011822:	e773      	b.n	801170c <__ieee754_acosf+0x24>
 8011824:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011828:	ee28 8a27 	vmul.f32	s16, s16, s15
 801182c:	eeb0 0a48 	vmov.f32	s0, s16
 8011830:	f7ff f98c 	bl	8010b4c <__ieee754_sqrtf>
 8011834:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8011838:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801183c:	eeac ca88 	vfma.f32	s24, s25, s16
 8011840:	eeaa aa88 	vfma.f32	s20, s21, s16
 8011844:	eeec ba08 	vfma.f32	s23, s24, s16
 8011848:	ee10 3a10 	vmov	r3, s0
 801184c:	eeab ba88 	vfma.f32	s22, s23, s16
 8011850:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011854:	f023 030f 	bic.w	r3, r3, #15
 8011858:	eeea 9a08 	vfma.f32	s19, s20, s16
 801185c:	ee07 3a90 	vmov	s15, r3
 8011860:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011864:	eeb0 6a48 	vmov.f32	s12, s16
 8011868:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801186c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011870:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011874:	ee68 8a88 	vmul.f32	s17, s17, s16
 8011878:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801187c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011880:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011884:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011888:	ee30 0a00 	vadd.f32	s0, s0, s0
 801188c:	e73e      	b.n	801170c <__ieee754_acosf+0x24>
 801188e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80118d4 <__ieee754_acosf+0x1ec>
 8011892:	e73b      	b.n	801170c <__ieee754_acosf+0x24>
 8011894:	40490fdb 	.word	0x40490fdb
 8011898:	00000000 	.word	0x00000000
 801189c:	3811ef08 	.word	0x3811ef08
 80118a0:	3a4f7f04 	.word	0x3a4f7f04
 80118a4:	bf303361 	.word	0xbf303361
 80118a8:	bd241146 	.word	0xbd241146
 80118ac:	3e4e0aa8 	.word	0x3e4e0aa8
 80118b0:	bea6b090 	.word	0xbea6b090
 80118b4:	3e2aaaab 	.word	0x3e2aaaab
 80118b8:	3d9dc62e 	.word	0x3d9dc62e
 80118bc:	4001572d 	.word	0x4001572d
 80118c0:	c019d139 	.word	0xc019d139
 80118c4:	33a22168 	.word	0x33a22168
 80118c8:	3fc90fda 	.word	0x3fc90fda
 80118cc:	b3a22168 	.word	0xb3a22168
 80118d0:	40490fda 	.word	0x40490fda
 80118d4:	3fc90fdb 	.word	0x3fc90fdb

080118d8 <__ieee754_asinf>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	ee10 5a10 	vmov	r5, s0
 80118de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80118e2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80118e6:	ed2d 8b04 	vpush	{d8-d9}
 80118ea:	d10c      	bne.n	8011906 <__ieee754_asinf+0x2e>
 80118ec:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011a64 <__ieee754_asinf+0x18c>
 80118f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011a68 <__ieee754_asinf+0x190>
 80118f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80118f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80118fc:	eeb0 0a67 	vmov.f32	s0, s15
 8011900:	ecbd 8b04 	vpop	{d8-d9}
 8011904:	bd38      	pop	{r3, r4, r5, pc}
 8011906:	d904      	bls.n	8011912 <__ieee754_asinf+0x3a>
 8011908:	ee70 7a40 	vsub.f32	s15, s0, s0
 801190c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011910:	e7f6      	b.n	8011900 <__ieee754_asinf+0x28>
 8011912:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011916:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801191a:	d20b      	bcs.n	8011934 <__ieee754_asinf+0x5c>
 801191c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011920:	d252      	bcs.n	80119c8 <__ieee754_asinf+0xf0>
 8011922:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011a6c <__ieee754_asinf+0x194>
 8011926:	ee70 7a27 	vadd.f32	s15, s0, s15
 801192a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011932:	dce5      	bgt.n	8011900 <__ieee754_asinf+0x28>
 8011934:	f7fe ffc8 	bl	80108c8 <fabsf>
 8011938:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801193c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011940:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011944:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011a70 <__ieee754_asinf+0x198>
 8011948:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011a74 <__ieee754_asinf+0x19c>
 801194c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011a78 <__ieee754_asinf+0x1a0>
 8011950:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011954:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011a7c <__ieee754_asinf+0x1a4>
 8011958:	eee7 7a08 	vfma.f32	s15, s14, s16
 801195c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011a80 <__ieee754_asinf+0x1a8>
 8011960:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011964:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011a84 <__ieee754_asinf+0x1ac>
 8011968:	eee7 7a08 	vfma.f32	s15, s14, s16
 801196c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011a88 <__ieee754_asinf+0x1b0>
 8011970:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011974:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011a8c <__ieee754_asinf+0x1b4>
 8011978:	eee8 7a07 	vfma.f32	s15, s16, s14
 801197c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011a90 <__ieee754_asinf+0x1b8>
 8011980:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011984:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011a94 <__ieee754_asinf+0x1bc>
 8011988:	eee7 7a08 	vfma.f32	s15, s14, s16
 801198c:	eeb0 0a48 	vmov.f32	s0, s16
 8011990:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011994:	f7ff f8da 	bl	8010b4c <__ieee754_sqrtf>
 8011998:	4b3f      	ldr	r3, [pc, #252]	@ (8011a98 <__ieee754_asinf+0x1c0>)
 801199a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801199e:	429c      	cmp	r4, r3
 80119a0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80119a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80119a8:	d93d      	bls.n	8011a26 <__ieee754_asinf+0x14e>
 80119aa:	eea0 0a06 	vfma.f32	s0, s0, s12
 80119ae:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011a9c <__ieee754_asinf+0x1c4>
 80119b2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80119b6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011a68 <__ieee754_asinf+0x190>
 80119ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119be:	2d00      	cmp	r5, #0
 80119c0:	bfd8      	it	le
 80119c2:	eeb1 0a40 	vnegle.f32	s0, s0
 80119c6:	e79b      	b.n	8011900 <__ieee754_asinf+0x28>
 80119c8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80119cc:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011a74 <__ieee754_asinf+0x19c>
 80119d0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011a70 <__ieee754_asinf+0x198>
 80119d4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011a88 <__ieee754_asinf+0x1b0>
 80119d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80119dc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011a7c <__ieee754_asinf+0x1a4>
 80119e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119e4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011a80 <__ieee754_asinf+0x1a8>
 80119e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119ec:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011a84 <__ieee754_asinf+0x1ac>
 80119f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119f4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011a78 <__ieee754_asinf+0x1a0>
 80119f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119fc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011a8c <__ieee754_asinf+0x1b4>
 8011a00:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011a04:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011a90 <__ieee754_asinf+0x1b8>
 8011a08:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011a0c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011a94 <__ieee754_asinf+0x1bc>
 8011a10:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a18:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011a1c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011a20:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011a24:	e76c      	b.n	8011900 <__ieee754_asinf+0x28>
 8011a26:	ee10 3a10 	vmov	r3, s0
 8011a2a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011a2e:	f023 030f 	bic.w	r3, r3, #15
 8011a32:	ee07 3a10 	vmov	s14, r3
 8011a36:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011a3a:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011a3e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011a42:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011a64 <__ieee754_asinf+0x18c>
 8011a46:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011a4a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011aa0 <__ieee754_asinf+0x1c8>
 8011a4e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011a52:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011a56:	eeb0 6a40 	vmov.f32	s12, s0
 8011a5a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011a5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011a62:	e7aa      	b.n	80119ba <__ieee754_asinf+0xe2>
 8011a64:	b33bbd2e 	.word	0xb33bbd2e
 8011a68:	3fc90fdb 	.word	0x3fc90fdb
 8011a6c:	7149f2ca 	.word	0x7149f2ca
 8011a70:	3a4f7f04 	.word	0x3a4f7f04
 8011a74:	3811ef08 	.word	0x3811ef08
 8011a78:	3e2aaaab 	.word	0x3e2aaaab
 8011a7c:	bd241146 	.word	0xbd241146
 8011a80:	3e4e0aa8 	.word	0x3e4e0aa8
 8011a84:	bea6b090 	.word	0xbea6b090
 8011a88:	3d9dc62e 	.word	0x3d9dc62e
 8011a8c:	bf303361 	.word	0xbf303361
 8011a90:	4001572d 	.word	0x4001572d
 8011a94:	c019d139 	.word	0xc019d139
 8011a98:	3f799999 	.word	0x3f799999
 8011a9c:	333bbd2e 	.word	0x333bbd2e
 8011aa0:	3f490fdb 	.word	0x3f490fdb

08011aa4 <__ieee754_atan2f>:
 8011aa4:	ee10 2a90 	vmov	r2, s1
 8011aa8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011aac:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011ab0:	b510      	push	{r4, lr}
 8011ab2:	eef0 7a40 	vmov.f32	s15, s0
 8011ab6:	d806      	bhi.n	8011ac6 <__ieee754_atan2f+0x22>
 8011ab8:	ee10 0a10 	vmov	r0, s0
 8011abc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011ac0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ac4:	d904      	bls.n	8011ad0 <__ieee754_atan2f+0x2c>
 8011ac6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011aca:	eeb0 0a67 	vmov.f32	s0, s15
 8011ace:	bd10      	pop	{r4, pc}
 8011ad0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011ad4:	d103      	bne.n	8011ade <__ieee754_atan2f+0x3a>
 8011ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ada:	f000 b883 	b.w	8011be4 <atanf>
 8011ade:	1794      	asrs	r4, r2, #30
 8011ae0:	f004 0402 	and.w	r4, r4, #2
 8011ae4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011ae8:	b943      	cbnz	r3, 8011afc <__ieee754_atan2f+0x58>
 8011aea:	2c02      	cmp	r4, #2
 8011aec:	d05e      	beq.n	8011bac <__ieee754_atan2f+0x108>
 8011aee:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011bc0 <__ieee754_atan2f+0x11c>
 8011af2:	2c03      	cmp	r4, #3
 8011af4:	bf08      	it	eq
 8011af6:	eef0 7a47 	vmoveq.f32	s15, s14
 8011afa:	e7e6      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011afc:	b941      	cbnz	r1, 8011b10 <__ieee754_atan2f+0x6c>
 8011afe:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011bc4 <__ieee754_atan2f+0x120>
 8011b02:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011bc8 <__ieee754_atan2f+0x124>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	bfb8      	it	lt
 8011b0a:	eef0 7a47 	vmovlt.f32	s15, s14
 8011b0e:	e7dc      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011b10:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b14:	d110      	bne.n	8011b38 <__ieee754_atan2f+0x94>
 8011b16:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8011b1e:	d107      	bne.n	8011b30 <__ieee754_atan2f+0x8c>
 8011b20:	2c02      	cmp	r4, #2
 8011b22:	d846      	bhi.n	8011bb2 <__ieee754_atan2f+0x10e>
 8011b24:	4b29      	ldr	r3, [pc, #164]	@ (8011bcc <__ieee754_atan2f+0x128>)
 8011b26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b2a:	edd3 7a00 	vldr	s15, [r3]
 8011b2e:	e7cc      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011b30:	2c02      	cmp	r4, #2
 8011b32:	d841      	bhi.n	8011bb8 <__ieee754_atan2f+0x114>
 8011b34:	4b26      	ldr	r3, [pc, #152]	@ (8011bd0 <__ieee754_atan2f+0x12c>)
 8011b36:	e7f6      	b.n	8011b26 <__ieee754_atan2f+0x82>
 8011b38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b3c:	d0df      	beq.n	8011afe <__ieee754_atan2f+0x5a>
 8011b3e:	1a5b      	subs	r3, r3, r1
 8011b40:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011b44:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011b48:	da1a      	bge.n	8011b80 <__ieee754_atan2f+0xdc>
 8011b4a:	2a00      	cmp	r2, #0
 8011b4c:	da01      	bge.n	8011b52 <__ieee754_atan2f+0xae>
 8011b4e:	313c      	adds	r1, #60	@ 0x3c
 8011b50:	db19      	blt.n	8011b86 <__ieee754_atan2f+0xe2>
 8011b52:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011b56:	f7fe feb7 	bl	80108c8 <fabsf>
 8011b5a:	f000 f843 	bl	8011be4 <atanf>
 8011b5e:	eef0 7a40 	vmov.f32	s15, s0
 8011b62:	2c01      	cmp	r4, #1
 8011b64:	d012      	beq.n	8011b8c <__ieee754_atan2f+0xe8>
 8011b66:	2c02      	cmp	r4, #2
 8011b68:	d017      	beq.n	8011b9a <__ieee754_atan2f+0xf6>
 8011b6a:	2c00      	cmp	r4, #0
 8011b6c:	d0ad      	beq.n	8011aca <__ieee754_atan2f+0x26>
 8011b6e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011bd4 <__ieee754_atan2f+0x130>
 8011b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b76:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011bd8 <__ieee754_atan2f+0x134>
 8011b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b7e:	e7a4      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011b80:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011bc4 <__ieee754_atan2f+0x120>
 8011b84:	e7ed      	b.n	8011b62 <__ieee754_atan2f+0xbe>
 8011b86:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011bdc <__ieee754_atan2f+0x138>
 8011b8a:	e7ea      	b.n	8011b62 <__ieee754_atan2f+0xbe>
 8011b8c:	ee17 3a90 	vmov	r3, s15
 8011b90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011b94:	ee07 3a90 	vmov	s15, r3
 8011b98:	e797      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011b9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011bd4 <__ieee754_atan2f+0x130>
 8011b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ba2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011bd8 <__ieee754_atan2f+0x134>
 8011ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011baa:	e78e      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011bac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011bd8 <__ieee754_atan2f+0x134>
 8011bb0:	e78b      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011bb2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011be0 <__ieee754_atan2f+0x13c>
 8011bb6:	e788      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011bb8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011bdc <__ieee754_atan2f+0x138>
 8011bbc:	e785      	b.n	8011aca <__ieee754_atan2f+0x26>
 8011bbe:	bf00      	nop
 8011bc0:	c0490fdb 	.word	0xc0490fdb
 8011bc4:	3fc90fdb 	.word	0x3fc90fdb
 8011bc8:	bfc90fdb 	.word	0xbfc90fdb
 8011bcc:	0801251c 	.word	0x0801251c
 8011bd0:	08012510 	.word	0x08012510
 8011bd4:	33bbbd2e 	.word	0x33bbbd2e
 8011bd8:	40490fdb 	.word	0x40490fdb
 8011bdc:	00000000 	.word	0x00000000
 8011be0:	3f490fdb 	.word	0x3f490fdb

08011be4 <atanf>:
 8011be4:	b538      	push	{r3, r4, r5, lr}
 8011be6:	ee10 5a10 	vmov	r5, s0
 8011bea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011bee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011bf2:	eef0 7a40 	vmov.f32	s15, s0
 8011bf6:	d310      	bcc.n	8011c1a <atanf+0x36>
 8011bf8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011bfc:	d904      	bls.n	8011c08 <atanf+0x24>
 8011bfe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011c02:	eeb0 0a67 	vmov.f32	s0, s15
 8011c06:	bd38      	pop	{r3, r4, r5, pc}
 8011c08:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011d40 <atanf+0x15c>
 8011c0c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011d44 <atanf+0x160>
 8011c10:	2d00      	cmp	r5, #0
 8011c12:	bfc8      	it	gt
 8011c14:	eef0 7a47 	vmovgt.f32	s15, s14
 8011c18:	e7f3      	b.n	8011c02 <atanf+0x1e>
 8011c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8011d48 <atanf+0x164>)
 8011c1c:	429c      	cmp	r4, r3
 8011c1e:	d810      	bhi.n	8011c42 <atanf+0x5e>
 8011c20:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011c24:	d20a      	bcs.n	8011c3c <atanf+0x58>
 8011c26:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011d4c <atanf+0x168>
 8011c2a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c32:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3a:	dce2      	bgt.n	8011c02 <atanf+0x1e>
 8011c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c40:	e013      	b.n	8011c6a <atanf+0x86>
 8011c42:	f7fe fe41 	bl	80108c8 <fabsf>
 8011c46:	4b42      	ldr	r3, [pc, #264]	@ (8011d50 <atanf+0x16c>)
 8011c48:	429c      	cmp	r4, r3
 8011c4a:	d84f      	bhi.n	8011cec <atanf+0x108>
 8011c4c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011c50:	429c      	cmp	r4, r3
 8011c52:	d841      	bhi.n	8011cd8 <atanf+0xf4>
 8011c54:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011c58:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011c5c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011c60:	2300      	movs	r3, #0
 8011c62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011c70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011d54 <atanf+0x170>
 8011c74:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011d58 <atanf+0x174>
 8011c78:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011d5c <atanf+0x178>
 8011c7c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011c80:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011c84:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011d60 <atanf+0x17c>
 8011c88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011c8c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011d64 <atanf+0x180>
 8011c90:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011c94:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011d68 <atanf+0x184>
 8011c98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011c9c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011d6c <atanf+0x188>
 8011ca0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011ca4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011d70 <atanf+0x18c>
 8011ca8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011cac:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011d74 <atanf+0x190>
 8011cb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011cb4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011d78 <atanf+0x194>
 8011cb8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011cbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011d7c <atanf+0x198>
 8011cc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011cc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011cc8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011cd0:	d121      	bne.n	8011d16 <atanf+0x132>
 8011cd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cd6:	e794      	b.n	8011c02 <atanf+0x1e>
 8011cd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011cdc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011ce0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011cea:	e7be      	b.n	8011c6a <atanf+0x86>
 8011cec:	4b24      	ldr	r3, [pc, #144]	@ (8011d80 <atanf+0x19c>)
 8011cee:	429c      	cmp	r4, r3
 8011cf0:	d80b      	bhi.n	8011d0a <atanf+0x126>
 8011cf2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011cfa:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011cfe:	2302      	movs	r3, #2
 8011d00:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d08:	e7af      	b.n	8011c6a <atanf+0x86>
 8011d0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011d0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d12:	2303      	movs	r3, #3
 8011d14:	e7a9      	b.n	8011c6a <atanf+0x86>
 8011d16:	4a1b      	ldr	r2, [pc, #108]	@ (8011d84 <atanf+0x1a0>)
 8011d18:	491b      	ldr	r1, [pc, #108]	@ (8011d88 <atanf+0x1a4>)
 8011d1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011d1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d22:	edd3 6a00 	vldr	s13, [r3]
 8011d26:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d2a:	2d00      	cmp	r5, #0
 8011d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d30:	edd2 7a00 	vldr	s15, [r2]
 8011d34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d38:	bfb8      	it	lt
 8011d3a:	eef1 7a67 	vneglt.f32	s15, s15
 8011d3e:	e760      	b.n	8011c02 <atanf+0x1e>
 8011d40:	bfc90fdb 	.word	0xbfc90fdb
 8011d44:	3fc90fdb 	.word	0x3fc90fdb
 8011d48:	3edfffff 	.word	0x3edfffff
 8011d4c:	7149f2ca 	.word	0x7149f2ca
 8011d50:	3f97ffff 	.word	0x3f97ffff
 8011d54:	3c8569d7 	.word	0x3c8569d7
 8011d58:	3d4bda59 	.word	0x3d4bda59
 8011d5c:	bd6ef16b 	.word	0xbd6ef16b
 8011d60:	3d886b35 	.word	0x3d886b35
 8011d64:	3dba2e6e 	.word	0x3dba2e6e
 8011d68:	3e124925 	.word	0x3e124925
 8011d6c:	3eaaaaab 	.word	0x3eaaaaab
 8011d70:	bd15a221 	.word	0xbd15a221
 8011d74:	bd9d8795 	.word	0xbd9d8795
 8011d78:	bde38e38 	.word	0xbde38e38
 8011d7c:	be4ccccd 	.word	0xbe4ccccd
 8011d80:	401bffff 	.word	0x401bffff
 8011d84:	08012538 	.word	0x08012538
 8011d88:	08012528 	.word	0x08012528
 8011d8c:	00000000 	.word	0x00000000

08011d90 <scalbn>:
 8011d90:	b570      	push	{r4, r5, r6, lr}
 8011d92:	ec55 4b10 	vmov	r4, r5, d0
 8011d96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011d9a:	4606      	mov	r6, r0
 8011d9c:	462b      	mov	r3, r5
 8011d9e:	b991      	cbnz	r1, 8011dc6 <scalbn+0x36>
 8011da0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011da4:	4323      	orrs	r3, r4
 8011da6:	d03d      	beq.n	8011e24 <scalbn+0x94>
 8011da8:	4b35      	ldr	r3, [pc, #212]	@ (8011e80 <scalbn+0xf0>)
 8011daa:	4620      	mov	r0, r4
 8011dac:	4629      	mov	r1, r5
 8011dae:	2200      	movs	r2, #0
 8011db0:	f7ee fc42 	bl	8000638 <__aeabi_dmul>
 8011db4:	4b33      	ldr	r3, [pc, #204]	@ (8011e84 <scalbn+0xf4>)
 8011db6:	429e      	cmp	r6, r3
 8011db8:	4604      	mov	r4, r0
 8011dba:	460d      	mov	r5, r1
 8011dbc:	da0f      	bge.n	8011dde <scalbn+0x4e>
 8011dbe:	a328      	add	r3, pc, #160	@ (adr r3, 8011e60 <scalbn+0xd0>)
 8011dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc4:	e01e      	b.n	8011e04 <scalbn+0x74>
 8011dc6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011dca:	4291      	cmp	r1, r2
 8011dcc:	d10b      	bne.n	8011de6 <scalbn+0x56>
 8011dce:	4622      	mov	r2, r4
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	f7ee fa7a 	bl	80002cc <__adddf3>
 8011dd8:	4604      	mov	r4, r0
 8011dda:	460d      	mov	r5, r1
 8011ddc:	e022      	b.n	8011e24 <scalbn+0x94>
 8011dde:	460b      	mov	r3, r1
 8011de0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011de4:	3936      	subs	r1, #54	@ 0x36
 8011de6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011dea:	4296      	cmp	r6, r2
 8011dec:	dd0d      	ble.n	8011e0a <scalbn+0x7a>
 8011dee:	2d00      	cmp	r5, #0
 8011df0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011e68 <scalbn+0xd8>)
 8011df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011df6:	da02      	bge.n	8011dfe <scalbn+0x6e>
 8011df8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011e70 <scalbn+0xe0>)
 8011dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dfe:	a31a      	add	r3, pc, #104	@ (adr r3, 8011e68 <scalbn+0xd8>)
 8011e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e04:	f7ee fc18 	bl	8000638 <__aeabi_dmul>
 8011e08:	e7e6      	b.n	8011dd8 <scalbn+0x48>
 8011e0a:	1872      	adds	r2, r6, r1
 8011e0c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011e10:	428a      	cmp	r2, r1
 8011e12:	dcec      	bgt.n	8011dee <scalbn+0x5e>
 8011e14:	2a00      	cmp	r2, #0
 8011e16:	dd08      	ble.n	8011e2a <scalbn+0x9a>
 8011e18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e1c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011e20:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e24:	ec45 4b10 	vmov	d0, r4, r5
 8011e28:	bd70      	pop	{r4, r5, r6, pc}
 8011e2a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011e2e:	da08      	bge.n	8011e42 <scalbn+0xb2>
 8011e30:	2d00      	cmp	r5, #0
 8011e32:	a10b      	add	r1, pc, #44	@ (adr r1, 8011e60 <scalbn+0xd0>)
 8011e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e38:	dac1      	bge.n	8011dbe <scalbn+0x2e>
 8011e3a:	a10f      	add	r1, pc, #60	@ (adr r1, 8011e78 <scalbn+0xe8>)
 8011e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e40:	e7bd      	b.n	8011dbe <scalbn+0x2e>
 8011e42:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e46:	3236      	adds	r2, #54	@ 0x36
 8011e48:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011e4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e50:	4620      	mov	r0, r4
 8011e52:	4b0d      	ldr	r3, [pc, #52]	@ (8011e88 <scalbn+0xf8>)
 8011e54:	4629      	mov	r1, r5
 8011e56:	2200      	movs	r2, #0
 8011e58:	e7d4      	b.n	8011e04 <scalbn+0x74>
 8011e5a:	bf00      	nop
 8011e5c:	f3af 8000 	nop.w
 8011e60:	c2f8f359 	.word	0xc2f8f359
 8011e64:	01a56e1f 	.word	0x01a56e1f
 8011e68:	8800759c 	.word	0x8800759c
 8011e6c:	7e37e43c 	.word	0x7e37e43c
 8011e70:	8800759c 	.word	0x8800759c
 8011e74:	fe37e43c 	.word	0xfe37e43c
 8011e78:	c2f8f359 	.word	0xc2f8f359
 8011e7c:	81a56e1f 	.word	0x81a56e1f
 8011e80:	43500000 	.word	0x43500000
 8011e84:	ffff3cb0 	.word	0xffff3cb0
 8011e88:	3c900000 	.word	0x3c900000

08011e8c <with_errno>:
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	ed2d 8b02 	vpush	{d8}
 8011e92:	eeb0 8a40 	vmov.f32	s16, s0
 8011e96:	eef0 8a60 	vmov.f32	s17, s1
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	f7fa fd4e 	bl	800c93c <__errno>
 8011ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8011ea4:	eef0 0a68 	vmov.f32	s1, s17
 8011ea8:	ecbd 8b02 	vpop	{d8}
 8011eac:	6004      	str	r4, [r0, #0]
 8011eae:	bd10      	pop	{r4, pc}

08011eb0 <xflow>:
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	b507      	push	{r0, r1, r2, lr}
 8011eb4:	ec51 0b10 	vmov	r0, r1, d0
 8011eb8:	b183      	cbz	r3, 8011edc <xflow+0x2c>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8011ec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ec8:	f7ee fbb6 	bl	8000638 <__aeabi_dmul>
 8011ecc:	ec41 0b10 	vmov	d0, r0, r1
 8011ed0:	2022      	movs	r0, #34	@ 0x22
 8011ed2:	b003      	add	sp, #12
 8011ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ed8:	f7ff bfd8 	b.w	8011e8c <with_errno>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	e7ee      	b.n	8011ec0 <xflow+0x10>
 8011ee2:	0000      	movs	r0, r0
 8011ee4:	0000      	movs	r0, r0
	...

08011ee8 <__math_uflow>:
 8011ee8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011ef0 <__math_uflow+0x8>
 8011eec:	f7ff bfe0 	b.w	8011eb0 <xflow>
 8011ef0:	00000000 	.word	0x00000000
 8011ef4:	10000000 	.word	0x10000000

08011ef8 <__math_oflow>:
 8011ef8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011f00 <__math_oflow+0x8>
 8011efc:	f7ff bfd8 	b.w	8011eb0 <xflow>
 8011f00:	00000000 	.word	0x00000000
 8011f04:	70000000 	.word	0x70000000

08011f08 <_init>:
 8011f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f0a:	bf00      	nop
 8011f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f0e:	bc08      	pop	{r3}
 8011f10:	469e      	mov	lr, r3
 8011f12:	4770      	bx	lr

08011f14 <_fini>:
 8011f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f16:	bf00      	nop
 8011f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f1a:	bc08      	pop	{r3}
 8011f1c:	469e      	mov	lr, r3
 8011f1e:	4770      	bx	lr
